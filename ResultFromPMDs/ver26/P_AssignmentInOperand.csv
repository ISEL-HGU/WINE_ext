Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"while (((inputBytesRead = inStream.read(buffer, 0, bytesToread)) != -1) && bytesRemainingToRead > 0) {","while (((inputBytesRead=inStream.read(buffer,0,bytesToread)) != -1) && bytesRemainingToRead > 0) {
  outputStream.write(buffer,0,inputBytesRead);
  bytesRemainingToRead-=inputBytesRead;
  bytesToread=Math.min(BUFFER_SIZE,(int)bytesRemainingToRead);
}
",0,2669,9,23641,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
2,while ((file = file.getParentFile()) != null && !file.equals(dir) && file.list().length == 0) {,"while ((file=file.getParentFile()) != null && !file.equals(dir) && file.list().length == 0) {
  file.delete();
}
",0,4961,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
3,while (++pos < header.length() && WHITE.indexOf(header.charAt(pos)) != -1) {,"while (++pos < header.length() && WHITE.indexOf(header.charAt(pos)) != -1) {
}
",0,12,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
4,if(command.isReportErrors() && attempts++ <= 3 && cmd.getExitCode() == Constants.EXIT_CODE_UNKNOWN) {,"if (command.isReportErrors() && attempts++ <= 3 && cmd.getExitCode() == Constants.EXIT_CODE_UNKNOWN) {
  mLogger.warn(""Command exited with "" + cmd.getExitCode() + "", will retry: ""+ command);
  retry=true;
  TimeUnit.SECONDS.sleep(5);
}
",0,911,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
5,if (getEndpoint().getCredit() + --sendsInFlight <= (getConfiguredReceiverCredit() * .3)) {,"if (getEndpoint().getCredit() + --sendsInFlight <= (getConfiguredReceiverCredit() * .3)) {
  LOG.trace(""Sending more credit ({}) to producer: {}"",getConfiguredReceiverCredit() * .7,getProducerId());
  getEndpoint().flow((int)(getConfiguredReceiverCredit() * .7));
}
",0,1480,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
6,while ((result = scanner.next()) != null && (maxResultCount == -1 || events.size() < maxResultCount)) {,"while ((result=scanner.next()) != null && (maxResultCount == -1 || events.size() < maxResultCount)) {
  EntityAuditEventV2 event=fromKeyV2(result.getRow());
  if (StringUtils.isNotBlank(entityId) && !event.getEntityId().equals(entityId)) {
    continue;
  }
  event.setUser(getResultString(result,COLUMN_USER));
  event.setAction(EntityAuditActionV2.fromString(getResultString(result,COLUMN_ACTION)));
  event.setDetails(getResultString(result,COLUMN_DETAIL));
  if (persistEntityDefinition) {
    String colDef=getResultString(result,COLUMN_DEFINITION);
    if (colDef != null) {
      event.setEntityDefinition(colDef);
    }
  }
  events.add(event);
}
",0,59,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
7,while (((c = super.read()) != -1 && !filter.accept(c))) {,"while (((c=super.read()) != -1 && !filter.accept(c))) {
}
",0,8,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
"
8,while (i.hasNext() && (read++ < n || n == -1)) {,"while (i.hasNext() && (read++ < n || n == -1)) {
  buffer.add(i.next());
}
",0,969,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
9,if (range.infiniteStopKey || (cmp = range.stop.compareTo(currentRange.stop)) > 0,"if (range.infiniteStopKey || (cmp=range.stop.compareTo(currentRange.stop)) > 0 || (cmp == 0 && range.stopKeyInclusive)) {
  currentRange=new Range(currentRange.getStartKey(),currentStartKeyInclusive,range.getEndKey(),range.stopKeyInclusive);
}
",0,1014,6,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
10,if (i >= length - 1 || ((nextChar = pattern.charAt(i + 1)) != '%' && nextChar != '_',"if (i >= length - 1 || ((nextChar=pattern.charAt(i + 1)) != '%' && nextChar != '_' && nextChar != likeEscapeChar)) {
  throw new RuntimeDataException(ErrorCode.INVALID_LIKE_PATTERN,this.sourceLoc,pattern);
}
",0,524,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
11,while ((receivedTuples = CollectorOperator.receivedTuples.get(singleCollector.prefix + operators.get(0).getId())) == null || receivedTuples.size() < inputTuples.size()) {,"while ((receivedTuples=CollectorOperator.receivedTuples.get(singleCollector.prefix + operators.get(0).getId())) == null || receivedTuples.size() < inputTuples.size()) {
  LOG.debug(""Waiting for tuple: "" + operators.get(0) + "" expected: ""+ inputTuples+ "" received: ""+ receivedTuples);
  sleep(20);
}
",0,319,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
12,} else if (cancelledTaskModMetric > 0 && this.store.canceledTasks++ % cancelledTaskModMetric == 0) {,"if (cancelledTaskModMetric > 0 && this.store.canceledTasks++ % cancelledTaskModMetric == 0) {
  System.err.println(this.store.dest.getName() + "" cancelled: "" + (this.store.canceledTasks / this.store.doneTasks) * 100);
  this.store.canceledTasks=this.store.doneTasks=0;
}
",0,22,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
13,while ((status = tsqa.getStatus(taskId).get()).isRunnable()) {,"while ((status=tsqa.getStatus(taskId).get()).isRunnable()) {
  if (System.currentTimeMillis() > startTime + 10 * 1000) {
    throw new ISE(""Where did the task go?!: %s"",task.getId());
  }
  Thread.sleep(100);
}
",0,9,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
14,"while (!(newones = processDependencies(deps, moreRequested, availableInfos, brokenDependencies, tryUE, aggressive, null, false)).isEmpty()) {","while (!(newones=processDependencies(deps,moreRequested,availableInfos,brokenDependencies,tryUE,aggressive,null,false)).isEmpty()) {
  deps=newones;
}
",0,4,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
"
15,while (!influxDB.databaseExists(dbName) && (max-- < 0)) {,"while (!influxDB.databaseExists(dbName) && (max-- < 0)) {
  Thread.sleep(5);
}
",0,37,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
16,"if (result.size() > 1 && (gpuCapacities = ApiDBUtils.getGpuCapacites(result.get(0).getDataCenterId(), result.get(0).getPodId(), result.get(0).getClusterId())) != null) {","if (result.size() > 1 && (gpuCapacities=ApiDBUtils.getGpuCapacites(result.get(0).getDataCenterId(),result.get(0).getPodId(),result.get(0).getClusterId())) != null) {
  HashMap<String,Long> vgpuVMs=ApiDBUtils.getVgpuVmsCount(result.get(0).getDataCenterId(),result.get(0).getPodId(),result.get(0).getClusterId());
  float capacityUsed=0;
  long capacityMax=0;
  for (  VgpuTypesInfo capacity : gpuCapacities) {
    if (vgpuVMs.containsKey(capacity.getGroupName().concat(capacity.getModelName()))) {
      capacityUsed+=(float)vgpuVMs.get(capacity.getGroupName().concat(capacity.getModelName())) / capacity.getMaxVpuPerGpu();
    }
    if (capacity.getModelName().equals(GPU.GPUType.passthrough.toString())) {
      capacityMax+=capacity.getMaxCapacity();
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(result.get(0).getDataCenterId());
  CapacityResponse capacityResponse=new CapacityResponse();
  if (zone != null) {
    capacityResponse.setZoneId(zone.getUuid());
    capacityResponse.setZoneName(zone.getName());
  }
  if (result.get(0).getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(result.get(0).getPodId());
    capacityResponse.setPodId(pod.getUuid());
    capacityResponse.setPodName(pod.getName());
  }
  if (result.get(0).getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(result.get(0).getClusterId());
    capacityResponse.setClusterId(cluster.getUuid());
    capacityResponse.setClusterName(cluster.getName());
  }
  capacityResponse.setCapacityType(Capacity.CAPACITY_TYPE_GPU);
  capacityResponse.setCapacityName(CapacityVO.getCapacityName(Capacity.CAPACITY_TYPE_GPU));
  capacityResponse.setCapacityUsed((long)Math.ceil(capacityUsed));
  capacityResponse.setCapacityTotal(capacityMax);
  if (capacityMax > 0) {
    capacityResponse.setPercentUsed(format.format(capacityUsed / capacityMax * 100f));
  }
 else {
    capacityResponse.setPercentUsed(format.format(0));
  }
  capacityResponse.setObjectName(""capacity"");
  capacityResponses.add(capacityResponse);
}
",0,502,19,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
17,"if (roots.length == 0 || (files = Git.getInstance().getFileStatusCache().listFiles(new HashSet<File>(Arrays.asList(roots)), diffModeToStatusSet(diffMode))).length == 0) {","if (roots.length == 0 || (files=Git.getInstance().getFileStatusCache().listFiles(new HashSet<File>(Arrays.asList(roots)),diffModeToStatusSet(diffMode))).length == 0) {
  NotifyDescriptor msg=new NotifyDescriptor.Message(NbBundle.getMessage(ExportUncommittedChangesAction.class,""MSG_ExportUncommittedChangesAction.emptyContext""),NotifyDescriptor.INFORMATION_MESSAGE);
  DialogDisplayer.getDefault().notify(msg);
  return;
}
",0,1,16,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
18,while (!finished && (((hasNext = super.nextKeyValue()) == true) || remainder.length() > 0)) {,"while (!finished && (((hasNext=super.nextKeyValue()) == true) || remainder.length() > 0)) {
  if (hasNext) {
    finished=process(super.getCurrentValue());
  }
 else {
    finished=process(null);
  }
  if (finished) {
    startFound=false;
    counter++;
    return true;
  }
}
",0,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
19,while (count < (end - start) && (b = raf.read()) != -1) {,"while (count < (end - start) && (b=raf.read()) != -1) {
  os.write(b);
  if (count++ == middle && m_failure == Failure.ABORT_STREAM) {
    break;
  }
}
",0,15,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
20,while (tryCount-- > 0 && (raf.getFilePointer() + bytesNeeded) > raf.length()) {,"while (tryCount-- > 0 && (raf.getFilePointer() + bytesNeeded) > raf.length()) {
  LockSupport.parkNanos(1000L);
}
",0,34,7,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
21,while ((userAdmin.getRole(userName) == null) && (++count < 60)) {,"while ((userAdmin.getRole(userName) == null) && (++count < 60)) {
  Thread.sleep(100);
}
",0,12,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
22,if((op.getName() != null) && ((methodName = org.apache.axis2.util.JavaUtils.xmlNameToJavaIdentifier(op.getName().getLocalPart())) != null)){,"if ((op.getName() != null) && ((methodName=org.apache.axis2.util.JavaUtils.xmlNameToJavaIdentifier(op.getName().getLocalPart())) != null)) {
  if (""getCityTime"".equals(methodName)) {
    com.intalio.ws.timeservice.GetCityTimeResponse getCityTimeResponse1=null;
    com.intalio.ws.timeservice.GetCityTime wrappedParam=(com.intalio.ws.timeservice.GetCityTime)fromOM(msgContext.getEnvelope().getBody().getFirstElement(),com.intalio.ws.timeservice.GetCityTime.class,getEnvelopeNamespaces(msgContext.getEnvelope()));
    getCityTimeResponse1=skel.getCityTime(wrappedParam);
    envelope=toEnvelope(getSOAPFactory(msgContext),getCityTimeResponse1,false,new javax.xml.namespace.QName(""http://ws.intalio.com/TimeService/"",""getCityTime""));
  }
 else   if (""getUTCTime"".equals(methodName)) {
    com.intalio.ws.timeservice.GetUTCTimeResponse getUTCTimeResponse3=null;
    com.intalio.ws.timeservice.GetUTCTime wrappedParam=(com.intalio.ws.timeservice.GetUTCTime)fromOM(msgContext.getEnvelope().getBody().getFirstElement(),com.intalio.ws.timeservice.GetUTCTime.class,getEnvelopeNamespaces(msgContext.getEnvelope()));
    getUTCTimeResponse3=skel.getUTCTime(wrappedParam);
    envelope=toEnvelope(getSOAPFactory(msgContext),getUTCTimeResponse3,false,new javax.xml.namespace.QName(""http://ws.intalio.com/TimeService/"",""getUTCTime""));
  }
 else {
    throw new java.lang.RuntimeException(""method not found"");
  }
  newMsgContext.setEnvelope(envelope);
}
",0,265,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
23,if ((counter == -1) || ++counter != id) {,"if ((counter == -1) || ++counter != id) {
  counter=-1;
}
",0,38,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
24,"while ((length = httpConn.getInputStream().read(buf, 0, buf.length)) != -1) {","while ((length=httpConn.getInputStream().read(buf,0,buf.length)) != -1) {
  remoteSize+=length;
}
",0,146,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
25,"if ((in = MetaDataSupport.class.getResourceAsStream(""/"" + path + ""/version.txt"")) != null) {","if ((in=MetaDataSupport.class.getResourceAsStream(""/"" + path + ""/version.txt"")) != null) {
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(in,StandardCharsets.US_ASCII))){
    version=reader.readLine();
    Pattern pattern=Pattern.compile(""(\\d+)\\.(\\d+).*"");
    Matcher m=pattern.matcher(version);
    if (m.matches()) {
      major=Integer.parseInt(m.group(1));
      minor=Integer.parseInt(m.group(2));
    }
  }
 catch (  Throwable err) {
    LOG.trace(""Problem generating fallback version details"",err);
  }
}
",0,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
26,} else if (cancelledTaskModMetric > 0 && (++this.store.canceledTasks) % cancelledTaskModMetric == 0) {,"if (cancelledTaskModMetric > 0 && (++this.store.canceledTasks) % cancelledTaskModMetric == 0) {
  System.err.println(this.store.dest.getName() + "" cancelled: "" + (this.store.canceledTasks / this.store.doneTasks) * 100);
  this.store.canceledTasks=this.store.doneTasks=0;
}
",0,105,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
27,if ((++dropCount) % getReportInterval() == 0) {,"if ((++dropCount) % getReportInterval() == 0) {
  log.info(""Total of {} messages were discarded, since their destination was the dead letter queue"",dropCount);
}
",0,0,3,,"SimpleName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
28,if (++i > 10 && i % (size / 10) == 0) {,"if (++i > 10 && i % (size / 10) == 0) {
  long progress=Math.round((100.0 * (float)i) / (float)size);
  log.info(""progress: "" + progress + ""%"");
}
",0,92,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
29,if (maxReconnectAttempts > 0 && ++fanoutHandler.connectFailures >= maxReconnectAttempts) {,"if (maxReconnectAttempts > 0 && ++fanoutHandler.connectFailures >= maxReconnectAttempts) {
  LOG.error(""Failed to connect to transport after: "" + fanoutHandler.connectFailures + "" attempt(s)"");
  connectionFailure=e;
  reconnectMutex.notifyAll();
  return false;
}
 else {
  if (useExponentialBackOff) {
    fanoutHandler.reconnectDelay*=backOffMultiplier;
    if (fanoutHandler.reconnectDelay > maxReconnectDelay) {
      fanoutHandler.reconnectDelay=maxReconnectDelay;
    }
  }
  fanoutHandler.reconnectDate=now + fanoutHandler.reconnectDelay;
  if (closestReconnectDate == 0 || fanoutHandler.reconnectDate < closestReconnectDate) {
    closestReconnectDate=fanoutHandler.reconnectDate;
  }
}
",0,37,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
30,"if (""Ljava/util/Map"".equals(sigs[index++]) && ""Ljava/lang/String"".equals(sigs[index++])) {","if (""Ljava/util/Map"".equals(sigs[index++]) && ""Ljava/lang/String"".equals(sigs[index++])) {
  if (""Ljava/lang/Object"".equals(sigs[index]) || ""+Ljava/lang/Object"".equals(sigs[index])) {
    fieldCollectionType=FieldCollectionType.tuple;
    index+=3;
  }
 else   if (""*"".equals(sigs[index])) {
    fieldCollectionType=FieldCollectionType.tuple;
    index+=2;
  }
 else {
    index=sigLength;
  }
}
",0,84,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
31,if (remainingLength >= 4 && ((ch = buffer[i]) == 't' || ch == 'T') && ((ch = buffer[i + 1]) == 'r' || ch == 'R'),"if (remainingLength >= 4 && ((ch=buffer[i]) == 't' || ch == 'T') && ((ch=buffer[i + 1]) == 'r' || ch == 'R') && ((ch=buffer[i + 2]) == 'u' || ch == 'U') && ((ch=buffer[i + 3]) == 'e' || ch == 'E')) {
  gotBoolean=true;
  booleanValue=true;
  i=i + 4;
}
 else if (remainingLength >= 5 && ((ch=buffer[i]) == 'f' || ch == 'F') && ((ch=buffer[i + 1]) == 'a' || ch == 'A') && ((ch=buffer[i + 2]) == 'l' || ch == 'L') && ((ch=buffer[i + 3]) == 's' || ch == 'S') && ((ch=buffer[i + 4]) == 'e' || ch == 'E')) {
  gotBoolean=true;
  booleanValue=false;
  i=i + 5;
}
",0,243,15,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
32,"if (c.compare(a[runHi++], a[lo]) < 0) {","if (c.compare(a[runHi++],a[lo]) < 0) {
  while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)   runHi++;
  reverseRange(a,lo,runHi);
}
 else {
  while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)   runHi++;
}
",0,24,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
33,"if ((!tryOne & cur.isLeaf()) && !(tryOne = (cur.advanceLeafNode(forwards) || (cur = moveOutOfLeaf(forwards, cur, null)) != null)))","if ((!tryOne & cur.isLeaf()) && !(tryOne=(cur.advanceLeafNode(forwards) || (cur=moveOutOfLeaf(forwards,cur,null)) != null))) {
  this.cur=root();
  return false;
}
",0,144,13,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
34,"while(!latch.await(1, TimeUnit.SECONDS) && count++ < 20) {","while (!latch.await(1,TimeUnit.SECONDS) && count++ < 20) {
  System.out.println(""count "" + latch.getCount());
}
",0,22,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
35,while (count++ < 10 && broker1Count.get() + broker2Count.get() != total) {,"while (count++ < 10 && broker1Count.get() + broker2Count.get() != total) {
  LOG.info(""broker1Count "" + broker1Count.get() + "", broker2Count ""+ broker2Count.get());
  Thread.sleep(1000);
}
",0,0,7,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
36,while ((charFound = (char) (byteBuffer.get() & 0xff)) != ' ' || inblock) {,"while ((charFound=(char)(byteBuffer.get() & 0xff)) != ' ' || inblock) {
  if (charFound == '[') {
    inblock=true;
  }
  if (charFound == ']') {
    inblock=false;
  }
  structuredData.append(charFound);
}
",0,41,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
37,"while (end > 0 && (currentAnnotation = doc.getAnnotation(end - 1, key)) == null","while (end > 0 && (currentAnnotation=doc.getAnnotation(end - 1,key)) == null && attemptsLeft >= 0) {
  end--;
  attemptsLeft--;
}
",0,37,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
38,"while ((asmDesc.length() > 0) && (td = TypeDescriptor.fromString(asmDesc.substring(0, 1))) != null) {","while ((asmDesc.length() > 0) && (td=TypeDescriptor.fromString(asmDesc.substring(0,1))) != null) {
  returnStr.append(td.getDesc());
  for (int index=0; index < brkCount; index++) {
    returnStr.append(""[]"");
  }
  brkCount=0;
  returnStr.append(separator);
  asmDesc=asmDesc.substring(1);
}
",0,43,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
39,else if (!includePrimitiveTypes || cls.length() > 7 || (clazz = primitiveMap.get(cls)) == null) {,"if (!includePrimitiveTypes || cls.length() > 7 || (clazz=primitiveMap.get(cls)) == null) {
  try {
    clazz=Class.forName(cls);
  }
 catch (  ClassNotFoundException ignore) {
    clazz=dflt;
  }
}
",0,9,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
40,if (++consumerCount == maxConsumers + (watchTopicAdvisories ? 1:0)) {,"if (++consumerCount == maxConsumers + (watchTopicAdvisories ? 1 : 0)) {
  context.setDontSendReponse(true);
  Executors.newSingleThreadExecutor().execute(new Runnable(){
    public void run(){
      LOG.info(""Stopping broker on consumer: "" + info.getConsumerId());
      try {
        broker.stop();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
41,while ((obj = commandResponse.getIfPresent(requestId)) == null && expiryTime > System.currentTimeMillis()) {,"while ((obj=commandResponse.getIfPresent(requestId)) == null && expiryTime > System.currentTimeMillis()) {
  Thread.sleep(100);
  LOG.debug(""Polling for a response to request with Id {}"",requestId);
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
42,"while ((read = in.read(out, totalRead, out.length - totalRead - 1)) > 0) {","while ((read=in.read(out,totalRead,out.length - totalRead - 1)) > 0) {
  totalRead+=read;
  if (totalRead + 1 == out.length) {
    out=Arrays.copyOf(out,out.length + resizeBy);
  }
}
",0,15,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
43,if (parts[parts.length - 1].length() == 0 && --partsLo != 0) {,"if (parts[parts.length - 1].length() == 0 && --partsLo != 0) {
  return null;
}
",0,13,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
44,while (!exit && (reader != null && ((line = reader.readLine()) != null))) {,"while (!exit && (reader != null && ((line=reader.readLine()) != null))) {
  if ("""".equals(line)) {
    continue;
  }
  if (StringUtils.isNotBlank(line)) {
    execute(line);
    exit=CliConstants.EXIT_ACTION.equals(line.trim());
  }
}
",0,123,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
45,while ((stopped || (m = buffer.poll()) == null) && !closed && toWait > 0) {,"while ((stopped || (m=buffer.poll()) == null) && !closed && toWait > 0) {
  if (start == -1) {
    start=System.currentTimeMillis();
  }
  if (m == null && forcingDelivery) {
    if (stopped) {
      break;
    }
    if (!deliveryForced) {
      callForceDelivery=true;
      break;
    }
  }
  try {
    wait(toWait);
  }
 catch (  InterruptedException e) {
    throw new ActiveMQInterruptedException(e);
  }
  if (m != null || closed) {
    break;
  }
  long now=System.currentTimeMillis();
  toWait-=now - start;
  start=now;
}
",0,9,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
46,while (!(canWrite = channel.isWritable()) && (System.nanoTime() - deadline) < 0) {,"while (!(canWrite=channel.isWritable()) && (System.nanoTime() - deadline) < 0) {
  checkConnectionState();
  LockSupport.parkNanos(parkNanos);
}
",0,8,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
47,while ((parentFile = (File) this.treeWorkspace.getParent(parentFile)) != null) {,"while ((parentFile=(File)this.treeWorkspace.getParent(parentFile)) != null) {
  if (this.treeContainer.isRoot(parentFile)) {
    break;
  }
  id=parentFile.getName() + ""."" + id;
}
",0,38,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
48,"if ((textContent = XMLUtil.getTextContent(n)) != null && !"""".equals(textContent)) {","if ((textContent=XMLUtil.getTextContent(n)) != null && !"""".equals(textContent)) {
  sb.append(textContent).append(""</"").append(name).append('>');
}
 else {
  sb.append(""/>"").append('\n');
}
",0,9,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
49,"if (cfs == null || !cfs.isKeyCacheEnabled() || (reader = findDesc(generation, cfs.getSSTables(SSTableSet.CANONICAL))) == null)","if (cfs == null || !cfs.isKeyCacheEnabled() || (reader=findDesc(generation,cfs.getSSTables(SSTableSet.CANONICAL))) == null) {
  RowIndexEntry.Serializer.skipForCache(input);
  return null;
}
",0,98,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
50,"if (end > 1 && name.charAt(end) == ')' && (start = name.lastIndexOf('(', end-1)) >= 0) {","if (end > 1 && name.charAt(end) == ')' && (start=name.lastIndexOf('(',end - 1)) >= 0) {
  for (int np=end; (--np >= 0) && name.charAt(np) == ')'; ) {
    final int c=name.lastIndexOf('(',start - 1);
    if (c < 0) {
      warning(parent,element,Errors.formatInternational(Errors.Keys.NonEquilibratedParenthesis_2,'(',name),null);
      break;
    }
    start=c;
  }
  abbreviation=CharSequences.trimWhitespaces(name.substring(start + 1,end));
  name=CharSequences.trimWhitespaces(name.substring(0,start));
  if (name.isEmpty()) {
    name=abbreviation;
  }
}
 else {
  abbreviation=AxisDirections.suggestAbbreviation(name,direction,unit);
}
",0,2,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
51,if (currentPage != null && currentPage.getPageId() == pageId && (cache = currentPage.getLiveCache()) != null) {,"if (currentPage != null && currentPage.getPageId() == pageId && (cache=currentPage.getLiveCache()) != null) {
  softCache.put(cache.getPageId(),cache);
  return cache;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
52,if (frc != null && textComponent != null && ((font = textComponent.getFont()) != null)) {,"if (frc != null && textComponent != null && ((font=textComponent.getFont()) != null)) {
  fontInfos.clear();
  FontInfo defaultFontInfo=new FontInfo(font,textComponent,frc,rowHeightCorrection,textZoom);
  fontInfos.put(font,defaultFontInfo);
  fontInfos.put(null,defaultFontInfo);
  updateRowHeight(defaultFontInfo,true);
  defaultFont=font;
  defaultHintFont=font.deriveFont((float)(font.getSize2D() * 0.75));
  defaultCharWidth=defaultFontInfo.charWidth;
  tabTextLayout=null;
  singleCharTabTextLayout=null;
  newlineTextLayout=null;
  lineContinuationTextLayout=null;
  updateTextLimitLine(docView.getDocument());
  clearStatusBits(AVAILABLE_WIDTH_VALID);
  ViewHierarchyImpl.SETTINGS_LOG.fine(""updateCharMetrics(): FontRenderContext: AA="" + frc.isAntiAliased() + "", AATransformed=""+ frc.isTransformed()+ "", AAFractMetrics=""+ frc.usesFractionalMetrics()+ "", AAHint=""+ frc.getAntiAliasingHint()+ ""\n"");
}
",0,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
53,if (started && !stopping && notificationsSent++ < clusterNotificationAttempts) {,"if (started && !stopping && notificationsSent++ < clusterNotificationAttempts) {
  scheduledExecutor.schedule(this,clusterNotificationInterval,TimeUnit.MILLISECONDS);
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
54,while (!(canceled = cancelled()) && (size = bsrc.read (bytes)) != -1) {,"while (!(canceled=cancelled()) && (size=bsrc.read(bytes)) != -1) {
  if (bdest == null) {
    bdest=new BufferedOutputStream(new FileOutputStream(dest));
  }
  bdest.write(bytes,0,size);
  increment+=size;
  c+=size;
  if (!progressRunning && progress != null) {
    progress.switchToDeterminate(totalSize);
    progress.progress(label);
    progressRunning=true;
  }
  if (c > 1024) {
    if (progress != null) {
      assert progressRunning;
      progress.switchToDeterminate(totalSize);
      int i=aggregateDownload + (increment < estimatedSize ? increment : estimatedSize);
      progress.progress(label,i < totalSize ? i : totalSize);
    }
    c=0;
  }
}
",0,6,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
55,if(c1[i] instanceof JPanel && ++panelCount == 2) {,"if (c1[i] instanceof JPanel && ++panelCount == 2) {
  JPanel titlePanel=(JPanel)c1[i];
  Component[] c2=titlePanel.getComponents();
  if (c2 != null) {
    for (int j=0; j < c2.length; j++) {
      if (c2[j] instanceof JButton) {
        result=(JButton)c2[j];
        break;
      }
    }
  }
  break;
}
",0,10,5,,"SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
56,while ((backupServer.getClusterManager() == null || backupServer.getClusterManager().getClusterConnections().size() != 1) && nWaits++ < waitMillis / sleepTime) {,"while ((backupServer.getClusterManager() == null || backupServer.getClusterManager().getClusterConnections().size() != 1) && nWaits++ < waitMillis / sleepTime) {
  Thread.sleep(sleepTime);
}
",0,19,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
57,while (!(isBackupStarted = backupServer.isActive()) && System.currentTimeMillis() - startTime < waitTimeout) {,"while (!(isBackupStarted=backupServer.isActive()) && System.currentTimeMillis() - startTime < waitTimeout) {
  Thread.sleep(300);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
58,while ((args[loop] != null) && (i = args[loop].indexOf(optChar)) != -1) {,"while ((args[loop] != null) && (i=args[loop].indexOf(optChar)) != -1) {
  args[loop]=args[loop].substring(0,i) + args[loop].substring(i + 1);
  if (args[loop].length() == 1) {
    args[loop]=null;
  }
  value++;
  if (usedArgs == null) {
    usedArgs=new Vector();
  }
  usedArgs.add(""-"" + optChar);
}
",0,22,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
59,"while ((status = pollRequestStatus(requestId, failedHosts)).equals(PreUpgradeCheckStatus.RUNNING)","while ((status=pollRequestStatus(requestId,failedHosts)).equals(PreUpgradeCheckStatus.RUNNING) && retry++ < numTries) {
  if (retry != numTries) {
    Thread.sleep(retryInterval);
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
"
60,"while (!stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION"").isCompletedState()","while (!stages.get(0).getHostRoleStatus(null,""AMBARI_SERVER_ACTION"").isCompletedState() && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
  scheduler.doWork();
  scheduler.getServerActionExecutor().doWork();
}
",0,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
61,if ('$' == s.charAt(index) && '$' == s.charAt(++index)) {,"if ('$' == s.charAt(index) && '$' == s.charAt(++index)) {
  pos.setIndex(index);
}
",0,3,8,,"CharacterLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
62,while (length-- > 0 && (c = this.read()) != -1) {,"while (length-- > 0 && (c=this.read()) != -1) {
  buf[start++]=(char)c;
  count++;
}
",0,11,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
63,scanWhitespace: while ((c = super.read()) != -1) {,"while ((c=super.read()) != -1) {
switch (c) {
case ' ':
    if (++columnNumber == colNextTab) {
      numTabs++;
      countSpaces=0;
      colNextTab+=tabLength;
    }
 else {
      countSpaces++;
    }
  break;
case '\t':
columnNumber=colNextTab;
numTabs++;
countSpaces=0;
colNextTab+=tabLength;
break;
default :
push(c);
break scanWhitespace;
}
}
",0,0,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
64,while (--i >= 0 && line.charAt(i) == CTRLZ) {,"while (--i >= 0 && line.charAt(i) == CTRLZ) {
}
",0,5,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
65,"while ((start = lowerPositive(string.indexOf(""$$"", pos), string.indexOf(""${"", pos))) != -1)","while ((start=lowerPositive(string.indexOf(""$$"",pos),string.indexOf(""${"",pos))) != -1) {
  buffer.append(string.substring(pos,start));
  if (string.charAt(start + 1) == '$') {
    buffer.append(""$"");
    pos=start + 2;
    continue;
  }
  pos=start;
  final int startVariableName=start + 2;
  final int endVariableName=string.indexOf('}',startVariableName);
  if (endVariableName != -1) {
    final String variableName=string.substring(startVariableName,endVariableName);
    final String value=getValue(variableName);
    if (value == null) {
      if (exceptionOnNullVarValue) {
        throw new IllegalArgumentException(""Value of variable [["" + variableName + ""]] could not be resolved while interpolating [[""+ string+ ""]]"");
      }
 else {
        buffer.append(""${"").append(variableName).append(""}"");
      }
    }
 else {
      buffer.append(value);
    }
    pos=endVariableName + 1;
  }
 else {
    break;
  }
}
",0,16,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
66,"else if ((tmp = pigContext.getProperties().getProperty(""pig.maxCombinedSplitSize"", null)) != null) {","if ((tmp=pigContext.getProperties().getProperty(""pig.maxCombinedSplitSize"",null)) != null) {
  try {
    maxCombinedSplitSize=Long.parseLong(tmp);
  }
 catch (  NumberFormatException e) {
    log.warn(""Invalid numeric format for pig.maxCombinedSplitSize; use the default maximum combined split size"");
  }
}
",0,4,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
67,while ((caughtBuildException == null) && ((l = getNextTest(iter)) != null)) {,"while ((caughtBuildException == null) && ((l=getNextTest(iter)) != null)) {
  log(""Running test "" + l.get(0).toString() + ""(""+ l.size()+ "") in thread ""+ threadId,Project.MSG_VERBOSE);
  if (l.size() == 1) {
    execute(l.get(0),threadId);
  }
 else {
    execute(l,threadId);
  }
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
68,outer: while (limit!=0 && !nextLayer.isEmpty() && maxDepth-- != 0) {,"while (limit != 0 && !nextLayer.isEmpty() && maxDepth-- != 0) {
  Set<Task<?>> thisLayer=nextLayer;
  nextLayer=MutableSet.of();
  for (  final Task<?> childTask : thisLayer) {
    TaskSummary wasThere=result.put(childTask.getId(),TaskTransformer.fromTask(ui.getBaseUriBuilder()).apply(childTask));
    if (wasThere == null) {
      if (--limit == 0) {
        break outer;
      }
      if (childTask instanceof HasTaskChildren) {
        Iterables.addAll(nextLayer,((HasTaskChildren)childTask).getChildren());
      }
    }
  }
}
",0,30,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
69,for (int b; (destOffs < hi) && ((b = read0()) >= 0);) {,"for (int b; (destOffs < hi) && ((b=read0()) >= 0); ) {
  dest[destOffs++]=(byte)b;
}
",0,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
"
70,"if (!context.checkForEditorModifications() && ""file"".equals(indexable.getURL().getProtocol()) && (root = FileUtil.toFile(context.getRoot())) != null) {","if (!context.checkForEditorModifications() && ""file"".equals(indexable.getURL().getProtocol()) && (root=FileUtil.toFile(context.getRoot())) != null) {
  try {
    return new CompileTuple(FileObjects.fileFileObject(indexable,root,javaContext.getJavaFileFilter(),javaContext.getEncoding()),indexable);
  }
 catch (  Exception ex) {
  }
}
",0,1,13,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
71,"while (count < len && -1 != (n = input.read(buffer, 0, (int) Math.min(len - count, buffer.length)))) {","while (count < len && -1 != (n=input.read(buffer,0,(int)Math.min(len - count,buffer.length)))) {
  output.write(buffer,0,n);
  count+=n;
}
",0,74,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
72,"while (p < buf.length && (read = is.read(buf, p, buf.length - p)) != -1) {","while (p < buf.length && (read=is.read(buf,p,buf.length - p)) != -1) {
  p+=read;
}
",0,121,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
73,while ((cachedStore.getCacheUpdateCount() != (updateCountBefore + 1)) && (maxTries-- > 0)) {,"while ((cachedStore.getCacheUpdateCount() != (updateCountBefore + 1)) && (maxTries-- > 0)) {
  Thread.sleep(1000);
}
",0,8,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
74,if (!forwardingObservers.isEmpty() && !(annotatedType = pat.getAnnotatedType()).isAnnotationPresent(Service.class)) {,"if (!forwardingObservers.isEmpty() && !(annotatedType=pat.getAnnotatedType()).isAnnotationPresent(Service.class)) {
  forwardingObservers.stream().filter(predicateWithObserver -> predicateWithObserver.getKey().test(annotatedType)).map(Entry::getValue).forEach(observer -> observer.accept(beanManager,pat));
}
",0,9,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
75,"} else if ((offeringDetails  = _serviceOfferingDetailsDao.findDetail(offering.getId(), GPU.Keys.vgpuType.toString())) != null) {","if ((offeringDetails=_serviceOfferingDetailsDao.findDetail(offering.getId(),GPU.Keys.vgpuType.toString())) != null) {
  ServiceOfferingDetailsVO groupName=_serviceOfferingDetailsDao.findDetail(offering.getId(),GPU.Keys.pciDevice.toString());
  if (!_resourceMgr.isGPUDeviceAvailable(host.getId(),groupName.getValue(),offeringDetails.getValue())) {
    s_logger.debug(""The last host of this VM does not have required GPU devices available"");
  }
}
 else {
  if (host.getStatus() == Status.Up) {
    boolean hostTagsMatch=true;
    if (offering.getHostTag() != null) {
      _hostDao.loadHostTags(host);
      if (!(host.getHostTags() != null && host.getHostTags().contains(offering.getHostTag()))) {
        hostTagsMatch=false;
      }
    }
    if (hostTagsMatch) {
      long cluster_id=host.getClusterId();
      ClusterDetailsVO cluster_detail_cpu=_clusterDetailsDao.findDetail(cluster_id,""cpuOvercommitRatio"");
      ClusterDetailsVO cluster_detail_ram=_clusterDetailsDao.findDetail(cluster_id,""memoryOvercommitRatio"");
      Float cpuOvercommitRatio=Float.parseFloat(cluster_detail_cpu.getValue());
      Float memoryOvercommitRatio=Float.parseFloat(cluster_detail_ram.getValue());
      boolean hostHasCpuCapability, hostHasCapacity=false;
      hostHasCpuCapability=_capacityMgr.checkIfHostHasCpuCapability(host.getId(),offering.getCpu(),offering.getSpeed());
      if (hostHasCpuCapability) {
        hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOvercommitRatio,memoryOvercommitRatio,true);
        if (!hostHasCapacity)         hostHasCapacity=_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,false,cpuOvercommitRatio,memoryOvercommitRatio,true);
      }
      boolean displayStorage=getDisplayStorageFromVmProfile(vmProfile);
      if (hostHasCapacity && hostHasCpuCapability) {
        s_logger.debug(""The last host of this VM is UP and has enough capacity"");
        s_logger.debug(""Now checking for suitable pools under zone: "" + host.getDataCenterId() + "", pod: ""+ host.getPodId()+ "", cluster: ""+ host.getClusterId());
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        if (vm.getHypervisorType() == HypervisorType.BareMetal) {
          DeployDestination dest=new DeployDestination(dc,pod,cluster,host,new HashMap<Volume,StoragePool>(),displayStorage);
          s_logger.debug(""Returning Deployment Destination: "" + dest);
          return dest;
        }
        DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId(),null);
        Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoids,HostAllocator.RETURN_UPTO_ALL);
        Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
        List<Volume> readyAndReusedVolumes=result.second();
        if (!suitableVolumeStoragePools.isEmpty()) {
          List<Host> suitableHosts=new ArrayList<Host>();
          suitableHosts.add(host);
          Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools,avoids,getPlannerUsage(planner,vmProfile,plan,avoids),readyAndReusedVolumes,plan.getPreferredHosts(),vm);
          if (potentialResources != null) {
            Map<Volume,StoragePool> storageVolMap=potentialResources.second();
            for (            Volume vol : readyAndReusedVolumes) {
              storageVolMap.remove(vol);
            }
            DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap,displayStorage);
            s_logger.debug(""Returning Deployment Destination: "" + dest);
            return dest;
          }
        }
      }
 else {
        s_logger.debug(""The last host of this VM does not have enough capacity"");
      }
    }
  }
 else {
    s_logger.debug(""The last host of this VM is not UP or is not enabled, host status is: "" + host.getStatus().name() + "", host resource state is: ""+ host.getResourceState());
  }
}
",0,7,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
76,while ((receivedTuples = CollectorOperator.receivedTuples.get(collector.prefix + p.getId())) == null || receivedTuples.isEmpty()) {,"while ((receivedTuples=CollectorOperator.receivedTuples.get(collector.prefix + p.getId())) == null || receivedTuples.isEmpty()) {
  if (i++ % 100 == 0) {
    LOG.debug(""Waiting for tuple: "" + p);
  }
  sleep(10);
}
",0,4,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
77,if ((isLead = BuiltinFunctions.LEAD_IMPL.equals(fi)) || BuiltinFunctions.LAG_IMPL.equals(fi)) {,"if ((isLead=BuiltinFunctions.LEAD_IMPL.equals(fi)) || BuiltinFunctions.LAG_IMPL.equals(fi)) {
  boolean isLag=!isLead;
  int argCount=fargs.size();
  if (argCount < 2 || argCount > 4) {
    throw new CompilationException(ErrorCode.COMPILATION_INVALID_NUM_OF_ARGS,sourceLoc,fi.getName());
  }
  winFrameMode=WindowExpression.FrameMode.ROWS;
  winFrameExclusionKind=WindowExpression.FrameExclusionKind.NO_OTHERS;
  if (respectNulls) {
    winFrameStartKind=winFrameEndKind=isLead ? WindowExpression.FrameBoundaryKind.BOUNDED_FOLLOWING : WindowExpression.FrameBoundaryKind.BOUNDED_PRECEDING;
    winFrameStartExpr=argCount == 2 ? new LiteralExpr(new IntegerLiteral(1)) : fargs.get(1);
    winFrameEndExpr=(Expression)SqlppRewriteUtil.deepCopy(winFrameStartExpr);
    winFrameMaxOjbects=1;
  }
 else {
    if (isLag) {
      reverseOrder(orderExprListOut);
    }
    winFrameStartKind=WindowExpression.FrameBoundaryKind.BOUNDED_FOLLOWING;
    winFrameStartExpr=new LiteralExpr(new IntegerLiteral(1));
    winFrameEndKind=WindowExpression.FrameBoundaryKind.UNBOUNDED_FOLLOWING;
    Expression fargLast=fargs.get(fargs.size() - 1);
    winFrameExcludeUnaryExpr=createCallExpr(BuiltinFunctions.IS_UNKNOWN,fargLast,sourceLoc);
    if (argCount > 2) {
      winFrameOffsetExpr=createOperatorExpr(fargs.get(1),OperatorType.MINUS,new IntegerLiteral(1),sourceLoc);
    }
  }
  if (argCount < 4) {
    nestedAggFunc=BuiltinFunctions.SCALAR_FIRST_ELEMENT;
  }
 else {
    nestedAggFunc=BuiltinFunctions.SCALAR_LOCAL_FIRST_ELEMENT;
    postWinResultFunc=BuiltinFunctions.IF_SYSTEM_NULL;
    postWinExpr=fargs.get(2);
  }
}
 else if (BuiltinFunctions.FIRST_VALUE_IMPL.equals(fi)) {
  nestedAggFunc=BuiltinFunctions.SCALAR_FIRST_ELEMENT;
  if (respectNulls) {
    winFrameMaxOjbects=1;
  }
 else {
    Expression fargLast=fargs.get(fargs.size() - 1);
    winFrameExcludeUnaryExpr=createCallExpr(BuiltinFunctions.IS_UNKNOWN,fargLast,sourceLoc);
  }
}
 else if (BuiltinFunctions.LAST_VALUE_IMPL.equals(fi)) {
  nestedAggFunc=BuiltinFunctions.SCALAR_LAST_ELEMENT;
  if (!respectNulls) {
    Expression fargLast=fargs.get(fargs.size() - 1);
    winFrameExcludeUnaryExpr=createCallExpr(BuiltinFunctions.IS_UNKNOWN,fargLast,sourceLoc);
  }
}
 else if (BuiltinFunctions.NTH_VALUE_IMPL.equals(fi)) {
  nestedAggFunc=BuiltinFunctions.SCALAR_FIRST_ELEMENT;
  if (fromLast) {
    reverseOrder(orderExprListOut);
    WindowExpression.FrameBoundaryKind tmpFrameStartKind=winFrameStartKind;
    Expression tmpFrameStartExpr=winFrameStartExpr;
    winFrameStartKind=reverseFrameBoundaryKind(winFrameEndKind);
    winFrameStartExpr=winFrameEndExpr;
    winFrameEndKind=reverseFrameBoundaryKind(tmpFrameStartKind);
    winFrameEndExpr=tmpFrameStartExpr;
  }
  if (respectNulls) {
    winFrameMaxOjbects=1;
  }
 else {
    Expression fargLast=fargs.get(fargs.size() - 1);
    winFrameExcludeUnaryExpr=createCallExpr(BuiltinFunctions.IS_UNKNOWN,fargLast,sourceLoc);
  }
  winFrameOffsetExpr=createOperatorExpr(fargs.get(1),OperatorType.MINUS,new IntegerLiteral(1),sourceLoc);
}
 else if (BuiltinFunctions.RATIO_TO_REPORT_IMPL.equals(fi)) {
  nestedAggFunc=BuiltinFunctions.SCALAR_SQL_SUM;
  postWinResultFunc=BuiltinFunctions.NUMERIC_DIVIDE;
  postWinExpr=fargs.get(1);
  postWinResultArgsReverse=true;
}
 else {
  throw new CompilationException(ErrorCode.COMPILATION_ILLEGAL_STATE,sourceLoc,fi.getName());
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
78,while (checkpoints.size() > 1 && ((c2 = checkpoints.get(1)).windowId) <= maxCheckpoint.windowId) {,"while (checkpoints.size() > 1 && ((c2=checkpoints.get(1)).windowId) <= maxCheckpoint.windowId) {
  checkpoints.removeFirst();
  this.purgeCheckpoints.add(new Pair<>(groupOper,c1.windowId));
  c1=c2;
}
",0,65,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
79,"if (!shouldRetry(ex.awsErrorDetails().errorCode(), retries++)) {","if (!shouldRetry(ex.awsErrorDetails().errorCode(),retries++)) {
  throw new RuntimeDataException(ErrorCode.EXTERNAL_SOURCE_ERROR,ex.getMessage());
}
",0,3,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
80,"while (totalBytesRead < length && (lastBytesRead = src.read(dest, destPos + totalBytesRead, length - totalBytesRead)) != -1) {","while (totalBytesRead < length && (lastBytesRead=src.read(dest,destPos + totalBytesRead,length - totalBytesRead)) != -1) {
  totalBytesRead+=lastBytesRead;
}
",0,25,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
81,if (((index = locale.indexOf(HYPHEN)) > -1) || ((index = locale.indexOf(UNDERSCORE)) > -1)) {,"if (((index=locale.indexOf(HYPHEN)) > -1) || ((index=locale.indexOf(UNDERSCORE)) > -1)) {
  if (index == 0) {
    throw new IllegalArgumentException(Resources.getMessage(""LOCALE_NO_LANGUAGE""));
  }
 else   if (index == locale.length() - 1) {
    throw new IllegalArgumentException(Resources.getMessage(""LOCALE_EMPTY_COUNTRY""));
  }
  language=locale.substring(0,index);
  country=locale.substring(index + 1);
}
 else {
  language=locale;
  country="""";
}
",0,71,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
82,while (read || (position.line = reader.readLine()) != null) {,"while (read || (position.line=reader.readLine()) != null) {
  read=false;
  if (position.line.trim().startsWith(""//"")) {
    continue;
  }
  String[] tokens=position.line.split(REGEX_WS_PAREN);
  position.index=0;
  int openBraceIndex=position.line.indexOf(OPEN_BRACE);
  int openAngularIndex=position.line.trim().indexOf(OPEN_ANGULAR);
  if (tokens.length > 0 && identifier.length() == 0 && EXTENSIONKEYWORDS.contains(tokens[0])) {
switch (tokens[0]) {
case KWIMPORT:
      handleImport(reader);
    break;
case KWUNIMPORT:
  handleUnImport(reader);
break;
case NEWPRODUCTION:
nextOperation=NEWPRODUCTION;
break;
case NEW_AT_THE_END_PRODUCTION:
nextOperation=NEW_AT_THE_END_PRODUCTION;
break;
case NEW_AT_THE_END_CLASS_DEFINITION:
nextOperation=NEW_AT_THE_END_CLASS_DEFINITION;
break;
case MERGEPRODUCTION:
nextOperation=MERGEPRODUCTION;
shouldReplace=shouldReplace(tokens,position.line);
break;
case OVERRIDEPRODUCTION:
nextOperation=OVERRIDEPRODUCTION;
break;
default :
break;
}
}
 else if (openBraceIndex >= 0 && openAngularIndex < 0) {
String beforeBrace=position.line.substring(0,openBraceIndex);
if (beforeBrace.trim().length() > 0) {
identifier.append(beforeBrace);
}
 else if (identifier.length() == 0) {
identifier.append(lastIdentifier);
}
position.index=openBraceIndex;
switch (nextOperation) {
case NEWPRODUCTION:
handleNew(identifier,reader);
break;
case NEW_AT_THE_END_CLASS_DEFINITION:
readFinalProduction(identifier,reader);
addFinalProduction(identifier,extensionMethodsAtTheClassDef);
break;
case OVERRIDEPRODUCTION:
handleOverride(identifier,reader);
break;
case MERGEPRODUCTION:
handleMerge(identifier,reader);
break;
default :
throw new MojoExecutionException(""Malformed extention file"");
}
nextOperation=NEWPRODUCTION;
}
 else if (openAngularIndex == 0) {
if (nextOperation != NEWPRODUCTION && nextOperation != NEW_AT_THE_END_PRODUCTION) {
throw new MojoExecutionException(""Can only add new REGEX production kind"");
}
position.index=position.line.indexOf(OPEN_ANGULAR);
readFinalProduction(identifier,reader);
if (nextOperation == NEWPRODUCTION) {
addFinalProduction(identifier,extensionFinals);
}
 else if (nextOperation == NEW_AT_THE_END_PRODUCTION) {
addFinalProduction(identifier,extensionFinalsAtTheEnd);
}
}
 else if (identifier.length() > 0 || position.line.trim().length() > 0) {
identifier.append(position.line);
identifier.append('\n');
}
}
",0,1,5,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
83,if (!splittedPath[i].isEmpty() && --cnt > 0),"if (!splittedPath[i].isEmpty() && --cnt > 0) parentPath.append(splittedPath[i]).append(""/"");
",0,2,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
84,"while (compare(names.get(index[++i]), names.get(index[right])) < 0) {","while (compare(names.get(index[++i]),names.get(index[right])) < 0) {
  ;
}
",0,0,10,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
85,"while (compare(names.get(index[right]), names.get(index[--j])) < 0) {","while (compare(names.get(index[right]),names.get(index[--j])) < 0) {
  if (j == left) {
    break;
  }
}
",0,0,10,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
86,"for (int i=matcher.start(); (i=line.lastIndexOf('\'', i-1)) >= 0;) {","for (int i=matcher.start(); (i=line.lastIndexOf('\'',i - 1)) >= 0; ) {
  if (i == 0 || line.charAt(i - 1) != '\\') {
    quoted=!quoted;
  }
}
",0,9,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
87,"while (limit > 0 && (nextIdx = find(srcPtr, searchPtr, false, curIdx)) > 0) {","while (limit > 0 && (nextIdx=find(srcPtr,searchPtr,false,curIdx)) > 0) {
  builder.appendUtf8StringPointable(srcPtr,srcPtr.getCharStartOffset() + curIdx,nextIdx - curIdx);
  builder.appendUtf8StringPointable(replacePtr);
  curIdx=nextIdx + searchUtfLen;
  limit--;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
88,} else if (remainingLength >= 5 && ((ch = buffer[i]) == 'f' || ch == 'F'),"if (remainingLength >= 5 && ((ch=buffer[i]) == 'f' || ch == 'F') && ((ch=buffer[i + 1]) == 'a' || ch == 'A') && ((ch=buffer[i + 2]) == 'l' || ch == 'L') && ((ch=buffer[i + 3]) == 's' || ch == 'S') && ((ch=buffer[i + 4]) == 'e' || ch == 'E')) {
  gotBoolean=true;
  booleanValue=false;
  i=i + 5;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
89,if (i == 0 && activePath != null && (curFileName = fileChooser.getName(((DirectoryNode) activePath.getLastPathComponent()).getFile())) != null,"if (i == 0 && activePath != null && (curFileName=fileChooser.getName(((DirectoryNode)activePath.getLastPathComponent()).getFile())) != null && curFileName.toLowerCase().startsWith(searchedText)) {
  return;
}
",0,10,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
90,while ((working = futures.stream().filter(f -> !f.isDone()).count()) > 0 || CompactionManager.instance.getActiveCompactions() > 0 || (!maximal && cfs.getCompactionStrategyManager().getEstimatedRemainingTasks() > 0)),"while ((working=futures.stream().filter(f -> !f.isDone()).count()) > 0 || CompactionManager.instance.getActiveCompactions() > 0 || (!maximal && cfs.getCompactionStrategyManager().getEstimatedRemainingTasks() > 0)) {
  if (!maximal) {
    for (long i=working; i < threads; i++)     futures.addAll(CompactionManager.instance.submitBackground(cfs));
  }
  reportCompactionStats();
  Uninterruptibles.sleepUninterruptibly(10,TimeUnit.SECONDS);
}
",0,61,17,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
91,if (operation.getIOOpertionType() == LSMIOOperationType.MERGE && ++tupleCounter % CHECK_CYCLE == 0) {,"if (operation.getIOOpertionType() == LSMIOOperationType.MERGE && ++tupleCounter % CHECK_CYCLE == 0) {
  tupleCounter=0;
  ((MergeOperation)operation).waitIfPaused();
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
92,if (up(csq1.charAt(i)) != up(csq2.charAt(i++))),"if (up(csq1.charAt(i)) != up(csq2.charAt(i++))) return false;
",0,3,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
93,while (((result = getResults().poll())) != null) {,"while (((result=getResults().poll())) != null) {
  statusReporter.processed((String)result);
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
94,while ((line = request.getReader().readLine()) != null && (!header1found || !header2found)) {,"while ((line=request.getReader().readLine()) != null && (!header1found || !header2found)) {
  header1found=header1found || line.matches("".*header1-field1.*Hello from TestSoapHeader2.*header1-field1>"");
  header2found=header2found || line.matches("".*header2-field1.*Hello from TestSoapHeader2.*header2-field1>"");
}
",0,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
95,while ((curr != null) && (++count < (MAX_COUNT_OF_INMEM_BLOCKS - 2))) {,"while ((curr != null) && (++count < (MAX_COUNT_OF_INMEM_BLOCKS - 2))) {
  curr=curr.prev;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
96,for (int i = writeBuffer.remaining(); i-- > 0 && charIndex < charCount; charIndex++) {,"for (int i=writeBuffer.remaining(); i-- > 0 && charIndex < charCount; charIndex++) {
  c=value.charAt(charIndex);
  if (c > 127) {
    writeString_slow(value,charCount,charIndex);
    return;
  }
  writeBuffer.put((byte)c);
}
",0,35,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
97,if ((read = channel.read(ByteBuffer.allocate(1))) > 0) {,"if ((read=channel.read(ByteBuffer.allocate(1))) > 0) {
  throw new RuntimeException(""Publisher "" + this + "" is not supposed to receive any data"");
}
 else if (read == -1) {
  try {
    channel.close();
  }
  finally {
    unregistered(key);
    key.attach(Listener.NOOP_CLIENT_LISTENER);
  }
}
 else {
  logger.debug(""{} read 0 bytes"",this);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
98,if ((principal != null) && ((sindex = principal.indexOf('/')) != -1)) {,"if ((principal != null) && ((sindex=principal.indexOf('/')) != -1)) {
  principal=principal.substring(0,sindex);
}
",0,173,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
99,if (annotations != null && !annotations.isEmpty() && (firstAnnotation = field.getVisibleAnnotations().get(0)) != null) {,"if (annotations != null && !annotations.isEmpty() && (firstAnnotation=field.getVisibleAnnotations().get(0)) != null) {
  for (  Map.Entry<String,Object> entry : firstAnnotation.getAnnotations().entrySet()) {
    port.put(entry.getKey(),entry.getValue());
  }
}
",0,5,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
100,while (operatorContext.checkpoints.size() < 8 && ((endTime = System.currentTimeMillis()) - startTime) < timeoutMillis) {,"while (operatorContext.checkpoints.size() < 8 && ((endTime=System.currentTimeMillis()) - startTime) < timeoutMillis) {
  Thread.sleep(sleepTime);
}
",0,0,8,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
101,while (checkpointTestOperator.numWindows < 3 && ((endTime = System.currentTimeMillis()) - startTime) < 6000) {,"while (checkpointTestOperator.numWindows < 3 && ((endTime=System.currentTimeMillis()) - startTime) < 6000) {
  Thread.sleep(50);
}
",0,0,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
102,while (--i > 0 && eventCounter < maxEventsPerWindow - 1) {,"while (--i > 0 && eventCounter < maxEventsPerWindow - 1) {
  final Slice slice=handoverBuffer.poll();
  slice.offset+=8;
  slice.length-=8;
  T convert=convert((Event)codec.fromByteArray(slice));
  if (convert == null) {
    drop.emit(slice);
  }
 else {
    output.emit(convert);
  }
  eventCounter++;
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
103,while (storedTuples < maxTuples && (e = getChannel().take()) != null) {,"while (storedTuples < maxTuples && (e=getChannel().take()) != null) {
  Slice event=codec.toByteArray(e);
  byte[] address=storage.store(event);
  if (address != null) {
    if (!client.write(address,event)) {
      retryWrite(address,event);
    }
    outstandingEventsCount++;
  }
 else {
    logger.debug(""Detected the condition of recovery from flume crash!"");
  }
  storedTuples++;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
104,"if ((offeringDetails   = _serviceOfferingDetailsDao.findDetail(serviceOfferingId, GPU.Keys.vgpuType.toString())) != null) {","if ((offeringDetails=_serviceOfferingDetailsDao.findDetail(serviceOfferingId,GPU.Keys.vgpuType.toString())) != null) {
  ServiceOfferingDetailsVO groupName=_serviceOfferingDetailsDao.findDetail(serviceOfferingId,GPU.Keys.pciDevice.toString());
  if (!_resourceMgr.isGPUDeviceAvailable(host.getId(),groupName.getValue(),offeringDetails.getValue())) {
    s_logger.info(""Host name: "" + host.getName() + "", hostId: ""+ host.getId()+ "" does not have required GPU devices available"");
    avoid.addHost(host.getId());
    continue;
  }
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
105,if ((productSpec.charAt(chldStDelIdx) == '(') && (productSpec.charAt(chldEdDelIdx) == ')'),"if ((productSpec.charAt(chldStDelIdx) == '(') && (productSpec.charAt(chldEdDelIdx) == ')') && ((chldSepDelIdx=productSpec.indexOf(':')) != -1)) {
  String child1Spec=productSpec.substring(chldStDelIdx + 1,chldSepDelIdx);
  String child2Spec=productSpec.substring(chldSepDelIdx + 1,chldEdDelIdx);
  parentElement=(SimplePathElement)pathElement;
  childElement1=pathElementFactory.getSpecable(child1Spec);
  childElement2=pathElementFactory.getSpecable(child2Spec);
}
",0,4,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
106,while (((v = q.poll()) != null) && j < n) {,"while (((v=q.poll()) != null) && j < n) {
  list.add(v);
  j++;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
107,if (!allExprs.get(columnNumbersExprList[currentColPosition++]).isSame(keySelectedTable)) {,"if (!allExprs.get(columnNumbersExprList[currentColPosition++]).isSame(keySelectedTable)) {
  return false;
}
",0,9,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
108,if(num++ > criteria.getLimit()) break;,"if (num++ > criteria.getLimit()) break;
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
109,if (headers == null || (activator = headers.get(Constants.BUNDLE_ACTIVATOR)) == null || SU_ACTIVATOR_DEPRECATED.equals(activator)) {,"if (headers == null || (activator=headers.get(Constants.BUNDLE_ACTIVATOR)) == null || SU_ACTIVATOR_DEPRECATED.equals(activator)) {
  if (LOG.isLoggable(Level.FINE))   LOG.fine(""Recognized ODE deployment bundle: "" + bundle.getSymbolicName());
  result=true;
}
 else LOG.warning(""Ignoring ODE bundle "" + bundle.getSymbolicName() + "" which has custom activator: ""+ activator);
",0,16,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
110,while ((nextjob = nextJobTime()) > 0 && !_done),"while ((nextjob=nextJobTime()) > 0 && !_done) _activity.await(nextjob,TimeUnit.MILLISECONDS);
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
111,if ( klass == null || ( ( pkg = klass.getPackage() ) != null && pkg.getName().startsWith( JAVA_PACKAGE ) ) ),"if (klass == null || ((pkg=klass.getPackage()) != null && pkg.getName().startsWith(JAVA_PACKAGE))) {
  return;
}
",0,2,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
112,if (doc != null && ((streamDesc = doc.getProperty(Document.StreamDescriptionProperty)) != null)) {,"if (doc != null && ((streamDesc=doc.getProperty(Document.StreamDescriptionProperty)) != null)) {
  componentDesc=streamDesc.toString();
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
113,while (null == (ep = Gossiper.instance.getEndpointStateForEndpoint(endpoint)),"while (null == (ep=Gossiper.instance.getEndpointStateForEndpoint(endpoint)) || ep.getApplicationState(ApplicationState.STATUS_WITH_PORT) == null || !ep.getApplicationState(ApplicationState.STATUS_WITH_PORT).value.startsWith(""NORMAL"")) LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(10L));
",0,2,5,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
114,if ((obj instanceof OMNode) && (node = (OMNode) obj).getType() == OMNode.ELEMENT_NODE) {,"if ((obj instanceof OMNode) && (node=(OMNode)obj).getType() == OMNode.ELEMENT_NODE) {
  OMElement element=(OMElement)node;
  return element;
}
",0,1,7,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
115,"if ((pointer = this.source.indexOf(""#"")) != -1) {","if ((pointer=this.source.indexOf(""#"")) != -1) {
  int endpointer=this.source.indexOf('?');
  if (endpointer != -1) {
    this.xpath=source.substring(pointer + 1,endpointer);
  }
 else {
    this.xpath=source.substring(pointer + 1);
  }
  this.source=src.substring(0,pointer);
  if (endpointer != -1) {
    this.source+=src.substring(endpointer);
  }
}
 else {
  this.xpath=par.getParameter(""xpath"",null);
}
",0,47,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
116,if ((pIndex = clazz.toLowerCase().lastIndexOf(aPackage.trim().toLowerCase())) != -1) {,"if ((pIndex=clazz.toLowerCase().lastIndexOf(aPackage.trim().toLowerCase())) != -1) {
  thePackage=clazz.substring(pIndex,pIndex + aPackage.trim().length() - 1);
  clazz=clazz.substring(pIndex + aPackage.trim().length(),clazz.length() - 5);
  int ei;
  if ((ei=clazz.indexOf('.')) != -1) {
    filename=clazz.substring(0,ei);
  }
 else   filename=clazz;
}
",0,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
117,LINEREAD_LOOP: while (exitShellRequest == null && (lineRead = reader.readLine()) != null) {,"while (exitShellRequest == null && (lineRead=reader.readLine()) != null) {
  if (linesBuffer == null) {
    linesBuffer=new StringBuilder();
  }
  String lineWithoutComments=commentSkipper.skipComments(lineRead);
  if (lineWithoutComments == null || lineWithoutComments.isEmpty()) {
    continue;
  }
  if (linesBuffer.length() != 0) {
    linesBuffer.append("" "");
  }
  linesBuffer.append(lineWithoutComments);
  linesBufferString=linesBuffer.toString();
  if (!linesBufferString.endsWith(GfshParser.CONTINUATION_CHARACTER)) {
    List<String> commandList=MultiCommandHelper.getMultipleCommands(linesBufferString);
    for (    String cmdLet : commandList) {
      if (!cmdLet.isEmpty()) {
        String redactedCmdLet=ArgumentRedactor.redact(cmdLet);
        ++commandSrNum;
        Gfsh.println(commandSrNum + "". Executing - "" + redactedCmdLet);
        Gfsh.println();
        boolean executeSuccess=executeScriptLine(cmdLet);
        if (!executeSuccess) {
          setLastExecutionStatus(-1);
        }
        scriptInfo.addCommandAndStatus(cmdLet,getLastExecutionStatus() == -1 || getLastExecutionStatus() == -2 ? ""FAILED"" : ""PASSED"");
        if ((getLastExecutionStatus() == -1 || getLastExecutionStatus() == -2) && !continueOnError) {
          break LINEREAD_LOOP;
        }
      }
    }
    linesBuffer=null;
    linesBufferString=null;
  }
 else {
    linesBuffer.deleteCharAt(linesBuffer.length() - 1);
  }
}
",0,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
118,l: while (processThisCharacter || (read = reader.read()) != -1) {,"while (processThisCharacter || (read=reader.read()) != -1) {
  processThisCharacter=false;
  char character=(char)read;
switch (character) {
case '""':
    if (!hadQuote) {
      hadQuote=true;
      continue l;
    }
 else {
      read=reader.read();
      if (read == -1) {
        endOfFile=true;
        break l;
      }
      character=(char)read;
switch (character) {
case '""':
        stringBuilder.append(character);
      continue l;
default :
    hadQuote=false;
  processThisCharacter=true;
continue l;
}
}
case '\r':
if (hadQuote) {
stringBuilder.append(character);
continue l;
}
 else {
read=reader.read();
if (read == -1) {
endOfFile=true;
break l;
}
character=(char)read;
switch (character) {
case '\n':
endOfLine=true;
break l;
default :
stringBuilder.append('\r');
processThisCharacter=true;
continue l;
}
}
case '\n':
if (hadQuote) {
stringBuilder.append(character);
continue l;
}
 else {
endOfLine=true;
break l;
}
case ',':
if (hadQuote) {
stringBuilder.append(character);
continue l;
}
 else {
break l;
}
default :
stringBuilder.append(character);
}
}
",0,3,5,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
119,if (chars[src++] == '.' && (src == chars.length ||,"if (chars[src++] == '.' && (src == chars.length || chars[src] == '/')) {
  for (int toDelete=segment - 1; toDelete >= 0; toDelete--) {
    if (segments[toDelete] != DELETED) {
      if (chars[segments[toDelete]] != '.') {
        segments[toDelete]=DELETED;
        segments[segment]=DELETED;
        wasNormalized=false;
      }
      break;
    }
  }
}
",0,2,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
120,else if ((ch == ')') && outsideQuotedString && ((--parenDepth) == 0)),"if ((ch == ')') && outsideQuotedString && ((--parenDepth) == 0)) break;
 else if ((ch == '(') && outsideQuotedString) {
  parenDepth++;
}
 else if (ch == '""' && outsideQuotedString) outsideQuotedString=false;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
121,while (!this.taskCanceled && ((record = input.next(record)) != null)) {,"while (!this.taskCanceled && ((record=input.next(record)) != null)) {
  numRecordsIn.inc();
  format.writeRecord(record);
}
",0,12,7,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
122,"if (ordinals.put(validateName(symbol), i++) != null) {","if (ordinals.put(validateName(symbol),i++) != null) {
  throw new SchemaParseException(""Duplicate enum symbol: "" + symbol);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
123,"while((read = in.read(buf, 0, (int)Math.min(buf.length, length - total))) > -1) {","while ((read=in.read(buf,0,(int)Math.min(buf.length,length - total))) > -1) {
  out.write(buf,0,read);
  total+=read;
  if (total == length) {
    break;
  }
}
",0,10,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
124,"while ((bytes.length - pos) > 0 && (bytesRead = stream.read(bytes, pos, bytes.length - pos)) > 0) {","while ((bytes.length - pos) > 0 && (bytesRead=stream.read(bytes,pos,bytes.length - pos)) > 0) {
  pos+=bytesRead;
}
",0,11,11,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
125,if (++pos[i] == values[i].length) {,"if (++pos[i] == values[i].length) {
  if (i != 0) {
    pos[i]=0;
  }
}
 else {
  break;
}
",0,4,5,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
126,"if ((uuid = r.getUUID(""event_id"")).timestamp() > (tcur - 1000) * 10000)","if ((uuid=r.getUUID(""event_id"")).timestamp() > (tcur - 1000) * 10000) seen[si].add(uuid);
",0,8,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
127,if (++i % 10000 == 0 && System.currentTimeMillis() > t0 + runtimeMs) {,"if (++i % 10000 == 0 && System.currentTimeMillis() > t0 + runtimeMs) {
  break;
}
",0,3,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
128,while (len-->0 && read()>=0) count++;,"while (len-- > 0 && read() >= 0) count++;
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
129,while (-1 != (b = (byte) inp.read())) {,"while (-1 != (b=(byte)inp.read())) {
  buf.write(b);
}
",0,0,5,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
130,if(--lastData == 0) { return new byte[0]; },"if (--lastData == 0) {
  return new byte[0];
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(ArrayCreation-dimensions, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
131,"if ((fo = projectClassPath.findResource(newName.replace('.','/')))!=null) {","if ((fo=projectClassPath.findResource(newName.replace('.','/'))) != null) {
  FileObject ownerRoot=projectClassPath.findOwnerRoot(folder);
  if (ownerRoot != null && ownerRoot.equals(projectClassPath.findOwnerRoot(fo))) {
    if (fo.isFolder() && fo.getChildren().length == 1) {
      FileObject parent=fo.getChildren()[0];
      String relativePath=FileUtil.getRelativePath(parent,nonRecursiveFolder.getFolder());
      if (relativePath != null) {
        return null;
      }
    }
    String msg=new MessageFormat(NbBundle.getMessage(RenameRefactoringPlugin.class,""ERR_PackageExists"")).format(new Object[]{newName});
    return new Problem(true,msg);
  }
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
132,if (!tns.equals(otherTns = (String) it.next())) {,"if (!tns.equals(otherTns=(String)it.next())) {
  importElem=docHolder.createElement(""import"");
  importElem.setAttribute(""namespace"",otherTns);
  schemaElem.insertBefore(importElem,schemaElem.getFirstChild());
}
",0,6,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
133,"if (((ch = p.left) != null && (q = ch.findTreeNode(h, k, kc)) != null)","if (((ch=p.left) != null && (q=ch.findTreeNode(h,k,kc)) != null) || ((ch=p.right) != null && (q=ch.findTreeNode(h,k,kc)) != null)) {
  return q;
}
",0,7,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
134,"while (indexOfStartingChars < text.indexOf(""${"") &&","while (indexOfStartingChars < text.indexOf(""${"") && (indexOfStartingChars=text.indexOf(""${"")) != -1 && (indexOfClosingBrace=text.indexOf(""}"")) != -1) {
  String sysProp=text.substring(indexOfStartingChars + 2,indexOfClosingBrace);
  String propValue=props.getProperty(sysProp);
  if (propValue == null) {
    propValue=System.getProperty(sysProp);
  }
  if (propValue != null) {
    text=text.substring(0,indexOfStartingChars) + propValue + text.substring(indexOfClosingBrace + 1);
  }
}
",0,2,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
135,if ((driver = (PortletDriver)portletDrivers.get(portlet.getPortletKey().toString())) == null) {,"if ((driver=(PortletDriver)portletDrivers.get(portlet.getPortletKey().toString())) == null) {
  String driverClass=this.adapter.getAdapterConfiguration().getProperty(""portlet-driver-class"",PortletDriverImpl.class.getName());
  try {
    driver=(PortletDriverImpl)this.adapter.createObject(driverClass);
  }
 catch (  Exception e) {
    throw new WSRPException(0,e);
  }
  ((PortletDriverImpl)driver).init(portlet);
  this.portletDrivers.put(portlet.getPortletKey().toString(),driver);
}
",0,32,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
136,if ((arg0 = arguments[0].get()) == null || (arg1 = arguments[1].get()) == null) {,"if ((arg0=arguments[0].get()) == null || (arg1=arguments[1].get()) == null) {
  return null;
}
",0,3,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
137,if ( addNextStaticMember = (staticMember.getNextStaticMember() != null) ? true : false ) {,"if (addNextStaticMember=(staticMember.getNextStaticMember() != null) ? true : false) {
  staticMember=(StaticMemberGBean)staticMember.getNextStaticMember();
}
",0,4,6,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
BooleanLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, IfStatement-expression, ),
BooleanLiteral(ConditionalExpression-elseExpression, Assignment-rightHandSide, IfStatement-expression, ),
"
138,if (name==null || (this.name=name.trim()).length()==0),"if (name == null || (this.name=name.trim()).length() == 0) throw new InvalidArgumentException(""name"",name);
",0,18,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
139,if (--holds.get(stream).holds == 0) {,"if (--holds.get(stream).holds == 0) {
  closeStream=true;
  holds.remove(stream);
}
",0,6,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
140,while (maxTries-- > 0 && commitsReceived.size() < commitsRequested + numCommits) {,"while (maxTries-- > 0 && commitsReceived.size() < commitsRequested + numCommits) {
  Uninterruptibles.sleepUninterruptibly(1000,TimeUnit.MILLISECONDS);
}
",0,0,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
141,if (elementCount++ >= inMemoryElementCount && taggedIter instanceof Reiterator) {,"if (elementCount++ >= inMemoryElementCount && taggedIter instanceof Reiterator) {
  break;
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
142,if ((printCount++ % 10 == 0) && (!brokerStats.isEmpty())) {,"if ((printCount++ % 10 == 0) && (!brokerStats.isEmpty())) {
  if (!brokerForbiddenMap.isEmpty()) {
    logger.info(sBuilder.append(""[status check]: current response quality respForbiddenMap is "").append(brokerForbiddenMap.toString()).toString());
    sBuilder.delete(0,sBuilder.length());
  }
  if (!rpcServiceFactory.getForbiddenAddrMap().isEmpty()) {
    logger.info(sBuilder.append(""[status check]: current request quality reqForbiddenMap is "").append(rpcServiceFactory.getForbiddenAddrMap().toString()).toString());
    sBuilder.delete(0,sBuilder.length());
  }
  if (!rpcServiceFactory.getUnavailableBrokerMap().isEmpty()) {
    logger.info(sBuilder.append(""[status check]: current service unavailable brokerMap is "").append(rpcServiceFactory.getUnavailableBrokerMap().toString()).toString());
    sBuilder.delete(0,sBuilder.length());
  }
}
",0,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
143,"while (senderBean.countMessagesInQueue(""test"") > 0 && waitingCount++ < 15) {","while (senderBean.countMessagesInQueue(""test"") > 0 && waitingCount++ < 15) {
  Thread.sleep(10L);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
144,while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0),"while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) {
  boolean useLb=random.nextBoolean();
  boolean useUb=random.nextBoolean();
  if (!(useLb | useUb))   continue;
  int indexRange=keys.size() / (narrowCount + 1);
  boolean lbInclusive=true;
  Integer lbKey=canonicalList.get(0);
  int lbKeyIndex=0, lbIndex=0;
  boolean ubInclusive=true;
  Integer ubKey=canonicalList.get(canonicalList.size() - 1);
  int ubKeyIndex=keys.size(), ubIndex=canonicalList.size();
  if (useLb) {
    lbKeyIndex=random.nextInt(indexRange - 1);
    Integer candidate=keys.get(lbKeyIndex);
    if (useLb=(candidate > lbKey && candidate <= ubKey)) {
      lbInclusive=random.nextBoolean();
      lbKey=keys.get(lbKeyIndex);
      lbIndex=Collections.binarySearch(canonicalList,lbKey);
      if (lbIndex >= 0 && !lbInclusive)       lbIndex++;
 else       if (lbIndex < 0)       lbIndex=-1 - lbIndex;
    }
  }
  if (useUb) {
    int lb=Math.max(lbKeyIndex,keys.size() - indexRange);
    ubKeyIndex=random.nextInt(keys.size() - (1 + lb)) + lb;
    Integer candidate=keys.get(ubKeyIndex);
    if (useUb=(candidate < ubKey && candidate >= lbKey)) {
      ubInclusive=random.nextBoolean();
      ubKey=keys.get(ubKeyIndex);
      ubIndex=Collections.binarySearch(canonicalList,ubKey);
      if (ubIndex >= 0 && ubInclusive) {
        ubIndex++;
      }
 else       if (ubIndex < 0)       ubIndex=-1 - ubIndex;
    }
  }
  if (ubIndex < lbIndex) {
    ubIndex=lbIndex;
    ubKey=lbKey;
    ubInclusive=false;
  }
  canonicalSet=!useLb ? canonicalSet.headSet(ubKey,ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey,lbInclusive) : canonicalSet.subSet(lbKey,lbInclusive,ubKey,ubInclusive);
  testAsSet=!useLb ? testAsSet.headSet(ubKey,ubInclusive) : !useUb ? testAsSet.tailSet(lbKey,lbInclusive) : testAsSet.subSet(lbKey,lbInclusive,ubKey,ubInclusive);
  keys=keys.subList(lbKeyIndex,ubKeyIndex);
  canonicalList=canonicalList.subList(lbIndex,ubIndex);
  testAsList=testAsList.subList(lbIndex,ubIndex);
  Assert.assertEquals(canonicalSet.size(),testAsSet.size());
  Assert.assertEquals(canonicalList.size(),testAsList.size());
}
",0,11,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
145,"if ((readBytes = validateAndGetFileChannel().read(readBuffer.internalNioBuffer(0, readCapacity),","if ((readBytes=validateAndGetFileChannel().read(readBuffer.internalNioBuffer(0,readCapacity),currentPosition)) <= 0) {
  throw new IOException(""Reading from filechannel returned a non-positive value. Short read."");
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
146,while (!seq.isEmpty() && (request = seq.get(0)) != null) {,"while (!seq.isEmpty() && (request=seq.get(0)) != null) {
  if (!request.isComplete()) {
    return;
  }
  seq.remove(0);
  long latencyNanos=MathUtils.elapsedNanos(requestTimeNanos);
  LedgerEntry entry;
  if (BKException.Code.OK == request.getRc()) {
    clientCtx.getClientStats().getReadOpLogger().registerSuccessfulEvent(latencyNanos,TimeUnit.NANOSECONDS);
    entry=new LedgerEntry(request.entryImpl);
  }
 else {
    clientCtx.getClientStats().getReadOpLogger().registerFailedEvent(latencyNanos,TimeUnit.NANOSECONDS);
    entry=null;
  }
  request.close();
  listener.onEntryComplete(request.getRc(),lh,entry,ctx);
}
",0,20,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
147,"while (markIter.hasNext() && (cmp = compare(markIter.peek().clustering(), row.clustering(), cfs)) < 0)","while (markIter.hasNext() && (cmp=compare(markIter.peek().clustering(),row.clustering(),cfs)) < 0) markIter.next();
",0,3,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
148,"while (!columnNames.add(measureName = ""m"" + m)) {","while (!columnNames.add(measureName=""m"" + m)) {
  ++m;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
149,if (count++ < warmUpCount || d > castNonNull(priorityQueue.peek())) {,"if (count++ < warmUpCount || d > castNonNull(priorityQueue.peek())) {
  if (priorityQueue.size() >= size) {
    priorityQueue.remove(deque.pop());
  }
  priorityQueue.add(d);
  deque.add(d);
  b=true;
}
 else {
  b=false;
}
",0,0,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
150,} else if (((RexInputRef) ref).getIndex() != i++) {,"if (((RexInputRef)ref).getIndex() != i++) {
  return false;
}
",0,3,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
151,"while (allElements.contains(generatedSelectorName = selectorNameBase + (counter++ == 0 ? """" : counter))) {","while (allElements.contains(generatedSelectorName=selectorNameBase + (counter++ == 0 ? """" : counter))) {
}
",0,6,8,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
152,if (Object.class.equals(parmClass) && (objectParmCount++ == 2)) {,"if (Object.class.equals(parmClass) && (objectParmCount++ == 2)) {
  severe=true;
  break;
}
",0,2,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
153,"if ( ( properties = ( Map<String, Object> ) json.get( ""properties"" ) ) == null ) {","if ((properties=(Map<String,Object>)json.get(""properties"")) == null) {
  throw new NullArgumentException(""Could not find 'properties'"");
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
154,if (!(Type.NULL.equals(typeSchema.getType())) && (position-- == 0)) {,"if (!(Type.NULL.equals(typeSchema.getType())) && (position-- == 0)) {
  primarySchema=typeSchema;
  break;
}
",0,1,6,,"QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
155,if ((i < n) && ((c = s.charAt(i)) == '=')) {,"if ((i < n) && ((c=s.charAt(i)) == '=')) {
  i++;
  nameBuf.append(c);
  break;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
156,"if ((models = exchange.getContext().getTypeConverter().convertTo(List.class, body)) == null) {","if ((models=exchange.getContext().getTypeConverter().convertTo(List.class,body)) == null) {
  models=new ArrayList<>();
  for (  Object model : ObjectHelper.createIterable(body)) {
    models.add(model);
  }
}
",0,14,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
157,"if (!cacheIds.contains(row.cacheId) || (entry = getEntry(grp, row)) == null) {","if (!cacheIds.contains(row.cacheId) || (entry=getEntry(grp,row)) == null) {
  skippedEntries++;
  oldPendingEntries.removex(row);
  continue;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
158,while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {,"while (!done && counter++ < endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter()) {
  log.trace(""Early reply not found handler at attempt {}. Waiting a bit longer."",counter);
  try {
    Thread.sleep(endpoint.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime());
  }
 catch (  InterruptedException e) {
  }
  answer=correlation.get(correlationID);
  done=answer != null;
  if (answer != null) {
    if (log.isTraceEnabled()) {
      log.trace(""Early reply with correlationID [{}] has been matched after {} attempts and can be processed using handler: {}"",correlationID,counter,answer);
    }
  }
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
159,while (pos < line.length() && !isSpace(c = line.charAt(pos++)),"while (pos < line.length() && !isSpace(c=line.charAt(pos++)) && c != '=' && c != ':') {
  if (c == '\\') {
    if (pos == line.length()) {
      l.append(line=reader.readLine());
      pos=0;
      while (pos < line.length() && isSpace(c=line.charAt(pos)))       pos++;
    }
 else {
      pos=readEscape(line,pos,key);
    }
  }
 else {
    key.append(c);
  }
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
160,while (attempts++ < 5 && version == group.getCurrentData().get(0).getStat().getVersion()) {,"while (attempts++ < 5 && version == group.getCurrentData().get(0).getStat().getVersion()) {
  TimeUnit.SECONDS.sleep(1);
}
",0,0,9,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
161,"} else if (""Ljava/util/Map$Entry"".equals(sigs[index]) && sufficientGenerics(index++ + 5, sigLength, sig)) {","if (""Ljava/util/Map$Entry"".equals(sigs[index]) && sufficientGenerics(index++ + 5,sigLength,sig)) {
  if (""Ljava/util/Map"".equals(sigs[index++]) && ""Ljava/lang/String"".equals(sigs[index++])) {
    if (""Ljava/lang/Object"".equals(sigs[index]) || ""+Ljava/lang/Object"".equals(sigs[index])) {
      fieldCollectionType=FieldCollectionType.tuple;
      index+=3;
    }
 else     if (""*"".equals(sigs[index])) {
      fieldCollectionType=FieldCollectionType.tuple;
      index+=2;
    }
 else {
      index=sigLength;
    }
  }
}
 else {
  fieldCollectionType=FieldCollectionType.service;
}
",0,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
162,if (i == null || i.intValue() != this.index++) {,"if (i == null || i.intValue() != this.index++) {
  exchange.setException(new CamelException(""Invalid index value.  Expected "" + this.index + "" but was ""+ i));
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
163,"while ((tokenizedXML = consumerTemplate.receiveBody(""seda:xtokenize-result"", 500, String.class)) != null) {","while ((tokenizedXML=consumerTemplate.receiveBody(""seda:xtokenize-result"",500,String.class)) != null) {
  joiner.add(tokenizedXML);
}
",0,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
164,"while (loc == null && (idx = cmpTag.lastIndexOf('-', idx - 1)) > 0) {","while (loc == null && (idx=cmpTag.lastIndexOf('-',idx - 1)) > 0) {
  loc=LocaleID.lookupByLanguageTag(languageTag.substring(0,idx));
}
",0,2,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
165,"if (childFold.isCollapsed() && ((flag = FoldUtilitiesImpl.becomesDamagedByRemove(childFold, evt, true)) > 0)) {","if (childFold.isCollapsed() && ((flag=FoldUtilitiesImpl.becomesDamagedByRemove(childFold,evt,true)) > 0)) {
  damaged.add(OPERATION_COLLAPSE | flag);
  damaged.add(childFold);
  if (LOG.isLoggable(Level.FINER)) {
    LOG.finer(""preRemoveCheck: expansion needed "" + childFold + '\n');
  }
}
 else {
  damaged.add(OPERATION_UPDATE);
  damaged.add(childFold);
  if (LOG.isLoggable(Level.FINER)) {
    LOG.finer(""preRemoveCheck: removeUpdate call "" + childFold + '\n');
  }
}
",0,4,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
166,while (null != (e = spinning.pollFirstEntry()) || null != (e = descheduled.pollFirstEntry())),"while (null != (e=spinning.pollFirstEntry()) || null != (e=descheduled.pollFirstEntry())) if (e.getValue().assign(work,false)) return;
",0,0,8,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
167,if (i + 2 < path.length() && path.charAt(i++) == ':' && path.charAt(i++) == '/' && path.charAt(i) == '/') {,"if (i + 2 < path.length() && path.charAt(i++) == ':' && path.charAt(i++) == '/' && path.charAt(i) == '/') {
  return true;
}
",0,19,16,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
168,if ((first = activeSegments.peek()) != null && first.id <= last.id),"if ((first=activeSegments.peek()) != null && first.id <= last.id) logger.error(""Failed to force-recycle all segments; at least one segment is still in use with dirty CFs."");
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
169,"if (e != null && !(res=whiteList.check(ElementHandle.create(e),WhiteListQuery.Operation.USAGE)).isAllowed()) {","if (e != null && !(res=whiteList.check(ElementHandle.create(e),WhiteListQuery.Operation.USAGE)).isAllowed()) {
  p.put(node,res);
}
",0,33,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
170,while ((readaheadRemaining = readahead.hasRemaining()) && readahead.get() != delimiter);,"while ((readaheadRemaining=readahead.hasRemaining()) && readahead.get() != delimiter) ;
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
171,while ((srcCount = src.limit() - srcPos) > (trgAvailable = buffer.remaining())),"while ((srcCount=src.limit() - srcPos) > (trgAvailable=buffer.remaining())) {
  FastByteOperations.copy(src,srcPos,buffer,buffer.position(),trgAvailable);
  buffer.position(buffer.position() + trgAvailable);
  srcPos+=trgAvailable;
  doFlush(src.limit() - srcPos);
}
",0,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
172,"if (runner == null && removeRunnerUpdater.compareAndSet(this, null, runner = new RemoveRunner()))","if (runner == null && removeRunnerUpdater.compareAndSet(this,null,runner=new RemoveRunner())) {
  runner.undo(remove);
  runEventually(runner);
  break;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
173,if (scan.getLimit() > 0 && ++this.numOfCompleteRows > scan.getLimit()) {,"if (scan.getLimit() > 0 && ++this.numOfCompleteRows > scan.getLimit()) {
  result=null;
}
",0,4,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
174,while ((nextIdx = (currIdx * 2) - (sortedSectionSize - 1)) + 1 < size),"while ((nextIdx=(currIdx * 2) - (sortedSectionSize - 1)) + 1 < size) {
  if (!heap[nextIdx].equalParent) {
    if (!heap[nextIdx + 1].equalParent) {
      int siblingCmp=heap[nextIdx + 1].compareTo(heap[nextIdx]);
      if (siblingCmp < 0)       ++nextIdx;
      int cmp=candidate.compareTo(heap[nextIdx]);
      if (cmp <= 0) {
        if (cmp == 0) {
          heap[nextIdx].equalParent=true;
          if (siblingCmp == 0)           heap[nextIdx + 1].equalParent=true;
        }
        heap[currIdx]=candidate;
        return;
      }
      if (siblingCmp == 0) {
        heap[nextIdx + 1].equalParent=true;
      }
    }
 else     ++nextIdx;
  }
  heap[currIdx]=heap[nextIdx];
  currIdx=nextIdx;
}
",0,4,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
175,if (compareToLast(index = moveOne(forwards)) >= 0),"if (compareToLast(index=moveOne(forwards)) >= 0) state=END;
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
176,"while (!(match = cur.seekInNode(key, forwards)) && !cur.isLeaf())","while (!(match=cur.seekInNode(key,forwards)) && !cur.isLeaf()) {
  cur=cur.descend();
  cur.position=forwards ? -1 : getKeyEnd(cur.node);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
177,"while (val > (cur = cntr.get()) && !cntr.compareAndSet(cur, val));","while (val > (cur=cntr.get()) && !cntr.compareAndSet(cur,val)) ;
",0,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
178,"if (null != chunk2 && null != (buffer = chunk2.get(size, sizeIsLowerBound, reuse)))","if (null != chunk2 && null != (buffer=chunk2.get(size,sizeIsLowerBound,reuse))) return buffer;
",0,0,9,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
179,while (!(isInterrupted = Thread.currentThread().isInterrupted()),"while (!(isInterrupted=Thread.currentThread().isInterrupted()) && waitUntilReceived - receivedBytes >= 0 && waitingToSend.get(waitUntilReceived) != null) {
  LockSupport.park();
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
180,if ((hc = threadCounterHashCode.get()) == null || as == null || (m = as.length - 1) < 0,"if ((hc=threadCounterHashCode.get()) == null || as == null || (m=as.length - 1) < 0 || (a=as[m & hc.code]) == null || !(uncontended=U.compareAndSwapLong(a,CELLVALUE,v=a.value,v + x))) {
  fullAddCount(x,hc,uncontended);
  return;
}
",0,19,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
181,while ( null != (e = chunkList.firstEntry()) && chunkSequenceId - e.getKey() > 1 << 12),"while (null != (e=chunkList.firstEntry()) && chunkSequenceId - e.getKey() > 1 << 12) {
  WaitQueue.Signal signal=writerWaiting.register();
  if (null != (e=chunkList.firstEntry()) && chunkSequenceId - e.getKey() > 1 << 12)   signal.await();
 else   signal.cancel();
}
",0,1,9,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
182,if (null != (e = chunkList.firstEntry()) && chunkSequenceId - e.getKey() > 1 << 12),"if (null != (e=chunkList.firstEntry()) && chunkSequenceId - e.getKey() > 1 << 12) signal.await();
 else signal.cancel();
",0,0,9,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
183,if (!forceCubic && abs(Δqx = (3*(bx - ax) - Δx)/2) <= 2*εx &&,"if (!forceCubic && abs(Δqx=(3 * (bx - ax) - Δx) / 2) <= 2 * εx && abs(Δqy=(3 * (by - ay) - Δy) / 2) <= 2 * εy) {
  final double qx=(3 * ax + Δqx) / 2;
  final double qy=(3 * ay + Δqy) / 2;
  path.quadTo(qx + x0,qy + y0,x4,y4);
}
 else {
  path.curveTo(ax + x0,ay + y0,bx + x0,by + y0,x4,y4);
}
",0,1,10,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
184,while (lb.compareTo(pkt = Murmur3Partitioner.instance.getToken(Int32Type.instance.decompose(pk))) >= 0 || ub.compareTo(pkt) < 0),"while (lb.compareTo(pkt=Murmur3Partitioner.instance.getToken(Int32Type.instance.decompose(pk))) >= 0 || ub.compareTo(pkt) < 0) ++pk;
",0,0,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
185,while ((readLine = br.readLine()) != null && readLine.indexOf(warmup_started) == -1);,"while ((readLine=br.readLine()) != null && readLine.indexOf(warmup_started) == -1) ;
",0,3,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
186,"while (!reservedIdx.compareAndSet((nodeId = r.nextInt(TOTAL_CNT)), 0, 1))","while (!reservedIdx.compareAndSet((nodeId=r.nextInt(TOTAL_CNT)),0,1)) doSleep(10);
",0,8,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
187,if (generator.permitNulls(i) && (++valueColumn/totalValueColumns) > rowPopulationRatio),"if (generator.permitNulls(i) && (++valueColumn / totalValueColumns) > rowPopulationRatio) {
  row.row[i]=null;
}
 else {
  Generator gen=generator.valueComponents.get(i);
  gen.setSeed(idseed);
  row.row[i]=gen.generate();
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
188,if (loopCount++ == 2) modifiedName[lengthSoFar++] = RegionInfo.REPLICA_ID_DELIMITER;,"if (loopCount++ == 2) modifiedName[lengthSoFar++]=RegionInfo.REPLICA_ID_DELIMITER;
 else modifiedName[lengthSoFar++]=HConstants.DELIMITER;
",0,2,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
189,if (-1 == (marker = query.indexOf('?')) || parms.size() == 0),"if (-1 == (marker=query.indexOf('?')) || parms.size() == 0) return query;
",0,2,8,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
190,"if (-1 == (marker = query.indexOf('?', position + 1)))","if (-1 == (marker=query.indexOf('?',position + 1))) break;
",0,0,7,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
191,if (!shared && (cctx = F.first(part.group().caches())) == null),"if (!shared && (cctx=F.first(part.group().caches())) == null) return metrics;
",0,1,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
192,if (!dataInTheList[dataIdx++].equals(id)) {,"if (!dataInTheList[dataIdx++].equals(id)) {
  return false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
193,if(lastTagLevel == currentTagLevel-- && !cdata) {,"if (lastTagLevel == currentTagLevel-- && !cdata) {
  openTags.pop();
  println(""/>"");
}
 else {
  if (!cdata) {
    indent(-1).printIndent();
  }
  cdata=false;
  print(""</"").print(openTags.pop()).println("">"");
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
194,"if (path != null || (path = checkDefaultMavenResourceDir(lastPath, ""main"")) != null) {","if (path != null || (path=checkDefaultMavenResourceDir(lastPath,""main"")) != null) {
  return path;
}
 else {
  File lastDir=lastPath.getExistingDirectory(false);
  return lastDir != null ? lastDir.getAbsolutePath() : ""."";
}
",0,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
195,"while ((headerParam = getSession().get(SessionParameter.HEADER + ""."" + x)) != null) {","while ((headerParam=getSession().get(SessionParameter.HEADER + ""."" + x)) != null) {
  String header=headerParam.toString();
  int colon=header.indexOf(':');
  if (colon > -1) {
    String key=header.substring(0,colon).trim();
    if (key.length() > 0) {
      String value=header.substring(colon + 1).trim();
      List<String> values=fixedHeaders.get(key);
      if (values == null) {
        fixedHeaders.put(key,Collections.singletonList(value));
      }
 else {
        List<String> newValues=new ArrayList<String>(values);
        newValues.add(value);
        fixedHeaders.put(key,newValues);
      }
    }
  }
  x++;
}
",0,4,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
196,"if (host == null || (host = host.trim()).length() == 0) throw new IllegalArgumentException(""A proxy host must be specified"");","if (host == null || (host=host.trim()).length() == 0) throw new IllegalArgumentException(""A proxy host must be specified"");
",0,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
197,while ((index = path.lastIndexOf(File.separator)) != -1 && path.length() > rootLength) {,"while ((index=path.lastIndexOf(File.separator)) != -1 && path.length() > rootLength) {
  file=new File(path.substring(0,index));
  String[] children=file.list();
  if (children != null && children.length > 0) {
    break;
  }
  if (!file.delete()) {
    throw new IOException(""Unable to delete "" + file.getAbsolutePath());
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
198,while (node != null && (!node.isAvailable() || (expired = node.expired()) || !sub.hasInterest(node) ||,"while (node != null && (!node.isAvailable() || (expired=node.expired()) || !sub.hasInterest(node)|| !mightAssign(sub,node))) {
  if (expired) {
    expired=false;
    expireEntry(node);
  }
  if (QueueContext._lastSeenUpdater.compareAndSet(context,lastSeen,node)) {
    QueueContext._releasedUpdater.compareAndSet(context,releasedNode,null);
  }
  lastSeen=context.getLastSeenEntry();
  releasedNode=context.getReleasedEntry();
  node=(releasedNode != null && lastSeen.compareTo(releasedNode) >= 0) ? releasedNode : getEntries().next(lastSeen);
}
",0,2,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
199,"while ((pod = findPod(null, null, dc, account.getId(), podsToAvoid)) != null) {","while ((pod=findPod(null,null,dc,account.getId(),podsToAvoid)) != null) {
  podsToAvoid.add(pod.first().getId());
  while ((pool=findStoragePool(dskCh,dc,pod.first(),null,null,null,poolsToAvoid)) != null) {
    break;
  }
  if (pool != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""Found a suitable pool for create volume: "" + pool.getId());
    }
    break;
  }
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
200,"while ((pool = findStoragePool(dskCh, dc, pod.first(), null, null, null, poolsToAvoid)) != null) {","while ((pool=findStoragePool(dskCh,dc,pod.first(),null,null,null,poolsToAvoid)) != null) {
  break;
}
",0,12,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
201,if (this.enclosingLibrary != null && (classBinding = this.enclosingLibrary.getBinding(id)) != null) {,"if (this.enclosingLibrary != null && (classBinding=this.enclosingLibrary.getBinding(id)) != null) {
  return classBinding;
}
",0,104,9,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
202,if (from == null || klass == null || (!Tag.class.isAssignableFrom(klass) && !(isInterface = klass.isInterface()))) {,"if (from == null || klass == null || (!Tag.class.isAssignableFrom(klass) && !(isInterface=klass.isInterface()))) {
  return null;
}
",0,11,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
203,"if ((credentials = handleAuthenticationError(list, target, rawUrl, credentials == null ? """" : credentials.getUserName(), new UserCredentialsSupport(), HG_CLONE_CMD)) != null) {","if ((credentials=handleAuthenticationError(list,target,rawUrl,credentials == null ? """" : credentials.getUserName(),new UserCredentialsSupport(),HG_CLONE_CMD)) != null) {
  retry=true;
}
 else {
  handleError(command,list,NbBundle.getMessage(HgCommand.class,""MSG_COMMAND_ABORTED""),logger);
}
",0,1,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
204,"if ((delim = properties.getProp(ConfigurationKeys.SIMPLE_WRITER_DELIMITER, null)) == null || delim.length() == 0) {","if ((delim=properties.getProp(ConfigurationKeys.SIMPLE_WRITER_DELIMITER,null)) == null || delim.length() == 0) {
  this.recordDelimiter=Optional.absent();
}
 else {
  this.recordDelimiter=Optional.of(delim.getBytes(ConfigurationKeys.DEFAULT_CHARSET_ENCODING)[0]);
}
",0,2,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
205,if (tokens.length < 1 || (t = SessionState.find_resource_type(tokens[0])) == null) {,"if (tokens.length < 1 || (t=SessionState.find_resource_type(tokens[0])) == null) {
  String message=""Usage: list ["" + StringUtils.join(SessionState.ResourceType.values(),""|"") + ""] [<value> [<value>]*]"";
  throw new CommandProcessorException(message);
}
",0,1,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
206,while (pos <= text.length() && (c = text.charAt(pos)) != ' ' && c != '\n' && c != '\r') {,"while (pos <= text.length() && (c=text.charAt(pos)) != ' ' && c != '\n' && c != '\r') {
  ++pos;
}
",0,13,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
207,while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {,"while (resultSet.next() && (limit < 0 || cnt++ < limit)) {
  final DynaBean bean=createDynaBean();
  for (  final DynaProperty property : properties) {
    final String name=property.getName();
    final Object value=getObject(resultSet,name);
    bean.set(name,value);
  }
  rows.add(bean);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
208,"while ((index = langval.indexOf("":"", 0)) != -1) {","while ((index=langval.indexOf("":"",0)) != -1) {
  lang=langval.substring(0,index);
  langval=langval.substring(index + 1);
  loops++;
  String engineName=null;
  try {
    engineName=(String)registeredEngines.get(lang);
    boolean bTryDefinedClassLoader=false;
    if (tccl != null) {
      try {
        tccl.loadClass(engineName);
      }
 catch (      final ClassNotFoundException cnfe) {
        bTryDefinedClassLoader=true;
      }
    }
    if (bTryDefinedClassLoader || tccl == null) {
      definedClassLoader.loadClass(engineName);
    }
  }
 catch (  final ClassNotFoundException cnfe2) {
    lang=langval;
    continue;
  }
  break;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
209,if(attempts++ <= 3 && cmd.getExitCode() != 0) {,"if (attempts++ <= 3 && cmd.getExitCode() != 0) {
  mLogger.warn(""Command exited with "" + cmd.getExitCode() + "", will retry: ""+ command);
  retry=true;
  TimeUnit.SECONDS.sleep(20);
}
",0,5,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
210,if (!active.isSparseRecord(readIdx++),"if (!active.isSparseRecord(readIdx++) && raw.skip(DumpArchiveConstants.TP_SIZE) == -1) {
  throw new EOFException();
}
",0,0,3,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
211,if (numUnpackSubStreams != 1 || stats.folderHasCrc == null,"if (numUnpackSubStreams != 1 || stats.folderHasCrc == null || !stats.folderHasCrc.get(folderIdx++)) {
  numDigests+=numUnpackSubStreams;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
212,"for (int i=0; (i=s.indexOf(KEY_SEP_CHAR, i)+1)>0; ) count++;","for (int i=0; (i=s.indexOf(KEY_SEP_CHAR,i) + 1) > 0; ) count++;
",0,4,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, ForStatement-body, ),
"
213,while (!diffs.isEmpty() && (d = diffs.getFirst()) != null && d.getStartOffset() >= start && (d.text == null || d.text.indexOf('}') < 0)),"while (!diffs.isEmpty() && (d=diffs.getFirst()) != null && d.getStartOffset() >= start && (d.text == null || d.text.indexOf('}') < 0)) diffs.removeFirst();
",0,5,15,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
214,if (childName.equals(node.getNodeName()) && (foundIdx++ == childIndex)),"if (childName.equals(node.getNodeName()) && (foundIdx++ == childIndex)) {
  return findNode(node,components,currentIdx + 1);
}
",0,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
215,while (!diffs.isEmpty() && (d = diffs.getFirst()) != null && d.getStartOffset() >= start),"while (!diffs.isEmpty() && (d=diffs.getFirst()) != null && d.getStartOffset() >= start) diffs.removeFirst();
",0,1,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
216,"while (bytesRead < maxBytes && (len = in.read(buffer, bytesRead, (int) Math.min(maxBytes - bytesRead, buffer.length - bytesRead))) > 0) {","while (bytesRead < maxBytes && (len=in.read(buffer,bytesRead,(int)Math.min(maxBytes - bytesRead,buffer.length - bytesRead))) > 0) {
  bytesRead+=len;
}
",0,1,15,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
217,while (getRun() && ((num = reader.read(inbuf)) != EOF)) {,"while (getRun() && ((num=reader.read(inbuf)) != EOF)) {
  for (int i=0; i < num; i++) {
    final byte ch=inbuf[i];
switch (ch) {
case LF:
      seenCR=false;
    listener.handle(new String(lineBuf.toByteArray(),charset));
  lineBuf.reset();
rePos=pos + i + 1;
break;
case CR:
if (seenCR) {
lineBuf.write(CR);
}
seenCR=true;
break;
default :
if (seenCR) {
seenCR=false;
listener.handle(new String(lineBuf.toByteArray(),charset));
lineBuf.reset();
rePos=pos + i + 1;
}
lineBuf.write(ch);
}
}
pos=reader.getFilePointer();
}
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
218,while (maxWaitingCount-- > 0 && getBalancerRejectionLogEntries(provider).size() != 2) {,"while (maxWaitingCount-- > 0 && getBalancerRejectionLogEntries(provider).size() != 2) {
  Thread.sleep(1000);
}
",0,2,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
219,"if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)","if (((pos=text.indexOf('\n',startPos)) != -1 && pos <= width) || ((pos=text.indexOf('\t',startPos)) != -1 && pos <= width)) {
  return pos;
}
 else if ((startPos + width) >= text.length()) {
  return -1;
}
",0,8,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
220,"if ((tab = table) != null && (n = tab.length) > 0 && (e = tabAt(tab, (n - 1) & h)) != null) {","if ((tab=table) != null && (n=tab.length) > 0 && (e=tabAt(tab,(n - 1) & h)) != null) {
  if ((eh=e.hash) == h) {
    if ((ek=e.key) == key || (ek != null && key.equals(ek))) {
      return true;
    }
  }
 else   if (eh < 0) {
    return ((p=e.find(h,key)) != null);
  }
  while ((e=e.next) != null) {
    if (e.hash == h && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {
      return true;
    }
  }
}
",0,9,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
221,while (!interrupted() && (ch = localInput.read()) != -1),"while (!interrupted() && (ch=localInput.read()) != -1) {
  remoteOutput.write(ch);
  remoteOutput.flush();
}
",0,0,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
222,"if((ret = FileUtil.chmod(subDir.toUri().getPath(), ""a=rx"", true)) != 0) {","if ((ret=FileUtil.chmod(subDir.toUri().getPath(),""a=rx"",true)) != 0) {
  LOG.warn(""chmod failed for "" + subDir + "";retVal=""+ ret);
}
",0,5,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
223,while ( ( ++relativeIndex < 0 ) && ( result != null ) ),"while ((++relativeIndex < 0) && (result != null)) {
  result=result.getParent();
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
224,if ( ( ( isSet = methodName.startsWith( OgnlRuntime.SET_PREFIX ) ) || ( isGet =,"if (((isSet=methodName.startsWith(OgnlRuntime.SET_PREFIX)) || (isGet=methodName.startsWith(OgnlRuntime.GET_PREFIX))) && (methodName.length() > 3)) {
  String propertyName=Introspector.decapitalize(methodName.substring(3));
  Class<?>[] parameterTypes=OgnlRuntime.getParameterTypes(method);
  int parameterCount=parameterTypes.length;
  if (isGet && (parameterCount == 1) && (method.getReturnType() != Void.TYPE)) {
    List<Method> pair=pairs.computeIfAbsent(propertyName,k -> new ArrayList<Method>());
    pair.add(method);
  }
  if (isSet && (parameterCount == 2) && (method.getReturnType() == Void.TYPE)) {
    List<Method> pair=pairs.computeIfAbsent(propertyName,k -> new ArrayList<Method>());
    pair.add(method);
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
225,if (exceptionOnActivate && !(validateCounter++%2 == 0 ? evenValid : oddValid)) {,"if (exceptionOnActivate && !(validateCounter++ % 2 == 0 ? evenValid : oddValid)) {
  throw new Exception();
}
",0,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
226,while ((line = Util.readAsciiLine(in)).length() != 0) {,"while ((line=Util.readAsciiLine(in)).length() != 0) {
  out.addLine(line);
}
",0,7,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
227,for (Class<?> anc = cls; (anc = PCRegistry.getPersistentSuperclass(anc)) != null;) {,"for (Class<?> anc=cls; (anc=PCRegistry.getPersistentSuperclass(anc)) != null; ) {
  addToCollection(_subs,anc,cls,true);
  meta=_metas.get(anc);
  if (meta != null)   meta.clearSubclassCache();
  leastDerived=anc;
}
",0,1,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
228,if ((ret*=2) < 0) ret= 0;,"if ((ret*=2) < 0) ret=0;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
229,if (-1 != (endLocationPostSpan[1] = findNextDrugEntityPost(,"if (-1 != (endLocationPostSpan[1]=findNextDrugEntityPost(elementSpanLength,elementSpan,nea,endPhrase)[1])) {
  patternFoundPost=true;
  caseType[1]=endLocationPostSpan[1] - nea.getBegin();
}
 else if (emptyState[1] != (endLocationPreSpan)[1]) {
  caseType[1]=endLocationPreSpan[1] - nea.getBegin();
}
",0,0,4,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
230,"if (i++==0) { bw.write(""<th rowspan=\""""+(f1_uniq.size()+f2_uniq.size())+""\"">Disagreements</th>""); bw.newLine(); }","if (i++ == 0) {
  bw.write(""<th rowspan=\"""" + (f1_uniq.size() + f2_uniq.size()) + ""\"">Disagreements</th>"");
  bw.newLine();
}
",0,2,12,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
231,"for (String s = """"; (s = r.readLine()) != null;) {","for (String s=""""; (s=r.readLine()) != null; ) {
  if (s.charAt(s.length() - 1) == '|') {
    s=s.substring(0,s.length() - 1);
  }
  s=s.replace('|','\t');
  w.write(s);
  w.newLine();
}
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
StringLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
232,"if ( !client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++, System.currentTimeMillis() - startMillis, RetryLoop.getDefaultRetrySleeper()) )","if (!client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++,System.currentTimeMillis() - startMillis,RetryLoop.getDefaultRetrySleeper())) {
  throw new KeeperException.NoNodeException(""Sequential path not found - possible session loss"");
}
",0,3,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
233,"if ( client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++, System.currentTimeMillis() - startMillis, RetryLoop.getDefaultRetrySleeper()) )","if (client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++,System.currentTimeMillis() - startMillis,RetryLoop.getDefaultRetrySleeper())) {
  isDone=false;
}
 else {
  throw e;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
234,while ((workqueue.getActiveCount() < DEFAULT_HIGH_WATER_MARK,"while ((workqueue.getActiveCount() < DEFAULT_HIGH_WATER_MARK || numRun < DEFAULT_HIGH_WATER_MARK || workqueue.getSize() > 0) && max++ < 10) {
  Thread.sleep(100L);
  numRun=numRunning(workItems);
}
",0,0,3,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
235,"while ((className = in.readLine()) != null && (!className.trim().equals(""""))) {","while ((className=in.readLine()) != null && (!className.trim().equals(""""))) {
  log.info(""Loading the "" + providerClassName + "" implementation: ""+ className);
  try {
    Class<? extends T> clazz=loader.loadClass(className).asSubclass(providerClass);
    providers.add(clazz.newInstance());
  }
 catch (  ClassNotFoundException e) {
    handleException(""Unable to find the specified class on the path or "" + ""in the jar file"",e);
  }
catch (  IllegalAccessException e) {
    handleException(""Unable to load the class from the jar"",e);
  }
catch (  InstantiationException e) {
    handleException(""Unable to instantiate the class specified"",e);
  }
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
236,while ((existing = URLMapper.findFileObject(new URI(uri).toURL())) == null) {,"while ((existing=URLMapper.findFileObject(new URI(uri).toURL())) == null) {
  int slash=uri.lastIndexOf('/');
  if (path.length() > 0) {
    path.insert(0,'/');
  }
  path.insert(0,uri.substring(slash + 1));
  uri=uri.substring(0,slash);
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
237,if (!this.done && ((this.current = this.iterator.next(this.current)) != null)) {,"if (!this.done && ((this.current=this.iterator.next(this.current)) != null)) {
  if (!this.comparator.equalToReference(this.current)) {
    this.comparator.setReference(this.current);
    this.lookAheadHasNext=false;
    this.valuesIterator.currentIsUnconsumed=true;
    return true;
  }
}
 else {
  this.valuesIterator=null;
  this.current=null;
  this.done=true;
  return false;
}
",0,14,10,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
238,if (earlyWakeupCount++ > (DaemonService.TIMER_DELAY / 500)) {,"if (earlyWakeupCount++ > (DaemonService.TIMER_DELAY / 500)) {
  earlyWakeupCount=0;
  checkWallClock=true;
}
",0,0,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
239,if ((keyIndex = ((DBTable) rowset).getPrimaryKey().getColumnPos(this)) >= 0),"if ((keyIndex=((DBTable)rowset).getPrimaryKey().getColumnPos(this)) >= 0) elem.setAttribute(""key"",String.valueOf(keyIndex + 1));
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
240,while ((compareResult = ((Integer)leftGreaterThanRight.invoke(activation)).intValue()),"while ((compareResult=((Integer)leftGreaterThanRight.invoke(activation)).intValue()) == GREATER_THAN) {
  rightRow=rightResultSet.getNextRowCore();
  rowsSeenRight++;
  if (rightRow == null) {
    clearCurrentRow();
    return (ExecRow)null;
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
241,"while ((parent = parent.getParentFile()) != null && (info = getCachedStatus(parent, false)) != null && (info.getStatus() & FileInformation.STATUS_MANAGED) != 0) {","while ((parent=parent.getParentFile()) != null && (info=getCachedStatus(parent,false)) != null && (info.getStatus() & FileInformation.STATUS_MANAGED) != 0) {
  if (!info.isDirectory()) {
    info=createFolderFileInformation(parent,null);
  }
  if (LOG.isLoggable(Level.FINE)) {
    LOG.log(Level.FINE,""updateParentInformation: updating {0} with {1} triggered by {2}"",new Object[]{parent,newInfo,file});
  }
  if (check) {
    checkIsParentOf(parent,child);
    if (info == FILE_INFORMATION_EXCLUDED || info == FILE_INFORMATION_UPTODATE || info == FILE_INFORMATION_NOTMANAGED || info == FILE_INFORMATION_NOTMANAGED_DIRECTORY || info == FILE_INFORMATION_UNKNOWN || info == FILE_INFORMATION_NEWLOCALLY) {
      throw new IllegalStateException(""Wrong info, expected an own instance for "" + parent + "", ""+ info.getStatusText()+ "" - ""+ info.getStatus());
    }
  }
  if (!info.setModifiedChild(child,childInfo)) {
    break;
  }
  if (!info.getModifiedChildren(true).isEmpty() && (newInfo.getStatus() & FileInformation.STATUS_VERSIONED_CONFLICT) == 0) {
    childInfo=new FileInformation(FileInformation.STATUS_VERSIONED_CONFLICT,true);
  }
  child=parent;
}
",0,8,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
242,"if ((p = FileOwnerQuery.getOwner(Utilities.toURI(sourceLoc))) != null && (thisProject == null || !thisProject.equals(p)) && !isParentOf(model.getNBProjectFolder(), sourceLoc) && !isParentOf(model.getBaseFolder(), sourceLoc)) {","if ((p=FileOwnerQuery.getOwner(Utilities.toURI(sourceLoc))) != null && (thisProject == null || !thisProject.equals(p)) && !isParentOf(model.getNBProjectFolder(),sourceLoc) && !isParentOf(model.getBaseFolder(),sourceLoc)) {
  invalidRoots.add(sourceLoc);
}
 else {
  List<JavaProjectGenerator.SourceFolder> sourceFolders=model.getSourceFolders();
  for (  JavaProjectGenerator.SourceFolder sf : sourceFolders) {
    if (location.equals(sf.location)) {
      if ((isTests && !model.isTestSourceFolder(sf)) || (!isTests && model.isTestSourceFolder(sf))) {
        invalidRoots.add(sourceLoc);
      }
      continue FILE;
    }
  }
  JavaProjectGenerator.SourceFolder sf=new JavaProjectGenerator.SourceFolder();
  sf.location=location;
  sf.type=ProjectModel.TYPE_JAVA;
  sf.style=JavaProjectNature.STYLE_PACKAGES;
  sf.label=getDefaultLabel(sf.location,isTests);
  if (!sourceFolders.isEmpty()) {
    JavaProjectGenerator.SourceFolder prototype=sourceFolders.iterator().next();
    sf.includes=prototype.includes;
    sf.excludes=prototype.excludes;
  }
  sf.encoding=model.getEncoding();
  model.addSourceFolder(sf,isTests);
}
",0,12,20,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
243,if (((data[offset++]) & FIELD_NULL) != FIELD_NULL),"if (((data[offset++]) & FIELD_NULL) != FIELD_NULL) {
  int value=data[offset];
  if ((value & ~0x3f) == 0) {
    return (value + 2);
  }
 else   if ((value & 0x80) == 0) {
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT((value & 0x40) == 0x40);
    }
    return ((((value & 0x3f) << 8) | (data[offset + 1] & 0xff)) + 3);
  }
 else {
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT((value & 0x80) == 0x80);
    }
    return ((((value & 0x7f) << 24) | ((data[offset + 1] & 0xff) << 16) | ((data[offset + 2] & 0xff) << 8)| (data[offset + 3] & 0xff)) + 5);
  }
}
 else {
  return (1);
}
",0,1,4,,"SimpleName(ArrayAccess-array, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
244,while (((duration = (System.currentTimeMillis() - start)) < runTime) &&,"while (((duration=(System.currentTimeMillis() - start)) < runTime) && (allWereAlive=allAlive(threads)) && (!interrupted)) {
  try {
    Thread.sleep(800L);
  }
 catch (  InterruptedException e) {
    interrupted=true;
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
245,while ( (str = policyadd.readLine()) != null ) { policypw.println(str); },"while ((str=policyadd.readLine()) != null) {
  policypw.println(str);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
"
246,if (expectedOutput.equals(s) || (--retriesLeft <= 0)) {,"if (expectedOutput.equals(s) || (--retriesLeft <= 0)) {
  break;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
247,while ((bufRead = cgiOutput.read(bBuf)) != -1) {},"while ((bufRead=cgiOutput.read(bBuf)) != -1) {
}
",0,4,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
248,if (i++ != (val = rs.getInt(1))),"if (i++ != (val=rs.getInt(1))) {
  System.out.println(""FAIL - expecting "" + i + "" got ""+ val);
  fail=true;
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
249,"while( (index = line.indexOf( m_queries[j].word, index + 1 ) ) != -1 ) {","while ((index=line.indexOf(m_queries[j].word,index + 1)) != -1) {
  if (m_queries[j].type != QueryItem.FORBIDDEN) {
    scores[j]++;
  }
 else {
    return null;
  }
}
",0,3,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
250,if ( (++_rowIdx) >= _rows.length ) { return false; },"if ((++_rowIdx) >= _rows.length) {
  return false;
}
 else {
  _callers=new StringBuffer();
  return true;
}
",0,0,3,,"SimpleName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
251,if (++pos>length) return -1;,"if (++pos > length) return -1;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
252,if ((obj = e.nextElement()) instanceof DataValueDescriptor[] ),"if ((obj=e.nextElement()) instanceof DataValueDescriptor[]) {
  row=(DataValueDescriptor[])obj;
  key=((SQLLongint)(row[2])).getLong();
  if (!set.remove(key)) {
    return (fail(""(t_scanFetchHashtable-obj) wrong key, expected ("" + input_expect_key + "")""+ ""but got (""+ key+ "").""));
  }
  numrows++;
}
 else if (obj instanceof List) {
  List row_vect=(List)obj;
  for (int i=0; i < row_vect.size(); i++) {
    row=(DataValueDescriptor[])row_vect.get(i);
    key=((SQLLongint)(row[2])).getLong();
    if (!set.remove(key)) {
      return (fail(""(t_scanFetchHashtable-vector) wrong key, expected ("" + input_expect_key + "")""+ ""but got (""+ key+ "").""));
    }
    numrows++;
  }
}
 else {
  return (fail(""(t_scanFetchHashtable) got bad type for data: "" + obj));
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
253,"if ((fileName=getArg(""-f"",args))!=null) return fileName;","if ((fileName=getArg(""-f"",args)) != null) return fileName;
",0,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
254,if (((args[argIndex].length() > 0) && (args[argIndex].charAt(0) == '-')) ||,"if (((args[argIndex].length() > 0) && (args[argIndex].charAt(0) == '-')) || (++count > DB2_MAX_NUMBER_OF_TABLES)) break;
",0,1,9,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
255,if (count++ >= failAtRecordCount && getRuntimeContext().getAttemptNumber() == 0) {,"if (count++ >= failAtRecordCount && getRuntimeContext().getAttemptNumber() == 0) {
  throw new RuntimeException(""Artificial failure. Restart please."");
}
",0,10,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
256,while (recordCount < MAX_RECORDS_PER_BATCH && (line = this.reader.readLine()) != null) {,"while (recordCount < MAX_RECORDS_PER_BATCH && (line=this.reader.readLine()) != null) {
  if (line.trim().length() == 0) {
    continue;
  }
  List<String[]> fields=new ArrayList<>();
  for (  String field : line.split(""\t"")) {
    int index=field.indexOf("":"");
    if (index <= 0) {
      throw new ParseException(String.format(""Invalid LTSV format: %s\n%d:%s"",inputPath,recordCount + 1,line),0);
    }
    String fieldName=field.substring(0,index);
    String fieldValue=field.substring(index + 1);
    if (selectedColumn(fieldName)) {
      fields.add(new String[]{fieldName,fieldValue});
    }
  }
  if (fields.size() == 0) {
    continue;
  }
  this.writer.setPosition(recordCount);
  map.start();
  for (  String[] field : fields) {
    byte[] bytes=field[1].getBytes(StandardCharsets.UTF_8);
    this.buffer=this.buffer.reallocIfNeeded(bytes.length);
    this.buffer.setBytes(0,bytes,0,bytes.length);
    map.varChar(field[0]).writeVarChar(0,bytes.length,buffer);
  }
  map.end();
  recordCount++;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
257,"if (tab == null || (n = tab.length) == 0 || (f = tabAt(tab, i = (n - 1) & hash)) == null) {","if (tab == null || (n=tab.length) == 0 || (f=tabAt(tab,i=(n - 1) & hash)) == null) {
  break;
}
 else if ((fh=f.hash) == MOVED) {
  tab=helpTransfer(tab,f);
}
 else {
  boolean wasPresent=false;
  boolean validated=false;
synchronized (f) {
    if (tabAt(tab,i) == f) {
      if (fh >= 0) {
        validated=true;
        for (Node<V> e=f, pred=null; ; ) {
          V ek;
          if (e.hash == hash && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {
            wasPresent=true;
            if (pred != null) {
              pred.next=e.next;
            }
 else {
              setTabAt(tab,i,e.next);
            }
            break;
          }
          pred=e;
          if ((e=e.next) == null) {
            break;
          }
        }
      }
 else       if (f instanceof TreeBin) {
        validated=true;
        TreeBin<V> t=(TreeBin<V>)f;
        TreeNode<V> r, p;
        if ((r=t.root) != null && (p=r.findTreeNode(hash,key,null)) != null) {
          wasPresent=true;
          if (t.removeTreeNode(p)) {
            setTabAt(tab,i,untreeify(t.first));
          }
        }
      }
    }
  }
  if (validated) {
    if (wasPresent) {
      addCount(-1L,-1);
      return true;
    }
    break;
  }
}
",0,1,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
258,if (fi != null && (fi.getStatus() & FileInformation.STATUS_VERSIONED_ADDEDLOCALLY) != 0 && (st = fi.getEntry(f)) != null,"if (fi != null && (fi.getStatus() & FileInformation.STATUS_VERSIONED_ADDEDLOCALLY) != 0 && (st=fi.getEntry(f)) != null && st.isCopied() && (copiedUrl=SvnUtils.getCopiedUrl(f)) != null && !deletedCandidates.containsKey(copiedUrl)) {
  if (checkUrl(st,f)) {
    File copiedFrom=getCopiedFromFile(st,f,copiedUrl);
    fi=cache.getCachedStatus(copiedFrom);
    if (fi != null && (fi.getStatus() & (FileInformation.STATUS_VERSIONED_DELETEDLOCALLY | FileInformation.STATUS_VERSIONED_REMOVEDLOCALLY)) != 0) {
      deletedCandidates.put(copiedUrl,copiedFrom);
    }
  }
}
",0,4,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
259,for (SizedJBlock sb : blocks[i++]) {,"for (SizedJBlock sb : blocks[i++]) {
  JBlock b=sb.getBlock();
  if (!b.isEmpty()) {
    if (optionManager != null && exprsInMethod > optionManager.getOption(ExecConstants.CODE_GEN_EXP_IN_METHOD_SIZE_VALIDATOR)) {
      JMethod inner=clazz.method(JMod.PRIVATE,model._ref(method.getReturnType()),method.getMethodName() + methodIndex);
      JInvocation methodCall=JExpr.invoke(inner);
      for (      CodeGeneratorArgument arg : method) {
        inner.param(arg.getType(),arg.getName());
        methodCall.arg(JExpr.direct(arg.getName()));
      }
      for (      Class<?> c : method.getThrowsIterable()) {
        inner._throws(model.ref(c));
      }
      inner._throws(SchemaChangeException.class);
      if (isVoidMethod) {
        outer.body().add(methodCall);
      }
 else {
        outer.body()._return(methodCall);
      }
      outer=inner;
      exprsInMethod=0;
      ++methodIndex;
    }
    outer.body().add(b);
    exprsInMethod+=sb.getCount();
  }
}
",0,0,4,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(ArrayAccess-array, EnhancedForStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, EnhancedForStatement-expression, ),
"
260,while (((fromIndex = info.getKeyMatchBitVector().nextClearBit(fromIndex)) != -1) && (fromIndex < info.recordCount)) {,"while (((fromIndex=info.getKeyMatchBitVector().nextClearBit(fromIndex)) != -1) && (fromIndex < info.recordCount)) {
  compositeIndexes.add((i << SHIFT_SIZE) | (fromIndex & HashTable.BATCH_MASK));
  fromIndex++;
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
261,while ((rawBatch = getNext(p)) != null && rawBatch.getHeader().getDef().getRecordCount() == 0) {,"while ((rawBatch=getNext(p)) != null && rawBatch.getHeader().getDef().getRecordCount() == 0) {
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
262,if (lruEntry != null && (lruKey = lruEntry.first().get()) != null && lruKey.equals(artefact)) {,"if (lruEntry != null && (lruKey=lruEntry.first().get()) != null && lruKey.equals(artefact)) {
  return lruEntry.second();
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
263,if (mvccEnabled && (tx != null || (tx = tx(ctx)) != null)),"if (mvccEnabled && (tx != null || (tx=tx(ctx)) != null)) tx.setRollbackOnly();
",0,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
264,if ((rules = (ResolverTypePrecedence.secondaryImplicitCastRules.get(paramType.getMinorType()))) != null,"if ((rules=(ResolverTypePrecedence.secondaryImplicitCastRules.get(paramType.getMinorType()))) != null && rules.contains(argType.getMinorType())) {
  secondaryCast=true;
}
 else {
  return -1;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
265,if ((cmp = (x1 < x2 ? -1 : (x1 == x2 ? 0 : 1))) == 0) return 0;,"if ((cmp=(x1 < x2 ? -1 : (x1 == x2 ? 0 : 1))) == 0) return 0;
",0,1,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
266,if (colPath.isNamed() && !DYNAMIC_STAR.equals(colPathName = colPath.getNameSegment().getPath()) && colPathName.equalsIgnoreCase(name)) {,"if (colPath.isNamed() && !DYNAMIC_STAR.equals(colPathName=colPath.getNameSegment().getPath()) && colPathName.equalsIgnoreCase(name)) {
  name=colPathName;
  colNextChild=colPath.getChild();
  break;
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
267,while (!areQueriesAndFragmentsEmpty() && (currentTime = System.currentTimeMillis()) < endTime) {,"while (!areQueriesAndFragmentsEmpty() && (currentTime=System.currentTimeMillis()) < endTime) {
  try {
    if (!isEmptyCondition.await(endTime - currentTime,TimeUnit.MILLISECONDS)) {
      break;
    }
  }
 catch (  InterruptedException e) {
    logger.error(""Interrupted while waiting to exit"");
  }
}
",0,0,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
268,for (byte[] largeEvent; (largeEvent = largeEventsToEmit.poll()) != LARGE_EVENTS_STOP; ) {,"for (byte[] largeEvent; (largeEvent=largeEventsToEmit.poll()) != LARGE_EVENTS_STOP; ) {
  emitLargeEvent(largeEvent);
  approximateBuffersToEmitCount.decrementAndGet();
  approximateLargeEventsToEmitCount.decrementAndGet();
  approximateEventsToEmitCount.decrementAndGet();
}
",0,0,7,,"PrimitiveType(ArrayType-elementType, VariableDeclarationExpression-type, ForStatement-initializers, ),
Dimension(ArrayType-dimensions, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
269,"if ((read = is.read(buf, total, bs - total)) <= 0) {","if ((read=is.read(buf,total,bs - total)) <= 0) {
  break;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
270,"for (pos = 0; (delPos = str.indexOf(delimiter, pos)) != -1; pos = delPos + delimiter.length()) {","for (pos=0; (delPos=str.indexOf(delimiter,pos)) != -1; pos=delPos + delimiter.length()) {
  result.add(deleteAny(str.substring(pos,delPos),charsToDelete));
}
",0,0,12,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
"
271,while ((i++) < 60 && urls == null) {,"while ((i++) < 60 && urls == null) {
  urls=registryService.getRegistered().get(""org.apache.dubbo.config.spring.api.DemoService"");
  Thread.sleep(10);
}
",0,0,4,,"SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
272,if ((listTableInfo == null) && (listTableInfo = getSessionObject(ListTableInfo.class)) == null),"if ((listTableInfo == null) && (listTableInfo=getSessionObject(ListTableInfo.class)) == null) {
  listTableInfo=new BeanListTableInfo();
  listTableInfo.setSortColumnName((defaultSortColumn != null ? defaultSortColumn.getName() : null));
  listTableInfo.setSortAscending(defaultSortAscending);
  setSessionObject(ListTableInfo.class,listTableInfo);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
273,if (paramObject==null || StringUtils.isEmpty((objectKey=paramObject.getObjectKey()))),"if (paramObject == null || StringUtils.isEmpty((objectKey=paramObject.getObjectKey()))) throw new InvalidArgumentException(""paramObject"",paramObject);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
274,"if ((node = clusterMap.getNode(networkLoc+""/""+host)) == null) {","if ((node=clusterMap.getNode(networkLoc + ""/"" + host)) == null) {
  node=new NodeBase(host,networkLoc);
  clusterMap.add(node);
  if (node.getLevel() < getNumTaskCacheLevels()) {
    LOG.fatal(""Got a host whose level is: "" + node.getLevel() + "".""+ "" Should get at least a level of value: ""+ getNumTaskCacheLevels());
    try {
      stopTracker();
    }
 catch (    IOException ie) {
      LOG.warn(""Exception encountered during shutdown: "" + StringUtils.stringifyException(ie));
      System.exit(-1);
    }
  }
  hostnameToNodeMap.put(host,node);
  nodesAtMaxLevel.add(getParentNode(node,getNumTaskCacheLevels() - 1));
}
",0,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
275,"while (!eq( value, desiredValue ) && (d = remTime( end, now )) > 0)","while (!eq(value,desiredValue) && (d=remTime(end,now)) > 0) {
  wait(d);
  now=Timer.getNanos();
}
",0,0,8,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
276,"while ((idx1 = t.indexOf('\n', lastIdx1)) >=0 && (idx2 = text.indexOf('\n', lastIdx2)) >= 0) {","while ((idx1=t.indexOf('\n',lastIdx1)) >= 0 && (idx2=text.indexOf('\n',lastIdx2)) >= 0) {
  lastIdx1=idx1 + 1;
  lastIdx2=idx2 + 1;
}
",0,6,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
277,while ((--i >= 0) && (special.indexOf(text.charAt(i)) == -1));,"while ((--i >= 0) && (special.indexOf(text.charAt(i)) == -1)) ;
",0,0,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
278,if (index < formattersList.getModel().getSize() || --index >= 0) {,"if (index < formattersList.getModel().getSize() || --index >= 0) {
  formattersList.setSelectedIndex(index);
}
",0,5,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
279,"if ((ch = next(str, index++)) == EOL || ch == ']')","if ((ch=next(str,index++)) == EOL || ch == ']') {
  break;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
280,"if (i == length - 1 || isTrue(fns[i++].execute(session, null)))","if (i == length - 1 || isTrue(fns[i++].execute(session,null))) {
  return fns[i].execute(session,null);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
281,while ((!daysOfMonth.get(dayOfMonth) || !daysOfWeek.get(dayOfWeek - 1)) && count++ < max) {,"while ((!daysOfMonth.get(dayOfMonth) || !daysOfWeek.get(dayOfWeek - 1)) && count++ < max) {
  calendar.add(Calendar.DAY_OF_MONTH,1);
  dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);
  dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);
  reset(calendar,resets);
}
",0,4,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
282,while (((c = read()) != -1) && (c != '\n') && (c != '\r')),"while (((c=read()) != -1) && (c != '\n') && (c != '\r')) {
  line.append((char)c);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
283,if ((c == '\r') && ((c = read()) != '\n') && (c != -1)),"if ((c == '\r') && ((c=read()) != '\n') && (c != -1)) {
  --pos;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
284,"while (((header = readLine()) != null) && !header.equals(""""))","while (((header=readLine()) != null) && !header.equals("""")) {
  int colonIdx=header.indexOf(':');
{
    String name=header.substring(0,colonIdx);
    String value=header.substring(colonIdx + 1);
    headers.put(name.toLowerCase(),value.trim());
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
285,"while ((l = inStream.read(tmp, 0, Math.min(DEFAULT_BYTE_BUFFER_SIZE, buffer.capacity() - buffer.length()))) > 0) {","while ((l=inStream.read(tmp,0,Math.min(DEFAULT_BYTE_BUFFER_SIZE,buffer.capacity() - buffer.length()))) > 0) {
  buffer.append(tmp,0,l);
}
",0,2,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
286,"while ((idx = indexOf(chars, length, '/', odx)) < length - 1)","while ((idx=indexOf(chars,length,'/',odx)) < length - 1) {
  int ndx=indexOf(chars,length,'/',idx + 1);
  int kill=-1;
  if (ndx == idx + 1) {
    kill=1;
  }
 else   if ((ndx >= idx + 2) && (chars[idx + 1] == '.')) {
    if (ndx == idx + 2) {
      kill=2;
    }
 else     if ((ndx == idx + 3) && (chars[idx + 2] == '.')) {
      kill=3;
      while ((idx > 0) && (chars[--idx] != '/')) {
        ++kill;
      }
    }
  }
  if (kill == -1) {
    odx=ndx;
  }
 else   if (idx + kill >= length) {
    length=odx=idx + 1;
  }
 else {
    length-=kill;
    System.arraycopy(chars,idx + 1 + kill,chars,idx + 1,length - idx - 1);
    odx=idx;
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
287,while ((idx > 0) && (chars[--idx] != '/')),"while ((idx > 0) && (chars[--idx] != '/')) {
  ++kill;
}
",0,13,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
288,while ((lineIn = in.readLine()) != null && (lineOut = out.readLine()) != null) {,"while ((lineIn=in.readLine()) != null && (lineOut=out.readLine()) != null) {
  ++lineNumber;
  lineOut=lineOut.substring(lineOut.indexOf(""\t"") + 1);
  assertEquals(""line "" + lineNumber,lineIn,lineOut);
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
289,"if ((index = indexOf(o, data, data.length)) >= 0) {","if ((index=indexOf(o,data,data.length)) >= 0) {
  remove(index);
  return true;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
290,for (pos = pos + 1 & this.mask; (curr = key[pos]) != null; pos = pos + 1 & this.mask) {,"for (pos=pos + 1 & this.mask; (curr=key[pos]) != null; pos=pos + 1 & this.mask) {
  int slot=mix(curr.hashCode()) & this.mask;
  if (last <= pos) {
    if (last < slot && slot <= pos) {
      continue;
    }
  }
 else   if (last < slot || slot <= pos) {
    continue;
  }
  key[last]=curr;
  this.value[last]=this.value[pos];
  this.fixPointers(pos,last);
  continue label32;
}
",0,0,14,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-initializers, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
"
291,if ((curr = key[pos = pos + 1 & mask]) == null) {,"if ((curr=key[pos=pos + 1 & mask]) == null) {
  return false;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
292,for (Iterator<K> i = this.iterator(); n-- != 0; h += k == null ? 0 : k.hashCode()) {,"for (Iterator<K> i=this.iterator(); n-- != 0; h+=k == null ? 0 : k.hashCode()) {
  k=i.next();
}
",0,0,13,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
ThisExpression(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ForStatement-updaters, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ForStatement-updaters, ),
NumberLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ForStatement-updaters, ),
"
293,for (j = max; j-- != 0 && i.hasNext(); array[offset++] = i.next()) {,"for (j=max; j-- != 0 && i.hasNext(); array[offset++]=i.next()) {
  ;
}
",0,2,10,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ForStatement-updaters, ),
"
294,"if ((idx = pieces[pieceIdx].indexOf(""="")) <= 0)","if ((idx=pieces[pieceIdx].indexOf(""="")) <= 0) {
  throw new IllegalArgumentException(""Not a directive/attribute: "" + ss[ssIdx]);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
295,while (remaining-- > 0 && ((next = reader.read()) != null)) {,"while (remaining-- > 0 && ((next=reader.read()) != null)) {
  result.add(next);
}
",0,2,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
296,while ((is = ia.getNext(null)).isPresent()) {,"while ((is=ia.getNext(null)).isPresent()) {
  assertTrue(splits.remove(is.get()));
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
297,while (j >= 0 && slots.get(j).get(position[j]).isSingleKey() && (incremented=true) && (position[j] = (position[j] + 1) % slots.get(j).size()) == 0) {,"while (j >= 0 && slots.get(j).get(position[j]).isSingleKey() && (incremented=true) && (position[j]=(position[j] + 1) % slots.get(j).size()) == 0) {
  j--;
  incremented=false;
}
",0,9,21,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
298,if ((nextQueue != null && min.headTimestamp > nextQueue.headTimestamp),"if ((nextQueue != null && min.headTimestamp > nextQueue.headTimestamp) || (min.headTimestamp > maxEmitTimestamp) || (emitCount++ > queueCapacity && !emptyQueues.isEmpty())) {
  break;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
299,while ((timeLeft = (deadline - (now = System.nanoTime()))) > 0,"while ((timeLeft=(deadline - (now=System.nanoTime()))) > 0 && !hasAvailability(totalLimit,outputLimit,inputLimit)) {
  if (!(closeInactiveStream(openOutputStreams,now) || closeInactiveStream(openInputStreams,now))) {
    long timeToWait=Math.min(checkIntervalNanos,timeLeft);
    available.await(timeToWait,TimeUnit.NANOSECONDS);
  }
}
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
300,if (str.charAt(sPos++) != this.value[pPos++]) {,"if (str.charAt(sPos++) != this.value[pPos++]) {
  pPos=fallBackPosition;
  found=false;
  break;
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
301,if ((result = value[o1++] - dest.charAt(o2++)) != 0) {,"if ((result=value[o1++] - dest.charAt(o2++)) != 0) {
  return result;
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
302,"while ((split = (GenericInputSplit) ia.getNextInputSplit(host, 0))","while ((split=(GenericInputSplit)ia.getNextInputSplit(host,0)) != null) {
  splitsRetrieved.incrementAndGet();
  sumOfIds.addAndGet(split.getSplitNumber());
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
303,while ((pojo = inputFormat.nextRecord(new TwitterPOJO())) != null) {,"while ((pojo=inputFormat.nextRecord(new TwitterPOJO())) != null) {
  actual.add(pojo);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
304,if (timeToRun == 0 || (delayNanos = timeToRun - System.nanoTime()) <= 0) {,"if (timeToRun == 0 || (delayNanos=timeToRun - System.nanoTime()) <= 0) {
  try {
    runWithContextClassLoader(() -> runAsync.getRunnable().run(),flinkClassLoader);
  }
 catch (  Throwable t) {
    log.error(""Caught exception while executing runnable in main thread."",t);
    ExceptionUtils.rethrowIfFatalErrorOrOOM(t);
  }
}
 else {
  FiniteDuration delay=new FiniteDuration(delayNanos,TimeUnit.NANOSECONDS);
  RunAsync message=new RunAsync(runAsync.getRunnable(),timeToRun);
  final Object envelopedSelfMessage=envelopeSelfMessage(message);
  getContext().system().scheduler().scheduleOnce(delay,getSelf(),envelopedSelfMessage,getContext().dispatcher(),ActorRef.noSender());
}
",0,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
305,if (++this.currentSegmentIndex < this.segments.length) {,"if (++this.currentSegmentIndex < this.segments.length) {
  return this.segments[this.currentSegmentIndex];
}
 else {
  throw new EOFException();
}
",0,2,5,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
306,if (subpartitionBuffersCount[channel]-- == maxBuffersPerChannel) {,"if (subpartitionBuffersCount[channel]-- == maxBuffersPerChannel) {
  unavailableSubpartitionsCount--;
}
",0,0,3,,"SimpleName(ArrayAccess-array, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
307,if (next.buffer().isBuffer() && --numCreditsAvailable < 0) {,"if (next.buffer().isBuffer() && --numCreditsAvailable < 0) {
  throw new IllegalStateException(""no credit available"");
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
308,while ((updateTracking = Utilities.locateUpdateTracking (m)) != null && ! getStorageFilesForDelete ().contains (updateTracking)) {,"while ((updateTracking=Utilities.locateUpdateTracking(m)) != null && !getStorageFilesForDelete().contains(updateTracking)) {
  removeModuleFilesInCluster(m,updateTracking,markForDelete);
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
309,while (this.listeners.size () != 0 && c-- > 0) {,"while (this.listeners.size() != 0 && c-- > 0) {
  System.gc();
  wait(500);
}
",0,11,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
310,while ( ( line = r.readLine() ) != null && line.trim().length() > 0 ),"while ((line=r.readLine()) != null && line.trim().length() > 0) {
  if (!consumerLineIt.hasNext()) {
    fail(""GitBlameConsumer lines do not match the original output!"");
  }
  BlameLine blameLine=consumerLineIt.next();
  Assert.assertNotNull(blameLine);
  String[] parts=line.split(""\t"");
  Assert.assertEquals(3,parts.length);
  Assert.assertEquals(""error in line "" + lineNr,parts[0],blameLine.getRevision());
  Assert.assertEquals(""error in line "" + lineNr,parts[1],blameLine.getAuthor());
  Assert.assertEquals(""error in line "" + lineNr,parts[2],blameDateFormat.format(blameLine.getDate()));
  lineNr++;
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
311,while (running && !((next = actions.take()) instanceof EndEvent)) {,"while (running && !((next=actions.take()) instanceof EndEvent)) {
  if (next instanceof IntegerEvent) {
    collectedInts.add(((IntegerEvent)next).value);
  }
 else   if (next instanceof CheckpointMetaData) {
    takeCheckpoint(((CheckpointMetaData)next).getCheckpointId(),collectedInts);
  }
 else {
    throw new Exception(""Unrecognized: "" + next);
  }
}
",0,3,5,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
312,for (int i = keyPrefixBytes.length; --i >= backend.getKeyGroupPrefixBytes(); ) {,"for (int i=keyPrefixBytes.length; --i >= backend.getKeyGroupPrefixBytes(); ) {
  if (rawKeyBytes[i] != keyPrefixBytes[i]) {
    return false;
  }
}
",0,1,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ForStatement-expression, ),
"
313,for (int np = end; (--np >= 0) && name.charAt(np) == ')';) {,"for (int np=end; (--np >= 0) && name.charAt(np) == ')'; ) {
  final int c=name.lastIndexOf('(',start - 1);
  if (c < 0) {
    warning(parent,element,Errors.formatInternational(Errors.Keys.NonEquilibratedParenthesis_2,'(',name),null);
    break;
  }
  start=c;
}
",0,9,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
314,if ((eh = e.hash) == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) {,"if ((eh=e.hash) == h && ((ek=e.key) == k || (ek != null && k.equals(ek)))) {
  return e;
}
",0,7,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
315,rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask;,"for (int rootTable=0; rootTable < numTables && ((mask=lowBitsMask[rootTable]) & pos) == mask; rootTable++) {
  Entry<K,V> entry=maps[rootTable].table[pos >> shifts[rootTable]];
  while (entry != null) {
    if (entry.touchedTag < touchedTag) {
      entry.touchedTag=touchedTag;
      final K key=entry.key;
      final int hashCode=entry.hashCode;
      visitor.startNewKey(key);
      visitor.nextValue(entry.value);
      addEntriesFromChain(entry.next,visitor,key,touchedTag,hashCode);
      for (int followupTable=rootTable + 1; followupTable < numTables; followupTable++) {
        Entry<K,V> followupEntry=maps[followupTable].table[pos >> shifts[followupTable]];
        if (followupEntry != null) {
          addEntriesFromChain(followupEntry,visitor,key,touchedTag,hashCode);
        }
      }
      visitor.keyDone();
    }
    entry=entry.next;
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ),
"
316,while ((read = input.read()) != LexerInput.EOF && (m = VARIABLE_RE.matcher(input.readText())).find()) {,"while ((read=input.read()) != LexerInput.EOF && (m=VARIABLE_RE.matcher(input.readText())).find()) {
  if (m.end() < input.readLength())   break;
}
",0,1,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
317,if (isMailboxLoopRunning() && (maybeMail = mailbox.tryTake(MIN_PRIORITY)).isPresent()) {,"if (isMailboxLoopRunning() && (maybeMail=mailbox.tryTake(MIN_PRIORITY)).isPresent()) {
  maybeMail.get().run();
  return true;
}
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
318,"while (count < expected.size() && (event = events.poll(30, TimeUnit.SECONDS)) != null) {","while (count < expected.size() && (event=events.poll(30,TimeUnit.SECONDS)) != null) {
  assertEquals(expected.get(count),event.getType());
  count++;
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
319,if (newKey[pos = (int) MurmurHashUtil.fmix(key[i]) & mask] != 0L) {,"if (newKey[pos=(int)MurmurHashUtil.fmix(key[i]) & mask] != 0L) {
  while (newKey[pos=pos + 1 & mask] != 0L) {
  }
}
",0,2,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
320,while (((key[--i]) == null)) {},"while (((key[--i]) == null)) {
}
",0,1,4,,"SimpleName(ArrayAccess-array, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
321,if (!((newKey[pos = (it.unimi.dsi.fastutil.HashCommon.mix((key[i]).hashCode())) & mask]),"if (!((newKey[pos=(it.unimi.dsi.fastutil.HashCommon.mix((key[i]).hashCode())) & mask]) == null)) {
  while (!((newKey[pos=(pos + 1) & mask]) == null)) {
  }
}
",0,0,8,,"SimpleName(ArrayAccess-array, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
322,while (!((newKey[pos = (pos + 1) & mask]) == null)) {},"while (!((newKey[pos=(pos + 1) & mask]) == null)) {
}
",0,0,7,,"SimpleName(ArrayAccess-array, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
323,while (x != null && (cmp = o.compareTo(x.key)) != 0) {,"while (x != null && (cmp=o.compareTo(x.key)) != 0) {
  if (cmp < 0) {
    x=x.left;
  }
 else {
    x=x.right;
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
324,"while ((ind = msg.indexOf(DiskAccessException.class.getName(), ind)) >= 0) {","while ((ind=msg.indexOf(DiskAccessException.class.getName(),ind)) >= 0) {
  ind++;
  match++;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
325,"if (this.methodName.startsWith(""get"") && (len = this.methodName.length()) > 3","if (this.methodName.startsWith(""get"") && (len=this.methodName.length()) > 3 && (this.args == null || this.args.isEmpty())) {
  clauseBuffer.insert(0,len > 4 ? this.methodName.substring(4) : """");
  clauseBuffer.insert(0,Character.toLowerCase(this.methodName.charAt(3)));
}
 else if (this.args == null || this.args.isEmpty()) {
  clauseBuffer.insert(0,""()"").insert(0,this.methodName);
}
 else {
  clauseBuffer.insert(0,')');
  CompiledValue cv=null;
  for (int j=this.args.size(); j > 0; ) {
    cv=(CompiledValue)this.args.get(--j);
    cv.generateCanonicalizedExpression(clauseBuffer,context);
    clauseBuffer.insert(0,',');
  }
  clauseBuffer.deleteCharAt(0).insert(0,'(').insert(0,this.methodName);
}
",0,3,9,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
326,if ((rgn = cba.evaluate(this)) instanceof Region) {,"if ((rgn=cba.evaluate(this)) instanceof Region) {
  indpndtItrToRgnMap.put(itr,rgnPath=((Region)rgn).getFullPath());
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
327,"if (((result = evaluateSortCriteria(obj1, obj2)) != 0) && (orderByAttrs != null)) {","if (((result=evaluateSortCriteria(obj1,obj2)) != 0) && (orderByAttrs != null)) {
  return result;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
328,if (currentPatternTree.getKind() == Kind.VARIABLE && (var = ((VariableTree) currentPatternTree)).getType().getKind() == Kind.ERRONEOUS && var.getName() == names.error && var.getInitializer() == null && var.getModifiers().getAnnotations().size() == 1 && !containsError(var.getModifiers().getAnnotations().get(0))) {,"if (currentPatternTree.getKind() == Kind.VARIABLE && (var=((VariableTree)currentPatternTree)).getType().getKind() == Kind.ERRONEOUS && var.getName() == names.error && var.getInitializer() == null && var.getModifiers().getAnnotations().size() == 1 && !containsError(var.getModifiers().getAnnotations().get(0))) {
  patternTreeErrors=currentPatternTreeErrors;
  toAttribute=currentPatternTree;
  patternTree=var.getModifiers().getAnnotations().get(0);
}
 else {
  patternTreeErrors=currentPatternTreeErrors;
  patternTree=toAttribute=currentPatternTree;
}
",0,6,26,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
329,if ((p=FileOwnerQuery.getOwner(Utilities.toURI(normalizedFile)))!=null && !p.getProjectDirectory().equals(project.getProjectDirectory())) {,"if ((p=FileOwnerQuery.getOwner(Utilities.toURI(normalizedFile))) != null && !p.getProjectDirectory().equals(project.getProjectDirectory())) {
  final Sources sources=p.getLookup().lookup(Sources.class);
  if (sources == null) {
    rootsFromOtherProjects.add(normalizedFile);
    continue;
  }
  final SourceGroup[] sourceGroups=sources.getSourceGroups(Sources.TYPE_GENERIC);
  final SourceGroup[] javaGroups=sources.getSourceGroups(JavaProjectConstants.SOURCES_TYPE_JAVA);
  final SourceGroup[] groups=new SourceGroup[sourceGroups.length + javaGroups.length];
  System.arraycopy(sourceGroups,0,groups,0,sourceGroups.length);
  System.arraycopy(javaGroups,0,groups,sourceGroups.length,javaGroups.length);
  final FileObject projectDirectory=p.getProjectDirectory();
  final FileObject fileObject=FileUtil.toFileObject(normalizedFile);
  if (projectDirectory == null || fileObject == null) {
    rootsFromOtherProjects.add(normalizedFile);
    continue;
  }
  for (int j=0; j < groups.length; j++) {
    final FileObject sgRoot=groups[j].getRootFolder();
    if (fileObject.equals(sgRoot)) {
      rootsFromOtherProjects.add(normalizedFile);
      continue out;
    }
    if (!projectDirectory.equals(sgRoot) && FileUtil.isParentOf(sgRoot,fileObject)) {
      rootsFromOtherProjects.add(normalizedFile);
      continue out;
    }
  }
}
",0,1,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
330,if (!previousLoad.equals(load) || myClientIds != null,"if (!previousLoad.equals(load) || myClientIds != null || ++skippedLoadUpdates > forceUpdateFrequency) {
  Set locators=advisor.adviseControllers();
  if (logger.isDebugEnabled()) {
    logger.debug(""cache server Load Monitor Transmitting load {} to locators {}"",load,locators);
  }
  stats.setLoad(load);
  if (locators != null) {
    CacheServerLoadMessage message=new CacheServerLoadMessage(load,location,myClientIds);
    message.setRecipients(locators);
    Distribution mgr=advisor.getDistributionManager().getDistribution();
    if (mgr == null || !mgr.isBeingSick()) {
      advisor.getDistributionManager().putOutgoing(message);
    }
    message.updateLocalLocators();
  }
  skippedLoadUpdates=0;
}
 else {
  if (logger.isDebugEnabled()) {
    logger.debug(""cache server Load Monitor Load {} hasn't changed, not transmitting. skippedLoadUpdates={}"",load,skippedLoadUpdates);
  }
}
",0,0,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
331,"for (Node<E> p, h = head; (p = h.next) != null; h = p) {","for (Node<E> p, h=head; (p=h.next) != null; h=p) {
  h.next=h;
  p.item=null;
}
",0,1,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(Assignment-rightHandSide, ForStatement-updaters, ),
"
332,if ((r = (((Comparable<K>) (e1)).compareTo(e2))) != 0) {,"if ((r=(((Comparable<K>)(e1)).compareTo(e2))) != 0) {
  return r;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
333,"while (t != null && !(dir = t.getMessage().contains(""refers to a directory""))) {","while (t != null && !(dir=t.getMessage().contains(""refers to a directory""))) {
  t=t.getCause();
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
334,if (!initialized && diskRegion != null,"if (!initialized && diskRegion != null && (regionMap=diskRegion.getRecoveredEntryMap()) != null && (size=regionMap.size()) > 0) {
  return size;
}
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
335,if (!(writing = (p.state() & TreeVisitorClosure.CAN_WRITE) != 0)),"if (!(writing=(p.state() & TreeVisitorClosure.CAN_WRITE) != 0)) init(pageAddr,io,idx);
",0,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
336,if ((opArr[i] = (this.opValue >>> bit) & 0x03) != 0) {,"if ((opArr[i]=(this.opValue >>> bit) & 0x03) != 0) {
  nbrOfOps=i + 1;
}
",0,1,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
337,if (((t = ts[i]) instanceof ParameterizedType),"if (((t=ts[i]) instanceof ParameterizedType) && ((p=(ParameterizedType)t).getRawType() == Comparable.class) && (as=p.getActualTypeArguments()) != null && as.length == 1 && as[0] == c) {
  return c;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
338,"} else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {","if ((f=tabAt(tab,i=(n - 1) & hash)) == null) {
  if (casTabAt(tab,i,null,new Node<V>(hash,key,null))) {
    break;
  }
}
 else if ((fh=f.hash) == MOVED) {
  tab=helpTransfer(tab,f);
}
 else {
  boolean wasPresent=false;
synchronized (f) {
    if (tabAt(tab,i) == f) {
      if (fh >= 0) {
        binCount=1;
        for (Node<V> e=f; ; ++binCount) {
          V ek;
          if (e.hash == hash && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {
            wasPresent=true;
            break;
          }
          Node<V> pred=e;
          if ((e=e.next) == null) {
            pred.next=new Node<V>(hash,key,null);
            break;
          }
        }
      }
 else       if (f instanceof TreeBin) {
        Node<V> p;
        binCount=2;
        if ((p=((TreeBin<V>)f).putTreeVal(hash,key)) != null) {
          wasPresent=true;
        }
      }
    }
  }
  if (binCount != 0) {
    if (binCount >= TREEIFY_THRESHOLD) {
      treeifyBin(tab,i);
    }
    if (wasPresent) {
      return true;
    }
    break;
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
339,"if ((p = ((TreeBin<V>) f).putTreeVal(hash, key)) != null) {","if ((p=((TreeBin<V>)f).putTreeVal(hash,key)) != null) {
  wasPresent=true;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
340,"if ((r = t.root) != null && (p = r.findTreeNode(hash, key, null)) != null) {","if ((r=t.root) != null && (p=r.findTreeNode(hash,key,null)) != null) {
  wasPresent=true;
  if (t.removeTreeNode(p)) {
    setTabAt(tab,i,untreeify(t.first));
  }
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
341,"if ((tmp.targets = alt.transform(targets, n, pool)) != null) {","if ((tmp.targets=alt.transform(targets,n,pool)) != null) {
  final MatrixSIS altTransform=tmp.fit();
  final double[] altCorrelations=alt.replace(correlations,tmp.correlations);
  final double altCorrelation=rms(altCorrelations,sqrtLength);
  alt.correlation=(float)altCorrelation;
  if (altCorrelation > bestCorrelation) {
    ProjectedTransformTry.recycle(transformedArrays,pool);
    transformedArrays=tmp.targets;
    bestCorrelation=altCorrelation;
    bestCorrelations=altCorrelations;
    bestTransform=alt.replace(matrix,altTransform);
    appliedLinearizer=alt;
  }
 else {
    ProjectedTransformTry.recycle(tmp.targets,pool);
  }
}
",0,1,7,,"QualifiedName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
342,if (k != null && tab != null && (n = tab.length) > 0,"if (k != null && tab != null && (n=tab.length) > 0 && (e=tabAt(tab,(n - 1) & h)) != null) {
  do {
    int eh;
    K ek;
    if ((eh=e.hash) == h && ((ek=e.key) == k || (ek != null && k.equals(ek)))) {
      return e;
    }
    if (eh < 0) {
      return e.find(h,k);
    }
  }
 while ((e=e.next) != null);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
343,while (file != null && !rootFiles.contains(file) && ((children = file.listFiles()) == null || children.length == 0)) {,"while (file != null && !rootFiles.contains(file) && ((children=file.listFiles()) == null || children.length == 0)) {
  if (!file.delete()) {
    monitor.notifyWarning(""Cannot delete "" + file.getAbsolutePath());
  }
  file=file.getParentFile();
}
",0,2,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
344,while (s >= (long) (sc = sizeCtl) && (tab = table) != null,"while (s >= (long)(sc=sizeCtl) && (tab=table) != null && (n=tab.length) < MAXIMUM_CAPACITY) {
  int rs=resizeStamp(n);
  if (sc < 0) {
    if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt=nextTable) == null || transferIndex <= 0) {
      break;
    }
    if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1)) {
      transfer(tab,nt);
    }
  }
 else   if (U.compareAndSwapInt(this,SIZECTL,sc,(rs << RESIZE_STAMP_SHIFT) + 2)) {
    transfer(tab,null);
  }
  s=sumCount();
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
345,if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS,"if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt=nextTable) == null || transferIndex <= 0) {
  break;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
346,if ((g = tc.getGraphics()) != null && (g instanceof Graphics2D) &&,"if ((g=tc.getGraphics()) != null && (g instanceof Graphics2D) && (frc=((Graphics2D)g).getFontRenderContext()) != null) {
  newWidth+=new TextLayout(String.valueOf(highestLineNumber),font,frc).getAdvance();
}
 else if ((fm=getFontMetrics(font)) != null) {
  newWidth+=fm.stringWidth(String.valueOf(highestLineNumber));
}
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
347,while (nextTab == nextTable && table == tab && (sc = sizeCtl) < 0) {,"while (nextTab == nextTable && table == tab && (sc=sizeCtl) < 0) {
  if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || transferIndex <= 0) {
    break;
  }
  if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1)) {
    transfer(tab,nextTab);
    break;
  }
}
",0,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
348,if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE) {,"if ((stride=(NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE) {
  stride=MIN_TRANSFER_STRIDE;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
349,"if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {","if (U.compareAndSwapInt(this,SIZECTL,sc=sizeCtl,sc - 1)) {
  if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT) {
    return;
  }
  finishing=advance=true;
  i=n;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
350,if (((s = lockState) & ~WAITER) == 0) {,"if (((s=lockState) & ~WAITER) == 0) {
  if (U.compareAndSwapInt(this,LOCKSTATE,s,WRITER)) {
    if (waiting) {
      waiter=null;
    }
    return;
  }
}
 else if ((s & WAITER) == 0) {
  if (U.compareAndSwapInt(this,LOCKSTATE,s,s | WAITER)) {
    waiting=true;
    waiter=Thread.currentThread();
  }
}
 else if (waiting) {
  LockSupport.park(this);
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
351,if (((s = lockState) & (WAITER | WRITER)) != 0) {,"if (((s=lockState) & (WAITER | WRITER)) != 0) {
  if (e.hash == h && ((ek=e.key) == k || (ek != null && k.equals(ek)))) {
    return e;
  }
  e=e.next;
}
 else if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {
  TreeNode<K> r, p;
  try {
    p=((r=root) == null ? null : r.findTreeNode(h,k,null));
  }
  finally {
    Thread w;
    int ls;
    do {
    }
 while (!U.compareAndSwapInt(this,LOCKSTATE,ls=lockState,ls - READER));
    if (ls == (READER | WAITER) && (w=waiter) != null) {
      LockSupport.unpark(w);
    }
  }
  return p;
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
352,if (ls == (READER | WAITER) && (w = waiter) != null) {,"if (ls == (READER | WAITER) && (w=waiter) != null) {
  LockSupport.unpark(w);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
353,if ((r = root) == null || r.right == null ||,"if ((r=root) == null || r.right == null || (rl=r.left) == null || rl.left == null) {
  return true;
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
354,} else if (!xp.red || (xpp = xp.parent) == null) {,"if (!xp.red || (xpp=xp.parent) == null) {
  return root;
}
",0,0,4,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
355,if (baseIndex >= baseLimit || (t = tab) == null || (n = t.length) <= (i = index) || i < 0) {,"if (baseIndex >= baseLimit || (t=tab) == null || (n=t.length) <= (i=index) || i < 0) {
  return next=null;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
356,while ((s = stack) != null && (index += (len = s.length)) >= n) {,"while ((s=stack) != null && (index+=(len=s.length)) >= n) {
  n=len;
  index=s.index;
  tab=s.tab;
  s.tab=null;
  TableStack<K> next=s.next;
  s.next=spare;
  stack=next;
  spare=s;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
357,"} else if (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x)) {","if (U.compareAndSwapLong(a,CELLVALUE,v=a.value,v + x)) {
  break;
}
 else if (counterCells != as || n >= NCPU) {
  collide=false;
}
 else if (!collide) {
  collide=true;
}
 else if (cellsBusy == 0 && U.compareAndSwapInt(this,CELLSBUSY,0,1)) {
  try {
    if (counterCells == as) {
      CounterCell[] rs=new CounterCell[n << 1];
      for (int i=0; i < n; ++i) {
        rs[i]=as[i];
      }
      counterCells=rs;
    }
  }
  finally {
    cellsBusy=0;
  }
  collide=false;
  continue;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
358,"if (!FINISH_FUT_UPD.compareAndSet(this, null, fut = finishFuture(fastFinish = clearThreadMap && fastFinish(), false)))","if (!FINISH_FUT_UPD.compareAndSet(this,null,fut=finishFuture(fastFinish=clearThreadMap && fastFinish(),false))) return chainFinishFuture(finishFut,false,clearThreadMap,onTimeout);
",0,1,10,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
359,if (((status = gtx.getStatus()) == Status.STATUS_ACTIVE),"if (((status=gtx.getStatus()) == Status.STATUS_ACTIVE) || status == Status.STATUS_MARKED_ROLLBACK) {
synchronized (gtx) {
    if ((status=gtx.getStatus()) == Status.STATUS_ACTIVE) {
      gtx.setStatus(Status.STATUS_COMMITTING);
      isCommit=true;
    }
 else     if (status == Status.STATUS_MARKED_ROLLBACK) {
      gtx.setStatus(Status.STATUS_ROLLING_BACK);
      cozOfException=MARKED_ROLLBACK;
    }
 else {
      String exception=String.format(""transaction not active, cannot be committed. Transaction Status= %s"",Integer.valueOf(status));
      LogWriter writer=TransactionUtils.getLogWriter();
      if (VERBOSE) {
        writer.fine(exception);
      }
      throw new IllegalStateException(exception);
    }
  }
}
 else {
  String exception=""transaction is not active and cannot be committed"";
  LogWriter writer=TransactionUtils.getLogWriter();
  if (VERBOSE) {
    writer.fine(exception);
  }
  throw new IllegalStateException(exception);
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
360,"while (length < len && target.hasRemaining() && (read = input.read(target, offset)) != -1) {","while (length < len && target.hasRemaining() && (read=input.read(target,offset)) != -1) {
  length+=read;
  offset+=read;
}
",0,4,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
361,if (numBytes++ >= 5000 && numBytes < bytes.length) {,"if (numBytes++ >= 5000 && numBytes < bytes.length) {
  sb.append("" ..."");
  break;
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
362,if ((this.nextEntry = currentTable[this.nextTableIndex--]) != null) {,"if ((this.nextEntry=currentTable[this.nextTableIndex--]) != null) {
  copyEntriesToList();
  return;
}
",0,11,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
363,if (bytes[i++] != o.bytes[j++]) {,"if (bytes[i++] != o.bytes[j++]) {
  return false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
364,if ((isInstance = classes[classIndex].isInstance(fieldObj)) == true) {,"if ((isInstance=classes[classIndex].isInstance(fieldObj)) == true) {
  break;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
365,"while (parent != null && (tmpPath = FileUtil.getRelativePath(parent, toFO)) == null) {","while (parent != null && (tmpPath=FileUtil.getRelativePath(parent,toFO)) == null) {
  parent=parent.getParent();
  path.append(""../"");
}
",0,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
366,if (!(rootDeleteStatus = root.delete()) && unableToDeleteCollection != null),"if (!(rootDeleteStatus=root.delete()) && unableToDeleteCollection != null) unableToDeleteCollection.add(root.getAbsolutePath());
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
367,if((temp = temp.getParentFile()).listFiles().length == 0) {,"if ((temp=temp.getParentFile()).listFiles().length == 0) {
  temp.delete();
}
 else {
  break;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
368,"} else if ((substring = template.substring(i)).startsWith(""","if ((substring=template.substring(i)).startsWith(""/*"")) {
  final int end=template.indexOf(""*/"",i);
  if (end < 0) {
    throw new IllegalArgumentException(""No comment end at index "" + i + "" for:\n""+ template);
  }
  i=end + ""*/"".length();
}
 else if (substring.startsWith(""@include("")) {
  final String value=builder.toString();
  segments.add(data -> value);
  builder.setLength(0);
  final int end=findEndingParenthesis(chars,i + ""@include("".length() + 1);
  if (end < 0) {
    throw new IllegalArgumentException(""Missing ')' token for @include at position "" + i + "" for:\n""+ template);
  }
  final String tplPath=template.substring(i + ""@include("".length(),end);
  i=end;
  segments.add(data -> {
    final String interpolated=compileIfNeeded(tplPath,templateLoader).apply(data);
    if (interpolated == null) {
      return """";
    }
    final Object includeData;
    final String templatePath;
    if (interpolated.contains("","")) {
      final String[] split=interpolated.split("","");
      templatePath=split[0];
      final Map<String,Object> map=new HashMap<>();
      includeData=map;
      for (int j=1; j < split.length; j++) {
        final String[] config=split[j].split(""="");
        if (config.length != 2) {
          throw new IllegalArgumentException(""Passed data during a directive (@include) must set their alias, ex: name=foo.bar"");
        }
        map.put(config[0],interpolate(config[1],data));
      }
    }
 else {
      templatePath=interpolated;
      includeData=data;
    }
    return compileIfNeeded(templateLoader.apply(templatePath),templateLoader).apply(includeData);
  }
);
}
 else if (substring.startsWith(""@escape("")) {
  i=handleFn(""escape"",template,templateLoader,segments,builder,chars,i,templateHelper::escape);
}
 else if (substring.startsWith(""@attributify("")) {
  i=handleFn(""attributify"",template,templateLoader,segments,builder,chars,i,v -> v.toLowerCase(ROOT).replace(' ','-'));
}
 else if (substring.startsWith(""@url("")) {
  i=handleFn(""url"",template,templateLoader,segments,builder,chars,i,v -> {
    try {
      return URLEncoder.encode(v,""UTF-8"");
    }
 catch (    final UnsupportedEncodingException e) {
      throw new IllegalStateException(e);
    }
  }
);
}
 else if (substring.startsWith(""@lowercase("")) {
  i=handleFn(""lowercase"",template,templateLoader,segments,builder,chars,i,v -> v.toLowerCase(ROOT));
}
 else if (substring.startsWith(""@each("")) {
  final String value=builder.toString();
  segments.add(ctx -> value);
  builder.setLength(0);
  final int end=findEndingParenthesis(chars,i + ""@each("".length() + 1);
  if (end < 0) {
    throw new IllegalArgumentException(""Missing ')' token for @each at position "" + i + "" for:\n""+ template);
  }
  final int startConfig=i + ""@each("".length();
  final String config=template.substring(startConfig,end);
  i=end;
  final int sep=config.indexOf("","");
  if (sep < 0) {
    throw new IllegalArgumentException(""Bad configuration for @each, first parameter is the variable, second the template at index "" + i + "", for:\n""+ template);
  }
  final String variableName=config.substring(config.startsWith(""$"") ? 1 : 0,sep);
  final Function<Object,String> tplProvider;
  final String tpl=config.substring(sep + 1);
  if (tpl.startsWith(""inline:"")) {
    final String completeTpl=tpl.substring(""inline:"".length());
    tplProvider=data -> completeTpl;
  }
 else {
    tplProvider=data -> templateLoader.apply(compileIfNeeded(tpl,templateLoader).apply(data));
  }
  segments.add(data -> {
    final Object collection=interpolate(variableName,data);
    if (collection == null) {
      return """";
    }
    final Iterator<?> it;
    if (Collection.class.isInstance(collection)) {
      it=((Collection<Object>)collection).iterator();
    }
 else     if (Map.class.isInstance(collection)) {
      it=((Map<Object,Object>)collection).entrySet().iterator();
    }
 else {
      throw new IllegalArgumentException(""Only Collection and Map can be used in @each, got "" + collection);
    }
    final String compiled=tplProvider.apply(data);
    final StringBuilder out=new StringBuilder();
    while (it.hasNext()) {
      final Object next=it.next();
      final boolean hasNext=it.hasNext();
      final Map<String,Object> subData=new HashMap<>();
      subData.put(""$value"",next);
      subData.put(""hasNext"",hasNext);
      out.append(compileIfNeeded(compiled,templateLoader).apply(subData));
    }
    return out.toString();
  }
);
}
 else if (substring.startsWith(""@if("")) {
  final String value=builder.toString();
  segments.add(ctx -> value);
  builder.setLength(0);
  final int end=findEndingParenthesis(chars,i + ""@if("".length() + 1);
  if (end < 0) {
    throw new IllegalArgumentException(""Missing ')' token for @if at position "" + i + "" for:\n""+ template);
  }
  final String config=template.substring(i + ""@if("".length(),end);
  i=end;
  final int sep=config.indexOf("","");
  if (sep < 0) {
    throw new IllegalArgumentException(""Bad configuration for @if, first parameter is the falsy condition, second the template. At index "" + i + "", for:\n""+ template);
  }
  final String variableName=config.substring(config.startsWith(""$"") ? 1 : 0,sep);
  final String tpl=config.substring(sep + 1);
  segments.add(data -> {
    final Object condition=interpolate(variableName,data);
    if (condition == null) {
      return """";
    }
    final String conditionStr=String.valueOf(condition);
    if (""false"".equalsIgnoreCase(conditionStr) || conditionStr.isEmpty()) {
      return """";
    }
    final String compiled=tpl.startsWith(""inline:"") ? tpl.substring(""inline:"".length()) : templateLoader.apply(compileIfNeeded(tpl,templateLoader).apply(data));
    return compileIfNeeded(compiled,templateLoader).apply(data);
  }
);
}
 else {
  builder.append(current);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
369,if (modelRef.abortOn(error) || (--ctx.counter) < 0 || System.nanoTime() >= ctx.maxEnd) {,"if (modelRef.abortOn(error) || (--ctx.counter) < 0 || System.nanoTime() >= ctx.maxEnd) {
  executeFinalCounterAction(contextData,modelRef.callsFailed);
  throw error;
}
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
370,if ((,"if (((c=s.charAt(i)) != ' ') && (c != '\t') && (c != '\r')&& (c != '\n')) {
  break;
}
",0,0,0,,
371,if (resumed && (--suspendCount > 0)) return Collections.emptyList();,"if (resumed && (--suspendCount > 0)) return Collections.emptyList();
",0,3,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
372,while (!tArray[i].isInterrupted() && !(expired = doSleep(10))) {,"while (!tArray[i].isInterrupted() && !(expired=doSleep(10))) {
}
",0,7,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
373,while (i < buf.length && buf[i++] != '>');,"while (i < buf.length && buf[i++] != '>') ;
",0,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
374,"while(-1 != (find = context.doc.find(stringFwdFinder, find+1, -1)) && skipUsage(find, context.doc));","while (-1 != (find=context.doc.find(stringFwdFinder,find + 1,-1)) && skipUsage(find,context.doc)) ;
",0,2,12,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
375,for (Method m : (null == theClassMethods ? theClassMethods = theClass.getMethods() : theClassMethods)) {,"for (Method m : (null == theClassMethods ? theClassMethods=theClass.getMethods() : theClassMethods)) {
  if (generatedMethodName.equals(m.getName()) && MetaMethod.equal(generatedMethodParameterTypes,m.getParameterTypes())) {
    skip=true;
    break;
  }
}
",0,0,8,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
NullLiteral(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, EnhancedForStatement-expression, ),
"
376,if (++arrowCntHolder[0] > 1 && !firstLabelHolder.isEmpty()) {,"if (++arrowCntHolder[0] > 1 && !firstLabelHolder.isEmpty()) {
  throw createParsingFailedException(""`case ... ->` does not support falling through cases"",firstLabelHolder.get(0));
}
",0,8,5,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
377,} else if (mapEntryExpressionListSize == 1 && (firstKeyExpression = mapEntryExpressionList.get(0).getKeyExpression()) instanceof SpreadMapExpression) {,"if (mapEntryExpressionListSize == 1 && (firstKeyExpression=mapEntryExpressionList.get(0).getKeyExpression()) instanceof SpreadMapExpression) {
  right=firstKeyExpression;
}
 else {
  ListExpression listExpression=configureAST(new ListExpression(mapEntryExpressionList.stream().map(e -> {
    if (e.getKeyExpression() instanceof SpreadMapExpression) {
      return e.getKeyExpression();
    }
    return e;
  }
).collect(Collectors.toList())),ctx.namedPropertyArgs());
  listExpression.setWrapped(true);
  right=listExpression;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
378,} else if (text.startsWith(SQ_STR) || text.startsWith(DQ_STR) || (startsWithSlash = text.startsWith(SLASH_STR))) {,"if (text.startsWith(SQ_STR) || text.startsWith(DQ_STR) || (startsWithSlash=text.startsWith(SLASH_STR))) {
  if (startsWithSlash) {
    text=StringUtils.removeCR(text);
  }
  text=StringUtils.trimQuotations(text,1);
}
 else if (text.startsWith(DOLLAR_SLASH_STR)) {
  text=StringUtils.removeCR(text);
  text=StringUtils.trimQuotations(text,2);
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
379,else if ((v instanceof VariableFacade) && (s = ((VariableFacade) v).getPath()) != null && s.length() > 0),"if ((v instanceof VariableFacade) && (s=((VariableFacade)v).getPath()) != null && s.length() > 0) ;
 else s=""_global"";
",0,1,10,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
380,for (int count; -1 != (count = in.read(buf)); ) {,"for (int count; -1 != (count=in.read(buf)); ) {
  self.write(buf,0,count);
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
"
381,if (c == Closure.class && parameterClass.isInterface() && (sam = getSAMMethod(parameterClass)) != null) {,"if (c == Closure.class && parameterClass.isInterface() && (sam=getSAMMethod(parameterClass)) != null) {
  if (getParameterCount(argument) == sam.getParameterCount())   objectDistance-=1;
  objectDistance+=5;
  break;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
382,if ((size = getParameterCount()) != that.getParameterCount()) return false;,"if ((size=getParameterCount()) != that.getParameterCount()) return false;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
383,if ((i = nx + 1) >= len) break;,"if ((i=nx + 1) >= len) break;
",0,3,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
384,while (i > 0 && (n = t[--i]) == null) {},"while (i > 0 && (n=t[--i]) == null) {
}
",0,4,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
385,while ((v = ve.getAccessedVariable()) != ve && v instanceof VariableExpression) {,"while ((v=ve.getAccessedVariable()) != ve && v instanceof VariableExpression) {
  ve=(VariableExpression)v;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
386,while (Character.isWhitespace(segment.array[offset++])) {,"while (Character.isWhitespace(segment.array[offset++])) {
  index++;
}
",0,0,4,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
QualifiedName(ArrayAccess-array, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, WhileStatement-expression, ),
"
387,"while( (i=v.lastIndexOf(c, --i)) != -1 ){","while ((i=v.lastIndexOf(c,--i)) != -1) {
  s.deleteCharAt(i);
  s.insert(i,r);
}
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
388,"while ((lc = parseLine(service, u, r, lc, names)) >= 0) ;","while ((lc=parseLine(service,u,r,lc,names)) >= 0) ;
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
389,"if ((shouldRetry(ke.code()) || shouldRetry(ke.code(), retryCode))","if ((shouldRetry(ke.code()) || shouldRetry(ke.code(),retryCode)) && ++retry < maxRetryNum) {
  continue;
}
",0,0,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
390,if (j > 0 && z.equals(BigInteger.ONE) || ++j == a),"if (j > 0 && z.equals(BigInteger.ONE) || ++j == a) {
  return false;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
391,"while (fcq.offer(mockCall(""c"", mockedPriorities[i++]))) ;","while (fcq.offer(mockCall(""c"",mockedPriorities[i++]))) ;
",0,0,7,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-arguments, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
392,while (keys.contains(k = random.nextLong()));,"while (keys.contains(k=random.nextLong())) ;
",0,0,6,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
393,"for (int n; (n = dataIn.read(data, offset, data.length - offset)) != -1; ) {","for (int n; (n=dataIn.read(data,offset,data.length - offset)) != -1; ) {
  if (n > 0) {
    n+=offset;
    offset=n % checksum.getBytesPerChecksum();
    final int length=n - offset;
    if (length > 0) {
      checksum.calculateChunkedSums(data,0,length,crcs,0);
      metaOut.write(crcs,0,checksum.getChecksumSize(length));
      System.arraycopy(data,length,data,0,offset);
    }
  }
}
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
"
394,for(State s; !(s = checkErrorState()).isTerminated;) {,"for (State s; !(s=checkErrorState()).isTerminated; ) {
  if (s == State.RUNNING) {
    isCalling.set(true);
    try {
      LOG.info(call());
    }
 catch (    Throwable t) {
      setErrorState(t);
      return;
    }
    isCalling.set(false);
  }
  sleep(ThreadLocalRandom.current().nextInt(100) + 50);
}
",0,0,5,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, PrefixExpression-operand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, PrefixExpression-operand, ForStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, ForStatement-expression, ),
"
395,"while ((bytesRead = in.read(totalBytesRead + FILE_SIZE / 2,","while ((bytesRead=in.read(totalBytesRead + FILE_SIZE / 2,buffer)) > 0) {
  totalBytesRead+=bytesRead;
  assertEquals(totalBytesRead,buffer.position());
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
396,while((bm.getLowRedundancyBlocksCount() > 0 ||,"while ((bm.getLowRedundancyBlocksCount() > 0 || bm.getPendingReconstructionBlocksCount() > 0) && count++ < 10) {
  Thread.sleep(1000);
}
",0,0,3,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
397,while (!topFile.equals(parent = notSharableFile.getParentFile()) && SharabilityQuery.getSharability(FileUtil.normalizeFile(parent)) == SharabilityQuery.NOT_SHARABLE) {,"while (!topFile.equals(parent=notSharableFile.getParentFile()) && SharabilityQuery.getSharability(FileUtil.normalizeFile(parent)) == SharabilityQuery.NOT_SHARABLE) {
  notSharableFile=parent;
}
",0,3,11,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
398,while ((getAppEventType() == RMAppEventType.KILL) && timeoutSecs++ < 20) {,"while ((getAppEventType() == RMAppEventType.KILL) && timeoutSecs++ < 20) {
  Thread.sleep(1000);
}
",0,3,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
399,if(loadScriptFile(args[++i]) == -1),"if (loadScriptFile(args[++i]) == -1) return -1;
",0,3,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
400,for(String line; (line = in.readLine()) != null; out.println(line));,"for (String line; (line=in.readLine()) != null; out.println(line)) ;
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, ForStatement-updaters, ),
SimpleName(MethodInvocation-arguments, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
401,while ((nextEvent = queue.get()) != null && nextEvent.getTimeStamp() < terminateTime,"while ((nextEvent=queue.get()) != null && nextEvent.getTimeStamp() < terminateTime && !shutdown) {
  currentTime=nextEvent.getTimeStamp();
  SimulatorEventListener listener=nextEvent.getListener();
  if (nextEvent instanceof JobSubmissionEvent) {
    validateJobSubmission((JobSubmissionEvent)nextEvent);
  }
 else   if (nextEvent instanceof JobCompleteEvent) {
    validateJobComplete((JobCompleteEvent)nextEvent);
  }
  List<SimulatorEvent> response=listener.accept(nextEvent);
  queue.addAll(response);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
402,while ((size = (iterators = getIterators()).size()) > 0) {,"while ((size=(iterators=getIterators()).size()) > 0) {
  index=index % size;
  RoundRobinIterator itr=iterators.get(index);
  if (itr.getNumRecordsRead() < threshold) {
    Tuple tuple;
    if ((tuple=itr.peek()) != null) {
      tuple=itr.next();
      if (itr.getNumRecordsRead() == threshold) {
        numScannersCacheExhausted++;
      }
      index=(index + 1) % size;
      return tuple;
    }
 else {
      itr.close();
      iterators.remove(index);
      if (iterators.size() == 0) {
        close();
      }
    }
  }
 else {
    index=(index + 1) % size;
  }
}
",0,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
403,while ((t = jip.obtainNewTask(this.groomStatuses)) != null) {,"while ((t=jip.obtainNewTask(this.groomStatuses)) != null) {
  taskSet.add(t);
  if (++cnt == this.jip.tasks.length) {
    break;
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
404,if (++cnt == this.jip.tasks.length) {,"if (++cnt == this.jip.tasks.length) {
  break;
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
405,"while(!shutdown && (l = in.read(b, i, limit)) != -1) {","while (!shutdown && (l=in.read(b,i,limit)) != -1) {
  limit-=l;
  i+=l;
  chunksize+=l;
  if (limit == 0) {
    break;
  }
}
",0,2,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
406,"if ((res = Byte.compare(o1[i], o2[i])) != 0)","if ((res=Byte.compare(o1[i],o2[i])) != 0) return res;
",0,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
407,while (idx > 0 && ((ch = sb.charAt(idx - 1)) == '\r' || ch == ' ' || ch == '\t')),"while (idx > 0 && ((ch=sb.charAt(idx - 1)) == '\r' || ch == ' ' || ch == '\t')) idx--;
",0,2,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
408,"if ((infos[i] = SubOperationInfo.create(this, sourceIsUsed, sourceComponents, targetComponents.get(i))) == null) {","if ((infos[i]=SubOperationInfo.create(this,sourceIsUsed,sourceComponents,targetComponents.get(i))) == null) {
  throw new OperationNotFoundException(notFoundMessage(sourceCRS,targetCRS));
}
",0,6,11,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
409,"} else if ((el = DomUtil.getChildElement(config, ""noncollection"", null)) != null) {","if ((el=DomUtil.getChildElement(config,""noncollection"",null)) != null) {
  nodetypeNames=parseNodeTypesEntry(el);
  collectionNames=false;
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
410,"while ((index = string.indexOf('{', index)) != -1 && index < string.length() - 1) {","while ((index=string.indexOf('{',index)) != -1 && index < string.length() - 1) {
  if (string.charAt(index + 1) == '{' || string.charAt(index + 1) != '$') {
    ++index;
    continue;
  }
  sb.append(string.substring(prevIndex,index));
  int endBracketIndex=string.indexOf('}',index);
  if (endBracketIndex != -1) {
    String whatToReplace=string.substring(index + 2,endBracketIndex);
    sb.append(getReplacement(whatToReplace));
  }
  prevIndex=endBracketIndex == -1 ? index + 2 : endBracketIndex + 1;
  ++index;
}
",0,2,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
411,if ((result = -it.next().compareTo(object)) <= 0) {,"if ((result=-it.next().compareTo(object)) <= 0) {
  if (result == 0) {
    return it.previousIndex();
  }
  return -it.previousIndex() - 1;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
412,for (int i=text.length() - 1; --i > MINIMAL_LENGTH_BEFORE_BREAK;) {,"for (int i=text.length() - 1; --i > MINIMAL_LENGTH_BEFORE_BREAK; ) {
  if (text.charAt(i) == '.' && Character.isJavaIdentifierStart(text.charAt(i + 1))) {
    final char b=text.charAt(i - 1);
    if (Character.isJavaIdentifierPart(b) || b == ')') {
      for (int j=i; ++j < text.length(); ) {
        final char c=text.charAt(j);
        if (!Character.isJavaIdentifierPart(c)) {
          if (c == '(') {
            for (j=i; Character.isJavaIdentifierPart(text.charAt(--j)); ) {
              if (j == i - MINIMAL_LENGTH_BEFORE_BREAK) {
                if (buffer == null) {
                  buffer=new StringBuilder(text);
                }
                buffer.insert(i,'\u200B');
                break;
              }
            }
          }
          break;
        }
      }
    }
  }
}
",0,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
413,for (int index = eClassifiers.indexOf(eClassifier); ++index < size; ),"for (int index=eClassifiers.indexOf(eClassifier); ++index < size; ) {
  EClassifier nextEClassifier=(EClassifier)eClassifiers.get(index);
  if (!name.equals(nextEClassifier.getName()))   break;
  if (extendedMetaData.getName(eClassifier).equals(extendedMetaData.getName(nextEClassifier))) {
    XSDTypeDefinition nextXSDTypeDefinition=getXSDTypeDefinition(nextEClassifier);
    if (!sameType(nextXSDTypeDefinition,xsdTypeDefinition)) {
      continue;
    }
    eClassifiers.remove(index);
    updateReferences(nextEClassifier,eClassifier);
    break;
  }
}
",0,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
414,if (sc != null && palette == sc.getPalette () && (id = sc.getID()) != null && names != null) {,"if (sc != null && palette == sc.getPalette() && (id=sc.getID()) != null && names != null) {
  int i=getIndex(names,id);
  list.setSelectedIndex(i);
}
 else list.clearSelection();
",0,1,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
415,"while ((f = (String) child.getAttribute(""fileChooser."" + i))","while ((f=(String)child.getAttribute(""fileChooser."" + i)) != null) {
  Set<FileObject> set=filterNameToResolversMap.get(f);
  if (set == null) {
    set=new HashSet<FileObject>();
    filterNameToResolversMap.put(f,set);
  }
  set.add(child);
  i++;
}
",0,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
416,if (!c.toParent() || (selections[i] = c.getObject()) == null) {,"if (!c.toParent() || (selections[i]=c.getObject()) == null) {
  throw new XmlRuntimeException(""Path must select only elements "" + ""and attributes"");
}
",0,1,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
417,if (((--count << (EMPTINESS_LEVEL + 1)) <= entries.length),"if (((--count << (EMPTINESS_LEVEL + 1)) <= entries.length) && (entries.length > INITIAL_BLOCK_CAPACITY)) {
  resize(entries.length >> 1);
}
",0,16,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
418,while ((ts != Thread.State.TIMED_WAITING) && (loopCount-- > 0)) {,"while ((ts != Thread.State.TIMED_WAITING) && (loopCount-- > 0)) {
  ts=t.getState();
  try {
    Thread.sleep(SLEEP_TIME);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
419,while (!t.exceptionReceived && (loopCount-- > 0)) {,"while (!t.exceptionReceived && (loopCount-- > 0)) {
  try {
    Thread.sleep(SLEEP_TIME);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",0,0,3,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
420,if ((types == null) || (name = Types.getCodeTitle(types[i])) == null) {,"if ((types == null) || (name=Types.getCodeTitle(types[i])) == null) {
  name=vocabulary.getString(Vocabulary.Keys.Dimension_1,i);
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
421,if(ia3++>100){RuntimeAdditionalTest0.killCat();return;},"if (ia3++ > 100) {
  RuntimeAdditionalTest0.killCat();
  return;
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
ReturnStatement(Block-statements, IfStatement-thenStatement, ),
"
422,if ((ia = is4.available()) != 4,"if ((ia=is4.available()) != 4 && is4.read() != 'Z' && is4.read() != 'S' && is4.read() != 'S' && is4.read() != 10) {
  System.out.println(""ERROR (test_41, thread22): ZSS'10' should be to read."");
  flg33=true;
  return;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
423,for (waitTime = waitDuration; t1.isAlive() && t2.isAlive() && !(expired = doSleep(10));) {,"for (waitTime=waitDuration; t1.isAlive() && t2.isAlive() && !(expired=doSleep(10)); ) {
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-extendedOperands, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-extendedOperands, ForStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-extendedOperands, ForStatement-expression, ),
"
424,while (!state.equals(Thread.State.TERMINATED) && !(expired = doSleep(10))) {,"while (!state.equals(Thread.State.TERMINATED) && !(expired=doSleep(10))) {
  state=tR.getState();
}
",0,4,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
425,while (t.curThread == null && !(expired = doSleep(10))) {,"while (t.curThread == null && !(expired=doSleep(10))) {
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
426,for (waitTime = waitDuration; !t.interrupted1 && !(expired = doSleep(10));) {,"for (waitTime=waitDuration; !t.interrupted1 && !(expired=doSleep(10)); ) {
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
"
427,while (ts != Thread.State.TIMED_WAITING && !(expired = doSleep(10))) {,"while (ts != Thread.State.TIMED_WAITING && !(expired=doSleep(10))) {
  ts=t.getState();
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
428,if (p - (p = longValue(--i)) != inc) {,"if (p - (p=longValue(--i)) != inc) {
  return null;
}
",0,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
429,"if (isInterface() || ((tmp = getCanonicalName()) != null && tmp.equals(""java.lang.Object"")) || isPrimitive()) {","if (isInterface() || ((tmp=getCanonicalName()) != null && tmp.equals(""java.lang.Object"")) || isPrimitive()) {
  return null;
}
",0,0,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
"
430,while (entry != null && !key.equals(interned = (String)entry.get())) {,"while (entry != null && !key.equals(interned=(String)entry.get())) {
  entry=entry.next;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
431,while (((comp ? DESCENDING : ASCENDING).apply(a[offset + i++]) & 1) != 0),"while (((comp ? DESCENDING : ASCENDING).apply(a[offset + i++]) & 1) != 0) ;
",0,1,9,,"SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
432,if (++this.returned == 1) return getFirst();,"if (++this.returned == 1) return getFirst();
 else if (this.returned == 2) return getSecond();
 else throw new IllegalAccessError(""this.returned="" + this.returned);
",0,0,4,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
433,while (cnt-- > 0 && fc.getNodes ().length < 1) {,"while (cnt-- > 0 && fc.getNodes().length < 1) {
  Thread.sleep(100);
}
",0,1,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
434,if (--n >= 0 && (abs(xi - x) > εx/2 || abs(yi - y) > εy/2)) {,"if (--n >= 0 && (abs(xi - x) > εx / 2 || abs(yi - y) > εy / 2)) {
  am*=bm;
  bm*=2 * t;
  cm*=3;
  x=xi;
  y=yi;
}
 else {
  return false;
}
",0,1,12,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
435,while (i < path.length() && ((c = path.charAt(i)) != '/')) {,"while (i < path.length() && ((c=path.charAt(i)) != '/')) {
  stamp.append(c);
  i++;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
436,"while ((next = this.storeHeap.peek()) != null && CellUtil.matchingRows(next, curRowCell)) {","while ((next=this.storeHeap.peek()) != null && CellUtil.matchingRows(next,curRowCell)) {
  region.checkInterrupt();
  this.storeHeap.next(MOCKED_LIST);
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
437,for (SyncFuture syncFuture; (syncFuture = this.syncFutures.peek()) != null;) {,"for (SyncFuture syncFuture; (syncFuture=this.syncFutures.peek()) != null; ) {
  if (syncFuture.getTxid() > currentSequence) {
    break;
  }
  releaseSyncFuture(syncFuture,currentSequence,t);
  if (!this.syncFutures.remove(syncFuture)) {
    throw new IllegalStateException(syncFuture.toString());
  }
  syncCount++;
}
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
438,"while ((entry = getNextLogLine(walReader, wal, this.skipErrors)) != null) {","while ((entry=getNextLogLine(walReader,wal,this.skipErrors)) != null) {
  byte[] region=entry.getKey().getEncodedRegionName();
  String encodedRegionNameAsStr=Bytes.toString(region);
  Long lastFlushedSequenceId=lastFlushedSequenceIds.get(encodedRegionNameAsStr);
  if (lastFlushedSequenceId == null) {
    if (!(isRegionDirPresentUnderRoot(entry.getKey().getTableName(),encodedRegionNameAsStr))) {
      LOG.info(""{} no longer in filesystem; skipping all edits."",encodedRegionNameAsStr);
      lastFlushedSequenceId=Long.MAX_VALUE;
    }
 else {
      if (sequenceIdChecker != null) {
        RegionStoreSequenceIds ids=sequenceIdChecker.getLastSequenceId(region);
        Map<byte[],Long> maxSeqIdInStores=new TreeMap<>(Bytes.BYTES_COMPARATOR);
        for (        StoreSequenceId storeSeqId : ids.getStoreSequenceIdList()) {
          maxSeqIdInStores.put(storeSeqId.getFamilyName().toByteArray(),storeSeqId.getSequenceId());
        }
        regionMaxSeqIdInStores.put(encodedRegionNameAsStr,maxSeqIdInStores);
        lastFlushedSequenceId=ids.getLastFlushedSequenceId();
        if (LOG.isDebugEnabled()) {
          LOG.debug(""Last flushed sequenceid for "" + encodedRegionNameAsStr + "": ""+ TextFormat.shortDebugString(ids));
        }
      }
      if (lastFlushedSequenceId == null) {
        lastFlushedSequenceId=-1L;
      }
    }
    lastFlushedSequenceIds.put(encodedRegionNameAsStr,lastFlushedSequenceId);
  }
  editsCount++;
  if (lastFlushedSequenceId >= entry.getKey().getSequenceId()) {
    editsSkipped++;
    continue;
  }
  if (entry.getEdit().isMetaEdit() && !outputSink.keepRegionEvent(entry)) {
    editsSkipped++;
    continue;
  }
  entryBuffers.appendEntry(entry);
  int moreWritersFromLastCheck=this.getNumOpenWriters() - numOpenedFilesLastCheck;
  if (editsCount % interval == 0 || moreWritersFromLastCheck > numOpenedFilesBeforeReporting) {
    numOpenedFilesLastCheck=this.getNumOpenWriters();
    String countsStr=(editsCount - (editsSkipped + outputSink.getTotalSkippedEdits())) + "" edits, skipped "" + editsSkipped+ "" edits."";
    status.setStatus(""Split "" + countsStr);
    if (cancel != null && !cancel.progress()) {
      cancelled=true;
      return new SplitWALResult(false,corrupt);
    }
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
439,if (!tableName.isSystemTable() && (faults++ % 2) == 0) {,"if (!tableName.isSystemTable() && (faults++ % 2) == 0) {
  LOG.debug("" Injecting fault in table="" + tableName + "" scanner"");
  throw new IOException(""injected fault"");
}
",0,1,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
440,for (WAL.Entry e; (e = reader.next()) != null;) {,"for (WAL.Entry e; (e=reader.next()) != null; ) {
  if (!WALEdit.isMetaEditFamily(e.getEdit().getCells().get(0))) {
    long currentSeqid=e.getKey().getSequenceId();
    if (currentSeqid > currentMaxSeqid) {
      currentMaxSeqid=currentSeqid;
    }
 else {
      fail(""Current max Seqid is "" + currentMaxSeqid + "", but the next seqid in wal is smaller:""+ currentSeqid);
    }
  }
}
",0,0,6,,"QualifiedName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
441,while ((entry = in.next()) != null) ++actualCount;,"while ((entry=in.next()) != null) ++actualCount;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
442,"if (t != null && t.id() == JavaTokenId.WHITESPACE && (pos = t.text().toString().indexOf(""\n"")) != -1) {","if (t != null && t.id() == JavaTokenId.WHITESPACE && (pos=t.text().toString().indexOf(""\n"")) != -1) {
  TypeMirror type=info.getTrees().getTypeMirror(tp);
  String typeName=info.getTypeUtilities().getTypeName(type).toString();
  if (typeToPosition.isEmpty() || !typeName.equals(typeToPosition.get(typeToPosition.size() - 1).first())) {
    typeToPosition.add(Pair.of(typeName,tl.offset() + pos));
  }
}
",0,11,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
443,while(!Utils.updateConnParamsFromZooKeeper(connParams) && ++numRetries < maxRetries) {,"while (!Utils.updateConnParamsFromZooKeeper(connParams) && ++numRetries < maxRetries) {
  connParams.getRejectedHostZnodePaths().clear();
}
",0,0,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
444,if (this.ctx.isCboSucceeded() && this.columnAccessInfo != null &&,"if (this.ctx.isCboSucceeded() && this.columnAccessInfo != null && (colNames=this.columnAccessInfo.getTableToColumnAllAccessMap().get(table.getCompleteName())) != null) {
  Map<String,String> colNameToType=table.getAllCols().stream().collect(Collectors.toMap(FieldSchema::getName,FieldSchema::getType));
  colTypes=colNames.stream().map(colNameToType::get).collect(Collectors.toList());
}
 else {
  colNames=new ArrayList<>();
  colTypes=new ArrayList<>();
  extractColumnInfos(table,colNames,colTypes);
}
",0,1,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
445,if (nRows++ < checkInterruptionAfterRows) return;,"if (nRows++ < checkInterruptionAfterRows) return;
",0,0,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
446,if (ownThread == null || --interruptCheckCounter > 0) return;,"if (ownThread == null || --interruptCheckCounter > 0) return;
",0,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
447,while (res.getState() == LockState.WAITING && numRetries++ < maxNumWaits) {,"while (res.getState() == LockState.WAITING && numRetries++ < maxNumWaits) {
  backoff();
  LOG.debug(""Starting retry attempt:#{} to acquire locks for lockId={}. QueryId={}"",numRetries,res.getLockid(),queryId);
  res=txnManager.getMS().checkLock(res.getLockid());
}
",0,4,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
448,while ((c = read(true)) != ':' && c != '[' && c != '\r' && c != '\n') {,"while ((c=read(true)) != ':' && c != '[' && c != '\r' && c != '\n') {
  ret.write(c);
}
",0,2,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
449,"if ((ptn = x.getHive().getPartition(table, partSpec, false)) == null) {","if ((ptn=x.getHive().getPartition(table,partSpec,false)) == null) {
  x.getTasks().add(addSinglePartition(tblDesc,table,wh,addPartitionDesc,replicationSpec,x,writeId,stmtId,false,null,null));
}
 else {
  throw new SemanticException(ErrorMsg.PARTITION_EXISTS.getMsg(partSpecToString(partSpec)));
}
",0,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
450,while (command.charAt(startPosition++) != '`' && startPosition < command.length()){,"while (command.charAt(startPosition++) != '`' && startPosition < command.length()) {
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
451,if ((arr[i] = activatedNodes[i].get()) == null) {,"if ((arr[i]=activatedNodes[i].get()) == null) {
  break OUTER;
}
",0,1,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
452,if (left[leftOffset + i] != rightBuffer[rightFrom++]) {,"if (left[leftOffset + i] != rightBuffer[rightFrom++]) {
  return false;
}
",0,0,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
453,"} else if ((!indentOnly || offset < context.getCaretLineStart() || offset > context.getCaretLineEnd()) && (endIndents = isEndIndent(context, offset)) > 0) {","if ((!indentOnly || offset < context.getCaretLineStart() || offset > context.getCaretLineEnd()) && (endIndents=isEndIndent(context,offset)) > 0) {
  indent=(balance - endIndents) * indentSize + hangingIndent + initialIndent;
}
 else {
  assert lineType == IN_CODE || lineType == IN_BLOCK_COMMENT_START;
  indent=balance * indentSize + hangingIndent + initialIndent;
  if (lineType == IN_BLOCK_COMMENT_START) {
    adjustedBlockCommentIndention=indent;
  }
}
",0,1,12,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
454,if (resourceContents.size() == 1 && resourceContents.get(0) instanceof EPackage && count-- == 0),"if (resourceContents.size() == 1 && resourceContents.get(0) instanceof EPackage && count-- == 0) {
  return (EObject)resourceContents.get(0);
}
",0,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
455,while (requests.get() > 0 && ((next = buffers.poll()) != null)) {,"while (requests.get() > 0 && ((next=buffers.poll()) != null)) {
  final int bytesFreed=next.remaining();
  s.onNext(next);
  requests.decrementAndGet();
  windowScalingIncrement.addAndGet(bytesFreed);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
456,while ((chReadCount = reader.read(tmp)) != -1 && buf.length() < maxResultLength) {,"while ((chReadCount=reader.read(tmp)) != -1 && buf.length() < maxResultLength) {
  buf.append(tmp,0,chReadCount);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
457,"while (buf.hasRemaining() && (r = (GridClientCacheRequest)parser.decode(ses, buf)) != null)","while (buf.hasRemaining() && (r=(GridClientCacheRequest)parser.decode(ses,buf)) != null) lst.add(r);
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
458,"if (nonNull(filter) && !filter.test(i++, entry))","if (nonNull(filter) && !filter.test(i++,entry)) continue;
",0,0,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
459,"while (!closed && !(isFound = isAttributeSet(key, val)) && passedMillis < timeout) {","while (!closed && !(isFound=isAttributeSet(key,val)) && passedMillis < timeout) {
  mux.wait(timeout - passedMillis);
  passedMillis=U.millisSinceNanos(startNanos);
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
460,"if (msgFactoryCls == null || null == (cls = U.classForName(msgFactoryCls, null)))","if (msgFactoryCls == null || null == (cls=U.classForName(msgFactoryCls,null))) return null;
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
461,"if ((oldClsName = sysTypesMap.put(typeId, new MappedName(clsName, true))) != null) {","if ((oldClsName=sysTypesMap.put(typeId,new MappedName(clsName,true))) != null) {
  if (!oldClsName.className().equals(clsName))   throw new IgniteException(""Duplicate type ID [id="" + typeId + "", oldClsName=""+ oldClsName+ "", clsName=""+ clsName+ ']');
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
462,if ((keySize > 0 && keySize + 1 > maxSize),"if ((keySize > 0 && keySize + 1 > maxSize) || maxSize < 1 || (type=PageUtils.getByte(pageAddr,off)) == (byte)IndexKeyTypes.UNKNOWN) return CANT_BE_COMPARE;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
463,"if (X.hasCause(e, ClusterTopologyCheckedException.class) && --retries > 0) {","if (X.hasCause(e,ClusterTopologyCheckedException.class) && --retries > 0) {
  ClusterTopologyCheckedException topErr=e.getCause(ClusterTopologyCheckedException.class);
  if (!(topErr instanceof ClusterTopologyServerNotFoundException)) {
    IgniteTxLocalAdapter tx=AsyncOpRetryFuture.this.tx;
    assert tx != null;
    AffinityTopologyVersion topVer=tx.topologyVersion();
    assert topVer != null && topVer.topologyVersion() > 0 : tx;
    AffinityTopologyVersion awaitVer=new AffinityTopologyVersion(topVer.topologyVersion() + 1,0);
    IgniteInternalFuture<?> topFut=ctx.shared().exchange().affinityReadyFuture(awaitVer);
    topFut.listen(new IgniteInClosure<IgniteInternalFuture<?>>(){
      @Override public void apply(      IgniteInternalFuture<?> topFut){
        try {
          topFut.get();
          execute(true);
        }
 catch (        IgniteCheckedException e) {
          onDone(e);
        }
 finally {
          ctx.shared().txContextReset();
        }
      }
    }
);
    return;
  }
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
464,"if (obsoleteVer == null || !(marked = markObsolete0(obsoleteVer, true, null))) {","if (obsoleteVer == null || !(marked=markObsolete0(obsoleteVer,true,null))) {
  if (log.isDebugEnabled())   log.debug(""Entry could not be marked obsolete (it is still used): "" + this);
}
 else {
  recordNodeId(affNodeId,topVer);
  if (log.isDebugEnabled())   log.debug(""Entry was marked obsolete: "" + this);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
465,if (!start && (start = true) && log.isInfoEnabled()),"if (!start && (start=true) && log.isInfoEnabled()) log.info(""Warm-up start."");
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
"
466,if ((stopCntr = (stopCntr + 1) & 1023) == 0 && evictionCtx.shouldStop()),"if ((stopCntr=(stopCntr + 1) & 1023) == 0 && evictionCtx.shouldStop()) return cleared;
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
467,"if (fut0 != null || !FINISH_FUT_UPD.compareAndSet(this, null, fut = finishFuture(fastFinish = fastFinish(), true)))","if (fut0 != null || !FINISH_FUT_UPD.compareAndSet(this,null,fut=finishFuture(fastFinish=fastFinish(),true))) return chainFinishFuture(finishFut,true,true,false);
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
468,"if (map == null && (map0 = snapLsnrs.putIfAbsent(nodeId, map = new ConcurrentHashMap<>())) != null)","if (map == null && (map0=snapLsnrs.putIfAbsent(nodeId,map=new ConcurrentHashMap<>())) != null) map=map0;
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
469,if (c != EOF && !Character.isJavaIdentifierPart(c = translateSurrogates(c)) &&,"if (c != EOF && !Character.isJavaIdentifierPart(c=translateSurrogates(c)) && version >= 10) {
  backup((c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) ? 2 : 1);
  int len=input.readLength();
  Token next=nextToken();
  boolean varKeyword=false;
  if (AFTER_VAR_TOKENS.contains(next.id())) {
    do {
      next=nextToken();
    }
 while (next != null && AFTER_VAR_TOKENS.contains(next.id()));
    varKeyword=next != null && next.id() == JavaTokenId.IDENTIFIER;
  }
  input.backup(input.readLengthEOF() - len);
  assert input.readLength() == len;
  if (varKeyword) {
    return token(JavaTokenId.VAR);
  }
}
 else {
  backup((c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) ? 2 : 1);
}
",0,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
470,while (curUpdatesEntry != null && (c = curUpdatesEntry.getKey().compareTo(key)) < 0),"while (curUpdatesEntry != null && (c=curUpdatesEntry.getKey().compareTo(key)) < 0) curUpdatesEntry=advanceCurrentUpdatesEntry(cb,unmarshal,updatesIter,curUpdatesEntry);
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
471,if (writing = ((p.state() & TreeVisitorClosure.CAN_WRITE) != 0)),"if (writing=((p.state() & TreeVisitorClosure.CAN_WRITE) != 0)) return writeLock(pageId,page);
 else return readLock(pageId,page);
",0,0,5,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
"
472,"if ((foundSetBit = foundSetBit(byteToTest, idx == startIdx ? (idxToStartTest & 0b111) : 0)) != -1) {","if ((foundSetBit=foundSetBit(byteToTest,idx == startIdx ? (idxToStartTest & 0b111) : 0)) != -1) {
  long foundPageId=PageIdUtils.pageId(PageIdUtils.partId(start),PageIdUtils.flag(start),PageIdUtils.pageIndex(trackingPage) + ((idx - zeroIdx) << 3) + foundSetBit);
  assert wasChanged(buf,foundPageId,curSnapshotTag,lastSuccessfulSnapshotTag,pageSize);
  assert trackingPageFor(foundPageId,pageSize) == trackingPage;
  return foundPageId;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
473,"while ((written += fileToWrite.writeFully(bytes, written, bytes.length - written)) < bytes.length);","while ((written+=fileToWrite.writeFully(bytes,written,bytes.length - written)) < bytes.length) ;
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
474,if (rdc == null && ((!qryInfo.allPages() && ++cnt == pageSize) || !it.hasNext())) {,"if (rdc == null && ((!qryInfo.allPages() && ++cnt == pageSize) || !it.hasNext())) {
  onFieldsPageReady(qryInfo.local(),qryInfo,!metaSent ? meta : null,entities,data,!it.hasNext(),null);
  if (it.hasNext())   rmvRes=false;
  if (!qryInfo.allPages())   return;
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
475,if ((this.next = next0) == null && expiryPlc != null && dht != null) {,"if ((this.next=next0) == null && expiryPlc != null && dht != null) {
  dht.sendTtlUpdateRequest(expiryPlc);
  expiryPlc=null;
}
",0,0,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
476,if ((reserved = locPart != null && locPart.reserve())),"if ((reserved=locPart != null && locPart.reserve())) reservedParts.add(locPart);
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
"
477,if (nodeId == null || itersCnt++ >= DEADLOCK_MAX_ITERS || timedOut),"if (nodeId == null || itersCnt++ >= DEADLOCK_MAX_ITERS || timedOut) onDone();
 else {
  final Set<IgniteTxKey> txKeys=pendingKeys.get(nodeId);
  processedKeys.addAll(txKeys);
  processedNodes.add(nodeId);
  pendingKeys.remove(nodeId);
  cctx.tm().txLocksInfo(nodeId,this,txKeys);
}
",0,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
478,if ((contains = items.contains(e)) && !(first = getFirst().equals(e))),"if ((contains=items.contains(e)) && !(first=getFirst().equals(e))) remove(e);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
479,if (ctx.discovery().allNodes().size() <= ++metricsUpdateCntr) {,"if (ctx.discovery().allNodes().size() <= ++metricsUpdateCntr) {
  metricsUpdateCntr=0;
  handleCollisions=true;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
480,while (jobsLeft > 0 && idx++ < nodeCnt && (next = nodeQueue.poll()) != null) {,"while (jobsLeft > 0 && idx++ < nodeCnt && (next=nodeQueue.poll()) != null) {
  if (getSpiContext().node(next.id()) == null)   continue;
  if (!F.isEmpty(stealAttrs) && (next.attributes() == null || !U.containsAll(next.attributes(),stealAttrs))) {
    if (log.isDebugEnabled())     log.debug(""Skip node as it does not have all attributes: "" + next.id());
    continue;
  }
  int delta=0;
  try {
    MessageInfo msgInfo=sndMsgMap.get(next.id());
    if (msgInfo == null) {
      if (log.isDebugEnabled())       log.debug(""Failed to find message info for node: "" + next.id());
      continue;
    }
    Integer waitThreshold=next.attribute(createSpiAttributeName(WAIT_JOBS_THRESHOLD_NODE_ATTR));
    if (waitThreshold == null) {
      U.error(log,""Remote node is not configured with GridJobStealingCollisionSpi and "" + ""jobs will not be stolen from it (you must stop it and update its configuration to use "" + ""GridJobStealingCollisionSpi): ""+ next);
      continue;
    }
    delta=next.metrics().getCurrentWaitingJobs() - waitThreshold;
    if (log.isDebugEnabled())     log.debug(""Maximum number of jobs to steal from node [jobsToSteal="" + delta + "", node=""+ next.id()+ ']');
    if (delta <= 0)     continue;
synchronized (msgInfo) {
      if (!msgInfo.expired() && msgInfo.jobsToSteal() > 0) {
        jobsLeft-=msgInfo.jobsToSteal();
        continue;
      }
      if (jobsLeft < delta)       delta=jobsLeft;
      jobsLeft-=delta;
      msgInfo.reset(delta);
    }
    getSpiContext().send(next,new JobStealingRequest(delta),JOB_STEALING_COMM_TOPIC);
  }
 catch (  IgniteSpiException e) {
    U.error(log,""Failed to send job stealing message to node: "" + next,e);
    jobsLeft+=delta;
  }
 finally {
    if (getSpiContext().node(next.id()) != null)     nodeQueue.offer(next);
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
481,while ((idx0 = txInfo.indexOf(srch) + len) >= len) {,"while ((idx0=txInfo.indexOf(srch) + len) >= len) {
  txInfo=txInfo.substring(idx0);
  cnt++;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
482,if (!(empty = map.isEmpty())) break;,"if (!(empty=map.isEmpty())) break;
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
483,if (getWalPos(grid) - offsets[gCnt++] > 100),"if (getWalPos(grid) - offsets[gCnt++] > 100) return true;
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
484,if (--writeAttempts <= 0 && fail != null && fail.get()),"if (--writeAttempts <= 0 && fail != null && fail.get()) throw new IOException(""No space left on device"");
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
485,while (cctx.affinity().partition(cur = next++) != part);,"while (cctx.affinity().partition(cur=next++) != part) ;
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
486,if (aliasNames.get(--aliasCount).equals(featureName)) return (Property)entryFeature;,"if (aliasNames.get(--aliasCount).equals(featureName)) return (Property)entryFeature;
",0,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
"
487,if (!(noQry &= (el instanceof GridSqlConst || el instanceof GridSqlParameter))),"if (!(noQry&=(el instanceof GridSqlConst || el instanceof GridSqlParameter))) return noQry;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
488,if ((child.isQuery() && (child.needSplitChild() || child.needSplit())) ||,"if ((child.isQuery() && (child.needSplitChild() || child.needSplit())) || (hasPushedDownCol=(hasLeftJoin && i != 0 && hasPushedDownColumn(model.findJoin(i).on())))) {
  if (hasPushedDownCol && begin == -1)   begin=i - 1;
  if (begin != -1) {
    pushDownQueryModelRange(model,begin,i - 1);
    i=begin + 1;
    assert model.childModel(i) == child;
    begin=hasPushedDownCol ? i : -1;
  }
  if (child.needSplitChild())   pushDownQueryModel(child);
}
 else if (begin == -1) begin=i;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
489,if (positions[positionId].rate < posCounter++) {,"if (positions[positionId].rate < posCounter++) {
  posCounter=0;
  positionId=(positionId + 1) % positions.length;
}
",0,0,4,,"SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
490,if (!nodes.get(idx).isClient() && !idxs.contains(idx) && --srvCnt < 1),"if (!nodes.get(idx).isClient() && !idxs.contains(idx) && --srvCnt < 1) continue;
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
491,"if (!_taskAttemptBuilt.await(5, TimeUnit.SECONDS) && ++retryCount > maxRetry) {","if (!_taskAttemptBuilt.await(5,TimeUnit.SECONDS) && ++retryCount > maxRetry) {
  throw new IllegalStateException(""Failed to initialize taskAttempt object before cancel"");
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
492,if ((primaryTableName = getTableName(path)).isPresent() && !dbPrefix.isPresent()) {,"if ((primaryTableName=getTableName(path)).isPresent() && !dbPrefix.isPresent()) {
  tableNames.add(primaryTableName.get());
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
493,while ((lastBytes = this.proxy.read(this.buffer)) > 0) {,"while ((lastBytes=this.proxy.read(this.buffer)) > 0) {
  this.totalBytesRead+=lastBytes;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
494,while ((this.maxBytes == null || this.maxBytes > totalBytes) &&,"while ((this.maxBytes == null || this.maxBytes > totalBytes) && (numBytes=fillBufferFromInputChannel(buffer)) != -1) {
  totalBytes+=numBytes;
  buffer.flip();
  if (this.maxBytes != null && totalBytes > this.maxBytes) {
    buffer.limit(buffer.limit() - (int)(totalBytes - this.maxBytes));
    totalBytes=this.maxBytes;
  }
  this.outputChannel.write(buffer);
  buffer.compact();
  if (this.copySpeedMeter != null) {
    this.copySpeedMeter.mark(numBytes);
  }
}
",0,0,6,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
495,while (!Thread.currentThread().isInterrupted() && (line = srcLogFileReader.readLine()) != null) {,"while (!Thread.currentThread().isInterrupted() && (line=srcLogFileReader.readLine()) != null) {
  if (!shouldCopyLine(line)) {
    continue;
  }
  destLogFileWriter.write(line);
  destLogFileWriter.newLine();
  linesProcessed++;
  if (linesProcessed % LogCopier.this.linesWrittenBeforeFlush == 0) {
    destLogFileWriter.flush();
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
496,if (unserializable.getObj().equals(inputObjects[(nItems++) % inputObjects.length])) {,"if (unserializable.getObj().equals(inputObjects[(nItems++) % inputObjects.length])) {
  collector.emit(new Values(unserializable.getObj()));
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
"
497,while ((marker = this.readMarker()) != MetaMarker.SEPARATOR) {,"while ((marker=this.readMarker()) != MetaMarker.SEPARATOR) {
switch (marker) {
case MetaMarker.CHUNK_HEADER:
case MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER:
case (byte)(MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER | 0x80):
case (byte)(MetaMarker.ONLY_ONE_PAGE_CHUNK_HEADER | 0x40):
    fileOffsetOfChunk=this.position() - 1;
  ChunkHeader chunkHeader=this.readChunkHeader(marker);
measurementID=chunkHeader.getMeasurementID();
IMeasurementSchema measurementSchema=new MeasurementSchema(measurementID,chunkHeader.getDataType(),chunkHeader.getEncodingType(),chunkHeader.getCompressionType());
measurementSchemaList.add(measurementSchema);
dataType=chunkHeader.getDataType();
Statistics<?> chunkStatistics=Statistics.getStatsByType(dataType);
int dataSize=chunkHeader.getDataSize();
if (((byte)(chunkHeader.getChunkType() & 0x3F)) == MetaMarker.CHUNK_HEADER) {
while (dataSize > 0) {
PageHeader pageHeader=this.readPageHeader(chunkHeader.getDataType(),true);
chunkStatistics.mergeStatistics(pageHeader.getStatistics());
this.skipPageData(pageHeader);
dataSize-=pageHeader.getSerializedPageSize();
chunkHeader.increasePageNums(1);
}
}
 else {
PageHeader pageHeader=this.readPageHeader(chunkHeader.getDataType(),false);
Decoder valueDecoder=Decoder.getDecoderByType(chunkHeader.getEncodingType(),chunkHeader.getDataType());
ByteBuffer pageData=readPage(pageHeader,chunkHeader.getCompressionType());
Decoder timeDecoder=Decoder.getDecoderByType(TSEncoding.valueOf(TSFileDescriptor.getInstance().getConfig().getTimeEncoder()),TSDataType.INT64);
PageReader reader=new PageReader(pageHeader,pageData,chunkHeader.getDataType(),valueDecoder,timeDecoder,null);
BatchData batchData=reader.getAllSatisfiedPageData();
while (batchData.hasCurrent()) {
switch (dataType) {
case INT32:
chunkStatistics.update(batchData.currentTime(),batchData.getInt());
break;
case INT64:
chunkStatistics.update(batchData.currentTime(),batchData.getLong());
break;
case FLOAT:
chunkStatistics.update(batchData.currentTime(),batchData.getFloat());
break;
case DOUBLE:
chunkStatistics.update(batchData.currentTime(),batchData.getDouble());
break;
case BOOLEAN:
chunkStatistics.update(batchData.currentTime(),batchData.getBoolean());
break;
case TEXT:
chunkStatistics.update(batchData.currentTime(),batchData.getBinary());
break;
default :
throw new IOException(""Unexpected type "" + dataType);
}
batchData.next();
}
chunkHeader.increasePageNums(1);
}
currentChunk=new ChunkMetadata(measurementID,dataType,fileOffsetOfChunk,chunkStatistics);
chunkMetadataList.add(currentChunk);
break;
case MetaMarker.CHUNK_GROUP_HEADER:
truncatedSize=this.position() - 1;
if (lastDeviceId != null) {
if (newSchema != null) {
for (IMeasurementSchema tsSchema : measurementSchemaList) {
newSchema.putIfAbsent(new Path(lastDeviceId,tsSchema.getMeasurementId()),tsSchema);
}
}
measurementSchemaList=new ArrayList<>();
chunkGroupMetadataList.add(new ChunkGroupMetadata(lastDeviceId,chunkMetadataList));
}
chunkMetadataList=new ArrayList<>();
ChunkGroupHeader chunkGroupHeader=this.readChunkGroupHeader();
lastDeviceId=chunkGroupHeader.getDeviceID();
break;
case MetaMarker.OPERATION_INDEX_RANGE:
truncatedSize=this.position() - 1;
if (lastDeviceId != null) {
if (newSchema != null) {
for (IMeasurementSchema tsSchema : measurementSchemaList) {
newSchema.putIfAbsent(new Path(lastDeviceId,tsSchema.getMeasurementId()),tsSchema);
}
}
measurementSchemaList=new ArrayList<>();
chunkGroupMetadataList.add(new ChunkGroupMetadata(lastDeviceId,chunkMetadataList));
lastDeviceId=null;
}
readPlanIndex();
truncatedSize=this.position();
break;
default :
throw new IOException(""Unexpected marker "" + marker);
}
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
498,while (buffer.hasRemaining() && ((b = buffer.get()) & 0x80) != 0) {,"while (buffer.hasRemaining() && ((b=buffer.get()) & 0x80) != 0) {
  value|=(b & 0x7F) << i;
  i+=7;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
499,} else if (values.get(FIRST).equals(IN_PREDICATE_ESTIMATE_LEN_FLAG) || (isFirst =,"if (values.get(FIRST).equals(IN_PREDICATE_ESTIMATE_LEN_FLAG) || (isFirst=values.get(SECOND).equals(IN_PREDICATE_ESTIMATE_LEN_FLAG))) {
  numValuesSelected=Integer.parseInt(values.get(isFirst ? FIRST : SECOND));
}
 else {
  numValuesSelected=values.size();
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
500,} else if (values.get(RecommenderConstants.FIRST).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG) || (,"if (values.get(RecommenderConstants.FIRST).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG) || (isFirst=values.get(RecommenderConstants.SECOND).equals(RecommenderConstants.IN_PREDICATE_ESTIMATE_LEN_FLAG))) {
  numValuesSelected=Integer.parseInt(values.get(isFirst ? RecommenderConstants.FIRST : RecommenderConstants.SECOND));
}
 else {
  numValuesSelected=values.size();
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
501,while (!_stopReadingInput.get() && _running.get() && (read = input.read()) != -1) {,"while (!_stopReadingInput.get() && _running.get() && (read=input.read()) != -1) {
  if (read == 27) {
    if (input.read() == 91) {
      read=input.read();
switch (read) {
case 68:
        _canvas.moveLeft();
      break;
case 67:
    _canvas.moveRight();
  break;
case 65:
_canvas.moveUp();
break;
case 66:
_canvas.moveDown();
break;
case 53:
_canvas.pageUp();
break;
case 54:
_canvas.pageDown();
break;
default :
break;
}
_lastPaint=0;
}
}
 else {
Runnable runnable=_keyHookMap.get(read);
if (runnable != null) {
runnable.run();
}
}
paint();
}
",0,0,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
502,while (this.readPos < this.limit && (curr = this.readBuffer[this.readPos++]) != LF) {,"while (this.readPos < this.limit && (curr=this.readBuffer[this.readPos++]) != LF) {
}
",0,1,10,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
503,if ( Config.bsp_msg_size > 0 && size++ > Config.bsp_msg_size ) {,"if (Config.bsp_msg_size > 0 && size++ > Config.bsp_msg_size) {
  for (  String p : all_peer_names)   if (!peer.getPeerName().equals(p))   peer.send(p,new MRContainer(more_to_come));
  peer.sync();
  size=0;
  MRContainer msg;
  while ((msg=peer.getCurrentMessage()) != null)   if (!msg.data().equals(more_to_come))   msg_cache.add(msg.data());
}
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
504,if ( i++ < Config.max_bag_size_print || Config.max_bag_size_print < 0 ),"if (i++ < Config.max_bag_size_print || Config.max_bag_size_print < 0) b.append(((i > 1) ? "", "" : """") + e);
 else return b.append("", ... }"").toString();
",0,6,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
505,"if (exists && (i = compare(resultFile,resultDir.getAbsolutePath()+""/""+qname+""_result.txt"")) > 0) {","if (exists && (i=compare(resultFile,resultDir.getAbsolutePath() + ""/"" + qname+ ""_result.txt"")) > 0) {
  return i;
}
 else if (exists) {
  return 0;
}
 else {
  return 0;
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
506,while ((-1 != (n = input.read(buffer))) && (count < limit)) {,"while ((-1 != (n=input.read(buffer))) && (count < limit)) {
  int bytesToCopy=Math.min(limit - count,n);
  output.write(buffer,0,bytesToCopy);
  count+=bytesToCopy;
}
",0,1,7,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
507,for (int index = 0; ((range = hitIterator.next()) != null); ++index) {,"for (int index=0; ((range=hitIterator.next()) != null); ++index) {
  Element element=modifyAction.getElement(index);
  if (element != null) {
    if (element.isGadget()) {
      int xmlStart=view.transformToXmlOffset(range.getStart());
      Doc.E docElem=Point.elementAfter(doc,doc.locate(xmlStart));
      updateExistingGadgetElement(doc,docElem,element);
    }
 else {
      throw new UnsupportedOperationException(""Can't update other elements than gadgets at the moment"");
    }
  }
}
",0,0,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, ForStatement-updaters, ),
"
508,while (localDoc.asText(toExcl = localDoc.getNextSibling(toExcl)) != null) {,"while (localDoc.asText(toExcl=localDoc.getNextSibling(toExcl)) != null) {
  if (localDoc.isSameNode(chunkEndNode,toExcl)) {
    break;
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
509,"while (!end && ((cmp = joincomparator.compare(leftTuple, rightTuple)) != 0)) {","while (!end && ((cmp=joincomparator.compare(leftTuple,rightTuple)) != 0)) {
  if (cmp > 0) {
    Tuple nullPaddedTuple=TupleUtil.createNullPaddedTuple(leftNumCols);
    frameTuple.set(nullPaddedTuple,rightTuple);
    projector.eval(frameTuple,outTuple);
    rightTuple=rightChild.next();
    if (rightTuple == null) {
      end=true;
    }
    return outTuple;
  }
 else   if (cmp < 0) {
    Tuple nullPaddedTuple=TupleUtil.createNullPaddedTuple(rightNumCols);
    frameTuple.set(leftTuple,nullPaddedTuple);
    projector.eval(frameTuple,outTuple);
    leftTuple=leftChild.next();
    if (leftTuple == null) {
      end=true;
    }
    return outTuple;
  }
}
",0,2,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
510,while ((temp[lineFeedPos] = (byte)is.read()) != (byte)LF) {,"while ((temp[lineFeedPos]=(byte)is.read()) != (byte)LF) {
  if (temp[lineFeedPos] < 0) {
    break;
  }
  lineFeedPos++;
}
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
511,if ((isMsgCntFlushed = this.curUnflushed.addAndGet(msgCnt) >= messageStore.getUnflushThreshold()),"if ((isMsgCntFlushed=this.curUnflushed.addAndGet(msgCnt) >= messageStore.getUnflushThreshold()) || (isMsgTimeFushed=currTime - this.lastFlushTime.get() >= messageStore.getUnflushInterval()) || isDataFlushed|| isDataSegFlushed|| isIndexFlushed) {
  boolean forceMetadata=(isDataSegFlushed || isIndexFlushed || (currTime - this.lastMetaFlushTime.get() > MAX_META_REFRESH_DUR));
  if (!isDataSegFlushed) {
    curDataSeg.flush(forceMetadata);
  }
  if (!isIndexFlushed) {
    curIndexSeg.flush(forceMetadata);
  }
  msgFileStatisInfo.addFullTypeCount(currTime,isDataSegFlushed,isIndexFlushed,isMsgCntFlushed,isMsgTimeFushed,isDataFlushed,this.curUnflushSize.get(),this.curUnflushed.get());
  this.curUnflushSize.set(0);
  this.curUnflushed.set(0);
  this.lastFlushTime.set(System.currentTimeMillis());
  if (forceMetadata) {
    this.lastMetaFlushTime.set(System.currentTimeMillis());
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
512,if ((fullDataSize = (this.cacheDataOffset.get() + entryLength > this.maxDataCacheSize)),"if ((fullDataSize=(this.cacheDataOffset.get() + entryLength > this.maxDataCacheSize)) || (fullIndexSize=(this.cacheIndexOffset.get() + DataStoreUtils.STORE_INDEX_HEAD_LEN > this.maxIndexCacheSize)) || (fullCount=(this.curMessageCount.get() + 1 > maxAllowedMsgCount))) {
  msgMemStatisInfo.addFullTypeCount(timeRecv,fullDataSize,fullIndexSize,fullCount);
  return false;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
513,"if (index.compareAndSet(befIndex, (++tmpIndex) % 2)) {","if (index.compareAndSet(befIndex,(++tmpIndex) % 2)) {
  curRunCnt=countSets[befIndex].refCnt;
  do {
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      return;
    }
  }
 while (curRunCnt.get() > 0);
  counters=countSets[befIndex].counterItem;
  if (counters != null) {
    for (    Map.Entry<String,CountItem> entry : counters.entrySet()) {
      logger.info(""{}#{}#{}#{}"",new Object[]{cntHdr,entry.getKey(),entry.getValue().getMsgCount(),entry.getValue().getMsgSize()});
    }
    counters.clear();
  }
}
",0,0,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, IfStatement-expression, ),
"
514,"for ( int lh = l.indexOf( '|' ) + 1, rh; ( rh = l.indexOf( '|', lh ) ) != -1; lh = rh + 1 )","for (int lh=l.indexOf('|') + 1, rh; (rh=l.indexOf('|',lh)) != -1; lh=rh + 1) {
  final Block[] bs=textParser.parse(l.substring(lh,rh).trim());
  if (bs.length == 1 && bs[0] instanceof BoldBlock) {
    final Block[] tmp=((BoldBlock)bs[0]).getBlocks();
    cells.add(new TableCellHeaderBlock(tmp));
  }
 else {
    cells.add(new TableCellBlock(bs));
  }
}
",0,7,16,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
"
515,"if (!""HTTP"".equals(statusLine.substring(at, at += 4))) {","if (!""HTTP"".equals(statusLine.substring(at,at+=4))) {
  log.warn(""Status-Line '"" + statusLine + ""' does not start with HTTP"");
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
516,while (thread != null && thread.isAlive() && cnt-- > 0) {,"while (thread != null && thread.isAlive() && cnt-- > 0) {
  result=new ResultImpl(Result.State.STOPPING);
  log.info(""Stopping task {}..."",id);
  try {
    thread.join(10000);
  }
 catch (  InterruptedException e) {
    log.error(""Error while waiting for thread: "" + thread.getName(),e);
    thread.interrupt();
  }
  if (thread.isAlive()) {
    thread.interrupt();
  }
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
517,if ((this.cache = stringToType.apply(fbr.readLine())) == null) {,"if ((this.cache=stringToType.apply(fbr.readLine())) == null) {
  this.empty=true;
  this.cache=null;
}
 else {
  this.empty=false;
}
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
518,} else if ((timerSampleCounter++ & (TIMER_SAMPLE_RATE - 1)) == 0) {,"if ((timerSampleCounter++ & (TIMER_SAMPLE_RATE - 1)) == 0) {
  measure(timeNanos * TIMER_SAMPLE_RATE);
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
519,for (int c = 0; c < FAN_OUT && (result = addNode(node)); c++);,"for (int c=0; c < FAN_OUT && (result=addNode(node)); c++) ;
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
520,while (++pos < offsets.length && offsets[pos] < 0) { },"while (++pos < offsets.length && offsets[pos] < 0) {
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
521,while (nth-- > 0 && p.parent != null) {,"while (nth-- > 0 && p.parent != null) {
  p=p.parent;
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
522,while (records.size() > 0 && (mx = records.remove(0)) != null && mx.length() > 0) {,"while (records.size() > 0 && (mx=records.remove(0)) != null && mx.length() > 0) {
  LOGGER.debug(""Add MX-Record {} to list"",mx);
  return new DNSLookupContinuation(new DNSRequest(mx,isIPv6 ? DNSRequest.AAAA : DNSRequest.A),MXMechanism.this);
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
523,while ((errorStatus = executor.getExitStatus()) == -1 && i < JschSshClient.this.sshRetries) {,"while ((errorStatus=executor.getExitStatus()) == -1 && i < JschSshClient.this.sshRetries) {
  logger.warn(""<< "" + message);
  backoffForAttempt(++i,message);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ThisExpression-qualifier, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
524,if ( !lastFunctor.getName().equals(args[instructions[pc++]]) ) return;,"if (!lastFunctor.getName().equals(args[instructions[pc++]])) return;
",0,2,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
525,"while ((parts = csvReadFile(dataReader, delim)).length != 0) {","while ((parts=csvReadFile(dataReader,delim)).length != 0) {
  lineNumber++;
  SampleEvent event=CSVSaveService.makeResultFromDelimitedString(parts,saveConfig,lineNumber);
  if (event != null) {
    final SampleResult result=event.getResult();
    if (ResultCollector.isSampleWanted(result.isSuccessful(),errorsOnly,successOnly)) {
      visualizer.add(result);
    }
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
526,while ((inHeaders || readLength < dataLength) && ((x = in.read()) != -1)) {,"while ((inHeaders || readLength < dataLength) && ((x=in.read()) != -1)) {
  line.write(x);
  clientRequest.write(x);
  if (firstLine && !CharUtils.isAscii((char)x)) {
    throw new IllegalArgumentException(""Only ASCII supported in headers (perhaps SSL was used?)"");
  }
  if (inHeaders && (byte)x == (byte)'\n') {
    if (line.size() < 3) {
      inHeaders=false;
      firstLine=false;
    }
    final String reqLine=line.toString();
    if (firstLine) {
      parseFirstLine(reqLine);
      firstLine=false;
    }
 else {
      final int contentLen=parseLine(reqLine);
      if (contentLen > 0) {
        dataLength=contentLen;
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(""Client Request Line: '{}'"",reqLine.replaceFirst(""\r\n$"",CRLF));
    }
    line.reset();
  }
 else   if (!inHeaders) {
    readLength++;
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
527,while ((n = readNextChar()) > '\u001F' && n != ESCAPE_CHAR && n != EOL && n != QUOTE_CHAR) {,"while ((n=readNextChar()) > '\u001F' && n != ESCAPE_CHAR && n != EOL && n != QUOTE_CHAR) {
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
528,while (candidates.size() > 0 && ((++popCount <= popLimit) || popLimit == 0)) {,"while (candidates.size() > 0 && ((++popCount <= popLimit) || popLimit == 0)) {
  CubePruneState state=candidates.poll();
  DotNode dotNode=state.getDotNode();
  List<Rule> rules=state.rules;
  SourcePath sourcePath=dotNode.getSourcePath();
  List<SuperNode> superNodes=dotNode.getAntSuperNodes();
  if (stateConstraint == null || stateConstraint.isLegal(state.getDPStates())) {
    getCell(i,j).addHyperEdgeInCell(state.computeNodeResult,state.getRule(),i,j,state.antNodes,sourcePath,true);
  }
  for (int k=0; k < state.ranks.length; k++) {
    int[] nextRanks=new int[state.ranks.length];
    System.arraycopy(state.ranks,0,nextRanks,0,state.ranks.length);
    nextRanks[k]++;
    if (k == 0 && (nextRanks[k] > rules.size() || (config.num_translation_options > 0 && nextRanks[k] > config.num_translation_options)))     continue;
 else     if ((k != 0 && nextRanks[k] > superNodes.get(k - 1).nodes.size()))     continue;
    Rule nextRule=rules.get(nextRanks[0] - 1);
    List<HGNode> nextAntNodes=new ArrayList<>(state.antNodes.size());
    for (int x=0; x < state.ranks.length - 1; x++)     nextAntNodes.add(superNodes.get(x).nodes.get(nextRanks[x + 1] - 1));
    CubePruneState nextState=new CubePruneState(new ComputeNodeResult(featureFunctions,nextRule,nextAntNodes,i,j,sourcePath,this.sentence),nextRanks,rules,nextAntNodes,dotNode);
    if (visitedStates.contains(nextState))     continue;
    visitedStates.add(nextState);
    candidates.add(nextState);
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
529,for ( final Iterator<SearchResult> i = results.iterator(); i.hasNext() && idx++ <= maxItems; ) {,"for (final Iterator<SearchResult> i=results.iterator(); i.hasNext() && idx++ <= maxItems; ) {
  final SearchResult sr=i.next();
  row=XhtmlUtil.element(XHTML.tr);
  final Element name=XhtmlUtil.element(XHTML.td);
  name.setAttribute(XHTML.ATTR_width,""30%"");
  name.addContent(XhtmlUtil.link(context.getURL(ContextEnum.PAGE_VIEW.getRequestContext(),sr.getPage().getName()),engine.getManager(RenderingManager.class).beautifyTitle(sr.getPage().getName())));
  row.addContent(name);
  row.addContent(XhtmlUtil.element(XHTML.td,"""" + sr.getScore()));
  table.addContent(row);
}
",0,0,10,,"Modifier(VariableDeclarationExpression-modifiers, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
530,"if( (days = context.getHttpParameter( ""weblog.""+PARAM_DAYS )) == null ) {","if ((days=context.getHttpParameter(""weblog."" + PARAM_DAYS)) == null) {
  days=params.get(PARAM_DAYS);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
531,for( final Iterator< Page > i = blogEntries.iterator(); i.hasNext() && maxEntries-- > 0 ; ) {,"for (final Iterator<Page> i=blogEntries.iterator(); i.hasNext() && maxEntries-- > 0; ) {
  final Page p=i.next();
  if (mgr.checkPermission(context.getWikiSession(),new PagePermission(p,PagePermission.VIEW_ACTION))) {
    addEntryHTML(context,entryFormat,hasComments,sb,p,params);
  }
}
",0,0,10,,"Modifier(VariableDeclarationExpression-modifiers, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
532,if( m_iterator != null && m_iterator.hasNext() && m_count++ < m_maxItems ) {,"if (m_iterator != null && m_iterator.hasNext() && m_count++ < m_maxItems) {
  final SearchResult r=(SearchResult)m_iterator.next();
  final Engine engine=m_wikiContext.getEngine();
  final HttpServletRequest request=m_wikiContext.getHttpRequest();
  final Command command=PageCommand.VIEW.targetedCommand(r.getPage());
  final Context context=Wiki.context().create(engine,request,command);
  pageContext.setAttribute(Context.ATTR_CONTEXT,context,PageContext.REQUEST_SCOPE);
  pageContext.setAttribute(getId(),r);
  return EVAL_BODY_BUFFERED;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
533,while (--offset >= 0 && characterAcceptor.isIdentifier(docText.charAt(offset))) { },"while (--offset >= 0 && characterAcceptor.isIdentifier(docText.charAt(offset))) {
}
",0,2,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
534,while ((currentIterator == null || !(hasNext = hasNextConditionHasNext()) || !currentSegment.isOpen()),"while ((currentIterator == null || !(hasNext=hasNextConditionHasNext()) || !currentSegment.isOpen()) && segments.hasNext()) {
  close();
  currentSegment=segments.next();
  try {
    if (from == null || to == null) {
      if (forward) {
        currentIterator=currentSegment.all();
      }
 else {
        currentIterator=currentSegment.reverseAll();
      }
    }
 else {
      if (forward) {
        currentIterator=currentSegment.range(from,to);
      }
 else {
        currentIterator=currentSegment.reverseRange(from,to);
      }
    }
  }
 catch (  final InvalidStateStoreException e) {
  }
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
535,if (++exceptionCount > 2 || !(e instanceof RuntimeException) ||,"if (++exceptionCount > 2 || !(e instanceof RuntimeException) || !(e.getMessage().contains(""test exception""))) {
  e.printStackTrace(System.err);
  hasUnexpectedError=true;
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
536,while( ( wait = ( 1000 - ( System.currentTimeMillis() - before ) ) ) > 0 ) {,"while ((wait=(1000 - (System.currentTimeMillis() - before))) > 0) {
  try {
    Thread.sleep(wait);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
537,if (recordCounter++ % SparkUtil.getNormalRecordLogThreshold() == 0) {,"if (recordCounter++ % SparkUtil.getNormalRecordLogThreshold() == 0) {
  logger.info(""Accepting record with ordinal: "" + recordCounter);
  logger.info(""Do call, available memory: {}m"",MemoryBudgetController.getSystemAvailMB());
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
538,while (!(currentHasNext = checkNotNull(current).hasNext()) && resultIterator.hasNext()) {,"while (!(currentHasNext=checkNotNull(current).hasNext()) && resultIterator.hasNext()) {
  if (prevResult != null) {
    prevResult.endRead();
  }
  IStreamingSearchResult currResult=resultIterator.next();
  currResult.startRead();
  prevResult=currResult;
  current=currResult.iterator();
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
539,"if (!disruptor.getRingBuffer().tryPublishEvent(this,","if (!disruptor.getRingBuffer().tryPublishEvent(this,this,(location=calcLocationIfRequested(fqcn)),fqcn,level,marker,message,thrown)) {
  handleRingBufferFull(location,fqcn,level,marker,message,thrown);
}
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
540,while (!stop[0] && (line = in.readLine()) != null) {,"while (!stop[0] && (line=in.readLine()) != null) {
  System.out.println(line);
}
",0,0,6,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
541,for (int i = 0; null != (clazz = StackLocatorUtil.getCallerClass(i)); i++) {,"for (int i=0; null != (clazz=StackLocatorUtil.getCallerClass(i)); i++) {
  classes[i]=clazz;
}
",0,0,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NullLiteral(InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
542,if (newKey[pos = HashCommon.mix(myKeys[i].hashCode()) & mask] != null) {,"if (newKey[pos=HashCommon.mix(myKeys[i].hashCode()) & mask] != null) {
  while (newKey[pos=(pos + 1) & mask] != null) {
  }
}
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
543,if (!v.isNA(r) && ((d = v.at(r)) != 0.0)) {,"if (!v.isNA(r) && ((d=v.at(r)) != 0.0)) {
  m.setQuick(r,c,d);
}
",0,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
544,if (btIndex > aCols.length || (aCol = aCols[btIndex]) == null,"if (btIndex > aCols.length || (aCol=aCols[btIndex]) == null || aCol.size() == 0) {
  continue;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
545,if (i+1 >= components.length || (cs = getCsIfHorizontal2D(crs = components[i + 1])) == null) {,"if (i + 1 >= components.length || (cs=getCsIfHorizontal2D(crs=components[i + 1])) == null) {
  continue;
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
546,"while (!Double.isNaN(current = CVB0Driver.readPerplexity(conf, topicModelTemp, iteration))) {","while (!Double.isNaN(current=CVB0Driver.readPerplexity(conf,topicModelTemp,iteration))) {
  lowest=Math.min(current,lowest);
  iteration++;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
547,for( int i = values.size(); i-- != 0; ) if ( iterator.nextDouble() != 0 ) numNonZeros++;,"for (int i=values.size(); i-- != 0; ) if (iterator.nextDouble() != 0) numNonZeros++;
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ForStatement-body, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ForStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ForStatement-body, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ForStatement-body, ),
"
548,"if (!documentIdentifier.equals(currentURI) || robotsUsage < ROBOTS_DATA || (robotsStatus = checkFetchAllowed(documentIdentifier,protocol,ipAddress,port,credential,trustStore,hostName,binNames,currentTime,","if (!documentIdentifier.equals(currentURI) || robotsUsage < ROBOTS_DATA || (robotsStatus=checkFetchAllowed(documentIdentifier,protocol,ipAddress,port,credential,trustStore,hostName,binNames,currentTime,url.getFile(),activities,connectionLimit,proxyHost,proxyPort,proxyAuthDomain,proxyAuthUsername,proxyAuthPassword)) == RESULTSTATUS_TRUE) {
  LoginCookies lc=null;
  if (sessionCredential != null) {
    lc=cookieManager.readCookies(sessionCredential.getSequenceKey());
  }
  IThrottledConnection connection=ThrottledFetcher.getConnection(currentContext,throttleGroupName,protocol,ipAddress,port,credential,trustStore,throttleDescription,binNames,connectionLimit,proxyHost,proxyPort,proxyAuthDomain,proxyAuthUsername,proxyAuthPassword,socketTimeoutMilliseconds,connectionTimeoutMilliseconds,activities);
  try {
    connection.beginFetch((fetchStatus.sessionState == SESSIONSTATE_LOGIN) ? FETCH_LOGIN : FETCH_STANDARD);
    try {
      connection.executeFetch(url.getFile(),userAgent,from,false,hostName,formData,lc);
      int response=connection.getResponseCode();
      if (response == 200 || response == 302 || response == 301) {
        if (fetchStatus.sessionState == SESSIONSTATE_LOGIN) {
          LoginCookies lastFetchCookies=connection.getLastFetchCookies();
          cookieManager.updateCookies(sessionCredential.getSequenceKey(),lastFetchCookies);
        }
        String contentType=extractContentType(connection.getResponseHeader(""Content-Type""));
        if (isContentInteresting(activities,currentURI,response,contentType)) {
          fetchStatus.checkSum=cache.addData(activities,currentURI,connection);
          fetchStatus.headerData=connection.getResponseHeaders();
          fetchStatus.resultSignal=RESULT_VERSION_NEEDED;
          activityResultCode=null;
        }
 else {
          fetchStatus.contextMessage=""it had the wrong content type ('"" + contentType + ""')"";
          fetchStatus.resultSignal=RESULT_NO_DOCUMENT;
          activityResultCode=activities.EXCLUDED_MIMETYPE;
        }
      }
 else {
        String contentType=extractContentType(connection.getResponseHeader(""Content-Type""));
        String encoding=extractEncoding(contentType);
        if (encoding == null)         encoding=StandardCharsets.UTF_8.name();
        String decodedResponse=""undecodable"";
        try {
          decodedResponse=""'"" + connection.getLimitedResponseBody(1024,encoding) + ""'"";
        }
 catch (        ManifoldCFException e) {
          if (e.getErrorCode() == ManifoldCFException.INTERRUPTED)           throw e;
          connection.noteInterrupted(e);
        }
catch (        ServiceInterruption e) {
          connection.noteInterrupted(e);
        }
        fetchStatus.contextMessage=""it failed to fetch (status="" + Integer.toString(response) + "", message=""+ decodedResponse+ "")"";
        fetchStatus.resultSignal=RESULT_NO_VERSION;
        activityResultCode=null;
      }
    }
 catch (    ManifoldCFException e) {
      connection.noteInterrupted(e);
      throw e;
    }
catch (    ServiceInterruption e) {
      connection.noteInterrupted(e);
      throw e;
    }
 finally {
      connection.doneFetch(activities);
    }
  }
  finally {
    connection.close();
  }
  String preferredLink=null;
  String preferredRedirection=null;
  formData=null;
  String contentLink=null;
  if (fetchStatus.resultSignal == RESULT_VERSION_NEEDED) {
    boolean isLoginPage=false;
    if (sessionCredential != null) {
      Iterator iterMatches=sessionCredential.findLoginParameters(currentURI);
      boolean seenAnything=false;
      boolean seenFormError=false;
      boolean seenLinkError=false;
      boolean seenRedirectionError=false;
      boolean seenContentError=false;
      while (iterMatches.hasNext()) {
        seenAnything=true;
        LoginParameters lp=(LoginParameters)iterMatches.next();
        FormData newFormData=findHTMLForm(currentURI,lp);
        if (newFormData != null) {
          if (formData != null) {
            seenFormError=true;
            formData=null;
          }
 else           if (!seenFormError) {
            formData=newFormData;
            preferredLink=null;
            preferredRedirection=null;
          }
        }
 else {
          String newPreferredLink=findHTMLLinkURI(currentURI,lp);
          if (newPreferredLink != null) {
            if (preferredLink != null) {
              seenLinkError=true;
              preferredLink=null;
            }
 else             if (!seenLinkError && !seenFormError && formData == null) {
              preferredLink=newPreferredLink;
              preferredRedirection=null;
            }
          }
 else {
            String newPreferredRedirection=findPreferredRedirectionURI(currentURI,lp);
            if (newPreferredRedirection != null) {
              if (preferredRedirection != null) {
                seenRedirectionError=true;
                preferredRedirection=null;
              }
 else               if (!seenRedirectionError && !seenLinkError && !seenFormError&& formData == null && preferredLink == null) {
                preferredRedirection=newPreferredRedirection;
              }
            }
 else {
              String newContentLink=findSpecifiedContent(currentURI,lp);
              if (newContentLink != null) {
                if (contentLink != null) {
                  seenContentError=true;
                  contentLink=null;
                }
 else                 if (!seenContentError && !seenRedirectionError && !seenLinkError&& !seenFormError&& formData == null && preferredLink == null && preferredRedirection == null) {
                  contentLink=newContentLink;
                }
              }
            }
          }
        }
      }
      if (formData != null) {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: Document '"" + currentURI + ""' matches form, so determined to be login page for sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
        isLoginPage=true;
      }
 else       if (preferredLink != null) {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: Document '"" + currentURI + ""' matches preferred link, so determined to be login page for sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
        isLoginPage=true;
      }
 else       if (preferredRedirection != null) {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: Document '"" + currentURI + ""' matches preferred redirection, so determined to be login page for sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
        isLoginPage=true;
      }
 else       if (contentLink != null) {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: Document '"" + currentURI + ""' matches content, so determined to be login page for sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
        isLoginPage=true;
      }
 else {
        if (seenAnything && Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: Document '"" + currentURI + ""' did not match expected form, link, redirection, or content for sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
      }
    }
    if (fetchStatus.sessionState == SESSIONSTATE_NORMAL && isLoginPage) {
      if (activities.beginEventSequence(globalSequenceEvent)) {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: For document '"" + documentIdentifier + ""', beginning login sequence '""+ sessionCredential.getSequenceKey()+ ""'"");
        activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_START,null,sessionCredential.getSequenceKey(),""OK"",null,null);
        fetchStatus.sessionState=SESSIONSTATE_LOGIN;
      }
 else {
        if (Logging.connectors.isDebugEnabled())         Logging.connectors.debug(""WEB: For document '"" + documentIdentifier + ""', login sequence '""+ sessionCredential.getSequenceKey()+ ""' was already in progress."");
        cache.deleteData(currentURI);
        fetchStatus.contextMessage=""login sequence already in progress"";
        fetchStatus.resultSignal=RESULT_RETRY_DOCUMENT;
        activityResultCode=null;
      }
    }
 else     if (fetchStatus.sessionState == SESSIONSTATE_LOGIN && isLoginPage == false) {
      activities.completeEventSequence(globalSequenceEvent);
      activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,null,sessionCredential.getSequenceKey(),""OK"",null,null);
      fetchStatus.sessionState=SESSIONSTATE_NORMAL;
      if (!currentURI.equals(documentIdentifier)) {
        cache.deleteData(currentURI);
        currentURI=documentIdentifier;
        continue;
      }
    }
    if (fetchStatus.resultSignal == RESULT_VERSION_NEEDED && fetchStatus.sessionState == SESSIONSTATE_LOGIN) {
      String targetURI;
      if (formData != null)       targetURI=formData.getActionURI();
 else       if (preferredLink != null)       targetURI=preferredLink;
 else       if (preferredRedirection != null)       targetURI=preferredRedirection;
 else       targetURI=contentLink;
      cache.deleteData(currentURI);
      if (targetURI == null || targetURI.length() == 0) {
        activities.completeEventSequence(globalSequenceEvent);
        activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,null,sessionCredential.getSequenceKey(),""NEXTLINKNOTFOUND"",""Could not find a usable link to the next page: "" + fetchStatus.contextMessage,null);
        fetchStatus.sessionState=SESSIONSTATE_NORMAL;
        currentURI=documentIdentifier;
      }
 else {
        currentURI=targetURI;
      }
      continue;
    }
 else     if (fetchStatus.resultSignal != RESULT_VERSION_NEEDED && fetchStatus.sessionState == SESSIONSTATE_LOGIN) {
      activities.completeEventSequence(globalSequenceEvent);
      activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,null,sessionCredential.getSequenceKey(),""LINKTARGETUNSUITABLE"",""Page was unsuitable for a login sequence because: "" + fetchStatus.contextMessage,null);
      fetchStatus.sessionState=SESSIONSTATE_NORMAL;
    }
  }
}
 else if (robotsStatus == RESULTSTATUS_FALSE) {
  activityResultCode=""-11"";
  fetchStatus.contextMessage=""robots.txt says so"";
  fetchStatus.resultSignal=RESULT_NO_DOCUMENT;
}
 else {
  activityResultCode=null;
  fetchStatus.resultSignal=RESULT_RETRY_DOCUMENT;
  fetchStatus.contextMessage=""robots prerequisite already in progress"";
}
",0,0,16,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
549,if (((bits >> 52) != 1) && (++exp >= 0x7FF)),"if (((bits >> 52) != 1) && (++exp >= 0x7FF)) return Double.POSITIVE_INFINITY;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
550,if ((++count << EMPTINESS_LEVEL) > entries.length) {,"if ((++count << EMPTINESS_LEVEL) > entries.length) {
  resize(entries.length << 1);
}
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
551,while ( !g.containsTuple(f=(Node)focus.tuples().next()) ) {,"while (!g.containsTuple(f=(Node)focus.tuples().next())) {
  f=null;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
552,"while ( message != null && ( endCdata = message.indexOf( ""]]>"" ) ) > -1 )","while (message != null && (endCdata=message.indexOf(""]]>"")) > -1) {
  message=message.substring(0,endCdata) + ""] ] >"" + message.substring(endCdata + 3,message.length());
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
553,if ( currentState != STATE_ERROR && ( matcher = fileRegexp.matcher( line ) ).find() ),"if (currentState != STATE_ERROR && (matcher=fileRegexp.matcher(line)).find()) {
  String location=matcher.group(1);
  if (location.startsWith(repo)) {
    location=location.substring(repo.length() + 1);
  }
  ScmFileStatus status=PerforceVerbMapper.toStatus(matcher.group(2));
  if (status != null) {
    checkedout.add(new ScmFile(location,status));
  }
  return;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
554,for ( Node successor; ( successor = currentTail.next.get() ) != null; ),"for (Node successor; (successor=currentTail.next.get()) != null; ) {
  currentTail=successor;
  if (command.equals(currentTail.command)) {
    return false;
  }
}
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
555,if ( largeCache == null || ( buffer = largeCache.get() ) == null || buffer.length < minLength ),"if (largeCache == null || (buffer=largeCache.get()) == null || buffer.length < minLength) {
  buffer=new byte[minLength];
  largeCache=new SoftReference<>(buffer);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
556,if (!get(lower++).equals(other.get(otherOffset++))) {,"if (!get(lower++).equals(other.get(otherOffset++))) {
  return false;
}
",0,3,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
557,while (iterations == -1 || iterations-- > 0) {,"while (iterations == -1 || iterations-- > 0) {
  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(samplePath),StandardCharsets.UTF_8));
  String line;
  while ((line=reader.readLine()) != null) {
    kafkaProducer.send(new ProducerRecord<String,String>(topic,line));
    Thread.sleep(delay);
  }
  reader.close();
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
558,"while (((msg = decoder.decode((ENCODED) in, state)) != null)) {","while (((msg=decoder.decode((ENCODED)in,state)) != null)) {
  super.messageReceived(session,msg,controller);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
"
559,"if ((_initParameterMap = (Map<String, String>)_servletContext.getAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE)) == null)","if ((_initParameterMap=(Map<String,String>)_servletContext.getAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE)) == null) {
  _initParameterMap=new ServletInitParameterMap(_servletContext);
  _servletContext.setAttribute(_INIT_PARAMETER_MAP_ATTRIBUTE,_initParameterMap);
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
560,if ((property.isMethodExpression() || property.isMethodBinding()) && (sig = property.getMethodBindingSignature()) != null),"if ((property.isMethodExpression() || property.isMethodBinding()) && (sig=property.getMethodBindingSignature()) != null) {
  stream.writeCharacters(""\n      "");
  stream.writeStartElement(""method-signature"");
  stream.writeCharacters(sig.getReturnType());
  stream.writeCharacters("" myMethod("");
  String[] params=sig.getParameterTypes();
  for (int i=0; i < params.length; i++) {
    if (i > 0)     stream.writeCharacters("", "");
    stream.writeCharacters(params[i]);
  }
  stream.writeCharacters("")"");
  stream.writeEndElement();
}
 else {
  String propertyClass=property.getPropertyClass();
  stream.writeCharacters(""\n      "");
  stream.writeStartElement(""type"");
  stream.writeCharacters(propertyClass);
  stream.writeEndElement();
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
561,"if (home != null && (jHome = new File(home, ""jre/lib"")).isDirectory()) {","if (home != null && (jHome=new File(home,""jre/lib"")).isDirectory()) {
  String[] jars=jHome.list(new FilenameFilter(){
    public @Override boolean accept(    File dir,    String name){
      String n=name.toLowerCase(Locale.US);
      return n.endsWith("".jar"");
    }
  }
);
  StringBuilder sb=new StringBuilder();
  for (  String jar : jars) {
    if (sb.length() > 0) {
      sb.append(File.pathSeparator);
    }
    sb.append(""${"" + NBJDK_HOME + ""}/jre/lib/"").append(jar);
  }
  bootcp=sb.toString().replace('/',File.separatorChar);
}
 else {
  bootcp=""${"" + NBJDK_HOME + ""}/jre/lib/rt.jar"".replace('/',File.separatorChar);
}
",0,11,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
562,"if ((offset = findEndOfElement(doc, ""struts-config"")) == -1){","if ((offset=findEndOfElement(doc,""struts-config"")) == -1) {
  offset=doc.getLength();
  appendText=new StringBuffer();
  appendText.append(""<struts-config>"");
  appendText.append(END_LINE);
  if (section != null && section.length() > 0) {
    appendText.append(""<"" + section + "">"");
    appendText.append(END_LINE);
    appendText.append(sBean);
    appendText.append(END_LINE);
    appendText.append(""</"" + section + "">"");
  }
 else {
    appendText.append(sBean);
  }
  appendText.append(END_LINE);
  appendText.append(""</struts-config>"");
  appendText.append(END_LINE);
  possition=writeString(doc,appendText.toString(),offset);
}
 else {
  if (section != null && section.length() > 0) {
    int offsetSection;
    if ((offsetSection=findEndOfElement(doc,section)) == -1) {
      appendText.append(""<"" + section + "">"");
      appendText.append(END_LINE);
      appendText.append(sBean);
      appendText.append(END_LINE);
      appendText.append(""</"" + section + "">"");
    }
 else {
      appendText.append(sBean);
      offset=offsetSection;
    }
  }
 else   appendText.append(sBean);
  token=sup.getTokenChain(offset,offset + 1);
  if (token != null)   token=token.getPrevious();
  while (token != null && !(token.getTokenID().getNumericID() == XML_ELEMENT && token.getImage().equals("">"")))   token=token.getPrevious();
  if (token != null)   offset=token.getOffset();
  possition=writeString(doc,appendText.toString(),offset);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
563,"while (text.regionMatches(0, textToReplace, 0, ++common));","while (text.regionMatches(0,textToReplace,0,++common)) ;
",0,6,7,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
564,while(--count >= 0) list.add(getItem(local.getInt()));,"while (--count >= 0) list.add(getItem(local.getInt()));
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
565,if (file.isDirectory() && (children=file.list())!= null && children.length > 0) {,"if (file.isDirectory() && (children=file.list()) != null && children.length > 0) {
  final DocumentIndexCache cache=ClusteredIndexables.createDocumentIndexCache();
  final DocumentIndex2.Transactional index=(DocumentIndex2.Transactional)IndexManager.createTransactionalDocumentIndex(file,cache);
  li=Pair.<DocumentIndex2.Transactional,DocumentIndexCache>of(index,cache);
  indexes.put(root,li);
}
",0,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
566,"while ((i2 = classNames.indexOf(',', i1)) > 0 || i1 < classNames.length()) {","while ((i2=classNames.indexOf(',',i1)) > 0 || i1 < classNames.length()) {
  if (i2 < 0)   i2=classNames.length();
  String className=classNames.substring(i1,i2).trim();
  if (className.endsWith("".class"")) {
    className=className.substring(0,className.length() - "".class"".length());
  }
  TypeElement type=processingEnv.getElementUtils().getTypeElement(className);
  typeMirrors.add(type.asType());
  i1=i2 + 1;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
567,while (hs.getStartOffset() <= curPos && (hasElements = hs.moveNext()));,"while (hs.getStartOffset() <= curPos && (hasElements=hs.moveNext())) ;
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
568,while ((ttype = input.LT(1)) != null && ttype.getType() != Token.EOF && !set.member(ttype.getType())) {,"while ((ttype=input.LT(1)) != null && ttype.getType() != Token.EOF && !set.member(ttype.getType())) {
  input.consume();
  skipped.add(ttype);
}
",0,4,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
569,if ((caseInsensitive ? childName = childName.toLowerCase(Locale.ENGLISH) : childName).equals(nodeName) && count++ == index) {,"if ((caseInsensitive ? childName=childName.toLowerCase(Locale.ENGLISH) : childName).equals(nodeName) && count++ == index) {
  foundLocal=child;
  break;
}
",0,0,10,,"SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
570,if(lightId.equals(getElementID(child)) && ++count == index) {,"if (lightId.equals(getElementID(child)) && ++count == index) {
  foundLocal=child;
  break;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
571,"if (input.startsWith(FILE_INDEX) || ((end = input.indexOf(""\n""+FILE_INDEX))) >= 0) {","if (input.startsWith(FILE_INDEX) || ((end=input.indexOf(""\n"" + FILE_INDEX))) >= 0) {
  isAtEndOfPatch=true;
}
 else {
  end=input.lastIndexOf('\n');
  if (end >= 0)   end++;
}
",0,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
572,while ((c = (char) (r = patchSource.read())) != '\n' && r != -1 && r != '\r') {,"while ((c=(char)(r=patchSource.read())) != '\n' && r != -1 && r != '\r') {
  name.append(c);
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
573,while ((c = (char) (r = patchSource.read())) != '\n' && c != '\r' && c != '\t' && r != -1) {,"while ((c=(char)(r=patchSource.read())) != '\n' && c != '\r' && c != '\t' && r != -1) {
  name.append(c);
}
",0,0,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
574,if (row >= EXCLUDE_I && ++row >= EXCLUDE_O) row++;,"if (row >= EXCLUDE_I && ++row >= EXCLUDE_O) row++;
",0,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
575,if (++idx0 >= testFiles.length) return null;,"if (++idx0 >= testFiles.length) return null;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
576,while (((token = seq.token()) != null && token.id() == DockerfileTokenId.WHITESPACE)) {,"while (((token=seq.token()) != null && token.id() == DockerfileTokenId.WHITESPACE)) {
  if (seq.index() == tokenEnd) {
    int offset=lineStart - 1;
    if (offset < 0) {
      return Pair.of(lineStart,seq);
    }
    lineStart=LineDocumentUtils.getLineStart(doc,offset);
    return findImportantLine(seq,doc,lineStart,newTokenEnd);
  }
 else {
    if (!seq.moveNext()) {
      break;
    }
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, WhileStatement-expression, ),
"
577,"while ((parent = parent.getParentFile()) != null && !parent.getName().equals(""content"")) {","while ((parent=parent.getParentFile()) != null && !parent.getName().equals(""content"")) {
  sb.append(""../"");
}
",0,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
578,"while ((c = nextChar()) != EOF && isIdentifierPart(c, currentState));","while ((c=nextChar()) != EOF && isIdentifierPart(c,currentState)) ;
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
579,} else if ((selectedFileObject = org.openide.util.Utilities.,"if ((selectedFileObject=org.openide.util.Utilities.actionsGlobalContext().lookup(FileObject.class)) != null) {
  BookmarkManager lockedBookmarkManager=BookmarkManager.getLocked();
  try {
    ProjectBookmarks projectBookmarks=lockedBookmarkManager.getProjectBookmarks(selectedFileObject);
    Node bNode=nodeTree.findFirstBookmarkNode(projectBookmarks,selectedFileObject);
    if (bNode != null) {
      initialSelectionDone=true;
      selectedFileObject=null;
      try {
        explorerManager.setSelectedNodes(new Node[]{bNode});
      }
 catch (      PropertyVetoException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
  finally {
    lockedBookmarkManager.unlock();
  }
}
",0,0,2,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
580,if ((contentPane.getLayout() instanceof BorderLayout) && gotoAction != null &&,"if ((contentPane.getLayout() instanceof BorderLayout) && gotoAction != null && (ks=(KeyStroke)gotoAction.getValue(Action.ACCELERATOR_KEY)) != null) {
  BorderLayout layout=(BorderLayout)contentPane.getLayout();
  Component buttonBar=layout.getLayoutComponent(BorderLayout.SOUTH);
  contentPane.remove(buttonBar);
  JPanel southPanel=new JPanel();
  southPanel.setLayout(new GridBagLayout());
  JLabel keyChooserLabel=new JLabel();
  String ksText=KeyEvent.getKeyModifiersText(ks.getModifiers()) + ""+"" + KeyEvent.getKeyText(ks.getKeyCode());
  keyChooserLabel.setText(NbBundle.getMessage(GotoLineOrBookmarkPanel.class,""CTL_gotoDialogBookmarkKeyChooserLabel"",ksText));
  InputMap inputMap=rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  inputMap.put(ks,""openKeyChooser"");
  rootPane.getActionMap().put(""openKeyChooser"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      BookmarkKeyChooser.get().show(dialog,new Runnable(){
        @Override public void run(){
          BookmarkInfo bookmark=BookmarkKeyChooser.get().getandClearResult();
          if (bookmark != null) {
            disposeDialog();
            BookmarkUtils.postOpenEditor(bookmark);
          }
        }
      }
);
    }
  }
);
  GridBagConstraints constraints;
  constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.weightx=1.0;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.anchor=GridBagConstraints.SOUTHWEST;
  constraints.insets=new Insets(0,5,0,0);
  southPanel.add(keyChooserLabel,constraints);
  constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.weightx=1.0;
  constraints.gridx=GridBagConstraints.RELATIVE;
  constraints.gridy=0;
  constraints.anchor=GridBagConstraints.EAST;
  southPanel.add(buttonBar,constraints);
  contentPane.add(southPanel,BorderLayout.SOUTH);
  Font font=keyChooserLabel.getFont().deriveFont(Math.max(1,Math.round(0.8f * keyChooserLabel.getFont().getSize())));
  keyChooserLabel.setFont(font);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
581,while (t != null && t.getPrevious() != null && --maxDocumentTokens > 0) {,"while (t != null && t.getPrevious() != null && --maxDocumentTokens > 0) {
  t=t.getPrevious();
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
582,if (high >= 0 && (mark = getMark(high)).rawOffset() == rawOffset && (pos = mark.get()) != null) {,"if (high >= 0 && (mark=getMark(high)).rawOffset() == rawOffset && (pos=mark.get()) != null) {
  return pos;
}
",0,2,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
583,if (low < markCount && (mark = getMark(low)).rawOffset() == rawOffset && (pos = mark.get()) != null) {,"if (low < markCount && (mark=getMark(low)).rawOffset() == rawOffset && (pos=mark.get()) != null) {
  return pos;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
584,if ((line = annotations.getNextLineWithAnnotation(line)) <= endLine && line != (-1)) {,"if ((line=annotations.getNextLineWithAnnotation(line)) <= endLine && line != (-1)) {
  if (last == line) {
    unchagedLoops++;
    if (unchagedLoops >= 100) {
      LOG.log(Level.WARNING,""Please add the following info to https://netbeans.org/bugzilla/show_bug.cgi?id=188843 : Possible infinite loop in getMainMarkForBlockAnnotations, debug data: {0}, unchaged loops: {1}"",new Object[]{annotations.toString(),unchagedLoops});
      stop=true;
      return false;
    }
  }
 else {
    if (line < last) {
      LOG.log(Level.WARNING,""Please add the following info to https://netbeans.org/bugzilla/show_bug.cgi?id=188843 : line < last: {0} < {1}"",new Object[]{line,last});
      stop=true;
      return false;
    }
    last=line;
    unchagedLoops=0;
  }
  AnnotationDesc desc=annotations.getActiveAnnotation(line);
  if (desc != null) {
    remaining.add(desc);
  }
  if (annotations.getNumberOfAnnotations(line) > 1) {
    AnnotationDesc[] descriptions=annotations.getPassiveAnnotationsForLine(line);
    if (descriptions != null) {
      remaining.addAll(Arrays.asList(descriptions));
    }
  }
  line++;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
585,} else if (   lastGetLineAnnotationsLine + 1 == line && lastGetLineAnnotationsIdx + 1 < lineAnnotationsArray.size(),"if (lastGetLineAnnotationsLine + 1 == line && lastGetLineAnnotationsIdx + 1 < lineAnnotationsArray.size() && (annos=(LineAnnotations)lineAnnotationsArray.get(lastGetLineAnnotationsIdx + 1)).getLine() == line) {
  lastGetLineAnnotationsIdx++;
  lastGetLineAnnotationsLine=annos.getLine();
  lastGetLineAnnotationsResult=annos;
  return annos;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
586,while( l-- > 0 ) if( !s1[l].equals( s2[l] ) ) return false;,"while (l-- > 0) if (!s1[l].equals(s2[l])) return false;
",0,0,8,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, WhileStatement-body, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, WhileStatement-body, ),
"
587,"while (((rel = compareBlock(startPos, endPos)) & MarkBlock.OVERLAP) != 0) {","while (((rel=compareBlock(startPos,endPos)) & MarkBlock.OVERLAP) != 0) {
  if ((rel & MarkBlock.THIS_EMPTY) != 0) {
    checkedRemove(currentBlock);
  }
 else {
switch (currentBlock.shrink(startPos,endPos)) {
case MarkBlock.INNER:
      int endMarkPos=currentBlock.endMark.getOffset();
    currentBlock.endMark.move(doc,startPos);
  currentBlock.addChain(createBlock(endPos,endMarkPos));
return;
case MarkBlock.INSIDE_BEGIN:
case MarkBlock.OVERLAP_BEGIN:
currentBlock.startMark.move(doc,endPos);
return;
case MarkBlock.INSIDE_END:
case MarkBlock.OVERLAP_END:
currentBlock.endMark.move(doc,startPos);
return;
default :
checkedRemove(currentBlock);
break;
}
}
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
588,if ((((parent = getParent()) instanceof GapDocumentView),"if ((((parent=getParent()) instanceof GapDocumentView) && ((GapDocumentView)parent).isPendingUpdate()) || isEstimatedSpan()) {
  ret=new Rectangle(getBaseX(startX),startY,1,eui.getLineHeight());
}
 else {
  if (loggable) {
    ts1=System.currentTimeMillis();
  }
  int targetMarkerIdx=(targetOffset - startOffset) / MARKERS_DIST;
  int markerIdx=Math.min(targetMarkerIdx,markersLength - 1);
  int markerX=markers[markerIdx];
  int markerOffset=startOffset + markerIdx * MARKERS_DIST;
  ret=new Rectangle(getBaseX(markerX),startY,1,eui.getLineHeight());
  try {
    ModelToViewDG g=getModelToViewDG();
    g.setRectangle(ret);
    if (markers.length <= targetMarkerIdx) {
      int[] arr=new int[targetMarkerIdx + 1];
      System.arraycopy(markers,0,arr,0,markers.length);
      markers=arr;
    }
    for (; markerIdx < targetMarkerIdx; markerIdx++) {
      DrawEngine.getDrawEngine().draw(this,g,eui,markerOffset,markerOffset + MARKERS_DIST,markerX,startY,markerOffset + MARKERS_DIST);
      markerOffset+=MARKERS_DIST;
      markerX=ret.x;
      markers[markerIdx + 1]=markerX;
    }
    if (targetMarkerIdx >= markersLength) {
      markersLength=targetMarkerIdx + 1;
    }
    DrawEngine.getDrawEngine().draw(this,g,eui,markerOffset,endOffset,getBaseX(markerX + startX),startY,targetOffset);
    g.setRectangle(null);
  }
 catch (  BadLocationException ble) {
    LOG.log(Level.INFO,""Model-to-view translation failed"",ble);
    ret=new Rectangle(getBaseX(startX),startY,1,eui.getLineHeight());
  }
  if (loggable) {
    ts2=System.currentTimeMillis();
  }
}
",0,0,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
589,if (action != null && (actionName = (String) action.getValue(Action.NAME)) != null) {,"if (action != null && (actionName=(String)action.getValue(Action.NAME)) != null) {
  name2Action.put(actionName,action);
  if (LOG.isLoggable(Level.FINER)) {
    LOG.finer(""Mime-type: \"""" + mimeType + ""\"", registerAction(\""""+ actionName+ ""\"", ""+ action+ "")\n"");
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
590,while (++rStartIndex < rEndIndex && (pView = get(rStartIndex)).isChildrenValid()) {,"while (++rStartIndex < rEndIndex && (pView=get(rStartIndex)).isChildrenValid()) {
  tlCache.activate(pView);
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
591,while (rEndIndex > rStartIndex && (pView = get(rEndIndex - 1)).isChildrenValid()) {,"while (rEndIndex > rStartIndex && (pView=get(rEndIndex - 1)).isChildrenValid()) {
  tlCache.activate(pView);
  rEndIndex--;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
592,if (replaceBar.isVisible() && (c = getActualTextComponent()) != null && c.isEditable()) {,"if (replaceBar.isVisible() && (c=getActualTextComponent()) != null && c.isEditable()) {
  replaceBar.gainFocus(true);
}
 else {
  this.gainFocus(true);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
593,while ((item = (Item<?>) queue.poll()) != null) {,"while ((item=(Item<?>)queue.poll()) != null) {
  int h=item.hashCode;
  int i=h & (table.length - 1);
  while (true) {
    Item<E> item2=table[i];
    if (item == item2) {
      clearAtIndex(i);
      break;
    }
    if (item2 == null) {
      break;
    }
    i=nextIndex(i,table.length);
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
594,"if (!e.equals(testE = simpleWeakSet.getOrAdd(e, null))) {","if (!e.equals(testE=simpleWeakSet.getOrAdd(e,null))) {
  throw new IllegalStateException(""e="" + e + "" not-equal to testE=""+ testE);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
595,while (++i <= max && text.charAt(i) != first);,"while (++i <= max && text.charAt(i) != first) ;
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
596,if (indexOrSize == size() || isElementFlyweight(elem = get(indexOrSize))) {,"if (indexOrSize == size() || isElementFlyweight(elem=get(indexOrSize))) {
  offset=0;
  while (--indexOrSize >= 0) {
    elem=get(indexOrSize);
    offset+=elementLength(elem);
    if (!isElementFlyweight(elem)) {
      offset+=raw2RelOffset(elementRawOffset(elem));
      break;
    }
  }
}
 else {
  offset=raw2RelOffset(elementRawOffset(elem));
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
597,while ((read = ins.read()) != (-1) && numBytesRead < MAX_NUM_BYTES_TO_READ) {,"while ((read=ins.read()) != (-1) && numBytesRead < MAX_NUM_BYTES_TO_READ) {
  baos.write(read);
  numBytesRead++;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
598,} else if (repository.equals(file) && (parentFile = file.getParentFile()) != null,"if (repository.equals(file) && (parentFile=file.getParentFile()) != null && (parentRepository=git.getRepositoryRoot(parentFile)) != null) {
  addUnderRoot(rootFiles,parentRepository,file);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
599,"if (LexerUtils.equals(openTag.name(), nodeName, caseInsensitive, false) && count++ == index) {","if (LexerUtils.equals(openTag.name(),nodeName,caseInsensitive,false) && count++ == index) {
  foundLocal=openTag;
  break;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
600,if (joined && (joinInfo != null) && (jtl = joinInfo.joinTokenList) != null) {,"if (joined && (joinInfo != null) && (jtl=joinInfo.joinTokenList) != null) {
  @SuppressWarnings(""unchecked"") JoinTokenList<ET> joinTokenList=(JoinTokenList<ET>)jtl;
  tse=new TokenSequence<ET>(joinTokenList);
  jtl.setActiveTokenListIndex(joinInfo.tokenListIndex());
  tse.moveIndex(joinTokenList.activeStartJoinIndex());
}
 else {
  tse=new TokenSequence<ET>(etl);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
601,while (--i >= prepStartIndex && postCount > 0 && rawLengthShifts[i] == tokenEndRawLengthShift) {,"while (--i >= prepStartIndex && postCount > 0 && rawLengthShifts[i] == tokenEndRawLengthShift) {
  postCount--;
}
",0,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
602,if (!relex && (lookahead = tokenList.lookahead(matchIndex - 1)) > 1 && matchIndex < tokenCount) {,"if (!relex && (lookahead=tokenList.lookahead(matchIndex - 1)) > 1 && matchIndex < tokenCount) {
  relex=(lookahead > tokenList.tokenOrEmbeddingDirect(matchIndex).token().length());
}
",0,1,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
603,if ((c = input.read()) == '.',"if ((c=input.read()) == '.' && (c=input.read()) == 'e' && (c=input.read()) == '.' && (c=input.read()) == 's' && (c=input.read()) == '.' && (c=input.read()) == 't' && (c=input.read()) == '.') {
  return finishTillNewline(TokenDumpTokenId.TEST_NAME);
}
",0,3,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
604,if (memberElm == null || !(mods = memberElm.getModifiers()).contains(Modifier.PUBLIC)) {,"if (memberElm == null || !(mods=memberElm.getModifiers()).contains(Modifier.PUBLIC)) {
  continue;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
605,"} else if ((pos = message.indexOf("": "" + HttpURLConnection.HTTP_UNAUTHORIZED + "" "")) != -1) {","if ((pos=message.indexOf("": "" + HttpURLConnection.HTTP_UNAUTHORIZED + "" "")) != -1) {
  String repositoryUrl=message.substring(0,pos);
  throw new GitException.AuthorizationException(repositoryUrl,message,e);
}
 else if (message.contains(""not authorized"")) {
  throw new GitException.AuthorizationException(uri.toString(),message,e);
}
 else if ((pos=message.toLowerCase().indexOf("": auth cancel"")) != -1) {
  String repositoryUrl=message.substring(0,pos);
  throw new GitException.AuthorizationException(repositoryUrl,message,e);
}
 else if (e.getCause() instanceof JSchException) {
  if (message.contains(""timeout:"") || message.contains(""ProxyHTTP"") || message.contains(""ProxySOCKS4"")|| message.contains(""ProxySOCKS5"")) {
    throw new GitException(message,e);
  }
 else {
    throw new GitException.AuthorizationException(uri.toString(),message,e);
  }
}
 else {
  throw new GitException(message,e);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
606,if ((length <= index) || (urlString.charAt(index++) != ':')) {,"if ((length <= index) || (urlString.charAt(index++) != ':')) {
  return false;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
607,if ((((     cookie = dataObject.getCookie(cookieClass = EditorCookie.Observable.class)) != null,"if ((((cookie=dataObject.getCookie(cookieClass=EditorCookie.Observable.class)) != null || (cookie=dataObject.getCookie(cookieClass=EditorCookie.class)) != null)) || (cookie=dataObject.getCookie(cookieClass=OpenCookie.class)) != null || (cookie=dataObject.getCookie(cookieClass=EditCookie.class)) != null || (cookie=dataObject.getCookie(cookieClass=ViewCookie.class)) != null) {
  return openByCookie(cookie,cookieClass);
}
",0,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
608,if ((pos = line.indexOf(HG_WARNING_PERFORMANCE_FILES_OVER)) > 0 && line.contains(HG_WARNING_PERFORMANCE_CAUSE_PROBLEMS)) {,"if ((pos=line.indexOf(HG_WARNING_PERFORMANCE_FILES_OVER)) > 0 && line.contains(HG_WARNING_PERFORMANCE_CAUSE_PROBLEMS)) {
  fileList.add(line.substring(0,pos));
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
609,"if ((credentials = handleAuthenticationError(list, repository, rawUrl, credentials == null ? """" : credentials.getUserName(), credentialsSupport, hgCommandType, showLoginWindow)) != null) {","if ((credentials=handleAuthenticationError(list,repository,rawUrl,credentials == null ? """" : credentials.getUserName(),credentialsSupport,hgCommandType,showLoginWindow)) != null) {
  retry=true;
  if (!supp.isKenai(rawUrl) && credentials != null) {
    try {
      KeyringSupport.save(HgUtils.PREFIX_VERSIONING_MERCURIAL_URL,new HgURL(remoteUrl.toHgCommandUrlString(),credentials.getUserName(),null).toHgCommandStringWithNoPassword(),credentials.getPassword().clone(),null);
    }
 catch (    URISyntaxException ex) {
      Mercurial.LOG.log(Level.SEVERE,null,ex);
    }
  }
}
 else {
  handleError(command,list,NbBundle.getMessage(HgCommand.class,""MSG_COMMAND_ABORTED""),logger);
}
",0,0,14,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
610,if (request != null && (sc = request.cache)!= null && (src=sc.getSource())!=null) {,"if (request != null && (sc=request.cache) != null && (src=sc.getSource()) != null) {
  cancelParser(parser,cancelStrategy.callDeprecatedParserCancel(),cancelReason,SourceAccessor.getINSTANCE().getSourceModificationEvent(src));
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
611,} else if (path != null && (dotMatcher = Pattern.compile(SELECTOR_DOT_REGEX).matcher(path)).find()) {,"if (path != null && (dotMatcher=Pattern.compile(SELECTOR_DOT_REGEX).matcher(path)).find()) {
  int firstDotPosition=dotMatcher.start();
  setPathWithDefinedResourcePosition(path,firstDotPosition);
}
 else {
  setSelectors(new String[]{});
  setSuffix(null);
  setExtension(null);
  setResourcePath(path);
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
612,"while (new File(location, projectName = projectNamePrefix + ""_"" + num).exists()) {","while (new File(location,projectName=projectNamePrefix + ""_"" + num).exists()) {
  num++;
}
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ClassInstanceCreation-arguments, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ClassInstanceCreation-arguments, MethodInvocation-expression, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ClassInstanceCreation-arguments, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ClassInstanceCreation-arguments, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
613,while((index >= 0) && (line.charAt(index--) == '\\')),"while ((index >= 0) && (line.charAt(index--) == '\\')) slashCount++;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
614,while ((c=this.getNext()) != '\0') {,"while ((c=this.getNext()) != '\0') {
switch (c) {
case '<':
    char c1=this.getNext();
  if (c1 == '!') {
    if (wordContext != WORD_NO_CONTEXT && wordContext != WORD_COMMENT) {
      System.err.println(""Error: found a '<!' sequence within another '<!' sequence"");
      throw new SchemaParseException(""Warning: found a '<!' sequence within another '<!' sequence"");
    }
    if (wordContext != WORD_COMMENT)     wordContext=WORD_CHECK;
  }
 else   if (c1 == '?') {
    wordContext=WORD_PI;
  }
 else {
    curWord.append(c);
    curWord.append(c1);
  }
break;
case '>':
switch (wordContext) {
case WORD_NO_CONTEXT:
throw new SchemaParseException(""Error: Found '>' without '<!'"");
case WORD_PI:
String word=curWord.toString();
int len=word.length();
if (word.endsWith(""?"")) {
curWord.delete(0,len);
wordContext=WORD_NO_CONTEXT;
}
 else curWord.append(c);
break;
case WORD_COMMENT:
word=curWord.toString();
len=word.length();
if (word.endsWith(""--"")) {
this.handler.endElement();
curWord.delete(0,len);
wordContext=WORD_NO_CONTEXT;
}
 else curWord.append(c);
break;
case WORD_ENTITY:
wordContext=WORD_NO_CONTEXT;
break;
default :
wordContext=this.processWord(curWord,wordContext);
this.handler.endElement();
wordContext=WORD_NO_CONTEXT;
}
break;
case '(':
if (wordContext == WORD_ELEMENT || wordContext == WORD_ATTLIST) {
wordContext=this.processWord(curWord,wordContext);
this.handler.startGroupElements();
}
 else curWord.append(c);
break;
case ')':
wordContext=this.processWord(curWord,wordContext);
if (wordContext == WORD_ELEMENT || wordContext == WORD_ATTLIST) {
int instance=this.getInstanceValue(this.peekNext());
if (instance != Common.TYPE_1) this.getNext();
this.handler.endGroupElements(instance);
}
 else curWord.append(c);
break;
case '|':
wordContext=this.processWord(curWord,wordContext);
if (wordContext == WORD_ELEMENT || wordContext == WORD_ATTLIST) this.handler.character(c);
 else curWord.append(c);
break;
case '\n':
case '\r':
case '\t':
case ' ':
case ',':
wordContext=this.processWord(curWord,wordContext);
break;
default :
curWord.append(c);
}
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
615,if (!isNaN(extremums[j | 1] = cr.getMaxDouble(true)) |,"if (!isNaN(extremums[j | 1]=cr.getMaxDouble(true)) | !isNaN(extremums[j]=cr.getMinDouble(true))) {
  countOfFiniteRanges++;
}
",0,1,7,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
616,"for (int i = 0; (i = s.indexOf('/', i+1)) > 0; d++) ;","for (int i=0; (i=s.indexOf('/',i + 1)) > 0; d++) ;
",0,0,12,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
617,"if (topmost != null && (newMetadataFolder = new File(topmost, SvnUtils.SVN_ADMIN_DIR)).exists()) {","if (topmost != null && (newMetadataFolder=new File(topmost,SvnUtils.SVN_ADMIN_DIR)).exists()) {
  svnDir=newMetadataFolder;
  newMetadataFormat=new File(svnDir,""pristine"").exists();
  if (!newMetadataFormat) {
    Logger.getLogger(VersionsCache.class.getName()).log(Level.FINE,""No 1.7 metadata in {0}"",svnDir);
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
618,while(!canceled && (i = cli.getInputStream().read()) != -1) {,"while (!canceled && (i=cli.getInputStream().read()) != -1) {
  b.write(i);
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
619,while ((c = sr.read()) != -1 && c != DELIMITER_OPEN_BRACKET && c != DELIMITER_CLOSING_BRACKET);,"while ((c=sr.read()) != -1 && c != DELIMITER_OPEN_BRACKET && c != DELIMITER_CLOSING_BRACKET) ;
",0,1,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
620,while(++modifiedIdx < modifiedLine.length() && modifiedLine.charAt(modifiedIdx) != '$');,"while (++modifiedIdx < modifiedLine.length() && modifiedLine.charAt(modifiedIdx) != '$') ;
",0,1,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
621,if (fi != null && (fi.getStatus() & (FileInformation.STATUS_VERSIONED_DELETEDLOCALLY | FileInformation.STATUS_VERSIONED_REMOVEDLOCALLY)) != 0 && (st = fi.getEntry(null)) != null) {,"if (fi != null && (fi.getStatus() & (FileInformation.STATUS_VERSIONED_DELETEDLOCALLY | FileInformation.STATUS_VERSIONED_REMOVEDLOCALLY)) != 0 && (st=fi.getEntry(null)) != null) {
  if (checkUrl(st,f)) {
    deletedCandidates.put(st.getUrl(),f);
  }
}
",0,0,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
622,if (value instanceof String && (html = empLocations.get(((String) value))) != null) {,"if (value instanceof String && (html=empLocations.get(((String)value))) != null) {
  value=html;
}
",0,0,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
623,if (++currentIndex >= setups.length) currentIndex = 0;,"if (++currentIndex >= setups.length) currentIndex=0;
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
624,if (--currentIndex < 0) currentIndex = setups.length - 1;,"if (--currentIndex < 0) currentIndex=setups.length - 1;
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
625,"if (value instanceof String && (newLinePos = ((String) value).indexOf(""\n"")) > -1) {","if (value instanceof String && (newLinePos=((String)value).indexOf(""\n"")) > -1) {
  value=((String)value).substring(0,newLinePos) + ""..."";
}
",0,0,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
626,while ((read = li.read()) != LexerInput.EOF && read != '\n');,"while ((read=li.read()) != LexerInput.EOF && read != '\n') ;
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
627,if (    (cookie = dataObject.getCookie(cookieClass = OpenCookie.class)) != null,"if ((cookie=dataObject.getCookie(cookieClass=OpenCookie.class)) != null || (cookie=dataObject.getCookie(cookieClass=EditCookie.class)) != null || (cookie=dataObject.getCookie(cookieClass=ViewCookie.class)) != null) {
  return openByCookie(cookie,cookieClass,line);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
628,if (diffs != null && (diffIndex = getDiffIndex(diff)) > -1 && diffIndex < diffs.length - 1) {,"if (diffs != null && (diffIndex=getDiffIndex(diff)) > -1 && diffIndex < diffs.length - 1) {
  diff=diffs[diffIndex + 1];
  Point location=scrollToDifference(diff);
  showTooltipWindow(location,diff);
  textComponent.repaint();
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
629,for (ListIterator<PatchStorage.Patch> it = patches.listIterator(); it.hasNext() && ++i < 6; ) {,"for (ListIterator<PatchStorage.Patch> it=patches.listIterator(); it.hasNext() && ++i < 6; ) {
  PatchStorage.Patch patch=it.next();
  JMenuItem mItem=new JMenuItem();
  Actions.connect(mItem,new UnshelveChangesAction(patch.getPatchName()),false);
  items.add(mItem);
}
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
630,"if (actionProvider != null && (components = actionProvider.getUnshelveActions(ctx, lkp != null)).length > 0) {","if (actionProvider != null && (components=actionProvider.getUnshelveActions(ctx,lkp != null)).length > 0) {
  items.add(null);
  items.addAll(Arrays.asList(components));
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
631,while(curNode != null && null != (curName = curNode.getNodeName()) && !curName.startsWith(curPrefix)) {,"while (curNode != null && null != (curName=curNode.getNodeName()) && !curName.startsWith(curPrefix)) {
  curNode=curNode.getParentNode();
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
632,if ((result = (FileSystem) fs.nextElement()).getDisplayName().indexOf(pattern)>0) {,"if ((result=(FileSystem)fs.nextElement()).getDisplayName().indexOf(pattern) > 0) {
  return result;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
633,while (offset < l && (c = text.charAt(offset)) != '\n' && c != '\r' && Character.isWhitespace(c)) {,"while (offset < l && (c=text.charAt(offset)) != '\n' && c != '\r' && Character.isWhitespace(c)) {
  offset++;
}
",0,1,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
634,"if (lastStatement != null && (lastStatementElement = getElement(info, new TreePath(treePath, lastStatement))) != null) {","if (lastStatement != null && (lastStatementElement=getElement(info,new TreePath(treePath,lastStatement))) != null) {
  type=lastStatementElement.asType();
  if (TypeKind.EXECUTABLE.equals(type.getKind())) {
    ExecutableType eType=(ExecutableType)type;
    type=eType.getReturnType();
    long lsEnd=sourcePositions.getEndPosition(compilationUnit,lastStatement);
    if (lsEnd < 0) {
      lsEnd=this.snippetCode.length() - 1;
    }
 else {
      lsEnd-=codeOffset;
    }
    if (';' != this.snippetCode.charAt((int)lsEnd)) {
      this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsEnd + 1,"";"").toString();
    }
  }
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
635,"while (s > 0 && "";"".equals(statements.get(--s).toString().trim())) {","while (s > 0 && "";"".equals(statements.get(--s).toString().trim())) {
  if (haveOriginalStatements) {
    statements=new ArrayList<>(statements);
    haveOriginalStatements=false;
  }
  statements.remove(s);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
636,if (--from >= 0) continue;,"if (--from >= 0) continue;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
637,"} else if (oldDrag && (targetContainer = getTargetContainer(p, modifiers)) != null && targetContainer.getLayoutSupport() != null) {","if (oldDrag && (targetContainer=getTargetContainer(p,modifiers)) != null && targetContainer.getLayoutSupport() != null) {
  oldMove(p);
  for (int i=0; i < movingBounds.length; i++) {
    int xchange=p.x - convertPoint.x - hotSpot.x;
    if ((resizeType & LayoutSupportManager.RESIZE_LEFT) != 0) {
      movingBounds[i].x=originalBounds[i].x - convertPoint.x + xchange;
      xchange=-xchange;
    }
 else {
      movingBounds[i].x=originalBounds[i].x - convertPoint.x;
    }
    if ((resizeType & (LayoutSupportManager.RESIZE_RIGHT | LayoutSupportManager.RESIZE_LEFT)) != 0) {
      movingBounds[i].width=originalBounds[i].width + xchange;
    }
    int ychange=p.y - convertPoint.y - hotSpot.y;
    if ((resizeType & LayoutSupportManager.RESIZE_UP) != 0) {
      movingBounds[i].y=originalBounds[i].y - convertPoint.y + ychange;
      ychange=-ychange;
    }
 else {
      movingBounds[i].y=originalBounds[i].y - convertPoint.y;
    }
    if ((resizeType & (LayoutSupportManager.RESIZE_DOWN | LayoutSupportManager.RESIZE_UP)) != 0) {
      movingBounds[i].height=originalBounds[i].height + ychange;
    }
  }
}
 else {
  super.move(p,modifiers);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
638,if (JComponent.class.isAssignableFrom(targetComp.getBeanClass()),"if (JComponent.class.isAssignableFrom(targetComp.getBeanClass()) && (prop=targetComp.getBeanProperty(""border"")) != null) return prop;
",0,0,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
639,if (nodes.length != 0 && !initialized && (metacont = getContainer(nodes[0])) != null) {,"if (nodes.length != 0 && !initialized && (metacont=getContainer(nodes[0])) != null) {
  assert !metacont.hasDedicatedLayoutSupport();
  popup.removeAll();
  boolean currentFound=false;
  boolean defaultFound=false;
  JMenuItem mi=new JMenuItem(NbBundle.getMessage(SelectLayoutAction.class,""NAME_FreeDesign""));
  popup.add(mi);
  mi.addActionListener(new LayoutActionListener(null));
  popup.addSeparator();
  if (RADVisualContainer.isFreeDesignContainer(metacont)) {
    setBoldFontForMenuText(mi);
    currentFound=true;
  }
  if (metacont.isLayoutDefaultLayout(javax.swing.GroupLayout.class)) {
    addDefaultToMenuText(mi);
    defaultFound=true;
  }
  for (  PaletteItem layout : getAllLayouts()) {
    mi=new JMenuItem(layout.getNode().getDisplayName());
    HelpCtx.setHelpIDString(mi,SelectLayoutAction.class.getName());
    addSortedMenuItem(popup,mi);
    if (!currentFound && isCurrentLayout(layout,metacont)) {
      setBoldFontForMenuText(mi);
      currentFound=true;
    }
    if (!defaultFound && isDefaultLayout(layout,metacont)) {
      mi.addActionListener(new LayoutActionListener(true));
      addDefaultToMenuText(mi);
      defaultFound=true;
    }
 else {
      mi.addActionListener(new LayoutActionListener(layout));
    }
  }
  if (!defaultFound) {
    mi=new JMenuItem(NbBundle.getMessage(SelectLayoutAction.class,""NAME_DefaultLayout""));
    HelpCtx.setHelpIDString(mi,SelectLayoutAction.class.getName());
    popup.addSeparator();
    popup.add(mi);
    mi.addActionListener(new LayoutActionListener(true));
    if (!currentFound && metacont.hasDefaultLayout()) {
      setBoldFontForMenuText(mi);
    }
  }
  initialized=true;
}
",0,0,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
640,if (!dragLabel.getLastIndex().equals(newLoc = dragLabel.getIndex(evt.getPoint()))) {,"if (!dragLabel.getLastIndex().equals(newLoc=dragLabel.getIndex(evt.getPoint()))) {
  Point converted=SwingUtilities.convertPoint(dragLabel,evt.getPoint(),designLayeredPane);
  GridBagConstraints con=getProxyConstraints();
  con.gridx=newLoc.x;
  con.gridy=newLoc.y;
  parentProxy.layout.setConstraints(this,con);
  dragLabel.resolveOrigin();
  SwingUtilities.convertPoint(designLayeredPane,converted,dragLabel);
  Rectangle r=dragLabel.getBounds();
  Point loc=r.getLocation();
  loc.x+=r.width + 20;
  loc.y+=r.height + 20;
  innerLayoutChanged();
  dragLabel.repaint();
  dragLabel.setLastIndex(newLoc);
}
 else dragLabel.setBounds(evt.getPoint().x,evt.getPoint().y);
",0,5,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
641,if (first || (++propIndex == properties.length)) {,"if (first || (++propIndex == properties.length)) {
  if (first) {
    propSets=comp.getProperties();
    first=false;
  }
  while (++propSetIndex != propSets.length) {
    Node.PropertySet propSet;
    if (isFormPropSet(propSet=propSets[propSetIndex]) && ((properties=propSet.getProperties()).length != 0)) {
      propIndex=0;
      break;
    }
  }
  if (propSetIndex == propSets.length) {
    exhausted=true;
  }
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
642,if (i == 0 || (cs = getCsIfHorizontal2D(crs = components[i - 1])) == null) {,"if (i == 0 || (cs=getCsIfHorizontal2D(crs=components[i - 1])) == null) {
  if (i + 1 >= components.length || (cs=getCsIfHorizontal2D(crs=components[i + 1])) == null) {
    continue;
  }
  axisPosition=1;
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
643,if (!sourcePatches.containsKey(pRoot) && (bin = BinaryForSourceQuery.findBinaryRoots(pRoot).getRoots()).length > 0) {,"if (!sourcePatches.containsKey(pRoot) && (bin=BinaryForSourceQuery.findBinaryRoots(pRoot).getRoots()).length > 0) {
  sourcePatches.put(pRoot,Arrays.asList(bin));
}
",0,3,10,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
644,if (!(nameMatches = text.equals(info.getTreeUtilities().decodeIdentifier(t.text()).toString()))) {,"if (!(nameMatches=text.equals(info.getTreeUtilities().decodeIdentifier(t.text()).toString()))) {
  ExpressionTree expr=info.getTreeUtilities().parseExpression(t.text().toString(),new SourcePositions[1]);
  nameMatches=expr.getKind() == Kind.IDENTIFIER && text.contentEquals(((IdentifierTree)expr).getName());
}
",0,1,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
645,if (bytes[i++] != 'b' || bytes[i++] != 'p' || bytes[i++] != 'l' || bytes[i++] != 'i' ||,"if (bytes[i++] != 'b' || bytes[i++] != 'p' || bytes[i++] != 'l' || bytes[i++] != 'i' || bytes[i++] != 's' || bytes[i++] != 't') {
  return MediaType.OCTET_STREAM;
}
",0,1,12,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
646,if (comp.getClientProperty(NO_IMPORTS) == null && (js = JavaSource.forDocument(((JTextComponent) comp).getDocument())) != null) {,"if (comp.getClientProperty(NO_IMPORTS) == null && (js=JavaSource.forDocument(((JTextComponent)comp).getDocument())) != null) {
  final JTextComponent tc=(JTextComponent)comp;
  final int start=tc.getSelectionStart();
  final int end=tc.getSelectionEnd();
  final Map<String,String> simple2ImportFQN=new HashMap<String,String>();
  final List<int[]> spans=new ArrayList<int[]>();
  Task<CompilationController> w=new Task<CompilationController>(){
    @Override public void run(    final CompilationController parameter) throws Exception {
      parameter.toPhase(JavaSource.Phase.RESOLVED);
      new ErrorAwareTreePathScanner<Void,Void>(){
        private final Set<Element> declaredInCopiedText=new HashSet<>();
        @Override public Void visitIdentifier(        IdentifierTree node,        Void p){
          int s=(int)parameter.getTrees().getSourcePositions().getStartPosition(parameter.getCompilationUnit(),node);
          int e=(int)parameter.getTrees().getSourcePositions().getEndPosition(parameter.getCompilationUnit(),node);
          javax.lang.model.element.Element el=parameter.getTrees().getElement(getCurrentPath());
          if (s >= start && e >= start && e <= end && el != null && !declaredInCopiedText.contains(el)) {
            if (el.getKind().isClass() || el.getKind().isInterface()) {
              TreePath parentPath=getCurrentPath().getParentPath();
              if (parentPath == null || parentPath.getLeaf().getKind() != Tree.Kind.NEW_CLASS || ((NewClassTree)parentPath.getLeaf()).getEnclosingExpression() == null || ((NewClassTree)parentPath.getLeaf()).getIdentifier() != node) {
                simple2ImportFQN.put(el.getSimpleName().toString(),((TypeElement)el).getQualifiedName().toString());
                spans.add(new int[]{s - start,e - start});
              }
            }
 else             if ((el.getKind() == ElementKind.ENUM_CONSTANT)) {
              TreePath parentPath=getCurrentPath().getParentPath();
              if (parentPath.getLeaf().getKind() != Tree.Kind.CASE || ((CaseTree)parentPath.getLeaf()).getExpression() != node) {
                simple2ImportFQN.put(el.getSimpleName().toString(),((TypeElement)el.getEnclosingElement()).getQualifiedName().toString() + '.' + el.getSimpleName().toString());
                spans.add(new int[]{s - start,e - start});
              }
            }
 else             if ((el.getKind() == ElementKind.FIELD || el.getKind() == ElementKind.METHOD) && el.getModifiers().contains(Modifier.STATIC) && !el.getModifiers().contains(Modifier.PRIVATE)) {
              simple2ImportFQN.put(el.getSimpleName().toString(),((TypeElement)el.getEnclosingElement()).getQualifiedName().toString() + '.' + el.getSimpleName().toString());
              spans.add(new int[]{s - start,e - start});
            }
          }
          return super.visitIdentifier(node,p);
        }
        @Override public Void visitClass(        ClassTree node,        Void p){
          handleDeclaration();
          return super.visitClass(node,p);
        }
        @Override public Void visitMethod(        MethodTree node,        Void p){
          handleDeclaration();
          return super.visitMethod(node,p);
        }
        private void handleDeclaration(){
          int s=(int)parameter.getTrees().getSourcePositions().getStartPosition(parameter.getCompilationUnit(),getCurrentPath().getLeaf());
          int e=(int)parameter.getTrees().getSourcePositions().getEndPosition(parameter.getCompilationUnit(),getCurrentPath().getLeaf());
          javax.lang.model.element.Element el=parameter.getTrees().getElement(getCurrentPath());
          if (el != null && ((start <= s && s <= end) || (start <= e && e <= end))) {
            simple2ImportFQN.remove(el.getSimpleName().toString());
            declaredInCopiedText.add(el);
          }
        }
        private Tree lastType;
        @Override public Void visitVariable(        VariableTree node,        Void p){
          handleDeclaration();
          if (lastType == node.getType()) {
            scan(node.getInitializer(),null);
            return null;
          }
 else {
            lastType=node.getType();
            return super.visitVariable(node,p);
          }
        }
        boolean ignoreSynthetic;
        @Override public Void scan(        Tree tree,        Void p){
          if (tree == null) {
            return null;
          }
          if (parameter.getTreeUtilities().isSynthetic(new TreePath(getCurrentPath(),tree)) && !ignoreSynthetic) {
            if (tree.getKind() == Tree.Kind.ASSIGNMENT && getCurrentPath().getLeaf().getKind() == Tree.Kind.ANNOTATION) {
              AssignmentTree at=(AssignmentTree)tree;
              if (at.getVariable() != null && at.getVariable().getKind() == Tree.Kind.IDENTIFIER) {
                if (((IdentifierTree)at.getVariable()).getName().contentEquals(""value"")) {
                  ignoreSynthetic=true;
                  super.scan(tree,p);
                  ignoreSynthetic=false;
                  return null;
                }
              }
            }
            return null;
          }
          return super.scan(tree,p);
        }
      }
.scan(parameter.getCompilationUnit(),null);
    }
  }
;
  boolean finished=false;
  if (comp.getClientProperty(RUN_SYNCHRONOUSLY) != null || autoImport) {
    try {
      js.runUserActionTask(w,true);
      finished=true;
    }
 catch (    IOException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
 else {
    finished=runQuickly(js,w);
  }
  if (finished) {
    iw=new ImportsWrapper(NbEditorUtilities.getFileObject(tc.getDocument()),simple2ImportFQN,spans);
  }
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
647,if (!jdts.moveNext() || JavadocTokenId.IDENT != (token = jdts.token()).id()) {,"if (!jdts.moveNext() || JavadocTokenId.IDENT != (token=jdts.token()).id()) {
  return;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
648,while ((panes = cookie.getOpenedPanes()) == null && (System.currentTimeMillis() - start) < OPENING_TIMEOUT) {,"while ((panes=cookie.getOpenedPanes()) == null && (System.currentTimeMillis() - start) < OPENING_TIMEOUT) {
  try {
    Thread.sleep(SLEEP_TIME);
  }
 catch (  InterruptedException e) {
    e.printStackTrace(log);
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
649,if (++i == method.getParameterTypes().length && method.isVarArgs()) {,"if (++i == method.getParameterTypes().length && method.isVarArgs()) {
  vararg=new LinkedList<Object>();
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
650,while ((read = input.read()) != LexerInput.EOF && !input.readText().toString().endsWith(condition)),"while ((read=input.read()) != LexerInput.EOF && !input.readText().toString().endsWith(condition)) ;
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
651,OUTER: while (from != null && !(TreeUtilities.CLASS_TREE_KINDS.contains(k = from.getLeaf().getKind()))) {,"while (from != null && !(TreeUtilities.CLASS_TREE_KINDS.contains(k=from.getLeaf().getKind()))) {
switch (k) {
case METHOD:
    break OUTER;
case LAMBDA_EXPRESSION:
  return lambdaOrInitializer ? from : null;
case BLOCK:
{
  TreePath par=from.getParentPath();
  Tree l=par.getLeaf();
  if (TreeUtilities.CLASS_TREE_KINDS.contains(l.getKind())) {
    return lambdaOrInitializer ? from : null;
  }
}
}
from=from.getParentPath();
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
652,"while (usedArgumentNames.contains(augmentedName = CodeStyleUtils.addPrefixSuffix(proposedName + num, codeStyle.getParameterNamePrefix(), codeStyle.getParameterNameSuffix()))) {","while (usedArgumentNames.contains(augmentedName=CodeStyleUtils.addPrefixSuffix(proposedName + num,codeStyle.getParameterNamePrefix(),codeStyle.getParameterNameSuffix()))) {
  num++;
}
",0,0,11,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
653,while (WHITESPACES.contains(ts.token().id()) && (wasMoveNext = ts.moveNext())) {,"while (WHITESPACES.contains(ts.token().id()) && (wasMoveNext=ts.moveNext())) {
  ;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
654,if (ee.isVarArgs() && (varargPosition = argIndex >= ee.getParameters().size() -1)) {,"if (ee.isVarArgs() && (varargPosition=argIndex >= ee.getParameters().size() - 1)) {
  allowEntireVararg=argIndex == ee.getParameters().size() - 1;
  argIndex=ee.getParameters().size() - 1;
  if (allowEntireVararg) {
    this.argIndex=ee.getParameters().size() - 1;
  }
 else {
    this.argIndex=ee.getParameters().size();
  }
}
 else {
  this.argIndex=argIndex;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
655,if ((c = nextChar()) == 'n',"if ((c=nextChar()) == 'n' && (c=nextChar()) == 'c' && (c=nextChar()) == 'h' && (c=nextChar()) == 'r' && (c=nextChar()) == 'o' && (c=nextChar()) == 'n' && (c=nextChar()) == 'i' && (c=nextChar()) == 'z' && (c=nextChar()) == 'e' && (c=nextChar()) == 'd') return keywordOrIdentifier(JavaTokenId.SYNCHRONIZED);
",0,0,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
656,while ('u' == (ch = input.read())) {};,"while ('u' == (ch=input.read())) {
}
",0,0,5,,"CharacterLiteral(InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
657,if (ClassPath.SOURCE.equals(type) && sourcePath != null &&,"if (ClassPath.SOURCE.equals(type) && sourcePath != null && (root=sourcePath.findOwnerRoot(fo)) != null) {
  this.setLastUsedPlatform(root,jp);
  return sourcePath;
}
 else if (ClassPath.BOOT.equals(type) && (root=getArtefactOwner(fo,bootClassPath,libraryPath,sourcePath)) != null) {
  this.setLastUsedPlatform(root,jp);
  return bootClassPath;
}
 else if (ClassPath.COMPILE.equals(type)) {
  if (libraryPath != null && (root=libraryPath.findOwnerRoot(fo)) != null) {
    this.setLastUsedPlatform(root,jp);
    return libraryPath;
  }
 else   if ((bootClassPath != null && (root=bootClassPath.findOwnerRoot(fo)) != null) || (sourcePath != null && (root=sourcePath.findOwnerRoot(fo)) != null)) {
    return this.getEmptyClassPath();
  }
}
 else if (JavaClassPathConstants.MODULE_BOOT_PATH.equals(type) && JAVA_9.compareTo(jp.getSpecification().getVersion()) <= 0 && (root=getArtefactOwner(fo,bootClassPath,libraryPath,sourcePath)) != null) {
  this.setLastUsedPlatform(root,jp);
  return bootClassPath;
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
658,while (previousSucceeded = seq.movePrevious() && tokenIndexAlreadyAdded < seq.index()) {,"while (previousSucceeded=seq.movePrevious() && tokenIndexAlreadyAdded < seq.index()) {
  ranOnce=true;
switch (seq.token().id()) {
case WHITESPACE:
case LINE_COMMENT:
case JAVADOC_COMMENT:
case BLOCK_COMMENT:
    continue;
case LBRACE:
  return seq.offset() + seq.token().length();
default :
return seq.offset() + seq.token().length();
}
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, Assignment-rightHandSide, WhileStatement-expression, ),
"
659,if (em == null || (clazz = em.getEnclosingElement()) == null || !clazz.getKind().isClass()) {,"if (em == null || (clazz=em.getEnclosingElement()) == null || !clazz.getKind().isClass()) {
  return null;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
660,if (text.charAt(c) == '\\' && ++c < count) {,"if (text.charAt(c) == '\\' && ++c < count) {
  if (EXOTIC_ESCAPE.contains(text.charAt(c))) {
    sb.append('\\');
    sb.append(text.charAt(c));
  }
 else {
    Character remaped=ESCAPE_UNENCODE.get(text.charAt(c));
    if (remaped != null) {
      sb.append(remaped);
    }
 else {
      sb.append(text.charAt(c));
    }
  }
}
 else {
  sb.append(text.charAt(c));
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
661,"if (cont && (file = new File(classFolder, pathNoExt + '.' + FileObjects.SIG)).exists()) {","if (cont && (file=new File(classFolder,pathNoExt + '.' + FileObjects.SIG)).exists()) {
  String fileName=file.getName();
  fileName=fileName.substring(0,fileName.lastIndexOf('.'));
  final String[] patterns=new String[]{fileName + '.',fileName + '$'};
  File parent=file.getParentFile();
  FilenameFilter filter=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      if (!name.endsWith(FileObjects.SIG)) {
        return false;
      }
      for (int i=0; i < patterns.length; i++) {
        if (name.startsWith(patterns[i])) {
          return true;
        }
      }
      return false;
    }
  }
;
  for (  File f : parent.listFiles(filter)) {
    String className=FileObjects.getBinaryName(f,classFolder);
    result.add(ElementHandleAccessor.getInstance().create(ElementKind.CLASS,className));
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
662,if (task instanceof ClasspathInfo.Provider &&,"if (task instanceof ClasspathInfo.Provider && (_tmpInfo=((ClasspathInfo.Provider)task).getClasspathInfo()) != null) {
  if (cpInfo != null && weakCpListener != null) {
    cpInfo.removeChangeListener(weakCpListener);
    this.weakCpListener=null;
  }
  cpInfo=_tmpInfo;
  this.weakCpListener=WeakListeners.change(cpInfoListener,cpInfo);
  cpInfo.addChangeListener(this.weakCpListener);
  root=Optional.ofNullable(cpInfo.getClassPath(PathKind.SOURCE)).map((cp) -> {
    FileObject[] roots=cp.getRoots();
    return roots.length > 0 ? roots[0] : null;
  }
).orElse(null);
}
 else {
  throw new IllegalArgumentException(""No classpath provided by task: "" + task);
}
",0,0,2,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
663,while (--len >= 0) append0(b[off++]);,"while (--len >= 0) append0(b[off++]);
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
664,for (int i = used; --len >= 0; --i),"for (int i=used; --len >= 0; --i) if (chars[i] != s.charAt(len)) return false;
",0,0,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, ForStatement-updaters, ),
"
665,if (startIndex >= s || statements.get(startIndex++) != t) break;,"if (startIndex >= s || statements.get(startIndex++) != t) break;
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
666,if (statements.get(startIndex++) != t) return false;,"if (statements.get(startIndex++) != t) return false;
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
667,while ((found = ts.movePrevious()) && PositionEstimator.nonRelevant.contains(ts.token().id())),"while ((found=ts.movePrevious()) && PositionEstimator.nonRelevant.contains(ts.token().id())) ;
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
668,while ((c = text.charAt(startOffset - 2 - len)) != '\n' && Character.isWhitespace(c)) {,"while ((c=text.charAt(startOffset - 2 - len)) != '\n' && Character.isWhitespace(c)) {
  len++;
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
669,while (idx >= 0 && (position[idx] = (position[idx] + 1) % slots.get(idx).size()) == 0) {,"while (idx >= 0 && (position[idx]=(position[idx] + 1) % slots.get(idx).size()) == 0) {
  idx--;
}
",0,1,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
670,"if (env != null && pruneTree(env.tree, Symtab.instance(context), syms2trees = new HashMap<>())) {","if (env != null && pruneTree(env.tree,Symtab.instance(context),syms2trees=new HashMap<>())) {
  isTreeLoading.set(Boolean.TRUE);
  try {
    dumpSymFile(jti,clazz,syms2trees);
  }
  finally {
    isTreeLoading.remove();
  }
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
671,"if (!added && comparator.compare(newTree, docTree) == TagComparator.EQUAL &&","if (!added && comparator.compare(newTree,docTree) == TagComparator.EQUAL && index == count++) {
  blockTags.add(newTree);
  added=true;
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
672,while( size-- > 0 ) inst.add( null );,"while (size-- > 0) inst.add(null);
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
673,while ((dialog = (javax.swing.JDialog) org.netbeans.jemmy.DialogWaiter.getDialog(chooser)) != null) {,"while ((dialog=(javax.swing.JDialog)org.netbeans.jemmy.DialogWaiter.getDialog(chooser)) != null) {
  closeDialogs(findBottomDialog(dialog,chooser),chooser);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
674,"} else if((p2 = compareMethodSignatures((ExecutableElement)element, (ExecutableElement)member, targetElement, javac)) != null) {","if ((p2=compareMethodSignatures((ExecutableElement)element,(ExecutableElement)member,targetElement,javac)) != null) {
  p=JavaPluginUtils.chainProblems(p,p2);
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
675,"if (tab.editCellAt(tab.getSelectedRow(), tab.getSelectedColumn(), null)","if (tab.editCellAt(tab.getSelectedRow(),tab.getSelectedColumn(),null) && (editorComponent=tab.getEditorComponent()) != null) {
  JTextComponent field;
  if (editorComponent instanceof ChangeParametersButtonPanel) {
    field=(JTextComponent)((JScrollPane)((ChangeParametersButtonPanel)editorComponent).getComp()).getViewport().getView();
  }
 else   if (editorComponent instanceof JScrollPane) {
    field=(JTextComponent)((JScrollPane)editorComponent).getViewport().getView();
  }
 else {
    field=(JTextComponent)editorComponent;
  }
  field.requestFocusInWindow();
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
676,while (path != null && (kind = path.getLeaf().getKind()) != Kind.METHOD && kind != Kind.METHOD_INVOCATION && kind != Kind.NEW_CLASS && kind != Kind.MEMBER_REFERENCE) {,"while (path != null && (kind=path.getLeaf().getKind()) != Kind.METHOD && kind != Kind.METHOD_INVOCATION && kind != Kind.NEW_CLASS && kind != Kind.MEMBER_REFERENCE) {
  path=path.getParentPath();
}
",0,0,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
677,if(path != null && ((kind = path.getLeaf().getKind()) == Kind.METHOD_INVOCATION || kind == Kind.NEW_CLASS || kind == Kind.MEMBER_REFERENCE)) {,"if (path != null && ((kind=path.getLeaf().getKind()) == Kind.METHOD_INVOCATION || kind == Kind.NEW_CLASS || kind == Kind.MEMBER_REFERENCE)) {
  Element element=info.getTrees().getElement(path);
  if (element == null || element.asType().getKind() == TypeKind.ERROR) {
    return null;
  }
  ExecutableElement method=(ExecutableElement)element;
  path=info.getTrees().getPath(method);
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
678,if ((handle = n.getLookup().lookup(TreePathHandle.class)) != null && handle.getFileObject() != null) {,"if ((handle=n.getLookup().lookup(TreePathHandle.class)) != null && handle.getFileObject() != null) {
  return true;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
679,if (actualAnnotationsMask.length <= ai || actualAnnotationsMask[ai++]) continue;,"if (actualAnnotationsMask.length <= ai || actualAnnotationsMask[ai++]) continue;
",0,1,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
680,if (start>=0 && (ln=(int)lm.getLineNumber(start))>=0) {,"if (start >= 0 && (ln=(int)lm.getLineNumber(start)) >= 0) {
  for (  WhiteListQuery.RuleDescription rule : p.getValue().getViolatedRules()) {
    final IndexDocument doc=IndexManager.createDocument(indexable.getRelativePath());
    final String wlID=rule.getWhiteListID();
    if (wlID != null) {
      doc.addPair(WHITE_LIST_ID,wlID,true,true);
    }
    doc.addPair(RULE_NAME,rule.getRuleName(),true,true);
    doc.addPair(RULE_MSG,rule.getRuleDescription(),false,true);
    doc.addPair(LINE,Integer.toString(ln),false,true);
    index.addDocument(doc);
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
681,if ((it2 = dtd.getAttributeDeclarations (tagName).iterator()).hasNext()) {,"if ((it2=dtd.getAttributeDeclarations(tagName).iterator()).hasNext()) {
  sb.append(DOM_NAMED_NODE_MAP).append("" "").append(VARIABLE_ATTRS).append("" = "").append(VARIABLE_ELEMENT).append("".getAttributes();\n"");
  sb.append(""for (int i = 0; i < "").append(VARIABLE_ATTRS).append("".getLength(); i++) {\n"");
  sb.append(""org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);\n"");
  while (it2.hasNext()) {
    TreeAttlistDeclAttributeDef attr=it2.next();
    sb.append(""if (attr.getName().equals (\"""").append(attr.getName()).append(""\"")) { // <"").append(tagName).append("" "").append(attr.getName()).append(""=\""???\"">\n"");
    sb.append(""// attr.getValue();\n}\n"");
  }
  sb.append(""}\n"");
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
682,"if ((destFile = new File (dest, srcFO.getNameExt ())).exists ()) {","if ((destFile=new File(dest,srcFO.getNameExt())).exists()) {
  if (!destFile.delete()) {
    return;
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
683,"while (root != null && !(hgignore = new File(root, "".gitignore"")).isFile()) {","while (root != null && !(hgignore=new File(root,"".gitignore"")).isFile()) {
  path=root.getName() + ""/"" + path;
  root=root.getParentFile();
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
684,while (((length = in.read(buffer)) != -1) && (total < max)) {,"while (((length=in.read(buffer)) != -1) && (total < max)) {
  total+=length;
  out.write(buffer,0,(int)(total < max ? length : length - (total - max)));
  if (total < max) {
    progress.setPercentage(Progress.COMPLETE * total / max);
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
685,for (int nextByte; (nextByte = inputStream.read()) != -1 && len < available; len++) {,"for (int nextByte; (nextByte=inputStream.read()) != -1 && len < available; len++) {
  responseBytes[len]=(byte)nextByte;
}
",0,0,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
686,if (! checkClipping  ||  (clipBounds = gr.getClipBounds ()) == null   ||  bounds.intersects (clipBounds)) {,"if (!checkClipping || (clipBounds=gr.getClipBounds()) == null || bounds.intersects(clipBounds)) {
  if (opaque)   paintBackground();
  paintBorder();
  if (checkClipping) {
    Insets insets=border.getInsets();
    gr.clipRect(bounds.x + insets.left,bounds.y + insets.top,bounds.width - insets.left - insets.right,bounds.height - insets.top - insets.bottom);
  }
  paintWidget();
  paintChildren();
}
",0,0,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
687,while ((configFile = locateConfigFile (m)) != null && ! getStorageFilesForDelete ().contains (configFile)) {,"while ((configFile=locateConfigFile(m)) != null && !getStorageFilesForDelete().contains(configFile)) {
  if (configFile != null && configFile.exists()) {
    if (markForDelete) {
      err.log(Level.FINE,""Control file "" + configFile + "" is marked for delete."");
      getStorageFilesForDelete().add(configFile);
    }
 else {
      err.log(Level.FINE,""Try delete the config File "" + configFile);
      configFile.delete();
      err.log(Level.FINE,""Control file "" + configFile + "" is deleted."");
    }
  }
 else {
    err.log(Level.FINE,""Warning: Config File "" + configFile + "" doesn\'t exist!"");
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
688,"if (p == null && (n = System.getProperty(""test.multiview.toolbar.settings"")) != null) {","if (p == null && (n=System.getProperty(""test.multiview.toolbar.settings"")) != null) {
  p=NbPreferences.root().node(n);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
689,"if (qname.equals(""file"") && (poke = curr.peek()) instanceof MemFile) {","if (qname.equals(""file"") && (poke=curr.peek()) instanceof MemFile) {
  MemFile file=(MemFile)poke;
  if (weight >= file.weight) {
    file.weight=weight;
    file.contents=null;
    if (buf.length() > 0) {
      String text=buf.toString().trim();
      if (text.length() > 0) {
        if (ref != null) {
          throw new SAXParseException(""CDATA plus url= in <file>"",locator);
        }
        file.contents=text.getBytes();
      }
    }
    file.ref=ref;
    if (openURLs()) {
      if (file.ref != null && file.contents == null && file.ref.toExternalForm().startsWith(""jar:file:"")) {
        try {
          URLConnection conn=file.ref.openConnection();
          conn.connect();
          byte[] readBuf=new byte[conn.getContentLength()];
          InputStream is=conn.getInputStream();
          try {
            int pos=0;
            while (pos < readBuf.length) {
              int read=is.read(readBuf,pos,readBuf.length - pos);
              if (read < 1)               throw new IOException(""Premature EOF on "" + file.ref.toExternalForm());
              pos+=read;
            }
            if (is.read() != -1)             throw new IOException(""Delayed EOF on "" + file.ref.toExternalForm());
          }
  finally {
            is.close();
          }
          file.contents=readBuf;
          file.ref=null;
        }
 catch (        IOException ioe) {
          throw new SAXException(ioe);
        }
      }
    }
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
690,"while(wm.findMode(result = base + ""_"" + modeNumber) != null) {","while (wm.findMode(result=base + ""_"" + modeNumber) != null) {
  modeNumber++;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
691,"if(index < 0 && ((index = getIndex(getSystemColorNames(), text)) >= 0)) {","if (index < 0 && ((index=getIndex(getSystemColorNames(),text)) >= 0)) {
  palette=SYSTEM_PALETTE;
  color=systemColors[index];
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
692,if (cnt++ == 0) return 0;,"if (cnt++ == 0) return 0;
",0,0,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
693,if ((clsPth = sb.toString()).indexOf(' ') >= 0) {,"if ((clsPth=sb.toString()).indexOf(' ') >= 0) {
  sb.insert(0,'""');
  sb.append('""');
  classpath=sb.toString();
}
 else {
  classpath=clsPth;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
694,if ((existsNF && !equalsOF) || !(rename = of.renameTo(nf))) {,"if ((existsNF && !equalsOF) || !(rename=of.renameTo(nf))) {
  final String msg=NbBundle.getMessage(LocalFileSystem.class,""EXC_CannotRename"",oldName,getDisplayName(),newName,existsNF,rename);
  if (retry > 10) {
    throw new FSException(msg);
  }
  LOG.log(Level.WARNING,""Rename #{0} failed: {1}"",new Object[]{retry,msg});
  if (rndm == null) {
    rndm=new Random();
  }
  int sleep=rndm.nextInt(100) + 1;
  LOG.log(Level.INFO,""Sleeping for {0} ms"",sleep);
  try {
    Thread.sleep(sleep);
  }
 catch (  InterruptedException ex) {
    LOG.log(Level.FINE,null,ex);
  }
  continue;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
695,"if ((objType = XMLMapAttr.Attr.distinguishObject(unObj)) != XMLMapAttr.Attr.isValid(""SERIALVALUE"")) {","if ((objType=XMLMapAttr.Attr.distinguishObject(unObj)) != XMLMapAttr.Attr.isValid(""SERIALVALUE"")) {
  obj=null;
  putEntry(ALLOWED_ATTR_KEYS[objType],unObj.toString());
}
 else {
  String newValue;
  try {
    newValue=encodeValue(unObj);
  }
 catch (  IOException iox) {
    return;
  }
  obj=null;
  putEntry(ALLOWED_ATTR_KEYS[objType],newValue);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
696,if (cnt % 100 == 0 && acquire-- > 0) {,"if (cnt % 100 == 0 && acquire-- > 0) {
  try {
    lock=fo1.lock();
    tmp=fo1.getOutputStream(lock);
    tmp.write(0);
    fail(""The input stream is open for big files. cnt = "" + cnt);
  }
 catch (  IOException ex) {
  }
 finally {
    lock.releaseLock();
    if (tmp != null) {
      tmp.close();
    }
  }
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
697,while (cnt-- > 0 && finalizeCalled[0] == 0) {,"while (cnt-- > 0 && finalizeCalled[0] == 0) {
  finalizeCalled.wait();
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
698,while (cnt++ < 10 && (snd.isAlive() || que.isAlive())) {,"while (cnt++ < 10 && (snd.isAlive() || que.isAlive())) {
  Thread.sleep(1000);
  err.info(""waiting, cnt: "" + cnt);
}
",0,0,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
699,if ((cookie == null) || ((ret = (Node.Cookie) cookie.get()) == null)) {,"if ((cookie == null) || ((ret=(Node.Cookie)cookie.get()) == null)) {
  ret=factory.createCookie(klass);
  if (ret == null)   return null;
  cookie=new java.lang.ref.WeakReference(ret);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
700,if (--info.counts[S] == 0) {,"if (--info.counts[S] == 0) {
  if (readersNo <= 0) {
    throw new IllegalStateException();
  }
  readersNo--;
  return X;
}
",0,0,3,,"QualifiedName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
701,if (length != idx[0] && s.charAt(idx[0]++) != 'P') {,"if (length != idx[0] && s.charAt(idx[0]++) != 'P') {
  throw new IllegalArgumentException(s);
}
",0,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
702,while (fn.length () > 0 && null == (fo = fsLayer.findResource (fn))) {,"while (fn.length() > 0 && null == (fo=fsLayer.findResource(fn))) {
  int pos=fn.lastIndexOf('/');
  isDelegate=false;
  if (-1 == pos)   break;
  fn=fn.substring(0,pos);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
703,while (((cause = thrown.getCause()) != null) && (cause.getStackTrace().length != 0)){,"while (((cause=thrown.getCause()) != null) && (cause.getStackTrace().length != 0)) {
  thrown=cause;
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
704,while (currentLines++ < maxLines &&,"while (currentLines++ < maxLines && !model.isLeaf(node) && (model.getChildCount(node) > 0) && (model.getChildCount(node) <= maxChildToExpand)) {
  for (int i=0; i < model.getChildCount(node); i++) {
    node=tree.getModel().getChild(node,i);
    if (!model.isLeaf(node)) {
      if (dontExpandToLeafs && hasOnlyLeafs(tree,node)) {
        break;
      }
      newPath=newPath.pathByAddingChild(node);
      break;
    }
  }
}
",0,0,2,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
705,"while (properties.containsKey(PROP_QUERY_NAME_KEY + ""-"" + ++i)) {","while (properties.containsKey(PROP_QUERY_NAME_KEY + ""-"" + ++i)) {
  String name=properties.getProperty(PROP_QUERY_NAME_KEY + ""-"" + i).trim();
  String description=properties.getProperty(PROP_QUERY_DESCR_KEY + ""-"" + i,"""").trim();
  String script=properties.getProperty(PROP_QUERY_SCRIPT_KEY + ""-"" + i,"""").trim();
  if (name != null && script != null)   custom.add(new OQLQueryNode(new OQLSupport.Query(script,name,description)));
}
",0,0,5,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-extendedOperands, MethodInvocation-arguments, WhileStatement-expression, ),
"
706,"while (i-- > 0) b.append("" "");","while (i-- > 0) b.append("" "");
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
707,while ( member == null && (cnt++ < 100 ) ) try {Thread.sleep(100); member = coordinators[0].getCoordinator();}catch ( Exception x){},"while (member == null && (cnt++ < 100)) try {
  Thread.sleep(100);
  member=coordinators[0].getCoordinator();
}
 catch (Exception x) {
}
",0,2,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, WhileStatement-body, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, WhileStatement-body, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, WhileStatement-body, ),
Block(CatchClause-body, TryStatement-catchClauses, WhileStatement-body, ),
"
708,"while ((token = findNext(ts, JsTokenId.IDENTIFIER, false)) != null) {","while ((token=findNext(ts,JsTokenId.IDENTIFIER,false)) != null) {
  String text=token.text().toString();
  if ((NAME_PROPERTY.equals(text) || AS_PROPERTY.equals(text)) && ts.moveNext()) {
    token=LexUtilities.findNextNonWsNonComment(ts);
    if (token.id() == JsTokenId.OPERATOR_COLON && ts.moveNext()) {
      token=LexUtilities.findNextNonWsNonComment(ts);
      if (token.id() == JsTokenId.STRING_BEGIN && ts.moveNext()) {
        token=LexUtilities.findNextNonWsNonComment(ts);
        if (token.id() == JsTokenId.STRING) {
          if (NAME_PROPERTY.equals(text)) {
            name=token.text().toString();
          }
 else {
            alias=token.text().toString();
          }
        }
      }
    }
  }
 else   if ((DATA_PROPERTY.equals(text) || FOREACH_PROPERTY.equals(text)) && ts.moveNext()) {
    token=LexUtilities.findNextNonWsNonComment(ts);
    if (token.id() == JsTokenId.OPERATOR_COLON && ts.moveNext()) {
      LexUtilities.findNextNonWsNonComment(ts);
      int start=ts.offset();
      token=findNext(ts,JsTokenId.OPERATOR_COMMA,true);
      if (token != null) {
        data=snapshot.getText().subSequence(start,ts.offset()).toString().trim();
        forEach=FOREACH_PROPERTY.equals(text);
      }
    }
  }
  if (token == null || token.id() != JsTokenId.OPERATOR_COMMA) {
    findNext(ts,JsTokenId.OPERATOR_COMMA,false);
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
709,while (parenBalancer > 0 && --index > -1) {,"while (parenBalancer > 0 && --index > -1) {
  ch=text.charAt(index);
  if (ch == ')') {
    parenBalancer++;
  }
 else   if (ch == '(') {
    parenBalancer--;
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
710,while ((hasNext = tokenSequence.moveNext()) && !tokenSequence.token().id().name().equals(T_INLINE_HTML)) {,"while ((hasNext=tokenSequence.moveNext()) && !tokenSequence.token().id().name().equals(T_INLINE_HTML)) {
  wasInPhp=true;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
711,while ((pObject = pObject.getParent()).getParent() != null) {,"while ((pObject=pObject.getParent()).getParent() != null) {
  result.insert(0,""."");
  result.insert(0,pObject.getName());
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
712,if (getPreviousFromPath(++blockIndex) instanceof Block) {,"if (getPreviousFromPath(++blockIndex) instanceof Block) {
  block=(Block)getPreviousFromPath(blockIndex);
}
",0,0,3,,"SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
713,while (cnt-- > 0 && counter[0] != expected) {,"while (cnt-- > 0 && counter[0] != expected) {
  Thread.sleep(100);
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
714,if (jsObjects != null && jsIndex < (len = jsObjects.length)) {,"if (jsObjects != null && jsIndex < (len=jsObjects.length)) {
  Object ret=jsObjects[jsIndex];
  jsObjects[jsIndex]=null;
  jsIndex++;
  return ret;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
715,if (c.getResponseCode() / 100 == 2 && (in = c.getInputStream()).read() != (-1)),"if (c.getResponseCode() / 100 == 2 && (in=c.getInputStream()).read() != (-1)) return result;
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
716,if (signature.charAt(pos[0]++) == '<') {,"if (signature.charAt(pos[0]++) == '<') {
  result.append('<');
  while (signature.charAt(pos[0]) != '>') {
    if (result.charAt(result.length() - 1) != '<') {
      result.append("", "");
    }
    result.append(decodeSignatureType(signature,pos));
  }
  result.append('>');
  pos[0]+=2;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
717,"while ((len = in.read(buffer, 0, (int) Math.min(length - copied, buffer.length))) > 0) {","while ((len=in.read(buffer,0,(int)Math.min(length - copied,buffer.length))) > 0) {
  destination.write(buffer,0,len);
  copied+=len;
}
",0,1,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
718,if (effStart.compareTo(end) < 0 && !(ignoreMaxActions || maxActionToBeCreated-- > 0)) {,"if (effStart.compareTo(end) < 0 && !(ignoreMaxActions || maxActionToBeCreated-- > 0)) {
  if (!firstMater) {
    effStart.setTime(CoordCommandUtils.getNextValidActionTimeForCronFrequency(effStart.getTime(),coordJob));
  }
}
",0,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
719,while (runner.getFlowFilesForRelationship(ExecuteFlumeSource.SUCCESS).size() < 4 && --numWaits > 0) {,"while (runner.getFlowFilesForRelationship(ExecuteFlumeSource.SUCCESS).size() < 4 && --numWaits > 0) {
  try {
    TimeUnit.MILLISECONDS.sleep(500);
  }
 catch (  InterruptedException ex) {
    logger.warn(""Sleep interrupted"");
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
720,while ((line = readLine(reader)).isEmpty() == false) {,"while ((line=readLine(reader)).isEmpty() == false) {
  if (isRequestLine) {
    builder=HttpRequest.createFromRequestLine(line);
    isRequestLine=false;
  }
 else {
    builder.addHeader(line);
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
721,if (leader && ++loopCount % 50 == 0) {,"if (leader && ++loopCount % 50 == 0) {
  try {
    final boolean stillLeader=verifyLeader();
    failureCount=0;
    if (!stillLeader) {
      logger.info(""According to ZooKeeper, this node is no longer the leader for Role '{}'. Will relinquish leadership."",roleName);
      break;
    }
  }
 catch (  final Exception e) {
    failureCount++;
    if (failureCount > 1) {
      logger.warn(""Attempted to reach out to ZooKeeper to verify that this node still is the elected leader for Role '{}' "" + ""but failed to communicate with ZooKeeper. This is the second failed attempt, so will relinquish leadership of this role."",roleName,e);
    }
 else {
      logger.warn(""Attempted to reach out to ZooKeeper to verify that this node still is the elected leader for Role '{}' "" + ""but failed to communicate with ZooKeeper. Will wait a bit and attempt to communicate with ZooKeeper again before relinquishing this role."",roleName,e);
    }
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
722,"for (final Iterator<Entry<String, String>> iter = entrySet.iterator(); iter.hasNext() && count++ < SortedStateUtils.MAX_COMPONENT_STATE_ENTRIES;) {","for (final Iterator<Entry<String,String>> iter=entrySet.iterator(); iter.hasNext() && count++ < SortedStateUtils.MAX_COMPONENT_STATE_ENTRIES; ) {
  final Map.Entry<String,String> entry=iter.next();
  final StateEntryDTO entryDTO=new StateEntryDTO();
  entryDTO.setKey(entry.getKey());
  entryDTO.setValue(entry.getValue());
  stateEntries.add(entryDTO);
}
",0,0,12,,"Modifier(VariableDeclarationExpression-modifiers, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
723,"while (totalRead < tempSize && (numRead = inStream.read(buffer, 0, toRead)) != -1) {","while (totalRead < tempSize && (numRead=inStream.read(buffer,0,toRead)) != -1) {
  output.write(buffer,0,numRead);
  totalRead+=numRead;
  toRead=Math.min(8192,tempSize - totalRead);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
724,while ( index++ < startIndex && (reader.nextRecord()) != null) {},"while (index++ < startIndex && (reader.nextRecord()) != null) {
}
",0,0,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
725,while ((++currentRecordsWritten <= recordsPerTransaction || recordsPerTransaction == 0),"while ((++currentRecordsWritten <= recordsPerTransaction || recordsPerTransaction == 0) && (record=recordReader.nextRecord()) != null) {
  write(writeId,record);
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
726,while ((eventOption = iterator.nextEvent()).isPresent() && events.size() < maxEvents) {,"while ((eventOption=iterator.nextEvent()).isPresent() && events.size() < maxEvents) {
  final ProvenanceEventRecord event=eventOption.get();
  if (authorizer.isAuthorized(event)) {
    events.add(event);
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
727,"while ((splitInfo = SplitText.this.nextSplit(demarcator, startOffset, SplitText.this.lineCount, splitInfo, preAccumulatedLength)) != null) {","while ((splitInfo=SplitText.this.nextSplit(demarcator,startOffset,SplitText.this.lineCount,splitInfo,preAccumulatedLength)) != null) {
  computedSplitsInfo.add(splitInfo);
  startOffset+=splitInfo.length;
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ThisExpression-qualifier, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
728,while (!finished && (count = socketChannel.read(AbstractSocketHandler.this.readingBuffer)) > 0){,"while (!finished && (count=socketChannel.read(AbstractSocketHandler.this.readingBuffer)) > 0) {
  byte lastByte=AbstractSocketHandler.this.readingBuffer.get(AbstractSocketHandler.this.readingBuffer.position() - 1);
  if (AbstractSocketHandler.this.readingBuffer.remaining() == 0 || lastByte == AbstractSocketHandler.this.endOfMessageByte) {
    this.processBuffer(selectionKey);
    if (lastByte == AbstractSocketHandler.this.endOfMessageByte) {
      finished=true;
    }
  }
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
729,"if((url = filterNormalize(""http:","if ((url=filterNormalize(""http://"" + host + ""/"")) == null && (url=filterNormalize(""https://"" + host + ""/"")) == null && (url=filterNormalize(""ftp://"" + host + ""/"")) == null && (url=filterNormalize(""file:/"" + host + ""/"")) == null) {
  context.getCounter(""Sitemap"",""filtered_records"").increment(1);
  return;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
730,while (remainingBalance.compareTo(FinAccountHelper.ZERO) < 0 && (trans = eli.next()) != null) {,"while (remainingBalance.compareTo(FinAccountHelper.ZERO) < 0 && (trans=eli.next()) != null) {
  String orderId=trans.getString(""orderId"");
  String orderItemSeqId=trans.getString(""orderItemSeqId"");
  if (orderId != null && orderItemSeqId != null) {
    GenericValue orderHeader=EntityQuery.use(delegator).from(""OrderHeader"").where(""orderId"",orderId).queryOne();
    GenericValue productStore=orderHeader.getRelatedOne(""ProductStore"",false);
    GenericValue orderItem=EntityQuery.use(delegator).from(""OrderItem"").where(""orderId"",orderId,""orderItemSeqId"",orderItemSeqId).queryOne();
    if (!""ITEM_CANCELLED"".equals(orderItem.getString(""statusId""))) {
      List<GenericValue> returnItems=orderItem.getRelated(""ReturnItem"",null,null,false);
      if (UtilValidate.isEmpty(returnItems)) {
        BigDecimal txAmt=trans.getBigDecimal(""amount"");
        BigDecimal refAmt=txAmt;
        if (remainingBalance.compareTo(txAmt) == -1) {
          refAmt=remainingBalance;
        }
        remainingBalance=remainingBalance.subtract(refAmt);
        refundAmount=refundAmount.add(refAmt);
        Map<String,Object> rhCtx=UtilMisc.toMap(""returnHeaderTypeId"",""CUSTOMER_RETURN"",""fromPartyId"",finAccount.getString(""ownerPartyId""),""toPartyId"",productStore.getString(""payToPartyId""),""userLogin"",userLogin);
        Map<String,Object> rhResp=dispatcher.runSync(""createReturnHeader"",rhCtx);
        if (ServiceUtil.isError(rhResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(rhResp));
        }
        String returnId=(String)rhResp.get(""returnId"");
        Map<String,Object> returnItemCtx=new HashMap<String,Object>();
        returnItemCtx.put(""returnId"",returnId);
        returnItemCtx.put(""orderId"",orderId);
        returnItemCtx.put(""description"",orderItem.getString(""itemDescription""));
        returnItemCtx.put(""orderItemSeqId"",orderItemSeqId);
        returnItemCtx.put(""returnQuantity"",BigDecimal.ONE);
        returnItemCtx.put(""receivedQuantity"",BigDecimal.ONE);
        returnItemCtx.put(""returnPrice"",refAmt);
        returnItemCtx.put(""returnReasonId"",""RTN_NOT_WANT"");
        returnItemCtx.put(""returnTypeId"",""RTN_REFUND"");
        returnItemCtx.put(""returnItemTypeId"",""RET_NPROD_ITEM"");
        returnItemCtx.put(""userLogin"",userLogin);
        Map<String,Object> retItResp=dispatcher.runSync(""createReturnItem"",returnItemCtx);
        if (ServiceUtil.isError(retItResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(retItResp));
        }
        String returnItemSeqId=(String)retItResp.get(""returnItemSeqId"");
        Map<String,Object> appRet=UtilMisc.toMap(""statusId"",""RETURN_ACCEPTED"",""returnId"",returnId,""userLogin"",userLogin);
        Map<String,Object> appResp=dispatcher.runSync(""updateReturnHeader"",appRet);
        if (ServiceUtil.isError(appResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(appResp));
        }
        Map<String,Object> recRet=UtilMisc.toMap(""statusId"",""RETURN_RECEIVED"",""returnId"",returnId,""userLogin"",userLogin);
        Map<String,Object> recResp=dispatcher.runSync(""updateReturnHeader"",recRet);
        if (ServiceUtil.isError(recResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(recResp));
        }
        GenericValue returnItem=EntityQuery.use(delegator).from(""ReturnItem"").where(""returnId"",returnId,""returnItemSeqId"",returnItemSeqId).queryOne();
        GenericValue response=returnItem.getRelatedOne(""ReturnItemResponse"",false);
        if (response == null) {
          throw new GeneralException(""No return response found for: "" + returnItem.getPrimaryKey());
        }
        String paymentId=response.getString(""paymentId"");
        Map<String,Object> txCtx=new HashMap<String,Object>();
        txCtx.put(""finAccountTransTypeId"",""ADJUSTMENT"");
        txCtx.put(""finAccountId"",finAccountId);
        txCtx.put(""orderId"",orderId);
        txCtx.put(""orderItemSeqId"",orderItemSeqId);
        txCtx.put(""paymentId"",paymentId);
        txCtx.put(""amount"",refAmt.negate());
        txCtx.put(""partyId"",finAccount.getString(""ownerPartyId""));
        txCtx.put(""userLogin"",userLogin);
        Map<String,Object> txResp=dispatcher.runSync(""createFinAccountTrans"",txCtx);
        if (ServiceUtil.isError(txResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(txResp));
        }
      }
    }
  }
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
731,while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult = eli.next()) != null)) {,"while ((maxResults == null || numRetreived < maxResults.intValue()) && ((searchResult=eli.next()) != null)) {
  String productId=searchResult.getString(""mainProductId"");
  if (!productIdSet.contains(productId)) {
    productIds.add(productId);
    productIdSet.add(productId);
    numRetreived++;
  }
 else {
    duplicatesFound++;
  }
}
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
732,while (remainingBalance.compareTo(FinAccountHelper.getZero()) < 0 && (trans = eli.next()) != null) {,"while (remainingBalance.compareTo(FinAccountHelper.getZero()) < 0 && (trans=eli.next()) != null) {
  String orderId=trans.getString(""orderId"");
  String orderItemSeqId=trans.getString(""orderItemSeqId"");
  if (orderId != null && orderItemSeqId != null) {
    GenericValue orderHeader=EntityQuery.use(delegator).from(""OrderHeader"").where(""orderId"",orderId).queryOne();
    GenericValue productStore=orderHeader.getRelatedOne(""ProductStore"",false);
    GenericValue orderItem=EntityQuery.use(delegator).from(""OrderItem"").where(""orderId"",orderId,""orderItemSeqId"",orderItemSeqId).queryOne();
    if (!""ITEM_CANCELLED"".equals(orderItem.getString(""statusId""))) {
      List<GenericValue> returnItems=orderItem.getRelated(""ReturnItem"",null,null,false);
      if (UtilValidate.isEmpty(returnItems)) {
        BigDecimal txAmt=trans.getBigDecimal(""amount"");
        BigDecimal refAmt=txAmt;
        if (remainingBalance.compareTo(txAmt) == -1) {
          refAmt=remainingBalance;
        }
        remainingBalance=remainingBalance.subtract(refAmt);
        refundAmount=refundAmount.add(refAmt);
        Map<String,Object> rhCtx=UtilMisc.toMap(""returnHeaderTypeId"",""CUSTOMER_RETURN"",""fromPartyId"",finAccount.getString(""ownerPartyId""),""toPartyId"",productStore.getString(""payToPartyId""),""userLogin"",userLogin);
        Map<String,Object> rhResp=dispatcher.runSync(""createReturnHeader"",rhCtx);
        if (ServiceUtil.isError(rhResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(rhResp));
        }
        String returnId=(String)rhResp.get(""returnId"");
        Map<String,Object> returnItemCtx=new HashMap<>();
        returnItemCtx.put(""returnId"",returnId);
        returnItemCtx.put(""orderId"",orderId);
        returnItemCtx.put(""description"",orderItem.getString(""itemDescription""));
        returnItemCtx.put(""orderItemSeqId"",orderItemSeqId);
        returnItemCtx.put(""returnQuantity"",BigDecimal.ONE);
        returnItemCtx.put(""receivedQuantity"",BigDecimal.ONE);
        returnItemCtx.put(""returnPrice"",refAmt);
        returnItemCtx.put(""returnReasonId"",""RTN_NOT_WANT"");
        returnItemCtx.put(""returnTypeId"",""RTN_REFUND"");
        returnItemCtx.put(""returnItemTypeId"",""RET_NPROD_ITEM"");
        returnItemCtx.put(""userLogin"",userLogin);
        Map<String,Object> retItResp=dispatcher.runSync(""createReturnItem"",returnItemCtx);
        if (ServiceUtil.isError(retItResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(retItResp));
        }
        String returnItemSeqId=(String)retItResp.get(""returnItemSeqId"");
        Map<String,Object> appRet=UtilMisc.toMap(""statusId"",""RETURN_ACCEPTED"",""returnId"",returnId,""userLogin"",userLogin);
        Map<String,Object> appResp=dispatcher.runSync(""updateReturnHeader"",appRet);
        if (ServiceUtil.isError(appResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(appResp));
        }
        Map<String,Object> recRet=UtilMisc.toMap(""statusId"",""RETURN_RECEIVED"",""returnId"",returnId,""userLogin"",userLogin);
        Map<String,Object> recResp=dispatcher.runSync(""updateReturnHeader"",recRet);
        if (ServiceUtil.isError(recResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(recResp));
        }
        GenericValue returnItem=EntityQuery.use(delegator).from(""ReturnItem"").where(""returnId"",returnId,""returnItemSeqId"",returnItemSeqId).queryOne();
        GenericValue response=returnItem.getRelatedOne(""ReturnItemResponse"",false);
        if (response == null) {
          throw new GeneralException(""No return response found for: "" + returnItem.getPrimaryKey());
        }
        String paymentId=response.getString(""paymentId"");
        Map<String,Object> txCtx=new HashMap<>();
        txCtx.put(""finAccountTransTypeId"",""ADJUSTMENT"");
        txCtx.put(""finAccountId"",finAccountId);
        txCtx.put(""orderId"",orderId);
        txCtx.put(""orderItemSeqId"",orderItemSeqId);
        txCtx.put(""paymentId"",paymentId);
        txCtx.put(""amount"",refAmt.negate());
        txCtx.put(""partyId"",finAccount.getString(""ownerPartyId""));
        txCtx.put(""userLogin"",userLogin);
        Map<String,Object> txResp=dispatcher.runSync(""createFinAccountTrans"",txCtx);
        if (ServiceUtil.isError(txResp)) {
          throw new GeneralException(ServiceUtil.getErrorMessage(txResp));
        }
      }
    }
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
733,while (c != '[' && (c = stream.read()) >= 0) {,"while (c != '[' && (c=stream.read()) >= 0) {
  osEntitySet.write(c);
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
734,while ((entitySet != null || singleton!=null),"while ((entitySet != null || singleton != null) && ++navigationCount < resourcePaths.size() && resourcePaths.get(navigationCount) instanceof UriResourceNavigation) {
  final UriResourceNavigation uriResourceNavigation=(UriResourceNavigation)resourcePaths.get(navigationCount);
  blockTypeFilters(uriResourceNavigation);
  if (uriResourceNavigation.getProperty().containsTarget()) {
    return entitySet;
  }
  EdmBindingTarget target=null;
  if (entitySet != null) {
    target=entitySet.getRelatedBindingTarget(uriResourceNavigation.getProperty().getName());
  }
 else   if (singleton != null) {
    target=singleton.getRelatedBindingTarget(uriResourceNavigation.getProperty().getName());
  }
  if (target instanceof EdmEntitySet) {
    entitySet=(EdmEntitySet)target;
  }
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
735,"while ((value = PathUtils.doDynamicReplacement(value, inputMetadata)).contains(""["") && envReplaceRecur) {","while ((value=PathUtils.doDynamicReplacement(value,inputMetadata)).contains(""["") && envReplaceRecur) {
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
736,"if (children.getLength() != 1 || (attr = ((Element) children.item(0)).getAttribute(""factory"")).equals("""")) {","if (children.getLength() != 1 || (attr=((Element)children.item(0)).getAttribute(""factory"")).equals("""")) {
  throw new RepositoryException(""Could not find exactly one "" + tag + "", with factory set, in queue: ""+ queue);
}
",0,0,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
737,while (effStart.compareTo(end) < 0 && (ignoreMaxActions || maxActionToBeCreated-- > 0)) {,"while (effStart.compareTo(end) < 0 && (ignoreMaxActions || maxActionToBeCreated-- > 0)) {
  if (pause != null && effStart.compareTo(pause) >= 0) {
    break;
  }
  Date nextTime=effStart.getTime();
  if (isCronFrequency) {
    if (effStart.getTime().compareTo(startMatdTime) == 0 && firstMater) {
      effStart.add(Calendar.MINUTE,-1);
      firstMater=false;
    }
    nextTime=CoordCommandUtils.getNextValidActionTimeForCronFrequency(effStart.getTime(),coordJob);
    Date prevTime=new Date(effStart.getTimeInMillis());
    effStart.setTime(nextTime);
    addDSTChangeToNominalTime(prevTime,nextTime,coordJob);
  }
  if (effStart.compareTo(end) < 0) {
    if (pause != null && effStart.compareTo(pause) >= 0) {
      break;
    }
    CoordinatorActionBean actionBean=new CoordinatorActionBean();
    lastActionNumber++;
    int timeout=coordJob.getTimeout();
    LOG.debug(""Materializing action for time="" + DateUtils.formatDateOozieTZ(effStart.getTime()) + "", lastactionnumber=""+ lastActionNumber+ "" timeout=""+ timeout+ "" minutes"");
    Date actualTime=new Date();
    action=CoordCommandUtils.materializeOneInstance(jobId,dryrun,(Element)eJob.clone(),nextTime,actualTime,lastActionNumber,jobConf,actionBean);
    actionBean.setTimeOut(timeout);
    if (!dryrun) {
      storeToDB(actionBean,action,jobConf);
    }
 else {
      actionStrings.append(""action for new instance"");
      actionStrings.append(action);
    }
  }
 else {
    break;
  }
  if (!isCronFrequency) {
    effStart=(Calendar)origStart.clone();
    effStart.add(freqTU.getCalendarUnit(),lastActionNumber * Integer.parseInt(coordJob.getFrequency()));
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
738,while (++i < elements.length && elements[i].getClassName().equals(current)) {,"while (++i < elements.length && elements[i].getClassName().equals(current)) {
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
739,"for(int i = 0; (i = in.read(buf)) != -1; out.write(buf, 0, i));","for (int i=0; (i=in.read(buf)) != -1; out.write(buf,0,i)) ;
",0,3,14,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, ForStatement-updaters, ),
SimpleName(MethodInvocation-arguments, ForStatement-updaters, ),
NumberLiteral(MethodInvocation-arguments, ForStatement-updaters, ),
SimpleName(MethodInvocation-arguments, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
740,for (int i; (i = Long.numberOfTrailingZeros(isWrapAround)) != Long.SIZE; isWrapAround &= ~(1L << i)) {,"for (int i; (i=Long.numberOfTrailingZeros(isWrapAround)) != Long.SIZE; isWrapAround&=~(1L << i)) {
  final CoordinateSystemAxis axis=cs.getAxis(i);
  final double min=axis.getMinimumValue();
  final double max=axis.getMaximumValue();
  for (int j=0; j < coordinates.length; j++) {
    c=coordinates[j];
    if ((j & mask) == 0) {
      c[i + dimension]=max;
    }
 else {
      c[i]=min;
    }
  }
  mask<<=1;
}
",0,2,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ForStatement-updaters, ),
"
741,"for (int st = 0, i; (i = wild.indexOf(""*"", st)) != -1; st = i + 3)","for (int st=0, i; (i=wild.indexOf(""*"",st)) != -1; st=i + 3) wild=wild.substring(0,i) + ""."" + wild.substring(i);
",0,2,13,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-updaters, ),
"
742,"ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) {","for (int ch=0, last=0, last2=0; ch == '<' || (ch=in.read()) != -1; last2=last, last=ch) {
  if (comment && last2 == '-' && last == '-' && ch == '>') {
    comment=false;
    continue;
  }
  if (comment) {
    if (ch == '<') {
      ch=in.read();
      if (ch == -1)       break read;
    }
    continue;
  }
  if (last2 == '<' && last == '!' && ch == '-') {
    comment=true;
    continue;
  }
  if (ch != '<')   continue;
  token=TOKEN_NONE;
  last=ch;
  ch=readThroughWhitespace(in);
  if (ch == '/' || ch == '!' || ch == '?')   continue;
  token=readElementToken(ch,in);
switch (token) {
case TOKEN_EOF:
    break read;
case TOKEN_PACKAGE:
  pkg=readAttribute(in,_packageAttr);
if (pkg == null) break read;
break;
case TOKEN_PACKAGE_NOATTR:
pkg=readElementText(in);
if (pkg == null) break read;
ch='<';
break;
case TOKEN_CLASS:
name=readAttribute(in,_classAttr);
if (name == null) break read;
if (pkg.length() > 0 && name.indexOf('.') == -1) names.add(pkg + ""."" + name);
 else names.add(name);
break;
case TOKEN_CLASS_NOATTR:
name=readElementText(in);
if (name == null) break read;
ch='<';
if (pkg.length() > 0 && name.indexOf('.') == -1) names.add(pkg + ""."" + name);
 else names.add(name);
break;
}
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
SimpleName(Assignment-leftHandSide, ),
SimpleName(Assignment-rightHandSide, ),
SimpleName(Assignment-leftHandSide, ),
SimpleName(Assignment-rightHandSide, ),
"
743,"for (int r, o = 0; o < content.length && (r = fin.","for (int r, o=0; o < content.length && (r=fin.read(content,o,content.length - o)) != -1; o+=r) ;
",0,0,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
744,"while (offset < size && (read = in.read(content, offset, (int) size - offset)) != -1) {","while (offset < size && (read=in.read(content,offset,(int)size - offset)) != -1) {
  offset+=read;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
745,"if (((matches = matches(regex, input))).size() > 0)","if (((matches=matches(regex,input))).size() > 0) fail(""The specified list of size "" + input.size() + "" did contain one or more strings that matchs the""+ "" specified illegal regular expression""+ "" (\""""+ regex+ ""\"").""+ "" First example of a matching message is: ""+ matches.iterator().next());
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
746,if (c.ctx() != null && !alias.equalsIgnoreCase(c.ctx().schemaAlias),"if (c.ctx() != null && !alias.equalsIgnoreCase(c.ctx().schemaAlias) && (val=c.getRegisteredRootVariable(this)) != null) {
  var=factory.newPath(val);
}
 else if (inSubquery(subquery)) {
  Subquery subQ=subquery.getSubQ();
  var=factory.newPath(subQ);
}
 else {
  var=factory.newPath();
  var.setSchemaAlias(alias);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
747,for (int i = 0; i < 25 && (sentence = samples.read()) != null; i++) {,"for (int i=0; i < 25 && (sentence=samples.read()) != null; i++) {
  int begin=sentencesString.length();
  sentence=sentence.trim();
  sentencesString.append(sentence);
  int end=sentencesString.length();
  sentenceSpans.add(new Span(begin,end));
  sentencesString.append(' ');
}
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
748,"while ((bytesRead = f.read(temp, 0, nextReadLength)) == temp.length) {","while ((bytesRead=f.read(temp,0,nextReadLength)) == temp.length) {
  buf.put(temp);
  totalBytesRead+=bytesRead;
  nextReadLength=Math.min(buf.remaining(),temp.length);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
749,while ((result = randomInt96()).compareTo(maximum) > 0);,"while ((result=randomInt96()).compareTo(maximum) > 0) ;
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
750,while (((i = source.peek()) > 0) && ((char) i != ']')),"while (((i=source.peek()) > 0) && ((char)i != ']')) {
  pbo=parseDirObject();
  if (pbo instanceof COSObject) {
    if (po.size() > 0 && po.get(po.size() - 1) instanceof COSInteger) {
      COSInteger genNumber=(COSInteger)po.remove(po.size() - 1);
      if (po.size() > 0 && po.get(po.size() - 1) instanceof COSInteger) {
        COSInteger number=(COSInteger)po.remove(po.size() - 1);
        COSObjectKey key=new COSObjectKey(number.longValue(),genNumber.intValue());
        pbo=getObjectFromPool(key);
      }
 else {
        pbo=null;
      }
    }
 else {
      pbo=null;
    }
  }
  if (pbo != null) {
    po.add(pbo);
  }
 else {
    LOG.warn(""Corrupt array element at offset "" + source.getPosition() + "", start offset: ""+ startPosition);
    String isThisTheEnd=readString();
    if (isThisTheEnd.isEmpty() && source.peek() == '[') {
      return po;
    }
    source.rewind(isThisTheEnd.getBytes(StandardCharsets.ISO_8859_1).length);
    if (ENDOBJ_STRING.equals(isThisTheEnd) || ENDSTREAM_STRING.equals(isThisTheEnd)) {
      return po;
    }
  }
  skipSpaces();
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
751,while (Character.isDigit(c = (char) source.peek()) || dotNotRead && c == '.',"while (Character.isDigit(c=(char)source.peek()) || dotNotRead && c == '.' || c == '-') {
  if (c != '-') {
    buf.append(c);
  }
  source.read();
  if (dotNotRead && c == '.') {
    dotNotRead=false;
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
752,"while ((amountRead = reader.read(buf, 0, Math.min(8192, datalength))) > 0)","while ((amountRead=reader.read(buf,0,Math.min(8192,datalength))) > 0) {
  datalength-=amountRead;
  os.write(buf,0,amountRead);
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
753,for (int i = this.objectPath.size(); i-- > 0;),"for (int i=this.objectPath.size(); i-- > 0; ) {
  if (this.classObjPath.get(i).equals(type)) {
    return i;
  }
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
754,while (i++ < limit - STRINGS.length - offset) {,"while (i++ < limit - STRINGS.length - offset) {
  assertTrue(rs.next());
  assertEquals(STRINGS[i - 1],rs.getString(1));
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, InfixExpression-rightOperand, WhileStatement-expression, ),
"
755,if (i == 0 && (type = children.get(1).getDataType()) != null,"if (i == 0 && (type=children.get(1).getDataType()) != null && type.isCoercibleTo(PDate.INSTANCE)) {
  return getPDatumByExpression(expression,type);
}
 else if (expression.getDataType() != null && expression.getDataType().isCoercibleTo(PDate.INSTANCE)) {
  return getPDatumByExpression(expression,PDecimal.INSTANCE);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
756,if (((slotIndex = (slotIndex + 1) % slots.getSlots().size()) == 0)) {,"if (((slotIndex=(slotIndex + 1) % slots.getSlots().size()) == 0)) {
  initialize();
  wrapped=true;
  return false;
}
",0,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
757,while (i >= 0 && --position[i] < 0) {,"while (i >= 0 && --position[i] < 0) {
  position[i]=slots.get(i).size() - 1;
  i--;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
758,"if (oldState == null || (deleteType=getDeleteTypeOrNull(pendingUpdates)) != null || hasIndexedColumnChanged(oldState, pendingUpdates, ts)) {","if (oldState == null || (deleteType=getDeleteTypeOrNull(pendingUpdates)) != null || hasIndexedColumnChanged(oldState,pendingUpdates,ts)) {
  return buildRowDeleteMutation(indexRowKey,deleteType,ts);
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
759,if ((dataTable=dataPlan.getTableRef().getTable()).getBucketNum() != null) {,"if ((dataTable=dataPlan.getTableRef().getTable()).getBucketNum() != null) {
  return 0;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
760,"while ((c=currentKey.compareTo(currentGuidePost = PrefixByteCodec.decode(decoder, input))) >= 0) {","while ((c=currentKey.compareTo(currentGuidePost=PrefixByteCodec.decode(decoder,input))) >= 0) {
  if (!gpsForFirstRegion && firstRegionStartKey.compareTo(currentGuidePost) <= 0) {
    gpsForFirstRegion=true;
  }
  if (gpsForFirstRegion) {
    fallbackTs=Math.min(fallbackTs,gps.getGuidePostTimestamps()[guideIndex]);
  }
  delayAddingEst=(c == 0);
  guideIndex++;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
761,while (intersectWithGuidePosts && (endKey.length == 0 || (gpsComparedToEndKey=currentGuidePost.compareTo(endKey)) <= 0)) {,"while (intersectWithGuidePosts && (endKey.length == 0 || (gpsComparedToEndKey=currentGuidePost.compareTo(endKey)) <= 0)) {
  Scan newScan=scanRanges.intersectScan(scan,currentKeyBytes,currentGuidePostBytes,keyOffset,false);
  if (newScan != null) {
    ScanUtil.setLocalIndexAttributes(newScan,keyOffset,regionInfo.getStartKey(),regionInfo.getEndKey(),newScan.getStartRow(),newScan.getStopRow());
    if (delayAddingEst) {
      updateEstimates(gps,guideIndex - 1,estimates);
    }
    if (!(delayAddingEst=gpsComparedToEndKey == 0)) {
      updateEstimates(gps,guideIndex,estimates);
    }
  }
 else {
    delayAddingEst=false;
  }
  everNotDelayed|=!delayAddingEst;
  scans=addNewScan(parallelScans,scans,newScan,currentGuidePostBytes,false,regionLocation);
  currentKeyBytes=currentGuidePostBytes;
  try {
    currentGuidePost=PrefixByteCodec.decode(decoder,input);
    currentGuidePostBytes=currentGuidePost.copyBytes();
    guideIndex++;
  }
 catch (  EOFException e) {
    intersectWithGuidePosts=false;
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
762,if (limit >= 0 && count++ >= limit) { return null; },"if (limit >= 0 && count++ >= limit) {
  return null;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
763,if (entry == null || (limit != null && count++ > limit)) {,"if (entry == null || (limit != null && count++ > limit)) {
  resultIterator.close();
  resultIterator=PeekingResultIterator.EMPTY_ITERATOR;
  return null;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
764,if (tokenizer.hasMoreTokens() && !(token=tokenizer.nextToken()).equals(TERMINATOR)) {,"if (tokenizer.hasMoreTokens() && !(token=tokenizer.nextToken()).equals(TERMINATOR)) {
  throw getMalFormedUrlException(url);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
765,while (!(taken = offer(o)) && waitTime > 0) {,"while (!(taken=offer(o)) && waitTime > 0) {
  this.lock.wait(waitTime);
  waitTime=endAt - EnvironmentEdgeManager.currentTimeMillis();
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
766,if (this.isArray = dataType != null && dataType.isArrayType()) {,"if (this.isArray=dataType != null && dataType.isArrayType()) {
  baseType=PDataType.arrayBaseType(dataType);
}
",0,0,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, IfStatement-expression, ),
"
767,"if (this.next(ptr, position++, maxOffset, isFirst) == null) {","if (this.next(ptr,position++,maxOffset,isFirst) == null) {
  return false;
}
",0,0,7,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
768,while (keyOffset < keyBuffer.length && !isSeparatorByte(keyBuffer[keyOffset++])) {,"while (keyOffset < keyBuffer.length && !isSeparatorByte(keyBuffer[keyOffset++])) {
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
769,if (m instanceof Put && i++==autoPartitionPutIndex) { return (Put) m; },"if (m instanceof Put && i++ == autoPartitionPutIndex) {
  return (Put)m;
}
",0,1,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
770,while (--i >= schemaStartIndex && offset > byteOffset &&,"while (--i >= schemaStartIndex && offset > byteOffset && !(field=schema.getField(--fieldIndex)).getDataType().isFixedWidth() && field.getSortOrder() == SortOrder.ASC && key[offset - 1] == QueryConstants.SEPARATOR_BYTE) {
  offset--;
  fieldIndex-=slotSpan[i];
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
771,if (!columnCells.isEmpty() && (timestamp = columnCells.get(0),"if (!columnCells.isEmpty() && (timestamp=columnCells.get(0).getTimestamp()) < MetaDataProtocol.MIN_SYSTEM_TABLE_TIMESTAMP_4_7_0) {
  Cell upgradeKV=PhoenixKeyValueUtil.newKeyValue(statsTableKey,PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES,UPGRADE_TO_4_7_COLUMN_NAME,timestamp,PBoolean.INSTANCE.toBytes(true));
  Put upgradePut=new Put(statsTableKey);
  upgradePut.add(upgradeKV);
  if (metaTable.checkAndPut(statsTableKey,PhoenixDatabaseMetaData.TABLE_FAMILY_BYTES,UPGRADE_TO_4_7_COLUMN_NAME,null,upgradePut)) {
    List<Mutation> mutations=Lists.newArrayListWithExpectedSize(1000);
    Scan scan=new Scan();
    scan.setRaw(true);
    scan.setMaxVersions();
    ResultScanner statsScanner=statsTable.getScanner(scan);
    Result r;
    mutations.clear();
    int count=0;
    while ((r=statsScanner.next()) != null) {
      Delete delete=null;
      for (      Cell keyValue : r.rawCells()) {
        if (KeyValue.Type.codeToType(keyValue.getTypeByte()) == KeyValue.Type.Put) {
          if (delete == null) {
            delete=new Delete(keyValue.getRowArray(),keyValue.getRowOffset(),keyValue.getRowLength());
          }
          KeyValue deleteKeyValue=new KeyValue(keyValue.getRowArray(),keyValue.getRowOffset(),keyValue.getRowLength(),keyValue.getFamilyArray(),keyValue.getFamilyOffset(),keyValue.getFamilyLength(),keyValue.getQualifierArray(),keyValue.getQualifierOffset(),keyValue.getQualifierLength(),keyValue.getTimestamp(),KeyValue.Type.Delete,ByteUtil.EMPTY_BYTE_ARRAY,0,0);
          delete.addDeleteMarker(deleteKeyValue);
        }
      }
      if (delete != null) {
        mutations.add(delete);
        if (count > 10) {
          statsTable.batch(mutations,null);
          mutations.clear();
          count=0;
        }
        count++;
      }
    }
    if (!mutations.isEmpty()) {
      statsTable.batch(mutations,null);
    }
    return true;
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
772,while (!((fileStatusArr = fs.listStatus(path)) == null || fs,"while (!((fileStatusArr=fs.listStatus(path)) == null || fs.isFile(path) || fileStatusArr.length == 0)) {
  for (  FileStatus fileStatus : fileStatusArr) {
    path=fileStatus.getPath();
    if (fileStatus.getPath().getName().startsWith(""_"") || !fileStatus.isDir())     continue;
    parseAndPutKeyValue(path.getName(),partitionKeys);
    break;
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
"
773,"else if ((tmp = pc.getProperties().getProperty(PigConfiguration.PIG_MAX_COMBINED_SPLIT_SIZE, null)) != null) {","if ((tmp=pc.getProperties().getProperty(PigConfiguration.PIG_MAX_COMBINED_SPLIT_SIZE,null)) != null) {
  try {
    maxCombinedSplitSize=Long.parseLong(tmp);
  }
 catch (  NumberFormatException e) {
    LOG.warn(""Invalid numeric format for pig.maxCombinedSplitSize; use the default maximum combined split size"");
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
774,if (isPrimitive() && (primitives++ % 8 == 0)) {,"if (isPrimitive() && (primitives++ % 8 == 0)) {
  add(""private byte isNull_"" + isNulls++ + "" = (byte)0xFF;"");
}
",0,0,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
775,if (syncMarker[i++] != ((Integer)seenByte).byteValue()) {,"if (syncMarker[i++] != ((Integer)seenByte).byteValue()) {
  continue outer;
}
",0,0,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
776,while ((ch = getNextChar(true)) != -1 && ch != '\\' && ch != '\n') {,"while ((ch=getNextChar(true)) != -1 && ch != '\\' && ch != '\n') {
  buf.append((char)ch);
}
",0,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
777,for (Container parent = component.getParent(); parent != null,"for (Container parent=component.getParent(); parent != null && (section=(Section)parent.getAttribute(Attribute.SECTION)) == null; ) {
  parent=parent.getParent();
}
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
"
778,if (node instanceof TextNode && (paragraph = getParagraphParent(node)) != null,"if (node instanceof TextNode && (paragraph=getParagraphParent(node)) != null && paragraph.getLength() == 1) {
  segment=node.removeRange(0,charCount);
}
 else {
  segment=node;
  remove(start,1);
}
",0,0,6,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
779,while ((io.hasMore(8)) && (_timesPadding-- > 0)) {,"while ((io.hasMore(8)) && (_timesPadding-- > 0)) {
  io.readUnsignedShort(8);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
780,for (Element node; (node = (Element)iter.nextNode()) != null; ) {,"for (Element node; (node=(Element)iter.nextNode()) != null; ) {
  setPrefix(node,prefixCfg,prefixUsed);
  NamedNodeMap nnm=node.getAttributes();
  final int nnmLen=nnm.getLength();
  for (int j=0; j < nnmLen; j++) {
    setPrefix(nnm.item(j),prefixCfg,prefixUsed);
  }
}
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
781,"for (int idx=0; color == null && (ch = nextObject(obj, cur, idx)) != null; idx++) {","for (int idx=0; color == null && (ch=nextObject(obj,cur,idx)) != null; idx++) {
  if (ch instanceof CTHslColor) {
    color=toColor((CTHslColor)ch);
  }
 else   if (ch instanceof CTPresetColor) {
    color=toColor((CTPresetColor)ch);
  }
 else   if (ch instanceof CTSchemeColor) {
    color=toColor((CTSchemeColor)ch,theme);
  }
 else   if (ch instanceof CTScRgbColor) {
    color=toColor((CTScRgbColor)ch);
  }
 else   if (ch instanceof CTSRgbColor) {
    color=toColor((CTSRgbColor)ch);
  }
 else   if (ch instanceof CTSystemColor) {
    color=toColor((CTSystemColor)ch);
  }
 else   if (!(ch instanceof CTFontReference) && idx > 0) {
    throw new IllegalArgumentException(""Unexpected color choice: "" + ch.getClass());
  }
}
",0,2,12,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
782,(lAt = string.indexOf(HeaderFooterEntity_L)) > -2 &&,"while ((lAt=string.indexOf(HeaderFooterEntity_L)) > -2 && (cAt=string.indexOf(HeaderFooterEntity_C)) > -2 && (rAt=string.indexOf(HeaderFooterEntity_R)) > -2 && (lAt > -1 || cAt > -1 || rAt > -1)) {
  if (rAt > cAt && rAt > lAt) {
    parts[2]=string.substring(rAt + HeaderFooterEntity_R.length());
    string=string.substring(0,rAt);
  }
 else   if (cAt > rAt && cAt > lAt) {
    parts[1]=string.substring(cAt + HeaderFooterEntity_C.length());
    string=string.substring(0,cAt);
  }
 else {
    parts[0]=string.substring(lAt + HeaderFooterEntity_L.length());
    string=string.substring(0,lAt);
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
"
783,.forEach(f -> { if (idx[0]++ == 2) { assertNull(f); } else { assertNotNull(f); }} );,"if (idx[0]++ == 2) {
  assertNull(f);
}
 else {
  assertNotNull(f);
}
",0,0,7,,"SimpleName(ArrayAccess-array, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-elseStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-elseStatement, Block-statements, LambdaExpression-body, ),
"
784,if (subPropMatches[i++]) mask |= subMask;,"if (subPropMatches[i++]) mask|=subMask;
",0,0,4,,"SimpleName(ArrayAccess-array, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
785,if (record.getSid() == sid && matches++ == pos) {,"if (record.getSid() == sid && matches++ == pos) {
  return record;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
786,for (int xor : ENCRYPTION_MATRIX[line++]) {,"for (int xor : ENCRYPTION_MATRIX[line++]) {
  if ((ch & 1) == 1) {
    highOrderWord^=xor;
  }
  ch>>>=1;
}
",0,0,4,,"PrimitiveType(SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(ArrayAccess-array, EnhancedForStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, EnhancedForStatement-expression, ),
"
787,if (actual[i++] != expectedByte && expectedByte != '?') {,"if (actual[i++] != expectedByte && expectedByte != '?') {
  return false;
}
",0,0,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
788,if ((buf[i] = is.readByte()) == 0) {,"if ((buf[i]=is.readByte()) == 0) {
  return StringUtil.getFromCompressedUnicode(buf,0,i);
}
",0,0,5,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
789,if (workerId != null && ((worker = workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {,"if (workerId != null && ((worker=workerIdToAssignments.get(workerId)) != null && worker.isEmpty())) {
  this.workerIdToAssignments.remove(workerId);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
790,while ( remote.getLastKnownReplicationTransactionId() != node1.getLastKnownReplicationTransactionId() && (waitCounter--) != 0),"while (remote.getLastKnownReplicationTransactionId() != node1.getLastKnownReplicationTransactionId() && (waitCounter--) != 0) {
  Thread.sleep(100l);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
791,"if ((sub.acquires() && !assign(sub, node))","if ((sub.acquires() && !assign(sub,node)) || (!sub.acquires() && (messageReference=node.newMessageReference()) == null)) {
  sub.restoreCredit(node);
}
 else {
  setLastSeenEntry(sub,node);
  return new MessageContainer(node,messageReference);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
792,"while (pos < key.length && -1 != (read = inputStream.read(key, pos, key.length - pos)))","while (pos < key.length && -1 != (read=inputStream.read(key,pos,key.length - pos))) {
  pos+=read;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
793,"if(mimeType != null && !(mimeType = mimeType.trim().toLowerCase()).equals(""""))","if (mimeType != null && !(mimeType=mimeType.trim().toLowerCase()).equals("""")) {
  if (!(mimeType.startsWith(""text/"") || Arrays.asList(""application/json"",""application/xml"").contains(mimeType))) {
    throw new IllegalArgumentException(message.getMimeType() + "" is invalid as a MIME type for this message. "" + ""Only MIME types of the text type can be used if a string is supplied as the content"");
  }
 else   if (mimeType.matches("".*;\\s*charset\\s*=.*"")) {
    throw new IllegalArgumentException(message.getMimeType() + "" is invalid as a MIME type for this message. "" + ""If a string is supplied as the content, the MIME type must not include a charset parameter"");
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
794,else if((leftBytes = left.getAddress()).length == (rightBytes = right.getAddress()).length),"if ((leftBytes=left.getAddress()).length == (rightBytes=right.getAddress()).length) {
  for (int i=0; i < left.getAddress().length; i++) {
    int compare=Byte.compare(leftBytes[i],rightBytes[i]);
    if (compare != 0) {
      return compare;
    }
  }
  return 0;
}
 else {
  return Integer.compare(left.getAddress().length,right.getAddress().length);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
795,while(_consumer.getQueueContext().getReleasedEntry() != null && waitLoopLimit-- > 0 ),"while (_consumer.getQueueContext().getReleasedEntry() != null && waitLoopLimit-- > 0) {
  Thread.sleep(10);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
796,while((cache = CACHE_UPDATE.get(this)).getAccessControl() != ruleBasedAccessControl),"while ((cache=CACHE_UPDATE.get(this)).getAccessControl() != ruleBasedAccessControl) {
  CACHE_UPDATE.compareAndSet(this,cache,new AccessControlCache(ruleBasedAccessControl));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
797,"if ((oldValue = map.put((T) key, (S) value)) != null)","if ((oldValue=map.put((T)key,(S)value)) != null) {
  String message=String.format(""Map cannot have duplicate keys: %s has values (%s, %s)"",key,oldValue,value);
  throw new AmqpErrorException(AmqpError.DECODE_ERROR,message);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
798,while ((t = t.getCause()) != null && maxDepth-- != 0),"while ((t=t.getCause()) != null && maxDepth-- != 0) {
  LOGGER.info(""... caused by "" + t.getClass().getSimpleName() + ""  : ""+ t.getMessage());
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
799,while (!(parentCategories = _parents.get(category)).contains(rootCategory)),"while (!(parentCategories=_parents.get(category)).contains(rootCategory)) {
  hierarchyList.addAll(parentCategories);
  category=parentCategories.iterator().next();
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
800,while (!isClosed() && !isClosing() && _failoverPolicy.failoverAllowed() && (broker = _failoverPolicy.getNextBrokerDetails()) != null),"while (!isClosed() && !isClosing() && _failoverPolicy.failoverAllowed()&& (broker=_failoverPolicy.getNextBrokerDetails()) != null) {
  if (attemptConnection(broker)) {
    return true;
  }
}
",0,0,8,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
801,while ((bytes = (byte[]) streamMessage.readObject()) != null),"while ((bytes=(byte[])streamMessage.readObject()) != null) {
  certs.add((X509Certificate)certFactory.generateCertificate(new ByteArrayInputStream(bytes)));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(ArrayType-elementType, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
802,if(!(data[thisIdx++] == otherData[otherIdx++])),"if (!(data[thisIdx++] == otherData[otherIdx++])) {
  return false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
803,while (!stopped && attempts-- > 0 && this.clientStub == null && driverProcessIsAlive()) {,"while (!stopped && attempts-- > 0 && this.clientStub == null && driverProcessIsAlive()) {
  LOG.log(Level.INFO,""waiting for driver process to register"");
  this.wait(1000);
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
804,"while ((stringIndex = lcresult.indexOf(""<"" + openCloseTags[j],","while ((stringIndex=lcresult.indexOf(""<"" + openCloseTags[j],lastStringIndex)) > -1) {
  lastStringIndex=stringIndex;
  int endIndex=lcresult.indexOf(closeTag,stringIndex);
  if (endIndex > -1) {
    result.delete(stringIndex,endIndex + closeTag.length());
    lcresult.delete(stringIndex,endIndex + closeTag.length());
  }
 else {
    endIndex=lcresult.indexOf("">"",stringIndex);
    int nextStart=lcresult.indexOf(""<"",stringIndex + 1);
    if (endIndex > stringIndex && lcresult.charAt(endIndex - 1) == '/' && (endIndex < nextStart || nextStart == -1)) {
      result.delete(stringIndex,endIndex + 1);
      lcresult.delete(stringIndex,endIndex + 1);
    }
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
805,"if(!updateProgress(numCompilationUnit, totalCompUnitWorkCompleted++, 95))","if (!updateProgress(numCompilationUnit,totalCompUnitWorkCompleted++,95)) return;
",0,0,4,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
806,if ( (wrap != -1) && (( line += 4 ) == wrap )),"if ((wrap != -1) && ((line+=4) == wrap)) {
  output.append('\n');
  line=0;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
807,"else if ( ( (contextVar = locateForNamed(baseId, ""this"", false)) != null ) &&","if (((contextVar=locateForNamed(baseId,""this"",false)) != null) && (setName(""this"") && (val=locateParentForNamed(contextVar.getValue().getId(),name,true)) != null)) ;
 else if (setName(""_root"") && (val=locateParentForNamed(Value.ROOT_ID,name,true)) != null) ;
 else if (setName(""_global"") && (val=locateParentForNamed(Value.GLOBAL_ID,name,true)) != null) ;
 else if (((contextVal=locate(Value.GLOBAL_ID,getCurrentPackageName(),false)) != null) && (setName(""_global."" + getCurrentPackageName()) && (val=locateParentForNamed(contextVal.getId(),name,true)) != null)) ;
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
808,"else if ( ( (contextVal = locate(Value.GLOBAL_ID, getCurrentPackageName(), false)) != null ) &&","if (((contextVal=locate(Value.GLOBAL_ID,getCurrentPackageName(),false)) != null) && (setName(""_global."" + getCurrentPackageName()) && (val=locateParentForNamed(contextVal.getId(),name,true)) != null)) ;
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
809,if ((data[index++] = readed) == -1) {,"if ((data[index++]=readed) == -1) {
  throw new Base64DecodingException(""decoding.general"");
}
",0,0,4,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
810,for (j = i; Character.isJavaIdentifierPart(text.charAt(--j));) {,"for (j=i; Character.isJavaIdentifierPart(text.charAt(--j)); ) {
  if (j == i - MINIMAL_LENGTH_BEFORE_BREAK) {
    if (buffer == null) {
      buffer=new StringBuilder(text);
    }
    buffer.insert(i,'\u200B');
    break;
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, ForStatement-expression, ),
"
811,do if ((line = in.readLine()) == null) {,"if ((line=in.readLine()) == null) {
  printWarning(""Header \"""" + anchor + ""\"" not found in file ""+ file);
  buffer.setLength(bs);
  buffer.append(reference);
  return;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, DoStatement-body, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, DoStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, DoStatement-body, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, DoStatement-body, ),
"
812,while (--i >= 0 && content.charAt(i) == '>') {,"while (--i >= 0 && content.charAt(i) == '>') {
  i=content.lastIndexOf(""<"",i);
  final int start=i + 1;
  int end=start;
  char c;
  while ((c=content.charAt(end)) >= 'a' && c <= 'z')   end++;
switch (content.substring(start,end)) {
case ""th"":
case ""td"":
    return true;
case ""a"":
  continue;
}
break;
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
813,while ((c = content.charAt(end)) >= 'a' && c <= 'z') end++;,"while ((c=content.charAt(end)) >= 'a' && c <= 'z') end++;
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
814,while (((message=message.trim()).length()) != 0) {,"while (((message=message.trim()).length()) != 0) {
  buffer.append(KEY_MARGIN).append("" * "");
  int stop=message.indexOf('\n');
  if (stop < 0) {
    stop=message.length();
  }
  if (stop > COMMENT_LENGTH) {
    stop=COMMENT_LENGTH;
    while (stop > 20 && !Character.isWhitespace(message.charAt(stop))) {
      stop--;
    }
  }
  buffer.append(message.substring(0,stop).trim()).append(lineSeparator);
  message=message.substring(stop);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
815,if (!isNaN(minimums[i] = category.range.getMinDouble(true))) {,"if (!isNaN(minimums[i]=category.range.getMinDouble(true))) {
  if (range == null) {
    range=categories[0].range;
    assert !isNaN(range.getMinDouble()) : range;
  }
  range=range.unionAny(category.range);
}
",0,0,6,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
816,if (value > (bound = converseRanges[(index << 1) | 1])) return bound;,"if (value > (bound=converseRanges[(index << 1) | 1])) return bound;
",0,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
817,if (extent != 0 && Math.abs(error -= extent) == 1) {,"if (extent != 0 && Math.abs(error-=extent) == 1) {
  final double dmin=Math.abs(min - Math.rint(min));
  final double dmax=Math.abs(max - Math.rint(max));
  final boolean adjustMax=(dmax >= dmin);
  if (Math.abs(span - extent) < (adjustMax ? dmax : dmin)) {
    if (adjustMax)     upper=Math.subtractExact(upper,error);
 else     lower=Math.addExact(lower,error);
  }
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
818,if (env == null || ((nilEnvelope = env.isAllNaN()) && env.getCoordinateReferenceSystem() == null)) {,"if (env == null || ((nilEnvelope=env.isAllNaN()) && env.getCoordinateReferenceSystem() == null)) {
  ArgumentChecks.ensureNonNull(""extent"",extent);
  this.envelope=null;
}
 else {
  this.envelope=env;
  if (extent != null && !nilEnvelope) {
    final MatrixSIS affine=extent.cornerToCRS(env);
    cornerToCRS=MathTransforms.linear(affine);
    final int srcDim=cornerToCRS.getSourceDimensions();
    final int tgtDim=cornerToCRS.getTargetDimensions();
    resolution=new double[tgtDim];
    for (int j=0; j < tgtDim; j++) {
      final DoubleDouble scale=(DoubleDouble)affine.getNumber(j,j);
      final DoubleDouble offset=(DoubleDouble)affine.getNumber(j,srcDim);
      resolution[j]=scale.doubleValue();
      scale.multiply(0.5);
      offset.add(scale);
      affine.setNumber(j,srcDim,offset);
    }
    gridToCRS=MathTransforms.linear(affine);
    return;
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
819,if (!p0.getValueClass().isAssignableFrom(p1.getValueClass())    ||,"if (!p0.getValueClass().isAssignableFrom(p1.getValueClass()) || (minOccurs=p0.getMinimumOccurs()) > p1.getMinimumOccurs() || (maxOccurs=p0.getMaximumOccurs()) < p1.getMaximumOccurs() || (p1 != other && (minOccurs > 1 || maxOccurs < 1))) {
  return false;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
820,if (!Double.isNaN(x1 = v.doubleValue(0)) &&,"if (!Double.isNaN(x1=v.doubleValue(0)) && !Double.isNaN(y1=v.doubleValue(1)) && !Double.isNaN(x2=v.doubleValue(2))&& !Double.isNaN(y2=v.doubleValue(3))) {
  final Line2D path=isFloat ? new Line2D.Float() : new Line2D.Double();
  path.setLine(x1,y1,x2,y2);
  return path;
}
",0,2,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
821,"for (int base=0, n; (n = Math.min(count - base, capacity)) > 0; base += n) {","for (int base=0, n; (n=Math.min(count - base,capacity)) > 0; base+=n) {
  int batch=n * srcDim;
  for (int i=0; i < batch; i++) {
    coordinates[i]=sequence.getOrdinate(base + i / srcDim,i % srcDim);
  }
  transform.transform(coordinates,0,coordinates,0,n);
  batch=n * tgtDim;
  for (int i=0; i < batch; i++) {
    out.setOrdinate(base + i / tgtDim,i % tgtDim,coordinates[i]);
  }
}
",0,0,13,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(Assignment-rightHandSide, ForStatement-updaters, ),
"
822,"if (useSIS || (isSimple = arg.equalsIgnoreCase(""simple"")) || arg.equalsIgnoreCase(""complex"")) {","if (useSIS || (isSimple=arg.equalsIgnoreCase(""simple"")) || arg.equalsIgnoreCase(""complex"")) {
  final FeatureMemoryBenchmark b=new FeatureMemoryBenchmark(useSIS,isSimple);
  long time=System.nanoTime();
  b.run();
  time=System.nanoTime() - time;
  System.console().printf(""Ellapsed time: %f%n"",time / (float)StandardDateFormat.NANOS_PER_SECOND);
  return;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
823,"for (i=bs; (i = buffer.indexOf(""_%"", i)) >= 0;) {","for (i=bs; (i=buffer.indexOf(""_%"",i)) >= 0; ) {
  buffer.deleteCharAt(i);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
824,if ((pos += n) >= length) break parseLine;,"if ((pos+=n) >= length) break parseLine;
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, ),
"
825,"while ((endOfLine = subSQL.indexOf('\n', ++endOfLine)) >= 0) {","while ((endOfLine=subSQL.indexOf('\n',++endOfLine)) >= 0) {
  if (--nrows == 0) {
    int end=endOfLine;
    if (subSQL.charAt(end - 1) == ',') {
      end--;
    }
    count+=statement.executeUpdate(currentSQL=sql.append(subSQL,begin,end).toString());
    sql.setLength(startOfValues);
    nrows=maxRowsPerInsert;
    begin=endOfLine + 1;
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
826,if (an != null || (an = accessor.implementation.getAnnotation(TitleProperty.class)) != null) {,"if (an != null || (an=accessor.implementation.getAnnotation(TitleProperty.class)) != null) {
  return accessor.get(accessor.indexOf(an.name(),false),metadata);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
827,if (FilterByVersion.LEGACY_METADATA.accept() && (info = getIdentificationInfo()) != null) {,"if (FilterByVersion.LEGACY_METADATA.accept() && (info=getIdentificationInfo()) != null) {
  for (  final Identification identification : info) {
    final Citation citation=identification.getCitation();
    if (citation instanceof DefaultCitation) {
      final Collection<? extends OnlineResource> onlineResources=((DefaultCitation)citation).getOnlineResources();
      if (onlineResources != null) {
        for (        final OnlineResource link : onlineResources) {
          final URI uri=link.getLinkage();
          if (uri != null) {
            if (linkage == null) {
              linkage=uri.toString();
            }
 else {
              LegacyPropertyAdapter.warnIgnoredExtraneous(OnlineResource.class,DefaultMetadata.class,""getDataSetUri"");
              break;
            }
          }
        }
      }
    }
  }
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
828,"if (type != null && (""VOICE"".equals(name = type.name()) || ""FACSIMILE"".equals(name))) {","if (type != null && (""VOICE"".equals(name=type.name()) || ""FACSIMILE"".equals(name))) {
  if (phone == null) {
    phone=c;
  }
}
 else if (ignored == null) {
  ignored=type;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
829,if (band >= EXCLUDE_I && ++band >= EXCLUDE_O && ++band == 'Y') {,"if (band >= EXCLUDE_I && ++band >= EXCLUDE_O && ++band == 'Y') {
  band='X';
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
830,"for (int i=sourceDim; --i>=0; indexBase3 /= 3, power3 *= 3) {","for (int i=sourceDim; --i >= 0; indexBase3/=3, power3*=3) {
  final int digitBase3=indexBase3 % 3;
  if (digitBase3 != 2) {
    final int medianIndex=pointIndex + power3 * (2 - digitBase3);
    final Matrix D2=derivatives[medianIndex];
    if (D2 != null) {
      final double xmin=envelope.getMinimum(i);
      final double xmax=envelope.getMaximum(i);
      final double x2=envelope.getMedian(i);
      final double x1=(digitBase3 == 0) ? xmin : xmax;
      final int offset1=targetDim * pointIndex;
      final int offset2=targetDim * medianIndex;
      for (int j=0; j < targetDim; j++) {
        extremum.resolve(x1,coordinates[offset1 + j],D1.getElement(j,i),x2,coordinates[offset2 + j],D2.getElement(j,i));
        boolean isP2=false;
        do {
          final double x=isP2 ? extremum.ex2 : extremum.ex1;
          if (x > xmin && x < xmax) {
            final double y=isP2 ? extremum.ey2 : extremum.ey1;
            if (y < transformed.getMinimum(j) || y > transformed.getMaximum(j)) {
              for (int ib3=pointIndex, dim=sourceDim; --dim >= 0; ib3/=3) {
                final double coordinate;
                if (dim == i) {
                  coordinate=x;
                }
 else switch (ib3 % 3) {
case 0:
                  coordinate=envelope.getMinimum(dim);
                break;
case 1:
              coordinate=envelope.getMaximum(dim);
            break;
case 2:
          coordinate=envelope.getMedian(dim);
        break;
default :
      throw new AssertionError(ib3);
  }
  sourcePt[dim]=coordinate;
}
temporary=transform.transform(sourceView,temporary);
transformed.add(temporary);
}
}
}
 while ((isP2=!isP2) == true);
}
}
}
}
",0,1,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-updaters, ),
"
831,"for (int ib3 = pointIndex, dim = sourceDim; --dim >= 0; ib3 /= 3) {","for (int ib3=pointIndex, dim=sourceDim; --dim >= 0; ib3/=3) {
  final double coordinate;
  if (dim == i) {
    coordinate=x;
  }
 else switch (ib3 % 3) {
case 0:
    coordinate=envelope.getMinimum(dim);
  break;
case 1:
coordinate=envelope.getMaximum(dim);
break;
case 2:
coordinate=envelope.getMedian(dim);
break;
default :
throw new AssertionError(ib3);
}
sourcePt[dim]=coordinate;
}
",0,0,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-updaters, ),
"
832,if (--sourceDimensions >= 0 && sourceDimensions < MAX_CACHED_DIMENSION &&,"if (--sourceDimensions >= 0 && sourceDimensions < MAX_CACHED_DIMENSION && --targetDimensions >= 0 && targetDimensions < MAX_CACHED_DIMENSION) {
  return sourceDimensions * MAX_CACHED_DIMENSION + targetDimensions;
}
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
833,"if ((object = parseAxis             (FIRST, element, null,  Units.METRE )) == null &&","if ((object=parseAxis(FIRST,element,null,Units.METRE)) == null && (object=parsePrimeMeridian(FIRST,element,false,Units.DEGREE)) == null && (object=parseDatum(FIRST,element,null)) == null && (object=parseEllipsoid(FIRST,element)) == null && (object=parseToWGS84(FIRST,element)) == null && (object=parseVerticalDatum(FIRST,element,false)) == null && (object=parseTimeDatum(FIRST,element)) == null && (object=parseParametricDatum(FIRST,element)) == null && (object=parseEngineeringDatum(FIRST,element,false)) == null && (object=parseImageDatum(FIRST,element)) == null && (object=parseOperation(FIRST,element)) == null) {
  throw element.missingOrUnknownComponent(WKTKeywords.GeodeticCRS);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
834,"if ((crs = parseGeodeticCRS    (FIRST, element, 2, null)) == null &&","if ((crs=parseGeodeticCRS(FIRST,element,2,null)) == null && (crs=parseProjectedCRS(FIRST,element,false)) == null && (crs=parseVerticalCRS(FIRST,element,false)) == null && (crs=parseTimeCRS(FIRST,element,false)) == null && (crs=parseParametricCRS(FIRST,element,false)) == null && (crs=parseEngineeringCRS(FIRST,element,false)) == null && (crs=parseImageCRS(FIRST,element)) == null && (crs=parseCompoundCRS(FIRST,element)) == null && (crs=parseFittedCS(FIRST,element)) == null) {
  if (mandatory) {
    throw element.missingOrUnknownComponent(WKTKeywords.GeodeticCRS);
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
835,} else if (Math.abs(unit.getConverterTo(unit = (Unit<Q>) verify).convert(1) - 1) > Numerics.COMPARISON_THRESHOLD) {,"if (Math.abs(unit.getConverterTo(unit=(Unit<Q>)verify).convert(1) - 1) > Numerics.COMPARISON_THRESHOLD) {
  warning(parent,element,Errors.formatInternational(Errors.Keys.UnexpectedScaleFactorForUnit_2,verify,factor),null);
}
 else {
  verify=null;
}
",0,0,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
836,if ((++i % 3) == 0 && element.isEmpty()) {,"if ((++i % 3) == 0 && element.isEmpty()) {
  break;
}
",0,0,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
837,"while ((crs = parseCoordinateReferenceSystem(element, components.size() < 2)) != null) {","while ((crs=parseCoordinateReferenceSystem(element,components.size() < 2)) != null) {
  components.add(crs);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
838,"for (int i = Math.min(domain.size(), range.size()); --i >= 0;) {","for (int i=Math.min(domain.size(),range.size()); --i >= 0; ) {
  final List<Dimension> dimensions=range.get(i).getDimensions();
  if (dimensions.size() != 1 || !dimensions.get(0).equals(domain.get(i))) {
    return axes;
  }
}
",0,1,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
839,if (isGeodetic || crs instanceof ProjectedCRS || (isEngineering = (crs instanceof EngineeringCRS))) {,"if (isGeodetic || crs instanceof ProjectedCRS || (isEngineering=(crs instanceof EngineeringCRS))) {
  final CoordinateSystem cs=crs.getCoordinateSystem();
  final int dim=cs.getDimension();
  if ((dim & ~1) == 2 && (!isGeodetic || (cs instanceof EllipsoidalCS))) {
    if (isEngineering) {
      int n=0;
      for (int i=0; i < dim; i++) {
        if (AxisDirections.isCompass(cs.getAxis(i).getDirection()))         n++;
      }
      if (n != 2)       return 0;
    }
    return dim;
  }
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
840,"if ((filters[i] = dependencies((i==0) ? ""CMPD_HORIZCRS_CODE"" : ""CMPD_VERTCRS_CODE"",","if ((filters[i]=dependencies((i == 0) ? ""CMPD_HORIZCRS_CODE"" : ""CMPD_VERTCRS_CODE"",CoordinateReferenceSystem.class,components.get(i),false)) == null) {
  return Collections.emptySet();
}
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
841,"if ((end = sql.indexOf(']', ++start)) < 0) {","if ((end=sql.indexOf(']',++start)) < 0) {
  throw new IllegalArgumentException(Errors.format(Errors.Keys.MissingCharacterInElement_2,sql.substring(start),']'));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
842,"if (label.endsWith((suffix = ""CRS"")) || label.endsWith(suffix = ""CS"")) {","if (label.endsWith((suffix=""CRS"")) || label.endsWith(suffix=""CS"")) {
  Object cs=object;
  if (object instanceof CoordinateReferenceSystem) {
    cs=((CoordinateReferenceSystem)object).getCoordinateSystem();
  }
  if (cs instanceof EllipsoidalCS) {
    final StringBuilder sb=new StringBuilder(label);
    sb.setLength(label.length() - suffix.length());
    label=sb.append(((CoordinateSystem)cs).getDimension()).append('D').toString();
  }
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
843,if ( !((sourceCRS = op.getSourceCRS()) instanceof GeodeticCRS,"if (!((sourceCRS=op.getSourceCRS()) instanceof GeodeticCRS && (targetCRS=op.getTargetCRS()) instanceof GeodeticCRS && sourceCRS.getCoordinateSystem() instanceof EllipsoidalCS&& targetCRS.getCoordinateSystem() instanceof EllipsoidalCS)) {
  break;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
844,if (!selected[--n].operation.getMathTransform().isIdentity()) {,"if (!selected[--n].operation.getMathTransform().isIdentity()) {
  break;
}
",0,0,5,,"SimpleName(ArrayAccess-array, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
"
845,if (Double.isNaN(target[i] = targets[i][index])) {,"if (Double.isNaN(target[i]=targets[i][index])) {
  return null;
}
",0,1,7,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
"
846,"for (int i=s.indexOf(toSearch); ++i != 0; i=s.indexOf(toSearch, i)) {","for (int i=s.indexOf(toSearch); ++i != 0; i=s.indexOf(toSearch,i)) {
  n++;
}
",0,1,12,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ForStatement-updaters, ),
"
847,for (int j=length + i; (j -= numCol) >= 0;) {,"for (int j=length + i; (j-=numCol) >= 0; ) {
  if (elements[j] != 0) {
    continue next;
  }
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
848,searchNaN:  for (int flatIndex = (size - 1) * size; --flatIndex >= 0;) {,"for (int flatIndex=(size - 1) * size; --flatIndex >= 0; ) {
  if (Double.isNaN(LU[flatIndex])) {
    final int j=flatIndex / size;
    final int i=flatIndex % size;
    int columnOfScale=-1;
    if (i != lastRowOrColumn) {
      columnOfScale=i;
      for (int k=lastRowOrColumn; --k >= 0; ) {
        if (k != j && LU[k * size + i] != 0) {
          indexOfNaN=null;
          indexCount=0;
          break searchNaN;
        }
      }
    }
    for (int k=lastRowOrColumn; --k >= 0; ) {
      if (k != i && LU[j * size + k] != 0) {
        if (columnOfScale >= 0) {
          indexOfNaN=null;
          indexCount=0;
          break searchNaN;
        }
        columnOfScale=k;
      }
    }
    if (indexOfNaN == null) {
      indexOfNaN=new int[lastRowOrColumn * (2 * TUPLE_SIZE)];
    }
    indexOfNaN[indexCount++]=i;
    indexOfNaN[indexCount++]=j;
    indexOfNaN[indexCount++]=columnOfScale;
    assert (indexCount % TUPLE_SIZE) == 0;
  }
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, LabeledStatement-body, ),
"
849,if (!(last <= (last = values[i]))) {,"if (!(last <= (last=values[i]))) {
  inverse=null;
  return;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
850,if (elt[n + i] != (++i == numCol ? 1 : 0)) {,"if (elt[n + i] != (++i == numCol ? 1 : 0)) {
  return this;
}
",0,0,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
851,if (elt[mix++] != (i == j ? 1 : 0)) {,"if (elt[mix++] != (i == j ? 1 : 0)) {
  return false;
}
",0,0,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
852,"for (int c; (c = buffer.codePointBefore(start)) != ',';) {","for (int c; (c=buffer.codePointBefore(start)) != ','; ) {
  start-=Character.charCount(c);
  if (c == '\'') {
    while (true) {
      c=buffer.codePointBefore(start);
      start-=Character.charCount(c);
      if (c == '\'') {
        if (buffer.codePointBefore(start) != '\'') {
          break;
        }
        start--;
      }
    }
  }
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
853,for (int i=0; (eccentricity = min + step*i) < max; i++) {,"for (int i=0; (eccentricity=min + step * i) < max; i++) {
  if (!crossThreshold && eccentricity >= ConformalProjection.ECCENTRICITY_THRESHOLD) {
    crossThreshold=true;
    table.appendHorizontalSeparator();
  }
  final double semiMinor=sqrt(1 - eccentricity * eccentricity);
  final MercatorMethodComparison alt=new MercatorMethodComparison(new NoOp(1,semiMinor));
  alt.compare(10000,table);
}
",0,0,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
854,"for (int i=min(split.length, 4); --i >= 0;) {","for (int i=min(split.length,4); --i >= 0; ) {
  final double value=Double.parseDouble(split[i].toString());
  if (i <= 1)   source[i ^ 1]=value;
 else   target[i - 2]=value;
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
855,for (int i = base + (4*DIM); --i >= base;) {,"for (int i=base + (4 * DIM); --i >= base; ) {
  double v=corners[i];
  if (v < ymin)   ymin=v;
  if (v > ymax)   ymax=v;
  v=corners[--i];
  if (v < xmin)   xmin=v;
  if (v > xmax)   xmax=v;
}
",0,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
856,for (int i = round(coordinates.length * propNaN); --i >= 0;) {,"for (int i=round(coordinates.length * propNaN); --i >= 0; ) {
  coordinates[random.nextInt(coordinates.length)]=Double.NaN;
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
857,while ((i = resources.size()) != 0) try {,"try {
  resources.remove(i - 1).call();
}
 catch (Exception e) {
  if (exception != null) {
    e.addSuppressed(exception);
  }
  exception=e;
}
",0,0,0,,
858,"if (codeForGML(null, null, uri, ++upper, result) != null) {","if (codeForGML(null,null,uri,++upper,result) != null) {
  return result;
}
",0,0,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
859,while ((length -= n) >= 0 && buffer.charAt(length) == separator) {,"while ((length-=n) >= 0 && buffer.charAt(length) == separator) {
  if (isHTTP && buffer.charAt(length + 1) != NO_VERSION.charAt(0))   break;
  buffer.setLength(length);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
860,if (++i >= length) return true;,"if (++i >= length) return true;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
861,"if (width > length && (width -= value.codePointCount(0, length)) > 0) {","if (width > length && (width-=value.codePointCount(0,length)) > 0) {
  format=""%s%s"";
  args=new Object[]{value,value};
  args[(flags & FormattableFlags.LEFT_JUSTIFY) != 0 ? 1 : 0]=CharSequences.spaces(width);
}
 else {
  format=isUpperCase ? ""%S"" : ""%s"";
  args=new Object[]{value};
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
862,"if (!Objects.equals(this.array[i++], that.array[j++])) {","if (!Objects.equals(this.array[i++],that.array[j++])) {
  return false;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
863,while ((c = coefficients[lower]) == 0) lower++;,"while ((c=coefficients[lower]) == 0) lower++;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
864,if (!(ymin > (ymin = abs(y)))) break;,"if (!(ymin > (ymin=abs(y)))) break;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
865,if (w > 0 && (h = hemisphere(isNegative(θ))) != 0 && --w == 0) {,"if (w > 0 && (h=hemisphere(isNegative(θ))) != 0 && --w == 0) {
  value=Character.toString(h);
}
 else {
  final AngleFormat format=new AngleFormat(formatter.locale());
  if (w > 0) {
    format.setMaximumWidth(w);
  }
  value=format.format(this,new StringBuffer(),null).toString();
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
866,while ((i += charCount) < length && pattern.codePointAt(i) == c) {,"while ((i+=charCount) < length && pattern.codePointAt(i) == c) {
  width++;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
867,if (--s > 0 && isDigit(uom.charAt(s))) {,"if (--s > 0 && isDigit(uom.charAt(s))) {
  do   if (--s < 0)   break appPow;
 while (isDigit(uom.charAt(s)));
  if (uom.charAt(s) == '-') {
    if (--s < 0)     break appPow;
  }
  unit=map.get(uom.substring(0,++s));
  if (unit != null) {
    unit=unit.pow(Integer.parseInt(uom.substring(s)));
  }
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
868,do if (--s < 0) break appPow;,"if (--s < 0) break appPow;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, DoStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, DoStatement-body, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, DoStatement-body, ),
"
869,if (--s < 0) break appPow;,"if (--s < 0) break appPow;
",0,0,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, ),
"
870,if ((component = labelToUnit.get(uom)) != null) break;,"if ((component=labelToUnit.get(uom)) != null) break;
",0,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
871,if (!(operation.finished = (component != null))) {,"if (!(operation.finished=(component != null))) {
  component=parseTerm(symbols,start,i,operation);
}
",0,0,3,,"QualifiedName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
872,if (s >= 0 || (s = term.lastIndexOf(Style.EXPONENT)) >= 0) {,"if (s >= 0 || (s=term.lastIndexOf(Style.EXPONENT)) >= 0) {
  exponent=term.substring(s + 1);
}
 else {
  s=term.length();
  int c=term.codePointBefore(s);
  if (!Characters.isSuperScript(c)) {
    return Double.parseDouble(term);
  }
  final StringBuilder buffer=new StringBuilder(s);
  do {
    buffer.appendCodePoint(Characters.toNormalScript(c));
    if ((s-=Character.charCount(c)) <= 0)     break;
    c=term.codePointBefore(s);
  }
 while (Characters.isSuperScript(c));
  exponent=buffer.reverse().toString();
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
873,for (i = data.length; --i >= 0;) {,"for (i=data.length; --i >= 0; ) {
  final double d=data[i];
  final float f=(float)d;
  if (Double.doubleToRawLongBits(d) != Double.doubleToRawLongBits(f)) {
    return null;
  }
  result[i]=f;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
QualifiedName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
874,if (head == 0 || text.charAt(--toIndex) == head) {,"if (head == 0 || text.charAt(--toIndex) == head) {
  return toIndex;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
875,if (fromIndex < 0 || fromIndex + (length = part.length()) > text.length()) {,"if (fromIndex < 0 || fromIndex + (length=part.length()) > text.length()) {
  return false;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
876,"while (upper<length && getType(c = codePointAt(text, upper)) == type) {","while (upper < length && getType(c=codePointAt(text,upper)) == type) {
  upper+=charCount(c);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
877,for (Throwable cause; exception.getClass().isInstance(cause = exception.getCause());) {,"for (Throwable cause; exception.getClass().isInstance(cause=exception.getCause()); ) {
  exception=(Exception)cause;
}
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, ForStatement-expression, ),
"
878,if (c < 'A' || (c -= (c >= 'a') ? ('a' - 1) : ('A' - 1)) > 26) {,"if (c < 'A' || (c-=(c >= 'a') ? ('a' - 1) : ('A' - 1)) > 26) {
  return 0;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
879,if (s != null && s.get(ordinal -= Long.SIZE)) {,"if (s != null && s.get(ordinal-=Long.SIZE)) {
  s.clear(ordinal);
  return true;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
880,for (int i=methods.length-1; --i>=0;) {,"for (int i=methods.length - 1; --i >= 0; ) {
  final FrameworkMethod method=methods[i];
  final DependsOnMethod depend=method.getAnnotation(DependsOnMethod.class);
  if (depend != null) {
    dependencies.addAll(Arrays.asList(depend.value()));
    for (int j=methods.length; --j > i; ) {
      if (dependencies.contains(methods[j].getName())) {
        System.arraycopy(methods,i + 1,methods,i,j - i);
        methods[j]=method;
        if (--retryCount >= 0) {
          i=j;
        }
        break;
      }
    }
    dependencies.clear();
  }
}
",0,0,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
881,"for (int i=margin; (i=buffer.indexOf(""\n\t"", i)) >= 0; i += margin) {","for (int i=margin; (i=buffer.indexOf(""\n\t"",i)) >= 0; i+=margin) {
  buffer.replace(positionOfLast=++i,i + 1,spaces);
}
",0,0,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(Assignment-rightHandSide, ForStatement-updaters, ),
"
882,for (component = PRIMEM; ++component < names.length; component++) {,"for (component=PRIMEM; ++component < names.length; component++) {
  c=names[component];
  if (c != null) {
    break;
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
883,for (int c=x.length * y.length; --c >= 0;) {,"for (int c=x.length * y.length; --c >= 0; ) {
  final int i=x[c % y.length];
  final int j=y[c / y.length];
  final double vo=coordinates.coordinateForAxis(i,j);
  xInc+=coordinates.coordinateForAxis(i + 1,j) - vo;
  yInc+=coordinates.coordinateForAxis(i,j + 1) - vo;
}
",0,0,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
884,"if (!createEnumeration(builder, band, index) && (range = band.getValidRange()) != null) try {","if (!createEnumeration(builder,band,index) && (range=band.getValidRange()) != null) try {
  final MathTransform1D mt=band.getTransferFunction().getTransform();
  if (!mt.isIdentity() && range instanceof MeasurementRange<?>) {
    final MathTransform1D inverse=mt.inverse();
    boolean isMinIncluded=range.isMinIncluded();
    boolean isMaxIncluded=range.isMaxIncluded();
    double minimum=inverse.transform(range.getMinDouble());
    double maximum=inverse.transform(range.getMaxDouble());
    if (maximum < minimum) {
      final double swap=maximum;
      maximum=minimum;
      minimum=swap;
      final boolean sb=isMaxIncluded;
      isMaxIncluded=isMinIncluded;
      isMinIncluded=sb;
    }
    if (band.getDataType().number <= Numbers.LONG && minimum >= Long.MIN_VALUE && maximum <= Long.MAX_VALUE) {
      range=NumberRange.create(Math.round(minimum),isMinIncluded,Math.round(maximum),isMaxIncluded);
    }
 else {
      range=NumberRange.create(minimum,isMinIncluded,maximum,isMaxIncluded);
    }
  }
  if (range.isEmpty()) {
    band.warning(RasterResource.class,""getSampleDimensions"",Resources.Keys.IllegalValueRange_4,band.getFilename(),band.getName(),range.getMinValue(),range.getMaxValue());
  }
 else {
    String name=band.getDescription();
    if (name == null)     name=band.getName();
    builder.addQuantitative(name,range,mt,band.getUnit());
  }
}
 catch (TransformException e) {
  warning(e);
}
",0,0,8,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
885,"if (columnIndices.put(column, ++columnCount) == null) return columnCount;","if (columnIndices.put(column,++columnCount) == null) return columnCount;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
886,"if (tn.regionMatches(true, 0, TYPE_PREFIX, 0, length = TYPE_PREFIX.length()) ||","if (tn.regionMatches(true,0,TYPE_PREFIX,0,length=TYPE_PREFIX.length()) || tn.regionMatches(true,0,XS_PREFIX,0,length=XS_PREFIX.length())) {
  String st=tn.substring(length).toLowerCase(Locale.US);
switch (st) {
case ""boolean"":
    type=Boolean.class;
  break;
case ""decimal"":
type=Double.class;
break;
case ""integer"":
type=Integer.class;
break;
case ""string"":
type=String.class;
break;
case ""datetime"":
type=Instant.class;
break;
case ""anyuri"":
type=URI.class;
break;
default :
throw new DataStoreContentException(errors().getString(Errors.Keys.UnknownType_1,tn));
}
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
887,if (++cursor[i] < region.targetSize[contiguousDataDimension + i]) {,"if (++cursor[i] < region.targetSize[contiguousDataDimension + i]) {
  streamPosition=Math.addExact(streamPosition,strides[i]);
  arrayPosition=Math.addExact(arrayPosition,contiguousDataLength);
  continue loop;
}
",0,0,5,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
888,if ((keyword[--pos] &= ~0x20) == 'R') {,"if ((keyword[--pos]&=~0x20) == 'R') {
  keyword[--pos]&=~0x20;
  version=2;
}
",0,0,4,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
889,"while (noPackages < maxNumberOfPackages && ((retrievedPackage = distributionTransport.retrievePackage(resourceResolver, distributionRequest, distributionContext)) != null)) {","while (noPackages < maxNumberOfPackages && ((retrievedPackage=distributionTransport.retrievePackage(resourceResolver,distributionRequest,distributionContext)) != null)) {
  DistributionPackage distributionPackage=retrievedPackage.getPackage();
  try {
    packageProcessor.process(distributionPackage);
    retrievedPackage.deleteRemotePackage();
  }
  finally {
    DistributionPackageUtils.closeSafely(distributionPackage);
  }
  noPackages++;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
890,while ((type = framework.waitForStop(Long.MAX_VALUE).getType()) == FrameworkEvent.STOPPED_UPDATE) {,"while ((type=framework.waitForStop(Long.MAX_VALUE).getType()) == FrameworkEvent.STOPPED_UPDATE) {
  logger.info(""Framework restart due to update"");
  time=System.currentTimeMillis();
  if (!this.startFramework(framework,startTimeout,TimeUnit.SECONDS)) {
    throw new TimeoutException(""Waited for more than "" + startTimeout + "" seconds to startup framework."");
  }
  logger.debug(""Restart took: "" + (System.currentTimeMillis() - time));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
891,"while ((foundAt = value.indexOf(""${"", prevAt)) >= prevAt) {","while ((foundAt=value.indexOf(""${"",prevAt)) >= prevAt) {
  substitution.append(value.substring(prevAt,foundAt));
  String propertyName=value.substring(foundAt + 2,value.indexOf('}',foundAt));
  String propertyValue=bundleContext == null ? System.getProperty(propertyName) : bundleContext.getProperty(propertyName);
  if (propertyValue != null) {
    substitution.append(propertyValue);
    if (propertyValue.charAt(propertyValue.length() - 1) != File.separatorChar) {
      substitution.append(File.separatorChar);
    }
  }
  prevAt=foundAt + propertyName.length() + 3;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
892,while ((line = (reader.readLine())) != null) {,"while ((line=(reader.readLine())) != null) {
  if (line.startsWith(""#""))   continue;
  String[] entry=line.split(""\\s*=\\s*"");
  if (entry.length == 2) {
    calaisTypeMap.put(new IRI(entry[0]),new IRI(entry[1]));
  }
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
893,"if ((method = findMethod(sqlCreateFunction.className(), ""evaluate"")) != null) {","if ((method=findMethod(sqlCreateFunction.className(),""evaluate"")) != null) {
  function=ScalarFunctionImpl.create(method);
}
 else if (findMethod(sqlCreateFunction.className(),""add"") != null) {
  function=AggregateFunctionImpl.create(Class.forName(sqlCreateFunction.className()));
}
 else {
  throw new RuntimeException(""Invalid scalar or aggregate function"");
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
894,"} else if ((conf = readStormConfig()).get(""storm.log.dir"") != null) {","if ((conf=readStormConfig()).get(""storm.log.dir"") != null) {
  dir=String.valueOf(conf.get(""storm.log.dir""));
}
 else if (System.getProperty(STORM_HOME) != null) {
  dir=System.getProperty(STORM_HOME) + FILE_SEPARATOR + ""logs"";
}
 else {
  dir=""logs"";
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
895,while (this.getTotalOutstanding() > WAITING_DOCS_LIMIT && count++ < 500) {,"while (this.getTotalOutstanding() > WAITING_DOCS_LIMIT && count++ < 500) {
  Thread.sleep(10);
}
",0,0,5,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
896,} else if (null == (generatedId = escape(name != null ? findString(name) : null))) {,"if (null == (generatedId=escape(name != null ? findString(name) : null))) {
  LOG.debug(""Cannot determine id attribute for [{}], consider defining id, name or key attribute!"",this);
  tryId=null;
}
 else if (form != null) {
  tryId=form.getParameters().get(""id"") + ""_"" + generatedId;
}
 else {
  tryId=generatedId;
}
",0,0,8,,"NullLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
897,"while ((parentTheme = (String) engine.getThemeProps(template).get(""parent"")) != null) {","while ((parentTheme=(String)engine.getThemeProps(template).get(""parent"")) != null) {
  try {
    template=(Template)template.clone();
    template.theme=parentTheme;
    list.add(template);
  }
 catch (  CloneNotSupportedException e) {
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
898,while (!f.setLastModified(curr = System.currentTimeMillis()) || orig == f.lastModified()) {,"while (!f.setLastModified(curr=System.currentTimeMillis()) || orig == f.lastModified()) {
  Thread.sleep(500);
  assertTrue(""Waited more than "" + FILE_TS_WAIT_IN_MS + "" ms to update timestamp on file: ""+ f,maxwait > curr);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
899,while (i.hasNext() && ((wk = (WebContinuation) i.next()).hasExpired())) {,"while (i.hasNext() && ((wk=(WebContinuation)i.next()).hasExpired())) {
  i.remove();
  WebContinuationsHolder continuationsHolder=null;
  if (wk instanceof HolderAwareWebContinuation)   continuationsHolder=((HolderAwareWebContinuation)wk).getContinuationsHolder();
 else   continuationsHolder=this.continuationsHolder;
  removeContinuation(continuationsHolder,wk);
  count++;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
900,if ((propertyCache == null) || ((result = (List) propertyCache.get(propertyName)) == null)) {,"if ((propertyCache == null) || ((result=(List)propertyCache.get(propertyName)) == null)) {
  String baseName=Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
  for (Class c=targetClass; c != null; c=c.getSuperclass()) {
    Method[] methods=c.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      if (!isMethodCallable(methods[i]))       continue;
      String ms=methods[i].getName();
      if (ms.endsWith(baseName)) {
        boolean isSet=false, isIs=false;
        if ((isSet=ms.startsWith(SET_PREFIX)) || ms.startsWith(GET_PREFIX) || (isIs=ms.startsWith(IS_PREFIX))) {
          int prefixLength=(isIs ? 2 : 3);
          if (isSet == findSets) {
            if (baseName.length() == (ms.length() - prefixLength)) {
              if (result == null) {
                result=new ArrayList();
              }
              result.add(methods[i]);
            }
          }
        }
      }
    }
  }
  if (propertyCache == null) {
    cache.put(targetClass,propertyCache=new HashMap(101));
  }
  propertyCache.put(propertyName,(result == null) ? NotFoundList : result);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
901,if (((isSet = methodName.startsWith(SET_PREFIX)) || (isGet = methodName.startsWith(GET_PREFIX))),"if (((isSet=methodName.startsWith(SET_PREFIX)) || (isGet=methodName.startsWith(GET_PREFIX))) && (methodName.length() > 3)) {
  String propertyName=Introspector.decapitalize(methodName.substring(3));
  Class[] parameterTypes=getParameterTypes(m);
  int parameterCount=parameterTypes.length;
  if (isGet && (parameterCount == 1) && (m.getReturnType() != Void.TYPE)) {
    List pair=(List)pairs.get(propertyName);
    if (pair == null) {
      pairs.put(propertyName,pair=new ArrayList());
    }
    pair.add(m);
  }
  if (isSet && (parameterCount == 2) && (m.getReturnType() == Void.TYPE)) {
    List pair=(List)pairs.get(propertyName);
    if (pair == null) {
      pairs.put(propertyName,pair=new ArrayList());
    }
    pair.add(m);
  }
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
902,if (value != null && !(value instanceof String || (sourceIsArray = (value instanceof String[])))),"if (value != null && !(value instanceof String || (sourceIsArray=(value instanceof String[])))) return value;
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
903,if ((nextEntry = (HashEntry) currentTable[nextTableIndex--]) != null),"if ((nextEntry=(HashEntry)currentTable[nextTableIndex--]) != null) return;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
904,"while (prefix.equals("""") && ((lastSlash = uri.lastIndexOf(""/"")) > 0)) {","while (prefix.equals("""") && ((lastSlash=uri.lastIndexOf(""/"")) > 0)) {
  uri=uri.substring(0,lastSlash);
  for (int i=0; i < prefixes.length; i++) {
    if (uri.equals(prefixes[i])) {
      prefix=prefixes[i];
      break;
    }
  }
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
905,while( pos<_size && rix0 == _rindexes[pos++] ),"while (pos < _size && rix0 == _rindexes[pos++]) cnt++;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
906,while( value==bv[ix++] && ix<bv.length ) {},"while (value == bv[ix++] && ix < bv.length) {
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
907,"if (charIdx < chars.length && (node[nodeIndex].key = index_seq_search(chars, charIdx)) != null) {","if (charIdx < chars.length && (node[nodeIndex].key=index_seq_search(chars,charIdx)) != null) {
  node[nodeIndex].type=NODE_TYPE_ACTION;
  node[nodeIndex].suffix=0;
  node_set=true;
  if (node[nodeIndex].key.len > 0) {
    charIdx+=node[nodeIndex].key.len;
  }
  if (ver == FORMAT_TYPE.NUM_TYPE) {
  }
  if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length && (s=suff_search(chars,charIdx,SUFFTYPE_POSTFIX)) != null) {
    suffix|=s.id;
    if (s.len > 0) {
      charIdx+=s.len;
    }
  }
}
 else if (charIdx < chars.length) {
  if (chars[charIdx] == '""' && last != '\\') {
    int x=0;
    while (charIdx < chars.length) {
      charIdx++;
      if (chars[charIdx] == '""' && x != '\\') {
        charIdx++;
        break;
      }
 else       if (chars[charIdx] == '\\' && x != '\\') {
        x='\\';
        continue;
      }
      node[nodeIndex].type=NODE_TYPE_CHAR;
      node[nodeIndex].character=chars[charIdx];
      node[nodeIndex].key=null;
      node[nodeIndex].suffix=0;
      nodeIndex++;
      x=chars[charIdx];
    }
    node_set=false;
    suffix=0;
    last=0;
  }
 else   if (charIdx < chars.length - 1 && chars[charIdx] == '\\' && last != '\\' && chars[charIdx + 1] == '""') {
    last=chars[charIdx];
    charIdx++;
  }
 else   if (charIdx < chars.length) {
    node[nodeIndex].type=NODE_TYPE_CHAR;
    node[nodeIndex].character=chars[charIdx];
    node[nodeIndex].key=null;
    node_set=true;
    last=0;
    charIdx++;
  }
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
908,"if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length  && (s = suff_search(chars, charIdx, SUFFTYPE_POSTFIX)) != null) {","if (ver == FORMAT_TYPE.DCH_TYPE && charIdx < chars.length && (s=suff_search(chars,charIdx,SUFFTYPE_POSTFIX)) != null) {
  suffix|=s.id;
  if (s.len > 0) {
    charIdx+=s.len;
  }
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
909,if (!WritableTypeConverter.convertWritableToTajoType(writable).equals(tajoParams[i++])) {,"if (!WritableTypeConverter.convertWritableToTajoType(writable).equals(tajoParams[i++])) {
  return false;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
910,while ((entities = getJsonRootEntity(url).optJSONArray(Constants.ENTITIES)) != null,"while ((entities=getJsonRootEntity(url).optJSONArray(Constants.ENTITIES)) != null && entities.length() > 0) {
  int limit=(entities.length() >= batchSize) ? (entities.length() - 1) : entities.length();
  LOG.debug(""Limit={}, downloaded entities len={}"",limit,entities.length());
  ZipEntry zipEntry=new ZipEntry(""part-"" + System.currentTimeMillis() + "".json"");
  zos.putNextEntry(zipEntry);
  JSONObject finalJson=new JSONObject();
  finalJson.put(tag,entities);
  IOUtils.write(finalJson.toString(4),zos,""UTF-8"");
  downloadedCount+=entities.length();
  if (entities.length() < batchSize) {
    break;
  }
  url=baseUrl + ""&fromId="" + entities.getJSONObject(entities.length() - 1).getString(Constants.ENTITY);
  String firstItem=entities.getJSONObject(0).getString(Constants.ENTITY);
  String lastItem=entities.getJSONObject(entities.length() - 1).getString(Constants.ENTITY);
  LOG.info(""Downloaded={}, First item={}, LastItem={}, new url={}"",downloadedCount,firstItem,lastItem,url);
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
911,while (fNameBase != null && Files.exists(cand) && ++cnt < 10000) {,"while (fNameBase != null && Files.exists(cand) && ++cnt < 10000) {
  String candFileName=fNameBase + ""("" + cnt+ "").""+ fNameExt+ """"+ localSuffix;
  cand=FSUtil.resolveRelative(outputParent,candFileName);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
912,while ((matchlen-- > 0) && (prevcontent != null) && ((runsrc + 1) > 0)),"while ((matchlen-- > 0) && (prevcontent != null) && ((runsrc + 1) > 0)) if ((rundest < content.length) && (runsrc < content.length)) {
  content[rundest++]=prevcontent[runsrc++];
}
",0,0,7,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
913,while (zae != null && !zae.isDirectory() && ++cnt <= 10) {,"while (zae != null && !zae.isDirectory() && ++cnt <= 10) {
  System.out.println(f.getName() + "" : "" + zae.getName());
  if (zae.getName().equals(""_rels/.rels"")) {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    IOUtils.copy(zipArchiveInputStream,bos);
    System.out.println(new String(bos.toByteArray(),StandardCharsets.UTF_8));
  }
  zae=zipArchiveInputStream.getNextZipEntry();
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
914,"while ((bytesRead = reader.read(buffer, 0, Math.min(max, 1024))) > 0) {","while ((bytesRead=reader.read(buffer,0,Math.min(max,1024))) > 0) {
  sb.append(buffer,0,bytesRead);
  max-=bytesRead;
}
",0,0,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
915,while (counter++ < amount && this.hasNext()) {,"while (counter++ < amount && this.hasNext()) {
  result.add(this.next());
}
",0,0,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
916,if ((p = traversal.getParent()) instanceof FilterStep && !(p instanceof ConnectiveStep)) {,"if ((p=traversal.getParent()) instanceof FilterStep && !(p instanceof ConnectiveStep)) {
  final Step<?,?> filterStep=parent.asStep();
  final Traversal.Admin parentTraversal=filterStep.getTraversal();
  final Step notStep=new NotStep<>(parentTraversal,traversal.getSteps().isEmpty() ? __.identity() : traversal);
  filterStep.getLabels().forEach(notStep::addLabel);
  TraversalHelper.replaceStep(filterStep,notStep,parentTraversal);
}
 else {
  final Traversal.Admin inner;
  if (prev != null) {
    inner=__.start().asAdmin();
    for (; ; ) {
      final Step pp=prev.getPreviousStep();
      inner.addStep(0,prev);
      if (pp instanceof EmptyStep || pp instanceof GraphStep || !(prev instanceof FilterStep || prev instanceof SideEffectStep))       break;
      traversal.removeStep(prev);
      prev=pp;
      size--;
    }
  }
 else {
    inner=__.identity().asAdmin();
  }
  if (prev != null)   TraversalHelper.replaceStep(prev,new NotStep<>(traversal,inner),traversal);
 else   traversal.asAdmin().addStep(new NotStep<>(traversal,inner));
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
917,if ((buffer[0] = PATTERN[0]) == inputStream.readByte()) {,"if ((buffer[0]=PATTERN[0]) == inputStream.readByte()) {
  inputStream.read(nextStart + 1,buffer,1,PATTERN.length - 1);
  if (patternMatch(buffer)) {
    inputStream.seek(nextStart);
    return nextStart;
  }
}
 else {
  nextStart=nextStart + 1;
  inputStream.seek(nextStart);
}
",0,0,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
918,if (counter++ < batchSize || index == this.workerVertices.size() - 1) {,"if (counter++ < batchSize || index == this.workerVertices.size() - 1) {
  currentWorkerVertices.add(vertex);
}
 else {
  currentWorkerVertices=this.workerVertices.get(++index);
  currentWorkerVertices.add(vertex);
  counter=1;
}
",0,0,7,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
919,while (inBuffer.position() == 0 && (canRead = isActive() && !isInputFinished())) {,"while (inBuffer.position() == 0 && (canRead=isActive() && !isInputFinished())) {
  try {
    if (log.isDebugEnabled()) {
      log.debug(sm.getString(""stream.inputBuffer.empty""));
    }
    long readTimeout=handler.getProtocol().getStreamReadTimeout();
    if (readTimeout < 0) {
      inBuffer.wait();
    }
 else {
      inBuffer.wait(readTimeout);
    }
    if (resetReceived) {
      throw new IOException(sm.getString(""stream.inputBuffer.reset""));
    }
    if (inBuffer.position() == 0 && isActive() && !isInputFinished()) {
      String msg=sm.getString(""stream.inputBuffer.readTimeout"");
      StreamException se=new StreamException(msg,Http2Error.ENHANCE_YOUR_CALM,getIdAsInt());
      coyoteResponse.setError();
      streamOutputBuffer.reset=se;
      throw new CloseNowException(msg,se);
    }
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
920,if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {,"if (getState() >= 0 && (t=thread) != null && !t.isInterrupted()) {
  try {
    t.interrupt();
  }
 catch (  SecurityException ignore) {
  }
}
",0,0,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
921,"while ((n = is.read(buf, off, l - off)) != -1 && (l - off != 0)) {","while ((n=is.read(buf,off,l - off)) != -1 && (l - off != 0)) {
  total+=n;
  off+=n;
}
",0,0,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
922,for (i = start; !aRef && (i < limit) &&,"for (i=start; !aRef && (i < limit) && ((c=spec.charAt(i)) != '/'); i++) {
  if (c == ':') {
    String s=spec.substring(start,i).toLowerCase();
    newProtocol=s;
    start=i + 1;
    break;
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
"
923,while ( (events.size() > 0) && (r = (Runnable)events.removeFirst()) != null ) {,"while ((events.size() > 0) && (r=(Runnable)events.removeFirst()) != null) {
  try {
    if (log.isTraceEnabled())     log.trace(""Processing event in selector:"" + r);
    r.run();
  }
 catch (  Exception x) {
    log.error("""",x);
  }
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
924,"while (((line = cgiHeaderReader.readLine()) != null) && !("""".equals(line))) {","while (((line=cgiHeaderReader.readLine()) != null) && !("""".equals(line))) {
  if (log.isTraceEnabled()) {
    log.trace(""addHeader(\"""" + line + ""\"")"");
  }
  if (line.startsWith(""HTTP"")) {
    skipBody=setStatus(response,getSCFromHttpStatusLine(line));
  }
 else   if (line.indexOf(':') >= 0) {
    String header=line.substring(0,line.indexOf(':')).trim();
    String value=line.substring(line.indexOf(':') + 1).trim();
    if (header.equalsIgnoreCase(""status"")) {
      skipBody=setStatus(response,getSCFromCGIStatusHeader(value));
    }
 else {
      response.addHeader(header,value);
    }
  }
 else {
    log.info(sm.getString(""cgiServlet.runBadHeader"",line));
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
925,"while ((read = doRead(readChunk, null)) >= 0) {","while ((read=doRead(readChunk,null)) >= 0) {
  swallowed+=read;
  if (maxSwallowSize > -1 && swallowed > maxSwallowSize) {
    throwIOException(sm.getString(""inputFilter.maxSwallow""));
  }
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
926,while (!level.quit.equals((msg = queue.take()).l)) {,"while (!level.quit.equals((msg=queue.take()).l)) {
  final Throwable t=msg.t;
  if (null != t) {
switch (msg.l) {
case fatal:
      msg.ls.fatal(msg.s,t);
    break;
case error:
  msg.ls.error(msg.s,t);
break;
case warn:
msg.ls.warn(msg.s,t);
break;
case info:
msg.ls.info(msg.s,t);
break;
case debug:
msg.ls.debug(msg.s,t);
break;
}
}
 else {
switch (msg.l) {
case fatal:
msg.ls.fatal(msg.s);
break;
case error:
msg.ls.error(msg.s);
break;
case warn:
msg.ls.warn(msg.s);
break;
case info:
msg.ls.info(msg.s);
break;
case debug:
msg.ls.debug(msg.s);
break;
}
}
}
",0,0,6,,"QualifiedName(MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
927,for (int l=Integer.parseInt(lines);l-->0;),"for (int l=Integer.parseInt(lines); l-- > 0; ) {
  pout.write(""<span>"" + l + "" </span>"");
  pout.write(line);
}
",0,0,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
928,if ( --count >= 0 && StringUtils.isNotEmpty(items[count]) ),"if (--count >= 0 && StringUtils.isNotEmpty(items[count])) {
  String charset;
  base.insert(0,items[count]);
  int length=base.length();
  for (int i=count; i > 0; i--) {
    if (i == count || i <= 1) {
      base.insert(0,'_');
      length++;
    }
    charset=searchCharSet(items,base,i);
    if (charset.length() > 0) {
      return charset;
    }
    base.delete(0,base.length() - length);
  }
  return searchCharSet(base.toString());
}
 else {
  return """";
}
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
929,if(columnIndex >=0 && ((existing = getResultDescriptor(columnIndex)) != null) ){,"if (columnIndex >= 0 && ((existing=getResultDescriptor(columnIndex)) != null)) {
  this.resultDescriptors.remove(existing);
  refreshResultSetShape();
  return existing;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
930,while (count++ < 30 && (aFile.exists() == false)) {,"while (count++ < 30 && (aFile.exists() == false)) {
  try {
    Thread.sleep(timeout);
  }
 catch (  InterruptedException ie) {
  }
}
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
931,"if ((resolveMethod = model.getClass().getMethod(""resolve"", ModelResolver.class)) != null) {","if ((resolveMethod=model.getClass().getMethod(""resolve"",ModelResolver.class)) != null) {
  resolveMethod.invoke(model,resolver);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
932,"for (EObject container = o.eContainer(), grandContainer; (grandContainer = container.eContainer()) != null; container = grandContainer)","for (EObject container=o.eContainer(), grandContainer; (grandContainer=container.eContainer()) != null; container=grandContainer) margin.append(indent);
",0,1,11,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(Assignment-rightHandSide, ForStatement-updaters, ),
"
933,"if ( ( typeDef = (XSDTypeDefinition)xsdTypeDefs.get(asQualifiedName(namespaceURI, typeName)) ) == null )","if ((typeDef=(XSDTypeDefinition)xsdTypeDefs.get(asQualifiedName(namespaceURI,typeName))) == null) {
  typeDef=XSDFactory.eINSTANCE.createXSDSimpleTypeDefinition();
  typeDef.setName(typeName);
  typeDef.setTargetNamespace(namespaceURI);
  addXSDTypeDef(namespaceURI,typeName,typeDef);
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
934,if (XMLChar.isLowSurrogate(value.charAt(++i))) {,"if (XMLChar.isLowSurrogate(value.charAt(++i))) {
  ++surrogatePairCount;
}
 else {
  --i;
}
",0,1,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
935,if (getLocalName(--index).equals(localName) && uri.equals(getURI(index))),"if (getLocalName(--index).equals(localName) && uri.equals(getURI(index))) return index;
",0,0,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
936,"while (getRetryCount(runnableName, (instanceId = instances.nextClearBit(instanceId))) == maxRetries) {","while (getRetryCount(runnableName,(instanceId=instances.nextClearBit(instanceId))) == maxRetries) {
  instanceId++;
}
",0,0,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
937,"while (((rc = is.read(conceptBytes, pos, conceptBytes.length - pos)) >= 0)","while (((rc=is.read(conceptBytes,pos,conceptBytes.length - pos)) >= 0) && ((pos+=rc) < conceptBytes.length)) {
}
",0,0,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
938,"if (++i < args.length && args[i].trim().equals(""1"")) {","if (++i < args.length && args[i].trim().equals(""1"")) {
  args[i]=null;
  args[i - 1]=null;
}
",0,0,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
939,if ( (timeout > 0) && (++count > iterations) ) {,"if ((timeout > 0) && (++count > iterations)) {
  System.out.println(""Timeout waiting for state "" + Arrays.toString(states) + "" for job ""+ runner.getId());
  return false;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
940,"if ( ++c >= nodeStability )  deadNodes.put(n,n);","if (++c >= nodeStability) deadNodes.put(n,n);
",0,0,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
941,for (URLClassLoader ucl = (URLClassLoader) cl; ucl != null && ++n <= numLevels; ucl = (URLClassLoader) ucl.getParent()) {,"for (URLClassLoader ucl=(URLClassLoader)cl; ucl != null && ++n <= numLevels; ucl=(URLClassLoader)ucl.getParent()) {
  System.out.println(""Class-loader "" + n + "" has ""+ ucl.getURLs().length+ "" urls:"");
  for (  URL u : ucl.getURLs()) {
    System.out.println(""  "" + u);
  }
}
",0,2,12,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ForStatement-updaters, ),
"
942,while (pointer < textsMatched.size() && (annotationFS = textsMatched.get(pointer)) != null,"while (pointer < textsMatched.size() && (annotationFS=textsMatched.get(pointer)) != null && annotationFS.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {
  pointer++;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
943,"while (!doneHere && (indexOf = document.indexOf(stringValue, pointer)) < document.length()) {","while (!doneHere && (indexOf=document.indexOf(stringValue,pointer)) < document.length()) {
  if (indexOf < 0) {
    ComposedRuleElementMatch nextContainerMatch=getContainerMatchOfNextElement(containerMatch,nextDepth);
    nextElement.continueMatch(after,annotation,ruleMatch,ruleApply,nextContainerMatch,sideStepOrigin,null,stream,crowd);
    doneHere=true;
    break;
  }
  RutaBasic anchor=stream.getAnchor(after,indexOf + delta);
  RutaBasic endAnchor=stream.getAnchor(!after,indexOf + delta);
  ComposedRuleElementMatch extendedContainerMatch=containerMatch.copy();
  RuleMatch extendedMatch=ruleMatch.copy(extendedContainerMatch,after);
  AnnotationFS coveredByWildCard=getCoveredByWildCard(after,annotation,anchor,stream);
  doMatch(after,coveredByWildCard,extendedMatch,extendedContainerMatch,annotation == null,stream,crowd);
  doMatchPotentialParentElements(after,annotation,nextDepth,extendedMatch,extendedContainerMatch,coveredByWildCard,stream,crowd);
  if (extendedMatch.matched()) {
    ComposedRuleElementMatch nextContainerMatch=getContainerMatchOfNextElement(extendedContainerMatch,nextDepth);
    if (endAnchor == null) {
      result=nextElement.startMatch(extendedMatch,ruleApply,nextContainerMatch,nextElement,stream,crowd);
    }
 else {
      result=nextElement.continueMatch(after,endAnchor,extendedMatch,ruleApply,nextContainerMatch,sideStepOrigin,nextElement,stream,crowd);
    }
    List<RuleElementMatch> nextList=nextContainerMatch.getInnerMatches().get(nextElement);
    if (nextList == null || nextList.isEmpty()) {
      pointer=getNextPointer(after,anchor);
    }
 else {
      doneHere=true;
    }
  }
 else {
    pointer=getNextPointer(after,anchor);
  }
}
",0,0,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
944,"if ((resultView = getView(TextRulerResultsView.ID, c.getID())) == null) {","if ((resultView=getView(TextRulerResultsView.ID,c.getID())) == null) {
  try {
    IViewPart view=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(TextRulerResultsView.ID,((TextRulerLearnerController)i).getID(),IWorkbenchPage.VIEW_CREATE);
    ((TextRulerResultsView)view).setViewTitle(c.getName() + "" - Results"");
  }
 catch (  PartInitException e) {
    TextRulerPlugin.error(e);
  }
}
 else {
  ((TextRulerResultsView)resultView).setViewTitle(c.getName() + "" - Results"");
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
945,while (i < len && t.image.charAt(i++) == '\\'),"while (i < len && t.image.charAt(i++) == '\\') {
  count++;
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
946,while (!hierarchy.isEmpty() && null != (obj = hierarchy.pop())) {,"while (!hierarchy.isEmpty() && null != (obj=hierarchy.pop())) {
  Node node=(Node)obj;
  boolean handled=false;
  if (node.getNodeType() == Node.ELEMENT_NODE) {
    Element e=(Element)node;
    if (buffer.length() == 1) {
      buffer.append(node.getNodeName());
    }
 else {
      buffer.append(""/"");
      buffer.append(node.getNodeName());
      if (node.hasAttributes()) {
        if (e.hasAttribute(""id"")) {
          buffer.append(""[@id='"" + e.getAttribute(""id"") + ""']"");
          handled=true;
        }
 else         if (e.hasAttribute(""name"")) {
          buffer.append(""[@name='"" + e.getAttribute(""name"") + ""']"");
          handled=true;
        }
      }
      if (!handled) {
        int prev_siblings=1;
        Node prev_sibling=node.getPreviousSibling();
        while (null != prev_sibling) {
          if (prev_sibling.getNodeType() == node.getNodeType()) {
            if (prev_sibling.getNodeName().equalsIgnoreCase(node.getNodeName())) {
              prev_siblings++;
            }
          }
          prev_sibling=prev_sibling.getPreviousSibling();
        }
        buffer.append(""["" + prev_siblings + ""]"");
      }
    }
  }
 else   if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    buffer.append(""/@"");
    buffer.append(node.getNodeName());
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
947,"if (!(Boolean)HAS_WRITE_REPLACE_METHOD_METHOD.invoke(desc, (Object[])null) ||","if (!(Boolean)HAS_WRITE_REPLACE_METHOD_METHOD.invoke(desc,(Object[])null) || (obj=INVOKE_WRITE_REPLACE_METHOD.invoke(desc,obj)) == null || (repCl=obj.getClass()) == cls) {
  break;
}
",0,0,7,,"SimpleName(SimpleType-name, CastExpression-type, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(CastExpression-expression, MethodInvocation-arguments, CastExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
948,if (-1 != (n = httpRequest.getReader().read(buffer))),"if (-1 != (n=httpRequest.getReader().read(buffer))) {
  sw.write(buffer,0,n);
}
",0,0,6,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
949,if ((--count >= 0) && (items[count] != null) && (items[count].length() > 0)),"if ((--count >= 0) && (items[count] != null) && (items[count].length() > 0)) {
  String charset;
  base.insert(0,items[count]);
  int length=base.length();
  for (int i=count; i > 0; i--) {
    if ((i == count) || (i <= 1)) {
      base.insert(0,'_');
      length++;
    }
    charset=searchCharSet(items,base,i);
    if (charset.length() > 0) {
      return charset;
    }
    base.delete(0,base.length() - length);
  }
  return searchCharSet(base.toString());
}
",0,0,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
950,while ((i > 0) && ((n = t[--i]) == null)),"while ((i > 0) && ((n=t[--i]) == null)) {
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
951,while (ignoredEvents.contains(event = super.next())) {,"while (ignoredEvents.contains(event=super.next())) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
952,"if (i + 1 < argv.length - 1 && !(arg = argv[i + 1]).startsWith(""-"")) {","if (i + 1 < argv.length - 1 && !(arg=argv[i + 1]).startsWith(""-"")) {
  if (arg.equals(""sax"") || arg.equals(""dom"")) {
    apiToUse=arg;
  }
 else {
    System.err.println(""error: unknown source type ("" + arg + "")."");
  }
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
953,if((curr = (XMLDTDValidator)manager.getProperty(DTD_VALIDATOR_PROPERTY)) != null &&,"if ((curr=(XMLDTDValidator)manager.getProperty(DTD_VALIDATOR_PROPERTY)) != null && curr != this) {
  fGrammarBucket=curr.getGrammarBucket();
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
954,"if (++data.day > maxDayInMonthFor(data.year, data.month)) {","if (++data.day > maxDayInMonthFor(data.year,data.month)) {
  data.day=1;
  if (++data.month > 12) {
    data.month=1;
    if (Constants.SCHEMA_1_1_SUPPORT) {
      ++data.year;
    }
 else     if (++data.year == 0) {
      data.year=1;
    }
  }
}
",0,0,4,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
955,if ((v1 = hexChar(this.chardata)) < 0),"if ((v1=hexChar(this.chardata)) < 0) break;
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
956,if ((existingElem = (XSElementDecl)(elemDeclHash.get(name))) == null) {,"if ((existingElem=(XSElementDecl)(elemDeclHash.get(name))) == null) {
  elemDeclHash.put(name,elem);
}
 else {
  if (elem == existingElem)   return;
  if (elem.fType != existingElem.fType) {
    throw new XMLSchemaException(""cos-element-consistent"",new Object[]{type.fName,elem.fName});
  }
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
957,if (++state[2] > o.maxOccurs &&,"if (++state[2] > o.maxOccurs && o.maxOccurs != SchemaSymbols.OCCURRENCE_UNBOUNDED) {
  return findMatchingDecl(curElem,state,subGroupHandler,elemIndex);
}
",0,0,3,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
958,if ((DOMUtil.getLocalName((elemParent = DOMUtil.getParent(collidingElem))).equals(SchemaSymbols.ELT_REDEFINE))) {,"if ((DOMUtil.getLocalName((elemParent=DOMUtil.getParent(collidingElem))).equals(SchemaSymbols.ELT_REDEFINE))) {
  redefinedSchema=(XSDocumentInfo)(fRedefine2XSDMap.get(elemParent));
}
 else if ((DOMUtil.getLocalName(DOMUtil.getParent(currComp)).equals(SchemaSymbols.ELT_REDEFINE))) {
  redefinedSchema=collidingElemSchema;
  collidedWithRedefine=false;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ParenthesizedExpression-expression, IfStatement-expression, ),
"
959,if ((grammars[0] = (Grammar)currModel.getGrammar()) != null) {,"if ((grammars[0]=(Grammar)currModel.getGrammar()) != null) {
  grammarPool.cacheGrammars(grammars[0].getGrammarDescription().getGrammarType(),grammars);
}
",0,0,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
960,for ( i = start ; length-- > 0 ; ++i ),"for (i=start; length-- > 0; ++i) _printer.printText(chars[i]);
",0,0,5,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, ForStatement-updaters, ),
"
961,} else if (srcPrev instanceof CharJoin && (j = (CharJoin) srcPrev)._srcRight == srcAlloc &&,"if (srcPrev instanceof CharJoin && (j=(CharJoin)srcPrev)._srcRight == srcAlloc && offPrev + cchPrev - j._cchLeft + j._offRight == offAlloc) {
  assert j._srcRight instanceof char[];
  srcNew=srcPrev;
  offNew=offPrev;
}
 else {
  j=new CharJoin(srcPrev,offPrev,cchPrev,srcAlloc,offAlloc);
  offNew=0;
  srcNew=j._depth > CharJoin.MAX_DEPTH ? saveChars(j,0,cchNew) : j;
}
",0,0,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
962,for (Node p = (Node) parent; (p = parent((Dom) p)) != null; ) {,"for (Node p=(Node)parent; (p=parent((Dom)p)) != null; ) {
  if (child.nodeType() == ENTITYREF) {
    throw new NoModificationAllowedErr(""Entity reference trees may not be modified"");
  }
  if (child == p) {
    throw new HierarchyRequestErr(""New child is an ancestor node of the parent node"");
  }
}
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
963,while (temp != null && (temp = node_getNextSibling((Dom) temp)) != n) {,"while (temp != null && (temp=node_getNextSibling((Dom)temp)) != n) {
  prev=temp;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
964,if ((ch = s.charAt(i)) == '\n' || ch == '\r' || ch == '\t') {,"if ((ch=s.charAt(i)) == '\n' || ch == '\r' || ch == '\t') {
  return processWhiteSpaceRule(s,wsr);
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
965,"if ((x = x.walk(this, true)) == null) {","if ((x=x.walk(this,true)) == null) {
  break;
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
966,if ((_flags & FLAG_COMPLEXCONTENT) != 0 || (text = get_wscanon_text()) == null) {,"if ((_flags & FLAG_COMPLEXCONTENT) != 0 || (text=get_wscanon_text()) == null) {
  update_from_complex_content();
}
 else {
  NamespaceContext.push(new NamespaceContext(get_store()));
  try {
    update_from_wscanon_text(text);
  }
  finally {
    NamespaceContext.pop();
  }
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
967,if ((_curr = _curr._next)._name != null) {,"if ((_curr=_curr._next)._name != null) {
  return _curr._flags;
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
968,if ((entry = (Entry) it.next()).str.equals(scriptStr)) {,"if ((entry=(Entry)it.next()).str.equals(scriptStr)) {
  script=entry.script;
  it.remove();
  break;
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
"
969,"while ((length = istream.read(buf, 0, buf.length)) == buf.length) {","while ((length=istream.read(buf,0,buf.length)) == buf.length) {
  if (imgData != null) {
    byte[] imgDataTmp=new byte[imgData.length + length];
    System.arraycopy(imgData,0,imgDataTmp,0,imgData.length);
    System.arraycopy(buf,0,imgDataTmp,imgData.length,length);
    imgData=imgDataTmp;
  }
 else {
    imgData=new byte[length];
    System.arraycopy(buf,0,imgData,0,length);
  }
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
970,if (!(contentType.charAt(i++) == param.charAt(j))) {,"if (!(contentType.charAt(i++) == param.charAt(j))) {
  continue loop2;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
971,while ((index < count) && (bvalues[index++] != 0)) {,"while ((index < count) && (bvalues[index++] != 0)) {
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
972,"for (int currIndex = 0; (keyToken = nextToken(str, currIndex)) != null","for (int currIndex=0; (keyToken=nextToken(str,currIndex)) != null && currIndex <= len; ) {
  if (keyToken.value == null) {
    throw new PSDictionaryFormatException(""Failed to parse object key"");
  }
  Token valueToken=nextToken(str,keyToken.endIndex + 1);
  String[] braces=null;
  for (  String[] brace : BRACES) {
    if (valueToken.value.startsWith(brace[OPENING])) {
      braces=brace;
      break;
    }
  }
  Object obj=null;
  if (braces != null) {
    valueToken.endIndex=indexOfMatchingBrace(str,braces,valueToken.startIndex) + braces[OPENING].length();
    if (valueToken.endIndex < 0) {
      throw new PSDictionaryFormatException(""Closing value brace '"" + braces[CLOSING] + ""' not found for key '""+ keyToken.value+ ""'"");
    }
    valueToken.value=str.substring(valueToken.startIndex,valueToken.endIndex);
  }
  if (braces == null || braces == BRACES[PROCEDURE] || braces == BRACES[STRING]) {
    obj=valueToken.value;
  }
 else   if (BRACES[ARRAY] == braces) {
    List objList=new java.util.ArrayList();
    String objString=stripBraces(valueToken.value,braces);
    StringTokenizer tokenizer=new StringTokenizer(objString,"","");
    while (tokenizer.hasMoreTokens()) {
      objList.add(tokenizer.nextToken());
    }
    obj=objList;
  }
 else   if (BRACES[DICTIONARY] == braces) {
    obj=parseDictionary(valueToken.value);
  }
  dictionary.put(keyToken.value,obj);
  currIndex=valueToken.endIndex + 1;
}
",0,0,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
"
973,while (scale > 0 && (scale > 18 ? decP < tenPowDouble(--scale) : decP < tenPow(--scale))) {,"while (scale > 0 && (scale > 18 ? decP < tenPowDouble(--scale) : decP < tenPow(--scale))) {
  target.append('0');
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
974,"if ((s = maybeReadHexDigits(ci, -1)) != null) {","if ((s=maybeReadHexDigits(ci,-1)) != null) {
  bs=Integer.parseInt(s,16);
}
 else {
  badTestSpec(""missing bit set"",ci);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
975,} else if ((i = -(i + 1)) == 0) {,"if ((i=-(i + 1)) == 0) {
  mi=-1;
}
 else if (gid > ea[--i]) {
  mi=-1;
}
 else {
  mi=getMappedIndex(gid,sa[i],ma[i]);
}
",0,0,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
976,if ((miLast = mi + (ge - gs)) > miMax) {,"if ((miLast=mi + (ge - gs)) > miMax) {
  miMax=miLast;
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
977,if (((o = entries.get(4)) == null) || !(o instanceof Anchor[][][])) {,"if (((o=entries.get(4)) == null) || !(o instanceof Anchor[][][])) {
  throw new AdvancedTypographicTableFormatException(""illegal entries, fifth entry must be a Anchor[][][], but is: "" + ((o != null) ? o.getClass() : null));
}
 else {
  lam=(Anchor[][][])o;
}
",0,42,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
978,if (((o = entries.get(0)) == null) || !(o instanceof int[][])) {,"if (((o=entries.get(0)) == null) || !(o instanceof int[][])) {
  throw new AdvancedTypographicTableFormatException(""illegal entries, first entry must be an int[][], but is: "" + ((o != null) ? o.getClass() : null));
}
 else {
  gsa=(int[][])o;
}
",0,0,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
979,if (node.position < par.size() - 1 && line > 0,"if (node.position < par.size() - 1 && line > 0 && (ipdDifference=compareIPDs(line - 1)) != 0) {
  log.trace(""IPD changes at page "" + line);
  if (bestNodeForIPDChange == null || node.totalDemerits < bestNodeForIPDChange.totalDemerits) {
    bestNodeForIPDChange=node;
  }
}
 else {
  if (node.position == par.size() - 1) {
    ipdDifference=0;
  }
 else   if (line > 0) {
    bestNodeForLastPage=node;
  }
  super.addNode(line,node);
}
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
980,"for (int i = (col + nrColSpan - 1), nc = colWidths.size(); ++i < nc;) {","for (int i=(col + nrColSpan - 1), nc=colWidths.size(); ++i < nc; ) {
  int effCol=i;
  if (colWidths.get(effCol) != null) {
    xoffset+=((Length)colWidths.get(effCol)).getValue(context);
  }
}
",0,0,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, ),
"
981,"if (((index = targetLo.indexOf("".pdf#page="")) > 0)","if (((index=targetLo.indexOf("".pdf#page="")) > 0) || ((index=targetLo.indexOf("".pdf#dest="")) > 0)) {
  filename=target.substring(0,index + 4);
  fragment=target.substring(index + 5);
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
982,if (serverid == 0 && (m = idp.matcher(line)).find()) {,"if (serverid == 0 && (m=idp.matcher(line)).find()) {
  serverid=Integer.valueOf(m.group(1));
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
983,"while ((line = (String) readLine.invoke(console, getPrompt())) != null) {","while ((line=(String)readLine.invoke(console,getPrompt())) != null) {
  executeLine(line);
}
",0,0,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
984,if (everyNthOp > 0 && request.isThrottlable() && (++opCounter % everyNthOp == 0)) {,"if (everyNthOp > 0 && request.isThrottlable() && (++opCounter % everyNthOp == 0)) {
  opCounter%=everyNthOp;
  return true;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
985,"if (ok != null && ok.contains(key = new String(cv, UTF_8)))","if (ok != null && ok.contains(key=new String(cv,UTF_8))) continue;
",1,6,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
986,"while (((nullId = temp.lastIndexOf('0', currLength = temp.length() - 1)) != -1)","while (((nullId=temp.lastIndexOf('0',currLength=temp.length() - 1)) != -1) & (nullId == currLength)) {
  temp=temp.substring(0,nullId);
}
",1,142,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
"
987,"if ((prop = initProps.getProperty(""maxHops"")) == null || prop.equals(""0"") || prop.equals(""""))","if ((prop=initProps.getProperty(""maxHops"")) == null || prop.equals(""0"") || prop.equals("""")) maxHops=Integer.MAX_VALUE;
 else maxHops=Integer.parseInt(initProps.getProperty(""maxHops"",""0""));
",1,389,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
988,while ((message = (ActiveMQMessage) advisoryConsumer.receive(1000)) != null) {,"while ((message=(ActiveMQMessage)advisoryConsumer.receive(1000)) != null) {
  available++;
  LOG.info(""advisory data structure: {}"",message.getDataStructure());
}
",1,60,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
989,"while ((sortValue = jobParameters.getString(String.format(""sortColumn[%d]"", i))) != null) {","while ((sortValue=jobParameters.getString(String.format(""sortColumn[%d]"",i))) != null) {
  sortColumns.add(sortValue);
  ++i;
}
",1,21,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
990,while(count++ < 20 && info[0] == null) {,"while (count++ < 20 && info[0] == null) {
  TimeUnit.SECONDS.sleep(1);
}
",1,6,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
991,for (int i = lastShadow + BZip2Constants.NUM_OVERSHOOT_BYTES + 1; --i >= 0;) {,"for (int i=lastShadow + BZip2Constants.NUM_OVERSHOOT_BYTES + 1; --i >= 0; ) {
  quadrant[i]=0;
}
",1,248,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
992,if (queue != null && (queueConsumers = (Set<Consumer>) queue.getConsumers()) != null) {,"if (queue != null && (queueConsumers=(Set<Consumer>)queue.getConsumers()) != null) {
  for (  Consumer consumer : queueConsumers) {
    ((ServerConsumer)consumer).close(false);
    consumerQoSLevels.remove(((ServerConsumer)consumer).getID());
  }
}
",1,37,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
993,if (Double.doubleToLongBits(array[lower++]) != Double.doubleToLongBits(cmp[otherOffset++])) {,"if (Double.doubleToLongBits(array[lower++]) != Double.doubleToLongBits(cmp[otherOffset++])) {
  return false;
}
",1,52,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
994,while(in.available() > 0 && ((length = in.read(buffer)) != -1)) {,"while (in.available() > 0 && ((length=in.read(buffer)) != -1)) {
  out.write(buffer,0,length);
}
",1,6,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
995,while ((numRead = this.sourceStream.read(data)) != -1) {,"while ((numRead=this.sourceStream.read(data)) != -1) {
  final byte[] copy=Arrays.copyOf(data,numRead);
  streamContentDeliver.availableData.offer(copy);
}
",1,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
996,"for (int i = nextKeyIndex(d, len); (item = tab[i]) != 0;","for (int i=nextKeyIndex(d,len); (item=tab[i]) != 0; i=nextKeyIndex(i,len)) {
  int r=hash(item,len);
  if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {
    tab[d]=item;
    tab[d + 1]=tab[i + 1];
    tab[i]=0;
    tab[i + 1]=0;
    d=i;
  }
}
",1,2,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
997,"while(limit-- > 0 && !fs.rename(p, to)) {","while (limit-- > 0 && !fs.rename(p,to)) {
  Thread.sleep(200);
}
",1,18,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
998,while ((runtimeDTO = jsr.getRuntimeDTO()).defaultApplication.resourceDTOs.length < 3 && (count > 0)) {,"while ((runtimeDTO=jsr.getRuntimeDTO()).defaultApplication.resourceDTOs.length < 3 && (count > 0)) {
  count--;
  Thread.sleep(100);
}
",1,6,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
999,while ((count-- > 0) && trackingCount == threeTracker.getTrackingCount()) {Thread.sleep(50);},"while ((count-- > 0) && trackingCount == threeTracker.getTrackingCount()) {
  Thread.sleep(50);
}
",1,8,8,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
"
1000,if(commitRange > 0 && (count++)%commitRange==0) {,"if (commitRange > 0 && (count++) % commitRange == 0) {
  sm.endTransaction();
  sm.startTransaction();
}
",1,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1001,if (++i >= s.length()) throw new IllegalArgumentException();,"if (++i >= s.length()) throw new IllegalArgumentException();
",1,2,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
"
1002,for (int i = count--; i-- > 0; ) {,"for (int i=count--; i-- > 0; ) {
  output.emit(sameTupleArray);
}
",1,1,5,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1003,while ((length = blockSize * ++blockNumber) <= pos) {,"while ((length=blockSize * ++blockNumber) <= pos) {
}
",1,1,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1004,while (((searchResult = eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {,"while (((searchResult=eli.next()) != null) && (maxResults == null || numRetreived < maxResults.intValue())) {
  String contentId=searchResult.getString(""contentId"");
  if (!contentIdSet.contains(contentId)) {
    contentIds.add(contentId);
    contentIdSet.add(contentId);
    numRetreived++;
  }
 else {
    duplicatesFound++;
  }
}
",1,4,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1005,"while((line = wsdlReader.readLine()) != null) out.write(line + ""\n"");","while ((line=wsdlReader.readLine()) != null) out.write(line + ""\n"");
",1,4,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
1006,"if ((memberHosts = (Map<String, String>) currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {","if ((memberHosts=(Map<String,String>)currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {
  currentMember.getProperties().put(HttpSessionDispatcher.HOSTS,memberHosts=new HashMap<String,String>());
}
",1,7,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1007,"for (int off = 0; (off = str.indexOf(substr, off)) != -1; off++)","for (int off=0; (off=str.indexOf(substr,off)) != -1; off++) ++cnt;
",1,55,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1008,"while ((count = stream.read(buf, 0, buf.length - 10)) != -1) {","while ((count=stream.read(buf,0,buf.length - 10)) != -1) {
  doVerbose(2,""IppClient.java: request(): Read "" + count + "" bytes"");
  bw.write(buf,0,count);
  doVerbose(2,""IppClient.java: request(): Wrote "" + count + "" bytes"");
}
",1,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1009,while ((++i < n) && (buf[i] != ';') && (buf[i] != '\r') && (buf[i] != '\n')) {,"while ((++i < n) && (buf[i] != ';') && (buf[i] != '\r')&& (buf[i] != '\n')) {
  cookie.append((char)(buf[i] & 0x7f));
}
",1,7,11,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
1010,if (addr != null && (obj = addr.getContent()) instanceof String) {,"if (addr != null && (obj=addr.getContent()) instanceof String) {
  instance=ClassUtils.forName((String)obj).newInstance();
}
 else {
  addr=ref.get(WSDL_LOCATION);
  if (addr != null && (obj=addr.getContent()) instanceof String) {
    URL wsdlLocation=new URL((String)obj);
    addr=ref.get(SERVICE_NAMESPACE);
    if (addr != null && (obj=addr.getContent()) instanceof String) {
      String namespace=(String)obj;
      addr=ref.get(SERVICE_LOCAL_PART);
      if (addr != null && (obj=addr.getContent()) instanceof String) {
        String localPart=(String)obj;
        QName serviceName=new QName(namespace,localPart);
        Class[] formalArgs=new Class[]{URL.class,QName.class};
        Object[] actualArgs=new Object[]{wsdlLocation,serviceName};
        Constructor ctor=Service.class.getDeclaredConstructor(formalArgs);
        instance=ctor.newInstance(actualArgs);
      }
    }
  }
}
",1,5,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1011,while (!((curr = set[pos = (pos + 1) & mask]) == null || curr == REMOVED)) {,"while (!((curr=set[pos=(pos + 1) & mask]) == null || curr == REMOVED)) {
  if (((curr).equals(obj)) && pos != ignoreThisSlot) {
    return pos;
  }
}
",1,14,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, WhileStatement-expression, ),
"
1012,"if ((name = a.getName()).startsWith(""xmlns:"") &&","if ((name=a.getName()).startsWith(""xmlns:"") && a.getNodeValue().equals(uri)) {
  return name.substring(6);
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
1013,while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {,"while (containerLauncher.numEventsProcessed.get() < 10 && timeOut++ < 200) {
  LOG.info(""Waiting for number of events processed to become "" + 10 + "". It is now ""+ containerLauncher.numEventsProcessed.get()+ "". Timeout is ""+ timeOut);
  Thread.sleep(1000);
}
",1,2,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1014,if ((results = (List<WSHandlerResult>) this.inMessageContext,"if ((results=(List<WSHandlerResult>)this.inMessageContext.getProperty(WSHandlerConstants.RECV_RESULTS)) == null) {
  throw new TrustException(TrustException.REQUEST_FAILED);
}
 else {
  for (  WSHandlerResult result : results) {
    List<WSSecurityEngineResult> wsSecEngineResults=result.getResults();
    for (    WSSecurityEngineResult wser : wsSecEngineResults) {
      Object principalObject=wser.get(WSSecurityEngineResult.TAG_PRINCIPAL);
      int act=(Integer)wser.get(WSSecurityEngineResult.TAG_ACTION);
      if (act == WSConstants.SIGN && principalObject != null) {
        this.clientCert=(X509Certificate)wser.get(WSSecurityEngineResult.TAG_X509_CERTIFICATE);
        this.principal=(Principal)principalObject;
      }
 else       if (act == WSConstants.UT && principalObject != null) {
        this.principal=(Principal)principalObject;
      }
 else       if (act == WSConstants.BST) {
        final X509Certificate[] certificates=(X509Certificate[])wser.get(WSSecurityEngineResult.TAG_X509_CERTIFICATES);
        this.clientCert=certificates[0];
        this.principal=this.clientCert.getSubjectDN();
      }
 else       if (act == WSConstants.ST_UNSIGNED) {
        this.assertion=(Assertion)wser.get(WSSecurityEngineResult.TAG_SAML_ASSERTION);
      }
    }
  }
  if (this.principal == null && this.assertion == null) {
    throw new TrustException(TrustException.REQUEST_FAILED);
  }
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1015,for (int i = 0; i < MAX_CHANNEL_REQUESTS && (entry = this.channelQueue.poll()) != null; i++) {,"for (int i=0; i < MAX_CHANNEL_REQUESTS && (entry=this.channelQueue.poll()) != null; i++) {
  final SocketChannel socketChannel=entry.channel;
  final Object attachment=entry.attachment;
  try {
    prepareSocket(socketChannel.socket());
    socketChannel.configureBlocking(false);
  }
 catch (  final IOException ex) {
    logException(ex);
    try {
      socketChannel.close();
    }
 catch (    final IOException ex2) {
      logException(ex2);
    }
    throw ex;
  }
  final SelectionKey key;
  try {
    key=socketChannel.register(this.selector,SelectionKey.OP_READ);
  }
 catch (  final ClosedChannelException ex) {
    return;
  }
  final IOSession ioSession=new IOSessionImpl(""a"",key,socketChannel);
  final InternalDataChannel dataChannel=new InternalDataChannel(ioSession,null,ioSessionDecorator,sessionListener,closedSessions);
  dataChannel.upgrade(this.eventHandlerFactory.createHandler(dataChannel,attachment));
  dataChannel.setSocketTimeout(this.reactorConfig.getSoTimeout());
  key.attach(dataChannel);
  dataChannel.handleIOEvent(SelectionKey.OP_CONNECT);
}
",1,5,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1016,while (i < toAdd.length() && (taChar = toAdd.charAt(i++)) <= ' ') {,"while (i < toAdd.length() && (taChar=toAdd.charAt(i++)) <= ' ') {
  if (taChar == '\n' && taNL < 0) {
    taNL=i - 1;
  }
}
",1,19,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1017,for (request = null; count-- > 0; request = this.mock.getServer().takeRequest()) {,"for (request=null; count-- > 0; request=this.mock.getServer().takeRequest()) {
}
",1,1,9,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NullLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ForStatement-updaters, ),
"
1018,if (!(obj instanceof HintMessage) || (message = (HintMessage) obj).hint != null),"if (!(obj instanceof HintMessage) || (message=(HintMessage)obj).hint != null) {
  HintMessage.serializer.serialize(obj,out,version);
  return;
}
",1,6,7,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1019,if (x == coords[i++] && y == coords[i++]) {,"if (x == coords[i++] && y == coords[i++]) {
  return true;
}
",1,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1020,"while ((is = ia.getNextInputSplit(hosts[i++ % hosts.length], 0)) != null) {","while ((is=ia.getNextInputSplit(hosts[i++ % hosts.length],0)) != null) {
  assertTrue(splits.remove(is));
}
",1,23,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1021,"if (i++ != 0) sb.append(',');","if (i++ != 0) sb.append(',');
",1,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1022,while (null == (ep = Gossiper.instance.getEndpointStateForEndpoint(endpoint)),"while (null == (ep=Gossiper.instance.getEndpointStateForEndpoint(endpoint)) || (ep.getApplicationState(ApplicationState.STATUS_WITH_PORT) == null || !ep.getApplicationState(ApplicationState.STATUS_WITH_PORT).value.startsWith(""MOVING""))) LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(100L));
",1,2,5,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1023,while (++i < length && src.charAt(pos + i) == des.charAt(i)) {,"while (++i < length && src.charAt(pos + i) == des.charAt(i)) {
}
",1,3,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1024,while(imon.hasNext() && (node = imon.next().getNodeById(nodeId)) == null) {},"while (imon.hasNext() && (node=imon.next().getNodeById(nodeId)) == null) {
}
",1,3,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1025,if (child == null || children == null || (index = children.indexOf(child)) == -1) {,"if (child == null || children == null || (index=children.indexOf(child)) == -1) {
  throw new IllegalArgumentException(Messages.getString(""swing.A9""));
}
",1,12,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1026,"while ((containerFrame1 = (Frame)SwingUtilities.getAncestorOfClass(Frame.class, container)) == null) {","while ((containerFrame1=(Frame)SwingUtilities.getAncestorOfClass(Frame.class,container)) == null) {
  try {
    waitForContainerLock.wait(1000);
    getLogger().debug(""waiting for container's frame to be available"");
  }
 catch (  InterruptedException ie) {
  }
}
",1,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1027,"if ((bytes = inputStream.read(block, 0, CHUNK_SIZE)) > -1) {","if ((bytes=inputStream.read(block,0,CHUNK_SIZE)) > -1) {
  outputStream.write(block,0,bytes);
  totalBytes+=bytes;
}
 else {
  done=true;
}
",1,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1028,while (System.currentTimeMillis() - startTick <= _opsTimeout || --retry > 0) {,"while (System.currentTimeMillis() - startTick <= _opsTimeout || --retry > 0) {
  s_logger.info(""Trying to connect to "" + ipAddress);
  try (SocketChannel sch=SocketChannel.open()){
    sch.configureBlocking(true);
    sch.socket().setSoTimeout(5000);
    final InetSocketAddress addr=new InetSocketAddress(ipAddress,port);
    sch.connect(addr);
    return null;
  }
 catch (  final IOException e) {
    s_logger.info(""Could] not connect to "" + ipAddress + "" due to ""+ e.toString());
    if (e instanceof ConnectException) {
      try {
        Thread.sleep(5000);
      }
 catch (      final InterruptedException ex) {
        s_logger.debug(""[ignored] interupted while waiting to retry connecting to vm after exception: "" + e.getLocalizedMessage());
      }
    }
  }
  try {
    Thread.sleep(1000);
  }
 catch (  final InterruptedException ex) {
    s_logger.debug(""[ignored] interupted while connecting to vm."");
  }
}
",1,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1029,if ((pos = columnNames[i].indexOf(':')) != -1) {,"if ((pos=columnNames[i].indexOf(':')) != -1) {
  String prefix=columnNames[i].substring(0,pos);
  String local=columnNames[i].substring(pos + 1);
  String namespaceURI=session.getNamespaceURI(prefix);
  selection.addSubnode(new JCRSelection(namespaceURI,local));
}
",1,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1030,if ((startIdx = fromFileName.indexOf(idtype + File.separator)) > -1) {,"if ((startIdx=fromFileName.indexOf(idtype + File.separator)) > -1) {
  pkgName=fromFileName.substring(startIdx);
  toFile=new File(enhancedDirName + File.separator + pkgName);
  FileUtils.copyFile(fromFile,toFile);
}
 else if (srcDir.equals(""testdata"")) {
  startIdx=fromFileName.indexOf(""org"" + File.separator);
  pkgName=fromFileName.substring(startIdx);
  toFile=new File(enhancedDirName + File.separator + idtype+ File.separator+ pkgName);
  FileUtils.copyFile(fromFile,toFile);
}
 else {
  continue;
}
",1,14,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1031,while (n-- > 0 && !atEnd() && hasNext()) {,"while (n-- > 0 && !atEnd() && hasNext()) {
  index++;
  next();
}
",1,6,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1032,while ((curr = csv.read()) >= 0 && (this.maxrecords == UNLIMITED_MAXRECORDS || recordnumber <= this.maxrecords)) {,"while ((curr=csv.read()) >= 0 && (this.maxrecords == UNLIMITED_MAXRECORDS || recordnumber <= this.maxrecords)) {
  if (curr == this.escape) {
    if ((unescaped) && (prev == this.escape)) {
      this.buffer.write(this.escape);
    }
    unescaped=!unescaped;
    prev=curr;
    continue;
  }
  if ((unescaped) && (curr == this.separator)) {
    this.dumpField();
    prev=curr;
    continue;
  }
  if ((unescaped) && ((curr == '\r') || (curr == '\n'))) {
    this.dumpField();
    this.dumpRecord();
    if (((curr == '\n') && (prev != '\r')) || (curr == '\r')) {
      this.recordnumber++;
    }
    prev=curr;
    continue;
  }
  this.buffer.write(curr);
  prev=curr;
}
",1,2,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1033,if ((ch = this.read()) == 1) valid++;,"if ((ch=this.read()) == 1) valid++;
 else throw new SAXException(""Unrecognized file format (."" + valid + "",""+ ch+ "")"");
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1034,while (((cur = pq.pop()) != null) && lim-- > 0) {,"while (((cur=pq.pop()) != null) && lim-- > 0) {
  Object[] ar=(Object[])cur;
  al.add((String)ar[0]);
}
",1,28,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1035,while ((total<n) && ((cur = (int) input.skip(n-total)) > 0)) {,"while ((total < n) && ((cur=(int)input.skip(n - total)) > 0)) {
  total+=cur;
}
",1,4,9,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1036,if (b == null || len <= 0 || !BBuffer.isDigit(c = b[off++])) {,"if (b == null || len <= 0 || !BBuffer.isDigit(c=b[off++])) {
  throw new NumberFormatException();
}
",1,5,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1037,while ((min == null || max == null) && (parent = child.getParent()) != null) {,"while ((min == null || max == null) && (parent=child.getParent()) != null) {
  pt=(OrientedPoint)parent.getCutHyperplane();
  if ((pt.isPositiveFacing() && child.isMinus()) || (!pt.isPositiveFacing() && child.isPlus())) {
    if (max == null) {
      max=pt;
    }
  }
 else   if (min == null) {
    min=pt;
  }
  child=parent;
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1038,"while (bytesToRead > 0 && EOF != (read = input.read(buffer, 0, bytesToRead))) {","while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {
  output.write(buffer,0,read);
  totalRead+=read;
  if (length > 0) {
    bytesToRead=(int)Math.min(length - totalRead,bufferLength);
  }
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1039,if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L),"if (((active0&=old0) | (active1&=old1) | (active2&=old2)| (active3&=old3)) == 0L) return jjMoveNfa_0(0,1);
",1,23,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1040,if (c == '\'' && (++currentIdx == pattern.length() || pattern.charAt(currentIdx) != '\'')) {,"if (c == '\'' && (++currentIdx == pattern.length() || pattern.charAt(currentIdx) != '\'')) {
  activeQuote=!activeQuote;
  continue;
}
",1,5,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1041,while (((ch = inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {,"while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {
  inStream.mark(1);
}
",1,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1042,if ((p = FileOwnerQuery.getOwner(Utilities.toURI(prjFolder))) != null && prjFolder.equals(FileUtil.toFile(p.getProjectDirectory()))) {,"if ((p=FileOwnerQuery.getOwner(Utilities.toURI(prjFolder))) != null && prjFolder.equals(FileUtil.toFile(p.getProjectDirectory()))) {
  ProjectInformation pi=p.getLookup().lookup(ProjectInformation.class);
  String displayName=(pi == null ? """" : pi.getDisplayName());
  return new String[]{MessageFormat.format(org.openide.util.NbBundle.getMessage(BasicProjectInfoPanel.class,""LBL_BasicProjectInfoPanel_Error_9""),new Object[]{displayName}),WizardDescriptor.PROP_ERROR_MESSAGE};
}
",1,8,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1043,for (int i = expected * n; i-- > 0;) {,"for (int i=expected * n; i-- > 0; ) {
  histogram[sampler.sample()]++;
}
",1,1,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1044,"while ((count = in.read(readContent, total, size + 1 - total)) != -1) {","while ((count=in.read(readContent,total,size + 1 - total)) != -1) {
  total=total + count;
}
",1,2,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1045,while ((holder = this.input.next(holder)) != null) {,"while ((holder=this.input.next(holder)) != null) {
  try {
    this.serializer.serialize(holder,this.buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException(""SpillingIterator: Error writing element to buffer."",e);
  }
  this.elementCount++;
}
",1,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1046,"while ((pos = text.indexOf(filter, pos + filter.length())) > -1) {","while ((pos=text.indexOf(filter,pos + filter.length())) > -1) {
  sd.setCharacterAttributes(pos,filter.length(),selectedStyle,false);
}
",1,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1047,if (wasNull = dvd.isNull()) { return null; },"if (wasNull=dvd.isNull()) {
  return null;
}
",1,1,4,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
1048,"if ((r = r1[colid].compare(r2[colid], nullsLow))","if ((r=r1[colid].compare(r2[colid],nullsLow)) != 0) {
  if (this.columnOrderingAscendingMap[i])   return r;
 else   return -r;
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1049,if (((h = head) != null && (s = h.next) != null &&,"if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null)) return st;
",1,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1050,"while ((bytesRead = in.read(readBuffer, 0, (int) Math.min(readBuffer.length, numBytes - totalBytesRead))) > 0) {","while ((bytesRead=in.read(readBuffer,0,(int)Math.min(readBuffer.length,numBytes - totalBytesRead))) > 0) {
  out.write(readBuffer,0,bytesRead);
  totalBytesRead+=bytesRead;
}
",1,2,12,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1051,if ( CollectionUtils.isEmpty( assignedRoles ) || ( ( indx = assignedRoles.indexOf( role ) ) == -1 ) ),"if (CollectionUtils.isEmpty(assignedRoles) || ((indx=assignedRoles.indexOf(role)) == -1)) {
  String info=getFullMethodName(CLS_NM,methodName) + "" Role ["" + role.getName()+ ""] Entity [""+ entityId+ ""] role not authorized for entity."";
  throw new SecurityException(GlobalErrIds.URLE_ACTIVATE_FAILED,info);
}
",1,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1052,if (buffer.get(offset++) == NullHandling.IS_NOT_NULL_BYTE) {,"if (buffer.get(offset++) == NullHandling.IS_NOT_NULL_BYTE) {
  return of(buffer.getLong(offset));
}
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1053,while (expected.hasNext() && actual.hasNext() && cnt++ < numFlatIterations) {,"while (expected.hasNext() && actual.hasNext() && cnt++ < numFlatIterations) {
  Assert.assertEquals(expected.next(),actual.next());
}
",1,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
1054,if (DEBUG_PRINT || (++iter & 0xffff) == 0),"if (DEBUG_PRINT || (++iter & 0xffff) == 0) X.println("" --> size() = "" + size);
",1,14,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1055,if ((cr=finishedRequests.remove(source)) != null && cr.size()>0)  {,"if ((cr=finishedRequests.remove(source)) != null && cr.size() > 0) {
  for (  Request toAdd : cr) {
    assert toAdd.reschedule == ReschedulePolicy.ON_CHANGE;
    requests.add(toAdd);
  }
}
",1,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1056,while ((d = (end - now) / Timer.NANOS_PER_MILLI) > 0),"while ((d=(end - now) / Timer.NANOS_PER_MILLI) > 0) {
  Assertion.check(isEmpty(),""isEmpty()"");
  Assertion.check(!isClosed(),""!isClosed()"");
  Assertion.check(d > 0,""d > 0"");
  wait(d);
  if (!isEmpty())   return getAndNotify();
  if (isClosed())   return null;
  now=Timer.getNanos();
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1057,"while ((x = StringUtil.leftSplit( s, ';' )) != null)","while ((x=StringUtil.leftSplit(s,';')) != null) {
  addParam(unescape(x[0]));
  s=x[1];
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1058,"while ((t = mon.waitUntilNotEqAndSet( null, TIMEOUT, null )) != null)","while ((t=mon.waitUntilNotEqAndSet(null,TIMEOUT,null)) != null) Log.report(""harvested"",""mon"",mon,""t"",t);
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1059,} else if ((object = asBoxedArray(object)) instanceof Object[]) {,"if ((object=asBoxedArray(object)) instanceof Object[]) {
  return convertArrayToSingleValue(targetAsClass,c);
}
",1,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
1060,if (buf[i] == '\n' && --lines <= 0) {,"if (buf[i] == '\n' && --lines <= 0) {
  nb=i + 1;
  break;
}
",1,1,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1061,"if ((result = compareStrings(other.selector, selector)) != 0)","if ((result=compareStrings(other.selector,selector)) != 0) return result;
 else if ((result=compareStrings(other.subtopic,subtopic)) != 0) return result;
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1062,"while ((is = ia.getNext(""testhost"")).isPresent()) {","while ((is=ia.getNext(""testhost"")).isPresent()) {
  assertTrue(splits.remove(is.get()));
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
1063,while ((is = ia.getNext(hosts[i++ % hosts.length])).isPresent()) {,"while ((is=ia.getNext(hosts[i++ % hosts.length])).isPresent()) {
  assertTrue(splits.remove(is.get()));
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
"
1064,if (++this.currentSegmentIndex < this.segments.size()) {,"if (++this.currentSegmentIndex < this.segments.size()) {
  return this.segments.get(this.currentSegmentIndex);
}
 else {
  throw new EOFException();
}
",1,2,5,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1065,"while ((is = ia.getNextInputSplit(null, 0)) != null) {","while ((is=ia.getNextInputSplit(null,0)) != null) {
  assertTrue(splits.remove(is));
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1066,while (index1 >= 0 && (id1 = child1open.get(index1).getBranchingNode().getId()) > id2) {,"while (index1 >= 0 && (id1=child1open.get(index1).getBranchingNode().getId()) > id2) {
  result.add(child1open.get(index1));
  index1--;
}
",1,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1067,while (this.running && (val2 = in2.next(val2Reuse)) != null) {,"while (this.running && (val2=in2.next(val2Reuse)) != null) {
  while (this.running && (val1=spillVals.next(val1Reuse)) != null) {
    collector.collect(crosser.cross(val1,val2));
  }
  spillVals.reset();
}
",1,1,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1068,"while ((emailMessage = this.messageQueue.poll(1, TimeUnit.MILLISECONDS)) != null) {","while ((emailMessage=this.messageQueue.poll(1,TimeUnit.MILLISECONDS)) != null) {
  this.transfer(emailMessage,processContext,this.processSession);
  this.processSession.commitAsync();
}
",1,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1069,if ((answer[len] = (ProtectionDomain) domains[i]) == null),"if ((answer[len]=(ProtectionDomain)domains[i]) == null) break;
",1,3,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1070,while (Double.doubleToLongBits(newKey[pos = pos + 1 & mask]) != 0L) {},"while (Double.doubleToLongBits(newKey[pos=pos + 1 & mask]) != 0L) {
}
",1,4,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1071,if ((curr = Float.floatToIntBits(key[pos = MurmurHashUtil.fmix(intKey) & this.mask])),"if ((curr=Float.floatToIntBits(key[pos=MurmurHashUtil.fmix(intKey) & this.mask])) != 0) {
  if (curr == intKey) {
    return false;
  }
  while ((curr=Float.floatToIntBits(key[pos=pos + 1 & this.mask])) != 0) {
    if (curr == intKey) {
      return false;
    }
  }
}
",1,7,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1072,if ((curr = key[pos = (int) MurmurHashUtil.fmix(k) & this.mask]) != 0L) {,"if ((curr=key[pos=(int)MurmurHashUtil.fmix(k) & this.mask]) != 0L) {
  if (curr == k) {
    return false;
  }
  while ((curr=key[pos=pos + 1 & this.mask]) != 0L) {
    if (curr == k) {
      return false;
    }
  }
}
",1,7,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1073,if (isSlow && (numRecords++ % IS_SLOW_EVERY_NUM_RECORDS) == 0) {,"if (isSlow && (numRecords++ % IS_SLOW_EVERY_NUM_RECORDS) == 0) {
  Thread.sleep(IS_SLOW_SLEEP_MS);
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1074,if (!((curr = set[pos = (it.unimi.dsi.fastutil.HashCommon.mix(hash)) & mask]) == null,"if (!((curr=set[pos=(it.unimi.dsi.fastutil.HashCommon.mix(hash)) & mask]) == null || curr == REMOVED)) {
  if (((curr).equals(obj) && pos != ignoreThisSlot)) {
    return pos;
  }
  while (!((curr=set[pos=(pos + 1) & mask]) == null || curr == REMOVED)) {
    if (((curr).equals(obj)) && pos != ignoreThisSlot) {
      return pos;
    }
  }
}
",1,5,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
1075,while ((dataPort == -1) && (--loopTimes >= 0),"while ((dataPort == -1) && (--loopTimes >= 0) && (!currThread.isInterrupted())) {
  dataPort=passivePorts.reserveNextPort();
  if (dataPort == -1) {
    try {
      log.info(""We're waiting for a passive port, might be stuck"");
      wait();
    }
 catch (    InterruptedException ex) {
    }
  }
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1076,if (b != objs[0][j++]) {,"if (b != objs[0][j++]) {
  fail(""Bytes in byte array are different when queried from client"");
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1077,while (index < t.length && (next = t[index++]) == null) {,"while (index < t.length && (next=t[index++]) == null) {
  ;
}
",1,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1078,if ((str = (String) this.canonicalizedIteratorNameMap.get(definition)) == null) {,"if ((str=(String)this.canonicalizedIteratorNameMap.get(definition)) == null) {
  str=new StringBuilder(""index_iter"").append(this.getIncrementedCounter()).toString();
  String temp;
  if ((temp=(String)this.canonicalizedIteratorNameMap.putIfAbsent(definition,str)) != null) {
    str=temp;
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1079,if (t instanceof Error && SystemFailure.isJVMFailureError(err = (Error) t)) {,"if (t instanceof Error && SystemFailure.isJVMFailureError(err=(Error)t)) {
  SystemFailure.initiateFailure(err);
  throw err;
}
",1,1,7,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1080,if ((peekedEvents = (List) HARegionQueue.peekedEventsContext.get()) != null) {,"if ((peekedEvents=(List)HARegionQueue.peekedEventsContext.get()) != null) {
  peekedEvents.add(next);
}
 else {
  peekedEvents=new LinkedList();
  peekedEvents.add(next);
  HARegionQueue.peekedEventsContext.set(peekedEvents);
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1081,"} else if ((b = tabAt(tab, index)) != null && b.hash >= 0) {","if ((b=tabAt(tab,index)) != null && b.hash >= 0) {
synchronized (b) {
    if (tabAt(tab,index) == b) {
      TreeNode<V> hd=null, tl=null;
      for (Node<V> e=b; e != null; e=e.next) {
        TreeNode<V> p=new TreeNode<V>(e.hash,e.key,null,null);
        if ((p.prev=tl) == null) {
          hd=p;
        }
 else {
          tl.next=p;
        }
        tl=p;
      }
      setTabAt(tab,index,new TreeBin<V>(hd));
    }
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1082,if ((p = (dir <= 0) ? p.left : p.right) == null) {,"if ((p=(dir <= 0) ? p.left : p.right) == null) {
  x.parent=xp;
  if (dir <= 0) {
    xp.left=x;
  }
 else {
    xp.right=x;
  }
  r=balanceInsertion(r,x);
  break;
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1083,if ((xppr = xpp.right) != null && xppr.red) {,"if ((xppr=xpp.right) != null && xppr.red) {
  xppr.red=false;
  xp.red=false;
  xpp.red=true;
  x=xpp;
}
 else {
  if (x == xp.right) {
    root=rotateLeft(root,x=xp);
    xpp=(xp=x.parent) == null ? null : xp.parent;
  }
  if (xp != null) {
    xp.red=false;
    if (xpp != null) {
      xpp.red=true;
      root=rotateRight(root,xpp);
    }
  }
}
",1,1,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1084,if ( start != len || str.charAt(--start)=='T' ) {,"if (start != len || str.charAt(--start) == 'T') {
  throw new SchemaDateTimeException();
}
",1,4,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1085,if (isExcluded = name.charAt(0) == '!') {,"if (isExcluded=name.charAt(0) == '!') {
  name=name.substring(1);
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, IfStatement-expression, ),
"
1086,if ((c = chars[++i]) == '/') {,"if ((c=chars[++i]) == '/') {
  buffer.append('\\');
}
 else {
  buffer.append(c);
}
",1,7,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1087,"if (++i != nodes.size()) strBuf.append("";"");","if (++i != nodes.size()) strBuf.append("";"");
",1,6,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1088,while (target.exists() && !target.delete() && retries-- >= 0) {,"while (target.exists() && !target.delete() && retries-- >= 0) {
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    throw new IOException(""replaceFile interrupted."");
  }
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
1089,if (null == inbuf || -1 == (ret = inbuf.read())) {,"if (null == inbuf || -1 == (ret=inbuf.read())) {
  if (!r.next(key,val)) {
    return -1;
  }
  byte[] tmp=key.toString().getBytes(StandardCharsets.UTF_8);
  outbuf.write(tmp,0,tmp.length);
  outbuf.write('\t');
  tmp=val.toString().getBytes(StandardCharsets.UTF_8);
  outbuf.write(tmp,0,tmp.length);
  outbuf.write('\n');
  inbuf.reset(outbuf.getData(),outbuf.getLength());
  outbuf.reset();
  ret=inbuf.read();
}
",1,1,6,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1090,for (int i = lastShadow + NUM_OVERSHOOT_BYTES +1; --i >= 0;) {,"for (int i=lastShadow + NUM_OVERSHOOT_BYTES + 1; --i >= 0; ) {
  quadrant[i]=0;
}
",1,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1091,if (--refCount > 0) return false;,"if (--refCount > 0) return false;
",1,1,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1092,"(remaining = b.length - offset) > 0 && (n = in.read(b, offset, remaining)) != -1;","for (int remaining, n; (remaining=b.length - offset) > 0 && (n=in.read(b,offset,remaining)) != -1; offset+=n) ;
",1,1,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
QualifiedName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ),
"
1093,while ((fileSize = r.nextGaussian()+2)<=0) {},"while ((fileSize=r.nextGaussian() + 2) <= 0) {
}
",1,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1094,"if (++i < args.length && !args[i].startsWith(""--"")) args[i] = null;","if (++i < args.length && !args[i].startsWith(""--"")) args[i]=null;
",1,3,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1095,if ((result = -list.get(mid).compareTo(object)) > 0) {,"if ((result=-list.get(mid).compareTo(object)) > 0) {
  low=mid + 1;
}
 else if (result == 0) {
  return mid;
}
 else {
  high=mid - 1;
}
",1,8,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1096,"for(int c, j = 0; (c = in.read()) != -1; j++) {","for (int c, j=0; (c=in.read()) != -1; j++) {
  Assert.assertEquals(writeStrings[i].charAt(j),c);
}
",1,1,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1097,"while (toRead > 0 && (len = in.read(cbuf, 0, currentToRead)) > 0) {","while (toRead > 0 && (len=in.read(cbuf,0,currentToRead)) > 0) {
  pre.__(new String(cbuf,0,len,Charset.forName(""UTF-8"")));
  toRead=toRead - len;
  currentToRead=toRead > bufferSize ? bufferSize : (int)toRead;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1098,while ((rowSet = client.fetchResults(handle)) != null && rowSet.numRows() > 0) {,"while ((rowSet=client.fetchResults(handle)) != null && rowSet.numRows() > 0) {
  for (  Object[] row : rowSet) {
    resultSet.add(row.clone());
  }
}
",1,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1099,while (!(app.getApplicationState().equals(finalState)),"while (!(app.getApplicationState().equals(finalState)) && timeout++ < 15) {
  LOG.info(""Waiting for app to reach "" + finalState + "".. Current state is ""+ app.getApplicationState());
  Thread.sleep(1000);
}
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1100,"if ((bundle = handleGetBundle(bundleName, localeName, true, loader)) != null) {","if ((bundle=handleGetBundle(bundleName,localeName,true,loader)) != null) {
  return bundle;
}
",1,4,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1101,while (loadedApp1.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {;,";
",1,1,1,,"EmptyStatement(Block-statements, WhileStatement-body, ),
"
1102,while((rm.getRMContext().getRMNodes().get(nm1.getNodeId()),"while ((rm.getRMContext().getRMNodes().get(nm1.getNodeId()).getState() != NodeState.UNHEALTHY) == health && waitCount++ < 20) {
synchronized (this) {
    wait(100);
  }
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1103,while (containerManager.containerTokens == null && waitCount++ < maxWaitAttempts) {,"while (containerManager.containerTokens == null && waitCount++ < maxWaitAttempts) {
  LOG.info(""Waiting for AM Launch to happen.."");
  Thread.sleep(1000);
}
",1,1,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1104,if (shouldRetry(ke.code()) && ++retry < maxRetryNum) {,"if (shouldRetry(ke.code()) && ++retry < maxRetryNum) {
  continue;
}
",1,1,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1105,while (last > -1 && bytes[last--] == separator) {,"while (last > -1 && bytes[last--] == separator) {
  splits--;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1106,while (containerManager.launched == false && waitCount++ < 20) {,"while (containerManager.launched == false && waitCount++ < 20) {
  LOG.info(""Waiting for AM Launch to happen.."");
  Thread.sleep(1000);
}
",1,1,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1107,while (resourceManagers[index].getServiceState() == STATE.INITED,"while (resourceManagers[index].getServiceState() == STATE.INITED && waitCount++ < 60) {
  LOG.info(""Waiting for RM to start..."");
  Thread.sleep(1500);
}
",1,1,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1108,"if (parent == null && null != (parent = loggers.get(""""))) {","if (parent == null && null != (parent=loggers.get(""""))) {
  setParent(logger,parent);
}
",1,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1109,"while (count != b.length && (r = zis.read(b, count, b.length)) != -1) {","while (count != b.length && (r=zis.read(b,count,b.length)) != -1) {
  count+=r;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1110,while ((index = hash & ((1 << nbits) - 1)) > m),"while ((index=hash & ((1 << nbits) - 1)) > m) hash=(hash >>> nbits) | (hash << (33 - nbits));
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1111,else if ((triggerTime = now + unit.toNanos(delay)) < 0),"if ((triggerTime=now + unit.toNanos(delay)) < 0) return Long.MAX_VALUE;
 else return triggerTime;
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1112,"else if (casHead(h, s=snode(s, e, h, FULFILLING|mode))) {","if (casHead(h,s=snode(s,e,h,FULFILLING | mode))) {
  for (; ; ) {
    SNode m=s.next;
    if (m == null) {
      casHead(s,null);
      s=null;
      break;
    }
    SNode mn=m.next;
    if (m.tryMatch(s)) {
      casHead(s,mn);
      return (mode == REQUEST) ? m.item : s.item;
    }
 else     s.casNext(m,mn);
  }
}
",1,1,9,,"SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
"
1113,while ((p = head) != null && p != past && p.isCancelled()),"while ((p=head) != null && p != past && p.isCancelled()) casHead(p,p.next);
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1114,if ((res = (byte) cis.read()) != data[i]) {,"if ((res=(byte)cis.read()) != data[i]) {
  fail(""read() returned the incorrect value. "" + ""Expected: "" + data[i] + "", Got: ""+ res+ ""."");
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1115,"if ((got = cis.read(result, 0, 1)) != -1) {","if ((got=cis.read(result,0,1)) != -1) {
  fail(""read() should return -1 at the end of the stream. "" + ""Output is: "" + got + ""."");
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1116,"for (int i = 0, j = 0; 0 <= (j = elemString.indexOf(end, i)); i = j","for (int i=0, j=0; 0 <= (j=elemString.indexOf(end,i)); i=j + endLenght) {
  sb.insert(pos + j,escapeString);
  pos+=escapeString.length();
}
",1,1,13,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-updaters, ),
"
1117,for (int i = enumeratingThreads ? numThreads : numGroups; --i >= 0;) {,"for (int i=enumeratingThreads ? numThreads : numGroups; --i >= 0; ) {
  if (!enumeratingThreads || ((Thread)immediateCollection[i]).isAlive()) {
    if (enumerationIndex >= enumeration.length) {
      return enumerationIndex;
    }
    enumeration[enumerationIndex++]=immediateCollection[i];
  }
}
",1,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1118,while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {,"while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {
}
",1,3,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1119,if ((code = ((HttpURLConnection) uc).getResponseCode()) >= 200,"if ((code=((HttpURLConnection)uc).getResponseCode()) >= 200 && code < 300) {
  return resURL;
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1120,if ((result = ((Comparable<Object>)array[mid]).compareTo(object)) < 0){,"if ((result=((Comparable<Object>)array[mid]).compareTo(object)) < 0) {
  low=mid + 1;
}
 else if (result == 0) {
  return mid;
}
 else {
  high=mid - 1;
}
",1,6,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1121,"if ((result = -comparator.compare(list.get(mid),object)) > 0) {","if ((result=-comparator.compare(list.get(mid),object)) > 0) {
  low=mid + 1;
}
 else if (result == 0) {
  return mid;
}
 else {
  high=mid - 1;
}
",1,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1122,if (elementData[--start] != null) {,"if (elementData[--start] != null) {
  entry=elementData[start];
  return true;
}
",1,1,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1123,"if ((bundle = handleGetBundle(bundleName, ""_"" + locale, false,","if ((bundle=handleGetBundle(bundleName,""_"" + locale,false,loader)) != null) {
  return bundle;
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1124,while (((line = readln(in)) != null) && (line.length() > 1)) {,"while (((line=readln(in)) != null) && (line.length() > 1)) {
  headers.addElement(line);
  String lline=line.toLowerCase();
  if (lline.startsWith(""get"") || lline.startsWith(""post"")) {
    int start=line.indexOf(' ') + 1;
    int end=line.indexOf(' ',start);
    if (start > 0 && end > -1) {
      resourceName=line.substring(start,end);
    }
  }
  if (lline.startsWith(""authorization:"")) {
    authenticated=true;
  }
  if (lline.startsWith(""content-length"")) {
    if (contentLength) {
      Assert.fail(""Duplicate Content-Length: "" + line);
    }
    contentLength=true;
    length=Integer.parseInt(line.substring(line.indexOf(' ') + 1));
  }
  if (line.startsWith(""transfer-encoding"")) {
    if (chunked) {
      Assert.fail(""Duplicate Transfer-Encoding: "" + line);
    }
    chunked=true;
    String encoding=line.substring(line.indexOf(' ') + 1);
    if (""chunked"".equals(encoding)) {
      Assert.fail(""Unknown Transfer-Encoding: "" + encoding);
    }
  }
}
",1,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1125,"} else if (month == -1 && (month = parse(text, MONTHS)) != -1) {","if (month == -1 && (month=parse(text,MONTHS)) != -1) {
}
 else if (text.equals(""GMT"")) {
}
 else throw new IllegalArgumentException();
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1126,while ((num < buff.length) && (is.available() > 0),"while ((num < buff.length) && (is.available() > 0) && ((byt=is.read()) != -1)) {
  buff[num++]=(byte)byt;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1127,while ((numberLength > 0) && (digits[--numberLength] == 0)) {,"while ((numberLength > 0) && (digits[--numberLength] == 0)) {
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1128,for (i++; i < shorter.numberLength && (digit = ~(longer.digits[i] | shorter.digits[i])) == 0; i++),"for (i++; i < shorter.numberLength && (digit=~(longer.digits[i] | shorter.digits[i])) == 0; i++) ;
",1,1,10,,"SimpleName(PostfixExpression-operand, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1129,for (i++; i < limit && (digit = ~(negative.digits[i] | positive.digits[i])) == 0; i++),"for (i++; i < limit && (digit=~(negative.digits[i] | positive.digits[i])) == 0; i++) ;
",1,1,10,,"SimpleName(PostfixExpression-operand, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1130,for (i++; i < limit && (digit = positive.digits[i] ^ ~negative.digits[i]) == 0; i++),"for (i++; i < limit && (digit=positive.digits[i] ^ ~negative.digits[i]) == 0; i++) ;
",1,1,10,,"SimpleName(PostfixExpression-operand, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
QualifiedName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1131,"while( ( idx < m_propertyString.length() ) && ( ( idx = m_propertyString.indexOf( key, idx ) ) != -1 ) )","while ((idx < m_propertyString.length()) && ((idx=m_propertyString.indexOf(key,idx)) != -1)) {
  final int prevret=m_propertyString.lastIndexOf(""\n"",idx);
  if (prevret != -1) {
    if (m_propertyString.charAt(prevret + 1) == '#') {
      idx+=key.length();
      continue;
    }
  }
  final int eqsign=m_propertyString.indexOf(""="",idx);
  if (eqsign != -1) {
    final int ret=m_propertyString.indexOf(""\n"",eqsign);
    m_propertyString=TextUtil.replaceString(m_propertyString,prevret,ret,"""");
    return;
  }
}
",1,2,9,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1132,"while ((count = ((Reader) document).read(buf, 0, buf.length)) != -1) {","while ((count=((Reader)document).read(buf,0,buf.length)) != -1) {
  bw.writeChars(new String(buf,0,count));
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1133,while (index < pattern.length && (ch = pattern[nextIndex()]) != '}') {,"while (index < pattern.length && (ch=pattern[nextIndex()]) != '}') {
  if (ch == ',' && min < 0) {
    try {
      min=Integer.parseInt(sb.toString(),10);
      sb.delete(0,sb.length());
    }
 catch (    NumberFormatException nfe) {
      throw new PatternSyntaxException(Messages.getString(""regex.17""),this.toString(),index);
    }
  }
 else {
    sb.append((char)ch);
  }
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1134,while (--index >= 0 && res.get(index).toString().length() == 0) {,"while (--index >= 0 && res.get(index).toString().length() == 0) {
  res.remove(index);
}
",1,2,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1135,if ((data = (new DataInputStream(conn.getInputStream())).readByte()),"if ((data=(new DataInputStream(conn.getInputStream())).readByte()) != CALL_OK) {
  throw new UnmarshalException(Messages.getString(""rmi.39"",data));
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1136,while (--i >= 0 && domainsArray[i].implies(perm)),"while (--i >= 0 && domainsArray[i].implies(perm)) ;
",1,1,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1137,if ((++num[i]) >= base) {,"if ((++num[i]) >= base) {
  num[i]=0;
}
 else {
  return false;
}
",1,1,3,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1138,"while(str.length() > maxll && (firstSpace = findSpaceToCutAt(str, maxll)) > 0) {","while (str.length() > maxll && (firstSpace=findSpaceToCutAt(str,maxll)) > 0) {
  addLabel(c,str.substring(0,firstSpace),constrains);
  str=str.substring(firstSpace);
  str=trimFristSpace(str);
}
",1,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1139,while (i >= 0 && (desc = (ChangeDesc)changes.get(i)).justCreated) {,"while (i >= 0 && (desc=(ChangeDesc)changes.get(i)).justCreated) {
  i--;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1140,"while ((ch = template.charAt(offset++)) != '}' && ch != ',') {","while ((ch=template.charAt(offset++)) != '}' && ch != ',') {
  if (ch < '0' && ch > '9') {
    throw new IllegalArgumentException(Messages.getString(""text.19""));
  }
  arg=arg * 10 + (ch - '0');
  if (arg < 0 || offset >= length) {
    throw new IllegalArgumentException(Messages.getString(""text.19""));
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1141,"if ((f = seekFileInDirsHierarchic(new File(""/opt""), "".txt"", fileLength)) != null) {","if ((f=seekFileInDirsHierarchic(new File(""/opt""),"".txt"",fileLength)) != null) {
  textFile=f.getAbsolutePath();
}
",1,6,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1142,"if (++index % 100 == 0) context.setStatus(""Wrote "" + index);","if (++index % 100 == 0) context.setStatus(""Wrote "" + index);
",1,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1143,while (!(mts = getMasterThreads()).isEmpty(),"while (!(mts=getMasterThreads()).isEmpty() && (EnvironmentEdgeManager.currentTime() - start) < timeout) {
  for (  JVMClusterUtil.MasterThread mt : mts) {
    if (mt.getMaster().isActiveMaster() && mt.getMaster().isInitialized()) {
      return true;
    }
  }
  Threads.sleep(100);
}
",1,1,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1144,while (((token = p.nextToken()) != JsonToken.END_OBJECT) && (token != null)) {,"while (((token=p.nextToken()) != JsonToken.END_OBJECT) && (token != null)) {
  populateRecord(r,token,p,schema);
}
",1,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1145,while (numRetries++ < maxTries && !urlsOfUnloadedSegments.isEmpty()) {,"while (numRetries++ < maxTries && !urlsOfUnloadedSegments.isEmpty()) {
  urlsOfUnloadedSegments=ImmutableSet.copyOf(Sets.filter(urlsOfUnloadedSegments,input -> {
    try {
      String result=DruidStorageHandlerUtils.getResponseFromCurrentLeader(getHttpClient(),new Request(HttpMethod.GET,input),new StringFullResponseHandler(Charset.forName(""UTF-8""))).getContent();
      LOG.debug(""Checking segment [{}] response is [{}]"",input,result);
      return Strings.isNullOrEmpty(result);
    }
 catch (    InterruptedException|ExecutionException e) {
      LOG.error(String.format(""Error while checking URL [%s]"",input),e);
      return true;
    }
  }
));
  try {
    if (!urlsOfUnloadedSegments.isEmpty()) {
      Thread.sleep(passiveWaitTimeMs);
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
",1,1,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1146,while (i-- > 0 && (input[i] == 32 || input[i] == 0)) {,"while (i-- > 0 && (input[i] == 32 || input[i] == 0)) {
}
",1,4,8,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1147,if (v.isRepeating && (v.isNull[0] = ((realNulls && v.isNull[0]) || vector[0] == 0))) {,"if (v.isRepeating && (v.isNull[0]=((realNulls && v.isNull[0]) || vector[0] == 0))) {
  v.vector[0]=DoubleColumnVector.NULL_VALUE;
}
 else if (selectedInUse) {
  for (int j=0; j != n; j++) {
    int i=sel[j];
    if (v.isNull[i]=((realNulls && v.isNull[i]) || vector[i] == 0)) {
      v.vector[i]=DoubleColumnVector.NULL_VALUE;
    }
  }
}
 else {
  for (int i=0; i != n; i++) {
    if (v.isNull[i]=((realNulls && v.isNull[i]) || vector[i] == 0)) {
      v.vector[i]=DoubleColumnVector.NULL_VALUE;
    }
  }
}
",1,3,9,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1148,while ((c = read(false)) != ' ' && c != -1) {,"while ((c=read(false)) != ' ' && c != -1) {
  out.write(c);
}
",1,4,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1149,while (Character.isDigit(c = read(false))) {,"while (Character.isDigit(c=read(false))) {
  foundDigit=true;
  ret=ret * 10 + (c - '0');
}
",1,1,5,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
1150,if (crs.northUTM != 0 && (zone = n - crs.northUTM) >= crs.firstZone && zone <= crs.lastZone) {,"if (crs.northUTM != 0 && (zone=n - crs.northUTM) >= crs.firstZone && zone <= crs.lastZone) {
  latitude=+1;
}
 else if (crs.southUTM != 0 && (zone=n - crs.southUTM) >= crs.firstZone && zone <= crs.lastZone) {
  latitude=-1;
}
 else if (n == crs.northUPS) {
  latitude=Latitude.MAX_VALUE;
  zone=30;
}
 else if (n == crs.southUPS) {
  latitude=Latitude.MIN_VALUE;
  zone=30;
}
 else {
  continue;
}
",1,2,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1151,if (isStr0 = PrimitiveObjectInspectorUtils.getPrimitiveGrouping(inputTypes[0]) == STRING_GROUP) {,"if (isStr0=PrimitiveObjectInspectorUtils.getPrimitiveGrouping(inputTypes[0]) == STRING_GROUP) {
  obtainStringConverter(arguments,0,inputTypes,converters);
}
 else {
  GenericUDFParamUtils.obtainBinaryConverter(arguments,0,inputTypes,converters);
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, IfStatement-expression, ),
"
1152,if(diff == smallestdiff && prng.nextDouble() <= (1.0/++smallestdiffcount) ) {,"if (diff == smallestdiff && prng.nextDouble() <= (1.0 / ++smallestdiffcount)) {
  smallestdiffloc=i;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1153,"if(--rc.didNotInitiateRetention < 0 || timedOut(ci, rc, timeoutThreshold)) {","if (--rc.didNotInitiateRetention < 0 || timedOut(ci,rc,timeoutThreshold)) {
  deleteSet.add(ci.id);
}
",1,1,6,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1154,"if (userType && !ldr.equals(sysLdr) && (desc = descriptorForTypeId(true, typeId, sysLdr, registerMeta)) != null)","if (userType && !ldr.equals(sysLdr) && (desc=descriptorForTypeId(true,typeId,sysLdr,registerMeta)) != null) return desc;
",1,1,11,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
1155,"if (!ioTestMap.compareAndSet(null, map = new ConcurrentHashMap<>()))","if (!ioTestMap.compareAndSet(null,map=new ConcurrentHashMap<>())) map=ioTestMap.get();
",1,1,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1156,if (++row < rows.length && rows[row] != null) {,"if (++row < rows.length && rows[row] != null) {
  clearLastRow();
  return true;
}
",1,1,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1157,if (txCntrs == null || F.isEmpty(updCntrs = txCntrs.updateCounters())),"if (txCntrs == null || F.isEmpty(updCntrs=txCntrs.updateCounters())) return null;
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1158,"if (taggedCounters.compareAndSet(i, cur, taggedLongZero(++curTag)))","if (taggedCounters.compareAndSet(i,cur,taggedLongZero(++curTag))) lastHitTimes.set(i,curTs);
",1,1,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
"
1159,while ((++pos < endPos) && Character.isWhitespace(text.charAt(pos)));,"while ((++pos < endPos) && Character.isWhitespace(text.charAt(pos))) ;
",1,1,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1160,if ((val = readVmParam(ZONE_RECLAIM_MODE)) != null && val > (exp = 0)),"if ((val=readVmParam(ZONE_RECLAIM_MODE)) != null && val > (exp=0)) suggestions.add(String.format(""Disable NUMA memory reclaim (set vm.%s=%d)"",ZONE_RECLAIM_MODE,exp));
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1161,if ((ref.source == null) || ((src = ref.source.get()) == null)) {,"if ((ref.source == null) || ((src=ref.source.get()) == null)) {
  return;
}
",1,2,6,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1162,while ((h = head).item == null && (p = h.prev) != null) {,"while ((h=head).item == null && (p=h.prev) != null) {
  for (; ; ) {
    if ((q=p.prev) == null || (q=(p=q).prev) == null) {
      if (casHead(h,p))       return;
 else       continue restartFromHead;
    }
 else     if (h != head)     continue restartFromHead;
 else     p=q;
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1163,for (int i = cnt; --i > cnt - max;) {,"for (int i=cnt; --i > cnt - max; ) {
  cache.get(i);
  int cacheSize=cache.size();
  if (cacheSize < min) {
    min=cacheSize;
    minIdx=i;
  }
}
",1,1,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
1164,for (int j = i + 1; j-- > 0;) {,"for (int j=i + 1; j-- > 0; ) {
  String key=UUID.randomUUID().toString();
  selected.add(hash.node(key));
  hash.removeNode(nodes[j]);
}
",1,1,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1165,if (entry.getKey() instanceof String && entry.getValue() instanceof String,"if (entry.getKey() instanceof String && entry.getValue() instanceof String && (matcher=TIER_PATTERN.matcher((String)entry.getKey())).matches()) {
  int tier=Integer.parseInt(matcher.group(1));
  String regex=(String)entry.getValue();
  tiers.put(tier,Pattern.compile(regex));
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1166,if (addNetFailure && (failureCnt++) % failureFrequency == 0) {,"if (addNetFailure && (failureCnt++) % failureFrequency == 0) {
  resultHandler.onError(new Exception(""Faked network failure""));
  return;
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1167,while ((b1 = s1.read()) == (b2 = s2.read()) && b1 != -1 && b2 != -1),"while ((b1=s1.read()) == (b2=s2.read()) && b1 != -1 && b2 != -1) i++;
",1,1,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1168,} else if ((result = this.mapTargetIdToTarget.get(targetedCombinerParameter.getTargetId())) != null) {,"if ((result=this.mapTargetIdToTarget.get(targetedCombinerParameter.getTargetId())) != null) {
  targetedCombinerParameter.setTarget(result);
  return result;
}
 else {
  return null;
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1169,if ((this.jdbcDriverClass = properties.getProperty(propPrefix + PROP_JDBC_DRIVER)) == null) {,"if ((this.jdbcDriverClass=properties.getProperty(propPrefix + PROP_JDBC_DRIVER)) == null) {
  this.logger.error(""No '"" + propPrefix + PROP_JDBC_DRIVER+ ""' property"");
  throw new PIPException(""No '"" + propPrefix + PROP_JDBC_DRIVER+ ""' property"");
}
",1,5,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1170,while (i < fromString.length() && Character.isDigit((charAt = fromString.charAt(i)))) {,"while (i < fromString.length() && Character.isDigit((charAt=fromString.charAt(i)))) {
  value=value * 10 + Character.digit(charAt,10);
  i++;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1171,while ((index = string.indexOf(charsFind[i])) != -1) {,"while ((index=string.indexOf(charsFind[i])) != -1) {
  if (index > 0) {
    newStringBuffer.append(string.substring(0,index));
  }
  newStringBuffer.append(charsReplace[i]);
  if ((index + 1) < string.length()) {
    string=string.substring(index + 1);
  }
 else {
    string="""";
  }
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1172,} else if(!((configFile = new File(configFileName)).isFile() && configFile.canRead())) {,"if (!((configFile=new File(configFileName)).isFile() && configFile.canRead())) {
  throw new IllegalArgumentException(""Cannot read configuration file "" + configFile);
}
",1,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
1173,"while ((end != true) && ((cmp = joinComparator.compare(leftTuple, rightTuple)) != 0)) {","while ((end != true) && ((cmp=joinComparator.compare(leftTuple,rightTuple)) != 0)) {
  if (cmp > 0) {
    Tuple nullPaddedTuple=createNullPaddedTuple(leftNumCols);
    frameTuple.set(nullPaddedTuple,rightTuple);
    projector.eval(frameTuple,outTuple);
    rightTuple=rightChild.next();
    if (rightTuple == null) {
      end=true;
    }
    return outTuple;
  }
 else   if (cmp < 0) {
    leftTuple=leftChild.next();
    if (leftTuple == null) {
      end=true;
    }
  }
}
",1,3,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1174,if ((file = new File(path)).exists()) return file;,"if ((file=new File(path)).exists()) return file;
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1175,"if (contentType == null || (equal = contentType.indexOf(""charset="")) == -1) {","if (contentType == null || (equal=contentType.indexOf(""charset="")) == -1) {
  return null;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1176,"if ( current++ < max) buf.append("", "");","if (current++ < max) buf.append("", "");
",1,2,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1177,while (i > 0) if (t.matches( elements[--i])) return true;,"while (i > 0) if (t.matches(elements[--i])) return true;
",1,1,7,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, IfStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, IfStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, WhileStatement-body, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, WhileStatement-body, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, WhileStatement-body, ),
"
1178,while (!(endOfLoop = sampleResult == FINAL_SAMPLE_RESULT) && sampleResult != null) {,"while (!(endOfLoop=sampleResult == FINAL_SAMPLE_RESULT) && sampleResult != null) {
  sampleResults.add(sampleResult);
  if (isDebugEnabled) {
    log.debug(""Thread: {} polling from queue: {}"",Thread.currentThread().getName(),listenerClientData.queue.size());
  }
  sampleResult=listenerClientData.queue.poll();
  if (isDebugEnabled) {
    log.debug(""Thread: {} took from queue: {}, isFinal: {}"",Thread.currentThread().getName(),sampleResult,sampleResult == FINAL_SAMPLE_RESULT);
  }
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1179,if (index > s - 1 || !((val = get(index)) instanceof JsonString)) {,"if (index > s - 1 || !((val=get(index)) instanceof JsonString)) {
  return defaultValue;
}
 else {
  return JsonString.class.cast(val).getString();
}
",1,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1180,while ((consumeDataDone = isConsumeDataDone()) == false && waittime < 5) {,"while ((consumeDataDone=isConsumeDataDone()) == false && waittime < 5) {
  Thread.sleep(60 * 1000);
  waittime++;
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1181,if (messagePattern == null || (len = messagePattern.length()) == 0 || arguments == null,"if (messagePattern == null || (len=messagePattern.length()) == 0 || arguments == null || arguments.length == 0) {
  return messagePattern;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1182,if (v != null && (norm = v.norm(1)) != 0) {,"if (v != null && (norm=v.norm(1)) != 0) {
  numNonZero+=v.getNumNondefaultElements();
  totalCorpusWeight+=norm;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1183,if(in1.isFederated(FederationMap.FType.ROW) && (to = (prev + ren - rsn)) >= 0 &&,"if (in1.isFederated(FederationMap.FType.ROW) && (to=(prev + ren - rsn)) >= 0 && to < in2.getNumRows() && ixrange.rowStart <= re) {
  sliceIxs[i]=new int[]{prev,(int)to,0,(int)in2.getNumColumns() - 1};
  prev=(int)(to + 1);
  instStrings[i]=modifyIndices(newIx,4,8);
  ranges[i]=range;
  from=Math.min(i,from);
}
 else if (in1.isFederated(FederationMap.FType.COL) && (to=(prev + cen - csn)) >= 0 && to < in2.getNumColumns() && ixrange.colStart <= ce) {
  sliceIxs[i]=new int[]{0,(int)in2.getNumRows() - 1,prev,(int)to};
  prev=(int)(to + 1);
  instStrings[i]=modifyIndices(newIx,4,8);
  ranges[i]=range;
  from=Math.min(i,from);
}
 else instStrings[i]=createCopyInstString();
",1,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1184,"for (int n = 0; (n = resource.read(b, 0, b.length)) != -1;","for (int n=0; (n=resource.read(b,0,b.length)) != -1; bout.write(b,0,n)) ;
",1,2,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
"
1185,for ( int data; !isDone() && ( data = is.read() ) != -1; ),"for (int data; !isDone() && (data=is.read()) != -1; ) {
  if (!isDisabled()) {
    os.write(data);
    flush=true;
  }
}
",1,1,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
1186,if ((ch = reqCtx.getDecimalSeparator()) != (char)0),"if ((ch=reqCtx.getDecimalSeparator()) != (char)0) symbols.setDecimalSeparator(ch);
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1187,while(!shutdown && jarStream != null && (entry = (JarEntry)jarStream.getNextEntry()) != null) {,"while (!shutdown && jarStream != null && (entry=(JarEntry)jarStream.getNextEntry()) != null) {
  String entryName=stripTopLevelDir(entry.getName());
  if (entryName == null || entryName.length() == 0) {
    continue;
  }
  final File entryFile=new File(targetFolder,entryName);
  if (entryFile.exists()) {
    throw new RuntimeException(NbBundle.getMessage(Retriever.class,""ERR_TargetExists"",entryFile.getPath()));
  }
 else   if (entry.isDirectory()) {
    if (!entryFile.mkdirs()) {
      throw new RuntimeException(NbBundle.getMessage(Retriever.class,""ERR_FolderCreationFailed"",entryFile.getName()));
    }
  }
 else {
    File parentFile=entryFile.getParentFile();
    if (!parentFile.exists() && !parentFile.mkdirs()) {
      throw new RuntimeException(NbBundle.getMessage(Retriever.class,""ERR_FolderCreationFailed"",parentFile.getName()));
    }
    int bytesRead=0;
    FileOutputStream os=null;
    try {
      os=new FileOutputStream(entryFile);
      int len;
      long lastUpdate=1;
      while (!shutdown && (len=entryStream.read(buffer)) >= 0) {
        bytesRead+=len;
        long update=System.currentTimeMillis() / 333;
        if (update != lastUpdate) {
          if (filelen < 1) {
            updateMessage(NbBundle.getMessage(Retriever.class,""MSG_Installing"",entryName,countAsString(bytesRead)));
          }
 else {
            updateMessage(NbBundle.getMessage(Retriever.class,""MSG_Installing2"",entryName,countAsString(totalBytesRead),countAsString(filelen)));
          }
          lastUpdate=update;
        }
        os.write(buffer,0,len);
      }
    }
  finally {
      if (os != null) {
        try {
          os.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    totalBytesRead+=entry.getCompressedSize();
  }
}
",1,1,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1188,while(++i < len && (c = ddpath.charAt(i)) != '/') {,"while (++i < len && (c=ddpath.charAt(i)) != '/') {
}
",1,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1189,while (--pos >= 0 &&!act.isFinal() && act.size() == 0) {,"while (--pos >= 0 && !act.isFinal() && act.size() == 0) {
  Node del=act;
  act=stack.removeLast();
  Node removed=act.remove(str.charAt(pos));
  if (removed == del) {
    del.destroy();
  }
 else {
    throw new VerifyError(""Removed transition does not point to removed state."");
  }
}
",1,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1190,while (ts.isValid() && (remainingTokens = ts.movePrevious()) && ts.offset() >= 0) {,"while (ts.isValid() && (remainingTokens=ts.movePrevious()) && ts.offset() >= 0) {
  Token<GroovyTokenId> t=ts.token();
  if (t.id() != GroovyTokenId.WHITESPACE && t.id() != GroovyTokenId.NLS) {
    break;
  }
}
",1,1,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, WhileStatement-expression, ),
"
1191,while (((b = cancel.call()) == null) || !b.booleanValue()) {,"while (((b=cancel.call()) == null) || !b.booleanValue()) {
  try {
    return Documentation.create(content.get(250,TimeUnit.MILLISECONDS),jdoc.getURL());
  }
 catch (  TimeoutException te) {
  }
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1192,if (counter-- > 0) super.println(s);,"if (counter-- > 0) super.println(s);
",1,1,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1193,while ((c = (char) (r = patchSource.read())) != '\n' && c != '\r' && r != -1) ;,"while ((c=(char)(r=patchSource.read())) != '\n' && c != '\r' && r != -1) ;
",1,1,11,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1194,"while((length = r1.read(buffer)) > 0) fw1.write(buffer, 0, length);","while ((length=r1.read(buffer)) > 0) fw1.write(buffer,0,length);
",1,1,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
1195,"if (activated = isActivated(y1, y2 + h / 2)) {","if (activated=isActivated(y1,y2 + h / 2)) {
  activeMark=true;
  activeOut=true;
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, IfStatement-expression, ),
"
1196,while (markIndex >= 0 && (mark = getMark(markIndex)).getOffset() == removeOffset) {,"while (markIndex >= 0 && (mark=getMark(markIndex)).getOffset() == removeOffset) {
  mark.release(false,transaction);
  removeMark(markIndex);
  markIndex--;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1197,if (factory != null && (reformatTask = factory.createTask(context())) != null,"if (factory != null && (reformatTask=factory.createTask(context())) != null && !existingFactories.contains(factory)) {
  extraLock=reformatTask.reformatLock();
  existingFactories.add(factory);
  return true;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1198,if (dot >= endNW && (insertLen = targetColumn - dotColumn) > 0) {,"if (dot >= endNW && (insertLen=targetColumn - dotColumn) > 0) {
  char[] spaceChars=new char[insertLen];
  Arrays.fill(spaceChars,' ');
  String spaces=new String(spaceChars);
  doc.insertString(dot,spaces,null);
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1199,while ((docElem = docElements[++elemIndex]).offset < finalOffset) {,"while ((docElem=docElements[++elemIndex]).offset < finalOffset) {
  docElem.appendToBuf(buf);
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1200,while (EditorWindowOperator.jumpLeft() && count++ < 100);,"while (EditorWindowOperator.jumpLeft() && count++ < 100) ;
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1201,if ((length <= index) || !isAsciiAlpha(urlString.charAt(index++))) {,"if ((length <= index) || !isAsciiAlpha(urlString.charAt(index++))) {
  return false;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1202,if ((sourceIds = getSourceIdsFor(root.toURL())) != null && !sourceIds.isEmpty()) {,"if ((sourceIds=getSourceIdsFor(root.toURL())) != null && !sourceIds.isEmpty()) {
  libIds=new HashSet<>();
  binLibIds=new HashSet<>();
  for (  String id : sourceIds) {
    libIds.addAll(PathRecognizerRegistry.getDefault().getLibraryIdsForSourceId(id));
    binLibIds.addAll(PathRecognizerRegistry.getDefault().getBinaryLibraryIdsForSourceId(id));
  }
}
 else if ((libIds=getLibraryIdsFor(root.toURL())) != null && !libIds.isEmpty()) {
  sourceIds=Collections.emptySet();
  binLibIds=new HashSet<>();
  for (  String id : libIds) {
    binLibIds.addAll(PathRecognizerRegistry.getDefault().getBinaryLibraryIdsForLibraryId(id));
  }
}
 else {
  sourceIds=PathRecognizerRegistry.getDefault().getSourceIds();
  libIds=new HashSet<>();
  binLibIds=new HashSet<>();
  for (  String id : sourceIds) {
    libIds.addAll(PathRecognizerRegistry.getDefault().getLibraryIdsForSourceId(id));
    binLibIds.addAll(PathRecognizerRegistry.getDefault().getBinaryLibraryIdsForSourceId(id));
  }
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1203,if (null != (ids = PathRegistry.getDefault().getSourceIdsFor(rootURL)) && !ids.isEmpty()) {,"if (null != (ids=PathRegistry.getDefault().getSourceIdsFor(rootURL)) && !ids.isEmpty()) {
  if (LOGGER.isLoggable(Level.FINER)) {
    LOGGER.log(Level.FINER,""Resolving Ids based on sourceIds for {0}: {1}"",new Object[]{rootURL,ids});
  }
  Set<String> lids=new HashSet<>();
  Set<String> blids=new HashSet<>();
  for (  String id : ids) {
    lids.addAll(PathRecognizerRegistry.getDefault().getLibraryIdsForSourceId(id));
    blids.addAll(PathRecognizerRegistry.getDefault().getBinaryLibraryIdsForSourceId(id));
  }
  if (sourceIds == null) {
    sourceIds=ids;
  }
  if (libraryIds == null) {
    libraryIds=lids;
  }
  if (binaryLibraryIds == null) {
    binaryLibraryIds=blids;
  }
}
 else if (null != (ids=PathRegistry.getDefault().getLibraryIdsFor(rootURL)) && !ids.isEmpty()) {
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.log(Level.FINER,""Resolving Ids based on libraryIds for {0}: {1}"",new Object[]{rootURL,ids});
  }
  Set<String> blids=new HashSet<>();
  for (  String id : ids) {
    blids.addAll(PathRecognizerRegistry.getDefault().getBinaryLibraryIdsForLibraryId(id));
  }
  if (sourceIds == null) {
    sourceIds=Collections.emptySet();
  }
  if (libraryIds == null) {
    libraryIds=ids;
  }
  if (binaryLibraryIds == null) {
    binaryLibraryIds=blids;
  }
}
 else if (sourceIds == null) {
  sourceIds=Collections.emptySet();
}
",1,1,8,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1204,if (!isParenthesis && (i = line.indexOf(')')) >= 0 || isParenthesis) {,"if (!isParenthesis && (i=line.indexOf(')')) >= 0 || isParenthesis) {
  isParenthesis=true;
  if (!isThrows) {
    for (i++; i < line.length() && Character.isWhitespace(line.charAt(i)); i++)     ;
    if ((i + ""throws"".length()) < line.length() && ""throws"".equals(line.substring(i,i + ""throws"".length()))) {
      isThrows=true;
    }
  }
  if (isThrows) {
    i=line.indexOf(""{"",i);
    if (i < 0)     i=line.length();
  }
  if (i < line.length()) {
    if (line.charAt(i) == '{') {
      return new Point(l,i + 1);
    }
 else {
      isParenthesis=false;
    }
  }
}
",1,1,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1205,if (index != -1 && r != null && (cellBounds =,"if (index != -1 && r != null && (cellBounds=getCellBounds(index,index)) != null && cellBounds.contains(p.x,p.y)) {
  ListSelectionModel lsm=getSelectionModel();
  Component rComponent=r.getListCellRendererComponent(this,getModel().getElementAt(index),index,lsm.isSelectedIndex(index),(hasFocus() && (lsm.getLeadSelectionIndex() == index)));
  if (rComponent instanceof JComponent) {
    rComponent.setBounds(cellBounds);
    rComponent.doLayout();
    MouseEvent newEvent;
    p.translate(-cellBounds.x,-cellBounds.y);
    newEvent=new MouseEvent(rComponent,event.getID(),event.getWhen(),event.getModifiers(),p.x,p.y,event.getClickCount(),event.isPopupTrigger());
    String tip=((JComponent)rComponent).getToolTipText(newEvent);
    if (tip != null) {
      return tip;
    }
  }
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1206,"for (int i = nextElementIndex(d, len); (item = tab[i]) != null;","for (int i=nextElementIndex(d,len); (item=tab[i]) != null; i=nextElementIndex(i,len)) {
  int r=hash(item,len);
  if ((i < r && (r <= d || d <= i)) || (r <= d && d <= i)) {
    tab[d]=item;
    tab[i]=null;
    d=i;
  }
}
",1,1,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1207,while ((n = (int)in.skip(len)) > 0 && n < len),"while ((n=(int)in.skip(len)) > 0 && n < len) len-=n;
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1208,while (offset < l && (c = text.charAt(offset)) != '{' && c != '}' && c != '\n' && c != '\r') {,"while (offset < l && (c=text.charAt(offset)) != '{' && c != '}' && c != '\n' && c != '\r') {
  offset++;
}
",1,1,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1209,"while (methodLine > 0 && (locs = MethodWrapper.locationsOfLine(method, methodLine)).isEmpty()) {","while (methodLine > 0 && (locs=MethodWrapper.locationsOfLine(method,methodLine)).isEmpty()) {
  methodLine--;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1210,if ((top != 1 || left != 1 || bottom != 1 || right != 1),"if ((top != 1 || left != 1 || bottom != 1 || right != 1) && (prop=(FormProperty)borderSupport.getPropertyOfName(""borderInsets"")) != null) prop.setValue(new Insets(top,left,bottom,right));
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1211,while (ts.token().id() != JavaTokenId.IDENTIFIER && (next = ts.moveNext())),"while (ts.token().id() != JavaTokenId.IDENTIFIER && (next=ts.moveNext())) ;
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1212,"if ((element = (modle != null ? info.getElements().getTypeElement(modle, qName) : info.getElements().getTypeElement(qName))) != null) {","if ((element=(modle != null ? info.getElements().getTypeElement(modle,qName) : info.getElements().getTypeElement(qName))) != null) {
  clashing=false;
  String simple=qName.substring(lastDot < 0 ? 0 : lastDot + 1);
  if (sqName.length() > 0) {
    sqName.insert(0,'.');
  }
  sqName.insert(0,simple);
  if (cs.useSingleClassImport() && (toImport == null || !cs.importInnerClasses())) {
    toImport=element;
  }
  boolean matchFound=false;
  for (  Element e : eu.getLocalMembersAndVars(scope,acceptor)) {
    if (simple.contentEquals(e.getSimpleName())) {
      if (qName.contentEquals(((TypeElement)e).getQualifiedName())) {
        return sqName.toString();
      }
 else {
        clashing=true;
      }
      matchFound=true;
      break;
    }
  }
  if (!matchFound) {
    for (    TypeElement e : eu.getGlobalTypes(acceptor)) {
      if (simple.contentEquals(e.getSimpleName())) {
        if (qName.contentEquals(e.getQualifiedName())) {
          return sqName.toString();
        }
 else {
          clashing=true;
        }
        break;
      }
    }
  }
  if (cs.importInnerClasses()) {
    break;
  }
}
 else if ((element=(modle != null ? info.getElements().getPackageElement(modle,qName) : info.getElements().getPackageElement(qName))) != null) {
  if (toImport == null || GeneratorUtilities.checkPackagesForStarImport(qName,cs)) {
    toImport=element;
  }
  break;
}
",1,1,13,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1213,"else if ( setName(""_root"") && (val = locateParentForNamed(Value.ROOT_ID, name, true)) != null )","if (setName(""_root"") && (val=locateParentForNamed(Value.ROOT_ID,name,true)) != null) ;
 else if (setName(""_global"") && (val=locateParentForNamed(Value.GLOBAL_ID,name,true)) != null) ;
 else if (((contextVal=locate(Value.GLOBAL_ID,getCurrentPackageName(),false)) != null) && (setName(""_global."" + getCurrentPackageName()) && (val=locateParentForNamed(contextVal.getId(),name,true)) != null)) ;
",1,2,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1214,if ((fileObj == null),"if ((fileObj == null) || !fileObj.isFolder() && !(isJavaFile=JUnitTestUtil.isJavaFile(fileObj)) || ((srcCP=ClassPath.getClassPath(fileObj,ClassPath.SOURCE)) == null) || ((fileObjRoot=srcCP.findOwnerRoot(fileObj)) == null) || ((project=FileOwnerQuery.getOwner(fileObjRoot)) == null) || (UnitTestForSourceQuery.findUnitTests(fileObjRoot).length == 0) && !(sourceToTest=false) && (!isJavaFile || (UnitTestForSourceQuery.findSources(fileObjRoot).length == 0))) {
  callback.foundLocation(fileObj,new LocationResult(null));
  return;
}
",1,1,2,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1215,while ((line = r.readLine()) != null && line.length() > 0) {},"while ((line=r.readLine()) != null && line.length() > 0) {
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1216,while ((worker = super.poll()) != null) {,"while ((worker=super.poll()) != null) {
  final DelayProcessingReason reason=getDelayReason(worker);
  if (reason == null) {
    return worker;
  }
 else {
switch (reason) {
case YIELDED:
case ISOLATED:
case DESTINATION_FULL:
case ALL_WORK_PENALIZED:
case NO_WORK:
case TOO_MANY_THREADS:
      putBack.add(worker);
    break;
default :
case NOT_RUNNING:
  worker.resetWorkCount();
break;
}
}
}
",1,1,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1217,if (context.getProperty(DIR_FILTER).isSet() && (pv = context.getProperty(DIR_FILTER).evaluateAttributeExpressions(ff)) != null) {,"if (context.getProperty(DIR_FILTER).isSet() && (pv=context.getProperty(DIR_FILTER).evaluateAttributeExpressions(ff)) != null) {
  v=pv.getValue();
  req.setDirFilter(v == null ? null : Pattern.compile(v));
}
",1,3,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1218,if (++attempts % numRelationships == 0 && !foundFreeRelationship) {,"if (++attempts % numRelationships == 0 && !foundFreeRelationship) {
  return null;
}
",1,1,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1219,"while (((i = in.readLine(buf, off, len)) == -1) && (reqLen > 0)) {","while (((i=in.readLine(buf,off,len)) == -1) && (reqLen > 0)) {
  System.out.print(""waiting"");
  if (waitCount > MAX_WAITS) {
    System.out.println(""waited "" + waitCount + "" times, bailing out while still expecting ""+ reqLen+ "" bytes."");
    throw new IOException(""waited "" + waitCount + "" times, bailing out while still expecting ""+ reqLen+ "" bytes."");
  }
  waitCount++;
  long endMS=new Date().getTime() + WAIT_INTERVAL;
  while (endMS > (new Date().getTime())) {
    try {
      wait(WAIT_INTERVAL);
    }
 catch (    Exception e3) {
      System.out.print(""."");
    }
  }
  System.out.println((new Date().getTime() - endMS) + "" ms"");
}
",1,1,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1220,"while ((curName = properties.getProperty(""name."" + curIdx)) != null) {","while ((curName=properties.getProperty(""name."" + curIdx)) != null) {
  if (name.equals(curName)) {
    value=properties.getProperty(""value."" + curIdx);
    break;
  }
  curIdx++;
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1221,while ((nestedException = e.getNextException()) != null && nestedException instanceof MessagingException) {,"while ((nestedException=e.getNextException()) != null && nestedException instanceof MessagingException) {
  if (nestedException instanceof SMTPAddressFailedException) {
    SMTPAddressFailedException safe=(SMTPAddressFailedException)nestedException;
    Debug.logError(""Failed to send message to ["" + safe.getAddress() + ""], return code [""+ safe.getReturnCode()+ ""], return message [""+ safe.getMessage()+ ""]"",module);
    failedAddresses.add(safe);
    break;
  }
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1222,while (ptr < currentIndex.length && ++currentIndex[ptr] == maxIndex[ptr]) {,"while (ptr < currentIndex.length && ++currentIndex[ptr] == maxIndex[ptr]) {
  currentIndex[ptr]=0;
  ptr++;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1223,while (number > 0 && (nextValue = this.next()) != null) {,"while (number > 0 && (nextValue=this.next()) != null) {
  list.add(nextValue);
  number--;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1224,while ((eventA = nextInterestingEvent(a)) != null & (eventB = nextInterestingEvent(b)) != null) {,"while ((eventA=nextInterestingEvent(a)) != null & (eventB=nextInterestingEvent(b)) != null) {
  if ((eventType=eventA.getEventType()) != eventB.getEventType()) {
    message.append(""events of different types: "").append(eventA).append("", "").append(eventB);
    return false;
  }
  if (eventType == XMLStreamConstants.START_ELEMENT) {
    StartElement startA=eventA.asStartElement();
    StartElement startB=eventB.asStartElement();
    if (!startA.getName().getLocalPart().equals(startB.getName().getLocalPart())) {
      message.append(""Different elements "").append(startA.getName()).append("", "").append(startB.getName()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
 else   if (eventType == XMLStreamConstants.END_ELEMENT) {
    EndElement endA=eventA.asEndElement();
    EndElement endB=eventB.asEndElement();
    if (!endA.getName().getLocalPart().equals(endB.getName().getLocalPart())) {
      message.append(""Different elements "").append(endA.getName()).append("", "").append(endB.getName()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
 else   if (eventType == XMLStreamConstants.CHARACTERS) {
    Characters endA=eventA.asCharacters();
    Characters endB=eventB.asCharacters();
    if (!endA.getData().equals(endB.getData())) {
      message.append(""Different content "").append(endA.getData()).append("", "").append(endB.getData()).append("" at location "").append(eventA.getLocation());
      return false;
    }
  }
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1225,if (size++ >= threshold) resize(2 * table.length);,"if (size++ >= threshold) resize(2 * table.length);
",1,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1226,while ((aLine = reader[VIEW].readLine()) != null) {,"while ((aLine=reader[VIEW].readLine()) != null) {
  Key key=new Key(aLine);
  orphanViewSet.put(key,new View(key));
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1227,"while(hasValue = kvSchema.next(ptr, i, maxOffset, valueSet) != null) {","while (hasValue=kvSchema.next(ptr,i,maxOffset,valueSet) != null) {
  if (hasValue) {
    values.add(kvSchema.getField(i).getDataType().toObject(ptr));
  }
  i++;
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, WhileStatement-expression, ),
"
1228,if ((oldKey == null || !oldKey.equals(key)) && --free == 0) {,"if ((oldKey == null || !oldKey.equals(key)) && --free == 0) {
  free=entries.length;
  int newCapacity=free << 2;
  rehash(newCapacity);
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1229,do if (add(++ordinal)) break search;,"if (add(++ordinal)) break search;
",1,1,3,,"SimpleName(MethodInvocation-name, IfStatement-expression, DoStatement-body, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, IfStatement-expression, DoStatement-body, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, DoStatement-body, ),
"
1230,if (lower < (lower -= m)) lower = Long.MIN_VALUE;,"if (lower < (lower-=m)) lower=Long.MIN_VALUE;
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1231,if (name == (name = ((ScopedName) name).tail())) break;,"if (name == (name=((ScopedName)name).tail())) break;
",1,2,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1232,if (key == null || (key = key.trim()).isEmpty()) break;,"if (key == null || (key=key.trim()).isEmpty()) break;
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1233,if (!Double.isNaN(value = eastBoundLongitude) || !Double.isNaN(value = westBoundLongitude)) return new Longitude(value);,"if (!Double.isNaN(value=eastBoundLongitude) || !Double.isNaN(value=westBoundLongitude)) return new Longitude(value);
",1,1,10,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
1234,"if (minimumValue == null || min.isNaN() || (min = convert(cv, min)) > minimumValue) {","if (minimumValue == null || min.isNaN() || (min=convert(cv,min)) > minimumValue) {
  minimumValue=min;
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1235,if (isLetter(c) || isLetter(c -= ('a' - 'A'))) {,"if (isLetter(c) || isLetter(c-=('a' - 'A'))) {
  parse: switch (part) {
case 0:
{
switch (c) {
case 'A':
        south=true;
      west=true;
    break;
case 'B':
  south=true;
break;
case 'Y':
west=true;
break;
case 'Z':
break;
default :
break parse;
}
i=nextComponent(owner,reference,base,ni,end);
continue;
}
case 1:
{
col=Arrays.binarySearch(POLAR_COLUMNS,(byte)c);
if (col < 0) break;
if (west) col-=POLAR_COLUMNS.length;
col+=PolarStereographicA.UPS_SHIFT / GRID_SQUARE_SIZE;
i=nextComponent(owner,reference,base,ni,end);
continue;
}
case 2:
{
if (c >= EXCLUDE_O) c--;
if (c >= EXCLUDE_I) c--;
row=(c - 'A') + owner.getReferenceSystem().polarOffset(south);
i=ni;
continue;
}
}
}
",1,1,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1236,"search:     while ((i = CharSequences.skipTrailingWhitespaces(symbols, start, i)) > start) {","while ((i=CharSequences.skipTrailingWhitespaces(symbols,start,i)) > start) {
  final String uom=symbols.subSequence(start,i).toString();
  if ((component=labelToUnit.get(uom)) != null)   break;
  if ((component=fromName(uom)) != null)   break;
  int j=i, c;
  do {
    c=Character.codePointBefore(symbols,j);
    j-=Character.charCount(c);
    if (j <= start)     break search;
  }
 while (!Character.isWhitespace(c));
  i=j;
}
",1,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, LabeledStatement-body, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, LabeledStatement-body, ),
"
1237,if ((d = (xmin - x)) >= 0 && d < dx) {dx = d; outcode |= 1;},"if ((d=(xmin - x)) >= 0 && d < dx) {
  dx=d;
  outcode|=1;
}
",1,2,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
1238,if (value == null || (value = value.trim()).isEmpty() || result.wasNull()) {,"if (value == null || (value=value.trim()).isEmpty() || result.wasNull()) {
  throw new FactoryDataException(nullValue(result,columnFault,code));
}
",1,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1239,next:   for (int i=components.size(); --i >= 0;) {,"for (int i=components.size(); --i >= 0; ) {
  final Datum d=components.get(i).getDatum();
  for (int j=n; --j >= 0; ) {
    if (Utilities.equalsIgnoreMetadata(d,datum[j])) {
      System.arraycopy(datum,j + 1,datum,j,--n - j);
      continue next;
    }
  }
  return false;
}
",1,3,6,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, LabeledStatement-body, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, LabeledStatement-body, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, LabeledStatement-body, ),
"
1240,"if ((d = src.getDimension()) != srcDim) throw mismatchedDimension(""source"", srcDim, d);","if ((d=src.getDimension()) != srcDim) throw mismatchedDimension(""source"",srcDim,d);
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
1241,if ((m = MathTransforms.getMatrix(n)) != null)   normalize = m;,"if ((m=MathTransforms.getMatrix(n)) != null) normalize=m;
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1242,for (int i = retainedDimensions.length; --i >= -1;) {,"for (int i=retainedDimensions.length; --i >= -1; ) {
  final int keep=(i >= 0) ? retainedDimensions[i] : -1;
  final int lower=keep + 1;
  if (lower != upper) {
    m=MatrixSIS.castOrCopy(m).removeColumns(lower,upper);
  }
  upper=keep;
}
",1,1,5,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
"
1243,if (p - (p = array[--i]) != inc) {,"if (p - (p=array[--i]) != inc) {
  return null;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1244,do if (--start < base) {,"if (--start < base) {
  symbols=code;
  start=0;
  break;
}
",1,1,2,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, DoStatement-body, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, DoStatement-body, ),
"
1245,if ((id = sourceCRS.getName()) != null) src = id.getCode();,"if ((id=sourceCRS.getName()) != null) src=id.getCode();
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1246,for (int j=i; ++j < variables.length;) {,"for (int j=i; ++j < variables.length; ) {
  final Variable candidate=variables[j];
  if (candidate == null || candidate.getRole() != VariableRole.COVERAGE) {
    variables[j]=null;
    continue;
  }
  final String cn=candidate.getStandardName();
  if (cn.regionMatches(cn.length() - suffixLength,name,suffixStart,suffixLength) && cn.regionMatches(0,name,0,prefixLength) && candidate.getDataType() == type && grid.equals(candidate.getGridGeometry())) {
    for (    final String k : VECTOR_COMPONENT_NAMES) {
      if (cn.regionMatches(prefixLength,k,0,k.length())) {
        siblings.add(candidate);
        variables[j]=null;
        break;
      }
    }
  }
}
",1,1,5,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ForStatement-expression, ),
"
1247,if (current == null || (add = !previous.getId().equals(current.getId()))) {,"if (current == null || (add=!previous.getId().equals(current.getId()))) {
  target.getPrototype().getBundleRemovals().add(previous.getId());
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1248,while ((line = raFile.readLine()) != null && line.charAt(0) == '!') {,"while ((line=raFile.readLine()) != null && line.charAt(0) == '!') {
  rtm.addRow(line.substring(1));
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1249,"if (index < root.length() && root.charAt(index++) == '""'","if (index < root.length() && root.charAt(index++) == '""' && root.regionMatches(index,JSP_URI,0,JSP_URI.length())) {
  return true;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1250,for (int length = 0; ((length = input.read(buffer)) > 0); ) {,"for (int length=0; ((length=input.read(buffer)) > 0); ) {
  output.write(buffer,0,length);
}
",1,1,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ForStatement-expression, ),
"
1251,if ((types = (Class[]) _genericMethodParameterTypesCache.get(m)) != null) {,"if ((types=(Class[])_genericMethodParameterTypesCache.get(m)) != null) {
  return types;
}
",1,1,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1252,"while (! (nextToken = getToken(tok)).equals("")"")) {","while (!(nextToken=getToken(tok)).equals("")"")) {
  if (nextToken.equals("",""))   nextToken=getToken(tok);
  String attrName=nextToken;
  expectToken(tok,""="");
  String value=getToken(tok);
  int pos;
  if (value.charAt(0) == '@') {
    if (attrName.equals(""validationErrorForward"")) {
      value=""@ti.validationErrorForward"";
    }
    translateAnnotation(tok,out,value,indent,tags);
    value=null;
  }
 else   if (value.equals(""{"")) {
    StringBuffer stringArray=null;
    while (!(nextToken=getToken(tok)).equals(""}"")) {
      if (nextToken.equals("",""))       nextToken=getToken(tok);
      if (nextToken.charAt(0) == '@') {
        translateAnnotation(tok,out,nextToken,indent,tags);
      }
 else {
        assert nextToken.length() > 1 && nextToken.charAt(0) == '""' && nextToken.charAt(nextToken.length() - 1) == '""' : nextToken;
        if (stringArray == null) {
          stringArray=new StringBuffer(""\"""");
        }
 else {
          stringArray.append(',');
        }
        stringArray.append(nextToken.substring(1,nextToken.length() - 1));
      }
    }
    value=stringArray != null ? stringArray.append('""').toString() : null;
  }
 else   if (value.equals(""true"") || value.equals(""false"")) {
    value='""' + value + '""';
  }
 else   if (value.endsWith("".class"")) {
    value='""' + value.substring(0,value.length() - 6) + '""';
  }
 else   if ((pos=value.indexOf(""ti.NavigateTo."")) != -1) {
    value='""' + value.substring(pos + 14) + '""';
  }
 else   if ((pos=value.indexOf(""ti.validatorVersion."")) != -1) {
    value='""' + value.substring(pos + 20) + '""';
  }
 else   if (isNumber(value)) {
    value='""' + value + '""';
  }
 else {
    assert value.charAt(0) == '""' && value.charAt(value.length() - 1) == '""' : value;
    if (value.charAt(0) != '""')     value='""' + value;
    if (value.charAt(value.length() - 1) != '""')     value+='""';
  }
  if (value != null) {
    tag.append(' ').append(attrName).append('=').append(value);
  }
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
1253,"if ((string = EvalHelper.evalString(""name"", getNameExpr(), this,","if ((string=EvalHelper.evalString(""name"",getNameExpr(),this,pageContext)) != null) {
  setName(string);
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1254,"if (!isSubTypeOf(values.get(i++), newValue(owner))) {","if (!isSubTypeOf(values.get(i++),newValue(owner))) {
  throw new AnalyzerException(insn,""Method owner"",newValue(owner),values.get(0));
}
",1,1,6,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1255,if ((this.line = this.readers.peek().readLine()) != null) {,"if ((this.line=this.readers.peek().readLine()) != null) {
  this.available=true;
  return true;
}
 else this.readers.remove().close();
",1,1,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1256,"for (int i = 0, size = events.size(); i < size && (pe = events.poll()) != null; i++ ) {","for (int i=0, size=events.size(); i < size && (pe=events.poll()) != null; i++) {
  result=true;
  NioSocketWrapper socketWrapper=pe.getSocketWrapper();
  SocketChannel sc=socketWrapper.getSocket().getIOChannel();
  int interestOps=pe.getInterestOps();
  if (sc == null) {
    log.warn(sm.getString(""endpoint.nio.nullSocketChannel""));
    socketWrapper.close();
  }
 else   if (interestOps == OP_REGISTER) {
    try {
      sc.register(getSelector(),SelectionKey.OP_READ,socketWrapper);
    }
 catch (    Exception x) {
      log.error(sm.getString(""endpoint.nio.registerFail""),x);
    }
  }
 else {
    final SelectionKey key=sc.keyFor(getSelector());
    if (key == null) {
      socketWrapper.close();
    }
 else {
      final NioSocketWrapper attachment=(NioSocketWrapper)key.attachment();
      if (attachment != null) {
        try {
          int ops=key.interestOps() | interestOps;
          attachment.interestOps(ops);
          key.interestOps(ops);
        }
 catch (        CancelledKeyException ckx) {
          cancelledKey(key,socketWrapper);
        }
      }
 else {
        cancelledKey(key,socketWrapper);
      }
    }
  }
  if (running && !paused && eventCache != null) {
    pe.reset();
    eventCache.push(pe);
  }
}
",1,1,13,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1257,"if ( ""all"".equals(args[++i]) ) options = RpcChannel.ALL_REPLY;","if (""all"".equals(args[++i])) options=RpcChannel.ALL_REPLY;
 else if (""first"".equals(args[i])) options=RpcChannel.FIRST_REPLY;
 else if (""majority"".equals(args[i])) options=RpcChannel.MAJORITY_REPLY;
",1,2,6,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1258,if ( b1[off1++] != (char)b2[off2++]) {,"if (b1[off1++] != (char)b2[off2++]) {
  return false;
}
",1,1,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1259,"if (++i>=endIndex) throw new IllegalArgumentException(""Invalid escape character in cookie value."");","if (++i >= endIndex) throw new IllegalArgumentException(""Invalid escape character in cookie value."");
",1,1,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
1260,"if ( ""receive"".equals(args[++i]) ) send = false;","if (""receive"".equals(args[++i])) send=false;
",1,1,6,,"StringLiteral(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1261,if (typesIndex < types.size() && String.class.equals(types.get(typesIndex++).getGenericType())) {,"if (typesIndex < types.size() && String.class.equals(types.get(typesIndex++).getGenericType())) {
  String x=servletRequest.getParameter(name);
  if (x.startsWith(""\"""") || x.startsWith(""'"")) {
    jsonRequest+=x;
  }
 else {
    if (x.contains(""\"""")) {
      jsonRequest+=""'"" + x + ""'"";
    }
 else {
      jsonRequest+=""\"""" + x + ""\"""";
    }
  }
}
 else {
  jsonRequest+=servletRequest.getParameter(name);
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1262,if (doSendCpcReply == false && sendReply && allDelegatesCompletedCollection(),"if (doSendCpcReply == false && sendReply && allDelegatesCompletedCollection() && ((cEndpoint=getClientEndpoint()) != null)) {
  doSendCpcReply=true;
  flowControllerContainer.collectionProcessComplete();
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1263,if ((endpoint = ((AggregateAnalysisEngineController) this),"if ((endpoint=((AggregateAnalysisEngineController)this).lookUpEndpoint(anEndpoint,false)) == null) {
  key=((AggregateAnalysisEngineController)this).lookUpDelegateKey(anEndpoint);
  endpoint=((AggregateAnalysisEngineController)this).lookUpEndpoint(key,false);
  list.add(key);
}
 else {
  key=anEndpoint;
  list.add(anEndpoint);
}
",1,1,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1264,while( serviceDelegate.getState()==Delegate.OK_STATE && (casReferenceId = serviceDelegate.removeOldestFromPendingDispatchList()) != null ) {,"while (serviceDelegate.getState() == Delegate.OK_STATE && (casReferenceId=serviceDelegate.removeOldestFromPendingDispatchList()) != null) {
  ClientRequest cachedRequest=(ClientRequest)clientCache.get(casReferenceId);
  if (cachedRequest != null) {
    if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.INFO)) {
      UIMAFramework.getLogger(CLASS_NAME).logrb(Level.INFO,CLASS_NAME.getName(),""handleMetadataReply"",JmsConstants.JMS_LOG_RESOURCE_BUNDLE,""UIMAJMS_dispatch_delayed_cas__INFO"",new Object[]{casReferenceId,String.valueOf(cachedRequest.cas.hashCode())});
    }
    sendCAS(cachedRequest.getCAS(),cachedRequest,null);
  }
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1265,"while ( !exportService.getState( exportUUID ).equals( ""FINISHED"" ) && retries++ < maxRetries ) {","while (!exportService.getState(exportUUID).equals(""FINISHED"") && retries++ < maxRetries) {
  Thread.sleep(100);
}
",1,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1266,if (buf[splitbyte] == '\r' && buf[++splitbyte] == '\n' && buf[++splitbyte] == '\r' && buf[++splitbyte] == '\n') {,"if (buf[splitbyte] == '\r' && buf[++splitbyte] == '\n' && buf[++splitbyte] == '\r' && buf[++splitbyte] == '\n') {
  sbfound=true;
  break;
}
",1,1,12,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1267,if (ai >= size || actions.get(ai++).intValue() != act) {,"if (ai >= size || actions.get(ai++).intValue() != act) {
  return false;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1268,if ( (null != outputTarget) && ((base = outputTarget.getSystemId()) != null) ) {,"if ((null != outputTarget) && ((base=outputTarget.getSystemId()) != null)) {
  base=urlToFileName(base);
}
 else {
  base=urlToFileName(transformer.getBaseURLOfSource());
}
",1,1,6,,"NullLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1269,while ((null == iterator) || (DTM.NULL != (pos = iterator.nextNode()))),"while ((null == iterator) || (DTM.NULL != (pos=iterator.nextNode()))) {
  XMLString ref=(null != iterator) ? xctxt.getDTM(pos).getStringValue(pos) : arg.xstr();
  if (null == arg1Expr && DTM.NULL != pos) {
    DTM baseDTM=xctxt.getDTM(pos);
    base=baseDTM.getDocumentBaseURI();
  }
  if (null == ref)   continue;
  if (DTM.NULL == docContext) {
    error(xctxt,XSLTErrorResources.ER_NO_CONTEXT_OWNERDOC,null);
  }
  int indexOfColon=ref.indexOf(':');
  int indexOfSlash=ref.indexOf('/');
  if ((indexOfColon != -1) && (indexOfSlash != -1) && (indexOfColon < indexOfSlash)) {
    base=null;
  }
  int newDoc=getDoc(xctxt,context,ref.toString(),base);
  if (DTM.NULL != newDoc) {
    if (!mnl.contains(newDoc)) {
      mnl.addElement(newDoc);
    }
  }
  if (null == iterator || newDoc == DTM.NULL)   break;
}
",1,1,6,,"NullLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1270,while ((index-- > 0) && ((entry = table[index]) == null));,"while ((index-- > 0) && ((entry=table[index]) == null)) ;
",1,1,7,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1271,"if ((++i >= argc) || (args[i].startsWith(""-""))) {","if ((++i >= argc) || (args[i].startsWith(""-""))) {
  System.err.println(ERRMSG);
  throw new RuntimeException(ERRMSG);
}
",1,1,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1272,while(--index>=0 && handle!=DTM.NULL) {,"while (--index >= 0 && handle != DTM.NULL) {
  handle=m_parentDTM.getNextSibling(handle);
}
",1,1,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1273,"if (nodes.readEntry(++nodeHandle, 1) == thisParent)","if (nodes.readEntry(++nodeHandle,1) == thisParent) return (m_docHandle | nodeHandle);
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1274,while ((node = _nextsib2(node)) != DTM.NULL && _exptype2(node) != nodeType) {},"while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) != nodeType) {
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1275,while ((node = _nextsib2(node)) != DTM.NULL && _exptype2(node) < DTM.NTYPES) {},"while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) < DTM.NTYPES) {
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1276,for(shift=0; (blocksize>>>=1) != 0; ++shift);,"for (shift=0; (blocksize>>>=1) != 0; ++shift) ;
",1,1,7,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
1277,while ((type = _type2(++baseID)) == DTM.ATTRIBUTE_NODE);,"while ((type=_type2(++baseID)) == DTM.ATTRIBUTE_NODE) ;
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1278,for(m_SHIFT=0;0!=(blocksize>>>=1);++m_SHIFT),"for (m_SHIFT=0; 0 != (blocksize>>>=1); ++m_SHIFT) ;
",1,1,6,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
NumberLiteral(InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, ForStatement-updaters, ),
"
1279,while ((ch = this.read()) != T_OR && ch != T_RPAREN && ch != T_EOF) {,"while ((ch=this.read()) != T_OR && ch != T_RPAREN && ch != T_EOF) {
  if (concat == null) {
    concat=Token.createConcat();
    concat.addChild(tok);
    tok=concat;
  }
  concat.addChild(this.parseFactor());
}
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1280,"if ((ret = this.getChild(i).analyzeFirstCharacter(result, options)) != FC_CONTINUE)","if ((ret=this.getChild(i).analyzeFirstCharacter(result,options)) != FC_CONTINUE) break;
",1,1,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1281,if (_in <= _out || cch < (chunk = _buf.length - _in)) {,"if (_in <= _out || cch < (chunk=_buf.length - _in)) {
  s.getChars(0,cch,_buf,_in);
  _in+=cch;
}
 else {
  s.getChars(0,chunk,_buf,_in);
  s.getChars(chunk,cch,_buf,0);
  _in=(_in + cch) % _buf.length;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1282,if (x.isElem() && x._name.equals(name) && --i < 0) {,"if (x.isElem() && x._name.equals(name) && --i < 0) {
  return x.getUser();
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
1283,if (x.isElem() && names.contains(x._name) && --i < 0) {,"if (x.isElem() && names.contains(x._name) && --i < 0) {
  return x.getUser();
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
1284,if (!isXMLSpace((char)(c = r.read()))) {,"if (!isXMLSpace((char)(c=r.read()))) {
  return e;
}
",1,1,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1285,for (lineNumber = 0; (line = b.readLine()) != null; ) {,"for (lineNumber=0; (line=b.readLine()) != null; ) {
  lineNumber++;
  if (line.length() == 0) {
    continue;
  }
 else   if (line.startsWith(""#"")) {
    continue;
  }
 else {
    parseTypeProperties(line,sm,im);
  }
}
",1,1,6,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1286,while ((m == null) && (numRetries++ <= THRESHOLD)) {,"while ((m == null) && (numRetries++ <= THRESHOLD)) {
  m=cnxManager.pollRecvQueue(3000,TimeUnit.MILLISECONDS);
  if (m == null) {
    cnxManager.connectAll();
  }
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1287,if (interruptFlag != null && interruptCheckCount++ % 100 == 0 && interruptFlag.get()),"if (interruptFlag != null && interruptCheckCount++ % 100 == 0 && interruptFlag.get()) throw new IterationInterruptedException();
",2,521,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1288,while ((code = (byte) (0xff & in.read())) != -1) {,"while ((code=(byte)(0xff & in.read())) != -1) {
  codeBytes.write(code);
}
",2,5,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1289,if (++i>=cs.todo.length()) {,"if (++i >= cs.todo.length()) {
  throw new InvalidPatternException(""Curly brace not closed, parsing '"" + cs.todo.substring(braceStartIndex) + ""' after ""+ resultSoFar);
}
",2,151,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1290,if ((result = value[o1++] - target[o2++]) != 0) {,"if ((result=value[o1++] - target[o2++]) != 0) {
  return result;
}
",2,84,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1291,"while ((sessionStart = u.toString().indexOf("";"" + Constants.SESSION_PARAMETER_NAME + ""="")) != -1) {","while ((sessionStart=u.toString().indexOf("";"" + Constants.SESSION_PARAMETER_NAME + ""="")) != -1) {
  int sessionEnd=u.toString().indexOf("";"",sessionStart + 1);
  if (sessionEnd == -1)   sessionEnd=u.toString().indexOf(""?"",sessionStart + 1);
  if (sessionEnd == -1)   sessionEnd=u.length();
  u.delete(sessionStart,sessionEnd);
}
",2,75,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1292,"while (!stages.get(0).getHostRoleStatus(hostname, ""SECONDARY_NAMENODE"")","while (!stages.get(0).getHostRoleStatus(hostname,""SECONDARY_NAMENODE"").equals(HostRoleStatus.TIMEDOUT) && cycleCount++ <= MAX_CYCLE_ITERATIONS) {
  scheduler.doWork();
}
",2,3,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1293,while (record.isEmpty() && ++currentRecord < knownRecords.length) {,"while (record.isEmpty() && ++currentRecord < knownRecords.length) {
  record=getRecord(currentRecord);
}
",2,27,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1294,while (i < end && ((ch = buffer[i]) == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\f')) {,"while (i < end && ((ch=buffer[i]) == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\f')) {
  i++;
}
",2,2,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1295,"for( int j = realSize(), i = 0, t = 0; j-- != 0; ) {","for (int j=realSize(), i=0, t=0; j-- != 0; ) {
  while (key[i] == null) {
    ++i;
  }
  if (this != key[i]) {
    t=key[i].hashCode();
  }
  if (this != value[i]) {
    t^=value[i] == null ? 0 : value[i].hashCode();
  }
  h+=t;
  i++;
}
",2,33,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1296,if (reporter != null && ++n % PROGRESS_FREQUENCY == 0),"if (reporter != null && ++n % PROGRESS_FREQUENCY == 0) reporter.progress();
",2,6,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1297,if (i < s.length() && ((c = s.charAt(i)) == '/')) {,"if (i < s.length() && ((c=s.charAt(i)) == '/')) {
  i++;
  c=s.charAt(i);
  int v2=Integer.parseInt(String.valueOf(c));
  i++;
  if (i >= s.length()) {
    addToSet(val,end,v2,type);
    return i;
  }
  c=s.charAt(i);
  if (c >= '0' && c <= '9') {
    ValueSet vs=getValue(v2,s,i);
    int v3=vs.value;
    addToSet(val,end,v3,type);
    i=vs.pos;
    return i;
  }
 else {
    addToSet(val,end,v2,type);
    return i;
  }
}
 else {
  addToSet(val,end,1,type);
  return i;
}
",2,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1298,if (streamData != null && --streamData.holds == 0) {,"if (streamData != null && --streamData.holds == 0) {
  holds.remove(streamData.stream);
  closeStream=streamData.stream;
}
",2,14,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1299,for (byte[] value; (value = (byte[]) inbox.poll()) != null; ) {,"for (byte[] value; (value=(byte[])inbox.poll()) != null; ) {
  Coder<?> sideInputCoder=sideInputCoders.get(sideInputView);
  WindowedValue<Iterable<?>> windowedValue=Utils.decodeWindowedValue(value,sideInputCoder);
  sideInputHandler.addSideInputValue(sideInputView,windowedValue);
}
",2,2,9,,"PrimitiveType(ArrayType-elementType, VariableDeclarationExpression-type, ForStatement-initializers, ),
Dimension(ArrayType-dimensions, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
PrimitiveType(ArrayType-elementType, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1300,"if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {","if ((result=compareRight(a.substring(ia),b.substring(ib))) != 0) {
  return result;
}
",2,2,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1301,"if (!predicate.apply(enumerator.current(), ++n)) {","if (!predicate.apply(enumerator.current(),++n)) {
  started=true;
  return true;
}
",2,2,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1302,"if (waiting == null && !waitingUpdater.compareAndSet(this, null, waiting = new WaitQueue()))","if (waiting == null && !waitingUpdater.compareAndSet(this,null,waiting=new WaitQueue())) waiting=this.waiting;
",2,4,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1303,for (int i = stack.size() - 1; --i >= 0;) {,"for (int i=stack.size() - 1; --i >= 0; ) {
  NodeIterator it=(NodeIterator)stack.get(i);
  Pointer pointer=it.getNodePointer();
  if (pointer != null && pointer.getNode() == node) {
    return true;
  }
}
",2,81,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1304,if ((ch = chars[--index]) != this.pattern[--pindex]),"if ((ch=chars[--index]) != this.pattern[--pindex]) break;
",2,11,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1305,if (((charNum = fileReader.read()) == 's'),"if (((charNum=fileReader.read()) == 's') || (charNum == 'e')) {
  charPos++;
  if (((charNum=fileReader.read()) == 't') || (charNum == 'n')) {
    charPos++;
    if (((charNum=fileReader.read()) == 'a') || (charNum == 'd')) {
      charPos++;
      if ((charNum=fileReader.read()) == 'r') {
        endStartSegment=charPos + 24;
        fileReader.skip(14);
        fileReader.read(sectIdArr,0,5);
        charPos=charPos + 19;
      }
 else       if (charNum == ' ') {
        beginEndSegment=charPos - 5;
        Segment sa=new Segment(jcas);
        sa.setBegin(endStartSegment);
        sa.setEnd(beginEndSegment);
        sa.setId(String.copyValueOf(sectIdArr));
        for (int i=0; i < sectIdArr.length; i++)         sectIdArr[i]=' ';
        sa.addToIndexes();
      }
      charPos++;
    }
  }
}
",2,7,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1306,if ((buffer_[pos_++] & 0xFF) != 0xd0) {,"if ((buffer_[pos_++] & 0xFF) != 0xd0) {
  doSyntaxrmSemantics(CodePoint.SYNERRCD_CBYTE_NOT_D0);
}
",2,2,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1307,if ((ret_val = systemSchemaNames[i--].equals(name))),"if ((ret_val=systemSchemaNames[i--].equals(name))) break;
",2,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, IfStatement-expression, ),
"
1308,while (t != null && (pos = t.image.lastIndexOf(rsvc.getParserConfiguration().getHashChar())) == -1),"while (t != null && (pos=t.image.lastIndexOf(rsvc.getParserConfiguration().getHashChar())) == -1) {
  t=t.next;
}
",2,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1309,"if (t_util.t_insertAtSlot(page2, i++, row1) == null)","if (t_util.t_insertAtSlot(page2,i++,row1) == null) break;
",2,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1310,if ( ctr++ == 0 || RoleTestData.isTree( rle ) ),"if (ctr++ == 0 || RoleTestData.isTree(rle)) {
  adminMgr.addRole(role);
  LOG.debug(""addDescendant add role ["" + role.getName() + ""] successful"");
}
",2,2,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1311,if (table != null && (drillTable = table.unwrap(DrillTable.class)) != null) {,"if (table != null && (drillTable=table.unwrap(DrillTable.class)) != null) {
  drillTable.setOptions(session.getOptions());
  drillTable.setTableMetadataProviderManager(tableCache.getUnchecked(DrillTableKey.of(names,drillTable)));
}
",2,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1312,if ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {,"if ((matcher=ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {
  String pn=propertyName(matcher.group(1));
  c2.append("" if( $2.equals(\"""").append(pn).append(""\"") ){ return ($w)w."").append(method.getName()).append(""(); }"");
  pts.put(pn,method.getReturnType());
}
 else if ((matcher=ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) {
  String pn=propertyName(matcher.group(1));
  c2.append("" if( $2.equals(\"""").append(pn).append(""\"") ){ return ($w)w."").append(method.getName()).append(""(); }"");
  pts.put(pn,method.getReturnType());
}
 else if ((matcher=ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {
  Class<?> pt=method.getParameterTypes()[0];
  String pn=propertyName(matcher.group(1));
  c1.append("" if( $2.equals(\"""").append(pn).append(""\"") ){ w."").append(method.getName()).append('(').append(arg(pt,""$3"")).append(""); return; }"");
  pts.put(pn,pt);
}
",2,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
1313,"while ((i=s.indexOf('=', i+1))>0)","while ((i=s.indexOf('=',i + 1)) > 0) {
  int n=s.lastIndexOf('&',i);
  if (n < 0)   n=s.lastIndexOf('?',i);
  if (n < 0)   continue;
  int v=s.indexOf('&',i);
  String name=s.substring(n + 1,i);
  String value=(v > i) ? s.substring(i + 1,v) : s.substring(i + 1);
  log.debug(""Adding view parameter '{}' with value '{}'."",name,value);
  if (map == null)   map=new HashMap<String,String>();
  map.put(name,value);
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1314,while ((timer = timers.peek()) != null && timer.f0 <= now) {,"while ((timer=timers.peek()) != null && timer.f0 <= now) {
  timer.f1.onProcessingTime(now);
  timers.poll();
}
",2,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1315,while ((element = readerIterator.next(element)) != null) {},"while ((element=readerIterator.next(element)) != null) {
}
",2,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1316,while (++count < 10 && !newdfs.recoverLease(file)) {,"while (++count < 10 && !newdfs.recoverLease(file)) {
  Thread.sleep(1000);
}
",2,4,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1317,if (++index >= charArray.length) return false;,"if (++index >= charArray.length) return false;
",2,2,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1318,if (++index >= charArray.length) break;,"if (++index >= charArray.length) break;
",2,2,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1319,while ((maxRows <= 0 || i++ < maxRows) && groovyRS.next()) {,"while ((maxRows <= 0 || i++ < maxRows) && groovyRS.next()) {
  rowClosure.call(groovyRS);
}
",2,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1320,for(int c; (c = in.read()) != -1; b.append((char)c));,"for (int c; (c=in.read()) != -1; b.append((char)c)) ;
",2,5,11,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, ForStatement-updaters, ),
SimpleName(MethodInvocation-name, ForStatement-updaters, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, ForStatement-updaters, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
1321,if (i != (end+1) && a[i++] == DECIMAL) {,"if (i != (end + 1) && a[i++] == DECIMAL) {
  while (i <= end) {
    if (a[i] != ZERO) {
      if (isdigit(a[i])) {
        return false;
      }
      break;
    }
    i++;
  }
}
",2,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1322,if (Integer.parseInt(args[++i]) > 0) {,"if (Integer.parseInt(args[++i]) > 0) {
  job.getConfiguration().setInt(MRJobConfig.NUM_MAPS,Integer.parseInt(args[i]));
}
",2,4,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1323,"while (k-- > 0 && addWorker(null, true)) {","while (k-- > 0 && addWorker(null,true)) {
  if (workQueue.isEmpty())   break;
}
",2,2,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1324,if (!quote && (index = fromChars.indexOf(next)) != -1) {,"if (!quote && (index=fromChars.indexOf(next)) != -1) {
  output.append(toChars.charAt(index));
}
 else if (check && !quote && ((next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z'))) {
  throw new IllegalArgumentException(Messages.getString(""text.05"",String.valueOf(next),template));
}
 else {
  output.append(next);
}
",2,2,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1325,if(ia3++>1000) break;,"if (ia3++ > 1000) break;
",2,2,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1326,if (this.invocations++ % 3 == 0) {,"if (this.invocations++ % 3 == 0) {
  throw new org.apache.hadoop.util.Shell.ExitCodeException(-1,""Failed"");
}
",2,2,4,,"ThisExpression(FieldAccess-expression, PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1327,"while ((line = reader.readLine(curPrompt + ""> "")) != null) {","while ((line=reader.readLine(curPrompt + ""> "")) != null) {
  if (!prefix.toString().equals("""")) {
    prefix.append('\n');
  }
  if (line.trim().startsWith(""--"")) {
    continue;
  }
  if (line.trim().endsWith("";"") && !line.trim().endsWith(""\\;"")) {
    line=prefix + line;
    response=cli.processLine(line,true);
    prefix.setLength(0);
    ;
    curDB=getFormattedDb(conf,ss);
    curPrompt=prompt + curDB;
    dbSpaces=dbSpaces.length() == curDB.length() ? dbSpaces : spacesForString(curDB);
  }
 else {
    prefix.append(line);
    curPrompt=prompt2 + dbSpaces;
    continue;
  }
}
",2,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1328,if ((q = p.prev) != null && (q = (p = q).prev) != null),"if ((q=p.prev) != null && (q=(p=q).prev) != null) p=(h != (h=head)) ? h : q;
 else if (p.next == p) continue restartFromHead;
 else {
  newNode.lazySetNext(p);
  if (p.casPrev(null,newNode)) {
    if (p != h)     casHead(h,newNode);
    return newNode;
  }
}
",2,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1329,while ((line = ((BufferedReader) reader).readLine()) != null) {,"while ((line=((BufferedReader)reader).readLine()) != null) {
  if (line == null || line.trim().length() <= 0)   continue;
  decoder=DecoderFactory.get().jsonDecoder(schema,line);
  record=datumReader.read(null,decoder);
  break;
}
",2,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1330,if ((next = regex.charAt(offset)) == '#',"if ((next=regex.charAt(offset)) == '#' || next == '\t' || next == '\n' || next == '\f' || next == '\r' || next == ' ') {
  buffer.append((char)next);
  offset++;
}
 else {
  buffer.append('\\');
  buffer.append((char)next);
  offset++;
}
",2,25,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1331,if (hasToDelete = !regionDeployment.toDelete.isEmpty()) {,"if (hasToDelete=!regionDeployment.toDelete.isEmpty()) {
  break;
}
",2,2,3,,"SimpleName(Assignment-leftHandSide, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, Assignment-rightHandSide, IfStatement-expression, ),
"
1332,if (current - lastException > EXCEPTION_INTERVAL || exceptionCount++ < MAX_EXCEPTIONS) {,"if (current - lastException > EXCEPTION_INTERVAL || exceptionCount++ < MAX_EXCEPTIONS) {
  LOGGER.error(msg);
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1333,if ((curr = key[pos = HashCommon.mix(k.hashCode()) & mask]) == null) {,"if ((curr=key[pos=HashCommon.mix(k.hashCode()) & mask]) == null) {
  return false;
}
",2,2,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1334,if (lastLine != null && (matcher = SOURCE_MAPPING_URL_PATTERN.matcher(lastLine)).matches()) {,"if (lastLine != null && (matcher=SOURCE_MAPPING_URL_PATTERN.matcher(lastLine)).matches()) {
  sourceMapFileName=matcher.group(1);
}
 else {
  dm=NO_MAPPING;
}
",2,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1335,if ( !exists() || javaEditor == null || null == (guards = javaEditor.getGuardedSectionManager())) {,"if (!exists() || javaEditor == null || null == (guards=javaEditor.getGuardedSectionManager())) {
  return false;
}
",2,4,7,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1336,while ((n = n / 10) > 0) l++;,"while ((n=n / 10) > 0) l++;
",2,2,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
1337,if ((sourceRoots[i] = URLMapper.findFileObject(rootURLs[i])),"if ((sourceRoots[i]=URLMapper.findFileObject(rootURLs[i])) == null) {
  ErrorManager.getDefault().log(ErrorManager.INFORMATIONAL,""No FileObject found for the following URL: "" + rootURLs[i]);
  someSkipped=true;
  continue;
}
",2,3,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1338,while ((hasToken = ts.movePrevious()) && ts.token().id() == JavaTokenId.WHITESPACE),"while ((hasToken=ts.movePrevious()) && ts.token().id() == JavaTokenId.WHITESPACE) ;
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1339,while ((wasNext = tokenSequence.moveNext()) && allowedTokensSet.contains(tokenSequence.token().id())),"while ((wasNext=tokenSequence.moveNext()) && allowedTokensSet.contains(tokenSequence.token().id())) ;
",2,2,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1340,while (tries-- > 0 && workerSession.suspendReason() == SuspendReason.Unknown),"while (tries-- > 0 && workerSession.suspendReason() == SuspendReason.Unknown) try {
  Thread.sleep(100);
  processEvents();
}
 catch (InterruptedException ie) {
}
",2,3,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1341,if ((arrayTrans[i] = getTransferableOwner(sel[i])) == null) {,"if ((arrayTrans[i]=getTransferableOwner(sel[i])) == null) {
  return;
}
",2,2,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1342,if (-1 != (layer = layerOfFile (fe.getFile ()))),"if (-1 != (layer=layerOfFile(fe.getFile()))) attachNotifier(mfo,layer);
",2,2,5,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1343,while(++sep < fileLine.length() && Character.isWhitespace(fileLine.charAt(sep))) ;,"while (++sep < fileLine.length() && Character.isWhitespace(fileLine.charAt(sep))) ;
",2,3,9,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1344,"while ((bufferFilled = in.read(buffer, 0, buffer.length)) != -1","while ((bufferFilled=in.read(buffer,0,buffer.length)) != -1 && totalRead + bufferFilled <= contentLength) {
  totalRead+=bufferFilled;
  out.write(buffer,0,bufferFilled);
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1345,for (pos = 0; pos < numberSpec.length(),"for (pos=0; pos < numberSpec.length() && (ch=numberSpec.charAt(pos)) != '.'; pos++) {
  if (ch == ',') {
    number.setNumberGroupingAttribute(new Boolean(true));
  }
 else   if (ch == '0') {
    nDigits++;
  }
}
",2,2,5,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
"
1346,if(processName != null && (atIndex = processName.indexOf('@')) > 0),"if (processName != null && (atIndex=processName.indexOf('@')) > 0) {
  _osPid=processName.substring(0,atIndex);
  _osPidInt=parseInt(_osPid,-1);
}
 else {
  _osPid=null;
}
",2,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1347,if (--HttpShellJobDriver.this.expectCount <= 0) {,"if (--HttpShellJobDriver.this.expectCount <= 0) {
  HttpShellJobDriver.this.state=State.READY;
  if (HttpShellJobDriver.this.cmd == null) {
    LOG.log(Level.INFO,""All evaluators ready; waiting for command. State: {0}"",HttpShellJobDriver.this.state);
  }
 else {
    HttpShellJobDriver.this.submit(HttpShellJobDriver.this.cmd);
  }
}
",2,2,3,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1348,if (Character.toLowerCase((char) ch) != string.charAt(i++)) {,"if (Character.toLowerCase((char)ch) != string.charAt(i++)) {
  reset(mark);
  return false;
}
",2,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1349,if (isDigit(c = b[off++]) &&,"if (isDigit(c=b[off++]) && (n < OVERFLOW_LIMIT || (n == OVERFLOW_LIMIT && (c - '0') < 8))) {
  n=n * 10 + c - '0';
}
 else {
  throw new NumberFormatException();
}
",2,2,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
1350,if ((url = this.getClass().getClassLoader().getResource(fileName)) != null) {,"if ((url=this.getClass().getClassLoader().getResource(fileName)) != null) {
  URI uri;
  try {
    uri=quote(url);
  }
 catch (  URISyntaxException e) {
    uri=null;
  }
  if (uri != null) {
    return new File(uri);
  }
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1351,if ( (pos = vs[0].indexOf('-')) > 0 ) {,"if ((pos=vs[0].indexOf('-')) > 0) {
  major=Integer.parseInt(vs[0].substring(0,pos));
}
 else {
  major=Integer.parseInt(vs[0]);
}
",2,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1352,if ((i = ((SimpleValue) x).getBigIntegerValue().intValue()) != v.length()) {,"if ((i=((SimpleValue)x).getBigIntegerValue().intValue()) != v.length()) {
  context.invalid(XmlErrorCodes.DATATYPE_LENGTH_VALID$STRING,new Object[]{""anyURI"",v,i,QNameHelper.readable(sType)});
}
",2,2,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1353,if ((bct != null) && ((ciBase = bct.getCoverageIndex(giBase)) >= 0)) {,"if ((bct != null) && ((ciBase=bct.getCoverageIndex(giBase)) >= 0)) {
  if ((bam != null) && (ciBase < bam.length)) {
    Anchor[] ba=bam[ciBase];
    if ((ba != null) && (markClass < ba.length)) {
      return ba[markClass];
    }
  }
}
",2,2,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1354,"for (QueryBundle<Query, Void, MutableLong> tquery; (tquery = wqqm.dequeue()) != null; qc++) {","for (QueryBundle<Query,Void,MutableLong> tquery; (tquery=wqqm.dequeue()) != null; qc++) {
  Assert.assertEquals(""Query ids must equal."",Integer.toString(qc),tquery.getQuery().getId());
}
",3,70,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1355,while (!finalState.equals(app.getState()) && timeoutSecs++ < 40) {,"while (!finalState.equals(app.getState()) && timeoutSecs++ < 40) {
  System.out.println(""App : "" + appId + "" State is : ""+ app.getState()+ "" Waiting for state : ""+ finalState);
  Thread.sleep(2000);
}
",3,16,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1356,if ((attempts-- <= 0) && lastWriter != null && !lastWriter.isAlive()) {,"if ((attempts-- <= 0) && lastWriter != null && !lastWriter.isAlive()) {
  throw new IOException(Messages.getString(""luni.CE""));
}
",3,13,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1357,for (int k = 3; (i <= hi) && (--k >= 0); i++) {,"for (int k=3; (i <= hi) && (--k >= 0); i++) {
  final int v=fmap[i];
  final int vd=v + d;
  int j=i;
  boolean onceRun=false;
  int a=0;
  HAMMER:   while (true) {
    if (onceRun) {
      fmap[j]=a;
      if ((j-=h) <= mj) {
        break;
      }
    }
 else {
      onceRun=true;
    }
    a=fmap[j - h];
    int i1=a + d;
    int i2=vd;
    if (block[i1 + 1] == block[i2 + 1]) {
      if (block[i1 + 2] == block[i2 + 2]) {
        if (block[i1 + 3] == block[i2 + 3]) {
          if (block[i1 + 4] == block[i2 + 4]) {
            if (block[i1 + 5] == block[i2 + 5]) {
              if (block[(i1+=6)] == block[(i2+=6)]) {
                int x=lastShadow;
                while (x > 0) {
                  x-=4;
                  if (block[i1 + 1] == block[i2 + 1]) {
                    if (quadrant[i1] == quadrant[i2]) {
                      if (block[i1 + 2] == block[i2 + 2]) {
                        if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
                          if (block[i1 + 3] == block[i2 + 3]) {
                            if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
                              if (block[i1 + 4] == block[i2 + 4]) {
                                if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
                                  if ((i1+=4) >= lastPlus1) {
                                    i1-=lastPlus1;
                                  }
                                  if ((i2+=4) >= lastPlus1) {
                                    i2-=lastPlus1;
                                  }
                                  workDoneShadow++;
                                }
 else                                 if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
                                  continue HAMMER;
                                }
 else {
                                  break HAMMER;
                                }
                              }
 else                               if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                                continue HAMMER;
                              }
 else {
                                break HAMMER;
                              }
                            }
 else                             if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
                              continue HAMMER;
                            }
 else {
                              break HAMMER;
                            }
                          }
 else                           if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
                            continue HAMMER;
                          }
 else {
                            break HAMMER;
                          }
                        }
 else                         if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
                          continue HAMMER;
                        }
 else {
                          break HAMMER;
                        }
                      }
 else                       if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
                        continue HAMMER;
                      }
 else {
                        break HAMMER;
                      }
                    }
 else                     if ((quadrant[i1] > quadrant[i2])) {
                      continue HAMMER;
                    }
 else {
                      break HAMMER;
                    }
                  }
 else                   if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
                    continue HAMMER;
                  }
 else {
                    break HAMMER;
                  }
                }
                break;
              }
 else               if ((block[i1] & 0xff) <= (block[i2] & 0xff)) {
                break;
              }
            }
 else             if ((block[i1 + 5] & 0xff) <= (block[i2 + 5] & 0xff)) {
              break;
            }
          }
 else           if ((block[i1 + 4] & 0xff) <= (block[i2 + 4] & 0xff)) {
            break;
          }
        }
 else         if ((block[i1 + 3] & 0xff) <= (block[i2 + 3] & 0xff)) {
          break;
        }
      }
 else       if ((block[i1 + 2] & 0xff) <= (block[i2 + 2] & 0xff)) {
        break;
      }
    }
 else     if ((block[i1 + 1] & 0xff) <= (block[i2 + 1] & 0xff)) {
      break;
    }
  }
  fmap[j]=v;
}
",3,5,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1358,if (block[(i1 += 6)] == block[(i2 += 6)]) {,"if (block[(i1+=6)] == block[(i2+=6)]) {
  int x=lastShadow;
  while (x > 0) {
    x-=4;
    if (block[i1 + 1] == block[i2 + 1]) {
      if (quadrant[i1] == quadrant[i2]) {
        if (block[i1 + 2] == block[i2 + 2]) {
          if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
            if (block[i1 + 3] == block[i2 + 3]) {
              if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
                if (block[i1 + 4] == block[i2 + 4]) {
                  if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
                    if ((i1+=4) >= lastPlus1) {
                      i1-=lastPlus1;
                    }
                    if ((i2+=4) >= lastPlus1) {
                      i2-=lastPlus1;
                    }
                    workDoneShadow++;
                  }
 else                   if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
                    continue HAMMER;
                  }
 else {
                    break HAMMER;
                  }
                }
 else                 if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                  continue HAMMER;
                }
 else {
                  break HAMMER;
                }
              }
 else               if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
                continue HAMMER;
              }
 else {
                break HAMMER;
              }
            }
 else             if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
              continue HAMMER;
            }
 else {
              break HAMMER;
            }
          }
 else           if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
            continue HAMMER;
          }
 else {
            break HAMMER;
          }
        }
 else         if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
          continue HAMMER;
        }
 else {
          break HAMMER;
        }
      }
 else       if ((quadrant[i1] > quadrant[i2])) {
        continue HAMMER;
      }
 else {
        break HAMMER;
      }
    }
 else     if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
      continue HAMMER;
    }
 else {
      break HAMMER;
    }
  }
  break;
}
 else if ((block[i1] & 0xff) <= (block[i2] & 0xff)) {
  break;
}
",3,5,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1359,"for (int t = nGroups, bc = 999999999; --t >= 0;) {","for (int t=nGroups, bc=999999999; --t >= 0; ) {
  final int cost_t=cost[t];
  if (cost_t < bc) {
    bc=cost_t;
    bt=t;
  }
}
",3,3,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1360,for (i = columns.length; i-- > 0; ) {,"for (i=columns.length; i-- > 0; ) {
  int column=columns[i];
  int len=positions[column + 1] - positions[column];
  if (len > 0) {
    if (positions[column + 1] == length && !separatorAtEnd) {
      newArrayLen+=len;
    }
 else {
      newArrayLen+=len - 1;
    }
  }
  newArrayLen+=dstSeparators[i].length;
}
",3,3,4,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
QualifiedName(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1361,while ((curr = data[pos--] & 0xff) >= MAX_BIT) {,"while ((curr=data[pos--] & 0xff) >= MAX_BIT) {
  numFields|=(curr & 0x7f) << shift;
  shift+=7;
}
",3,7,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1362,while (++i < n && (buf[i] != '\r') && (buf[i] != '\n')) {,"while (++i < n && (buf[i] != '\r') && (buf[i] != '\n')) {
  if (buf[i] == ' ')   continue;
  authInfo.append((char)(buf[i] & 0x7f));
}
",3,4,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1363,if (numDigits > 0 && ++counter[0] > 8) {,"if (numDigits > 0 && ++counter[0] > 8) {
  return -1;
}
",3,17,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1364,while (pos[0] < str0.length() && isZero(ch0 = str0.codePointAt(pos[0]))) {,"while (pos[0] < str0.length() && isZero(ch0=str0.codePointAt(pos[0]))) {
  zeroes0++;
  pos[0]+=Character.charCount(ch0);
}
",3,9,10,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1365,for (int i=0; (key = connection.getHeaderField(i)) != null; i++) {,"for (int i=0; (key=connection.getHeaderField(i)) != null; i++) {
  mimeHeaders.addHeader(key,connection.getHeaderField(i));
}
",3,6,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1366,while ((curr = Double.doubleToLongBits(key[pos = pos + 1 & this.mask])) != 0L) {,"while ((curr=Double.doubleToLongBits(key[pos=pos + 1 & this.mask])) != 0L) {
  if (curr == longKey) {
    return false;
  }
}
",3,14,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1367,if ((ch = this.read()) == 'C') valid++;,"if ((ch=this.read()) == 'C') valid++;
 else throw new SAXException(""Unrecognized file format (."" + valid + "",""+ ch+ "")"");
",3,3,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1368,if ((curr = key[pos = mix(k.hashCode()) & this.mask]) != null) {,"if ((curr=key[pos=mix(k.hashCode()) & this.mask]) != null) {
  if (curr.equals(k)) {
    return pos;
  }
  while ((curr=key[pos=pos + 1 & this.mask]) != null) {
    if (curr.equals(k)) {
      return pos;
    }
  }
}
",3,8,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1369,"while(remain > 0 && (chunk=toNetASCII.read(output,offset,remain)) != -1){","while (remain > 0 && (chunk=toNetASCII.read(output,offset,remain)) != -1) {
  length+=chunk;
  offset+=chunk;
  remain-=chunk;
}
",3,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1370,"while ((curRow=ti.getRow(tc, keyRow, rf.ALIASID_INDEX_NUM)) != null)","while ((curRow=ti.getRow(tc,keyRow,rf.ALIASID_INDEX_NUM)) != null) {
  perm=(PermissionsDescriptor)rf.buildDescriptor(curRow,(TupleDescriptor)null,this);
  removePermEntryInCache(perm);
  ExecIndexRow uuidKey;
  uuidKey=rf.buildIndexKeyRow(rf.ROUTINEPERMSID_INDEX_NUM,perm);
  ti.deleteRow(tc,uuidKey,rf.ROUTINEPERMSID_INDEX_NUM);
}
",3,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1371,"if ( !Strings.isCharASCII( s, pos++, '(' ) )","if (!Strings.isCharASCII(s,pos++,'(')) {
  return null;
}
",3,3,5,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1372,if (((curr = key[pos = (it.unimi.dsi.fastutil.HashCommon.mix((k).hashCode())) & mask]),"if (((curr=key[pos=(it.unimi.dsi.fastutil.HashCommon.mix((k).hashCode())) & mask]) == null)) {
  return null;
}
",3,5,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, IfStatement-expression, ),
"
1373,"if ((m = Pattern.compile(""(?:([0-9])?|(&)?)>(>)?"").matcher(t)).matches())","if ((m=Pattern.compile(""(?:([0-9])?|(&)?)>(>)?"").matcher(t)).matches()) {
  int fd;
  if (m.group(1) != null) {
    fd=Integer.parseInt(m.group(1));
  }
 else   if (m.group(2) != null) {
    fd=-1;
  }
 else {
    fd=1;
  }
  boolean append=m.group(3) != null;
  Set<StandardOpenOption> options=new HashSet<>();
  options.add(StandardOpenOption.WRITE);
  options.add(StandardOpenOption.CREATE);
  options.add(append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING);
  Token tok=tokens.get(++i);
  Object val=Expander.expand(tok,closure);
  for (  Path p : toPaths(val)) {
    p=closure.session().redirect(p,WRITE);
    Channel ch=Files.newByteChannel(p,options);
    if (fd >= 0) {
      setStream(ch,fd,WRITE);
    }
 else {
      setStream(ch,1,WRITE);
      setStream(ch,2,WRITE);
    }
  }
}
 else if ((m=Pattern.compile(""([0-9])?>&([0-9])"").matcher(t)).matches()) {
  int fd0=1;
  if (m.group(1) != null) {
    fd0=Integer.parseInt(m.group(1));
  }
  int fd1=Integer.parseInt(m.group(2));
  if (streams[fd0] != null && toclose[fd0]) {
    streams[fd0].close();
  }
  if (toclose[fd1]) {
    Channel channel=streams[fd1];
    AtomicInteger references=new AtomicInteger();
    streams[fd0]=new RefByteChannel(channel,references);
    streams[fd1]=new RefByteChannel(channel,references);
    toclose[fd0]=true;
  }
 else {
    streams[fd0]=streams[fd1];
    toclose[fd0]=false;
  }
}
 else if ((m=Pattern.compile(""([0-9])?<(>)?"").matcher(t)).matches()) {
  int fd=0;
  if (m.group(1) != null) {
    fd=Integer.parseInt(m.group(1));
  }
  boolean output=m.group(2) != null;
  Set<StandardOpenOption> options=new HashSet<>();
  options.add(StandardOpenOption.READ);
  if (output) {
    options.add(StandardOpenOption.WRITE);
    options.add(StandardOpenOption.CREATE);
  }
  Token tok=tokens.get(++i);
  Object val=Expander.expand(tok,closure);
  for (  Path p : toPaths(val)) {
    p=closure.session().redirect(p,READ + (output ? WRITE : 0));
    Channel ch=Files.newByteChannel(p,options);
    setStream(ch,fd,READ + (output ? WRITE : 0));
  }
}
 else if ((m=Pattern.compile(""<<-?"").matcher(t)).matches()) {
  final Token hereDoc=tokens.get(++i);
  final boolean stripLeadingTabs=t.charAt(t.length() - 1) == '-';
  InputStream doc=new InputStream(){
    final byte[] bytes=hereDoc.toString().getBytes();
    int index=0;
    boolean nl=true;
    @Override public int read(){
      if (nl && stripLeadingTabs) {
        while (index < bytes.length && bytes[index] == '\t') {
          index++;
        }
      }
      if (index < bytes.length) {
        int ch=bytes[index++];
        nl=ch == '\n';
        return ch;
      }
      return -1;
    }
  }
;
  Channel ch=Channels.newChannel(doc);
  setStream(ch,0,READ);
}
 else if (Token.eq(""<<<"",t)) {
  Token word=tokens.get(++i);
  Object val=Expander.expand(""\"""" + word + ""\"""",closure);
  String str=val != null ? String.valueOf(val) : """";
  Channel ch=Channels.newChannel(new ByteArrayInputStream(str.getBytes()));
  setStream(ch,0,READ);
}
",3,37,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
"
1374,if (mState.itemCount++ > 0) {,"if (mState.itemCount++ > 0) {
  mWriter.write(JSON.COMMA);
}
",3,3,2,,"QualifiedName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1375,if (++_lengthIndex == 2 && _length == 0 && _isLastChunk) {,"if (++_lengthIndex == 2 && _length == 0 && _isLastChunk) {
  if (_next.isShift(_value.toString()))   return _next.shift(_value.toString());
 else {
    printObject(""\"""" + _value + ""\"""");
    return _next;
  }
}
 else return this;
",3,3,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1376,while ((curr = key[pos = pos + 1 & this.mask]) != null) {,"while ((curr=key[pos=pos + 1 & this.mask]) != null) {
  if (curr.equals(k)) {
    return pos;
  }
}
",3,4,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1377,if (!(type instanceof Class<?>),"if (!(type instanceof Class<?>) || (actual=BasicTypeInfo.getInfoFor((Class<?>)type)) == null) {
  throw new InvalidTypesException(""Basic type expected."");
}
",3,3,3,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1378,if ((rl = p.right = r.left) != null) {,"if ((rl=p.right=r.left) != null) {
  rl.parent=p;
}
",3,4,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-leftHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1379,for (int count = -1; (count = in.read(buf)) >= 0;) {,"for (int count=-1; (count=in.read(buf)) >= 0; ) {
  bout.write(buf,0,count);
}
",3,3,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1380,while ((c = inputStream.read()) != -1 && crFound == false && lfFound == false) {,"while ((c=inputStream.read()) != -1 && crFound == false && lfFound == false) {
  if (c == CR) {
    crFound=true;
  }
 else   if (c == LF) {
    lfFound=true;
  }
 else {
    buff.append((char)c);
  }
}
",3,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1381,"if ((cr = s.compare(i, p)) > 0) break;","if ((cr=s.compare(i,p)) > 0) break;
",3,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1382,if ((t = geographicArea.getMinimum(1)) >= φmin) φmin = t; else clip = true;,"if ((t=geographicArea.getMinimum(1)) >= φmin) φmin=t;
 else clip=true;
",3,12,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
"
1383,while ((result = gin2.read(new byte[200])) != -1) {,"while ((result=gin2.read(new byte[200])) != -1) {
  total+=result;
}
",3,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1384,if (++calls > 1) return null;,"if (++calls > 1) return null;
",3,3,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1385,while (++o2 < end && value[++o1] == target[o2]) {,"while (++o2 < end && value[++o1] == target[o2]) {
}
",3,3,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1386,"while ((toRemove = (Entry<K, V>) referenceQueue.poll()) != null) {","while ((toRemove=(Entry<K,V>)referenceQueue.poll()) != null) {
  removeEntry(toRemove);
}
",3,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1387,"if(args[++i].startsWith(""-"")){","if (args[++i].startsWith(""-"")) {
  printUsageAndExit();
}
",3,3,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
"
1388,if (v.isNull[i] = ((realNulls && v.isNull[i]) || vector[i] == 0)) {,"if (v.isNull[i]=((realNulls && v.isNull[i]) || vector[i] == 0)) {
  v.vector[i]=DoubleColumnVector.NULL_VALUE;
}
",3,7,8,,"QualifiedName(ArrayAccess-array, Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, IfStatement-expression, ),
"
1389,if (++i >= args.length && Integer.parseInt(args[i]) < 1),"if (++i >= args.length && Integer.parseInt(args[i]) < 1) throw new Error(""Expected max number of bsp tasks > 1"");
",3,3,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1390,while (maybeStrip(n = node.getFirstChild())) { },"while (maybeStrip(n=node.getFirstChild())) {
}
",3,3,5,,"SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
1391,if (((ch = str.charAt(i)) < 0x20) || (ch > 0x7e)),"if (((ch=str.charAt(i)) < 0x20) || (ch > 0x7e)) {
  String s=""0000"" + Integer.toString(ch,16);
  retval.append(""\\u"" + s.substring(s.length() - 4,s.length()));
}
 else {
  retval.append(ch);
}
",3,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1392,"if((attr = fo.getAttribute(""publicId"")) instanceof String && attr.equals(publicId)) {","if ((attr=fo.getAttribute(""publicId"")) instanceof String && attr.equals(publicId)) {
  source=new InputSource(fo.getInputStream());
  break;
}
 else if ((attr=fo.getAttribute(""systemId"")) instanceof String && attr.equals(systemId)) {
  source=new InputSource(fo.getInputStream());
  break;
}
",3,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1393,while((b=bis.read())!=-1)bos.write(b);,"while ((b=bis.read()) != -1) bos.write(b);
",3,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, WhileStatement-body, ),
"
1394,while (index < diffLine.length() && Character.isDigit(c = diffLine.charAt(index))) {,"while (index < diffLine.length() && Character.isDigit(c=diffLine.charAt(index))) {
  index++;
  from1=10 * from1 + Character.digit(c,10);
}
",3,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1395,if (e.key.hashCode() == hash && ((k = e.key) == key || key.equals(k))) {,"if (e.key.hashCode() == hash && ((k=e.key) == key || key.equals(k))) {
  return e.value;
}
",3,3,9,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1396,if (c == EOF || !Character.isJavaIdentifierPart(c = translateSurrogates(c))) {,"if (c == EOF || !Character.isJavaIdentifierPart(c=translateSurrogates(c))) {
  input.backup((c >= Character.MIN_SUPPLEMENTARY_CODE_POINT) ? 2 : 1);
  return tokenFactory.createToken(JPQLTokenId.IDENTIFIER);
}
",3,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1397,"if ((value = this.get(name)) != null && !"""".equals(value)) {","if ((value=this.get(name)) != null && !"""".equals(value)) {
  return Boolean.parseBoolean(value);
}
",3,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1398,"if (((pos = line.indexOf(""<!DOCTYPE"")) != -1)","if (((pos=line.indexOf(""<!DOCTYPE"")) != -1) || ((pos=line.indexOf(""<HTML"")) != -1) || ((pos=line.indexOf(""<html"")) != -1)) {
  in.unread(line.substring(pos).getBytes(""UTF-8""));
  line.setLength(pos);
  try {
    processHeaderLine(line);
  }
 catch (  Exception e) {
    Http.LOG.warn(""Error: "",e);
  }
  return;
}
",3,3,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
1399,"while (this.next(ptr, i++, maxOffset) != null) {","while (this.next(ptr,i++,maxOffset) != null) {
  lowerSpan++;
}
",3,3,6,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1400,if ((++i == length) || ((low = string.charAt(i)) & 0xDC00) != 0xDC00),"if ((++i == length) || ((low=string.charAt(i)) & 0xDC00) != 0xDC00) {
  throw new IllegalArgumentException(""String contains invalid Unicode code points"");
}
",3,5,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1401,if ( (at = e.getUrl().lastIndexOf('/')) > -1),"if ((at=e.getUrl().lastIndexOf('/')) > -1) name=e.getUrl().substring(at + 1);
",3,3,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1402,"if (Utilities.equalsApproximately(sourceCRS, crs = operation.getSourceCRS())) sourceCRS = crs;","if (Utilities.equalsApproximately(sourceCRS,crs=operation.getSourceCRS())) sourceCRS=crs;
",3,3,8,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1403,while (matchlen-- > 0) content[rundest++] = prevcontent[runsrc++];,"while (matchlen-- > 0) content[rundest++]=prevcontent[runsrc++];
",3,4,6,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, WhileStatement-body, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, WhileStatement-body, ),
"
1404,if ((c[pos++] == '/') && ((++count) == n)) {,"if ((c[pos++] == '/') && ((++count) == n)) {
  pos--;
  break;
}
",3,3,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1405,if (sendfileSize > 0,"if (sendfileSize > 0 && length > sendfileSize && (Boolean.TRUE.equals(request.getAttribute(Globals.SENDFILE_SUPPORTED_ATTR))) && (request.getClass().getName().equals(""org.apache.catalina.connector.RequestFacade"")) && (response.getClass().getName().equals(""org.apache.catalina.connector.ResponseFacade"")) && resource.isFile() && ((canonicalPath=resource.getCanonicalPath()) != null)) {
  request.setAttribute(Globals.SENDFILE_FILENAME_ATTR,canonicalPath);
  if (range == null) {
    request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(0L));
    request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(length));
  }
 else {
    request.setAttribute(Globals.SENDFILE_FILE_START_ATTR,Long.valueOf(getStart(range,length)));
    request.setAttribute(Globals.SENDFILE_FILE_END_ATTR,Long.valueOf(getEnd(range,length) + 1));
  }
  return true;
}
",3,3,2,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1406,while (x.compareTo((Template)templates.elementAt(--j)) > 0);,"while (x.compareTo((Template)templates.elementAt(--j)) > 0) ;
",3,7,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1407,while (x.compareTo(_data[--j]) < 0);,"while (x.compareTo(_data[--j]) < 0) ;
",3,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1408,while (x < array[--j]);,"while (x < array[--j]) ;
",3,3,4,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1409,"if (!tempString.substring(segIndex++).equals(""..""))","if (!tempString.substring(segIndex++).equals("".."")) {
  path=path.substring(0,segIndex).concat(path.substring(index + 4));
}
",3,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
1410,while ((m_next >= index) && DTM.NULL != (n = previousNode()));,"while ((m_next >= index) && DTM.NULL != (n=previousNode())) ;
",3,6,6,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
EmptyStatement(WhileStatement-body, ),
"
1411,"for (i++; (i < nChars) && ((c = pat.charAt(i)) != '\""'); i++);","for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\""'); i++) ;
",3,3,10,,"SimpleName(PostfixExpression-operand, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
EmptyStatement(ForStatement-body, ),
"
1412,"while (i + 1 < argv.length - 1 && !(arg = argv[i + 1]).startsWith(""-"")) {","while (i + 1 < argv.length - 1 && !(arg=argv[i + 1]).startsWith(""-"")) {
  schemas.add(arg);
  ++i;
}
",3,10,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1413,"if ((type = this.read()) == T_EOF)  throw this.ex(""parser.cc.2"", this.offset);","if ((type=this.read()) == T_EOF) throw this.ex(""parser.cc.2"",this.offset);
",3,3,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
1414,if ((ch = this.regex.charAt(off++)) >= '0' && ch <= '9') {,"if ((ch=this.regex.charAt(off++)) >= '0' && ch <= '9') {
  min=ch - '0';
  while (off < this.regexlen && (ch=this.regex.charAt(off++)) >= '0' && ch <= '9') {
    min=min * 10 + ch - '0';
    if (min < 0)     throw ex(""parser.quantifier.5"",this.offset);
  }
}
 else {
  throw ex(""parser.quantifier.1"",this.offset);
}
",3,3,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1415,while (off < this.regexlen,"while (off < this.regexlen && (ch=this.regex.charAt(off++)) >= '0' && ch <= '9') {
  min=min * 10 + ch - '0';
  if (min < 0)   throw ex(""parser.quantifier.5"",this.offset);
}
",3,3,3,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
"
1416,while (isXMLSpace((char)(c = r.read()))) {,"while (isXMLSpace((char)(c=r.read()))) {
}
",3,3,5,,"SimpleName(MethodInvocation-name, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, WhileStatement-expression, ),
"
1417,while (!getTaskStatus(s).isCompletedState() && (cycleCount++ <= MAX_CYCLE_ITERATIONS)) {,"while (!getTaskStatus(s).isCompletedState() && (cycleCount++ <= MAX_CYCLE_ITERATIONS)) {
  executor.doWork();
}
",4,15,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1418,while (Character.isDigit(priChar = (char) (byteBuffer.get() & 0xff))) {,"while (Character.isDigit(priChar=(char)(byteBuffer.get() & 0xff))) {
  facility*=10;
  facility+=Character.digit(priChar,10);
}
",4,4,7,,"SimpleName(MethodInvocation-expression, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, Assignment-rightHandSide, MethodInvocation-arguments, WhileStatement-expression, ),
"
1419,while ((line = reader.readLine()) != null && n < this.numFeatures) {,"while ((line=reader.readLine()) != null && n < this.numFeatures) {
  String featureName=line.trim();
  this.selectedFeatureNames.add(featureName);
  n++;
}
",4,8,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1420,if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {,"if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {
  fCurrentEntity.position--;
}
",4,5,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1421,for (int j = this.realSize(); j-- != 0; newKey[pos] = key[i]) {,"for (int j=this.realSize(); j-- != 0; newKey[pos]=key[i]) {
  do {
    --i;
  }
 while (Double.doubleToLongBits(key[i]) == 0L);
  if (Double.doubleToLongBits(newKey[pos=(int)MurmurHashUtil.fmix(Double.doubleToLongBits(key[i])) & mask]) != 0L) {
    while (Double.doubleToLongBits(newKey[pos=pos + 1 & mask]) != 0L) {
    }
  }
}
",4,4,10,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
ThisExpression(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ForStatement-updaters, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ForStatement-updaters, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ForStatement-updaters, ),
"
1422,if (((recordCtr++) % progressBar) == 0) {,"if (((recordCtr++) % progressBar) == 0) {
  progressable.progress();
}
",4,4,3,,"SimpleName(PostfixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1423,"if (new java.io.File((cm = ""C:\\WINNT\\system32\\cmd.exe""))","if (new java.io.File((cm=""C:\\WINNT\\system32\\cmd.exe"")).exists()) {
}
 else if (new java.io.File((cm=""C:\\WINDOWS\\system32\\cmd.exe"")).exists()) {
}
 else {
  cm=""cmd.exe"";
  System.out.println(""### WARNING: cmd.exe hasn't been found! Please, set the path to cmd.exe via java.library.path property."");
}
",4,12,3,,"QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, IfStatement-expression, ),
StringLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, IfStatement-expression, ),
"
1424,"if (retryCount++ < successRetryCount) throw new IOException(""Something bad happen"");","if (retryCount++ < successRetryCount) throw new IOException(""Something bad happen"");
",4,4,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
1425,while ((entry = reader.next(entry)) != null) count++;,"while ((entry=reader.next(entry)) != null) count++;
",4,6,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, WhileStatement-body, ),
"
1426,if ((listToDump = this.obligations).size() > 0) {,"if ((listToDump=this.obligations).size() > 0) {
  if (needsComma) {
    stringBuilder.append(',');
  }
  stringBuilder.append(""obligations="");
  stringBuilder.append(ListUtil.toString(listToDump));
  needsComma=true;
}
",4,4,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1427,if ( beg != -1 && end != -1 && ( ++beg < end ) ),"if (beg != -1 && end != -1 && (++beg < end)) paramString=command.substring(beg,end);
 else return new String[0];
",4,6,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1428,"while ((length = inputReader.read(buff, 0, toread - rcounter)) > 0 && rcounter < toread) {","while ((length=inputReader.read(buff,0,toread - rcounter)) > 0 && rcounter < toread) {
  outWriter.write(buff,0,length);
  rcounter+=length;
  offset+=length;
}
",4,4,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1429,if (++current >= max && max > -1) {,"if (++current >= max && max > -1) {
  return true;
}
",4,4,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1430,while (i++ < STRINGS.length - offset) {,"while (i++ < STRINGS.length - offset) {
  assertTrue(rs.next());
  assertEquals(STRINGS[offset + i - 1],rs.getString(1));
}
",4,4,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1431,if ((mCntr++ & 0x3ff) == 0) reportProgress();,"if ((mCntr++ & 0x3ff) == 0) reportProgress();
",4,4,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1432,"for (int i=Math.min(min.length, p.length); --i >= 0;) {","for (int i=Math.min(min.length,p.length); --i >= 0; ) {
  final double v=p[i];
  if (v < min[i])   min[i]=v;
  if (v > max[i])   max[i]=v;
}
",4,5,8,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1433,"case ')': if (--levelParenth<0) fail(wkt,'('); dimension=0; continue;","case ')':
",4,4,1,,"CharacterLiteral(SwitchCase-expression, ),
"
1434,if (((char) ch) != string.charAt(i++)) {,"if (((char)ch) != string.charAt(i++)) {
  reset(mark);
  return false;
}
",4,4,5,,"PrimitiveType(CastExpression-type, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1435,if ( (char)b1[off1++] != c2[off2++]) {,"if ((char)b1[off1++] != c2[off2++]) {
  return false;
}
",4,4,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1436,"if ( isTopLevelComponent() && (warmUpDataPath = System.getProperty(""WarmUpDataPath"")) != null ) {","if (isTopLevelComponent() && (warmUpDataPath=System.getProperty(""WarmUpDataPath"")) != null) {
  CountDownLatch warmUpLatch=new CountDownLatch(1);
  super.warmUp(warmUpDataPath,warmUpLatch);
}
 else {
  startProcessing();
}
",4,4,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1437,"if ( (pos = part.indexOf(""="") )> -1 && part.startsWith(""p"")) {","if ((pos=part.indexOf(""="")) > -1 && part.startsWith(""p"")) {
  String n=part.substring(pos + 1,part.indexOf("" Components""));
  if (part.startsWith(""p0="") && n.indexOf("" "") > -1) {
    String indx=n.substring(n.lastIndexOf("" ""));
    if (indx != null) {
      int instanceNumber=-1;
      try {
        instanceNumber=Integer.parseInt(indx.trim());
        sb.append(instanceNumber).append("" Components "");
        n=n.substring(0,n.lastIndexOf("" ""));
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  sb.append(""/"").append(n.trim());
}
 else if (part.trim().startsWith(""name="")) {
  sb.append(""/"").append(part.substring(part.trim().indexOf(""="") + 1));
}
",4,4,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1438,while ((i = (stream.read())) != -1 && Character.isDigit((char) i)) {,"while ((i=(stream.read())) != -1 && Character.isDigit((char)i)) {
  length++;
}
",5,5,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1439,"} else if ((numConsumed = super.parseArgs(args, i)) > 0) {","if ((numConsumed=super.parseArgs(args,i)) > 0) {
  i+=numConsumed - 1;
}
 else {
  System.err.println(""\nError: wrong argument "" + args[i]);
  return -1;
}
",5,8,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1440,"while (!(header = in.readLine()).equals("""")) {","while (!(header=in.readLine()).equals("""")) {
  if (""Accept-Encoding: identity"".equals(header)) {
    foundAcceptEncoding.set(true);
  }
}
",5,8,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, WhileStatement-expression, ),
"
1441,if (!isData( (d1 = base64Data[dataIndex++]) )||,"if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) return null;
",5,5,4,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1442,"while (--last>=0 && """".equals(strList.get(last))) {","while (--last >= 0 && """".equals(strList.get(last))) {
  strList.remove(last);
}
",5,5,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1443,"for(int j = 0, x; (x = in.read()) != -1; j++) {","for (int j=0, x; (x=in.read()) != -1; j++) {
  assertEquals(j,x);
}
",5,7,9,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ForStatement-expression, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, ),
"
1444,while (containerManager.containerTokens == null && waitCount++ < 20) {,"while (containerManager.containerTokens == null && waitCount++ < 20) {
  LOG.info(""Waiting for AM Launch to happen.."");
  Thread.sleep(1000);
}
",5,5,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1445,while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {,"while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) {
  LOG.info(""Waiting for NM to start.."");
  if (nmStartError != null) {
    LOG.error(""Error during startup. "",nmStartError);
    Assert.fail(nmStartError.getCause().getMessage());
  }
  Thread.sleep(2000);
}
",5,5,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1446,for (int i = currentStack.length; --i >= 0 && --parentIndex >= 0;) {,"for (int i=currentStack.length; --i >= 0 && --parentIndex >= 0; ) {
  StackTraceElement parentFrame=parentStack[parentIndex];
  if (parentFrame.equals(currentStack[i])) {
    duplicates++;
  }
 else {
    break;
  }
}
",5,5,7,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ForStatement-expression, ),
"
1447,if ((c1 = value[o1++]) == (c2 = target[o2++])) {,"if ((c1=value[o1++]) == (c2=target[o2++])) {
  continue;
}
",5,5,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1448,if ((ch = iterator.setIndex(--index)) != this.pattern[--pindex]),"if ((ch=iterator.setIndex(--index)) != this.pattern[--pindex]) break;
",5,5,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1449,if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {,"if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {
  fCurrentEntity.position--;
}
",5,5,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1450,while ((null != parent) && (null == namespace),"while ((null != parent) && (null == namespace) && (((type=parent.getNodeType()) == Node.ELEMENT_NODE) || (type == Node.ENTITY_REFERENCE_NODE))) {
  if (type == Node.ELEMENT_NODE) {
    Attr attr=((Element)parent).getAttributeNode(declname);
    if (attr != null) {
      namespace=attr.getNodeValue();
      break;
    }
  }
  parent=getParentOfNode(parent);
}
",5,5,4,,"NullLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1451,"if (0 <= (matchEnd = this. match(con, this.operations, matchStart, 1, this.options)))","if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options))) break;
",5,19,11,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1452,if (!tok.match(uch = Character.toUpperCase((char)ch)),"if (!tok.match(uch=Character.toUpperCase((char)ch)) && !tok.match(Character.toLowerCase(uch))) return -1;
",5,5,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
"
1453,if ((i = ((XmlObjectBase) o).getBigIntegerValue().intValue()) != v.length) {,"if ((i=((XmlObjectBase)o).getBigIntegerValue().intValue()) != v.length) {
  context.invalid(XmlErrorCodes.DATATYPE_LENGTH_VALID$BINARY,new Object[]{""base64Binary"",v.length,i,QNameHelper.readable(sType)});
}
",5,6,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
"
1454,if ((out[s] = (char) buf[offset + count++]) < '\u0080'),"if ((out[s]=(char)buf[offset + count++]) < '\u0080') s++;
 else if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  if ((b & 0xC0) != 0x80)   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  int c=buf[offset + count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80))   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",6,30,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1455,while ((i != -1) && ((c = a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t')),"while ((i != -1) && ((c=a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t')) i--;
",6,37,14,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1456,if (contentType.charAt(i++) != 'h') continue;,"if (contentType.charAt(i++) != 'h') continue;
",6,7,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
1457,while(edit[0] == null && cnt++ < 10) {,"while (edit[0] == null && cnt++ < 10) {
  Thread.sleep(1000);
}
",6,6,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1458,if (axes.length != (dimension = 1)) break;,"if (axes.length != (dimension=1)) break;
",6,6,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1459,if (!(newChild instanceof Dom) || (nc = (Dom) newChild).locale() != l) {,"if (!(newChild instanceof Dom) || (nc=(Dom)newChild).locale() != l) {
  throw new WrongDocumentErr(""Child to add is from another document"");
}
",6,6,7,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1460,if ((curr = key[pos = (pos + 1) & mask]) == null) {,"if ((curr=key[pos=(pos + 1) & mask]) == null) {
  return defRetValue;
}
",7,38,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1461,if (++rowNum == 26) break;,"if (++rowNum == 26) break;
",7,7,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1462,while((dy < destHeight) && ((sy = srcrows[dy]) < y + h)){,"while ((dy < destHeight) && ((sy=srcrows[dy]) < y + h)) {
  dx=dstX;
  int srcOff=off + (sy - y) * scansize;
  while ((dx < destWidth) && ((sx=srccols[dx]) < x + w)) {
    buff[dx]=pixels[srcOff + (sx - x)];
    dx++;
  }
  consumer.setPixels(dstX,dy,dx - dstX,1,model,buff,dstX,destWidth);
  dy++;
}
",7,7,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1463,while ((length = (in.read(buffer))) >= 0),"while ((length=(in.read(buffer))) >= 0) {
  out.write(buffer,0,length);
  count+=length;
}
",7,7,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1464,"while ((index = resultString.indexOf(""PropertyInt16\"":"", ++index)) > 0) {","while ((index=resultString.indexOf(""PropertyInt16\"":"",++index)) > 0) {
  count++;
}
",7,7,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1465,if ((file = new java.io.File(path)).exists()) return file;,"if ((file=new java.io.File(path)).exists()) return file;
",7,7,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
1466,"while ((index = path.indexOf(""/"", index + 1)) >= 0)","while ((index=path.indexOf(""/"",index + 1)) >= 0) numSlashes++;
",8,42,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1467,if (requestUri != null && (idx = requestUri.lastIndexOf('?')) != -1) {,"if (requestUri != null && (idx=requestUri.lastIndexOf('?')) != -1) {
  requestUri=requestUri.substring(0,idx);
  return removeTrailingSlash(requestUri);
}
",8,8,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1468,if (++i >= l) break;,"if (++i >= l) break;
",8,8,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
1469,"while ( offset < bytes.length && ( numRead = fis.read( bytes, offset, bytes.length - offset ) ) >= 0 )","while (offset < bytes.length && (numRead=fis.read(bytes,offset,bytes.length - offset)) >= 0) {
  offset+=numRead;
}
",8,8,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1470,if (++currentIndex >= treeView.getRowCount()) currentIndex = 0;,"if (++currentIndex >= treeView.getRowCount()) currentIndex=0;
",8,11,5,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1471,if (--currentIndex < 0) currentIndex = treeView.getRowCount() - 1;,"if (--currentIndex < 0) currentIndex=treeView.getRowCount() - 1;
",8,11,6,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1472,while (tables.next() && StringUtils.isNotEmpty(hiveTableName = tables.getString(1))) {,"while (tables.next() && StringUtils.isNotEmpty(hiveTableName=tables.getString(1))) {
  tableNames.add(hiveTableName);
}
",8,8,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1473,if (this.size++ >= this.maxFill) {,"if (this.size++ >= this.maxFill) {
  this.rehash(arraySize(this.size + 1,this.f));
}
",9,11,4,,"ThisExpression(FieldAccess-expression, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
1474,while ((b = chunk.getByte(textIndex++)) != 0) {,"while ((b=chunk.getByte(textIndex++)) != 0) {
  name+=(char)b;
}
",9,9,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1475,for (Result r = null; (r = scanner.next()) != null;) {,"for (Result r=null; (r=scanner.next()) != null; ) {
  updateValueSize(r);
}
",10,10,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
NullLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1476,if ((objectToDump = StringUtils.toString(this.getAttributeAssignmentExpressions())) != null) {,"if ((objectToDump=StringUtils.toString(this.getAttributeAssignmentExpressions())) != null) {
  stringBuilder.append("",attributeAssignmentExpressions="");
  stringBuilder.append((String)objectToDump);
}
",10,10,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1477,if ( count++ >= ( len - ( len >> 2 ) ) ) {,"if (count++ >= (len - (len >> 2))) {
  rehash();
  index=hash % table.length;
}
",10,10,4,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1478,"while ((index = s.indexOf(substr, index) + 1) != 0) {","while ((index=s.indexOf(substr,index) + 1) != 0) {
  n++;
}
",11,11,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1479,while((token = tokenizer.nextToken()).getType() != JsonTokenizer.TokenType.NONE) {,"while ((token=tokenizer.nextToken()).getType() != JsonTokenizer.TokenType.NONE) {
switch (token.getType()) {
case ARRAY_START:
    onArrayStart();
  pushState(State.ARRAY);
break;
case OBJECT_START:
onObjectStart();
pushState(State.OBJECT_KEY);
break;
case ARRAY_END:
popState();
onArrayEnd();
break;
case OBJECT_END:
popState();
onObjectEnd();
break;
default :
processValue(token);
break;
}
}
",11,12,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
"
1480,while (this.running && ((val2 = spillVals.next(val2Reuse)) != null)) {,"while (this.running && ((val2=spillVals.next(val2Reuse)) != null)) {
  while ((val1=blockVals.next(val1Reuse)) != null) {
    collector.collect(crosser.cross(val1,val2));
  }
  blockVals.reset();
}
",11,18,7,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1481,if (b == null || len <= 0 || !isDigit(c = b[off++])) {,"if (b == null || len <= 0 || !isDigit(c=b[off++])) {
  throw new NumberFormatException();
}
",11,21,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1482,if ((buffer[bufpos] = c = ReadByte()) == '\\') {,"if ((buffer[bufpos]=c=ReadByte()) == '\\') {
  UpdateLineColumn(c);
  int backSlashCnt=1;
  for (; ; ) {
    if (++bufpos == available)     AdjustBuffSize();
    try {
      if ((buffer[bufpos]=c=ReadByte()) != '\\') {
        UpdateLineColumn(c);
        if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
          if (--bufpos < 0)           bufpos=bufsize - 1;
          break;
        }
        backup(backSlashCnt);
        return '\\';
      }
    }
 catch (    java.io.IOException e) {
      if (backSlashCnt > 1)       backup(backSlashCnt - 1);
      return '\\';
    }
    UpdateLineColumn(c);
    backSlashCnt++;
  }
  try {
    while ((c=ReadByte()) == 'u')     ++column;
    buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));
    column+=4;
  }
 catch (  java.io.IOException e) {
    throw new Error(""Invalid escape character at line "" + line + "" column ""+ column+ ""."");
  }
  if (backSlashCnt == 1)   return c;
 else {
    backup(backSlashCnt - 1);
    return '\\';
  }
}
 else {
  UpdateLineColumn(c);
  return c;
}
",13,13,5,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1483,"for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )","for (i=toRet - Math.min(curPos,seenUpto); i-- > 0; ) try {
  curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
  throw new Error(""Internal Error : Please send a bug report."");
}
",13,14,8,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1484,while (s.squaredNumber == 0 && !(expired = doSleep(10))) {,"while (s.squaredNumber == 0 && !(expired=doSleep(10))) {
}
",14,14,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1485,while (seq.moveNext() && nonRelevant.contains((token = seq.token()).id())) {,"while (seq.moveNext() && nonRelevant.contains((token=seq.token()).id())) {
  if (JavaTokenId.WHITESPACE == token.id()) {
    int indexOf=token.text().toString().indexOf('\n');
    if (indexOf > -1) {
      wideEnd=seq.offset() + indexOf + 1;
      break;
    }
 else {
      wideEnd=seq.offset();
    }
  }
 else   if (JavaTokenId.LINE_COMMENT == token.id()) {
    wideEnd=seq.offset() + token.text().length();
    break;
  }
 else   if (JavaTokenId.JAVADOC_COMMENT == token.id()) {
    break;
  }
}
",14,20,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1486,while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {,"while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) {
  Thread.sleep(2000);
  LOG.info(""Waiting for next attempt to start"");
}
",15,15,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1487,"while (b <= c && (comparison = comp.compare(array[b], partionValue)) <= 0) {","while (b <= c && (comparison=comp.compare(array[b],partionValue)) <= 0) {
  if (comparison == 0) {
    temp=array[a];
    array[a++]=array[b];
    array[b]=temp;
  }
  b++;
}
",15,15,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1488,"if ( -1 < (index = body.getClass().getName().indexOf( ""NotModifiedException"")) ) {","if (-1 < (index=body.getClass().getName().indexOf(""NotModifiedException""))) {
  if (index > -1)   response.sendError(HttpServletResponse.SC_NOT_MODIFIED,body.toString().substring(index));
 else   response.sendError(HttpServletResponse.SC_NOT_MODIFIED);
  return;
}
 else if (-1 < (index=body.getClass().getName().indexOf(""PreconditionFailedException""))) {
  if (index > -1)   response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED,body.toString().substring(index));
 else   response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
  return;
}
",15,15,7,,"NumberLiteral(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
1489,"if (compare(v, d = ((XmlObjectBase) x).getDoubleValue()) <= 0) {","if (compare(v,d=((XmlObjectBase)x).getDoubleValue()) <= 0) {
  context.invalid(XmlErrorCodes.DATATYPE_MIN_EXCLUSIVE_VALID,new Object[]{""double"",v,d,QNameHelper.readable(sType)});
}
",15,15,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1490,if (Ascii.toLower(b[boff++]) != Ascii.toLower(s.charAt(i))) {,"if (Ascii.toLower(b[boff++]) != Ascii.toLower(s.charAt(i))) {
  return false;
}
",17,18,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
1491,"if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {","if ((i=inputStream.read(buffer,maxNextCharInd,available - maxNextCharInd)) == -1) {
  inputStream.close();
  throw new java.io.IOException();
}
 else maxNextCharInd+=i;
",18,119,8,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1492,if (this.read() != T_CHAR || (v1 = hexChar(this.chardata)) < 0),"if (this.read() != T_CHAR || (v1=hexChar(this.chardata)) < 0) throw ex(""parser.descape.1"",this.offset - 1);
",23,25,8,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
1493,while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {,"while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {
  bufline[j]=newLine;
  nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];
  bufcolumn[j]=newCol + columnDiff;
  columnDiff=nextColDiff;
  i++;
}
",24,25,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-rightOperand, WhileStatement-expression, ),
"
1494,if ((oldToken = token).next != null) token = token.next;,"if ((oldToken=token).next != null) token=token.next;
 else token=token.next=token_source.getNextToken();
",25,25,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
1495,"if ((statistic = getMonitor().getLongNumericStatistic("""", Monitor.ProcessCount)) == null) {","if ((statistic=getMonitor().getLongNumericStatistic("""",Monitor.ProcessCount)) == null) {
  statistic=new LongNumericStatistic(Monitor.ProcessCount);
  getMonitor().addStatistic("""",statistic);
}
",29,29,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
1496,for (i = 25; i-- > 0;),"for (i=25; i-- > 0; ) jjrounds[i]=0x80000000;
",36,36,4,,"SimpleName(Assignment-leftHandSide, ForStatement-initializers, ),
NumberLiteral(Assignment-rightHandSide, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1497,if (bufline[j = start % bufsize] != bufline[++start % bufsize]),"if (bufline[j=start % bufsize] != bufline[++start % bufsize]) bufline[j]=newLine++;
 else bufline[j]=newLine;
",44,47,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
1498,for (int i = serializedTuples.length; i-- > 0;) {,"for (int i=serializedTuples.length; i-- > 0; ) {
  serializedTuples[i]=WindowIdTuple.getSerializedTuple(i);
  serializedTuples[i][0]=MessageType.BEGIN_WINDOW_VALUE;
}
",68,68,5,,"PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
QualifiedName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, ForStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ForStatement-expression, ),
"
1499,if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt))),"if ((i=jjnewStateCnt) == (startsAt=25 - (jjnewStateCnt=startsAt))) return curPos;
",86,87,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
