89000,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/TransactionTimeoutExceptionIntegrationTest.java,155,,"            ""init-pool-size=\"""" + DATA_SOURCE_POOL_SIZE + ""\"" "" +"
89001,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/TransactionTimeoutExceptionIntegrationTest.java,167,,"        ""<config-property>"" +"
89002,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/TransactionTimeoutExceptionIntegrationTest.java,169,,"            ""<config-property-type>java.lang.String</config-property-type>"" +"
89003,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/TransactionTimeoutExceptionIntegrationTest.java,171,,"            ""</config-property>"" +"
89004,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,84,,"    this.currRegion = this.cache.getRegion(""root"");"
89005,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,114,,"    UserTransaction ta = (UserTransaction) ctx.lookup(""java:/UserTransaction"");"
89006,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,120,,"      DataSource da = (DataSource) ctx.lookup(""java:/XAPooledDataSource"");"
89007,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,126,,"      String sqlSTR = ""insert into "" + this.tblName + "" values ("" + this.tblIDFld + "","" + ""'"""
89008,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,126,,"      String sqlSTR = ""insert into "" + this.tblName + "" values ("" + this.tblIDFld + "","" + ""'"""
89009,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,135,,"      fail("" failed "" + e.getMessage());"
89010,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,250,,"      jtaObj.getRegionFromCache(""region1"");"
89011,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,253,,"      assertEquals(""failed retrieving current region fullpath"","
89012,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,257,,"      jtaObj.put(""key1"", ""value1"");"
89013,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,257,,"      jtaObj.put(""key1"", ""value1"");"
89014,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,261,,"      assertEquals(""get failed for corresponding put"", ""\""value1\"""", tok);"
89015,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,299,,"      fail("" test 3 failed "");"
89016,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,623,,"      fail("" failed due to: "" + e.getMessage());"
89017,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/jta/functional/CacheJUnitTest.java,1022,,"      fail(""failed, "" + e.getMessage());"
89018,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/monitoring/ThreadsMonitoringIntegrationTest.java,83,,"        .describedAs(""ThreadMonitor monitoring process map validation should still be false."")"
89019,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/net/SSLSocketIntegrationTest.java,258,,"        ""client buffer position is "" + buffer.position() + "" and limit is "" + buffer.limit());"
89020,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/InlineKeyJUnitTest.java,83,,"      assertTrue(""expected string entry but was "" + lr.getRegionEntry(key).getClass(),"
89021,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java,245,,"      r.put(""key1"", data);"
89022,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java,302,,"        Object oldV = r.put(""byteArray"", originalBytes);"
89023,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapRegionBase.java,656,,"      r.put(""key"", value);"
89024,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapValidationJUnitTest.java,397,,"    value.add(""string 1"");"
89025,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/offheap/OffHeapValidationJUnitTest.java,398,,"    value.add(""string 2"");"
89026,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/DiskSpaceLimitIntegrationTest.java,92,,"    archiveFileName = new File(dir, name + "".gfs"").getAbsolutePath();"
89027,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/DistributedSystemStatisticsTypeIntegrationTest.java,58,,"    StatisticDescriptor[] stats = {factory().createIntGauge(""test"", ""TEST"", ""ms"")};"
89028,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/GemFireStatSamplerIntegrationTest.java,111,,"        .as(""initialized within 5 seconds"")"
89029,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/GemFireStatSamplerIntegrationTest.java,203,,"    final String archiveFileName = dir + separator + testName.getMethodName() + "".gfs"";"
89030,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/GemFireStatSamplerIntegrationTest.java,263,,"    final int initialSampleCount = statSamplerStats.getInt(""sampleCount"");"
89031,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/GemFireStatSamplerIntegrationTest.java,409,,"    setProperty(TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY, ""true"");"
89032,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/SimpleStatSamplerIntegrationTest.java,131,,"    final String archiveFileName = dir + File.separator + this.testName + "".gfs"";"
89033,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/SimpleStatSamplerIntegrationTest.java,175,,"    final int initialSampleCount = statSamplerStats.getInt(""sampleCount"");"
89034,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,116,,"    final StatisticsType ST1 = manager.createType(""ST1"", ""ST1"", statsST1);"
89035,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,117,,"    final Statistics st1_1 = manager.createAtomicStatistics(ST1, ""st1_1"", 1);"
89036,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,357,,"        new StatisticDescriptor[] {manager.createLongCounter(""long_counter_1"", ""d1"", ""u1"")};"
89037,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,618,,"        new StatisticDescriptor[] {manager.createDoubleCounter(""double_counter_1"", ""d1"", ""u1""),"
89038,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,619,,"            manager.createDoubleCounter(""double_counter_2"", ""d2"", ""u2"", true),"
89039,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,620,,"            manager.createDoubleGauge(""double_gauge_3"", ""d3"", ""u3""),"
89040,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,621,,"            manager.createDoubleGauge(""double_gauge_4"", ""d4"", ""u4"", false),"
89041,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,622,,"            manager.createIntCounter(""int_counter_5"", ""d5"", ""u5""),"
89042,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,623,,"            manager.createIntCounter(""int_counter_6"", ""d6"", ""u6"", true),"
89043,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,624,,"            manager.createIntGauge(""int_gauge_7"", ""d7"", ""u7""),"
89044,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,625,,"            manager.createIntGauge(""int_gauge_8"", ""d8"", ""u8"", false),"
89045,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,626,,"            manager.createLongCounter(""long_counter_9"", ""d9"", ""u9""),"
89046,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,627,,"            manager.createLongCounter(""long_counter_10"", ""d10"", ""u10"", true),"
89047,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,627,,"            manager.createLongCounter(""long_counter_10"", ""d10"", ""u10"", true),"
89048,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,627,,"            manager.createLongCounter(""long_counter_10"", ""d10"", ""u10"", true),"
89049,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,628,,"            manager.createLongGauge(""long_gauge_11"", ""d11"", ""u11""),"
89050,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,628,,"            manager.createLongGauge(""long_gauge_11"", ""d11"", ""u11""),"
89051,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,628,,"            manager.createLongGauge(""long_gauge_11"", ""d11"", ""u11""),"
89052,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,629,,"            manager.createLongGauge(""long_gauge_12"", ""d12"", ""u12"", false)};"
89053,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,629,,"            manager.createLongGauge(""long_gauge_12"", ""d12"", ""u12"", false)};"
89054,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,629,,"            manager.createLongGauge(""long_gauge_12"", ""d12"", ""u12"", false)};"
89055,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,748,,"    final StatisticsType ST2 = manager.createType(""ST2"", ""ST2"", statsST2);"
89056,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatArchiveWriterReaderIntegrationTest.java,758,,"    final StatisticsType ST3 = manager.createType(""ST3"", ""ST3"", statsST3);"
89057,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,113,,"        new StatisticDescriptor[] {factory.createDoubleCounter(""double_counter_1"", ""d1"", ""u1""),"
89058,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,114,,"            factory.createDoubleCounter(""double_counter_2"", ""d2"", ""u2"", true),"
89059,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,115,,"            factory.createDoubleGauge(""double_gauge_3"", ""d3"", ""u3""),"
89060,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,116,,"            factory.createDoubleGauge(""double_gauge_4"", ""d4"", ""u4"", false),"
89061,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,117,,"            factory.createIntCounter(""int_counter_5"", ""d5"", ""u5""),"
89062,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,118,,"            factory.createIntCounter(""int_counter_6"", ""d6"", ""u6"", true),"
89063,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,119,,"            factory.createIntGauge(""int_gauge_7"", ""d7"", ""u7""),"
89064,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,120,,"            factory.createIntGauge(""int_gauge_8"", ""d8"", ""u8"", false),"
89065,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,121,,"            factory.createLongCounter(""long_counter_9"", ""d9"", ""u9""),"
89066,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,122,,"            factory.createLongCounter(""long_counter_10"", ""d10"", ""u10"", true),"
89067,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,123,,"            factory.createLongGauge(""long_gauge_11"", ""d11"", ""u11""),"
89068,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/StatSamplerIntegrationTest.java,124,,"            factory.createLongGauge(""long_gauge_12"", ""d12"", ""u12"", false),"
89069,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/ValueMonitorIntegrationTest.java,178,,"        manager.createDoubleCounter(""double_counter_1"", ""double_counter_1_desc"","
89070,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/ValueMonitorIntegrationTest.java,180,,"        manager.createIntCounter(""int_counter_2"", ""int_counter_2_desc"", ""int_counter_2_units""),"
89071,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/statistics/ValueMonitorIntegrationTest.java,181,,"        manager.createLongCounter(""long_counter_3"", ""long_counter_3_desc"", ""long_counter_3_units"")};"
89072,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/CopyOnWriteHashMapJUnitTest.java,396,,"    c.put(null, ""whatever"");"
89073,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/CopyOnWriteHashMapJUnitTest.java,492,,"    c.put(""sadsdf"", ""asdads"");"
89074,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/cm/ConcurrentHashMapJUnitTest.java,492,,"      c.put(null, ""whatever"");"
89075,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/cm/ConcurrentHashMapJUnitTest.java,611,,"      c.put(""sadsdf"", ""asdads"");"
89076,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/cm/IntMapCheckJUnitTest.java,260,,"    timer.start(""ContainsKey            "", size);"
89077,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/internal/util/concurrent/cm/MapCheckJUnitTest.java,272,,"    timer.start(""ContainsKey            "", size);"
89078,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/logging/internal/api/LogRollingWithDistributedSystemIntegrationTest.java,232,,"    String rollingCurrentLogTo01 = ""Rolling current log to "" + childLogFile01;"
89079,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/logging/internal/api/LogRollingWithDistributedSystemIntegrationTest.java,330,,"    return baseName + "".log"";"
89080,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/DataQueryEngineIntegrationTest.java,95,,"      Item item = new Item(order, ""ID_"" + subOrderIndex, ""Book"");"
89081,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/DataQueryEngineIntegrationTest.java,95,,"      Item item = new Item(order, ""ID_"" + subOrderIndex, ""Book"");"
89082,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/DataQueryEngineIntegrationTest.java,122,,"      subOrder.setId(""ORDER_ID_"" + subOrderIndex);"
89083,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/MemberMXBeanShowLogIntegrationTest.java,102,,"    assertThat(log.split(lineSeparator()).length).as(""Log: "" + log).isGreaterThan(25)"
89084,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/LocatorManagerConfiguresJmxSerialFilterIntegrationTest.java,78,,"        .set(JMX_MANAGER, ""true"")"
89085,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/LocatorManagerConfiguresJmxSerialFilterIntegrationTest.java,81,,"        .set(LOG_FILE, new File(workingDirectory, NAME + "".log"").getAbsolutePath())"
89086,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/ServerManagerConfiguresJmxSerialFilterIntegrationTest.java,75,,"        .set(JMX_MANAGER, ""true"")"
89087,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/ServerManagerConfiguresJmxSerialFilterIntegrationTest.java,78,,"        .set(LOG_FILE, new File(workingDirectory, NAME + "".log"").getAbsolutePath())"
89088,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/beans/DistributedSystemMBeanIntegrationTest.java,94,,"    String result = bean.queryData(SELECT_ALL, ""server"", 100);"
89089,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/beans/DistributedSystemMBeanIntegrationTest.java,98,,"        .contains(""title"")"
89090,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsAddNewNodeJUnitTest.java,106,,"    final XmlEntity xmlEntity = XmlEntity.builder().withType(""region"").withAttribute(""name"", ""r3"")"
89091,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsAddNewNodeJUnitTest.java,106,,"    final XmlEntity xmlEntity = XmlEntity.builder().withType(""region"").withAttribute(""name"", ""r3"")"
89092,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsAddNewNodeJUnitTest.java,259,,"    assertEquals(""foo"", XmlUtils.getAttribute(element, ""disk-store-name""));"
89093,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsAddNewNodeJUnitTest.java,293,,"    assertEquals(""1"", XmlUtils.getAttribute(element, ""value""));"
89094,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/CacheServerMBeanAuthorizationJUnitTest.java,55,,"  @ConnectionConfiguration(user = ""data-admin"", password = ""1234567"")"
89095,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/CacheServerMBeanAuthorizationJUnitTest.java,57,,"    bean.removeIndex(""foo"");"
89096,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/CacheServerMBeanAuthorizationJUnitTest.java,58,,"    assertThatThrownBy(() -> bean.executeContinuousQuery(""bar""))"
89097,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/CacheServerMBeanWithShiroIniIntegrationTest.java,52,,"    bean.removeIndex(""foo"");"
89098,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/CacheServerMBeanWithShiroIniIntegrationTest.java,53,,"    bean.executeContinuousQuery(""bar"");"
89099,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/MBeanSecurityJUnitTest.java,71,,"        () -> con.createMBean(""FakeClassName"", new ObjectName(""GemFire"", ""name"", ""foo"")))"
89100,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/MBeanSecurityJUnitTest.java,71,,"        () -> con.createMBean(""FakeClassName"", new ObjectName(""GemFire"", ""name"", ""foo"")))"
89101,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/management/internal/security/MemberMBeanSecurityJUnitTest.java,59,,"  @ConnectionConfiguration(user = ""super-user"", password = ""1234567"")"
89102,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,115,,"    setupSerializer(""org.apache.geode.pdx.DomainObjectPdxAuto"");"
89103,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,117,,"    objOut.set(""string_0"", ""test string value"");"
89104,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,117,,"    objOut.set(""string_0"", ""test string value"");"
89105,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,118,,"    objOut.set(""long_0"", 99L);"
89106,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,119,,"    objOut.set(""string_immediate"", ""right now"");"
89107,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,119,,"    objOut.set(""string_immediate"", ""right now"");"
89108,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,120,,"    objOut.set(""anEnum"", DomainObjectPdxAuto.Day.FRIDAY);"
89109,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,127,,"    objOut.set(""string_list"", list);"
89110,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/AutoSerializableJUnitTest.java,1112,,"    props.put(""classes"", ""org.apache.geode.pdx.DomainObject"");"
89111,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/ByteSourceJUnitTest.java,107,,"      fail(""expected IllegalArgumentException"");"
89112,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/ByteSourceJUnitTest.java,185,,"      fail(""expected BufferUnderflowException"");"
89113,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/ByteSourceJUnitTest.java,204,,"      fail(""expected IndexOutOfBoundsException"");"
89114,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/JSONFormatterBasicJUnitTest.java,99,,"    JSONFormatter.fromJSON(""false"");"
89115,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/JSONFormatterBasicJUnitTest.java,104,,"    JSONFormatter.fromJSON(""true"");"
89116,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/JSONFormatterJUnitTest.java,72,,"    assertTrue(""receivedObject is expected to be of type PdxInstance"","
89117,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/JSONFormatterJUnitTest.java,88,,"    region.put(""501"", expectedTestObject);"
89118,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,87,,"    c.writeInt(""intField"", 37);"
89119,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,175,,"    c.writeObject(""f28"", new File(""file""), false);"
89120,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,374,,"      c.markIdentityField(""intField1"");"
89121,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,380,,"    c.writeInt(""intField2"", 2);"
89122,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,381,,"    c.writeInt(""intField3"", 3);"
89123,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,416,,"    PdxInstanceFactory c = PdxInstanceFactoryImpl.newCreator(""byteField"", false, cache);"
89124,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,421,,"      pi.setField(""f"", ""Bogus"");"
89125,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,422,,"      throw new RuntimeException(""expected PdxFieldTypeMismatchException"");"
89126,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,438,,"    c = PdxInstanceFactoryImpl.newCreator(""booleanField"", false, cache);"
89127,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,454,,"    c = PdxInstanceFactoryImpl.newCreator(""charField"", false, cache);"
89128,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,470,,"    c = PdxInstanceFactoryImpl.newCreator(""shortField"", false, cache);"
89129,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,502,,"    c = PdxInstanceFactoryImpl.newCreator(""longField"", false, cache);"
89130,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,518,,"    c = PdxInstanceFactoryImpl.newCreator(""floatField"", false, cache);"
89131,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,534,,"    c = PdxInstanceFactoryImpl.newCreator(""doubleField"", false, cache);"
89132,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1037,,"    r.put(""key"", pi);"
89133,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1243,,"        cache.createPdxInstanceFactory(""myPdxInstanceType"").neverDeserialize();"
89134,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1268,,"    factory.writeString(""fieldOne"", ""valueOne"");"
89135,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1268,,"    factory.writeString(""fieldOne"", ""valueOne"");"
89136,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1317,,"    factory.writeInt(""fieldTwo"", 0);"
89137,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceFactoryJUnitTest.java,1345,,"    factory.writeString(""fieldTwo"", ""valueTwo"");"
89138,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,71,,"        out.writeBoolean(""field1"", false);"
89139,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,72,,"        out.writeInt(""field2"", 53);"
89140,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,101,,"              + instance.getField(""field"" + (i - 1)) + "", "" + other.getField(""field"" + (i - 1))"
89141,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,127,,"    c = PdxInstanceFactoryImpl.newCreator(""testEqualsOF"", false, cache);"
89142,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,128,,"    c.writeObject(""objField"", new Date());"
89143,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxInstanceJUnitTest.java,220,,"    c.writeObject(""enumField"", MyComplexEnum.ONE);"
89144,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,119,,"        .setPdxDiskStore(""pdxDS"").create();"
89145,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,123,,"      this.cache.createDiskStoreFactory().create(""r2DS"");"
89146,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,178,,"      SystemAdmin.validateDiskStore(""DEFAULT"", ""."");"
89147,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,300,,"    StringBuffer msg = new StringBuffer(""Actual output: "");"
89148,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,304,,"    msg.append(""\nExpected output: "");"
89149,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,308,,"    assertTrue(""Mismatch in length, actual.length: "" + actual.length + "" and expected length: """
89150,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,308,,"    assertTrue(""Mismatch in length, actual.length: "" + actual.length + "" and expected length: """
89151,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,314,,"      assertTrue(""Mismatch at index "" + i, actual[i] == expected[i]);"
89152,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,322,,"        ""Mismatch in write and read value: Value Write..."" + object + "" Value Read..."" + actualVal,"
89153,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,322,,"        ""Mismatch in write and read value: Value Write..."" + object + "" Value Read..."" + actualVal,"
89154,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,444,,"      assertTrue(pi.hasField(""myFlag""));"
89155,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,445,,"      assertTrue(pi.hasField(""myShort""));"
89156,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,446,,"      assertTrue(pi.hasField(""myString1""));"
89157,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,447,,"      assertTrue(pi.hasField(""myLong""));"
89158,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,448,,"      assertTrue(pi.hasField(""myString2""));"
89159,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,449,,"      assertTrue(pi.hasField(""myString3""));"
89160,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,450,,"      assertTrue(pi.hasField(""myInt""));"
89161,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,451,,"      assertTrue(pi.hasField(""myFloat""));"
89162,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,544,,"            + ""A very long string1.A very long string1.A very long string1.A very long string1.A very long string1.A very long string1.A very long string1.A very long string1."""
89163,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,557,,"            + ""Even longer string3. Even longer string3. Even longer string3. Even longer string3. Even longer string3. Even longer string3. Even longer string3. """
89164,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1100,,"      wpi.setField(""f1"", ""goodbye"");"
89165,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1766,,"        out.writeChar(""aChar"", pdx.aChar);"
89166,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1767,,"        out.writeBoolean(""aBoolean"", pdx.aBoolean);"
89167,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1768,,"        out.writeByte(""aByte"", pdx.aByte);"
89168,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1769,,"        out.writeShort(""aShort"", pdx.aShort);"
89169,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1770,,"        out.writeInt(""anInt"", pdx.anInt);"
89170,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1771,,"        out.writeLong(""aLong"", pdx.aLong);"
89171,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1772,,"        out.writeFloat(""aFloat"", pdx.aFloat);"
89172,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1773,,"        out.writeDouble(""aDouble"", pdx.aDouble);"
89173,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1774,,"        out.writeDate(""aDate"", pdx.aDate);"
89174,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1775,,"        out.writeString(""aString"", pdx.aString);"
89175,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1776,,"        out.writeObject(""anObject"", pdx.anObject);"
89176,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1777,,"        out.writeObject(""aMap"", pdx.aMap);"
89177,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1778,,"        out.writeObject(""aCollection"", pdx.aCollection);"
89178,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1779,,"        out.writeBooleanArray(""aBooleanArray"", pdx.aBooleanArray);"
89179,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1780,,"        out.writeCharArray(""aCharArray"", pdx.aCharArray);"
89180,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1781,,"        out.writeByteArray(""aByteArray"", pdx.aByteArray);"
89181,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1782,,"        out.writeShortArray(""aShortArray"", pdx.aShortArray);"
89182,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1783,,"        out.writeIntArray(""anIntArray"", pdx.anIntArray);"
89183,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1784,,"        out.writeLongArray(""aLongArray"", pdx.aLongArray);"
89184,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1785,,"        out.writeFloatArray(""aFloatArray"", pdx.aFloatArray);"
89185,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1786,,"        out.writeDoubleArray(""aDoubleArray"", pdx.aDoubleArray);"
89186,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1787,,"        out.writeStringArray(""aStringArray"", pdx.aStringArray);"
89187,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1788,,"        out.writeObjectArray(""anObjectArray"", pdx.anObjectArray);"
89188,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1789,,"        out.writeArrayOfByteArrays(""anArrayOfByteArray"", pdx.anArrayOfByteArray);"
89189,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxSerializableJUnitTest.java,1811,,"        throw new RuntimeException(""expected PdxFieldTypeMismatchException"");"
89190,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxStringJUnitTest.java,57,,"    PdxInstanceFactory pf = PdxInstanceFactoryImpl.newCreator(""Portfolio"", false, c);"
89191,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxStringJUnitTest.java,58,,"    pf.writeString(""secId"", ""abc"");"
89192,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/pdx/PdxStringJUnitTest.java,58,,"    pf.writeString(""secId"", ""abc"");"
89193,./TargetProjects/geode/geode-core/src/integrationTest/java/org/apache/geode/test/golden/PassJUnitTest.java,49,,"    final String goldenString = ""Begin "" + name() + "".main"" + ""\n"" + ""Press Enter to continue."""
89194,./TargetProjects/geode/geode-core/src/jmh/java/org/apache/geode/cache/EvictionMultiThreadedPerformanceBenchmark.java,71,,"    return region.put(key, ""value"");"
89195,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/DataSerializer.java,1269,,"          result == null ? ""null"" : result.length);"
89196,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/internal/AdminDistributedSystemImpl.java,317,,"          ""connect() has not been invoked on this AdminDistributedSystem."");"
89197,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/internal/DistributedSystemHealthMonitor.java,217,,"    throw new UnsupportedOperationException(""Not a real GemFireVM"");"
89198,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/internal/DistributionLocatorImpl.java,281,,"    sb.append(this.controller.getProductExecutable(this, ""gemfire""));"
89199,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/AdminDistributedSystemJmxImpl.java,1360,,"    throw new UnsupportedOperationException(""Should not be invoked"");"
89200,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/AgentConfigImpl.java,1425,,"          String.format(""%s must be zero or an integer between %s and %s."","
89201,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/AgentLauncher.java,200,,"      } else if (arg.startsWith(""-dir="")) {"
89202,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,215,,"    pw.println(""<tr valign=\""top\"">"");"
89203,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,218,,"    pw.println(""</tr>"");"
89204,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,260,,"    pw.println(""  <td></td>"");"
89205,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,261,,"    pw.println(""  <td colspan=\""2\"">"" + name + ""</td>"");"
89206,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,261,,"    pw.println(""  <td colspan=\""2\"">"" + name + ""</td>"");"
89207,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/GenerateMBeanHTML.java,262,,"    pw.println(""  <td>"" + type + ""</td>"");"
89208,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MX4JModelMBean.java,372,,"          logger.trace(""getAttribute for attribute "" + attrName + "" failed"", x);"
89209,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MX4JModelMBean.java,490,,"          attributeDescriptor.setField(""value"", returnValue);"
89210,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MailManager.java,138,,"      buf.append(""\n\t"")"
89211,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MemberInfoWithStatsMBean.java,422,,"        logger.warn(String.format(""Exception occurred for operation: %s for member: %s"","
89212,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/admin/jmx/internal/MemberInfoWithStatsMBean.java,1008,,"            String type = (String) mBeanServer.getAttribute(vmMemoryUsageStats[i], ""type"");"
89213,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/AttributesFactory.java,945,,"          String.format(""Deprecated API %s cannot be used with DiskStore %s"","
89214,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/AttributesFactory.java,1566,,"          .append(regionTimeToLive).append(""; action="").append(regionTimeToLiveExpirationAction)"
89215,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ClientMetadataService.java,515,,"          logger.debug(""An exception occurred while fetching metadata"", e);"
89216,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,456,,"                  ""Current number of addPdxType operations being executed"", ""addPdxType""),"
89217,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,466,,"                  ""nanoseconds""),"
89218,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,467,,"              f.createLongCounter(""clears"", ""Total number of clears completed successfully"","
89219,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,479,,"                  ""closeCons""),"
89220,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,489,,"                  ""closeCQs""),"
89221,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,499,,"                  ""createCQs""),"
89222,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,509,,"                  ""commits""),"
89223,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,519,,"                  ""Current number of containsKeys being executed"", ""containsKeys""),"
89224,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,529,,"                  ""Current number of destroyRegions being executed"", ""destroyRegions""),"
89225,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,539,,"                  ""destroys""),"
89226,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,549,,"                  ""Current number of Functions being executed"", ""executeFunctions""),"
89227,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,559,,"                  ""Current number of gatewayBatchs being executed"", ""gatewayBatchs""),"
89228,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,569,,"                  ""getAlls""),"
89229,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,580,,"                  ""getClientPartitionAttributes""),"
89230,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,595,,"                  ""getClientPRMetadata""),"
89231,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,609,,"                  ""Current number of getPDXIdForType operations being executed"", ""getPDXIdForType""),"
89232,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,623,,"                  ""Current number of getPDXTypeById operations being executed"", ""getPDXTypeById""),"
89233,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,648,,"                  ""Current number of getDurableCQs being executed"", ""getDurableCQs""),"
89234,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,657,,"              f.createIntGauge(""getsInProgress"", ""Current number of gets being executed"", ""gets""),"
89235,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,666,,"                  ""Current number of invalidates being executed"", ""invalidates""),"
89236,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,676,,"                  ""Current number of jtaSynchronizations being executed"", ""sizes""),"
89237,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,677,,"              f.createIntCounter(""jtaSynchronizations"","
89238,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,690,,"                  ""keySets""),"
89239,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,700,,"                  ""Current number of makePrimarys being executed"", ""makePrimarys""),"
89240,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,710,,"                  ""pings""),"
89241,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,719,,"                  ""Current number of primaryAcks being executed"", ""primaryAcks""),"
89242,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,729,,"                  ""putAlls""),"
89243,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,738,,"              f.createIntGauge(""putsInProgress"", ""Current number of puts being executed"", ""puts""),"
89244,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,747,,"                  ""querys""),"
89245,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,757,,"                  ""Current number of readyForEvents being executed"", ""readyForEvents""),"
89246,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,768,,"                  ""registerDataSerializers""),"
89247,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,783,,"                  ""registerInstantiators""),"
89248,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,797,,"                  ""Current number of registerInterests being executed"", ""registerInterests""),"
89249,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,810,,"                  ""Current number of removeAlls being executed"", ""removeAlls""),"
89250,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,820,,"                  ""rollbacks""),"
89251,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,839,,"                  ""stopCQs""),"
89252,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,849,,"                  ""Current number of txFailovers being executed"", ""txFailovers""),"
89253,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,859,,"                  ""Current number of unregisterInterests being executed"", ""unregisterInterests""),"
89254,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionStats.java,896,,"                  ""sends""),"
89255,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ExecuteFunctionNoAckOp.java,68,,"          logger.debug(""ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:"""
89256,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ExecuteFunctionNoAckOp.java,79,,"              + op.getMessage() + "" to server using pool: "" + pool + "" with groups:"""
89257,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/PoolImpl.java,694,,"          String.format(""Pool %s is different"", ""socketConnectimeout""));"
89258,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/ProxyRegion.java,460,,"        ""Local operations are not supported when multiuser-authentication is true."");"
89259,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerImpl.java,1208,,"      throw new CacheClosedException(""This pool has been closed"");"
89260,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/CacheConfig.java,269,,"@XmlRootElement(name = ""cache"", namespace = ""http://geode.apache.org/schema/cache"")"
89261,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/JndiBindingsType.java,104,,"@XmlType(name = ""jndi-bindings-type"", namespace = ""http://geode.apache.org/schema/cache"","
89262,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/RegionAttributesType.java,340,,"@XmlType(name = ""region-attributes-type"", namespace = ""http://geode.apache.org/schema/cache"","
89263,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/RegionConfig.java,153,,"@XmlType(name = ""region-type"", namespace = ""http://geode.apache.org/schema/cache"","
89264,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/SerializationRegistrationType.java,81,,"    namespace = ""http://geode.apache.org/schema/cache"","
89265,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/configuration/ServerType.java,96,,"@XmlType(name = ""server-type"", namespace = ""http://geode.apache.org/schema/cache"","
89266,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/partition/PartitionRegionHelper.java,112,,"          String.format(""Region %s is not a Partitioned Region"","
89267,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/AbstractCompiledValue.java,301,,"    throw new UnsupportedOperationException(""This method should not have been invoked"");"
89268,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/CqQueryVsdStats.java,99,,"                ""operations""),"
89269,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/CumulativeNonDistinctResults.java,101,,"    throw new UnsupportedOperationException(""Removal from collection not supported"");"
89270,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/DefaultQueryService.java,252,,"            ""Exception while creating index on pr default query processor."","
89271,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/DefaultQueryService.java,337,,"          ""Index Operation is not supported on the Server Region."");"
89272,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/ExecutionContext.java,632,,"    throw new UnsupportedOperationException(""Method should not have been called"");"
89273,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/NWayMergeResults.java,105,,"    throw new UnsupportedOperationException(""Removal from collection not supported"");"
89274,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/ProxyQueryService.java,89,,"        ""Index creation on the server is not supported from the client."");"
89275,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/ProxyQueryService.java,275,,"        ""Index operation on the server is not supported from the client."");"
89276,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/QCompiler.java,77,,"      parser.setASTNodeClass(""org.apache.geode.cache.query.internal.parse.ASTUnsupported"");"
89277,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/QCompiler.java,84,,"          String.format(""Syntax error in query: %s"", ex.getMessage()),"
89278,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/QCompiler.java,87,,"    Assert.assertTrue(stackSize() == 1, ""stack size = "" + stackSize());"
89279,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/QRegion.java,251,,"        ""Region values is not modifiable"");"
89280,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/QRegion.java,526,,"        ""Unsupported at this time"");"
89281,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/RangeJunction.java,519,,"    Support.assertionFailed(""Should not have come here"");"
89282,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/RangeJunction.java,567,,"          ""The Object is not of type NotEqualConditionEvaluator"");"
89283,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/StructBag.java,130,,"          ""structType must not be null"");"
89284,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/StructSet.java,109,,"          ""structType must not be null"");"
89285,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/cq/MissingCqService.java,48,,"    throw new IllegalStateException(""CqService is not available."");"
89286,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,251,,"              if (tailID.equals(""asList"") || tailID.equals(""asSet"") || tailID.equals(""values"")"
89287,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,251,,"              if (tailID.equals(""asList"") || tailID.equals(""asSet"") || tailID.equals(""values"")"
89288,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,251,,"              if (tailID.equals(""asList"") || tailID.equals(""asSet"") || tailID.equals(""values"")"
89289,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,252,,"                  || tailID.equals(""toArray"") || tailID.equals(""getValues"")) {"
89290,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,252,,"                  || tailID.equals(""toArray"") || tailID.equals(""getValues"")) {"
89291,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,254,,"              } else if (tailID.equals(""keys"") || tailID.equals(""getKeys"")"
89292,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,254,,"              } else if (tailID.equals(""keys"") || tailID.equals(""getKeys"")"
89293,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/FunctionalIndexCreationHelper.java,255,,"                  || tailID.equals(""keySet"")) {"
89294,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/PartitionedIndex.java,336,,"        ""Not supported on partitioned index"");"
89295,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/RangeIndex.java,237,,"        throw new IMQException(String.format(""Could not add object of type %s"","
89296,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/RangeIndex.java,1235,,"          throw new IllegalArgumentException(""Invalid Operator"");"
89297,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/cache/query/management/configuration/QueryConfigService.java,77,,"    namespace = ""http://geode.apache.org/schema/query-config-service"")"
89298,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,128,,"    help.put(""bind-address"","
89299,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,130,,"    help.put(""debug"", ""Displays verbose information during the invocation of the launcher."");"
89300,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,133,,"    help.put(""dir"","
89301,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,135,,"    help.put(""force"","
89302,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,137,,"    help.put(""help"","
89303,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,139,,"    help.put(""hostname-for-clients"","
89304,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,142,,"    help.put(""pid"", ""Indicates the OS process ID of the running Locator."");"
89305,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,143,,"    help.put(""port"", String.format("
89306,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,163,,"    usage.put(Command.VERSION, ""version"");"
89307,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,169,,"  private static final String LOCATOR_SERVICE_NAME = ""Locator"";"
89308,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,987,,"          ""Failed to connect to locator with process id "" + getPid());"
89309,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,991,,"          ""Failed to communicate with locator with process id "" + getPid());"
89310,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/LocatorLauncher.java,1034,,"          + ProcessType.LOCATOR.getPidFileName() + "" in "" + getWorkingDirectory());"
89311,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,137,,"    help.put(""assign-buckets"","
89312,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,139,,"    help.put(""debug"", ""Displays verbose information during the invocation of the launcher."");"
89313,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,142,,"    help.put(""dir"","
89314,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,144,,"    help.put(""disable-default-server"","
89315,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,146,,"    help.put(""force"","
89316,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,148,,"    help.put(""help"","
89317,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,150,,"    help.put(""member"", ""Identifies the Server by member name or ID in the Geode cluster."");"
89318,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,151,,"    help.put(""pid"", ""Indicates the OS process ID of the running Server."");"
89319,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,152,,"    help.put(""rebalance"","
89320,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,160,,"    help.put(""server-port"", String.format("
89321,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,177,,"    usage.put(Command.VERSION, ""version"");"
89322,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,183,,"  private static final String SERVER_SERVICE_NAME = ""Server"";"
89323,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,1161,,"          ""Failed to connect to server with process id "" + getPid());"
89324,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,1165,,"          ""Failed to communicate with server with process id "" + getPid());"
89325,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/ServerLauncher.java,1194,,"          + ProcessType.SERVER.getPidFileName() + "" in "" + getWorkingDirectory());"
89326,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,279,,"              ""Could not set \""%s\"" to \""%s\"" because its value can not be less than \""%s\""."","
89327,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,1115,,"        ""For Java keystore file format, this property has the value jks (or JKS)."");"
89328,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,1124,,"        ""Password to unlock the keystore file (store password) specified by  javax.net.ssl.trustStore."");"
89329,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,1273,,"            + DEFAULT_JMX_MANAGER_SSL_CIPHERS + ""\"" meaning your provider's defaults."");"
89330,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,1276,,"            + DEFAULT_JMX_MANAGER_SSL_PROTOCOLS + ""\"" meaning defaults of your provider."");"
89331,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/AbstractDistributionConfig.java,1279,,"            + DEFAULT_JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION + ""\""."");"
89332,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/ClusterDistributionManager.java,2484,,"      return ""member "" + getId() + "" joined"";"
89333,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionConfig.java,1077,,"  String DEFAULT_SSL_PROTOCOLS = ""any"";"
89334,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,456,,"        f.createLongCounter(""sentMessages"", sentMessagesDesc, ""messages""),"
89335,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,459,,"        f.createLongCounter(""sentMessagesTime"", sentMessagesTimeDesc, ""nanoseconds"", false),"
89336,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,465,,"        f.createLongCounter(""receivedBytes"", receivedBytesDesc, ""bytes""),"
89337,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,474,,"        f.createLongGauge(""overflowQueueThrottleCount"", overflowQueueThrottleCountDesc, ""delays""),"
89338,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,494,,"        f.createLongCounter(""serialPooledThread"", serialPooledThreadDesc, ""threads""),"
89339,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,511,,"        f.createLongGauge(""replyWaitsInProgress"", replyWaitsInProgressDesc, ""operations""),"
89340,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,516,,"        f.createLongGauge(""receivers"", receiverConnectionsDesc, ""sockets""),"
89341,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,529,,"            ""Current number of synchronous/blocking socket write calls in progress."", ""writes""),"
89342,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,567,,"            ""Total number of object serialization calls. This includes pdx serializations."", ""ops""),"
89343,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionStats.java,686,,"            ""starts"", false),"
89344,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java,302,,"            ""A locator can not be created because one already exists in this JVM."");"
89345,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/locks/DLockGrantor.java,2906,,"                ""Locking is suspended by "" + this.grantor.lockingSuspendedBy + "" with lockId of """
89346,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/locks/DLockStats.java,256,,"        f.createIntGauge(""lockWaitsInProgress"", lockWaitsInProgressDesc, ""operations""),"
89347,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/distributed/internal/locks/DLockStats.java,258,,"        f.createLongCounter(""lockWaitTime"", lockWaitTimeDesc, ""nanoseconds"", false),"
89348,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java,1629,,"            .getForPdx(""PDX registry is unavailable because the Cache has been closed."");"
89349,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,444,,"      throw new GemFireIOException("" disk-store="" + diskStoreName + "": "" + ex, ex);"
89350,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1315,,"      pw.println(usageMap.get(""gemfire"") + "" <command> ..."");"
89351,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1361,,"      usage(""help"");"
89352,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1386,,"  private static final String[] validCommands = new String[] {""version"", ""stats"", START_LOCATOR,"
89353,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1386,,"  private static final String[] validCommands = new String[] {""version"", ""stats"", START_LOCATOR,"
89354,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1387,,"      ""stop-locator"", ""status-locator"", ""info-locator"", ""tail-locator-log"", ""merge-logs"","
89355,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1387,,"      ""stop-locator"", ""status-locator"", ""info-locator"", ""tail-locator-log"", ""merge-logs"","
89356,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1387,,"      ""stop-locator"", ""status-locator"", ""info-locator"", ""tail-locator-log"", ""merge-logs"","
89357,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1387,,"      ""stop-locator"", ""status-locator"", ""info-locator"", ""tail-locator-log"", ""merge-logs"","
89358,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1387,,"      ""stop-locator"", ""status-locator"", ""info-locator"", ""tail-locator-log"", ""merge-logs"","
89359,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1388,,"      ""revoke-missing-disk-store"", ""list-missing-disk-stores"", ""validate-disk-store"","
89360,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1388,,"      ""revoke-missing-disk-store"", ""list-missing-disk-stores"", ""validate-disk-store"","
89361,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1388,,"      ""revoke-missing-disk-store"", ""list-missing-disk-stores"", ""validate-disk-store"","
89362,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1389,,"      ""upgrade-disk-store"", ""compact-disk-store"", ""compact-all-disk-stores"", ""modify-disk-store"","
89363,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1389,,"      ""upgrade-disk-store"", ""compact-disk-store"", ""compact-all-disk-stores"", ""modify-disk-store"","
89364,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1389,,"      ""upgrade-disk-store"", ""compact-disk-store"", ""compact-all-disk-stores"", ""modify-disk-store"","
89365,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1389,,"      ""upgrade-disk-store"", ""compact-disk-store"", ""compact-all-disk-stores"", ""modify-disk-store"","
89366,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1390,,"      ""show-disk-store-metadata"", ""export-disk-store"", ""shut-down-all"", ""backup"", ""print-stacks"","
89367,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1390,,"      ""show-disk-store-metadata"", ""export-disk-store"", ""shut-down-all"", ""backup"", ""print-stacks"","
89368,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1390,,"      ""show-disk-store-metadata"", ""export-disk-store"", ""shut-down-all"", ""backup"", ""print-stacks"","
89369,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1390,,"      ""show-disk-store-metadata"", ""export-disk-store"", ""shut-down-all"", ""backup"", ""print-stacks"","
89370,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89371,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89372,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89373,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89374,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89375,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1401,,"      new String[] {""-address="", ""-archive="", ""-concurrencyLevel="", ""-debug"", ""-remove"", ""-details"","
89376,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1402,,"          ""-dir="", ""-endtime="", ""-h"", ""-help"", ""-initialCapacity="", ""-loadFactor="", ""-lru="","
89377,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1402,,"          ""-dir="", ""-endtime="", ""-h"", ""-help"", ""-initialCapacity="", ""-loadFactor="", ""-lru="","
89378,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1402,,"          ""-dir="", ""-endtime="", ""-h"", ""-help"", ""-initialCapacity="", ""-loadFactor="", ""-lru="","
89379,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1402,,"          ""-dir="", ""-endtime="", ""-h"", ""-help"", ""-initialCapacity="", ""-loadFactor="", ""-lru="","
89380,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1402,,"          ""-dir="", ""-endtime="", ""-h"", ""-help"", ""-initialCapacity="", ""-loadFactor="", ""-lru="","
89381,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89382,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89383,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89384,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89385,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89386,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1403,,"          ""-lruAction="", ""-lruLimit="", ""-maxOplogSize="", ""-properties="", ""-monitor"", ""-nofilter"","
89387,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89388,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89389,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89390,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89391,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89392,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89393,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1404,,"          ""-persample"", ""-persec"", ""-out="", ""-port="", ""-prunezeros"", ""-region="", ""-starttime="","
89394,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1405,,"          ""-statisticsEnabled="", ""-peer="", ""-server="", ""-q"", ""-D"", ""-X"", ""-outputDir=""};"
89395,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1405,,"          ""-statisticsEnabled="", ""-peer="", ""-server="", ""-q"", ""-D"", ""-X"", ""-outputDir=""};"
89396,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1405,,"          ""-statisticsEnabled="", ""-peer="", ""-server="", ""-q"", ""-D"", ""-X"", ""-outputDir=""};"
89397,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1405,,"          ""-statisticsEnabled="", ""-peer="", ""-server="", ""-q"", ""-D"", ""-X"", ""-outputDir=""};"
89398,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1501,,"            + DateFormatter.FORMAT_STRING + "".\n"""
89399,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,1546,,"            + ""This command will use the gemfire.properties file to determine what distributed system to connect to."");"
89400,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,2107,,"          System.err.println(String.format(""ERROR: unexpected command line arguments: %s."","
89401,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,2178,,"          System.err.println(""Expected disk store name and at least one directory"");"
89402,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/SystemAdmin.java,2181,,"          System.err.println(""Expected at least one directory"");"
89403,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/VersionDescription.java,146,,"          .of(String.format(""<Missing property %s from resource org/apache/geode/internal/%s>"","
89404,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/admin/remote/AdminRegion.java,374,,"        ""Unsupported at this time"");"
89405,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/admin/remote/CacheDisplay.java,58,,"          + "" with "" + ((Object[]) instance).length + "" elements"";"
89406,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/admin/remote/RemoteBridgeServer.java,157,,"    throw new UnsupportedOperationException(""Unsupported in RemoteBridgeServer"");"
89407,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/BucketAdvisor.java,1903,,"            throw new IllegalStateException(String.format(""Cannot change from %s to %s"","
89408,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CacheConfig.java,182,,"          String.format(""Existing cache has different cache configuration, it has:%s"","
89409,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java,364,,"            f.createLongGauge(""loadsInProgress"", loadsInProgressDesc, ""operations""),"
89410,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java,366,,"            f.createLongCounter(""loadTime"", loadTimeDesc, ""nanoseconds"", false),"
89411,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java,406,,"            f.createLongGauge(""regions"", regionsDesc, ""regions""),"
89412,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java,465,,"            f.createLongGauge(""entries"","
89413,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/CachePerfStats.java,480,,"            f.createLongGauge(""replicatedTombstonesSize"", tombstoneOverhead1Desc, ""bytes""),"
89414,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskDirectoryStats.java,56,,"        new StatisticDescriptor[] {f.createLongGauge(""diskSpace"", diskSpaceDesc, ""bytes""),"
89415,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskInitFile.java,567,,"        logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, ""bad disk region id!"");"
89416,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskInitFile.java,569,,"        throw new IllegalStateException(""bad disk region id"");"
89417,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskInitFile.java,922,,"          String.format(""Failed writing data to initialization file because: %s"", ex),"
89418,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskRegion.java,97,,"      throw new IllegalStateException(""The region \"""" + name"
89419,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreImpl.java,716,,"              ""The DiskRegion has been closed or destroyed"","
89420,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreStats.java,125,,"        new StatisticDescriptor[] {f.createLongCounter(""writes"", writesDesc, ""ops""),"
89421,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreStats.java,126,,"            f.createLongCounter(""writeTime"", writeTimeDesc, ""nanoseconds""),"
89422,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreStats.java,127,,"            f.createLongCounter(""writtenBytes"", bytesWrittenDesc, ""bytes""),"
89423,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreStats.java,176,,"                ""current number of oplog compacts that are in progress"", ""compacts""),"
89424,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistTXStateProxyImplOnCoordinator.java,208,,"              String.format(""Expected %s during a distributed transaction but got %s"","
89425,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistTXStateProxyImplOnCoordinator.java,209,,"                  ""DistPeerTXStateStub"","
89426,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistTXStateProxyImplOnCoordinator.java,237,,"              + "" ,result= "" + localResult + "" ,finalResult-old= "" + finalResult);"
89427,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistTXStateProxyImplOnCoordinator.java,237,,"              + "" ,result= "" + localResult + "" ,finalResult-old= "" + finalResult);"
89428,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistTXStateProxyImplOnCoordinator.java,491,,"            + "" ,entryEventList="" + printEntryEventList(entryEventList) + "" ,txRegionVersionsMap="""
89429,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/DistributedRegion.java,786,,"      logger.fatal(""Unexpected exception:"","
89430,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/EntryEventImpl.java,916,,"          ""Attempt to access off heap value after the EntryEvent was released."");"
89431,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java,1827,,"          throw new InternalGemFireError(""unexpected exception"");"
89432,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/IdentityArrayList.java,106,,"  @SuppressWarnings(""unchecked"")"
89433,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java,1628,,"        Assert.assertTrue(this.regionPath != null, ""Region path is null."");"
89434,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java,2168,,"      buff.append(""(region path='""); // make sure this is the first one"
89435,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java,2170,,"      buff.append(""'; sender="");"
89436,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java,3786,,"          if (key instanceof String && key.equals(""ALL_KEYS"")) {"
89437,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/NonLocalRegionEntry.java,201,,"        ""Not appropriate for PartitionedRegion.NonLocalRegionEntry"");"
89438,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java,1501,,"                    String.format(""Unknown opCode %s found in disk operation log."","
89439,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java,3394,,"        throw new DiskAccessException(String.format(""Failed writing key to %s"","
89440,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java,3402,,"                ""Failed writing key to %s due to failure in acquiring read lock for asynch writing"","
89441,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java,3461,,"                getParent().getCache().getCacheClosedException(""The disk store is closed."");"
89442,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/OverflowOplog.java,472,,"          String.format(""Failed writing key to %s"", this.diskFile.getPath()),"
89443,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionRegionConfigValidator.java,191,,"              ""The %1$s set in RegionAttributes is incompatible with %1$s used by other distributed members."","
89444,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java,2579,,"              PRHARedundancyProvider.timedOut(this, null, null, ""update an entry"","
89445,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java,3659,,"          PRHARedundancyProvider.timedOut(this, null, null, ""doing function execution"","
89446,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionDataStore.java,323,,"        logger.debug(""Failed grab for bucketId = {}{}{}"", pr.getPRId(), pr.BUCKET_ID_SEPARATOR,"
89447,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionStats.java,187,,"            f.createLongGauge(""bucketCount"", ""Number of buckets in this node."", ""buckets""),"
89448,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionStats.java,188,,"            f.createLongCounter(""putsCompleted"", ""Number of puts completed."", ""operations"","
89449,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionStats.java,194,,"                ""Total number of times put operations had to be retried."", ""retry attempts"", false),"
89450,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionStats.java,212,,"            f.createLongCounter(PUTALL_TIME, ""Total time spent doing putAlls."", ""nanoseconds"","
89451,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PoolManagerImpl.java,236,,"        logger.warn(""Error registering instantiator on pool:"", e);"
89452,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PoolStats.java,97,,"            f.createIntGauge(""connections"", ""Current number of connections"", ""connections""),"
89453,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PoolStats.java,101,,"            f.createIntCounter(""connects"", ""Total number of times a connection has been created."","
89454,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PoolStats.java,103,,"            f.createIntCounter(""disconnects"","
89455,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/PoolStats.java,132,,"                ""clientOps""),"
89456,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/ProxyRegionMap.java,361,,"          String.format(""No entry support on regions with DataPolicy %s"","
89457,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/SearchLoadAndWriteProcessor.java,1505,,"          + this.regionName + ""\"", processorId "" + processorId + "", timeoutMs="" + this.timeoutMs"
89458,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/StateFlushOperation.java,134,,"        logger.trace(LogMarker.STATE_FLUSH_OP_VERBOSE, ""Sending {}"", gr);"
89459,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/TXManagerImpl.java,490,,"            logger.error(""Exception occurred in TransactionListener"", t);"
89460,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/ValidatingDiskRegion.java,188,,"      throw new IllegalStateException(""should never be called"");"
89461,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/control/OffHeapMemoryMonitor.java,442,,"          new Object[] {event.getMember(), ""off-heap""});"
89462,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java,89,,"                ""operations""),"
89463,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java,96,,"                ""Total time spent directing cache rebalance operations."", ""nanoseconds"", false),"
89464,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java,121,,"                ""bytes"", false),"
89465,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java,168,,"                ""The number of times that membership has changed during a rebalance"", ""events""),"
89466,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/eviction/CountLRUStatistics.java,48,,"            f.createLongGauge(""entriesAllowed"", entriesAllowedDesc, ""entries""),"
89467,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/eviction/HeapLRUStatistics.java,47,,"            f.createLongCounter(""lruEvictions"", lruEvictionsDesc, ""entries""),"
89468,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/eviction/MemoryLRUStatistics.java,49,,"            f.createLongCounter(""lruEvictions"", lruEvictionsDesc, ""entries""),"
89469,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/AbstractExecution.java,266,,"              String.format(""The function, %s, did not send last result"","
89470,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/DistributedRegionFunctionExecutor.java,58,,"          String.format(""The input %s for the execute function request is null"","
89471,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/DistributedRegionFunctionResultSender.java,77,,"          String.format(""Cannot %s result as the Function#hasResult() is false"","
89472,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/DistributedRegionFunctionResultSender.java,78,,"              ""send""));"
89473,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/InternalFunctionExecutionServiceImpl.java,158,,"      throw new FunctionException(String.format(""%s passed is null"","
89474,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/InternalFunctionExecutionServiceImpl.java,292,,"          ""DistributedSystem instance ""));"
89475,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/PartitionedRegionFunctionExecutor.java,46,,"          String.format(""The input %s for the execute function request is null"","
89476,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerRegionFunctionExecutor.java,56,,"          String.format(""The input %s for the execute function request is null"","
89477,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerToClientFunctionResultSender.java,107,,"            String.format(""Cannot %s result as the Function#hasResult() is false"","
89478,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerToClientFunctionResultSender.java,108,,"                ""send""));"
89479,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/metrics/FunctionServiceStats.java,131,,"            ""Total number of completed function.execute() calls"", ""operations""),"
89480,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/execute/metrics/FunctionStatsImpl.java,114,,"            ""Total number of completed function.execute() calls for given function"", ""operations""),"
89481,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/ha/HARegionQueue.java,2177,,"                    + ""; System ID hash code: "" + System.identityHashCode(entryHaEventWrapper)"
89482,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/ha/HARegionQueue.java,2178,,"                    + ""; Wrapper details: "" + entryHaEventWrapper);"
89483,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/ha/HARegionQueueStats.java,117,,"        f.createLongCounter(EVENTS_QUEUED, ""Number of events added to queue."", ""operations""),"
89484,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/partitioned/rebalance/model/RefusalReason.java,29,,"        return ""Target member "" + target.getMemberId() + "" is already hosting bucket """
89485,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/persistence/DiskInitFileParser.java,295,,"            logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, ""IFREC_REGION_CONFIG_ID drId={}"","
89486,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImpl.java,990,,"                  logger.warn(""Unexpected Exception:"", ex);"
89487,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/AcceptorImpl.java,1135,,"                    logger.warn(""unexpected"", ex);"
89488,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/BaseCommand.java,877,,"            ""not yet supported"");"
89489,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/BaseCommand.java,893,,"        if (riKey.equals(""ALL_KEYS"")) {"
89490,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientNotifierStats.java,78,,"        ""Number of events processed by the cache client notifier."", ""operations""),"
89491,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientProxy.java,1034,,"          ""This process is not the primary server for the given client"");"
89492,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientProxyStats.java,97,,"        f.createIntCounter(MESSAGES_RECEIVED, ""Number of client messages received."", ""operations""),"
89493,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientUpdater.java,686,,"          logger.debug(""{}: Region named {} does not exist"", this, regionName);"
89494,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientUpdater.java,749,,"          logger.debug(""Received message has CQ Event. Number of cqs interested in the event : {}"","
89495,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheClientUpdater.java,835,,"          logger.debug(""Region named {} does not exist"", regionName);"
89496,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheServerHelper.java,154,,"                ""UTF-8 Exception malformed input"","
89497,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheServerStats.java,243,,"            ""operations""),"
89498,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheServerStats.java,245,,"            ""Total time spent in reading get requests."", ""nanoseconds""),"
89499,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheServerStats.java,384,,"            ""bytes""),"
89500,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/CacheServerStats.java,471,,"            ""load""),"
89501,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/Message.java,569,,"      throw new IOException(""Dead Connection"");"
89502,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/ServerConnection.java,361,,"          logger.info(""{} {}"", getName(), e);"
89503,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/ServerConnection.java,1069,,"        throw new AuthenticationFailedException(""Authentication failed"");"
89504,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteFunction70.java,154,,"      logger.warn(""Exception on server while executing function: {}"", function, e);"
89505,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunction66.java,123,,"      logger.warn(String.format(""Exception on server while executing function : %s"","
89506,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunction66.java,136,,"      logger.warn(""{}: {}"", serverConnection.getName(), message);"
89507,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunctionSingleHop.java,147,,"      logger.warn(String.format(""Exception on server while executing function : %s"","
89508,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunctionSingleHop.java,168,,"      logger.warn(""{}: {}"", serverConnection.getName(), message);"
89509,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/TXSynchronizationCommand.java,85,,"          logger.debug(""Problem writing reply to client"", e);"
89510,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tx/DistClientTXStateStub.java,42,,"        String.format(""precommit() operation %s meant for Dist Tx is not supported"","
89511,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tx/DistributedTXRegionStub.java,60,,"          String.format(""Region %s not colocated with other regions in transaction"","
89512,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tx/PartitionedTXRegionStub.java,88,,"            ""Transactional data moved, due to rebalancing."");"
89513,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/tx/PartitionedTXRegionStub.java,92,,"                ""Transaction data node %s has departed. To proceed, rollback this transaction and begin a new one."","
89514,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java,1146,,"              ""%s: An Exception occurred while queueing %s to perform operation %s for %s"","
89515,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/wan/GatewayReceiverStats.java,113,,"  private static final String EVENTS_RECEIVED_COUNTER_UNITS = ""operations"";"
89516,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/wan/GatewaySenderStats.java,220,,"                ""operations""),"
89517,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/wan/GatewaySenderStats.java,257,,"                ""tokens""),"
89518,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/wan/GatewaySenderStats.java,260,,"                ""events""),"
89519,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheCreation.java,1030,,"    throw new UnsupportedOperationException(""Should not be invoked"");"
89520,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheServerCreation.java,245,,"    throw new UnsupportedOperationException(""Shouldn't be invoked"");"
89521,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheTransactionManagerCreation.java,102,,"        ""Transactions not supported"");"
89522,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheXmlGenerator.java,1347,,"      atts.addAttribute("""", """", DISABLE_PERSIST_BACKUP, """", ""true"");"
89523,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheXmlParser.java,840,,"      throw new CacheXmlException(String.format(""A %s is not an instance of a %s"","
89524,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/ClientCacheCreation.java,104,,"    throw new UnsupportedOperationException(""Should not be invoked"");"
89525,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/RegionCreation.java,429,,"        ""Unsupported at this time"");"
89526,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/RegionCreation.java,597,,"      throw new UnsupportedOperationException(""Should not be invoked"");"
89527,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/ResourceManagerCreation.java,51,,"    throw new IllegalArgumentException(""Unused"");"
89528,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/ResourceManagerCreation.java,173,,"          + getCriticalHeapPercentage() + "" != "" + other.getCriticalHeapPercentage());"
89529,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/concurrent/CompactConcurrentHashSet2.java,442,,"  @SuppressWarnings({""rawtypes"", ""unchecked""}) // for cast to Comparable"
89530,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/datasource/DataSourceFactory.java,114,,"            ""DataSourceFactory::getManagedDataSource: Exception in creating managed connection factory. Exception string, %s"","
89531,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jndi/ContextImpl.java,187,,"          ""Name can not be empty!"");"
89532,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jndi/ContextImpl.java,210,,"        throw new NotContextException(String.format(""Expected Context but found %s"","
89533,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jndi/ContextImpl.java,404,,"            String.format(""Name %s not found"", name));"
89534,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jndi/JNDIInvoker.java,95,,"  private static final String[][] knownJNDIManagers = {{""java:/TransactionManager"", ""JBoss""},"
89535,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jta/GlobalTransaction.java,241,,"                  ? (""Error Code ="" + ((XAException) e).errorCode) : """")});"
89536,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/jta/TransactionManagerImpl.java,164,,"          ""TransactionManager invalid"");"
89537,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/lang/StringUtils.java,168,,"      return ""null"";"
89538,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/lang/StringUtils.java,237,,"          b.append(""and "");"
89539,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/lang/StringUtils.java,239,,"          b.append("" more"");"
89540,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/net/SocketCreator.java,388,,"    if (protocols != null && !""any"".equalsIgnoreCase(protocols[0])) {"
89541,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/offheap/AddressableMemoryManager.java,143,,"    assert bytesOffset >= 0 : ""byteOffset="" + bytesOffset;"
89542,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/offheap/AddressableMemoryManager.java,179,,"  @SuppressWarnings(""rawtypes"")"
89543,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/offheap/DataType.java,45,,"        return ""org.apache.geode.internal.serialization.DataSerializableFixedID:"""
89544,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/offheap/OffHeapStorage.java,104,,"        new StatisticDescriptor[] {f.createLongGauge(usedMemory, usedMemoryDesc, ""bytes""),"
89545,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/offheap/OffHeapStoredObject.java,231,,"          ""It looks like this off heap memory was already freed. rawBits="""
89546,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/FileControllableProcess.java,63,,"    notNull(directory, ""Invalid directory '"" + directory + ""' specified"");"
89547,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/FileProcessController.java,70,,"    notNull(parameters, ""Invalid parameters '"" + parameters + ""' specified"");"
89548,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/PidFile.java,45,,"    notNull(file, ""Invalid file '"" + file + ""' specified"");"
89549,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/ProcessControllerFactory.java,52,,"    notNull(parameters, ""Invalid parameters '"" + parameters + ""' specified"");"
89550,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/ProcessStreamReader.java,41,,"    notNull(builder, ""Invalid builder '"" + builder + ""' specified"");"
89551,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/ProcessUtils.java,76,,"    notEmpty(name, ""Invalid name '"" + name + ""' specified"");"
89552,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/process/signal/Signal.java,52,,"  SIGURG(16, ""URG"", SignalType.UNKNOWN, ""Unknown""),"
89553,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/security/AuthorizeRequest.java,120,,"        this.logger.warning(String.format(""%s : %s"", new Object[] {this, errStr}));"
89554,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/security/AuthorizeRequest.java,290,,"            toString() + "": Authorized to perform QUERY operation ["" + queryString + ""] on cache"");"
89555,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/security/AuthorizeRequestPP.java,100,,"      this.logger.warning(String.format(""%s : %s"", new Object[] {this.id, errStr}));"
89556,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/MembershipLogger.java,29,,"    GRAPH_LOGGER.logTransition(GraphType.MEMBER, ""member"", ""crash"", ""destroyed"", member, member);"
89557,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/MembershipLogger.java,29,,"    GRAPH_LOGGER.logTransition(GraphType.MEMBER, ""member"", ""crash"", ""destroyed"", member, member);"
89558,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/RegionLogger.java,74,,"      GRAPH_LOGGER.logTransition(GraphType.REGION, regionName, ""destroy"", ""destroyed"", memberId,"
89559,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/RegionLogger.java,74,,"      GRAPH_LOGGER.logTransition(GraphType.REGION, regionName, ""destroy"", ""destroyed"", memberId,"
89560,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/io/GemfireLogConverter.java,109,,"        context.appender.write(new Transition(timestamp, GraphType.MEMBER, ""member"", ""start"","
89561,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/io/GemfireLogConverter.java,122,,"            ""destroyed"", member, member));"
89562,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/io/GemfireLogConverter.java,140,,"        context.appender.write(new Transition(timestamp, GraphType.REGION, ALL, ""destroy"","
89563,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/sequencelog/io/GemfireLogConverter.java,194,,"            ""created"", context.currentMember, context.currentMember));"
89564,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/shared/NativeCallsJNAImpl.java,306,,"    @SuppressWarnings(""unused"")"
89565,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/StatArchiveReader.java,1694,,"      stream.print(""(byteIntervalCount="" + count + "" start="" + firstValue);"
89566,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/StatArchiveWriter.java,809,,"          ""method unimplemented"");"
89567,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/StatMonitorHandler.java,117,,"        logger.warn(LogMarker.STATISTICS_MARKER, ""StatisticsMonitor {} threw {}"", monitor,"
89568,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/StatisticsTypeXml.java,172,,"    Assert.assertTrue(typeNode.hasAttribute(""name""));"
89569,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,159,,"                ""megabytes""),"
89570,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,217,,"                ""packets"", false),"
89571,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,219,,"                ""The number of network bytes sent (or received) on the loopback interface"", ""bytes"","
89572,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,249,,"                ""pages"", false),"
89573,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,260,,"                ""The total number disk read operations completed successfully"", ""ops""),"
89574,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/statistics/platform/LinuxSystemStats.java,267,,"                ""The total number of milliseconds spent reading from disk"", ""milliseconds""),"
89575,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/stats50/VMStats50.java,221,,"        ""threads""));"
89576,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/stats50/VMStats50.java,236,,"        ""bytes"", true));"
89577,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/stats50/VMStats50.java,240,,"    sds.add(f.createLongGauge(""maxMemory"","
89578,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/tcp/ConnectionTable.java,620,,"        closeCon(""Connection table being destroyed"", o);"
89579,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/util/PluckStacks.java,248,,"      return stackSize < 12 && thread.getFirstFrame().contains(""socketAccept"");"
89580,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/util/PluckStacks.java,366,,"          && (stackSize <= 8 && thread.getFirstFrame().contains(""Object.wait""));"
89581,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/util/concurrent/CustomEntryConcurrentHashMap.java,501,,"    @SuppressWarnings(""unchecked"")"
89582,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/internal/util/concurrent/ReentrantSemaphore.java,98,,"        ""ReentrantSemaphore doesn't support a single thread using more than one permit"");"
89583,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/beans/DistributedSystemBridge.java,1491,,"    String fullPath = proxyName.getKeyProperty(""name"");"
89584,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,121,,"  public static final String TOPIC_GEODE_LOCATOR = ""Locator"";"
89585,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,196,,"  public static final String ERROR__MSG__HEADER = ""Error"";"
89586,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,284,,"  public static final String ALTER_DISK_STORE__DISKSTORENAME = ""name"";"
89587,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,287,,"  public static final String ALTER_DISK_STORE__REGIONNAME = ""region"";"
89588,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,290,,"  public static final String ALTER_DISK_STORE__DISKDIRS = ""disk-dirs"";"
89589,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,292,,"      ""Directories where data for the disk store was previously written."";"
89590,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,454,,"          + DistributionConfig.MIN_ARCHIVE_FILE_SIZE_LIMIT + "" - """
89591,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,517,,"  public static final String BACKUP_DISK_STORE__DISKDIRS = ""dir"";"
89592,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,530,,"  public static final String BACKUP_DISK_STORE_MSG_MEMBER = ""Member"";"
89593,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,665,,"  public static final String CREATE_ASYNC_EVENT_QUEUE__PARALLEL = ""parallel"";"
89594,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,681,,"  public static final String CREATE_ASYNC_EVENT_QUEUE__DISK_STORE = ""disk-store"";"
89595,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1245,,"  public static final String DESTROY_FUNCTION__MSG__CANNOT_EXECUTE = ""Cannot execute"";"
89596,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1413,,"  public static final String EXPORT_DATA__FILE = ""file"";"
89597,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1529,,"  public static final String GET__KEY = ""key"";"
89598,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1532,,"  public static final String GET__KEYCLASS = ""key-class"";"
89599,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1543,,"  public static final String GET__MSG__REGIONNAME_EMPTY = ""Region name is either empty or Null"";"
89600,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1548,,"  public static final String GET__MSG__REGION_NOT_FOUND = ""Region <{0}> Not Found"";"
89601,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1549,,"  public static final String GET__MSG__KEY_NOT_FOUND_REGION = ""Key is not present in the region"";"
89602,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,1761,,"  public static final String LOAD_BALANCE_GATEWAYSENDER__ID__HELP = ""ID of the Gateway Sender."";"
89603,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,2125,,"  public static final String SHOW_METRICS__CACHESERVER__PORT = ""port"";"
89604,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,2212,,"  public static final String CREATE_GATEWAYRECEIVER__BINDADDRESS = ""bind-address"";"
89605,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java,2781,,"  public static final String STATUS_LOCATOR__PID = ""pid"";"
89606,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/management/internal/util/ManagementUtils.java,71,,"  @SuppressWarnings(""unchecked"")"
89607,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/pdx/internal/NullTypeRegistration.java,32,,"    throw new PdxInitializationException(""Trying to use PDX type, but type registry is disabled"");"
89608,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/pdx/internal/PdxInputStream.java,242,,"      throw new PdxSerializationException(""Exception deserializing a PDX field"", e);"
89609,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/pdx/internal/PdxOutputStream.java,58,,"      throw new PdxSerializationException(""Exception while serializing a PDX field"", e);"
89610,./TargetProjects/geode/geode-core/src/main/java/org/apache/geode/pdx/internal/TypeRegistrationStatistics.java,45,,"                    ""ops""),"
89611,./TargetProjects/geode/geode-core/src/performanceTest/java/org/apache/geode/cache/query/BaseLineAndCompareQueryPerfJUnitTest.java,90,,"      ""SELECT DISTINCT * FROM "" + SEPARATOR + ""Countries c, c.states s, s.districts d,"""
89612,./TargetProjects/geode/geode-core/src/performanceTest/java/org/apache/geode/cache/query/BaseLineAndCompareQueryPerfJUnitTest.java,407,,"    qs.createIndex(""cityName"", IndexType.FUNCTIONAL, ""ct.name"","
89613,./TargetProjects/geode/geode-core/src/performanceTest/java/org/apache/geode/cache/query/BaseLineAndCompareQueryPerfJUnitTest.java,408,,"        SEPARATOR + ""Countries c, c.states s, s.districts d, d.cities ct, d.villages v"");//"
89614,./TargetProjects/geode/geode-core/src/performanceTest/java/org/apache/geode/cache/query/BaseLineAndCompareQueryPerfJUnitTest.java,453,,"      wr.write(""==========================================================================="");"
89615,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/alerting/internal/AlertLevelTest.java,77,,"        .hasMessage(""No AlertLevel found for intLevel "" + LogWriterLevel.INFO.intLevel());"
89616,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/alerting/internal/ClusterAlertMessagingTest.java,92,,"    clusterAlertMessaging.sendAlert(localMember, AlertLevel.WARNING, Instant.now(), ""threadName"","
89617,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/alerting/internal/ClusterAlertMessagingTest.java,93,,"        Thread.currentThread().getId(), ""formattedMessage"", ""stackTrace"");"
89618,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/alerting/internal/ClusterAlertMessagingTest.java,93,,"        Thread.currentThread().getId(), ""formattedMessage"", ""stackTrace"");"
89619,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/alerting/internal/log4j/AlertLevelConverterTest.java,81,,"        .hasMessage(""No matching AlertLevel for Log4J2 Level "" + Level.ALL + ""."");"
89620,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/AttributesFactoryJUnitTest.java,122,,"      fail(""Should have thrown an IllegalStateException"");"
89621,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/AttributesFactoryJUnitTest.java,161,,"    factory.setDiskStoreName(""ds1"");"
89622,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ConnectionStatsTest.java,356,,"    int messagesStatId = ConnectionStats.getType().nameToId(""messagesBeingReceived"");"
89623,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ConnectionStatsTest.java,357,,"    int messagesBytesStatId = ConnectionStats.getType().nameToId(""messageBytesBeingReceived"");"
89624,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,63,,"      ""NOT_HA, OBJECT_REFERENCE, -1, 1"","
89625,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,64,,"      ""NOT_HA, OBJECT_REFERENCE, 0, 1"","
89626,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,65,,"      ""NOT_HA, OBJECT_REFERENCE, 3, 1"","
89627,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,66,,"      ""NOT_HA, STRING, -1, 1"","
89628,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,67,,"      ""NOT_HA, STRING, 0, 1"","
89629,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,68,,"      ""NOT_HA, STRING, 3, 1"","
89630,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,69,,"      ""HA, OBJECT_REFERENCE, -1, 1"","
89631,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,70,,"      ""HA, OBJECT_REFERENCE, 0, 1"","
89632,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,71,,"      ""HA, OBJECT_REFERENCE, 3, 1"","
89633,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,72,,"      ""HA, STRING, -1, 1"","
89634,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,73,,"      ""HA, STRING, 0, 1"","
89635,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,74,,"      ""HA, STRING, 3, 1"","
89636,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/ExecuteRegionFunctionOpRetryTest.java,76,,"  @TestCaseName(""[{index}] {method}: {params}"")"
89637,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/GetAllOpJUnitTest.java,67,,"    when(region.getFullPath()).thenReturn(""/testRegion"")"
89638,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/InvalidateOpJUnitTest.java,55,,"    when(keyinfo.getKey()).thenReturn(""key"");"
89639,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/InvalidateOpJUnitTest.java,63,,"    InvalidateOp.execute(pool, ""testregion"", event, false, region);"
89640,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java,98,,"    Object result = exec.execute(cnx -> ""hello"");"
89641,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java,110,,"        throw new SocketTimeoutException(""test"");"
89642,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java,125,,"        throw new ServerOperationException(""Something didn't work"");"
89643,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/OpExecutorImplJUnitTest.java,197,,"    ServerLocation server = new ServerLocation(""localhost"", -1);"
89644,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java,50,,"    PutOp.PutOpImpl putOp = new PutOp.PutOpImpl(""testRegion"", ""testKey"", ""testValue"", new byte[10],"
89645,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java,50,,"    PutOp.PutOpImpl putOp = new PutOp.PutOpImpl(""testRegion"", ""testKey"", ""testValue"", new byte[10],"
89646,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/client/internal/PutOpJUnitTest.java,50,,"    PutOp.PutOpImpl putOp = new PutOp.PutOpImpl(""testRegion"", ""testKey"", ""testValue"", new byte[10],"
89647,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/CacheConfigTest.java,176,,"    regionConfig.setName(""test"");"
89648,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/CacheConfigTest.java,231,,"    assertThat(config.findRegionConfiguration(""test"" + SEPARATOR + ""test1"")).isNull();"
89649,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/DeclarableTypeTest.java,31,,"    DeclarableType declarable = new DeclarableType(""className"");"
89650,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/DeclarableTypeTest.java,34,,"    assertThat(declarable).isNotEqualTo(new DeclarableType(""anotherClassName""));"
89651,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/RegionAttributesTypeTest.java,118,,"    evictionAttributes = EvictionAttributes.generate(""local-destroy"", null, null, (String) null);"
89652,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/configuration/RegionConfigTest.java,44,,"    assertThat(index.getType()).isEqualTo(""key"");"
89653,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/PerfQuery.java,183,,"        Region region = PerfQuery.this.cache.getRegion(SEPARATOR + ""portfolios"");"
89654,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/AbstractCompiledValueTestJUnitTest.java,34,,"    CompiledValue compiledValue1 = new CompiledID(""testString"");"
89655,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/AbstractCompiledValueTestJUnitTest.java,49,,"        new CompiledIteratorDef(""test"", new CollectionTypeImpl(), compiledValue1),"
89656,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/AttributeDescriptorTest.java,92,,"        new AttributeDescriptor(typeRegistry, ""nonExistingAttribute"");"
89657,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/AttributeDescriptorTest.java,236,,"      ""nonPublicAttributeWithPublicAccessor, nonPublicAttributeWithPublicAccessor"","
89658,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/AttributeDescriptorTest.java,237,,"      ""nonPublicAttributeWithPublicGetterMethod, getNonPublicAttributeWithPublicGetterMethod""})"
89659,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/GroupJunctionTest.java,63,,"    nameIsClark = spy(new CompiledComparison(new CompiledID(""name""), new CompiledLiteral(""Clark""),"
89660,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/GroupJunctionTest.java,70,,"    aliasNotBatman = spy(new CompiledComparison(new CompiledID(""alias""),"
89661,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/MethodDispatchTest.java,97,,"        new MethodDispatch(Integer.class, ""toString"", Collections.emptyList());"
89662,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/NWayMergeResultsTest.java,93,,"        .as(""next should have thrown NoSuchElementException"")"
89663,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,140,,"    String pattern = ""abc"";"
89664,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,142,,"    CompiledID cid = new CompiledID(""val"");"
89665,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,446,,"        ""SELECT * FROM "" + SEPARATOR + ""region WHERE id IN (SELECT "" + function + ""(id) FROM """
89666,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,446,,"        ""SELECT * FROM "" + SEPARATOR + ""region WHERE id IN (SELECT "" + function + ""(id) FROM """
89667,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,447,,"            + SEPARATOR + ""region)"","
89668,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,448,,"        ""SELECT COUNT(id), status FROM "" + SEPARATOR + ""region WHERE id IN (SELECT "" + function"
89669,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,449,,"            + ""(id) FROM "" + SEPARATOR + ""region) GROUP BY status"","
89670,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/QCompilerTest.java,487,,"        ""SELECT * FROM "" + SEPARATOR + ""region WHERE "" + function + ""(id) > 0"","
89671,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagJUnitTest.java,42,,"    bag.add(""one"");"
89672,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagJUnitTest.java,43,,"    bag.add(""two"");"
89673,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagJUnitTest.java,236,,"      fail(""should have thrown a NoSuchElementException"");"
89674,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java,50,,"    bag.add(wrap(""one"", bag.getCollectionType().getElementType()));"
89675,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java,51,,"    bag.add(wrap(""two"", bag.getCollectionType().getElementType()));"
89676,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java,52,,"    bag.add(wrap(""three"", bag.getCollectionType().getElementType()));"
89677,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/ResultsBagLimitBehaviourJUnitTest.java,53,,"    bag.add(wrap(""four"", bag.getCollectionType().getElementType()));"
89678,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/index/PrimaryKeyIndexTest.java,55,,"    String value = ""value"";"
89679,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/internal/index/PrimaryKeyIndexTest.java,56,,"    index.applyCqOrProjection(null, context, results, value, null, false, ""key"");"
89680,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RegExMethodAuthorizerTest.java,140,,"    methods.add(new Pair<>(HAContainerMap.class.getMethod(""get"", Object.class),"
89681,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RegExMethodAuthorizerTest.java,147,,"            .as(""For method: "" + pair.getX().getName()).isFalse());"
89682,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RegExMethodAuthorizerTest.java,156,,"    when(region.getName()).thenReturn(""testRegion"");"
89683,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,159,,"    assertThatThrownBy(() -> methodAuthorizer.getAllowedMethodsPerClass().remove(""compareTo""))"
89684,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,164,,"    assertThatThrownBy(() -> methodAuthorizer.getAllowedGeodeMethodsPerClass().remove(""get""))"
89685,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,211,,"      Method toStringMethod = type.getMethod(""toString"");"
89686,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,212,,"      Method equalsMethod = type.getMethod(""equals"", Object.class);"
89687,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,366,,"    stringMethods.add(String.class.getMethod(""lastIndexOf"", int.class));"
89688,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,405,,"    Method getKeyMethod = Map.Entry.class.getMethod(""getKey"");"
89689,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,406,,"    Method getValueMethod = Map.Entry.class.getMethod(""getValue"");"
89690,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,419,,"    mapMethods.add(Map.class.getMethod(""containsKey"", Object.class));"
89691,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,420,,"    mapMethods.add(Map.class.getMethod(""entrySet""));"
89692,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,422,,"    mapMethods.add(Map.class.getMethod(""keySet""));"
89693,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,423,,"    mapMethods.add(Map.class.getMethod(""values""));"
89694,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/RestrictedMethodAuthorizerTest.java,482,,"        ResourcePermission.Resource.DATA, ResourcePermission.Operation.READ, ""testRegion"");"
89695,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/UnrestrictedMethodAuthorizerTest.java,116,,"    nonGeodeAccessorMethods.put(Map.class.getMethod(""entrySet""), mock(Map.class));"
89696,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/UnrestrictedMethodAuthorizerTest.java,117,,"    nonGeodeAccessorMethods.put(Map.class.getMethod(""get"", Object.class), mock(Map.class));"
89697,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/UnrestrictedMethodAuthorizerTest.java,132,,"    methods.add(Map.class.getMethod(""containsKey"", Object.class));"
89698,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/UnrestrictedMethodAuthorizerTest.java,135,,"    methods.add(Map.class.getMethod(""keySet""));"
89699,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/query/security/UnrestrictedMethodAuthorizerTest.java,136,,"    methods.add(Map.class.getMethod(""values""));"
89700,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache/util/StringPrefixPartitionResolverJUnitTest.java,53,,"    String key = ""foobar"";"
89701,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/cache30/TestDiskRegion.java,67,,"    DiskStore ds1 = dsf.setDiskDirs(dirs1).create(""TestDiskRegion"");"
89702,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/AbstractLauncherServiceStateTest.java,462,,"        .as(TO_STRING_PROCESS_ID + "" line in "" + lines)"
89703,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/AbstractLauncherTest.java,78,,"    properties.setProperty(NAME, ""memberOne"");"
89704,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/AbstractLauncherTest.java,148,,"    AbstractLauncher<?> launcher = createAbstractLauncher(""TestMember"", ""123"");"
89705,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/AbstractLauncherTest.java,181,,"    AbstractLauncher<?> launcher = createAbstractLauncher(""   "", null);"
89706,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/ServerLauncherBuilderTest.java,198,,"    assertThat(builder.setMemberName(""serverOne"")).isSameAs(builder);"
89707,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/ServerLauncherBuilderTest.java,648,,"    builder.parseArguments(""start"", ""--force"");"
89708,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/ServerLauncherTest.java,62,,"        .setSocketBufferSize(2048).setHostNameForClients(""hostName4Clients"")"
89709,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/ServerLauncherTest.java,102,,"    Cache cache = mock(Cache.class, ""Cache"");"
89710,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/ServerLauncherTest.java,227,,"    CacheServer cacheServer = mock(CacheServer.class, ""CacheServer"");"
89711,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/DistributionConfigJUnitTest.java,200,,"          .withFailMessage(""sameAs failed for "" + attributeName);"
89712,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/DistributionConfigJUnitTest.java,265,,"    assertThat(config.getAttributeObject(LOG_LEVEL)).isEqualTo(""config"");"
89713,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/DistributionConfigJUnitTest.java,425,,"    props.put(SSL_ENABLED_COMPONENTS, ""all"");"
89714,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/DistributionConfigJUnitTest.java,434,,"    props.put(CLUSTER_SSL_ENABLED, ""true"");"
89715,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,68,,"    when(member.getId()).thenReturn(""member"");"
89716,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,78,,"    Path jar1 = Files.createFile(stagingDir.resolve(""abc.jar""));"
89717,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,79,,"    FileUtils.writeStringToFile(jar1.toFile(), ""version1"", ""UTF-8"");"
89718,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,80,,"    Path jar2 = Files.createFile(stagingDir.resolve(""def.jar""));"
89719,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,82,,"    service.addJarsToThisLocator(""DEPLOYEDBY1"", ""DEPLOYEDTIME1"", paths, null);"
89720,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,82,,"    service.addJarsToThisLocator(""DEPLOYEDBY1"", ""DEPLOYEDTIME1"", paths, null);"
89721,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,83,,"    assertThat(workingDir.resolve(""cluster"").toFile().list()).containsExactlyInAnyOrder(""abc.jar"","
89722,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,101,,"    service.addJarsToThisLocator(""DEPLOYEDBY2"", ""DEPLOYEDTIME2"", paths, null);"
89723,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,101,,"    service.addJarsToThisLocator(""DEPLOYEDBY2"", ""DEPLOYEDTIME2"", paths, null);"
89724,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,121,,"    Path jar1 = Files.createFile(stagingDir.resolve(""abc-1.0.jar""));"
89725,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceDeploymentTest.java,122,,"    Path jar2 = Files.createFile(stagingDir.resolve(""def-1.0.jar""));"
89726,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,76,,"    configuration = new Configuration(""cluster"");"
89727,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,210,,"    assertThat(configuration.getCacheXmlContent()).contains(""<gateway-receiver/>"");"
89728,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,218,,"        .println(""Initial document:"" + System.lineSeparator() + """" + XmlUtils.prettyXml(document));"
89729,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,219,,"    assertThat(document.getElementsByTagName(""gateway-receiver"").getLength()).isEqualTo(2);"
89730,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,222,,"        ""Processed document:"" + System.lineSeparator() + """" + XmlUtils.prettyXml(document));"
89731,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,306,,"    return ""<cache>"" + System.lineSeparator() + ""<gateway-receiver/>"" + System.lineSeparator()"
89732,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalConfigurationPersistenceServiceTest.java,307,,"        + ""<gateway-receiver/>"" + System.lineSeparator() + ""</cache>"";"
89733,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java,97,,"    verify(httpService).addWebApplication(eq(""/management""), any(), any());"
89734,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/LocatorLoadSnapshotJUnitTest.java,65,,"    final ServerLocation l1 = new ServerLocation(""localhost"", 1);"
89735,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/ServerLocationAndMemberIdTest.java,30,,"    final ServerLocation serverLocation1 = new ServerLocation(""localhost"", 1);"
89736,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/membership/InternalDistributedMemberTest.java,221,,"    when(memberData.getDurableId()).thenReturn(""durableId"");"
89737,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/membership/adapter/auth/GMSAuthenticatorWithAuthenticatorTest.java,72,,"    this.props.setProperty(SECURITY_PEER_AUTH_INIT, SpyAuthInit.class.getName() + "".create"");"
89738,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/membership/adapter/auth/GMSAuthenticatorWithSecurityManagerTest.java,73,,"    this.props.setProperty(SECURITY_PEER_AUTH_INIT, SpyAuthInit.class.getName() + "".create"");"
89739,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/distributed/internal/membership/adapter/auth/GMSAuthenticatorWithSecurityManagerTest.java,74,,"    this.props.setProperty(SECURITY_MANAGER, ""dummy"");"
89740,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/AbstractConfigTest.java,66,,"    abstractConfig.setAttribute(stringArrayAttributeName, ""value"", source);"
89741,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/ConfigSourceJUnitTest.java,61,,"    ConfigSource cs1 = ConfigSource.file(""name"", true);"
89742,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/DataSerializableJUnitTest.java,3060,,"    @SuppressWarnings(""unused"") // for deserialization"
89743,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/LineWrapUnitJUnitTest.java,31,,"    assertEquals(list(""aaa"", ""aaaaa"", ""aaa"", ""aaaa""), SystemAdmin.lineWrapOut(test, 3));"
89744,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/PutAllOperationContextJUnitTest.java,47,,"      fail(""expected IllegalArgumentException"");"
89745,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/PutAllOperationContextJUnitTest.java,96,,"    m.put(""INVALID_TOKEN"", Token.INVALID);"
89746,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/admin/remote/DistributionLocatorIdJUnitTest.java,36,,"        new DistributionLocatorId(address, 40404, ""127.0.0.1"", null);"
89747,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionJUnitTest.java,74,,"    region.addAsyncEventQueueId(""asyncQueueId"", false);"
89748,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionJUnitTest.java,85,,"    region.addGatewaySenderId(""gatewaySenderId"");"
89749,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/AbstractRegionMapTest.java,345,,"    when(entry.getValue()).thenReturn(""value"");"
89750,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/DistributedPingMessageTest.java,40,,"        new InternalDistributedMember(""localhost"", 1);"
89751,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/EntryEventImplTest.java,137,,"    String newValue = ""newValue"";"
89752,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/EntryEventImplTest.java,370,,"    String oldValue = ""oldValue"";"
89753,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/EntryEventImplTest.java,559,,"    String UNINITIALIZED = ""Uninitialized"";"
89754,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java,234,,"    CacheClosedException value = gemFireCacheImpl.getCacheClosedException(""message"");"
89755,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java,378,,"    assertThat(GemFireCacheImpl.isMisConfigured(clusterProps, serverProps, ""key"")).isFalse();"
89756,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java,381,,"    clusterProps.setProperty(""key"", ""value"");"
89757,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/InternalCacheBuilderAllowsMultipleSystemsTest.java,310,,"    InternalCache incompatibleOpenCache = cache(""incompatible"", OPEN);"
89758,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/InternalCacheBuilderTest.java,302,,"        THROWING_SYSTEM_CONSTRUCTOR, supplierOf(cache(""singleton"", CLOSED)),"
89759,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/InternalCacheForClientAccessTest.java,60,,"    when(delegate.getRegion(""application"")).thenReturn(applicationRegion);"
89760,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/InternalCacheForClientAccessTest.java,69,,"    when(delegate.getRegion(""secret"")).thenReturn(secretRegion);"
89761,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/InternalRegionFactoryTest.java,43,,"    String regionName = ""regionName"";"
89762,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java,121,,"        () -> new LocalRegion(""region"", regionAttributes, null, cache, internalRegionArguments,"
89763,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/OffHeapValueWrapperJUnitTest.java,86,,"        fail(""should not have been called"");"
89764,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionAttributesImplJUnitTest.java,294,,"    this.fixedPartitionAttributes.setPartitionName(""setPartitionName"");"
89765,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionHelperJUnitTest.java,29,,"          PartitionedRegionHelper.getBucketName(SEPARATOR + ""root"" + SEPARATOR + ""region"", 5);"
89766,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionQueryEvaluatorTest.java,117,,"          @SuppressWarnings(""unchecked"")"
89767,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java,352,,"        .thenReturn(""parallel"");"
89768,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java,356,,"        .thenReturn(""anotherParallel"");"
89769,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java,363,,"    assertThat(partitionedRegion.filterOutNonParallelGatewaySenders(asSet(""serial"")))"
89770,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/RegionPerfStatsTest.java,105,,"        .hasTag(""region"", REGION_NAME);"
89771,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/RegionPerfStatsTest.java,118,,"        .as(""geode.cache.gets timer with tag result=hit"")"
89772,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/RegionPerfStatsTest.java,125,,"        .as(""geode.cache.gets timer with tag result=miss"")"
89773,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/RegionPerfStatsTest.java,161,,"        .find(""geode.cache.entries"")"
89774,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/SenderIdMonitorTest.java,65,,"    profile.gatewaySenderIds = Collections.singleton(""profileGatewayId"");"
89775,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/SenderIdMonitorTest.java,101,,"    profile.asyncEventQueueIds = Collections.singleton(""profileAsyncEventQueueId"");"
89776,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/AbortBackupStepTest.java,126,,"        new ReplyException(""expected exception"", new CacheClosedException(""expected exception""));"
89777,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/FileSystemIncrementalBackupLocationTest.java,51,,"        new FileSystemIncrementalBackupLocation(nonExistingDir, ""member1"");"
89778,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/FileSystemIncrementalBackupLocationTest.java,57,,"    File backupLocation = tempDir.newFolder(""backup"");"
89779,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/FinishBackupStepTest.java,169,,"    when(finishBackup.run()).thenThrow(new IOException(""expected exception""));"
89780,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/FlushToDiskStepTest.java,89,,"        new ReplyException(""expected exception"", new CacheClosedException(""expected exception""));"
89781,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/backup/PrepareBackupStepTest.java,178,,"    when(prepareBackup.run()).thenThrow(new IOException(""expected exception""));"
89782,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/control/InternalResourceManagerTest.java,220,,"        fail(""Exception:"" + exception);"
89783,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/control/MemoryThresholdsJUnitTest.java,42,,"      fail(""Expected IllegalArgumentException"");"
89784,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationImplTest.java,97,,"  @SuppressWarnings(""unchecked"")"
89785,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/entries/AbstractRegionEntryTest.java,80,,"    Object value = ""value"";"
89786,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/event/DistributedEventTrackerTest.java,105,,"      putEvent(""key"" + i, ""value"" + i, memId, threadId, skipCallbacks, i + 1);"
89787,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/event/DistributedEventTrackerTest.java,105,,"      putEvent(""key"" + i, ""value"" + i, memId, threadId, skipCallbacks, i + 1);"
89788,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/execute/metrics/FunctionStatsManagerTest.java,77,,"    FunctionStats functionStats = functionStatsManager.getFunctionStatsByName(""foo"");"
89789,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/ha/HARegionQueueTest.java,129,,"    haRegionQueue.put(new ConflatableObject(""key"", ""value1"", eventId1, false, ""someRegion""));"
89790,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/ha/HARegionQueueTest.java,129,,"    haRegionQueue.put(new ConflatableObject(""key"", ""value1"", eventId1, false, ""someRegion""));"
89791,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/ha/HARegionQueueTest.java,131,,"    haRegionQueue.put(new ConflatableObject(""key"", ""value3"", eventId3, true, ""someRegion""));"
89792,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/map/RegionMapPutTest.java,351,,"    expectedOldValue = ""expectedOldValue"";"
89793,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/ColocatedRegionDetailsJUnitTest.java,37,,"        new ColocatedRegionDetails(""host"", ""member name"", ""parent region"", ""child region"");"
89794,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/ColocatedRegionDetailsJUnitTest.java,37,,"        new ColocatedRegionDetails(""host"", ""member name"", ""parent region"", ""child region"");"
89795,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/ColocatedRegionDetailsJUnitTest.java,37,,"        new ColocatedRegionDetails(""host"", ""member name"", ""parent region"", ""child region"");"
89796,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/ColocatedRegionDetailsJUnitTest.java,37,,"        new ColocatedRegionDetails(""host"", ""member name"", ""parent region"", ""child region"");"
89797,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/ColocatedRegionDetailsJUnitTest.java,115,,"        new ColocatedRegionDetails(""host"", ""member1"", ""parent region"", ""child region"");"
89798,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/rebalance/PartitionedRegionLoadModelJUnitTest.java,78,,"        new InternalDistributedMember(InetAddress.getByName(""127.0.0.1""), 1);"
89799,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorBuilderTest.java,294,,"    InternalCache cacheFromServer = mock(InternalCache.class, ""fromServer"");"
89800,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/AcceptorBuilderTest.java,298,,"    InternalCache cacheFromSetter = mock(InternalCache.class, ""fromSetter"");"
89801,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,71,,"    String clientId = ""client"";"
89802,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,72,,"    fprofile.registerClientInterest(clientId, ""Object1234"", InterestType.KEY, inv);"
89803,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,74,,"      fprofile.registerClientInterest(""client2"", ""Object1234"", InterestType.KEY, inv);"
89804,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,158,,"    fprofile.registerClientInterest(clientId, ""Object.*"", InterestType.REGULAR_EXPRESSION, inv);"
89805,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,246,,"        ""org.apache.geode.internal.cache.tier.sockets.TestFilter"", InterestType.FILTER_CLASS, inv);"
89806,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/FilterProfileJUnitTest.java,450,,"    assertTrue(""Expected key not found in registered list."", registeredKeys.containsAll(keys));"
89807,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/ObjectPartListJUnitTest.java,36,,"    byte[] normalBytes = ""value1"".getBytes();"
89808,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/ObjectPartListJUnitTest.java,37,,"    list.addObjectPart(""key"", normalBytes, false, null);"
89809,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/ObjectPartListJUnitTest.java,38,,"    list.addObjectPart(""key"", ""value2"", true, null);"
89810,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/ObjectPartListJUnitTest.java,39,,"    byte[] serializedObjectBytes = BlobHelper.serializeToBlob(""value3"");"
89811,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/ObjectPartListJUnitTest.java,41,,"    list.addExceptionPart(""key"", new AssertionError(""hello""));"
89812,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunction66Test.java,72,,"    String functionName = ""functionName"";"
89813,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/command/ExecuteRegionFunctionGeode18Test.java,73,,"    String functionName = ""functionName"";"
89814,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/command/PingTest.java,83,,"    myID = new InternalDistributedMember(new ServerLocation(""localhost"", 1));"
89815,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tx/AbstractPeerTXRegionStubTest.java,160,,"        ""AbstractPeerTXRegionStub expected to translate CacheClosedException to TransactionDataNodeHasDepartedException "");"
89816,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/tx/PartitionedTXRegionStubTest.java,101,,"    ForceReattemptException forceReattemptException = new ForceReattemptException(""Test FRE"");"
89817,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/versions/RegionVersionVectorTest.java,306,,"    System.out.println(""for test (b) RVV is now: "" + rv1.fullToString());"
89818,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/GatewaySenderEventImplTest.java,164,,"        ""key1"", ""value1"", 0, 0, 0, 0);"
89819,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/GatewaySenderEventImplTest.java,164,,"        ""key1"", ""value1"", 0, 0, 0, 0);"
89820,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,78,,"    when(lr.getFullPath()).thenReturn(SEPARATOR + ""dataStoreRegion"");"
89821,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,84,,"        ""Object_13964"", ""Object_13964_1"", 100, 27709));"
89822,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,172,,"        ""Object_14024"", ""Object_14024"", 101, 27822));"
89823,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,212,,"        ""Object_6079"", ""Object_6079"", 104, 2, 89, 16587));"
89824,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,217,,"            ""Object_7731"", ""Object_7731"", 112, 9, 89, 16813));"
89825,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,266,,"        ""6079"", ""6079"", 6, 6072, 0, 0));"
89826,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderEventProcessorJUnitTest.java,270,,"        ""1736"", ""1736"", 5, 6009, 0, 0));"
89827,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessorJUnitTest.java,263,,"        ""Object_13964"", ""Object_13964_1"", 1, 100));"
89828,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessorJUnitTest.java,321,,"        ""6079"", ""6079"", 6, 6072));"
89829,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderEventProcessorJUnitTest.java,325,,"        ""1736"", ""1736"", 5, 6009));"
89830,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/xmlcache/XmlGeneratorUtilsJUnitTest.java,48,,"    XmlGeneratorUtils.addAttribute(attributes, ""localname"", null);"
89831,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/xmlcache/XmlGeneratorUtilsJUnitTest.java,51,,"    XmlGeneratorUtils.addAttribute(attributes, ""localname"", ""value"");"
89832,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/xmlcache/XmlGeneratorUtilsJUnitTest.java,67,,"    XmlGeneratorUtils.addAttribute(attributes, ""prefix"", ""localname"", null);"
89833,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/cache/xmlcache/XmlGeneratorUtilsJUnitTest.java,73,,"    assertEquals(""prefix:localname"", attributes.getQName(0));"
89834,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/classloader/ClassPathLoaderTest.java,322,,"    String classToLoad = ""java.lang.String"";"
89835,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/classloader/ClassPathLoaderTest.java,328,,"    String resourceToGet = ""java/lang/String.class"";"
89836,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/config/JAXBServiceTest.java,89,,"    assertThat(xml).contains(""</cache>"");"
89837,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/config/JAXBServiceTest.java,165,,"        + ""        <region-attributes scope=\""distributed-ack\"" data-policy=\""replicate\""/>\n"""
89838,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/config/JAXBServiceTest.java,169,,"    assertThat(config.getName()).isEqualTo(""one"");"
89839,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/config/JAXBServiceTest.java,250,,"  @XmlType(name = """", propOrder = {""id"", ""value""})"
89840,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,62,,"    configProperties.add(new ConfigProperty(""pool.n1"", ""v1"", null));"
89841,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,89,,"    inputs.put(""name"", null);"
89842,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,107,,"    inputs.put(""name"", ""value"");"
89843,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,120,,"    inputs.put(""conn-pooled-datasource-class"", ""value"");"
89844,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,139,,"    inputs.put(""validname1"", ""value1"");"
89845,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,139,,"    inputs.put(""validname1"", ""value1"");"
89846,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,140,,"    inputs.put(""validname2"", ""value2"");"
89847,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/datasource/DataSourceFactoryTest.java,140,,"    inputs.put(""validname2"", ""value2"");"
89848,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java,69,,"    final OutputStream mockStreamOne = mock(OutputStream.class, ""streamOne"");"
89849,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/io/CompositeOutputStreamJUnitTest.java,90,,"    final OutputStream streamTwo = mock(OutputStream.class, ""streamTwo"");"
89850,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/jndi/ContextJUnitTest.java,171,,"      sub.bind(""name"", ""object"");"
89851,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/InOutParameterJUnitTest.java,38,,"    assertEquals(new InOutParameter<Object>(""test""), new InOutParameter<Object>(""test""));"
89852,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/InOutParameterJUnitTest.java,48,,"    assertFalse(new InOutParameter<Object>(""null"").equals(new InOutParameter<Object>(null)));"
89853,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/ObjectUtilsJUnitTest.java,39,,"    assertFalse(ObjectUtils.equals(null, ""null""));"
89854,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/ObjectUtilsJUnitTest.java,40,,"    assertFalse(ObjectUtils.equals(""nil"", null));"
89855,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/ObjectUtilsJUnitTest.java,48,,"    assertFalse(ObjectUtils.equals(""test"", ""TEST""));"
89856,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/StringUtilsJUnitTest.java,42,,"@SuppressWarnings(""null"")"
89857,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/SystemPropertyHelperTest.java,34,,"    String gemfirePrefixProperty = ""gemfire."" + restoreSetOperationTransactionBehavior;"
89858,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/SystemPropertyHelperTest.java,35,,"    System.setProperty(gemfirePrefixProperty, ""true"");"
89859,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/SystemPropertyHelperTest.java,39,,"    String geodePrefixProperty = ""geode."" + restoreSetOperationTransactionBehavior;"
89860,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/SystemPropertyHelperTest.java,49,,"    System.setProperty(geodePrefixProperty, ""false"");"
89861,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/lang/ThrowableUtilsTest.java,121,,"    Throwable thrown = catchThrowable(() -> hasCauseMessage(null, ""message""));"
89862,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/logging/CoreLoggingExecutorsTest.java,77,,"    String threadName = ""thread"";"
89863,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,91,,"    properties.setProperty(SSL_ENABLED_COMPONENTS, ""all"");"
89864,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,92,,"    properties.setProperty(SSL_KEYSTORE, ""someKeyStore"");"
89865,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,93,,"    properties.setProperty(SSL_KEYSTORE_PASSWORD, ""keystorePassword"");"
89866,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,94,,"    properties.setProperty(SSL_KEYSTORE_TYPE, ""JKS"");"
89867,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,97,,"    properties.setProperty(SSL_DEFAULT_ALIAS, ""defaultAlias"");"
89868,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLConfigurationFactoryJUnitTest.java,116,,"    properties.setProperty(SSL_PROTOCOLS, ""any"");"
89869,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SSLUtilTest.java,51,,"    when(sslConfig.getProtocolsAsStringArray()).thenReturn(new String[] {""TLSv1.2""});"
89870,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorFactoryJUnitTest.java,369,,"    properties.setProperty(SSL_REQUIRE_AUTHENTICATION, ""true"");"
89871,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorFactoryJUnitTest.java,371,,"        ""TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"");"
89872,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorFactoryJUnitTest.java,372,,"    properties.setProperty(SSL_PROTOCOLS, ""TLSv1.2"");"
89873,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorFactoryJUnitTest.java,374,,"    properties.setProperty(SSL_KEYSTORE_PASSWORD, ""password"");"
89874,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/net/SocketCreatorFactoryJUnitTest.java,375,,"    properties.setProperty(SSL_KEYSTORE_TYPE, ""JKS"");"
89875,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/DataTypeJUnitTest.java,99,,"        ""org.apache.geode.internal.serialization.DataSerializableFixedID:"""
89876,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java,502,,"      fail(""expected IllegalStateException"");"
89877,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/FreeListManagerTest.java,630,,"        .hasMessage(""could not find a slab for addr "" + (address - 1));"
89878,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/MemoryAllocatorJUnitTest.java,332,,"        fail(""expected IllegalStateException"");"
89879,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/MemoryAllocatorJUnitTest.java,357,,"        assertEquals(""Unexpected exception message: "" + expected.getMessage(), true,"
89880,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/OffHeapHelperJUnitTest.java,265,,"    assertThat(""Releasing OFfHeap object is true"", OffHeapHelper.release(storedObject), is(true));"
89881,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/OffHeapStorageJUnitTest.java,96,,"      System.setProperty(GeodeGlossary.GEMFIRE_PREFIX + ""OFF_HEAP_SLAB_SIZE"", ""99"");"
89882,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/OffHeapStoredObjectAddressStackJUnitTest.java,217,,"      stack.logSizes(lw, ""foo"");"
89883,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/RefCountChangeInfoJUnitTest.java,29,,"    String owner1 = new String(""Info1"");"
89884,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/offheap/TinyStoredObjectJUnitTest.java,153,,"    assertEquals(""getSizeInBytes"", 0, address1.getSizeInBytes());"
89885,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/process/ControllableProcessTest.java,58,,"        .hasMessage(""Empty JSON for status is invalid"");"
89886,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/process/ProcessLauncherContextTest.java,120,,"    overriddenDefaults.setProperty(""key"", ""value"");"
89887,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/process/ProcessLauncherContextTest.java,120,,"    overriddenDefaults.setProperty(""key"", ""value"");"
89888,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/process/StartupStatusTest.java,128,,"    String stringId = ""my string"";"
89889,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/process/signal/AbstractSignalNotificationHandlerTest.java,152,,"        .registerListener(mock(SignalListener.class, ""SIGALL""), null))"
89890,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/security/SecurityServiceTest.java,75,,"    this.properties.setProperty(SECURITY_CLIENT_AUTHENTICATOR, ""org.abc.test"");"
89891,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/LocalStatisticsImplTest.java,35,,"        statsFactory.createIntCounter(""intCount"", ""int counter"", ""ints""),"
89892,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/LocalStatisticsImplTest.java,36,,"        statsFactory.createLongCounter(""longCount"", ""long counter"", ""longs"")"
89893,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/LocalStatisticsImplTest.java,38,,"    StatisticsType statisticsType = new StatisticsTypeImpl(""abc"", ""mock stats"", stats);"
89894,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/LocalStatisticsImplTest.java,64,,"        statsFactory.createDoubleCounter(""doubleCount"", ""double counter"", ""doubles"")"
89895,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/OsStatisticsProviderTest.java,30,,"    System.setProperty(""os.name"", ""Linux"");"
89896,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/ResourceInstTest.java,59,,"        new ResourceInst(this.archive1, 0, ""name"", 0, this.resourceType, false);"
89897,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,90,,"        manager.createIntCounter(""ST1_1_name"", ""ST1_1_desc"", ""ST1_1_units"")};"
89898,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,91,,"    StatisticsType ST1 = manager.createType(""ST1_name"", ""ST1_desc"", statsST1);"
89899,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,91,,"    StatisticsType ST1 = manager.createType(""ST1_name"", ""ST1_desc"", statsST1);"
89900,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,92,,"    Statistics st1_1 = manager.createAtomicStatistics(ST1, ""st1_1_text"", 1);"
89901,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,120,,"    assertEquals(""allocatedResourceInstance"", allocatedResourceInstanceInfo.getName());"
89902,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/SampleCollectorTest.java,152,,"        manager.createIntCounter(""ST2_1_name"", ""ST2_1_desc"", ""ST2_1_units"")};"
89903,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/StatisticsRegistryTest.java,365,,"    Statistics atomicStatistics1 = mock(Statistics.class, ""atomic 1"");"
89904,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/StatisticsRegistryTest.java,368,,"    Statistics osStatistics1 = mock(Statistics.class, ""os 1"");"
89905,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/meters/LegacyStatCounterTest.java,44,,"    LegacyStatCounter.builder(""my.meter.name"")"
89906,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/meters/LegacyStatTimerTest.java,53,,"    LegacyStatTimer.builder(""my.meter.name"")"
89907,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/meters/LegacyStatTimerTest.java,125,,"        .as(""underlying timer count"")"
89908,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/statistics/meters/LegacyStatTimerTest.java,129,,"        .as(""underlying timer total time"")"
89909,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/tcp/TCPConduitTest.java,96,,"    doThrow(new IOException(""Cannot form connection to alert listener""))"
89910,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/ArrayUtilsTest.java,45,,"    Object[] arrayOfThree = new Object[] {""test"", ""testing"", ""tested""};"
89911,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/CollectionUtilsJUnitTest.java,101,,"        CollectionUtils.createProperties(Collections.singletonMap(""one"", ""two""));"
89912,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/CollectionUtilsJUnitTest.java,101,,"        CollectionUtils.createProperties(Collections.singletonMap(""one"", ""two""));"
89913,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/CollectionUtilsJUnitTest.java,275,,"    expectedMap.put(""key2"", ""null"");"
89914,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/HostNameTest.java,80,,"    System.setProperty(""os.name"", osName);"
89915,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/IOUtilsJUnitTest.java,77,,"    assertThat(IOUtils.appendToPath(null, ""bin"", ""a.out"")).isEqualTo(toPathname(""bin"", ""a.out""));"
89916,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/IOUtilsJUnitTest.java,77,,"    assertThat(IOUtils.appendToPath(null, ""bin"", ""a.out"")).isEqualTo(toPathname(""bin"", ""a.out""));"
89917,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/IOUtilsJUnitTest.java,101,,"    assertThat(IOUtils.createPath(""path"", ""to"", ""file.test""))"
89918,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/internal/util/concurrent/CompactConcurrentHashSetJUnitTest.java,49,,"      assertTrue(""expected s1 and s2 to be equal"", s1.equals(s2));"
89919,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/DiskBackupStatusTest.java,62,,"    DistributedMember member2 = generateTestMember(""member2"");"
89920,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/FederatingManagerTest.java,218,,"    doThrow(new RegionDestroyedException(""test"", ""monitoringRegion""))"
89921,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/FederatingManagerTest.java,544,,"    RuntimeException exception = new RuntimeException(""startManager failed"");"
89922,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/JmxRmiOpenTypesSerialFilterTest.java,87,,"    String value = ""value-of-property"";"
89923,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/ClusterManagementResultTest.java,53,,"        .setSuccess(true).setMessage(""msg-1""));"
89924,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/ClusterManagementResultTest.java,96,,"    result = new ClusterManagementResult(ERROR, ""message"");"
89925,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,139,,"    groups.add(""cluster"");"
89926,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,153,,"    regionConfig.setName(""region1"");"
89927,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,217,,"    functionResults.add(new RealizationResult().setMemberName(""member1""));"
89928,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,219,,"        new RealizationResult().setMemberName(""member2"").setSuccess(false).setMessage(""failed""));"
89929,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,226,,"    regionConfig.setName(""test"");"
89930,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,268,,"    doReturn(Sets.newHashSet(""cluster"", ""group1"")).when(persistenceService).getGroups();"
89931,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,287,,"    doReturn(Sets.newHashSet(""group1"", ""group2"")).when(persistenceService).getGroups();"
89932,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java,442,,"        service.get(rebalanceOperation, ""456"");"
89933,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/beans/QueryDataFunctionApplyLimitClauseTest.java,55,,"        .isEqualTo(selectQuery + "" LIMIT "" + queryResultSetLimit_100);"
89934,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/ClassNameConverterTest.java,41,,"    properties.put(""field1"", ""value1"");"
89935,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/ClassNameConverterTest.java,43,,"    ClassName className = new ClassName(""xyz"", properties);"
89936,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/GatewayReceiverConverterTest.java,42,,"        Collections.singletonList(new ClassName(""className"", classNameProps)));"
89937,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/GatewayReceiverConverterTest.java,51,,"    assertThat(xml.getSocketBufferSize()).isEqualTo(""1024"");"
89938,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/GatewayReceiverConverterTest.java,52,,"    assertThat(xml.getMaximumTimeBetweenPings()).isEqualTo(""1000"");"
89939,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/IndexConverterTest.java,60,,"          .as(""type"")"
89940,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/PdxConverterTest.java,39,,"    pdx.setDiskStoreName(""test"");"
89941,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/PdxConverterTest.java,41,,"    pdx.setPdxSerializer(new ClassName(""java.lang.String""));"
89942,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,57,,"    config.setName(""test"");"
89943,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,58,,"    config.setRegionAttributes(converter.createRegionAttributesByType(""REPLICATE""));"
89944,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,71,,"    attributesType.setValueConstraint(""foo"");"
89945,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,72,,"    attributesType.setKeyConstraint(""bar"");"
89946,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,73,,"    attributesType.setDiskStoreName(""diskstore"");"
89947,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,248,,"        new RegionAttributesType.ExpirationAttributesType(10, ""destroy"", null, null));"
89948,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,364,,"    properties.setProperty(""key"", ""value"");"
89949,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,364,,"    properties.setProperty(""key"", ""value"");"
89950,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/converters/RegionConverterTest.java,365,,"    eviction.setObjectSizer(new ClassName(""ObjectSizer"", properties));"
89951,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/DeploymentManagerTest.java,70,,"    List<Deployment> result = manager.list(filter, ""some-group"");"
89952,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/IndexConfigManagerTest.java,59,,"          .containsExactlyInAnyOrder(""index1"", ""index2"");"
89953,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/IndexConfigManagerTest.java,59,,"          .containsExactlyInAnyOrder(""index1"", ""index2"");"
89954,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/IndexConfigManagerTest.java,61,,"          .containsExactlyInAnyOrder(""region1"", ""region2"");"
89955,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/IndexConfigManagerTest.java,61,,"          .containsExactlyInAnyOrder(""region1"", ""region2"");"
89956,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/IndexConfigManagerTest.java,115,,"    index.setName(""index3"");"
89957,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/mutators/RegionConfigManagerTest.java,44,,"    manager.checkCompatibility(config1, ""group"", config1);"
89958,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/DeploymentRealizerTest.java,89,,"    deployment.setFile(new File(""/test/test.jar""));"
89959,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/DiskStoreRealizerTest.java,53,,"    String name = ""diskStoreName"";"
89960,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/GatewayReceiverRealizerTest.java,46,,"    when(gatewayReceiver.getBindAddress()).thenReturn(""localhost"");"
89961,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/IndexRealizerTest.java,51,,"    index.setName(""testIndex"");"
89962,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/IndexRealizerTest.java,52,,"    index.setRegionPath(""testRegion"");"
89963,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/IndexRealizerTest.java,53,,"    index.setExpression(""test Expression"");"
89964,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/realizers/RegionConfigRealizerTest.java,56,,"    config.setName(""test"");"
89965,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsJUnitTest.java,127,,"    assertSame(root.getElementsByTagNameNS(cacheNamespace, ""region"").item(0), e1);"
89966,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsJUnitTest.java,165,,"    final Element child = doc.createElement(""child"");"
89967,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsJUnitTest.java,168,,"    final Element childWithNamespace = doc.createElementNS(ns2, ""childWithNamespace"");"
89968,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsJUnitTest.java,245,,"    assertThat(oldRoot.getAttribute(""xsi:schemaLocation"")).isEqualTo(GEMFIRE_SCHEMA_LOCATION);"
89969,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/utils/XmlUtilsJUnitTest.java,247,,"    String version = ""1.0"";"
89970,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,64,,"    when(member1.getName()).thenReturn(""member1"");"
89971,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,67,,"    when(member2.getGroups()).thenReturn(Collections.singletonList(""group1""));"
89972,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,69,,"    when(member2.getName()).thenReturn(""member2"");"
89973,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,72,,"    when(member3.getGroups()).thenReturn(Collections.singletonList(""group2""));"
89974,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,74,,"    when(member3.getName()).thenReturn(""member3"");"
89975,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,78,,"    when(member4.getName()).thenReturn(""member4"");"
89976,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,81,,"    when(member5.getGroups()).thenReturn(Collections.singletonList(""group3""));"
89977,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,82,,"    when(member5.getName()).thenReturn(""member5"");"
89978,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/MemberValidatorTest.java,91,,"        .thenReturn(new HashSet<>(Arrays.asList(""cluster"", ""group1"", ""group2"", ""group3"")));"
89979,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/configuration/validators/RegionConfigValidatorTest.java,100,,"    config.setName(""test"");"
89980,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/operation/OperationHistoryManagerTest.java,96,,"          new OperationState<>(""op-"" + i, null, new Date());"
89981,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/operation/OperationStateTest.java,34,,"    OperationState<?, ?> operationState = new OperationState<>(""opId"", null, null);"
89982,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformerTest.java,83,,"    when(regionMXBean.getMembers()).thenReturn(new String[] {""member1""});"
89983,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/operation/RebalanceOperationPerformerTest.java,84,,"    when(managementService.getDistributedRegionMXBean(SEPARATOR + ""region1""))"
89984,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,70,,"    permission = new ResourcePermission(null, Operation.MANAGE, ""REGIONA"");"
89985,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,86,,"    permission = new ResourcePermission(Resource.DATA, Operation.READ, ""ALL"");"
89986,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,132,,"    permission = new ResourcePermission(""*"", ""READ"");"
89987,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,150,,"    ResourcePermission permission = new ResourcePermission(""DATA"", ""READ"", SEPARATOR + ""regionA"");"
89988,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,150,,"    ResourcePermission permission = new ResourcePermission(""DATA"", ""READ"", SEPARATOR + ""regionA"");"
89989,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,161,,"    assertThat(permission.implies(new ResourcePermission(""DATA"", ""WRITE""))).isTrue();"
89990,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,162,,"    assertThat(permission.implies(new ResourcePermission(""DATA"", ""MANAGE""))).isTrue();"
89991,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/management/internal/security/ResourcePermissionTest.java,163,,"    assertThat(permission.implies(new ResourcePermission(""CLUSTER"", ""READ""))).isTrue();"
89992,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java,160,,"        .counter(""my.meter"");"
89993,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java,250,,"        .hasTag(""member.type"", ""locator"");"
89994,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/InternalDistributedSystemMetricsServiceTest.java,336,,"    @SuppressWarnings(""unchecked"")"
89995,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/NoopMeterRegistryTest.java,69,,"    Id expectedId = new Id(""name"", Tags.of(""key"", ""value""), null, null, GAUGE);"
89996,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/NoopMeterRegistryTest.java,69,,"    Id expectedId = new Id(""name"", Tags.of(""key"", ""value""), null, null, GAUGE);"
89997,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/metrics/internal/NoopMeterRegistryTest.java,69,,"    Id expectedId = new Id(""name"", Tags.of(""key"", ""value""), null, null, GAUGE);"
89998,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/pdx/internal/EnumInfoTest.java,72,,"    assertEquals(""org.apache.geode.pdx.internal.EnumInfoTest$TestEnum"", enumInfo.getClassName());"
89999,./TargetProjects/geode/geode-core/src/test/java/org/apache/geode/pdx/internal/EnumInfoTest.java,94,,"        new EnumInfo(""org.apache.geode.pdx.internal.EnumInfoTest$TestEnum"", ""ONE"", 1);"
