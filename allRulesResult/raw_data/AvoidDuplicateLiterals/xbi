34000,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryLocalEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34001,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryLocalEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34002,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryLocalEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34003,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryLocalEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCountryCode"", java.lang.String.class);"
34004,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryMobileEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""reader"", description=""Create a MobileReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.availablephonenumbercountry.MobileReader reader(String pathCountryCode)"", ""com.twilio.rest.api.v2010.account.availablephonenumbercountry.MobileReader reader(String pathAccountSid, String pathCountryCode)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34005,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryMobileEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34006,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryMobileEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34007,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryMobileEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34008,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryMobileEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCountryCode"", java.lang.String.class);"
34009,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryTollFreeEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""reader"", description=""Create a TollFreeReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.availablephonenumbercountry.TollFreeReader reader(String pathCountryCode)"", ""com.twilio.rest.api.v2010.account.availablephonenumbercountry.TollFreeReader reader(String pathAccountSid, String pathCountryCode)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34010,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryTollFreeEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34011,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryTollFreeEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34012,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryTollFreeEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34013,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/AvailablePhoneNumberCountryTollFreeEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCountryCode"", java.lang.String.class);"
34014,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CallCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.CallCreator creator(com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, String applicationSid)"", ""com.twilio.rest.api.v2010.account.CallCreator creator(com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, com.twilio.type.Twiml twiml)"", ""com.twilio.rest.api.v2010.account.CallCreator creator(com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, java.net.URI url)"", ""com.twilio.rest.api.v2010.account.CallCreator creator(String pathAccountSid, com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, String applicationSid)"", ""com.twilio.rest.api.v2010.account.CallCreator creator(String pathAccountSid, com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, com.twilio.type.Twiml twiml)"", ""com.twilio.rest.api.v2010.account.CallCreator creator(String pathAccountSid, com.twilio.type.Endpoint to, com.twilio.type.Endpoint from, java.net.URI url)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CallDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.CallDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.CallDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CallFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.CallFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.CallFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CallReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.CallReader reader()"", ""com.twilio.rest.api.v2010.account.CallReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CallUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.CallUpdater updater(String pathSid)"", ""com.twilio.rest.api.v2010.account.CallUpdater updater(String pathAccountSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34015,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34016,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,24,,"        map.put(""ApplicationSid"", java.lang.String.class);"
34017,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,25,,"        map.put(""From"", com.twilio.type.Endpoint.class);"
34018,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,26,,"        map.put(""MethodName"", java.lang.String.class);"
34019,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,27,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34020,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,28,,"        map.put(""PathSid"", java.lang.String.class);"
34021,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,30,,"        map.put(""Twiml"", com.twilio.type.Twiml.class);"
34022,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallEndpointConfigurationConfigurer.java,31,,"        map.put(""Url"", java.net.URI.class);"
34023,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a FeedbackCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a FeedbackFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a FeedbackUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34024,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a FeedbackCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a FeedbackFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a FeedbackUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34025,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a FeedbackCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackCreator creator(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a FeedbackFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.FeedbackFetcher fetcher(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a FeedbackUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathCallSid, Integer qualityScore)"", ""com.twilio.rest.api.v2010.account.call.FeedbackUpdater updater(String pathAccountSid, String pathCallSid, Integer qualityScore)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34026,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The call sid that uniquely identifies the call""), @ApiMethod(methodName = ""creator"", description=""The call sid that uniquely identifies the call""), @ApiMethod(methodName = ""fetcher"", description=""The call sid that uniquely identifies the call""), @ApiMethod(methodName = ""fetcher"", description=""The call sid that uniquely identifies the call""), @ApiMethod(methodName = ""updater"", description=""The call sid that uniquely identifies the call""), @ApiMethod(methodName = ""updater"", description=""The call sid that uniquely identifies the call"")})"
34027,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34028,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34029,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34030,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCallSid"", java.lang.String.class);"
34031,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackEndpointConfigurationConfigurer.java,27,,"        map.put(""QualityScore"", java.lang.Integer.class);"
34032,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a FeedbackSummaryCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackSummaryCreator creator(org.joda.time.LocalDate startDate, org.joda.time.LocalDate endDate)"", ""com.twilio.rest.api.v2010.account.call.FeedbackSummaryCreator creator(String pathAccountSid, org.joda.time.LocalDate startDate, org.joda.time.LocalDate endDate)""}), @ApiMethod(methodName = ""deleter"", description=""Create a FeedbackSummaryDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackSummaryDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.call.FeedbackSummaryDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a FeedbackSummaryFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.FeedbackSummaryFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.call.FeedbackSummaryFetcher fetcher(String pathAccountSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34033,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34034,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,24,,"        map.put(""EndDate"", org.joda.time.LocalDate.class);"
34035,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34036,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34037,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34038,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallFeedbackSummaryEndpointConfigurationConfigurer.java,28,,"        map.put(""StartDate"", org.joda.time.LocalDate.class);"
34039,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""Create a NotificationFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.NotificationFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.NotificationFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a NotificationReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.NotificationReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.NotificationReader reader(String pathAccountSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34040,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""Create a NotificationFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.NotificationFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.NotificationFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a NotificationReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.NotificationReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.NotificationReader reader(String pathAccountSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34041,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34042,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34043,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34044,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCallSid"", java.lang.String.class);"
34045,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallNotificationEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34046,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a RecordingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a RecordingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a RecordingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a RecordingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a RecordingUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)"", ""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathAccountSid, String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34047,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a RecordingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a RecordingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a RecordingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a RecordingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a RecordingUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)"", ""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathAccountSid, String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34048,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a RecordingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a RecordingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a RecordingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a RecordingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a RecordingUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)"", ""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathAccountSid, String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34049,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a RecordingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a RecordingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a RecordingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a RecordingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a RecordingUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)"", ""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathAccountSid, String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34050,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a RecordingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingCreator creator(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a RecordingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingDeleter deleter(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a RecordingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathCallSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingFetcher fetcher(String pathAccountSid, String pathCallSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a RecordingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathCallSid)"", ""com.twilio.rest.api.v2010.account.call.RecordingReader reader(String pathAccountSid, String pathCallSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a RecordingUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)"", ""com.twilio.rest.api.v2010.account.call.RecordingUpdater updater(String pathAccountSid, String pathCallSid, String pathSid, com.twilio.rest.api.v2010.account.call.Recording$Status status)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34051,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The SID of the Call to associate the resource with""), @ApiMethod(methodName = ""creator"", description=""The SID of the Call to associate the resource with""), @ApiMethod(methodName = ""deleter"", description=""The Call SID of the resources to delete""), @ApiMethod(methodName = ""deleter"", description=""The SID of the Call to associate the resource with""), @ApiMethod(methodName = ""fetcher"", description=""The Call SID of the resource to fetch""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the Call to associate the resource with""), @ApiMethod(methodName = ""reader"", description=""The Call SID of the resources to read""), @ApiMethod(methodName = ""reader"", description=""The SID of the Call to associate the resource with""), @ApiMethod(methodName = ""updater"", description=""The Call SID of the resource to update""), @ApiMethod(methodName = ""updater"", description=""The SID of the Call to associate the resource with"")})"
34052,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34053,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34054,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34055,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCallSid"", java.lang.String.class);"
34056,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34057,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/CallRecordingEndpointConfigurationConfigurer.java,28,,"        map.put(""Status"", com.twilio.rest.api.v2010.account.call.Recording.Status.class);"
34058,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34059,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34060,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34061,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34062,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ParticipantCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathAccountSid, String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)""}), @ApiMethod(methodName = ""deleter"", description=""Create a ParticipantDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a ParticipantFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a ParticipantReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathConferenceSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathAccountSid, String pathConferenceSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a ParticipantUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34063,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ParticipantCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathAccountSid, String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)""}), @ApiMethod(methodName = ""deleter"", description=""Create a ParticipantDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a ParticipantFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a ParticipantReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathConferenceSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathAccountSid, String pathConferenceSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a ParticipantUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34064,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ParticipantCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathAccountSid, String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)""}), @ApiMethod(methodName = ""deleter"", description=""Create a ParticipantDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a ParticipantFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a ParticipantReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathConferenceSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathAccountSid, String pathConferenceSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a ParticipantUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34065,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ParticipantCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathAccountSid, String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)""}), @ApiMethod(methodName = ""deleter"", description=""Create a ParticipantDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a ParticipantFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a ParticipantReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathConferenceSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathAccountSid, String pathConferenceSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a ParticipantUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34066,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ParticipantCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantCreator creator(String pathAccountSid, String pathConferenceSid, com.twilio.type.PhoneNumber from, com.twilio.type.PhoneNumber to)""}), @ApiMethod(methodName = ""deleter"", description=""Create a ParticipantDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantDeleter deleter(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a ParticipantFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantFetcher fetcher(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a ParticipantReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathConferenceSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantReader reader(String pathAccountSid, String pathConferenceSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a ParticipantUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathConferenceSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.conference.ParticipantUpdater updater(String pathAccountSid, String pathConferenceSid, String pathCallSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34067,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfiguration.java,33,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The SID of the participant's conference""), @ApiMethod(methodName = ""creator"", description=""The SID of the participant's conference""), @ApiMethod(methodName = ""deleter"", description=""The SID of the conference with the participants to delete""), @ApiMethod(methodName = ""deleter"", description=""The SID of the participant's conference""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the conference with the participant to fetch""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the participant's conference""), @ApiMethod(methodName = ""reader"", description=""The SID of the conference with the participants to read""), @ApiMethod(methodName = ""reader"", description=""The SID of the participant's conference""), @ApiMethod(methodName = ""updater"", description=""The SID of the conference with the participant to update""), @ApiMethod(methodName = ""updater"", description=""The SID of the participant's conference"")})"
34068,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34069,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,24,,"        map.put(""From"", com.twilio.type.PhoneNumber.class);"
34070,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34071,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34072,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,27,,"        map.put(""PathCallSid"", java.lang.String.class);"
34073,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConferenceParticipantEndpointConfigurationConfigurer.java,28,,"        map.put(""PathConferenceSid"", java.lang.String.class);"
34074,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConnectAppEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34075,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConnectAppEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34076,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConnectAppEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34077,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ConnectAppEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34078,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IncomingPhoneNumberCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.IncomingPhoneNumberCreator creator(String areaCode)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberCreator creator(com.twilio.type.PhoneNumber phoneNumber)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberCreator creator(String pathAccountSid, String areaCode)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber phoneNumber)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IncomingPhoneNumberDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.IncomingPhoneNumberDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IncomingPhoneNumberFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.IncomingPhoneNumberFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IncomingPhoneNumberReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.IncomingPhoneNumberReader reader()"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IncomingPhoneNumberUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.IncomingPhoneNumberUpdater updater(String pathSid)"", ""com.twilio.rest.api.v2010.account.IncomingPhoneNumberUpdater updater(String pathAccountSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34079,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34080,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,24,,"        map.put(""AreaCode"", java.lang.String.class);"
34081,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34082,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34083,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34084,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java,28,,"        map.put(""PhoneNumber"", com.twilio.type.PhoneNumber.class);"
34085,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberLocalEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34086,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberLocalEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34087,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberLocalEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34088,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberLocalEndpointConfigurationConfigurer.java,26,,"        map.put(""PhoneNumber"", com.twilio.type.PhoneNumber.class);"
34089,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberMobileEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34090,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberMobileEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34091,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberMobileEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34092,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberMobileEndpointConfigurationConfigurer.java,26,,"        map.put(""PhoneNumber"", com.twilio.type.PhoneNumber.class);"
34093,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberTollFreeEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34094,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberTollFreeEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34095,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberTollFreeEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34096,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberTollFreeEndpointConfigurationConfigurer.java,26,,"        map.put(""PhoneNumber"", com.twilio.type.PhoneNumber.class);"
34097,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/KeyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34098,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/KeyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34099,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/KeyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34100,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/KeyEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34101,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a MessageCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, String messagingServiceSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, String messagingServiceSid, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, String messagingServiceSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, String messagingServiceSid, java.util.List<java.net.URI> mediaUrl)""}), @ApiMethod(methodName = ""deleter"", description=""Create a MessageDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.MessageDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.MessageDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a MessageFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.MessageFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.MessageFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MessageReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.MessageReader reader()"", ""com.twilio.rest.api.v2010.account.MessageReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a MessageUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.MessageUpdater updater(String pathSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageUpdater updater(String pathAccountSid, String pathSid, String body)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34102,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a MessageCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, String messagingServiceSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(com.twilio.type.PhoneNumber to, String messagingServiceSid, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, com.twilio.type.PhoneNumber from, java.util.List<java.net.URI> mediaUrl)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, String messagingServiceSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber to, String messagingServiceSid, java.util.List<java.net.URI> mediaUrl)""}), @ApiMethod(methodName = ""deleter"", description=""Create a MessageDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.MessageDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.MessageDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a MessageFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.MessageFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.MessageFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MessageReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.MessageReader reader()"", ""com.twilio.rest.api.v2010.account.MessageReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a MessageUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.MessageUpdater updater(String pathSid, String body)"", ""com.twilio.rest.api.v2010.account.MessageUpdater updater(String pathAccountSid, String pathSid, String body)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34103,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34104,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,24,,"        map.put(""Body"", java.lang.String.class);"
34105,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,25,,"        map.put(""From"", com.twilio.type.PhoneNumber.class);"
34106,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,26,,"        map.put(""MediaUrl"", java.util.List.class);"
34107,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,27,,"        map.put(""MessagingServiceSid"", java.lang.String.class);"
34108,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,28,,"        map.put(""MethodName"", java.lang.String.class);"
34109,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,29,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34110,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,30,,"        map.put(""PathSid"", java.lang.String.class);"
34111,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageEndpointConfigurationConfigurer.java,45,,"        case ""mediaurl"":"
34112,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageFeedbackEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a FeedbackCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.message.FeedbackCreator creator(String pathMessageSid)"", ""com.twilio.rest.api.v2010.account.message.FeedbackCreator creator(String pathAccountSid, String pathMessageSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34113,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageFeedbackEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34114,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageFeedbackEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34115,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageFeedbackEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34116,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageFeedbackEndpointConfigurationConfigurer.java,26,,"        map.put(""PathMessageSid"", java.lang.String.class);"
34117,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a MediaDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a MediaFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MediaReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathMessageSid)"", ""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathAccountSid, String pathMessageSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34118,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a MediaDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a MediaFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MediaReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathMessageSid)"", ""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathAccountSid, String pathMessageSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34119,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a MediaDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaDeleter deleter(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a MediaFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathMessageSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.message.MediaFetcher fetcher(String pathAccountSid, String pathMessageSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MediaReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathMessageSid)"", ""com.twilio.rest.api.v2010.account.message.MediaReader reader(String pathAccountSid, String pathMessageSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34120,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The SID of the Message resource that this Media resource belongs to""), @ApiMethod(methodName = ""deleter"", description=""The SID of the Message resource that this Media resource belongs to""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the Message resource that this Media resource belongs to""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the Message resource that this Media resource belongs to""), @ApiMethod(methodName = ""reader"", description=""The SID of the Message resource that this Media resource belongs to""), @ApiMethod(methodName = ""reader"", description=""The SID of the Message resource that this Media resource belongs to"")})"
34121,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34122,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34123,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34124,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfigurationConfigurer.java,26,,"        map.put(""PathMessageSid"", java.lang.String.class);"
34125,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/MessageMediaEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34126,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewKeyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34127,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewKeyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34128,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewKeyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34129,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewSigningKeyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34130,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewSigningKeyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34131,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NewSigningKeyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34132,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NotificationEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34133,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NotificationEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34134,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NotificationEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34135,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/NotificationEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34136,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/OutgoingCallerIdEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34137,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/OutgoingCallerIdEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34138,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/OutgoingCallerIdEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34139,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/OutgoingCallerIdEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34140,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34141,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueEndpointConfigurationConfigurer.java,24,,"        map.put(""FriendlyName"", java.lang.String.class);"
34142,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34143,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34144,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34145,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""Create a MemberFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathQueueSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathAccountSid, String pathQueueSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MemberReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathQueueSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathAccountSid, String pathQueueSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a MemberUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathQueueSid, String pathCallSid, java.net.URI url)"", ""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathAccountSid, String pathQueueSid, String pathCallSid, java.net.URI url)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34146,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""Create a MemberFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathQueueSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathAccountSid, String pathQueueSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MemberReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathQueueSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathAccountSid, String pathQueueSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a MemberUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathQueueSid, String pathCallSid, java.net.URI url)"", ""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathAccountSid, String pathQueueSid, String pathCallSid, java.net.URI url)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34147,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""Create a MemberFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathQueueSid, String pathCallSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberFetcher fetcher(String pathAccountSid, String pathQueueSid, String pathCallSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a MemberReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathQueueSid)"", ""com.twilio.rest.api.v2010.account.queue.MemberReader reader(String pathAccountSid, String pathQueueSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a MemberUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathQueueSid, String pathCallSid, java.net.URI url)"", ""com.twilio.rest.api.v2010.account.queue.MemberUpdater updater(String pathAccountSid, String pathQueueSid, String pathCallSid, java.net.URI url)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34148,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""fetcher"", description=""The SID of the Queue in which to find the members""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the Queue in which to find the members""), @ApiMethod(methodName = ""reader"", description=""The SID of the Queue in which to find the members""), @ApiMethod(methodName = ""reader"", description=""The SID of the Queue in which to find the members""), @ApiMethod(methodName = ""updater"", description=""The SID of the Queue in which to find the members""), @ApiMethod(methodName = ""updater"", description=""The SID of the Queue in which to find the members"")})"
34149,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34150,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34151,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34152,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,26,,"        map.put(""PathCallSid"", java.lang.String.class);"
34153,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,27,,"        map.put(""PathQueueSid"", java.lang.String.class);"
34154,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/QueueMemberEndpointConfigurationConfigurer.java,28,,"        map.put(""Url"", java.net.URI.class);"
34155,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a AddOnResultDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a AddOnResultFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a AddOnResultReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathReferenceSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathAccountSid, String pathReferenceSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34156,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a AddOnResultDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a AddOnResultFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a AddOnResultReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathReferenceSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathAccountSid, String pathReferenceSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34157,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a AddOnResultDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a AddOnResultFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathReferenceSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a AddOnResultReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathReferenceSid)"", ""com.twilio.rest.api.v2010.account.recording.AddOnResultReader reader(String pathAccountSid, String pathReferenceSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34158,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The SID of the recording to which the result to delete belongs""), @ApiMethod(methodName = ""deleter"", description=""The SID of the recording to which the result to delete belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording to which the result to fetch belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording to which the result to delete belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording to which the result to read belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording to which the result to delete belongs"")})"
34159,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34160,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34161,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34162,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfigurationConfigurer.java,26,,"        map.put(""PathReferenceSid"", java.lang.String.class);"
34163,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34164,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a PayloadDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a PayloadFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a PayloadReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathReferenceSid, String pathAddOnResultSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34165,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a PayloadDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a PayloadFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a PayloadReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathReferenceSid, String pathAddOnResultSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34166,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a PayloadDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadDeleter deleter(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a PayloadFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathReferenceSid, String pathAddOnResultSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadFetcher fetcher(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a PayloadReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathReferenceSid, String pathAddOnResultSid)"", ""com.twilio.rest.api.v2010.account.recording.addonresult.PayloadReader reader(String pathAccountSid, String pathReferenceSid, String pathAddOnResultSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34167,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The SID of the AddOnResult to which the payloads to delete belongs""), @ApiMethod(methodName = ""deleter"", description=""The SID of the AddOnResult to which the payloads to delete belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the AddOnResult to which the payload to fetch belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the AddOnResult to which the payloads to delete belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the AddOnResult to which the payloads to read belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the AddOnResult to which the payloads to delete belongs"")})"
34168,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs""), @ApiMethod(methodName = ""deleter"", description=""The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording to which the AddOnResult resource that contains the payloads to read belongs""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording to which the AddOnResult resource that contains the payloads to delete belongs"")})"
34169,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34170,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34171,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34172,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAddOnResultSid"", java.lang.String.class);"
34173,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,27,,"        map.put(""PathReferenceSid"", java.lang.String.class);"
34174,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingAddOnResultPayloadEndpointConfigurationConfigurer.java,28,,"        map.put(""PathSid"", java.lang.String.class);"
34175,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34176,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34177,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34178,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34179,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a TranscriptionDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a TranscriptionFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a TranscriptionReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathRecordingSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathAccountSid, String pathRecordingSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34180,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a TranscriptionDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a TranscriptionFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a TranscriptionReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathRecordingSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathAccountSid, String pathRecordingSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34181,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""deleter"", description=""Create a TranscriptionDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionDeleter deleter(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a TranscriptionFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathRecordingSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionFetcher fetcher(String pathAccountSid, String pathRecordingSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a TranscriptionReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathRecordingSid)"", ""com.twilio.rest.api.v2010.account.recording.TranscriptionReader reader(String pathAccountSid, String pathRecordingSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34182,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The SID of the recording that created the transcription to delete""), @ApiMethod(methodName = ""deleter"", description=""The SID of the recording that created the transcription to delete""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording that created the transcriptions to fetch""), @ApiMethod(methodName = ""fetcher"", description=""The SID of the recording that created the transcription to delete""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording that created the transcriptions to read""), @ApiMethod(methodName = ""reader"", description=""The SID of the recording that created the transcription to delete"")})"
34183,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34184,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34185,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34186,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfigurationConfigurer.java,26,,"        map.put(""PathRecordingSid"", java.lang.String.class);"
34187,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/RecordingTranscriptionEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34188,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ShortCodeEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34189,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ShortCodeEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34190,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ShortCodeEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34191,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ShortCodeEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34192,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SigningKeyEndpointConfiguration.java,24,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""deleter"", description=""The account_sid""), @ApiMethod(methodName = ""fetcher"", description=""The account_sid""), @ApiMethod(methodName = ""reader"", description=""The account_sid""), @ApiMethod(methodName = ""updater"", description=""The account_sid"")})"
34193,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SigningKeyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34194,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SigningKeyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34195,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SigningKeyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34196,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SigningKeyEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34197,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathCredentialListSid, String username, String password)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathAccountSid, String pathCredentialListSid, String username, String password)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathCredentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathAccountSid, String pathCredentialListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34198,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathCredentialListSid, String username, String password)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathAccountSid, String pathCredentialListSid, String username, String password)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathCredentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathAccountSid, String pathCredentialListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34199,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathCredentialListSid, String username, String password)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathAccountSid, String pathCredentialListSid, String username, String password)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathCredentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathAccountSid, String pathCredentialListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34200,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathCredentialListSid, String username, String password)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathAccountSid, String pathCredentialListSid, String username, String password)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathCredentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathAccountSid, String pathCredentialListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34201,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathCredentialListSid, String username, String password)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialCreator creator(String pathAccountSid, String pathCredentialListSid, String username, String password)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialDeleter deleter(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialFetcher fetcher(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathCredentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialReader reader(String pathAccountSid, String pathCredentialListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathCredentialListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.credentiallist.CredentialUpdater updater(String pathAccountSid, String pathCredentialListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34202,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""deleter"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""fetcher"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""reader"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""updater"", description=""The unique id of the Account that is responsible for this resource"")})"
34203,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique id that identifies the credential list to include the created credential""), @ApiMethod(methodName = ""creator"", description=""The unique id that identifies the credential list to include the created credential""), @ApiMethod(methodName = ""deleter"", description=""The unique id that identifies the credential list that contains the desired credentials""), @ApiMethod(methodName = ""deleter"", description=""The unique id that identifies the credential list to include the created credential""), @ApiMethod(methodName = ""fetcher"", description=""The unique id that identifies the credential list that contains the desired credential""), @ApiMethod(methodName = ""fetcher"", description=""The unique id that identifies the credential list to include the created credential""), @ApiMethod(methodName = ""reader"", description=""The unique id that identifies the credential list that contains the desired credentials""), @ApiMethod(methodName = ""reader"", description=""The unique id that identifies the credential list to include the created credential""), @ApiMethod(methodName = ""updater"", description=""The unique id that identifies the credential list that includes this credential""), @ApiMethod(methodName = ""updater"", description=""The unique id that identifies the credential list to include the created credential"")})"
34204,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34205,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34206,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,25,,"        map.put(""Password"", java.lang.String.class);"
34207,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34208,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,27,,"        map.put(""PathCredentialListSid"", java.lang.String.class);"
34209,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,28,,"        map.put(""PathSid"", java.lang.String.class);"
34210,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialEndpointConfigurationConfigurer.java,29,,"        map.put(""Username"", java.lang.String.class);"
34211,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialListCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.CredentialListCreator creator(String friendlyName)"", ""com.twilio.rest.api.v2010.account.sip.CredentialListCreator creator(String pathAccountSid, String friendlyName)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialListDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.CredentialListDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.CredentialListDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialListFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.CredentialListFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.CredentialListFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialListReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.CredentialListReader reader()"", ""com.twilio.rest.api.v2010.account.sip.CredentialListReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a CredentialListUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.CredentialListUpdater updater(String pathSid, String friendlyName)"", ""com.twilio.rest.api.v2010.account.sip.CredentialListUpdater updater(String pathAccountSid, String pathSid, String friendlyName)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34212,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""deleter"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""fetcher"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""reader"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""updater"", description=""The unique id of the Account that is responsible for this resource"")})"
34213,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34214,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfigurationConfigurer.java,24,,"        map.put(""FriendlyName"", java.lang.String.class);"
34215,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34216,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34217,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipCredentialListEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34218,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathDomainSid, String credentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathAccountSid, String pathDomainSid, String credentialListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34219,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathDomainSid, String credentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathAccountSid, String pathDomainSid, String credentialListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34220,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathDomainSid, String credentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathAccountSid, String pathDomainSid, String credentialListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34221,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a CredentialListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathDomainSid, String credentialListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingCreator creator(String pathAccountSid, String pathDomainSid, String credentialListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a CredentialListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a CredentialListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a CredentialListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.CredentialListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34222,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""deleter"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""fetcher"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""reader"", description=""The unique sid that identifies this account"")})"
34223,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""A string that identifies the SIP Domain for which the CredentialList resource will be mapped""), @ApiMethod(methodName = ""creator"", description=""A string that identifies the SIP Domain for which the CredentialList resource will be mapped""), @ApiMethod(methodName = ""deleter"", description=""A string that identifies the SIP Domain that includes the resource to delete""), @ApiMethod(methodName = ""deleter"", description=""A string that identifies the SIP Domain for which the CredentialList resource will be mapped""), @ApiMethod(methodName = ""fetcher"", description=""A string that identifies the SIP Domain that includes the resource to fetch""), @ApiMethod(methodName = ""fetcher"", description=""A string that identifies the SIP Domain for which the CredentialList resource will be mapped""), @ApiMethod(methodName = ""reader"", description=""A string that identifies the SIP Domain that includes the resource to read""), @ApiMethod(methodName = ""reader"", description=""A string that identifies the SIP Domain for which the CredentialList resource will be mapped"")})"
34224,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34225,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,24,,"        map.put(""CredentialListSid"", java.lang.String.class);"
34226,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34227,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34228,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,27,,"        map.put(""PathDomainSid"", java.lang.String.class);"
34229,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainCredentialListMappingEndpointConfigurationConfigurer.java,28,,"        map.put(""PathSid"", java.lang.String.class);"
34230,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34231,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainEndpointConfigurationConfigurer.java,24,,"        map.put(""DomainName"", java.lang.String.class);"
34232,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34233,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34234,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34235,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAccessControlListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathDomainSid, String ipAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathAccountSid, String pathDomainSid, String ipAccessControlListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAccessControlListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAccessControlListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAccessControlListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34236,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAccessControlListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathDomainSid, String ipAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathAccountSid, String pathDomainSid, String ipAccessControlListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAccessControlListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAccessControlListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAccessControlListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34237,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAccessControlListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathDomainSid, String ipAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathAccountSid, String pathDomainSid, String ipAccessControlListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAccessControlListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAccessControlListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAccessControlListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34238,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAccessControlListMappingCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathDomainSid, String ipAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingCreator creator(String pathAccountSid, String pathDomainSid, String ipAccessControlListSid)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAccessControlListMappingDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingDeleter deleter(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAccessControlListMappingFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathDomainSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingFetcher fetcher(String pathAccountSid, String pathDomainSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAccessControlListMappingReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathDomainSid)"", ""com.twilio.rest.api.v2010.account.sip.domain.IpAccessControlListMappingReader reader(String pathAccountSid, String pathDomainSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34239,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""deleter"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""fetcher"", description=""The unique id of the Account that is responsible for this resource""), @ApiMethod(methodName = ""reader"", description=""The unique id of the Account that is responsible for this resource"")})"
34240,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""creator"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""deleter"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""deleter"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""fetcher"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""fetcher"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""reader"", description=""A string that uniquely identifies the SIP Domain""), @ApiMethod(methodName = ""reader"", description=""A string that uniquely identifies the SIP Domain"")})"
34241,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34242,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,24,,"        map.put(""IpAccessControlListSid"", java.lang.String.class);"
34243,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34244,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34245,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,27,,"        map.put(""PathDomainSid"", java.lang.String.class);"
34246,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipDomainIpAccessControlListMappingEndpointConfigurationConfigurer.java,28,,"        map.put(""PathSid"", java.lang.String.class);"
34247,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAccessControlListCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.IpAccessControlListCreator creator(String friendlyName)"", ""com.twilio.rest.api.v2010.account.sip.IpAccessControlListCreator creator(String pathAccountSid, String friendlyName)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAccessControlListDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.IpAccessControlListDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.IpAccessControlListDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAccessControlListFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.IpAccessControlListFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.IpAccessControlListFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAccessControlListReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.IpAccessControlListReader reader()"", ""com.twilio.rest.api.v2010.account.sip.IpAccessControlListReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAccessControlListUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.IpAccessControlListUpdater updater(String pathSid, String friendlyName)"", ""com.twilio.rest.api.v2010.account.sip.IpAccessControlListUpdater updater(String pathAccountSid, String pathSid, String friendlyName)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34248,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfiguration.java,27,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""deleter"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""fetcher"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""reader"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""updater"", description=""The unique sid that identifies this account"")})"
34249,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34250,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfigurationConfigurer.java,24,,"        map.put(""FriendlyName"", java.lang.String.class);"
34251,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34252,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34253,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34254,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAddressCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathIpAccessControlListSid, String friendlyName, String ipAddress)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathAccountSid, String pathIpAccessControlListSid, String friendlyName, String ipAddress)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAddressDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAddressFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAddressReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathIpAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathAccountSid, String pathIpAccessControlListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAddressUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34255,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAddressCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathIpAccessControlListSid, String friendlyName, String ipAddress)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathAccountSid, String pathIpAccessControlListSid, String friendlyName, String ipAddress)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAddressDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAddressFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAddressReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathIpAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathAccountSid, String pathIpAccessControlListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAddressUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34256,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAddressCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathIpAccessControlListSid, String friendlyName, String ipAddress)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathAccountSid, String pathIpAccessControlListSid, String friendlyName, String ipAddress)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAddressDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAddressFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAddressReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathIpAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathAccountSid, String pathIpAccessControlListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAddressUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34257,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAddressCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathIpAccessControlListSid, String friendlyName, String ipAddress)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathAccountSid, String pathIpAccessControlListSid, String friendlyName, String ipAddress)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAddressDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAddressFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAddressReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathIpAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathAccountSid, String pathIpAccessControlListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAddressUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34258,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a IpAddressCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathIpAccessControlListSid, String friendlyName, String ipAddress)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressCreator creator(String pathAccountSid, String pathIpAccessControlListSid, String friendlyName, String ipAddress)""}), @ApiMethod(methodName = ""deleter"", description=""Create a IpAddressDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressDeleter deleter(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a IpAddressFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressFetcher fetcher(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a IpAddressReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathIpAccessControlListSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressReader reader(String pathAccountSid, String pathIpAccessControlListSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a IpAddressUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathIpAccessControlListSid, String pathSid)"", ""com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist.IpAddressUpdater updater(String pathAccountSid, String pathIpAccessControlListSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34259,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,30,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""deleter"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""fetcher"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""reader"", description=""The unique sid that identifies this account""), @ApiMethod(methodName = ""updater"", description=""The unique sid that identifies this account"")})"
34260,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfiguration.java,33,,"    @ApiParam(optional = false, apiMethods = {@ApiMethod(methodName = ""creator"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource""), @ApiMethod(methodName = ""creator"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource""), @ApiMethod(methodName = ""deleter"", description=""The IpAccessControlList Sid that identifies the IpAddress resources to delete""), @ApiMethod(methodName = ""deleter"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource""), @ApiMethod(methodName = ""fetcher"", description=""The IpAccessControlList Sid that identifies the IpAddress resources to fetch""), @ApiMethod(methodName = ""fetcher"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource""), @ApiMethod(methodName = ""reader"", description=""The IpAccessControlList Sid that identifies the IpAddress resources to read""), @ApiMethod(methodName = ""reader"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource""), @ApiMethod(methodName = ""updater"", description=""The IpAccessControlList Sid that identifies the IpAddress resources to update""), @ApiMethod(methodName = ""updater"", description=""The IpAccessControlList Sid with which to associate the created IpAddress resource"")})"
34261,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34262,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,24,,"        map.put(""FriendlyName"", java.lang.String.class);"
34263,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,25,,"        map.put(""IpAddress"", java.lang.String.class);"
34264,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,26,,"        map.put(""MethodName"", java.lang.String.class);"
34265,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,27,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34266,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,28,,"        map.put(""PathIpAccessControlListSid"", java.lang.String.class);"
34267,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/SipIpAccessControlListIpAddressEndpointConfigurationConfigurer.java,29,,"        map.put(""PathSid"", java.lang.String.class);"
34268,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TokenEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34269,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TokenEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34270,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TokenEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34271,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TranscriptionEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34272,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TranscriptionEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34273,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TranscriptionEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34274,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TranscriptionEndpointConfigurationConfigurer.java,26,,"        map.put(""PathSid"", java.lang.String.class);"
34275,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,23,,"        map.put(""configuration"", org.apache.camel.component.twilio.TwilioConfiguration.class);"
34276,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,24,,"        map.put(""bridgeErrorHandler"", boolean.class);"
34277,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,25,,"        map.put(""lazyStartProducer"", boolean.class);"
34278,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,26,,"        map.put(""autowiredEnabled"", boolean.class);"
34279,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,27,,"        map.put(""restClient"", com.twilio.http.TwilioRestClient.class);"
34280,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,28,,"        map.put(""accountSid"", java.lang.String.class);"
34281,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,29,,"        map.put(""password"", java.lang.String.class);"
34282,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioComponentConfigurer.java,30,,"        map.put(""username"", java.lang.String.class);"
34283,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34284,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34285,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,25,,"        map.put(""inBody"", java.lang.String.class);"
34286,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,26,,"        map.put(""bridgeErrorHandler"", boolean.class);"
34287,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,27,,"        map.put(""sendEmptyMessageWhenIdle"", boolean.class);"
34288,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,28,,"        map.put(""exceptionHandler"", org.apache.camel.spi.ExceptionHandler.class);"
34289,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,29,,"        map.put(""exchangePattern"", org.apache.camel.ExchangePattern.class);"
34290,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,30,,"        map.put(""pollStrategy"", org.apache.camel.spi.PollingConsumerPollStrategy.class);"
34291,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,31,,"        map.put(""lazyStartProducer"", boolean.class);"
34292,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,32,,"        map.put(""backoffErrorThreshold"", int.class);"
34293,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,33,,"        map.put(""backoffIdleThreshold"", int.class);"
34294,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,34,,"        map.put(""backoffMultiplier"", int.class);"
34295,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,35,,"        map.put(""delay"", long.class);"
34296,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,36,,"        map.put(""greedy"", boolean.class);"
34297,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,37,,"        map.put(""initialDelay"", long.class);"
34298,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,38,,"        map.put(""repeatCount"", long.class);"
34299,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,39,,"        map.put(""runLoggingLevel"", org.apache.camel.LoggingLevel.class);"
34300,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,40,,"        map.put(""scheduledExecutorService"", java.util.concurrent.ScheduledExecutorService.class);"
34301,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,41,,"        map.put(""scheduler"", java.lang.Object.class);"
34302,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,42,,"        map.put(""schedulerProperties"", java.util.Map.class);"
34303,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,43,,"        map.put(""startScheduler"", boolean.class);"
34304,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,44,,"        map.put(""timeUnit"", java.util.concurrent.TimeUnit.class);"
34305,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,45,,"        map.put(""useFixedDelay"", boolean.class);"
34306,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/TwilioEndpointConfigurer.java,82,,"        case ""schedulerproperties"":"
34307,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordAllTimeEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34308,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordAllTimeEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34309,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordAllTimeEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34310,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordDailyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34311,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordDailyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34312,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordDailyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34313,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34314,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34315,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34316,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordLastMonthEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34317,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordLastMonthEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34318,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordLastMonthEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34319,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordMonthlyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34320,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordMonthlyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34321,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordMonthlyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34322,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordThisMonthEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34323,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordThisMonthEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34324,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordThisMonthEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34325,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordTodayEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34326,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordTodayEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34327,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordTodayEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34328,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYearlyEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34329,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYearlyEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34330,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYearlyEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34331,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYesterdayEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34332,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYesterdayEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34333,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageRecordYesterdayEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34334,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a TriggerCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.usage.TriggerCreator creator(java.net.URI callbackUrl, String triggerValue, com.twilio.rest.api.v2010.account.usage.Trigger$UsageCategory usageCategory)"", ""com.twilio.rest.api.v2010.account.usage.TriggerCreator creator(String pathAccountSid, java.net.URI callbackUrl, String triggerValue, com.twilio.rest.api.v2010.account.usage.Trigger$UsageCategory usageCategory)""}), @ApiMethod(methodName = ""deleter"", description=""Create a TriggerDeleter to execute delete"", signatures={""com.twilio.rest.api.v2010.account.usage.TriggerDeleter deleter(String pathSid)"", ""com.twilio.rest.api.v2010.account.usage.TriggerDeleter deleter(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""fetcher"", description=""Create a TriggerFetcher to execute fetch"", signatures={""com.twilio.rest.api.v2010.account.usage.TriggerFetcher fetcher(String pathSid)"", ""com.twilio.rest.api.v2010.account.usage.TriggerFetcher fetcher(String pathAccountSid, String pathSid)""}), @ApiMethod(methodName = ""reader"", description=""Create a TriggerReader to execute read"", signatures={""com.twilio.rest.api.v2010.account.usage.TriggerReader reader()"", ""com.twilio.rest.api.v2010.account.usage.TriggerReader reader(String pathAccountSid)""}), @ApiMethod(methodName = ""updater"", description=""Create a TriggerUpdater to execute update"", signatures={""com.twilio.rest.api.v2010.account.usage.TriggerUpdater updater(String pathSid)"", ""com.twilio.rest.api.v2010.account.usage.TriggerUpdater updater(String pathAccountSid, String pathSid)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34335,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34336,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,24,,"        map.put(""CallbackUrl"", java.net.URI.class);"
34337,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,25,,"        map.put(""MethodName"", java.lang.String.class);"
34338,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,26,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34339,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,27,,"        map.put(""PathSid"", java.lang.String.class);"
34340,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,28,,"        map.put(""TriggerValue"", java.lang.String.class);"
34341,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/UsageTriggerEndpointConfigurationConfigurer.java,29,,"        map.put(""UsageCategory"", com.twilio.rest.api.v2010.account.usage.Trigger.UsageCategory.class);"
34342,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ValidationRequestEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""creator"", description=""Create a ValidationRequestCreator to execute create"", signatures={""com.twilio.rest.api.v2010.account.ValidationRequestCreator creator(com.twilio.type.PhoneNumber phoneNumber)"", ""com.twilio.rest.api.v2010.account.ValidationRequestCreator creator(String pathAccountSid, com.twilio.type.PhoneNumber phoneNumber)""}), }, aliases = {""^creator$=create"", ""^deleter$=delete"", ""^fetcher$=fetch"", ""^reader$=read"", ""^updater$=update""})"
34343,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ValidationRequestEndpointConfigurationConfigurer.java,23,,"        map.put(""ApiName"", org.apache.camel.component.twilio.internal.TwilioApiName.class);"
34344,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ValidationRequestEndpointConfigurationConfigurer.java,24,,"        map.put(""MethodName"", java.lang.String.class);"
34345,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ValidationRequestEndpointConfigurationConfigurer.java,25,,"        map.put(""PathAccountSid"", java.lang.String.class);"
34346,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/ValidationRequestEndpointConfigurationConfigurer.java,26,,"        map.put(""PhoneNumber"", com.twilio.type.PhoneNumber.class);"
34347,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/AddressApiMethod.java,36,,"        arg(""pathAccountSid"", String.class),"
34348,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/AddressApiMethod.java,47,,"        arg(""pathSid"", String.class)),"
34349,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ApplicationApiMethod.java,30,,"        arg(""pathAccountSid"", String.class)),"
34350,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ApplicationApiMethod.java,35,,"        arg(""pathSid"", String.class)),"
34351,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallApiMethod.java,25,,"        ""creator"","
34352,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallApiMethod.java,27,,"        arg(""from"", com.twilio.type.Endpoint.class),"
34353,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallApiMethod.java,47,,"        arg(""pathAccountSid"", String.class),"
34354,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallApiMethod.java,71,,"        arg(""pathSid"", String.class)),"
34355,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallFeedbackApiMethod.java,26,,"        arg(""pathCallSid"", String.class),"
34356,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallFeedbackApiMethod.java,27,,"        arg(""qualityScore"", Integer.class)),"
34357,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallFeedbackSummaryApiMethod.java,39,,"        arg(""pathSid"", String.class)),"
34358,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallNotificationApiMethod.java,26,,"        arg(""pathCallSid"", String.class),"
34359,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallRecordingApiMethod.java,26,,"        arg(""pathCallSid"", String.class)),"
34360,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallRecordingApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34361,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/CallRecordingApiMethod.java,38,,"        arg(""pathSid"", String.class)),"
34362,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConferenceApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34363,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConferenceParticipantApiMethod.java,26,,"        arg(""pathConferenceSid"", String.class),"
34364,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConferenceParticipantApiMethod.java,33,,"        arg(""pathAccountSid"", String.class),"
34365,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConferenceParticipantApiMethod.java,42,,"        arg(""pathCallSid"", String.class)),"
34366,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConnectAppApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34367,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ConnectAppApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34368,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/IncomingPhoneNumberApiMethod.java,25,,"        ""creator"","
34369,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/IncomingPhoneNumberApiMethod.java,36,,"        arg(""pathAccountSid"", String.class),"
34370,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/IncomingPhoneNumberApiMethod.java,48,,"        arg(""pathSid"", String.class)),"
34371,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/KeyApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34372,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/KeyApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34373,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,25,,"        ""creator"","
34374,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,27,,"        arg(""from"", com.twilio.type.PhoneNumber.class),"
34375,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,28,,"        arg(""body"", String.class)),"
34376,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,35,,"        arg(""mediaUrl"", java.util.List.class)),"
34377,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,41,,"        arg(""messagingServiceSid"", String.class),"
34378,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,54,,"        arg(""pathAccountSid"", String.class),"
34379,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageApiMethod.java,86,,"        arg(""pathSid"", String.class)),"
34380,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageMediaApiMethod.java,26,,"        arg(""pathMessageSid"", String.class),"
34381,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/MessageMediaApiMethod.java,27,,"        arg(""pathSid"", String.class)),"
34382,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/OutgoingCallerIdApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34383,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/OutgoingCallerIdApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34384,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/QueueApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34385,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/QueueApiMethod.java,37,,"        arg(""pathSid"", String.class)),"
34386,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/QueueMemberApiMethod.java,26,,"        arg(""pathQueueSid"", String.class),"
34387,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/QueueMemberApiMethod.java,27,,"        arg(""pathCallSid"", String.class)),"
34388,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingAddOnResultApiMethod.java,26,,"        arg(""pathReferenceSid"", String.class),"
34389,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingAddOnResultApiMethod.java,27,,"        arg(""pathSid"", String.class)),"
34390,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingAddOnResultPayloadApiMethod.java,26,,"        arg(""pathReferenceSid"", String.class),"
34391,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingAddOnResultPayloadApiMethod.java,27,,"        arg(""pathAddOnResultSid"", String.class),"
34392,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingAddOnResultPayloadApiMethod.java,28,,"        arg(""pathSid"", String.class)),"
34393,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34394,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingTranscriptionApiMethod.java,26,,"        arg(""pathRecordingSid"", String.class),"
34395,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/RecordingTranscriptionApiMethod.java,27,,"        arg(""pathSid"", String.class)),"
34396,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/ShortCodeApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34397,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SigningKeyApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34398,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SigningKeyApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34399,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialApiMethod.java,26,,"        arg(""pathCredentialListSid"", String.class),"
34400,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialApiMethod.java,33,,"        arg(""pathAccountSid"", String.class),"
34401,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialApiMethod.java,42,,"        arg(""pathSid"", String.class)),"
34402,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialListApiMethod.java,26,,"        arg(""friendlyName"", String.class)),"
34403,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialListApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34404,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipCredentialListApiMethod.java,37,,"        arg(""pathSid"", String.class)),"
34405,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34406,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainApiMethod.java,37,,"        arg(""pathSid"", String.class)),"
34407,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainCredentialListMappingApiMethod.java,26,,"        arg(""pathDomainSid"", String.class),"
34408,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainCredentialListMappingApiMethod.java,32,,"        arg(""pathAccountSid"", String.class),"
34409,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainCredentialListMappingApiMethod.java,40,,"        arg(""pathSid"", String.class)),"
34410,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainIpAccessControlListMappingApiMethod.java,26,,"        arg(""pathDomainSid"", String.class),"
34411,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainIpAccessControlListMappingApiMethod.java,32,,"        arg(""pathAccountSid"", String.class),"
34412,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipDomainIpAccessControlListMappingApiMethod.java,40,,"        arg(""pathSid"", String.class)),"
34413,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListApiMethod.java,26,,"        arg(""friendlyName"", String.class)),"
34414,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListApiMethod.java,31,,"        arg(""pathAccountSid"", String.class),"
34415,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListApiMethod.java,37,,"        arg(""pathSid"", String.class)),"
34416,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListIpAddressApiMethod.java,26,,"        arg(""pathIpAccessControlListSid"", String.class),"
34417,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListIpAddressApiMethod.java,33,,"        arg(""pathAccountSid"", String.class),"
34418,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/SipIpAccessControlListIpAddressApiMethod.java,42,,"        arg(""pathSid"", String.class)),"
34419,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TranscriptionApiMethod.java,26,,"        arg(""pathSid"", String.class)),"
34420,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,90,,"        aliases.put(""^creator$"", ""create"");"
34421,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,90,,"        aliases.put(""^creator$"", ""create"");"
34422,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,91,,"        aliases.put(""^deleter$"", ""delete"");"
34423,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,91,,"        aliases.put(""^deleter$"", ""delete"");"
34424,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,92,,"        aliases.put(""^fetcher$"", ""fetch"");"
34425,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,92,,"        aliases.put(""^fetcher$"", ""fetch"");"
34426,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,93,,"        aliases.put(""^reader$"", ""read"");"
34427,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,93,,"        aliases.put(""^reader$"", ""read"");"
34428,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,94,,"        aliases.put(""^updater$"", ""update"");"
34429,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/TwilioApiCollection.java,94,,"        aliases.put(""^updater$"", ""update"");"
34430,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/UsageTriggerApiMethod.java,33,,"        arg(""pathAccountSid"", String.class),"
34431,./TargetProjects/camel/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/internal/UsageTriggerApiMethod.java,41,,"        arg(""pathSid"", String.class)),"
34432,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/directmessage/TwitterDirectMessageEndpointConfigurer.java,81,,"        case ""schedulerproperties"":"
34433,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/directmessage/TwitterDirectMessageEndpointConfigurer.java,82,,"        case ""schedulerProperties"": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;"
34434,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/search/TwitterSearchEndpointConfigurer.java,81,,"        case ""schedulerproperties"":"
34435,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/search/TwitterSearchEndpointConfigurer.java,82,,"        case ""schedulerProperties"": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;"
34436,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/timeline/TwitterTimelineEndpointConfigurer.java,82,,"        case ""schedulerproperties"":"
34437,./TargetProjects/camel/components/camel-twitter/src/generated/java/org/apache/camel/component/twitter/timeline/TwitterTimelineEndpointConfigurer.java,83,,"        case ""schedulerProperties"": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;"
34438,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/AbstractTwitterComponent.java,31,,"    @Metadata(label = ""security"", secret = true)"
34439,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/AbstractTwitterComponent.java,39,,"    @Metadata(label = ""proxy"")"
34440,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterConfiguration.java,33,,"    @UriParam(label = ""security"", secret = true)"
34441,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterConfiguration.java,41,,"    @UriParam(label = ""consumer,filter"")"
34442,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterConfiguration.java,55,,"    @UriParam(label = ""proxy"")"
34443,./TargetProjects/camel/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/TwitterConfiguration.java,63,,"    @UriParam(label = ""consumer,advanced"")"
34444,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/CamelTwitterITSupport.java,46,,"        addProperty(properties, ""consumer.key"", ""CAMEL_TWITTER_CONSUMER_KEY"");"
34445,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/CamelTwitterITSupport.java,47,,"        addProperty(properties, ""consumer.secret"", ""CAMEL_TWITTER_CONSUMER_SECRET"");"
34446,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/CamelTwitterITSupport.java,48,,"        addProperty(properties, ""access.token"", ""CAMEL_TWITTER_ACCESS_TOKEN"");"
34447,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/CamelTwitterITSupport.java,49,,"        addProperty(properties, ""access.token.secret"", ""CAMEL_TWITTER_ACCESS_TOKE_SECRET"");"
34448,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/SearchByExchangeDirectIT.java,53,,"        MockEndpoint mock = getMockEndpoint(""mock:result"");"
34449,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/SearchByExchangeDirectIT.java,58,,"            log.info(""Tweet: "" + e.getIn().getBody(String.class));"
34450,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/SearchByExchangeDirectIT.java,64,,"        templateHeader.sendBodyAndHeader(null, TwitterConstants.TWITTER_KEYWORDS, ""java"");"
34451,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/UriConfigurationTest.java,38,,"        assertTrue(endpoint instanceof TwitterSearchEndpoint, ""Endpoint not a TwitterSearchEndpoint: "" + endpoint);"
34452,./TargetProjects/camel/components/camel-twitter/src/test/java/org/apache/camel/component/twitter/UriConfigurationTest.java,94,,"        assertTrue(endpoint instanceof TwitterTimelineEndpoint, ""Endpoint not a TwitterTimelineEndpoint: "" + endpoint);"
34453,./TargetProjects/camel/components/camel-undertow/src/generated/java/org/apache/camel/component/undertow/UndertowEndpointConfigurer.java,53,,"        case ""options"": target.setOptions(property(camelContext, java.util.Map.class, value)); return true;"
34454,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHost.java,102,,"            LOG.info(""Starting Undertow server on {}://{}:{}"", key.getSslContext() != null ? ""https"" : ""http"", key.getHost(),"
34455,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHost.java,102,,"            LOG.info(""Starting Undertow server on {}://{}:{}"", key.getSslContext() != null ? ""https"" : ""http"", key.getHost(),"
34456,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java,228,,"                if (value != null && value.trim().startsWith(""Basic"")) {"
34457,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java,78,,"    @Metadata(label = ""security"")"
34458,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponentVerifierExtension.java,71,,"        final boolean isRest = verifyParams.entrySet().stream().anyMatch(e -> e.getKey().startsWith(""rest.""));"
34459,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponentVerifierExtension.java,81,,"            verifyParams.put(""httpURI"", httpUri);"
34460,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,77,,"    @UriParam(label = ""common"", defaultValue = ""false"")"
34461,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,85,,"    @UriParam(label = ""security"")"
34462,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,87,,"    @UriParam(label = ""consumer"")"
34463,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,93,,"    @UriParam(label = ""producer"", defaultValue = ""true"")"
34464,./TargetProjects/camel/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java,93,,"    @UriParam(label = ""producer"", defaultValue = ""true"")"
34465,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/MultiPartFormTest.java,43,,"                .addTextBody(""comment"", ""A binary file of some kind"")"
34466,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowComponentVerifierExtensionTest.java,34,,"        Component component = context().getComponent(""undertow"");"
34467,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowComponentVerifierExtensionTest.java,39,,"        parameters.put(""httpURI"", ""http://localhost:"" + getPort());"
34468,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowComponentVerifierTest.java,33,,"        UndertowComponent component = context().getComponent(""undertow"", UndertowComponent.class);"
34469,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowComponentVerifierTest.java,37,,"        parameters.put(""httpURI"", ""http://localhost:"" + getPort());"
34470,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java,46,,"            template.requestBody(""undertow:http://localhost:{{port}}/foo"", null, String.class);"
34471,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerUnregisterTest.java,57,,"        mockFoo.expectedBodiesReceived(""test"");"
34472,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHandlersSpringTest.java,64,,"        mockEndpoint.expectedBodiesReceived(""Hello World"");"
34473,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHeaderTest.java,29,,"        getMockEndpoint(""mock:input"").expectedMessageCount(1);"
34474,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHeaderTest.java,32,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_URL, ""http://localhost:"" + getPort() + ""/headers"");"
34475,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHeaderTest.java,32,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_URL, ""http://localhost:"" + getPort() + ""/headers"");"
34476,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHeaderTest.java,45,,"        getMockEndpoint(""mock:input"").expectedBodiesReceived(""Hello World"");"
34477,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerSessionTest.java,47,,"        getMockEndpoint(""mock:result"").expectedBodiesReceived(""New New World"", ""New New World"");"
34478,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerSessionTest.java,48,,"        template.sendBody(""direct:start"", ""World"");"
34479,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerSessionTest.java,75,,"        return ""undertow:"" + getTestServerEndpointSessionUrl() + ""?sessionSupport=true"";"
34480,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java,29,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""GET"");"
34481,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java,32,,"        assertEquals(""Bye World"", out);"
34482,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java,39,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");"
34483,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProxyPreserveHostTest.java,30,,"        String actual = template.requestBody(""undertow:http://localhost:{{port}}"", ""&preserveHostHeader=false"", String.class);"
34484,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java,32,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""GET"");"
34485,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java,34,,"        String out = template.requestBody(""undertow:http://localhost:{{port}}/foo"", null, String.class);"
34486,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java,35,,"        assertEquals(""Bye World"", out);"
34487,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java,65,,"        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");"
34488,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowProducerTest.java,76,,"        getMockEndpoint(""mock:input"").expectedBodiesReceived(""Hello World"");"
34489,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowSwitchingStatus204Test.java,48,,"        Exchange inExchange = this.createExchangeWithBody(""Hello World"");"
34490,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowSwitchingStatus204Test.java,74,,"        assertEquals(""No Content"", EntityUtils.toString(httpResponse.getEntity()));"
34491,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/handlers/CamelRootHandlerTest.java,38,,"        root.add(""/app1"", null, false, httpHandler);"
34492,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,34,,"        RestComponent component = context().getComponent(""rest"", RestComponent.class);"
34493,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,38,,"        parameters.put(""componentName"", ""undertow"");"
34494,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,38,,"        parameters.put(""componentName"", ""undertow"");"
34495,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,39,,"        parameters.put(""host"", ""http://localhost:"" + getPort());"
34496,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,39,,"        parameters.put(""host"", ""http://localhost:"" + getPort());"
34497,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,40,,"        parameters.put(""path"", ""verify"");"
34498,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,40,,"        parameters.put(""path"", ""verify"");"
34499,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowComponentVerifierTest.java,41,,"        parameters.put(""method"", ""GET"");"
34500,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpGetCorsTest.java,34,,"        Exchange out = template.request(""http://localhost:"" + getPort() + ""/users/123/basic"","
34501,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpGetCorsTest.java,34,,"        Exchange out = template.request(""http://localhost:"" + getPort() + ""/users/123/basic"","
34502,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpPojoTypeTest.java,71,,"            exchange.getIn().setHeader(Exchange.ACCEPT_CONTENT_TYPE, ""application/json"");"
34503,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpPojoTypeTest.java,81,,"        assertEquals(""Scott"", users[0].getName());"
34504,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpPojoTypeTest.java,82,,"        assertEquals(""Claus"", users[1].getName());"
34505,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowHttpPojoTypeTest.java,88,,"            exchange.getIn().setHeader(Exchange.HTTP_METHOD, ""PUT"");"
34506,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbEnableCorsTest.java,31,,"        String out = template.requestBodyAndHeader(""http://localhost:"" + getPort() + ""/users"", null, Exchange.HTTP_METHOD,"
34507,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbEnableCorsTest.java,31,,"        String out = template.requestBodyAndHeader(""http://localhost:"" + getPort() + ""/users"", null, Exchange.HTTP_METHOD,"
34508,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbEnableCorsTest.java,40,,"        assertEquals(""{ \""id\"":\""1\"", \""name\"":\""Scott\"" }"", out);"
34509,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbTest.java,31,,"        String out = template.requestBodyAndHeader(""http://localhost:"" + getPort() + ""/users"", null, Exchange.HTTP_METHOD,"
34510,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbTest.java,31,,"        String out = template.requestBodyAndHeader(""http://localhost:"" + getPort() + ""/users"", null, Exchange.HTTP_METHOD,"
34511,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowVerbTest.java,40,,"        assertEquals(""{ \""id\"":\""1\"", \""name\"":\""Scott\"" }"", out);"
34512,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,67,,"        WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")"
34513,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,67,,"        WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")"
34514,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,72,,"                        System.out.println(""got message "" + message);"
34515,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,85,,"                        LOG.warn(""Unhandled exception: {}"", t.getMessage(), t);"
34516,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,90,,"        MockEndpoint result = getMockEndpoint(""mock:result1"");"
34517,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,91,,"        result.expectedBodiesReceived(""Test"");"
34518,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,287,,"        websocket1.sendTextFrame(""Test1"");"
34519,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,288,,"        websocket2.sendTextFrame(""Test2"");"
34520,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,306,,"        TestClient wsclient1 = new TestClient(""ws://localhost:"" + getPort() + ""/app3"", 2);"
34521,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,326,,"        wsclient1.sendTextMessage(""Gambas"");"
34522,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,327,,"        wsclient2.sendTextMessage(""Calamares"");"
34523,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,427,,"        TestClient wsclient1 = new TestClient(""ws://localhost:"" + getPort() + ""/app6"", 1);"
34524,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java,473,,"                from(""undertow:ws://localhost:"" + port + ""/app1"")"
34525,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java,133,,"                from(""undertow:ws://localhost:"" + port + ""/bar"")"
34526,./TargetProjects/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java,51,,"        WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute("
34527,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34528,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34529,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34530,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34531,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34532,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34533,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatTest.java,33,,"                .setNullValue(""N/A"");"
34534,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatTest.java,111,,"                .setEmptyValue(""empty"");"
34535,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A,B,C"", ""1,2,3"", ""one,two,three""));"
34536,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A,B,C"", ""1,2,3"", ""one,two,three""));"
34537,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34538,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34539,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34540,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalTest.java,54,,"        template.sendBody(""direct:default"", join(""A,B,C"", ""1,2,3"", ""one,two,three""));"
34541,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalTest.java,54,,"        template.sendBody(""direct:default"", join(""A,B,C"", ""1,2,3"", ""one,two,three""));"
34542,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalTest.java,63,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34543,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalTest.java,63,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34544,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityCsvDataFormatUnmarshalTest.java,63,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34545,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34546,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34547,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34548,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34549,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatTest.java,35,,"                .setNullValue(""N/A"");"
34550,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A  B  C    "", ""1  2  3    "", ""onetwothree""));"
34551,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A  B  C    "", ""1  2  3    "", ""onetwothree""));"
34552,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34553,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34554,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34555,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalTest.java,53,,"        template.sendBody(""direct:default"", join(""A  B  C    "", ""1  2  3    "", ""onetwothree""));"
34556,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalTest.java,53,,"        template.sendBody(""direct:default"", join(""A  B  C    "", ""1  2  3    "", ""onetwothree""));"
34557,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34558,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34559,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34560,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34561,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34562,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalSpringTest.java,48,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34563,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34564,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34565,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatMarshalTest.java,49,,"                asMap(""A"", ""one"", ""B"", ""two"", ""C"", ""three"")));"
34566,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatTest.java,33,,"                .setNullValue(""N/A"");"
34567,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A\tB\tC"", ""1\t2\t3"", ""one\ttwo\tthree""));"
34568,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.java,52,,"        template.sendBody(""direct:default"", join(""A\tB\tC"", ""1\t2\t3"", ""one\ttwo\tthree""));"
34569,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34570,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34571,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalSpringTest.java,61,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34572,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalTest.java,53,,"        template.sendBody(""direct:default"", join(""A\tB\tC"", ""1\t2\t3"", ""one\ttwo\tthree""));"
34573,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalTest.java,53,,"        template.sendBody(""direct:default"", join(""A\tB\tC"", ""1\t2\t3"", ""one\ttwo\tthree""));"
34574,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34575,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34576,./TargetProjects/camel/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityTsvDataFormatUnmarshalTest.java,62,,"        assertEquals(Arrays.asList(""one"", ""two"", ""three""), body.get(2));"
34577,./TargetProjects/camel/components/camel-validator/src/main/java/org/apache/camel/component/validator/ValidatorEndpoint.java,53,,"    @UriParam(defaultValue = XMLConstants.W3C_XML_SCHEMA_NS_URI, label = ""advanced"","
34578,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityConcurrentTest.java,42,,"        getMockEndpoint(""mock:result"").expectedMessageCount(files);"
34579,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,43,,"        template.sendBodyAndHeader(""file://target/test-classes/org/apache/camel/component/velocity?fileExist=Override"","
34580,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,44,,"                ""Hello $headers.name"", Exchange.FILE_NAME, ""hello.vm"");"
34581,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,54,,"        MockEndpoint mock = getMockEndpoint(""mock:result"");"
34582,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,55,,"        mock.expectedBodiesReceived(""Hello London"");"
34583,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,57,,"        template.sendBodyAndHeader(""direct:a"", ""Body"", ""name"", ""London"");"
34584,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,57,,"        template.sendBodyAndHeader(""direct:a"", ""Body"", ""name"", ""London"");"
34585,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,57,,"        template.sendBodyAndHeader(""direct:a"", ""Body"", ""name"", ""London"");"
34586,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,57,,"        template.sendBodyAndHeader(""direct:a"", ""Body"", ""name"", ""London"");"
34587,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,62,,"                ""Bye $headers.name"", Exchange.FILE_NAME, ""hello.vm"");"
34588,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,67,,"        template.sendBodyAndHeader(""direct:a"", ""Body"", ""name"", ""Paris"");"
34589,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityContentCacheTest.java,77,,"        template.sendBodyAndHeader(""direct:b"", ""Body"", ""name"", ""London"");"
34590,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityDynamicTemplateTest.java,30,,"        Exchange exchange = context.getEndpoint(""direct:a"").createExchange();"
34591,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocitySetTemplateViaHeaderTest.java,29,,"        Exchange exchange = context.getEndpoint(""direct:a"").createExchange();"
34592,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityTest.java,39,,"                exchange.getIn().setHeader(""name"", ""Christian"");"
34593,./TargetProjects/camel/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityTest.java,39,,"                exchange.getIn().setHeader(""name"", ""Christian"");"
34594,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpComponent.java,51,,"    @Metadata(label = ""security"")"
34595,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpComponent.java,59,,"    @Metadata(label = ""proxy"")"
34596,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpComponent.java,70,,"    @Metadata(label = ""advanced"")"
34597,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpConfiguration.java,39,,"    @UriParam(label = ""producer"")"
34598,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpConfiguration.java,63,,"    @UriParam(label = ""security"")"
34599,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpConfiguration.java,71,,"    @UriParam(label = ""proxy"")"
34600,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/test/java/org/apache/camel/component/vertx/http/VertxHttpSSLGlobalConfigurationTest.java,45,,"        keystoreParameters.setPassword(""security"");"
34601,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/test/java/org/apache/camel/component/vertx/http/VertxHttpSerializedBodyTest.java,52,,"        template.sendBodyAndHeader(getProducerUri() + ""/serialized"", bean, Exchange.CONTENT_TYPE,"
34602,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/test/java/org/apache/camel/component/vertx/http/VertxHttpThrowExceptionOnFailureTest.java,44,,"        assertEquals(""Internal Server Error"", exception.getStatusText());"
34603,./TargetProjects/camel/components/camel-vertx/camel-vertx-http/src/test/java/org/apache/camel/component/vertx/http/VertxHttpThrowExceptionOnFailureTest.java,50,,"        Exchange exchange = template.request(getProducerUri() + ""/redirect"", null);"
34604,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentConfigurer.java,32,,"        case ""additionalproperties"":"
34605,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentConfigurer.java,33,,"        case ""additionalProperties"": getOrCreateConfiguration(target).setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;"
34606,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentConfigurer.java,94,,"        case ""kafkaManualCommitFactory"": target.setKafkaManualCommitFactory(property(camelContext, org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommitFactory.class, value)); return true;"
34607,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentConfigurer.java,234,,"        case ""vertx"": target.setVertx(property(camelContext, io.vertx.core.Vertx.class, value)); return true;"
34608,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentConfigurer.java,236,,"        case ""vertxKafkaClientFactory"": target.setVertxKafkaClientFactory(property(camelContext, org.apache.camel.component.vertx.kafka.VertxKafkaClientFactory.class, value)); return true;"
34609,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaEndpointConfigurer.java,25,,"        case ""additionalproperties"":"
34610,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/VertxKafkaEndpointConfigurer.java,26,,"        case ""additionalProperties"": target.getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;"
34611,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,21,,"    @UriParam(label = ""common"")"
34612,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,34,,"    @UriParam(label = ""common"", defaultValue = ""5m"", javaType = ""java.time.Duration"")"
34613,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,82,,"    @UriParam(label = ""common,security"")"
34614,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,100,,"    @UriParam(label = ""common,security"", defaultValue = ""JKS"")"
34615,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,190,,"    @UriParam(label = ""consumer"")"
34616,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,211,,"    @UriParam(label = ""consumer"", defaultValue = ""true"")"
34617,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,238,,"    @UriParam(label = ""consumer"", defaultValue = ""org.apache.kafka.common.serialization.StringDeserializer"")"
34618,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,262,,"    @UriParam(label = ""producer"", defaultValue = ""33554432"")"
34619,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/generated/java/org/apache/camel/component/vertx/kafka/configuration/VertxKafkaConfiguration.java,295,,"    @UriParam(label = ""producer"", defaultValue = ""org.apache.kafka.common.serialization.StringSerializer"")"
34620,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,42,,"        assertEquals(""broker1:12345,broker2:12566"", endpoint.getConfiguration().getBootstrapServers());"
34621,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,43,,"        assertEquals(""mytopic"", endpoint.getConfiguration().getTopic());"
34622,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,49,,"        VertxKafkaComponent kafka = context.getComponent(""vertx-kafka"", VertxKafkaComponent.class);"
34623,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,71,,"        params.put(""extra.1"", 789);"
34624,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,72,,"        params.put(""extra.3"", ""test.extra.3"");"
34625,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,72,,"        params.put(""extra.3"", ""test.extra.3"");"
34626,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,84,,"        assertEquals(""test"", endpoint.getConfiguration().getAdditionalProperties().get(""extra.2""));"
34627,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,115,,"        assertEquals(""testing"", endpoint.getConfiguration().getClientId());"
34628,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,136,,"        assertEquals(""/abc"", endpoint.getConfiguration().getSslKeystoreLocation());"
34629,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponentTest.java,143,,"        assertEquals(""JKS"", endpoint.getConfiguration().getSslKeystoreType());"
34630,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,76,,"                from(from).routeId(""foo"").to(to);"
34631,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,87,,"        to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");"
34632,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,87,,"        to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");"
34633,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,87,,"        to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");"
34634,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,87,,"        to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");"
34635,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerFullTest.java,87,,"        to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");"
34636,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumerSuspendResumeTest.java,42,,"    @EndpointInject(""mock:result"")"
34637,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaHeadersPropagationTest.java,44,,"        String propagatedStringHeaderValue = ""propagated string header value"";"
34638,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaHeadersPropagationTest.java,49,,"        String propagatedLongHeaderKey = ""PROPAGATED_LONG_HEADER"";"
34639,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,55,,"    private static final String TOPIC_STRINGS = ""test"";"
34640,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,67,,"    @EndpointInject(""vertx-kafka:"" + TOPIC_STRINGS + ""?acks=-1"")"
34641,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,67,,"    @EndpointInject(""vertx-kafka:"" + TOPIC_STRINGS + ""?acks=-1"")"
34642,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,159,,"                ""Not all messages were published to the kafka topics. Not received: "" + messagesLatch.getCount());"
34643,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,167,,"            assertTrue(recordMetaData1.get(0).getOffset() >= 0, ""Offset is positive"");"
34644,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/VertxKafkaProducerFullTest.java,168,,"            assertTrue(recordMetaData1.get(0).getTopic().startsWith(""test""), ""Topic Name start with 'test'"");"
34645,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,248,,"        message.setHeader(VertxKafkaConstants.TOPIC, ""anotherTopic"");"
34646,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,249,,"        message.setHeader(VertxKafkaConstants.MESSAGE_KEY, ""someKey"");"
34647,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,250,,"        message.setBody(""test"");"
34648,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,326,,"        configuration.setTopic(""someTopic"");"
34649,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,336,,"                = createListOfExchanges(Arrays.asList(""overridenTopic1"", ""overridenTopic2"", ""overridenTopic3""),"
34650,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,336,,"                = createListOfExchanges(Arrays.asList(""overridenTopic1"", ""overridenTopic2"", ""overridenTopic3""),"
34651,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,336,,"                = createListOfExchanges(Arrays.asList(""overridenTopic1"", ""overridenTopic2"", ""overridenTopic3""),"
34652,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,400,,"                = createListOfExchanges(Arrays.asList(""key1"", ""key2"", ""key3""), VertxKafkaConstants.MESSAGE_KEY);"
34653,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,400,,"                = createListOfExchanges(Arrays.asList(""key1"", ""key2"", ""key3""), VertxKafkaConstants.MESSAGE_KEY);"
34654,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/operations/VertxKafkaProducerOperationsTest.java,400,,"                = createListOfExchanges(Arrays.asList(""key1"", ""key2"", ""key3""), VertxKafkaConstants.MESSAGE_KEY);"
34655,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-component/src/test/java/org/apache/camel/component/vertx/kafka/serde/VertxKafkaTypeSerializerTest.java,49,,"                = VertxKafkaTypeSerializer.tryConvertToSerializedType(message, ""test"", ByteArraySerializer.class.getName());"
34656,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/main/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigJavaClass.java,167,,"                .setName(""additionalProperties"")"
34657,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,39,,"                ""field.test"", ConfigDef.Type.STRING, ""empty"","
34658,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,39,,"                ""field.test"", ConfigDef.Type.STRING, ""empty"","
34659,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,40,,"                null, ConfigDef.Importance.MEDIUM, ""testing"", ""testGroup"", 1, ConfigDef.Width.MEDIUM, ""displayName"","
34660,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,40,,"                null, ConfigDef.Importance.MEDIUM, ""testing"", ""testGroup"", 1, ConfigDef.Width.MEDIUM, ""displayName"","
34661,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,40,,"                null, ConfigDef.Importance.MEDIUM, ""testing"", ""testGroup"", 1, ConfigDef.Width.MEDIUM, ""displayName"","
34662,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,47,,"                .withDefaultValue(""I am overriden"")"
34663,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,109,,"                ""field.test_underscore.Ms"", ConfigDef.Type.LONG, ""100"","
34664,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,225,,"                ""field.test"", ConfigDef.Type.STRING, ""test_valid_string_2"","
34665,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldTest.java,226,,"                ConfigDef.ValidString.in(""test_valid_string_1"", ""test_valid_string_2""), ConfigDef.Importance.MEDIUM, ""testing"","
34666,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldsBuilderTest.java,36,,"                .define(""test.field.1"", ConfigDef.Type.STRING, ConfigDef.Importance.MEDIUM, ""docs1"")"
34667,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigFieldsBuilderTest.java,39,,"                .define(""test.field.4"", ConfigDef.Type.INT, ConfigDef.Importance.MEDIUM, ""doc4"")"
34668,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigJavaClassTest.java,40,,"                .define(""consumer.test.field.1"", ConfigDef.Type.STRING, ConfigDef.Importance.MEDIUM, ""docs1"")"
34669,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigJavaClassTest.java,41,,"                .define(""consumer.test.field.2"", ConfigDef.Type.CLASS, ConfigDef.Importance.MEDIUM, ""docs2"")"
34670,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigJavaClassTest.java,47,,"                .define(""common.test.field.1"", ConfigDef.Type.STRING, ""default"","
34671,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigJavaClassTest.java,59,,"                .define(""producer.test.field.1"", ConfigDef.Type.STRING, ""default value"", ConfigDef.Importance.MEDIUM, ""docs1"")"
34672,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigUtilsTest.java,38,,"        consumerConfigs.add(""bootstrap.servers"");"
34673,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigUtilsTest.java,39,,"        consumerConfigs.add(""poll.timeout"");"
34674,./TargetProjects/camel/components/camel-vertx/camel-vertx-kafka/camel-vertx-kafka-maven-plugin/src/test/java/org/apache/camel/maven/component/vertx/kafka/config/ConfigUtilsTest.java,43,,"        producerConfigs.add(""push.timeout"");"
34675,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketMultiConsumerTest.java,30,,"        MockEndpoint mockEndpoint = getMockEndpoint(""mock:result"");"
34676,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketRouterTest.java,44,,"                        .to(""mock:result"");"
34677,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketRouterTest.java,49,,"        Router router = createRouter(""/custom"", latch);"
34678,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketRouterTest.java,55,,"            mockEndpoint.expectedBodiesReceived(""Hello world"");"
34679,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketRouterTest.java,59,,"            template.sendBody(""vertx-websocket:localhost:"" + port + ""/test"", ""Hello world"");"
34680,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketRouterTest.java,59,,"            template.sendBody(""vertx-websocket:localhost:"" + port + ""/test"", ""Hello world"");"
34681,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketSSLTest.java,79,,"                from(""direct:start"")"
34682,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketSSLTest.java,84,,"                        .to(""mock:result"");"
34683,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,46,,"        MockEndpoint mockEndpoint = getMockEndpoint(""mock:result"");"
34684,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,47,,"        mockEndpoint.expectedBodiesReceived(""Hello world"");"
34685,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,49,,"        template.sendBody(""direct:start"", ""world"");"
34686,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,95,,"            openWebSocketConnection(""localhost"", port, ""/test"", message -> {"
34687,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,95,,"            openWebSocketConnection(""localhost"", port, ""/test"", message -> {"
34688,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,104,,"                = context.getEndpoint(""vertx-websocket:localhost:"" + port + ""/test"", VertxWebsocketEndpoint.class);"
34689,./TargetProjects/camel/components/camel-vertx/camel-vertx-websocket/src/test/java/org/apache/camel/component/vertx/websocket/VertxWebsocketTest.java,110,,"        template.sendBodyAndHeader(""vertx-websocket:localhost:"" + port + ""/test"", ""Hello World"","
34690,./TargetProjects/camel/components/camel-vertx/camel-vertx/src/generated/java/org/apache/camel/component/vertx/VertxComponentConfigurer.java,33,,"        case ""vertx"": target.setVertx(property(camelContext, io.vertx.core.Vertx.class, value)); return true;"
34691,./TargetProjects/camel/components/camel-weather/src/generated/java/org/apache/camel/component/weather/WeatherEndpointConfigurer.java,72,,"        case ""schedulerproperties"":"
34692,./TargetProjects/camel/components/camel-weather/src/generated/java/org/apache/camel/component/weather/WeatherEndpointConfigurer.java,73,,"        case ""schedulerProperties"": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;"
34693,./TargetProjects/camel/components/camel-weather/src/main/java/org/apache/camel/component/weather/WeatherConfiguration.java,49,,"    @UriParam(label = ""filter"")"
34694,./TargetProjects/camel/components/camel-weather/src/test/java/org/apache/camel/component/weather/CurrentWeatherMadridProducerIT.java,36,,"        MockEndpoint mock = getMockEndpoint(""mock:result"");"
34695,./TargetProjects/camel/components/camel-weather/src/test/java/org/apache/camel/component/weather/CurrentWeatherMadridProducerIT.java,40,,"        template.sendBody(""direct:start"", ""Hello World"");"
34696,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jComponentConfigurer.java,32,,"        case ""addresses"": getOrCreateConfiguration(target).setAddresses(property(camelContext, java.util.List.class, value)); return true;"
34697,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jComponentConfigurer.java,73,,"        case ""privatefor"":"
34698,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jComponentConfigurer.java,74,,"        case ""privateFor"": getOrCreateConfiguration(target).setPrivateFor(property(camelContext, java.util.List.class, value)); return true;"
34699,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jEndpointConfigurer.java,25,,"        case ""addresses"": target.getConfiguration().setAddresses(property(camelContext, java.util.List.class, value)); return true;"
34700,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jEndpointConfigurer.java,67,,"        case ""privatefor"":"
34701,./TargetProjects/camel/components/camel-web3j/src/generated/java/org/apache/camel/component/web3j/Web3jEndpointConfigurer.java,68,,"        case ""privateFor"": target.getConfiguration().setPrivateFor(property(camelContext, java.util.List.class, value)); return true;"
34702,./TargetProjects/camel/components/camel-web3j/src/main/java/org/apache/camel/component/web3j/Web3jConfiguration.java,31,,"    @UriParam(label = ""producer"", defaultValue = ""transaction"")"
34703,./TargetProjects/camel/components/camel-web3j/src/main/java/org/apache/camel/component/web3j/Web3jConfiguration.java,34,,"    @UriParam(label = ""common"", defaultValue = ""latest"")"
34704,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/Web3jProducerTest.java,180,,"        Mockito.when(response.getProtocolVersion()).thenReturn(""123"");"
34705,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/Web3jProducerTest.java,299,,"        Mockito.when(response.getData()).thenReturn(""test"");"
34706,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/Web3jQuorumProducerTest.java,101,,"        Mockito.when(response.getTransactionHash()).thenReturn(""test"");"
34707,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/integration/Web3jProducerGanacheTest.java,239,,"        exchange.getIn().setHeader(ADDRESS, ""0xc8CDceCE5d006dAB638029EBCf6Dd666efF5A952"");"
34708,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/integration/Web3jProducerGanacheTest.java,257,,"        exchange.getIn().setHeader(ADDRESS, ""0x3B558E3a9ae7944FEe7a3A1010DD10f05a01034B"");"
34709,./TargetProjects/camel/components/camel-web3j/src/test/java/org/apache/camel/component/web3j/integration/Web3jProducerGanacheTest.java,269,,"        exchange.getIn().setHeader(AT_BLOCK, ""latest"");"
34710,./TargetProjects/camel/components/camel-webhook/src/test/java/org/apache/camel/component/webhook/WebhookBasePathTest.java,34,,"        String result = template.requestBody(""netty-http:http://localhost:"" + port + ""/base/uri0"", """", String.class);"
34711,./TargetProjects/camel/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java,71,,"    @Metadata(label = ""security"")"
34712,./TargetProjects/camel/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java,75,,"    @Metadata(label = ""advanced"")"
34713,./TargetProjects/camel/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java,74,,"    @UriParam(label = ""advanced"", defaultValue = ""8192"")"
34714,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketComponentTest.java,74,,"        connector.setHost(""localhost"");"
34715,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java,63,,"        assertEquals(""25000"", buffersize, ""Got a wrong buffersize"");"
34716,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketEndpointConfigurationTest.java,65,,"        assertEquals(""3000"", maxIdleTime, ""Got a wrong maxIdleTime"");"
34717,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSubprotocolNegotiationTest.java,49,,"                arguments(""supported1,supported2"", ""supported2,supported1"", ""supported1"", false),       // select first server supported"
34718,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSubprotocolNegotiationTest.java,49,,"                arguments(""supported1,supported2"", ""supported2,supported1"", ""supported1"", false),       // select first server supported"
34719,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSubprotocolNegotiationTest.java,49,,"                arguments(""supported1,supported2"", ""supported2,supported1"", ""supported1"", false),       // select first server supported"
34720,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketSubprotocolNegotiationTest.java,51,,"                arguments(""supported2,supported1"", ""supported1,supported2"", ""supported2"", false),       // select first server supported"
34721,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketTwoRoutesExampleTest.java,177,,"                from(""websocket://localhost:"" + port + ""/bar"")"
34722,./TargetProjects/camel/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebsocketTwoRoutesToSIndividualAndBroadcastEndpointExampleTest.java,64,,"        WebSocket websocket = c.prepareGet(""ws://localhost:"" + port + ""/bar"").execute("
34723,./TargetProjects/camel/components/camel-weka/src/main/java/org/apache/camel/component/weka/WekaConfiguration.java,51,,"    @UriParam(description = ""The classifier spec (i.e. Name [Options])"", label = ""model"")"
34724,./TargetProjects/camel/components/camel-weka/src/test/java/org/apache/camel/component/weka/DecisionTreeTest.java,47,,"                    from(""direct:start"")"
34725,./TargetProjects/camel/components/camel-weka/src/test/java/org/apache/camel/component/weka/FilterTest.java,68,,"            assertEquals(""sfny"", dataset.getInstances().relationName());"
34726,./TargetProjects/camel/components/camel-weka/src/test/java/org/apache/camel/component/weka/ReadWriteTest.java,45,,"                    from(""direct:start"")"
34727,./TargetProjects/camel/components/camel-weka/src/test/java/org/apache/camel/component/weka/ReadWriteTest.java,66,,"                            .to(""weka:read"")"
34728,./TargetProjects/camel/components/camel-weka/src/test/java/org/apache/camel/component/weka/ReadWriteTest.java,158,,"            Path absPath = Paths.get(""src/test/resources/data/sfny.arff"").toAbsolutePath();"
34729,./TargetProjects/camel/components/camel-wordpress/src/generated/java/org/apache/camel/component/wordpress/WordpressComponentConfigurer.java,38,,"        case ""criteria"": getOrCreateConfiguration(target).setCriteria(property(camelContext, java.util.Map.class, value)); return true;"
34730,./TargetProjects/camel/components/camel-wordpress/src/generated/java/org/apache/camel/component/wordpress/WordpressEndpointConfigurer.java,28,,"        case ""criteria"": target.getConfiguration().setCriteria(property(camelContext, java.util.Map.class, value)); return true;"
34731,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/CategoriesSPI.java,50,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34732,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/CommentsSPI.java,52,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34733,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/PagesSPI.java,52,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34734,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/PostsSPI.java,53,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34735,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/PostsSPI.java,70,,"            @PathParam(""apiVersion"") String apiVersion, @PathParam(""postId"") int postId, @QueryParam(""context"") Context context,"
34736,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/TagsSPI.java,49,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34737,./TargetProjects/camel/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/spi/UsersSPI.java,50,,"            @PathParam(""apiVersion"") String apiVersion, @QueryParam(""context"") Context context,"
34738,./TargetProjects/camel/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressMockServerTestSupport.java,68,,"        postsListCreateRequestHandlers.put(""GET"", ""/data/posts/list.json"");"
34739,./TargetProjects/camel/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressMockServerTestSupport.java,69,,"        postsListCreateRequestHandlers.put(""POST"", ""/data/posts/create.json"");"
34740,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,36,,"        WorkdayComponent workdayComponent = context.getComponent(""workday"", WorkdayComponent.class);"
34741,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,39,,"                .createEndpoint(""workday:commonAPI:/workers?"" + ""host=impl.workday.com"" + ""&tenant=camel"""
34742,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,39,,"                .createEndpoint(""workday:commonAPI:/workers?"" + ""host=impl.workday.com"" + ""&tenant=camel"""
34743,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,40,,"                                + ""&clientId=f7014d38-99d2-4969-b740-b5b62db6b46a"""
34744,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,41,,"                                + ""&clientSecret=7dbaf280-3cea-11ea-b77f-2e728ce88125"" + ""&tokenRefresh=88689ab63cda"""
34745,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,41,,"                                + ""&clientSecret=7dbaf280-3cea-11ea-b77f-2e728ce88125"" + ""&tokenRefresh=88689ab63cda"""
34746,./TargetProjects/camel/components/camel-workday/src/test/java/org/apache/camel/WorkdayCommonAPIProducerTest.java,65,,"                                    + ""&format=json"");"
34747,./TargetProjects/camel/components/camel-xj/src/main/java/org/apache/camel/component/xj/XmlJsonStreamWriter.java,411,,"                throw new IllegalStateException(""XMLEvent: "" + xmlEvent + ""; Json Token: "" + jsonToken);"
34748,./TargetProjects/camel/components/camel-xj/src/main/java/org/apache/camel/component/xj/XmlJsonStreamWriter.java,411,,"                throw new IllegalStateException(""XMLEvent: "" + xmlEvent + ""; Json Token: "" + jsonToken);"
34749,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,47,,"        case ""cryptocontextproperties"":"
34750,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,48,,"        case ""cryptoContextProperties"": getOrCreateSignerConfiguration(target).setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;"
34751,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,82,,"        case ""transformmethods"":"
34752,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,83,,"        case ""transformMethods"": getOrCreateSignerConfiguration(target).setTransformMethods(property(camelContext, java.util.List.class, value)); return true;"
34753,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,86,,"        case ""xpathstoidattributes"":"
34754,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerComponentConfigurer.java,87,,"        case ""xpathsToIdAttributes"": getOrCreateSignerConfiguration(target).setXpathsToIdAttributes(property(camelContext, java.util.List.class, value)); return true;"
34755,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,38,,"        case ""cryptocontextproperties"":"
34756,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,39,,"        case ""cryptoContextProperties"": target.getConfiguration().setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;"
34757,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,71,,"        case ""transformmethods"":"
34758,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,72,,"        case ""transformMethods"": target.getConfiguration().setTransformMethods(property(camelContext, java.util.List.class, value)); return true;"
34759,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,75,,"        case ""xpathstoidattributes"":"
34760,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlSignerEndpointConfigurer.java,76,,"        case ""xpathsToIdAttributes"": target.getConfiguration().setXpathsToIdAttributes(property(camelContext, java.util.List.class, value)); return true;"
34761,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlVerifierComponentConfigurer.java,37,,"        case ""cryptocontextproperties"":"
34762,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlVerifierComponentConfigurer.java,38,,"        case ""cryptoContextProperties"": getOrCreateVerifierConfiguration(target).setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;"
34763,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlVerifierEndpointConfigurer.java,28,,"        case ""cryptocontextproperties"":"
34764,./TargetProjects/camel/components/camel-xmlsecurity/src/generated/java/org/apache/camel/component/xmlsecurity/XmlVerifierEndpointConfigurer.java,29,,"        case ""cryptoContextProperties"": target.getConfiguration().setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;"
34765,./TargetProjects/camel/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java,684,,"            Element description = createElement(""Description"", doc, input);"
34766,./TargetProjects/camel/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/processor/XmlSignatureConfiguration.java,33,,"    @UriParam(label = ""producer"")"
34767,./TargetProjects/camel/components/camel-xmlsecurity/src/main/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormat.java,349,,"            LOG.debug(""Error destroying key: {}"", ex.getMessage());"
34768,./TargetProjects/camel/components/camel-xmlsecurity/src/main/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormat.java,357,,"            keyEncryptionKey = generateKeyEncryptionKey(""DESede"");"
34769,./TargetProjects/camel/components/camel-xmlsecurity/src/main/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormat.java,366,,"            keyEncryptionKey = generateKeyEncryptionKey(""AES"");"
34770,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/ECDSASignatureTest.java,87,,"            System.err.println(""Cannot test due "" + e.getMessage());"
34771,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/ECDSASignatureTest.java,120,,"                        .to(""xmlsecurity-verify:ecdsa?keySelector=#selector"")"
34772,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/ECDSASignatureTest.java,121,,"                        .to(""mock:result"");"
34773,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureAlgorithmTest.java,153,,"                        .to(""xmlsecurity-verify:signaturedigestalgorithm?keySelector=#secretKeySelector"").to(""mock:result"");"
34774,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureAlgorithmTest.java,153,,"                        .to(""xmlsecurity-verify:signaturedigestalgorithm?keySelector=#secretKeySelector"").to(""mock:result"");"
34775,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureAlgorithmTest.java,207,,"                        .to(""xmlsecurity-verify:signaturedigestalgorithm?keySelector=#selector"").to(""mock:result"");"
34776,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureAlgorithmTest.java,503,,"        Certificate c = loadKeystore().getCertificate(""bob"");"
34777,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureDigestMethodTest.java,146,,"                        .to(""xmlsecurity-verify:signaturedigestalgorithm?keySelector=#selector"").to(""mock:result"");"
34778,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureDigestMethodTest.java,146,,"                        .to(""xmlsecurity-verify:signaturedigestalgorithm?keySelector=#selector"").to(""mock:result"");"
34779,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/SignatureDigestMethodTest.java,394,,"        Certificate c = loadKeystore().getCertificate(""bob"");"
34780,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java,123,,"                onException(XmlSignatureException.class).handled(true).to(""mock:exception"");"
34781,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java,126,,"                        .to(""mock:result"");"
34782,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java,131,,"                from(""direct:enveloping"")"
34783,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java,186,,"                ""OIDAsURN"");"
34784,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java,364,,"        checkNode(doc, ""/ds:Signature/ds:Object/etsi:QualifyingProperties"", getPrefix2NamespaceMap(), false);"
34785,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,126,,"        payload = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"""
34786,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,128,,"                  + ""<root xmlns=\""http://test/test\""><test>Test Message</test></root>"";"
34787,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,151,,"        Map<String, String> namespaceMap = Collections.singletonMap(""ns"", ""http://test"");"
34788,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,166,,"                onException(XmlSignatureException.class).handled(true).to(""mock:exception"");"
34789,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,167,,"                from(""direct:enveloping"").to(getSignerEndpointURIEnveloping()).to(""mock:signed"")"
34790,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,167,,"                from(""direct:enveloping"").to(getSignerEndpointURIEnveloping()).to(""mock:signed"")"
34791,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,169,,"                        .to(""mock:result"");"
34792,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,187,,"                from(""direct:enveloped"").to(getSignerEndpointURIEnveloped()).to(""mock:signed"")"
34793,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,297,,"                from(""direct:outputnodesearchelementname"").to("
34794,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,307,,"                from(""direct:outputnodesearchxpath"")"
34795,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,342,,"                from(""direct:signexceptions"")"
34796,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,357,,"                from(""direct:verifyexceptions"").to(""xmlsecurity-verify:verifyexceptions?keySelector=#selector"")"
34797,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,383,,"                from(""direct:detached"")"
34798,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,437,,"        headers.put(XmlSignatureConstants.HEADER_PLAIN_TEXT_ENCODING, ""UTF-8"");"
34799,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,497,,"                .getResourceAsStream(""/org/apache/camel/component/xmlsecurity/ExampleEnvelopedXmlSig.xml"");"
34800,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,498,,"        assertNotNull(payload, ""Cannot load payload"");"
34801,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,626,,"                .getResourceAsStream(""/org/apache/camel/component/xmlsecurity/ExampleEnvelopingDigSig.xml"");"
34802,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,837,,"                                 + ""<ns:root xmlns:ns=\""http://test\""><a ID=\""myID\""><b>bValue</b></a></ns:root>"";"
34803,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XmlSignatureTest.java,1481,,"        Certificate c = loadKeystore().getCertificate(""bob"");"
34804,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,69,,"        KeyGenerator keygen = KeyGenerator.getInstance(""AES"");"
34805,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,76,,"        xmlEncDataFormat.setSecureTag(""//cheesesites/italy/cheese"");"
34806,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,81,,"                from(""direct:start"")"
34807,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,82,,"                        .marshal(xmlEncDataFormat).to(""mock:encrypted"")"
34808,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,83,,"                        .log(""Body: + ${body}"")"
34809,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,84,,"                        .unmarshal(xmlEncDataFormat).to(""mock:decrypted"");"
34810,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,361,,"        sendingDataFormat.setRecipientKeyAlias(""recipient"");"
34811,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/EncryptionAlgorithmTest.java,364,,"        tsParameters.setPassword(""password"");"
34812,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/TestHelper.java,50,,"              + ""<source>cow</source>"""
34813,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLEncryption11Test.java,74,,"        tsParameters.setPassword(""password"");"
34814,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLEncryption11Test.java,75,,"        tsParameters.setResource(""sender.ts"");"
34815,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLEncryption11Test.java,81,,"        xmlEncDataFormat.setRecipientKeyAlias(""recipient"");"
34816,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLEncryption11Test.java,85,,"                from(""direct:start"")"
34817,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLEncryption11Test.java,86,,"                        .marshal(xmlEncDataFormat).to(""mock:encrypted"");"
34818,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,79,,"                from(""direct:start"")"
34819,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,81,,"                        .to(""mock:encrypted"");"
34820,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,92,,"                        .marshal().secureXML(""//cheesesites/italy/cheese"", true, defaultKey.getEncoded())"
34821,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,157,,"        tsParameters.setPassword(""password"");"
34822,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,158,,"        tsParameters.setResource(""sender.ts"");"
34823,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,164,,"        xmlEncDataFormat.setRecipientKeyAlias(""recipient"");"
34824,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,248,,"                        .unmarshal().secureXML(defaultKey.getEncoded()).to(""mock:decrypted"");"
34825,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,329,,"                        .marshal().secureXML(""//cheesesites/italy"", true, passCode, XMLCipher.AES_128).to(""mock:encrypted"")"
34826,./TargetProjects/camel/components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityDataFormatTest.java,345,,"        ksParameters.setResource(""recipient.ks"");"
34827,./TargetProjects/camel/components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppEndpoint.java,75,,"    @UriPath(label = ""common"")"
34828,./TargetProjects/camel/components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/UriConfigurationTest.java,34,,"        assertTrue(endpoint instanceof XmppEndpoint, ""Endpoint not an XmppEndpoint: "" + endpoint);"
34829,./TargetProjects/camel/components/camel-xmpp/src/test/java/org/apache/camel/component/xmpp/XmppRobustConnectionTest.java,48,,"            template.sendBody(""direct:start"", ""Test message [ "" + i + "" ]"");"
34830,./TargetProjects/camel/components/camel-xpath/src/main/java/org/apache/camel/language/xpath/XPathBuilder.java,632,,"            @SuppressWarnings(""rawtypes"")"
34831,./TargetProjects/camel/components/camel-xslt-saxon/src/generated/java/org/apache/camel/component/xslt/saxon/XsltSaxonComponentConfigurer.java,26,,"        case ""saxonconfigurationproperties"":"
34832,./TargetProjects/camel/components/camel-xslt-saxon/src/generated/java/org/apache/camel/component/xslt/saxon/XsltSaxonComponentConfigurer.java,27,,"        case ""saxonConfigurationProperties"": target.setSaxonConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;"
34833,./TargetProjects/camel/components/camel-xslt-saxon/src/main/java/org/apache/camel/component/xslt/saxon/XsltSaxonEndpoint.java,65,,"    @UriParam(label = ""advanced"")"
34834,./TargetProjects/camel/components/camel-xslt-saxon/src/test/java/org/apache/camel/component/xslt/saxon/XsltAggregationStrategyTest.java,34,,"        MockEndpoint mock = getMockEndpoint(""mock:transformed"");"
34835,./TargetProjects/camel/components/camel-xslt/src/main/java/org/apache/camel/component/xslt/XsltBuilder.java,154,,"        notNull(xslt, ""xslt"");"
34836,./TargetProjects/camel/components/camel-xslt/src/main/java/org/apache/camel/component/xslt/XsltComponent.java,39,,"    @Metadata(label = ""advanced"")"
34837,./TargetProjects/camel/components/camel-xslt/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java,69,,"    @UriParam(label = ""advanced"")"
34838,./TargetProjects/camel/components/camel-xstream/src/test/java/org/apache/camel/dataformat/xstream/MarshalDomainObjectTest.java,41,,"        template.sendBody(""direct:in"", order);"
34839,./TargetProjects/camel/components/camel-xstream/src/test/java/org/apache/camel/dataformat/xstream/XStreamConfigurationTest.java,58,,"        MockEndpoint mock = getMockEndpoint(""mock:result"");"
34840,./TargetProjects/camel/components/camel-xstream/src/test/java/org/apache/camel/dataformat/xstream/XStreamDataFormatPermissionsTest.java,54,,"            fail(""should fail to unmarshall"");"
34841,./TargetProjects/camel/components/camel-yammer/src/generated/java/org/apache/camel/component/yammer/YammerEndpointConfigurer.java,63,,"        case ""schedulerproperties"":"
34842,./TargetProjects/camel/components/camel-yammer/src/generated/java/org/apache/camel/component/yammer/YammerEndpointConfigurer.java,64,,"        case ""schedulerProperties"": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;"
34843,./TargetProjects/camel/components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerConfiguration.java,42,,"    @UriParam(label = ""consumer"", defaultValue = ""5000"", javaType = ""java.time.Duration"")"
34844,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,23,,"        map.put(""serverUrl"", java.lang.String.class);"
34845,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,24,,"        map.put(""bridgeErrorHandler"", boolean.class);"
34846,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,25,,"        map.put(""lazyStartProducer"", boolean.class);"
34847,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,26,,"        map.put(""autowiredEnabled"", boolean.class);"
34848,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,27,,"        map.put(""configuration"", org.apache.camel.component.zendesk.ZendeskConfiguration.class);"
34849,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,28,,"        map.put(""zendesk"", org.zendesk.client.v2.Zendesk.class);"
34850,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,29,,"        map.put(""oauthToken"", java.lang.String.class);"
34851,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,30,,"        map.put(""password"", java.lang.String.class);"
34852,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,31,,"        map.put(""token"", java.lang.String.class);"
34853,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskComponentConfigurer.java,32,,"        map.put(""username"", java.lang.String.class);"
34854,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,23,,"        map.put(""MethodName"", org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class);"
34855,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,24,,"        map.put(""OauthToken"", java.lang.String.class);"
34856,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,25,,"        map.put(""Password"", java.lang.String.class);"
34857,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,26,,"        map.put(""ServerUrl"", java.lang.String.class);"
34858,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,27,,"        map.put(""Token"", java.lang.String.class);"
34859,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskConfigurationConfigurer.java,28,,"        map.put(""Username"", java.lang.String.class);"
34860,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34861,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34862,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34863,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34864,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34865,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34866,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34867,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34868,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34869,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34870,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34871,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34872,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34873,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34874,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34875,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34876,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34877,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34878,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34879,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34880,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34881,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34882,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34883,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34884,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfiguration.java,19,,"           apiMethods = {@ApiMethod(methodName = ""addTagToOrganisations"", signatures={""java.util.List<String> addTagToOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTicket"", signatures={""java.util.List<String> addTagToTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""addTagToTopics"", signatures={""java.util.List<String> addTagToTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""associateAttachmentsToArticle"", signatures={""void associateAttachmentsToArticle(String idArticle, java.util.List<org.zendesk.client.v2.model.Attachment> attachments)""}), @ApiMethod(methodName = ""changeUserPassword"", signatures={""void changeUserPassword(org.zendesk.client.v2.model.User user, String oldPassword, String newPassword)""}), @ApiMethod(methodName = ""createArticle"", signatures={""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article)"", ""org.zendesk.client.v2.model.hc.Article createArticle(org.zendesk.client.v2.model.hc.Article article, boolean notifySubscribers)""}), @ApiMethod(methodName = ""createArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createArticleTranslation(Long articleId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createAutomation"", signatures={""org.zendesk.client.v2.model.Automation createAutomation(org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""createCategory"", signatures={""org.zendesk.client.v2.model.hc.Category createCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""createCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createCategoryTranslation(Long categoryId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createComment"", signatures={""org.zendesk.client.v2.model.Ticket createComment(long ticketId, org.zendesk.client.v2.model.Comment comment)""}), @ApiMethod(methodName = ""createDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem createDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""createDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant createDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""createForum"", signatures={""org.zendesk.client.v2.model.Forum createForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""createGroup"", signatures={""org.zendesk.client.v2.model.Group createGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""createGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership createGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""org.zendesk.client.v2.model.GroupMembership createGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""createMacro"", signatures={""org.zendesk.client.v2.model.Macro createMacro(org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""createOrganization"", signatures={""org.zendesk.client.v2.model.Organization createOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""createOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""org.zendesk.client.v2.model.OrganizationMembership createOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""createOrganizationMemberships"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)"", ""org.zendesk.client.v2.model.JobStatus createOrganizationMemberships(org.zendesk.client.v2.model.OrganizationMembership[] organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizationMembershipsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationMembershipsAsync(java.util.List<org.zendesk.client.v2.model.OrganizationMembership> organizationMemberships)""}), @ApiMethod(methodName = ""createOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus createOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus createOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""createOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""createOrUpdateUser"", signatures={""org.zendesk.client.v2.model.User createOrUpdateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createOrUpdateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus createOrUpdateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createOrUpdateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createOrUpdateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createPermissionGroup"", description=""Create permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup createPermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""createRequest"", signatures={""org.zendesk.client.v2.model.Request createRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""createSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)"", ""org.zendesk.client.v2.model.SatisfactionRating createSatisfactionRating(long ticketId, org.zendesk.client.v2.model.SatisfactionRating satisfactionRating)""}), @ApiMethod(methodName = ""createSection"", signatures={""org.zendesk.client.v2.model.hc.Section createSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""createSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation createSectionTranslation(Long sectionId, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""createTarget"", signatures={""org.zendesk.client.v2.model.targets.Target createTarget(org.zendesk.client.v2.model.targets.Target target)""}), @ApiMethod(methodName = ""createTicket"", signatures={""org.zendesk.client.v2.model.Ticket createTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.Ticket> createTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""createTicketField"", signatures={""org.zendesk.client.v2.model.Field createTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""createTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm createTicketForm(org.zendesk.client.v2.model.TicketForm ticketForm)""}), @ApiMethod(methodName = ""createTicketFromTweet"", signatures={""org.zendesk.client.v2.model.Ticket createTicketFromTweet(long tweetId, long monitorId)""}), @ApiMethod(methodName = ""createTickets"", signatures={""org.zendesk.client.v2.model.JobStatus createTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus createTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""createTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""createTopic"", signatures={""org.zendesk.client.v2.model.Topic createTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""createTrigger"", signatures={""org.zendesk.client.v2.model.Trigger createTrigger(org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""createUpload"", signatures={""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String fileName, String contentType, byte[] content)"", ""org.zendesk.client.v2.model.Attachment$Upload createUpload(String token, String fileName, String contentType, byte[] content)""}), @ApiMethod(methodName = ""createUploadArticle"", description=""Create upload article with inline false"", signatures={""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file)"", ""org.zendesk.client.v2.model.hc.ArticleAttachments createUploadArticle(long articleId, java.io.File file, boolean inline)""}), @ApiMethod(methodName = ""createUser"", signatures={""org.zendesk.client.v2.model.User createUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""createUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity createUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity createUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""createUsers"", signatures={""org.zendesk.client.v2.model.JobStatus createUsers(java.util.List<org.zendesk.client.v2.model.User> users)"", ""org.zendesk.client.v2.model.JobStatus createUsers(org.zendesk.client.v2.model.User[] users)""}), @ApiMethod(methodName = ""createUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> createUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""createUserSegment"", description=""Create User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment createUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""deleteArticle"", signatures={""void deleteArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""deleteArticleAttachment"", description=""Delete attachment from article"", signatures={""void deleteArticleAttachment(org.zendesk.client.v2.model.hc.ArticleAttachments attachment)"", ""void deleteArticleAttachment(long id)""}), @ApiMethod(methodName = ""deleteAttachment"", signatures={""void deleteAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""void deleteAttachment(long id)""}), @ApiMethod(methodName = ""deleteAutomation"", signatures={""void deleteAutomation(long automationId)""}), @ApiMethod(methodName = ""deleteCategory"", signatures={""void deleteCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""deleteDynamicContentItem"", signatures={""void deleteDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""deleteDynamicContentItemVariant"", signatures={""void deleteDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""deleteForum"", signatures={""void deleteForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""deleteGroup"", signatures={""void deleteGroup(org.zendesk.client.v2.model.Group group)"", ""void deleteGroup(long id)""}), @ApiMethod(methodName = ""deleteGroupMembership"", signatures={""void deleteGroupMembership(org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long id)"", ""void deleteGroupMembership(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)"", ""void deleteGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""deleteOrganization"", signatures={""void deleteOrganization(long id)"", ""void deleteOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""deleteOrganizationMembership"", signatures={""void deleteOrganizationMembership(long id)"", ""void deleteOrganizationMembership(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)"", ""void deleteOrganizationMembership(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""deleteOrganizationMemberships"", signatures={""void deleteOrganizationMemberships(long id, long[] ids)""}), @ApiMethod(methodName = ""deletePermissionGroup"", description=""Delete permission group"", signatures={""void deletePermissionGroup(long id)"", ""void deletePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""deleteSection"", signatures={""void deleteSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""deleteSuspendedTicket"", signatures={""void deleteSuspendedTicket(long id)"", ""void deleteSuspendedTicket(org.zendesk.client.v2.model.SuspendedTicket ticket)""}), @ApiMethod(methodName = ""deleteTarget"", signatures={""void deleteTarget(long targetId)""}), @ApiMethod(methodName = ""deleteTicket"", signatures={""void deleteTicket(long id)"", ""void deleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""deleteTicketField"", signatures={""void deleteTicketField(org.zendesk.client.v2.model.Field field)"", ""void deleteTicketField(long id)""}), @ApiMethod(methodName = ""deleteTickets"", signatures={""void deleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""deleteTopic"", signatures={""void deleteTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""deleteTranslation"", description=""Delete translation"", signatures={""void deleteTranslation(org.zendesk.client.v2.model.hc.Translation translation)"", ""void deleteTranslation(Long translationId)""}), @ApiMethod(methodName = ""deleteTrigger"", signatures={""void deleteTrigger(long triggerId)""}), @ApiMethod(methodName = ""deleteUpload"", signatures={""void deleteUpload(String token)"", ""void deleteUpload(org.zendesk.client.v2.model.Attachment$Upload upload)""}), @ApiMethod(methodName = ""deleteUser"", signatures={""void deleteUser(long id)"", ""void deleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""deleteUserIdentity"", signatures={""void deleteUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""void deleteUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""void deleteUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""deleteUserSegment"", description=""Delete User Segment"", signatures={""void deleteUserSegment(long id)"", ""void deleteUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getArticle"", signatures={""org.zendesk.client.v2.model.hc.Article getArticle(long id)""}), @ApiMethod(methodName = ""getArticleFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticleFromSearch(String searchTerm, Long sectionId)""}), @ApiMethod(methodName = ""getArticles"", description=""Get all articles from help center"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles()"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(String locale)"", ""Iterable<org.zendesk.client.v2.model.hc.Article> getArticles(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""getArticlesFromAllLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAllLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromAnyLabels"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesFromAnyLabels(java.util.List<String> labels)""}), @ApiMethod(methodName = ""getArticlesFromPage"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.Article> getArticlesFromPage(int page)""}), @ApiMethod(methodName = ""getArticlesIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Article> getArticlesIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getArticleSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getArticleSubscriptions(Long articleId, String locale)""}), @ApiMethod(methodName = ""getArticleTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getArticleTranslations(Long articleId)""}), @ApiMethod(methodName = ""getAssignableGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getAssignableGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getAssignableGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getAssignableGroups()""}), @ApiMethod(methodName = ""getAttachment"", signatures={""org.zendesk.client.v2.model.Attachment getAttachment(org.zendesk.client.v2.model.Attachment attachment)"", ""org.zendesk.client.v2.model.Attachment getAttachment(long id)""}), @ApiMethod(methodName = ""getAttachmentsFromArticle"", signatures={""java.util.List<org.zendesk.client.v2.model.hc.ArticleAttachments> getAttachmentsFromArticle(Long articleID)""}), @ApiMethod(methodName = ""getAuthenticatedUser"", signatures={""org.zendesk.client.v2.model.User getAuthenticatedUser()""}), @ApiMethod(methodName = ""getAutoCompleteOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getAutoCompleteOrganizations(String name)""}), @ApiMethod(methodName = ""getAutomation"", signatures={""org.zendesk.client.v2.model.Automation getAutomation(long id)""}), @ApiMethod(methodName = ""getAutomations"", signatures={""Iterable<org.zendesk.client.v2.model.Automation> getAutomations()""}), @ApiMethod(methodName = ""getBrands"", signatures={""java.util.List<org.zendesk.client.v2.model.Brand> getBrands()""}), @ApiMethod(methodName = ""getCategories"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Category> getCategories()""}), @ApiMethod(methodName = ""getCategory"", signatures={""org.zendesk.client.v2.model.hc.Category getCategory(long id)""}), @ApiMethod(methodName = ""getCategoryTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getCategoryTranslations(Long categoryId)""}), @ApiMethod(methodName = ""getCCRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getCCRequests()""}), @ApiMethod(methodName = ""getComplianceDeletionStatuses"", signatures={""Iterable<org.zendesk.client.v2.model.ComplianceDeletionStatus> getComplianceDeletionStatuses(long userId)""}), @ApiMethod(methodName = ""getCurrentUser"", signatures={""org.zendesk.client.v2.model.User getCurrentUser()""}), @ApiMethod(methodName = ""getCustomAgentRoles"", signatures={""Iterable<org.zendesk.client.v2.model.AgentRole> getCustomAgentRoles()""}), @ApiMethod(methodName = ""getDeletedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets()"", ""Iterable<org.zendesk.client.v2.model.DeletedTicket> getDeletedTickets(String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem getDynamicContentItem(long id)""}), @ApiMethod(methodName = ""getDynamicContentItems"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItem> getDynamicContentItems()""}), @ApiMethod(methodName = ""getDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant getDynamicContentItemVariant(Long itemId, long id)""}), @ApiMethod(methodName = ""getDynamicContentItemVariants"", signatures={""Iterable<org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant> getDynamicContentItemVariants(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""getForum"", signatures={""org.zendesk.client.v2.model.Forum getForum(long id)""}), @ApiMethod(methodName = ""getForums"", signatures={""Iterable<org.zendesk.client.v2.model.Forum> getForums()"", ""java.util.List<org.zendesk.client.v2.model.Forum> getForums(long category_id)""}), @ApiMethod(methodName = ""getGroup"", signatures={""org.zendesk.client.v2.model.Group getGroup(long id)""}), @ApiMethod(methodName = ""getGroupMembership"", signatures={""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long id)"", ""org.zendesk.client.v2.model.GroupMembership getGroupMembership(long user_id, long group_membership_id)""}), @ApiMethod(methodName = ""getGroupMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getGroupMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships()"", ""java.util.List<org.zendesk.client.v2.model.GroupMembership> getGroupMemberships(long group_id)""}), @ApiMethod(methodName = ""getGroupOrganization"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getGroupOrganization(long user_id, long organization_membership_id)""}), @ApiMethod(methodName = ""getGroups"", signatures={""Iterable<org.zendesk.client.v2.model.Group> getGroups()""}), @ApiMethod(methodName = ""getGroupUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getGroupUsers(long id)""}), @ApiMethod(methodName = ""getHelpCenterLocales"", signatures={""java.util.List<String> getHelpCenterLocales()""}), @ApiMethod(methodName = ""getHolidaysForSchedule"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""Iterable<org.zendesk.client.v2.model.schedules.Holiday> getHolidaysForSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getIncrementalTicketsResult"", signatures={""java.util.Map getIncrementalTicketsResult(long unixEpochTime)""}), @ApiMethod(methodName = ""getJobStatus"", signatures={""org.zendesk.client.v2.model.JobStatus getJobStatus(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatusAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> getJobStatusAsync(org.zendesk.client.v2.model.JobStatus status)""}), @ApiMethod(methodName = ""getJobStatuses"", signatures={""java.util.List<org.zendesk.client.v2.model.JobStatus> getJobStatuses(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getJobStatusesAsync"", signatures={""org.asynchttpclient.ListenableFuture<java.util.List<org.zendesk.client.v2.model.JobStatus>> getJobStatusesAsync(java.util.List<org.zendesk.client.v2.model.JobStatus> statuses)""}), @ApiMethod(methodName = ""getMacro"", signatures={""org.zendesk.client.v2.model.Macro getMacro(long macroId)""}), @ApiMethod(methodName = ""getMacros"", signatures={""Iterable<org.zendesk.client.v2.model.Macro> getMacros()""}), @ApiMethod(methodName = ""getOpenRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getOpenRequests()""}), @ApiMethod(methodName = ""getOrganization"", signatures={""org.zendesk.client.v2.model.Organization getOrganization(long id)""}), @ApiMethod(methodName = ""getOrganizationFields"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationField> getOrganizationFields()""}), @ApiMethod(methodName = ""getOrganizationMembership"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembership(long id)""}), @ApiMethod(methodName = ""getOrganizationMembershipByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipByUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipForUser"", signatures={""org.zendesk.client.v2.model.OrganizationMembership getOrganizationMembershipForUser(long user_id, long id)""}), @ApiMethod(methodName = ""getOrganizationMemberships"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMemberships()""}), @ApiMethod(methodName = ""getOrganizationMembershipsForOrg"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForOrg(long organization_id)""}), @ApiMethod(methodName = ""getOrganizationMembershipsForUser"", signatures={""Iterable<org.zendesk.client.v2.model.OrganizationMembership> getOrganizationMembershipsForUser(long user_id)""}), @ApiMethod(methodName = ""getOrganizations"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizations()""}), @ApiMethod(methodName = ""getOrganizationsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> getOrganizationsIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getOrganizationTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getOrganizationTickets(long organizationId)""}), @ApiMethod(methodName = ""getOrganizationUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getOrganizationUsers(long id)""}), @ApiMethod(methodName = ""getPermissionGroup"", description=""Get permission group by id"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup getPermissionGroup(long id)""}), @ApiMethod(methodName = ""getPermissionGroups"", description=""Get all permission groups"", signatures={""Iterable<org.zendesk.client.v2.model.hc.PermissionGroup> getPermissionGroups()""}), @ApiMethod(methodName = ""getRecentTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getRecentTickets()""}), @ApiMethod(methodName = ""getRequest"", signatures={""org.zendesk.client.v2.model.Request getRequest(long id)""}), @ApiMethod(methodName = ""getRequestComment"", signatures={""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, org.zendesk.client.v2.model.Comment comment)"", ""org.zendesk.client.v2.model.Comment getRequestComment(org.zendesk.client.v2.model.Request request, long commentId)"", ""org.zendesk.client.v2.model.Comment getRequestComment(long requestId, long commentId)""}), @ApiMethod(methodName = ""getRequestComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getRequestComments(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""getRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getRequests()""}), @ApiMethod(methodName = ""getSatisfactionRating"", signatures={""org.zendesk.client.v2.model.SatisfactionRating getSatisfactionRating(long id)""}), @ApiMethod(methodName = ""getSatisfactionRatings"", signatures={""Iterable<org.zendesk.client.v2.model.SatisfactionRating> getSatisfactionRatings()""}), @ApiMethod(methodName = ""getSchedule"", signatures={""org.zendesk.client.v2.model.schedules.Schedule getSchedule(org.zendesk.client.v2.model.schedules.Schedule schedule)"", ""org.zendesk.client.v2.model.schedules.Schedule getSchedule(Long scheduleId)""}), @ApiMethod(methodName = ""getSchedules"", description=""Get a list of the current business hours schedules"", signatures={""Iterable<org.zendesk.client.v2.model.schedules.Schedule> getSchedules()""}), @ApiMethod(methodName = ""getSearchResults"", signatures={""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, java.util.Map<String, Object> params)"", ""Iterable<org.zendesk.client.v2.model.SearchResultEntity> getSearchResults(Class<org.zendesk.client.v2.model.SearchResultEntity> type, String query, String sortBy, org.zendesk.client.v2.model.SortOrder sortOrder)""}), @ApiMethod(methodName = ""getSection"", signatures={""org.zendesk.client.v2.model.hc.Section getSection(long id)""}), @ApiMethod(methodName = ""getSections"", description=""List Sections using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Section> getSections()"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.Category category)"", ""Iterable<org.zendesk.client.v2.model.hc.Section> getSections(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""getSectionSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getSectionSubscriptions(Long sectionId, String locale)""}), @ApiMethod(methodName = ""getSectionTranslations"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Translation> getSectionTranslations(Long sectionId)""}), @ApiMethod(methodName = ""getSolvedRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getSolvedRequests()""}), @ApiMethod(methodName = ""getSuspendedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.SuspendedTicket> getSuspendedTickets()""}), @ApiMethod(methodName = ""getTarget"", signatures={""org.zendesk.client.v2.model.targets.Target getTarget(long id)""}), @ApiMethod(methodName = ""getTargets"", signatures={""Iterable<org.zendesk.client.v2.model.targets.Target> getTargets()""}), @ApiMethod(methodName = ""getTicket"", signatures={""org.zendesk.client.v2.model.Ticket getTicket(long id)""}), @ApiMethod(methodName = ""getTicketAudit"", signatures={""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""org.zendesk.client.v2.model.Audit getTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""getTicketAudits"", signatures={""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(org.zendesk.client.v2.model.Ticket ticket)"", ""Iterable<org.zendesk.client.v2.model.Audit> getTicketAudits(Long id)""}), @ApiMethod(methodName = ""getTicketCollaborators"", signatures={""java.util.List<org.zendesk.client.v2.model.User> getTicketCollaborators(long id)""}), @ApiMethod(methodName = ""getTicketComments"", signatures={""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id)"", ""Iterable<org.zendesk.client.v2.model.Comment> getTicketComments(long id, org.zendesk.client.v2.model.SortOrder order)""}), @ApiMethod(methodName = ""getTicketField"", signatures={""org.zendesk.client.v2.model.Field getTicketField(long id)""}), @ApiMethod(methodName = ""getTicketFields"", signatures={""java.util.List<org.zendesk.client.v2.model.Field> getTicketFields()""}), @ApiMethod(methodName = ""getTicketForm"", signatures={""org.zendesk.client.v2.model.TicketForm getTicketForm(long id)""}), @ApiMethod(methodName = ""getTicketForms"", signatures={""java.util.List<org.zendesk.client.v2.model.TicketForm> getTicketForms()""}), @ApiMethod(methodName = ""getTicketIncidents"", signatures={""java.util.List<org.zendesk.client.v2.model.Ticket> getTicketIncidents(long id)""}), @ApiMethod(methodName = ""getTicketMetric"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetric(long id)""}), @ApiMethod(methodName = ""getTicketMetricByTicket"", signatures={""org.zendesk.client.v2.model.Metric getTicketMetricByTicket(long id)""}), @ApiMethod(methodName = ""getTicketMetrics"", signatures={""Iterable<org.zendesk.client.v2.model.Metric> getTicketMetrics()""}), @ApiMethod(methodName = ""getTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTickets()"", ""java.util.List<org.zendesk.client.v2.model.Ticket> getTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""getTicketsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsByExternalId(String externalId, boolean includeArchived)""}), @ApiMethod(methodName = ""getTicketsFromSearch"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsFromSearch(String searchTerm)""}), @ApiMethod(methodName = ""getTicketsIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime)"", ""Iterable<org.zendesk.client.v2.model.Ticket> getTicketsIncrementally(java.util.Date startTime, java.util.Date endTime)""}), @ApiMethod(methodName = ""getTopic"", signatures={""org.zendesk.client.v2.model.Topic getTopic(long id)""}), @ApiMethod(methodName = ""getTopics"", description=""List Topics using a User Segment"", signatures={""Iterable<org.zendesk.client.v2.model.Topic> getTopics()"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long forum_id)"", ""Iterable<org.zendesk.client.v2.model.Topic> getTopics(org.zendesk.client.v2.model.hc.UserSegment userSegment)"", ""java.util.List<org.zendesk.client.v2.model.Topic> getTopics(long id, long[] ids)""}), @ApiMethod(methodName = ""getTopicsByUser"", signatures={""java.util.List<org.zendesk.client.v2.model.Topic> getTopicsByUser(long user_id)""}), @ApiMethod(methodName = ""getTrigger"", signatures={""org.zendesk.client.v2.model.Trigger getTrigger(long id)""}), @ApiMethod(methodName = ""getTriggers"", signatures={""Iterable<org.zendesk.client.v2.model.Trigger> getTriggers()""}), @ApiMethod(methodName = ""getTwitterMonitors"", signatures={""Iterable<org.zendesk.client.v2.model.TwitterMonitor> getTwitterMonitors()""}), @ApiMethod(methodName = ""getUser"", signatures={""org.zendesk.client.v2.model.User getUser(long id)""}), @ApiMethod(methodName = ""getUserCCDTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserCCDTickets(long userId)""}), @ApiMethod(methodName = ""getUserFields"", signatures={""Iterable<org.zendesk.client.v2.model.UserField> getUserFields()""}), @ApiMethod(methodName = ""getUserIdentities"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(org.zendesk.client.v2.model.User user)"", ""java.util.List<org.zendesk.client.v2.model.Identity> getUserIdentities(long userId)""}), @ApiMethod(methodName = ""getUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity getUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""getUserRelatedInfo"", signatures={""org.zendesk.client.v2.model.UserRelatedInfo getUserRelatedInfo(long userId)""}), @ApiMethod(methodName = ""getUserRequestedTickets"", signatures={""Iterable<org.zendesk.client.v2.model.Ticket> getUserRequestedTickets(long userId)""}), @ApiMethod(methodName = ""getUserRequests"", signatures={""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(long id)"", ""Iterable<org.zendesk.client.v2.model.Request> getUserRequests(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""getUsers"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsers()""}), @ApiMethod(methodName = ""getUsersByRole"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersByRole(String role, String[] roles)""}), @ApiMethod(methodName = ""getUserSegment"", description=""Get user segment by id"", signatures={""org.zendesk.client.v2.model.hc.UserSegment getUserSegment(long id)""}), @ApiMethod(methodName = ""getUserSegments"", description=""Returns the list of user segments that a particular user belongs to"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments()"", ""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegments(long id)""}), @ApiMethod(methodName = ""getUserSegmentsApplicable"", description=""Request only user segments applicable on the account's current Guide plan"", signatures={""Iterable<org.zendesk.client.v2.model.hc.UserSegment> getUserSegmentsApplicable()""}), @ApiMethod(methodName = ""getUsersIncrementally"", signatures={""Iterable<org.zendesk.client.v2.model.User> getUsersIncrementally(java.util.Date startTime)""}), @ApiMethod(methodName = ""getUserSubscriptions"", signatures={""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(org.zendesk.client.v2.model.User user)"", ""Iterable<org.zendesk.client.v2.model.hc.Subscription> getUserSubscriptions(Long userId)""}), @ApiMethod(methodName = ""importTicket"", signatures={""org.zendesk.client.v2.model.Ticket importTicket(org.zendesk.client.v2.model.TicketImport ticketImport)""}), @ApiMethod(methodName = ""importTopic"", signatures={""org.zendesk.client.v2.model.Topic importTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""lookupOrganizationsByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.Organization> lookupOrganizationsByExternalId(String externalId)""}), @ApiMethod(methodName = ""lookupUserByEmail"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByEmail(String email)""}), @ApiMethod(methodName = ""lookupUserByExternalId"", signatures={""Iterable<org.zendesk.client.v2.model.User> lookupUserByExternalId(String externalId)""}), @ApiMethod(methodName = ""macrosShowChangesToTicket"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowChangesToTicket(long macroId)""}), @ApiMethod(methodName = ""macrosShowTicketAfterChanges"", signatures={""org.zendesk.client.v2.model.Ticket macrosShowTicketAfterChanges(long ticketId, long macroId)""}), @ApiMethod(methodName = ""makePrivateTicketAudit"", signatures={""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void makePrivateTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void makePrivateTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""markTicketAsSpam"", signatures={""void markTicketAsSpam(long id)"", ""void markTicketAsSpam(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""mergeUsers"", signatures={""org.zendesk.client.v2.model.User mergeUsers(long userIdThatWillRemain, long userIdThatWillBeMerged)""}), @ApiMethod(methodName = ""notifyApp"", signatures={""void notifyApp(String json)""}), @ApiMethod(methodName = ""permanentlyDeleteTicket"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(long id)"", ""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""permanentlyDeleteTickets"", signatures={""org.zendesk.client.v2.model.JobStatus permanentlyDeleteTickets(long id, long[] ids)""}), @ApiMethod(methodName = ""permanentlyDeleteUser"", signatures={""org.zendesk.client.v2.model.User permanentlyDeleteUser(long id)"", ""org.zendesk.client.v2.model.User permanentlyDeleteUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""queueCreateTicketAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> queueCreateTicketAsync(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""removeTagFromOrganisations"", signatures={""java.util.List<String> removeTagFromOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTicket"", signatures={""java.util.List<String> removeTagFromTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""removeTagFromTopics"", signatures={""java.util.List<String> removeTagFromTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""requestVerifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity requestVerifyUserIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""resetUserPassword"", signatures={""void resetUserPassword(long id, String password)"", ""void resetUserPassword(org.zendesk.client.v2.model.User user, String password)""}), @ApiMethod(methodName = ""setGroupMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.GroupMembership> setGroupMembershipAsDefault(long user_id, org.zendesk.client.v2.model.GroupMembership groupMembership)""}), @ApiMethod(methodName = ""setOrganizationMembershipAsDefault"", signatures={""java.util.List<org.zendesk.client.v2.model.OrganizationMembership> setOrganizationMembershipAsDefault(long user_id, org.zendesk.client.v2.model.OrganizationMembership organizationMembership)""}), @ApiMethod(methodName = ""setTagOnOrganisations"", signatures={""java.util.List<String> setTagOnOrganisations(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTicket"", signatures={""java.util.List<String> setTagOnTicket(long id, String[] tags)""}), @ApiMethod(methodName = ""setTagOnTopics"", signatures={""java.util.List<String> setTagOnTopics(long id, String[] tags)""}), @ApiMethod(methodName = ""setUserPrimaryIdentity"", signatures={""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""java.util.List<org.zendesk.client.v2.model.Identity> setUserPrimaryIdentity(long userId, long identityId)""}), @ApiMethod(methodName = ""suspendUser"", signatures={""org.zendesk.client.v2.model.User suspendUser(long id)""}), @ApiMethod(methodName = ""trustTicketAudit"", signatures={""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, org.zendesk.client.v2.model.Audit audit)"", ""void trustTicketAudit(org.zendesk.client.v2.model.Ticket ticket, long id)"", ""void trustTicketAudit(long ticketId, long auditId)""}), @ApiMethod(methodName = ""unsuspendUser"", signatures={""org.zendesk.client.v2.model.User unsuspendUser(long id)""}), @ApiMethod(methodName = ""updateArticle"", signatures={""org.zendesk.client.v2.model.hc.Article updateArticle(org.zendesk.client.v2.model.hc.Article article)""}), @ApiMethod(methodName = ""updateArticleTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateArticleTranslation(Long articleId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateAutomation"", signatures={""org.zendesk.client.v2.model.Automation updateAutomation(Long automationId, org.zendesk.client.v2.model.Automation automation)""}), @ApiMethod(methodName = ""updateCategory"", signatures={""org.zendesk.client.v2.model.hc.Category updateCategory(org.zendesk.client.v2.model.hc.Category category)""}), @ApiMethod(methodName = ""updateCategoryTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateCategoryTranslation(Long categoryId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateDynamicContentItem"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItem updateDynamicContentItem(org.zendesk.client.v2.model.dynamic.DynamicContentItem item)""}), @ApiMethod(methodName = ""updateDynamicContentItemVariant"", signatures={""org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant updateDynamicContentItemVariant(Long itemId, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant variant)""}), @ApiMethod(methodName = ""updateForum"", signatures={""org.zendesk.client.v2.model.Forum updateForum(org.zendesk.client.v2.model.Forum forum)""}), @ApiMethod(methodName = ""updateGroup"", signatures={""org.zendesk.client.v2.model.Group updateGroup(org.zendesk.client.v2.model.Group group)""}), @ApiMethod(methodName = ""updateInstallation"", signatures={""void updateInstallation(int id, String json)""}), @ApiMethod(methodName = ""updateMacro"", signatures={""org.zendesk.client.v2.model.Macro updateMacro(Long macroId, org.zendesk.client.v2.model.Macro macro)""}), @ApiMethod(methodName = ""updateOrganization"", signatures={""org.zendesk.client.v2.model.Organization updateOrganization(org.zendesk.client.v2.model.Organization organization)""}), @ApiMethod(methodName = ""updateOrganizations"", signatures={""org.zendesk.client.v2.model.JobStatus updateOrganizations(java.util.List<org.zendesk.client.v2.model.Organization> organizations)"", ""org.zendesk.client.v2.model.JobStatus updateOrganizations(org.zendesk.client.v2.model.Organization[] organizations)""}), @ApiMethod(methodName = ""updateOrganizationsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateOrganizationsAsync(java.util.List<org.zendesk.client.v2.model.Organization> organizations)""}), @ApiMethod(methodName = ""updatePermissionGroup"", description=""Update permission group"", signatures={""org.zendesk.client.v2.model.hc.PermissionGroup updatePermissionGroup(org.zendesk.client.v2.model.hc.PermissionGroup permissionGroup)""}), @ApiMethod(methodName = ""updateRequest"", signatures={""org.zendesk.client.v2.model.Request updateRequest(org.zendesk.client.v2.model.Request request)""}), @ApiMethod(methodName = ""updateSection"", signatures={""org.zendesk.client.v2.model.hc.Section updateSection(org.zendesk.client.v2.model.hc.Section section)""}), @ApiMethod(methodName = ""updateSectionTranslation"", signatures={""org.zendesk.client.v2.model.hc.Translation updateSectionTranslation(Long sectionId, String locale, org.zendesk.client.v2.model.hc.Translation translation)""}), @ApiMethod(methodName = ""updateTicket"", signatures={""org.zendesk.client.v2.model.Ticket updateTicket(org.zendesk.client.v2.model.Ticket ticket)""}), @ApiMethod(methodName = ""updateTicketField"", signatures={""org.zendesk.client.v2.model.Field updateTicketField(org.zendesk.client.v2.model.Field field)""}), @ApiMethod(methodName = ""updateTickets"", signatures={""org.zendesk.client.v2.model.JobStatus updateTickets(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)"", ""org.zendesk.client.v2.model.JobStatus updateTickets(org.zendesk.client.v2.model.Ticket[] tickets)""}), @ApiMethod(methodName = ""updateTicketsAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateTicketsAsync(java.util.List<org.zendesk.client.v2.model.Ticket> tickets)""}), @ApiMethod(methodName = ""updateTopic"", signatures={""org.zendesk.client.v2.model.Topic updateTopic(org.zendesk.client.v2.model.Topic topic)""}), @ApiMethod(methodName = ""updateTrigger"", signatures={""org.zendesk.client.v2.model.Trigger updateTrigger(Long triggerId, org.zendesk.client.v2.model.Trigger trigger)""}), @ApiMethod(methodName = ""updateUser"", signatures={""org.zendesk.client.v2.model.User updateUser(org.zendesk.client.v2.model.User user)""}), @ApiMethod(methodName = ""updateUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity updateUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity updateUserIdentity(long userId, org.zendesk.client.v2.model.Identity identity)""}), @ApiMethod(methodName = ""updateUsers"", signatures={""org.zendesk.client.v2.model.JobStatus updateUsers(org.zendesk.client.v2.model.User[] users)"", ""org.zendesk.client.v2.model.JobStatus updateUsers(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUsersAsync"", signatures={""org.asynchttpclient.ListenableFuture<org.zendesk.client.v2.model.JobStatus> updateUsersAsync(java.util.List<org.zendesk.client.v2.model.User> users)""}), @ApiMethod(methodName = ""updateUserSegment"", description=""Update User Segment"", signatures={""org.zendesk.client.v2.model.hc.UserSegment updateUserSegment(org.zendesk.client.v2.model.hc.UserSegment userSegment)""}), @ApiMethod(methodName = ""verifyUserIdentity"", signatures={""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, org.zendesk.client.v2.model.Identity identity)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(org.zendesk.client.v2.model.User user, long identityId)"", ""org.zendesk.client.v2.model.Identity verifyUserIdentity(long userId, long identityId)""}), }, aliases = {})"
34885,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,23,,"        map.put(""Article"", org.zendesk.client.v2.model.hc.Article.class);"
34886,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,24,,"        map.put(""ArticleAttachments"", org.zendesk.client.v2.model.hc.ArticleAttachments.class);"
34887,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,25,,"        map.put(""ArticleId"", java.lang.Long.class);"
34888,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,26,,"        map.put(""ArticleId0"", java.lang.Long.class);"
34889,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,27,,"        map.put(""Attachment"", org.zendesk.client.v2.model.Attachment.class);"
34890,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,28,,"        map.put(""Attachments"", java.util.List.class);"
34891,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,29,,"        map.put(""Audit"", org.zendesk.client.v2.model.Audit.class);"
34892,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,30,,"        map.put(""AuditId"", java.lang.Long.class);"
34893,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,31,,"        map.put(""Automation"", org.zendesk.client.v2.model.Automation.class);"
34894,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,32,,"        map.put(""AutomationId"", java.lang.Long.class);"
34895,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,33,,"        map.put(""AutomationId0"", java.lang.Long.class);"
34896,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,34,,"        map.put(""Category"", org.zendesk.client.v2.model.hc.Category.class);"
34897,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,35,,"        map.put(""CategoryId"", java.lang.Long.class);"
34898,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,36,,"        map.put(""Category_id"", java.lang.Long.class);"
34899,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,37,,"        map.put(""Comment"", org.zendesk.client.v2.model.Comment.class);"
34900,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,38,,"        map.put(""CommentId"", java.lang.Long.class);"
34901,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,39,,"        map.put(""Content"", byte[].class);"
34902,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,40,,"        map.put(""ContentType"", java.lang.String.class);"
34903,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,41,,"        map.put(""Email"", java.lang.String.class);"
34904,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,42,,"        map.put(""EndTime"", java.util.Date.class);"
34905,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,43,,"        map.put(""ExternalId"", java.lang.String.class);"
34906,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,44,,"        map.put(""Field"", org.zendesk.client.v2.model.Field.class);"
34907,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,45,,"        map.put(""File"", java.io.File.class);"
34908,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,46,,"        map.put(""FileName"", java.lang.String.class);"
34909,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,47,,"        map.put(""Forum"", org.zendesk.client.v2.model.Forum.class);"
34910,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,48,,"        map.put(""Forum_id"", java.lang.Long.class);"
34911,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,49,,"        map.put(""Group"", org.zendesk.client.v2.model.Group.class);"
34912,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,50,,"        map.put(""GroupMembership"", org.zendesk.client.v2.model.GroupMembership.class);"
34913,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,51,,"        map.put(""Group_id"", java.lang.Long.class);"
34914,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,52,,"        map.put(""Group_membership_id"", java.lang.Long.class);"
34915,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,54,,"        map.put(""IdArticle"", java.lang.String.class);"
34916,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,55,,"        map.put(""Identity"", org.zendesk.client.v2.model.Identity.class);"
34917,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,56,,"        map.put(""IdentityId"", java.lang.Long.class);"
34918,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,57,,"        map.put(""Ids"", long[].class);"
34919,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,58,,"        map.put(""IncludeArchived"", java.lang.Boolean.class);"
34920,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,59,,"        map.put(""Inline"", java.lang.Boolean.class);"
34921,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,60,,"        map.put(""InstallationId"", java.lang.Integer.class);"
34922,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,61,,"        map.put(""Item"", org.zendesk.client.v2.model.dynamic.DynamicContentItem.class);"
34923,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,62,,"        map.put(""ItemId"", java.lang.Long.class);"
34924,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,63,,"        map.put(""Json"", java.lang.String.class);"
34925,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,64,,"        map.put(""Labels"", java.util.List.class);"
34926,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,65,,"        map.put(""Locale"", java.lang.String.class);"
34927,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,66,,"        map.put(""Macro"", org.zendesk.client.v2.model.Macro.class);"
34928,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,67,,"        map.put(""MacroId"", java.lang.Long.class);"
34929,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,68,,"        map.put(""MacroId0"", java.lang.Long.class);"
34930,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,69,,"        map.put(""MethodName"", org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class);"
34931,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,70,,"        map.put(""MonitorId"", java.lang.Long.class);"
34932,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,71,,"        map.put(""Name"", java.lang.String.class);"
34933,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,72,,"        map.put(""NewPassword"", java.lang.String.class);"
34934,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,73,,"        map.put(""NotifySubscribers"", java.lang.Boolean.class);"
34935,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,74,,"        map.put(""OauthToken"", java.lang.String.class);"
34936,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,75,,"        map.put(""OldPassword"", java.lang.String.class);"
34937,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,76,,"        map.put(""Order"", org.zendesk.client.v2.model.SortOrder.class);"
34938,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,77,,"        map.put(""Organization"", org.zendesk.client.v2.model.Organization.class);"
34939,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,78,,"        map.put(""OrganizationId"", java.lang.Long.class);"
34940,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,79,,"        map.put(""OrganizationList"", java.util.List.class);"
34941,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,80,,"        map.put(""OrganizationMembership"", org.zendesk.client.v2.model.OrganizationMembership.class);"
34942,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,81,,"        map.put(""OrganizationMembershipList"", java.util.List.class);"
34943,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,82,,"        map.put(""OrganizationMemberships"", org.zendesk.client.v2.model.OrganizationMembership[].class);"
34944,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,83,,"        map.put(""Organization_id"", java.lang.Long.class);"
34945,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,84,,"        map.put(""Organization_membership_id"", java.lang.Long.class);"
34946,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,85,,"        map.put(""Organizations"", org.zendesk.client.v2.model.Organization[].class);"
34947,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,86,,"        map.put(""Page"", java.lang.Integer.class);"
34948,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,87,,"        map.put(""Parameters"", java.lang.String.class);"
34949,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,88,,"        map.put(""Params"", java.util.Map.class);"
34950,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,89,,"        map.put(""Password"", java.lang.String.class);"
34951,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,90,,"        map.put(""PermissionGroup"", org.zendesk.client.v2.model.hc.PermissionGroup.class);"
34952,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,91,,"        map.put(""Query"", java.lang.String.class);"
34953,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,92,,"        map.put(""Request"", org.zendesk.client.v2.model.Request.class);"
34954,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,93,,"        map.put(""RequestId"", java.lang.Long.class);"
34955,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,94,,"        map.put(""Role"", java.lang.String.class);"
34956,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,95,,"        map.put(""Roles"", java.lang.String[].class);"
34957,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,96,,"        map.put(""SatisfactionRating"", org.zendesk.client.v2.model.SatisfactionRating.class);"
34958,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,97,,"        map.put(""Schedule"", org.zendesk.client.v2.model.schedules.Schedule.class);"
34959,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,98,,"        map.put(""ScheduleId"", java.lang.Long.class);"
34960,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,99,,"        map.put(""SearchTerm"", java.lang.String.class);"
34961,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,100,,"        map.put(""Section"", org.zendesk.client.v2.model.hc.Section.class);"
34962,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,101,,"        map.put(""SectionId"", java.lang.Long.class);"
34963,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,102,,"        map.put(""ServerUrl"", java.lang.String.class);"
34964,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,103,,"        map.put(""SortBy"", java.lang.String.class);"
34965,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,104,,"        map.put(""SortOrder"", org.zendesk.client.v2.model.SortOrder.class);"
34966,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,105,,"        map.put(""StartTime"", java.util.Date.class);"
34967,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,106,,"        map.put(""Status"", org.zendesk.client.v2.model.JobStatus.class);"
34968,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,107,,"        map.put(""Statuses"", java.util.List.class);"
34969,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,108,,"        map.put(""SuspendedTicket"", org.zendesk.client.v2.model.SuspendedTicket.class);"
34970,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,109,,"        map.put(""Tags"", java.lang.String[].class);"
34971,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,110,,"        map.put(""Target"", org.zendesk.client.v2.model.targets.Target.class);"
34972,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,111,,"        map.put(""TargetId"", java.lang.Long.class);"
34973,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,112,,"        map.put(""Ticket"", org.zendesk.client.v2.model.Ticket.class);"
34974,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,113,,"        map.put(""TicketForm"", org.zendesk.client.v2.model.TicketForm.class);"
34975,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,114,,"        map.put(""TicketId"", java.lang.Long.class);"
34976,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,115,,"        map.put(""TicketId0"", java.lang.Long.class);"
34977,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,116,,"        map.put(""TicketImport"", org.zendesk.client.v2.model.TicketImport.class);"
34978,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,117,,"        map.put(""TicketList"", java.util.List.class);"
34979,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,118,,"        map.put(""Tickets"", org.zendesk.client.v2.model.Ticket[].class);"
34980,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,119,,"        map.put(""Token"", java.lang.String.class);"
34981,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,120,,"        map.put(""Topic"", org.zendesk.client.v2.model.Topic.class);"
34982,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,121,,"        map.put(""Translation"", org.zendesk.client.v2.model.hc.Translation.class);"
34983,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,122,,"        map.put(""TranslationId"", java.lang.Long.class);"
34984,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,123,,"        map.put(""Trigger"", org.zendesk.client.v2.model.Trigger.class);"
34985,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,124,,"        map.put(""TriggerId"", java.lang.Long.class);"
34986,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,125,,"        map.put(""TriggerId0"", java.lang.Long.class);"
34987,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,126,,"        map.put(""TweetId"", java.lang.Long.class);"
34988,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,127,,"        map.put(""Type"", java.lang.Class.class);"
34989,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,128,,"        map.put(""UnixEpochTime"", java.lang.Long.class);"
34990,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,129,,"        map.put(""Upload"", org.zendesk.client.v2.model.Attachment.Upload.class);"
34991,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,130,,"        map.put(""User"", org.zendesk.client.v2.model.User.class);"
34992,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,131,,"        map.put(""UserId"", java.lang.Long.class);"
34993,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,132,,"        map.put(""UserId0"", java.lang.Long.class);"
34994,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,133,,"        map.put(""UserIdThatWillBeMerged"", java.lang.Long.class);"
34995,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,134,,"        map.put(""UserIdThatWillRemain"", java.lang.Long.class);"
34996,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,135,,"        map.put(""UserList"", java.util.List.class);"
34997,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,136,,"        map.put(""UserSegment"", org.zendesk.client.v2.model.hc.UserSegment.class);"
34998,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,137,,"        map.put(""User_id"", java.lang.Long.class);"
34999,./TargetProjects/camel/components/camel-zendesk/src/generated/java/org/apache/camel/component/zendesk/ZendeskEndpointConfigurationConfigurer.java,138,,"        map.put(""Username"", java.lang.String.class);"
