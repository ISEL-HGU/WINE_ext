86000,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,75,,"    jedis.set(""{user1}foo"", ""bar"");"
86001,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,75,,"    jedis.set(""{user1}foo"", ""bar"");"
86002,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,76,,"    jedis.rename(""{user1}foo"", ""{user1}newfoo"");"
86003,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,112,,"    jedis.set(""{user1}blue"", ""moon"");"
86004,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,124,,"        () -> addStringsToKeys(stringsForK1, ""{user1}k1"", numOfStrings, jedis);"
86005,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,127,,"        () -> addStringsToKeys(stringsForK2, ""{user1}k2"", numOfStringsForSecondKey, jedis);"
86006,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,155,,"    jedis.sadd(oldKey, ""value1"");"
86007,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,197,,"      jedis.set(""{user1}oldKey"", ""foo"");"
86008,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractRenameIntegrationTest.java,197,,"      jedis.set(""{user1}oldKey"", ""foo"");"
86009,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,59,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.SCAN))"
86010,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,83,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.SCAN, ""0"", ""COUNT"", ""MATCH""))"
86011,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,83,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.SCAN, ""0"", ""COUNT"", ""MATCH""))"
86012,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,115,,"    jedis.set(""{user1}a"", ""1"");"
86013,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,116,,"    ScanResult<String> result = jedis.scan(""0"", new ScanParams().match(""{user1}*""));"
86014,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,133,,"    jedis.sadd(""{user1}b"", ""green"", ""orange"");"
86015,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,133,,"    jedis.sadd(""{user1}b"", ""green"", ""orange"");"
86016,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,133,,"    jedis.sadd(""{user1}b"", ""green"", ""orange"");"
86017,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,134,,"    jedis.hset(""{user1}c"", ""potato"", ""sweet"");"
86018,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,134,,"    jedis.hset(""{user1}c"", ""potato"", ""sweet"");"
86019,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,134,,"    jedis.hset(""{user1}c"", ""potato"", ""sweet"");"
86020,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractScanIntegrationTest.java,193,,"    scanParams.match(""{user1}a*"");"
86021,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractTTLIntegrationTest.java,61,,"    jedis.set(""orange"", ""crush"");"
86022,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractTypeIntegrationTest.java,60,,"    jedis.set(""orange"", ""crush"");"
86023,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/DumpRestoreIntegrationTest.java,44,,"        () -> jedis.sendCommand(""key"", Protocol.Command.RESTORE, ""key"", ""0"", """", ""IDLETIME"", ""1""))"
86024,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractLettucePubSubIntegrationTest.java,47,,"  private static final String PATTERN = ""best-*"";"
86025,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractLettucePubSubIntegrationTest.java,91,,"    long publishCount1 = publisher.sync().publish(CHANNEL, ""message!"");"
86026,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractLettucePubSubIntegrationTest.java,92,,"    long publishCount2 = publisher.sync().publish(""newChannel!"", ""message from new channel"");"
86027,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractLettucePubSubIntegrationTest.java,132,,"    subscriber.sync().psubscribe(""new-*"");"
86028,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractLettucePubSubIntegrationTest.java,136,,"    long publishCount2 = publisher.sync().publish(""new-channel!"", ""message from new channel"");"
86029,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,100,,"    List<String> expectedMessages = Arrays.asList(""hello"");"
86030,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,105,,"      subscriber.subscribe(mockSubscriber, ""salutations"");"
86031,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,185,,"      mockSubscriber.unsubscribe(""NonExistent"");"
86032,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,345,,"    Runnable runnable = () -> subscriber.subscribe(mockSubscriber, ""salutations"", ""yuletide"");"
86033,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,404,,"    Runnable runnable = () -> subscriber.psubscribe(mockSubscriber, ""sal*"", ""yul*"");"
86034,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,404,,"    Runnable runnable = () -> subscriber.psubscribe(mockSubscriber, ""sal*"", ""yul*"");"
86035,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java,595,,"      subscriber.psubscribe(mockSubscriber, ""sal*s"");"
86036,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubCommandsIntegrationTest.java,102,,"    expectedChannels.add(""foo"".getBytes());"
86037,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubCommandsIntegrationTest.java,103,,"    expectedChannels.add(""bar"".getBytes());"
86038,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java,48,,"    client = new Jedis(""localhost"", getPort(), REDIS_CLIENT_TIMEOUT);"
86039,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java,60,,"    executor.submit(() -> client.subscribe(mockSubscriber, ""same""));"
86040,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java,75,,"    mockSubscriber.ping(""potato"");"
86041,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java,121,,"    executor.submit(() -> client.subscribe(mockSubscriber, ""salutations"", ""yuletide""));"
86042,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractSubscriptionsIntegrationTest.java,121,,"    executor.submit(() -> client.subscribe(mockSubscriber, ""salutations"", ""yuletide""));"
86043,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractHitsMissesIntegrationTest.java,452,,"    jedis.bitpos(""missed"", true);"
86044,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java,231,,"    jedis.set(""key"", ""value"");"
86045,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java,231,,"    jedis.set(""key"", ""value"");"
86046,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractRedisInfoStatsIntegrationTest.java,140,,"    jedis.set(""key"", ""value"");"
86047,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractRedisInfoStatsIntegrationTest.java,140,,"    jedis.set(""key"", ""value"");"
86048,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86049,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86050,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86051,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86052,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86053,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,67,,"    jedis.sadd(""{user1}set1"", firstSet);"
86054,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,68,,"    jedis.sadd(""{user1}set2"", secondSet);"
86055,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,69,,"    jedis.sadd(""{user1}set3"", thirdSet);"
86056,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,140,,"    jedis.set(""{user1}string1"", ""stringValue"");"
86057,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSDiffIntegrationTest.java,178,,"    jedis.sadd(""{user1}master"", masterSet.toArray(new String[] {}));"
86058,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86059,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86060,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86061,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86062,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86063,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,67,,"    jedis.sadd(""{user1}set1"", firstSet);"
86064,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,68,,"    jedis.sadd(""{user1}set2"", secondSet);"
86065,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,69,,"    jedis.sadd(""{user1}set3"", thirdSet);"
86066,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,79,,"    jedis.sadd(""{user1}newEmpty"", ""born2die"");"
86067,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,172,,"        oneSet.add(""set-"" + i + ""-"" + j);"
86068,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSInterIntegrationTest.java,177,,"    jedis.sadd(""master"", masterSet.toArray(new String[] {}));"
86069,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,62,,"    jedis.set(""{user1}a-string"", ""value"");"
86070,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,62,,"    jedis.set(""{user1}a-string"", ""value"");"
86071,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,63,,"    assertThatThrownBy(() -> jedis.smove(""{user1}a-string"", ""{user1}some-set"", ""foo""))"
86072,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,64,,"        .hasMessage(""WRONGTYPE "" + RedisConstants.ERROR_WRONG_TYPE);"
86073,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,66,,"    jedis.hset(""{user1}a-hash"", ""field"", ""value"");"
86074,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSMoveIntegrationTest.java,86,,"    String source = ""{user1}source"";"
86075,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSPopIntegrationTest.java,56,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.SPOP))"
86076,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSPopIntegrationTest.java,79,,"      masterSet.add(""master-"" + i);"
86077,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSPopIntegrationTest.java,82,,"    jedis.sadd(""master"", masterSet.toArray(new String[] {}));"
86078,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSPopIntegrationTest.java,217,,"    jedis.sadd(""set"", ""one"");"
86079,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSPopIntegrationTest.java,217,,"    jedis.sadd(""set"", ""one"");"
86080,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSRemIntegrationTest.java,59,,"    String key = ""key"";"
86081,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSRemIntegrationTest.java,60,,"    String field1 = ""field1"";"
86082,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSRemIntegrationTest.java,61,,"    String field2 = ""field2"";"
86083,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSRemIntegrationTest.java,151,,"    jedis.sadd(""master"", masterSet.toArray(new String[] {}));"
86084,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSScanIntegrationTest.java,76,,"  @SuppressWarnings(""unchecked"")"
86085,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSScanIntegrationTest.java,96,,"        () -> jedis.sendCommand(""a"", Protocol.Command.SSCAN, ""a"", ""0"", ""COUNT"", ""MATCH""))"
86086,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSScanIntegrationTest.java,96,,"        () -> jedis.sendCommand(""a"", Protocol.Command.SSCAN, ""a"", ""0"", ""COUNT"", ""MATCH""))"
86087,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86088,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86089,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86090,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86091,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,64,,"    String[] firstSet = new String[] {""pear"", ""apple"", ""plum"", ""orange"", ""peach""};"
86092,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,65,,"    String[] secondSet = new String[] {""apple"", ""microsoft"", ""linux"", ""peach""};"
86093,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,65,,"    String[] secondSet = new String[] {""apple"", ""microsoft"", ""linux"", ""peach""};"
86094,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,67,,"    jedis.sadd(""{user1}set1"", firstSet);"
86095,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,68,,"    jedis.sadd(""{user1}set2"", secondSet);"
86096,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,79,,"    jedis.sadd(""{user1}newEmpty"", ""born2die"");"
86097,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,79,,"    jedis.sadd(""{user1}newEmpty"", ""born2die"");"
86098,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,130,,"    jedis.set(""{user1}string1"", ""stringValue"");"
86099,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSUnionIntegrationTest.java,168,,"    jedis.sadd(""{user1}master"", masterSet.toArray(new String[] {}));"
86100,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/set/AbstractSetsIntegrationTest.java,88,,"    String key = ""key"";"
86101,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZAddIntegrationTest.java,51,,"  private final String member = ""member"";"
86102,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZAddIntegrationTest.java,88,,"        () -> jedis.sendCommand(""fakeKey"", Protocol.Command.ZADD, ""fakeKey"", ""1"", member, ""2""))"
86103,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,58,,"    assertThatThrownBy(() -> jedis.zcount(""fakeKey"", ""notANumber"", ""1""))"
86104,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,58,,"    assertThatThrownBy(() -> jedis.zcount(""fakeKey"", ""notANumber"", ""1""))"
86105,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,74,,"    assertThat(jedis.zcount(""fakeKey"", ""-inf"", ""inf"")).isEqualTo(0);"
86106,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,79,,"    jedis.zadd(KEY, 1, ""member"");"
86107,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,115,,"    map.put(""member1"", -10.0);"
86108,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,116,,"    map.put(""member2"", 1.0);"
86109,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZCountIntegrationTest.java,117,,"    map.put(""member3"", 10.0);"
86110,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,66,,"    assertThatThrownBy(() -> jedis.zrangeByScore(""fakeKey"", ""notANumber"", ""1""))"
86111,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,66,,"    assertThatThrownBy(() -> jedis.zrangeByScore(""fakeKey"", ""notANumber"", ""1""))"
86112,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,82,,"    assertThat(jedis.zrangeByScore(""fakeKey"", ""-inf"", ""inf"")).isEmpty();"
86113,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,87,,"    jedis.zadd(KEY, 1, ""member"");"
86114,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,125,,"    map.put(""member1"", -10.0);"
86115,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,126,,"    map.put(""member2"", 1.0);"
86116,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,127,,"    map.put(""member3"", 10.0);"
86117,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,283,,"        () -> jedis.sendCommand(KEY, Protocol.Command.ZRANGEBYSCORE, KEY, ""0"", ""10"", ""LIMIT""))"
86118,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeByScoreIntegrationTest.java,314,,"        ""WITHSCORES"","
86119,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRangeIntegrationTest.java,52,,"    members = new ArrayList<>(Arrays.asList(""mem1"", ""mem2"", ""mem3"", ""mem4"", ""mem5""));"
86120,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZRevRangeIntegrationTest.java,92,,"  @TestCaseName(""{method}: start:{0}, end:{1}"")"
86121,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/sortedset/AbstractZScoreIntegrationTest.java,57,,"    jedis.zadd(""key"", 1.0, ""member"");"
86122,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractBitCountIntegrationTest.java,55,,"    jedis.sadd(""key"", ""m1"");"
86123,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractBitCountIntegrationTest.java,61,,"    assertThat(jedis.bitcount(""does not exist"")).isEqualTo(0);"
86124,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractBitPosIntegrationTest.java,62,,"    assertThat(jedis.bitpos(""does not exist"", false)).isEqualTo(0);"
86125,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractBitPosIntegrationTest.java,71,,"    jedis.set(""emptyKey"", """");"
86126,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractDecrByIntegrationTest.java,83,,"    jedis.set(""key"", ""100"");"
86127,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractDecrIntegrationTest.java,75,,"    jedis.set(""contestedKey"", ""0"");"
86128,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractGetRangeIntegrationTest.java,102,,"    String valueWith19Characters = ""abc123babyyouknowme"";"
86129,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractGetSetIntegrationTest.java,125,,"    jedis.set(""contestedKey"", ""0"");"
86130,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractIncrByIntegrationTest.java,64,,"    String key = ""key"";"
86131,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractIncrIntegrationTest.java,80,,"    String key = ""key"";"
86132,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractIncrIntegrationTest.java,100,,"    jedis.set(""contestedKey"", ""0"");"
86133,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetBitIntegrationTest.java,56,,"        () -> jedis.sendCommand(""key"", Protocol.Command.SETBIT, ""key"", ""1"", ""value"", ""extraArg""))"
86134,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetBitIntegrationTest.java,68,,"    assertThat(jedis.setbit(""newKey"", 1, true)).isFalse();"
86135,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetEXIntegrationTest.java,48,,"    jedis.setex(""key"", 20L, ""value"");"
86136,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetIntegrationTest.java,488,,"        .hasMessageContaining(""syntax error"");"
86137,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetNXIntegrationTest.java,58,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.SETNX, ""key""))"
86138,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetRangeIntegrationTest.java,55,,"    jedis.set(""key"", ""0123456789"");"
86139,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetRangeIntegrationTest.java,55,,"    jedis.set(""key"", ""0123456789"");"
86140,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/string/AbstractSetRangeIntegrationTest.java,63,,"    assertThat(jedis.setrange(""key"", 3, ""abc"")).isEqualTo(10);"
86141,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/pubsub/SubscriptionsIntegrationTest.java,74,,"        i -> subscriptions.exists(""channel"", mock(Client.class)))"
86142,./TargetProjects/geode/geode-apis-compatible-with-redis/src/main/java/org/apache/geode/redis/internal/executor/cluster/ClusterExecutor.java,152,,"            + ""cluster_slots_assigned:"" + REDIS_SLOTS + ""\r\n"""
86143,./TargetProjects/geode/geode-apis-compatible-with-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java,98,,"            ""total_commands_processed:"" + redisStats.getCommandsProcessed() + ""\r\n"" +"
86144,./TargetProjects/geode/geode-apis-compatible-with-redis/src/main/java/org/apache/geode/redis/internal/statistics/GeodeRedisStats.java,85,,"    expirationsId = type.nameToId(""expirations"");"
86145,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/collections/SizeableObject2ObjectOpenCustomHashMapWithCursorTest.java,65,,"    IntStream.range(0, 10).forEach(i -> map.put(i, ""value-"" + i));"
86146,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisHashTest.java,225,,"    data.add(stringToBytes(""field""));"
86147,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisHashTest.java,239,,"        createRedisHash(""aSuperLongField"", ""value"", ""field"", ""aSuperLongValue"");"
86148,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisHashTest.java,268,,"    final RedisKey key = new RedisKey(stringToBytes(""key""));"
86149,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,65,,"  private final String member1 = ""member1"";"
86150,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,66,,"  private final String member2 = ""member2"";"
86151,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,71,,"          ""1.0"", member1, ""1.1"", member2, ""1.2"", ""member3"", ""1.3"", ""member4"","
86152,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,71,,"          ""1.0"", member1, ""1.1"", member2, ""1.2"", ""member3"", ""1.3"", ""member4"","
86153,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,71,,"          ""1.0"", member1, ""1.1"", member2, ""1.2"", ""member3"", ""1.3"", ""member4"","
86154,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,72,,"          ""1.4"", ""member5"", ""1.5"", ""member6"", ""1.6"", ""member7"", ""1.7"", ""member8"","
86155,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,72,,"          ""1.4"", ""member5"", ""1.5"", ""member6"", ""1.6"", ""member7"", ""1.7"", ""member8"","
86156,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,72,,"          ""1.4"", ""member5"", ""1.5"", ""member6"", ""1.6"", ""member7"", ""1.7"", ""member8"","
86157,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,72,,"          ""1.4"", ""member5"", ""1.5"", ""member6"", ""1.6"", ""member7"", ""1.7"", ""member8"","
86158,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,73,,"          ""1.8"", ""member9"", ""1.9"", ""member10"", ""2.0"", ""member11"", ""2.1"", ""member12"");"
86159,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,73,,"          ""1.8"", ""member9"", ""1.9"", ""member10"", ""2.0"", ""member11"", ""2.1"", ""member12"");"
86160,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,73,,"          ""1.8"", ""member9"", ""1.9"", ""member10"", ""2.0"", ""member11"", ""2.1"", ""member12"");"
86161,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,73,,"          ""1.8"", ""member9"", ""1.9"", ""member10"", ""2.0"", ""member11"", ""2.1"", ""member12"");"
86162,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,91,,"    RedisSortedSet sortedSet1 = createRedisSortedSet(""3.14159"", ""v1"", ""2.71828"", ""v2"");"
86163,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,91,,"    RedisSortedSet sortedSet1 = createRedisSortedSet(""3.14159"", ""v1"", ""2.71828"", ""v2"");"
86164,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/data/RedisSortedSetTest.java,183,,"  @Ignore(""Waiting on GEODE-9304"")"
86165,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,49,,"  @Parameters({""abc"", ""AbC"", ""ABC"", ""%abc"", ""123abc!@#"", ""+inf"", ""-INF""})"
86166,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,49,,"  @Parameters({""abc"", ""AbC"", ""ABC"", ""%abc"", ""123abc!@#"", ""+inf"", ""-INF""})"
86167,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,49,,"  @Parameters({""abc"", ""AbC"", ""ABC"", ""%abc"", ""123abc!@#"", ""+inf"", ""-INF""})"
86168,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,49,,"  @Parameters({""abc"", ""AbC"", ""ABC"", ""%abc"", ""123abc!@#"", ""+inf"", ""-INF""})"
86169,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,110,,"  @SuppressWarnings(""unused"")"
86170,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,135,,"        new Object[] {""inf"", true, false, false},"
86171,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,137,,"        new Object[] {""Infinity"", true, false, false},"
86172,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/netty/CoderTest.java,139,,"        new Object[] {""-inf"", false, true, false},"
86173,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/pubsub/SubscriptionsJUnitTest.java,47,,"        .add(new ChannelSubscription(client, stringToBytes(""subscriptions""), context,"
86174,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/pubsub/SubscriptionsJUnitTest.java,138,,"        new ChannelSubscription(clientTwo, stringToBytes(""monkeys""), context, subscriptions);"
86175,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/pubsub/SubscriptionsJUnitTest.java,218,,"        new ChannelSubscription(client, stringToBytes(""foo""), context, subject);"
86176,./TargetProjects/geode/geode-apis-compatible-with-redis/src/test/java/org/apache/geode/redis/internal/pubsub/SubscriptionsJUnitTest.java,221,,"        new ChannelSubscription(client, stringToBytes(""bar""), context, subject);"
86177,./TargetProjects/geode/geode-assembly/geode-assembly-test/src/main/java/org/apache/geode/session/tests/Client.java,92,,"    reqURIBuild.setParameter(""cmd"", QueryCommand.GET.name());"
86178,./TargetProjects/geode/geode-assembly/geode-assembly-test/src/main/java/org/apache/geode/session/tests/Client.java,93,,"    reqURIBuild.setParameter(""param"", key);"
86179,./TargetProjects/geode/geode-assembly/geode-assembly-test/src/main/java/org/apache/geode/session/tests/ServerContainer.java,249,,"      System.out.println(""-------------------------------------------"");"
86180,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/cache/persistence/MissingDiskStoreAcceptanceTest.java,80,,"        ""--name="" + LOCATOR_NAME,"
86181,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/cache/persistence/MissingDiskStoreAcceptanceTest.java,118,,"    gfshRule.execute(""stop server --dir="" + server1Folder);"
86182,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/cache/wan/SeveralGatewayReceiversWithSamePortAndHostnameForSendersTest.java,88,,"      .service(""haproxy"", 20334)"
86183,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/cache/wan/SeveralGatewayReceiversWithSamePortAndHostnameForSendersTest.java,99,,"    docker.execForService(""locator"", ""gfsh"", ""run"","
86184,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/cache/wan/SeveralGatewayReceiversWithSamePortAndHostnameForSendersTest.java,99,,"    docker.execForService(""locator"", ""gfsh"", ""run"","
86185,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNICQAcceptanceTest.java,100,,"    docker.loggingExecForService(""geode"","
86186,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java,53,,"      .service(""haproxy"", 15443)"
86187,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java,79,,"    region.put(""Roy Hobbs"", 9);"
86188,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java,75,,"    docker.setContainerName(""locator-maeve"", ""locator-maeve"");"
86189,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java,80,,"        ""gfsh"", ""run"", ""--file=/geode/scripts/locator-maeve.gfsh"");"
86190,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java,80,,"        ""gfsh"", ""run"", ""--file=/geode/scripts/locator-maeve.gfsh"");"
86191,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java,141,,"    assertThatThrownBy(() -> region.destroy(""hello""))"
86192,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/SingleServerSNIAcceptanceTest.java,119,,"    region.put(""hello"", ""world"");"
86193,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,130,,"            ""-Dgemfire.http-service-port="" + httpServicePort,"
86194,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,131,,"            ""-Dgemfire.jmx-manager-start=true"","
86195,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,132,,"            ""-Djava.awt.headless=true"","
86196,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,134,,"            ""-cp"", geodeDependencies.toFile().getAbsolutePath(),"
86197,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,135,,"            ""org.apache.geode.distributed.LocatorLauncher"", ""start"", LOCATOR_NAME,"
86198,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,135,,"            ""org.apache.geode.distributed.LocatorLauncher"", ""start"", LOCATOR_NAME,"
86199,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,136,,"            ""--port"", String.valueOf(locatorPort));"
86200,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,138,,"    System.out.println(""Environment: "" + System.getenv());"
86201,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,139,,"    System.out.println(""Launching command: "" + processBuilder.command());"
86202,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,158,,"          .contains(""Located war: geode-pulse"")"
86203,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,159,,"          .contains(""Adding webapp /pulse"")"
86204,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,160,,"          .contains(""Starting server location for Distribution Locator"")"
86205,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,161,,"          .doesNotContain(""geode-pulse war file was not found"")"
86206,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java,162,,"          .doesNotContain(""java.lang.IllegalStateException: No factory method found for class"");"
86207,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,72,,"        ""start server"","
86208,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,73,,"        ""--name="" + serverName,"
86209,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,74,,"        ""--dir="" + serverFolder.getAbsolutePath(),"
86210,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,75,,"        ""--disable-default-server"");"
86211,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,79,,"    Path logFile = serverFolder.toPath().resolve(serverName + "".log"");"
86212,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,84,,"        .as(""Log file "" + logFile + "" includes line matching "" + expectedLogLine)"
86213,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupNotificationTest.java,84,,"        .as(""Log file "" + logFile + "" includes line matching "" + expectedLogLine)"
86214,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupRedundancyRecoveryNotificationTest.java,71,,"        ""--name="" + LOCATOR_NAME,"
86215,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupRedundancyRecoveryNotificationTest.java,72,,"        ""--dir="" + locatorFolder,"
86216,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupRedundancyRecoveryNotificationTest.java,74,,"        ""--locators=localhost["" + locatorPort + ""]"");"
86217,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupValueRecoveryNotificationTest.java,72,,"        ""--name="" + LOCATOR_NAME,"
86218,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/ServerStartupValueRecoveryNotificationTest.java,73,,"        ""--dir="" + locatorFolder,"
86219,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,100,,"        ""start locator"","
86220,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,101,,"        ""--name="" + locatorName,"
86221,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,102,,"        ""--dir="" + workingDir,"
86222,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,103,,"        ""--port="" + locatorPort,"
86223,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,104,,"        ""--J=-Dgemfire.jmx-manager=true"","
86224,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,105,,"        ""--J=-Dgemfire.jmx-manager-start=true"","
86225,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,106,,"        ""--J=-Dgemfire.jmx-manager-http-port="" + httpPort,"
86226,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,107,,"        ""--J=-Dgemfire.jmx-manager-port="" + rmiPort);"
86227,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,115,,"          .contains(""Located war: geode-pulse"")"
86228,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,116,,"          .contains(""Adding webapp /pulse"")"
86229,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,117,,"          .contains(""Starting server location for Distribution Locator"")"
86230,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,118,,"          .doesNotContain(""geode-pulse war file was not found"")"
86231,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java,119,,"          .doesNotContain(""java.lang.IllegalStateException: No factory method found for class"");"
86232,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,85,,"        ""start server"","
86233,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,86,,"        ""--name="" + serverName,"
86234,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,87,,"        ""--dir="" + workingDir,"
86235,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,88,,"        ""--disable-default-server"");"
86236,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,96,,"          .contains(""Server "" + serverName + "" startup completed in "")"
86237,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,96,,"          .contains(""Server "" + serverName + "" startup completed in "")"
86238,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/ServerWithCustomLogConfigAcceptanceTest.java,97,,"          .doesNotContain(""java.lang.IllegalStateException: No factory method found for class"");"
86239,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,51,,"        .contains(""Region \"""" + SEPARATOR + ""region1\"" created on \""server\"""");"
86240,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,62,,"        .of(""connect --locator=localhost[10334]"","
86241,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,71,,"        .containsPattern(""eviction-action\\s+| local-destroy"")"
86242,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,72,,"        .containsPattern(""eviction-maximum-value\\s+ | 1000"");"
86243,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,77,,"        .containsPattern(""eviction-action\\s+| overflow-to-disk"")"
86244,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java,132,,"        .containsPattern(""eviction-max-memory\\s+ | 1000"");"
86245,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/shell/StatusLocatorExitCodeAcceptanceTest.java,97,,"        .withName(""test-frame"")"
86246,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/shell/StatusServerExitCodeAcceptanceTest.java,99,,"        .withName(""test-frame"")"
86247,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,102,,"        .isEqualTo(""hit"");"
86248,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,130,,"        .isEqualTo(""miss"");"
86249,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,203,,"        .as(""All timer values for region "" + replicateRegion.getName())"
86250,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,208,,"        .allMatch(tv -> tv.totalTime == 0, ""All timers have total time of zero"");"
86251,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,258,,"    replicateRegion.put(""existing-key"", ""existing-value"");"
86252,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/CacheGetsTimerTest.java,334,,"        ""--name="" + ""locator"","
86253,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/GatewayReceiverMetricsTest.java,90,,"        ""--name="" + SENDER_LOCATOR_NAME,"
86254,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/GatewayReceiverMetricsTest.java,91,,"        ""--dir="" + senderLocatorFolder,"
86255,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/GatewayReceiverMetricsTest.java,93,,"        ""--locators=localhost["" + senderLocatorPort + ""]"","
86256,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/GatewayReceiverMetricsTest.java,96,,"        ""--J=-Dgemfire.distributed-system-id="" + senderSystemId,"
86257,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/GatewayReceiverMetricsTest.java,137,,"    String connectToSenderLocatorCommand = ""connect --locator=localhost["" + senderLocatorPort + ""]"";"
86258,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/MicrometerBinderTest.java,128,,"        .as(""Meter from %s binder should exist"", JvmMemoryMetrics.class.getSimpleName())"
86259,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/RegionEntriesGaugeTest.java,94,,"    File folderForServer1 = temporaryFolder.newFolder(""server1"");"
86260,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/RegionEntriesGaugeTest.java,99,,"        ""--name="" + ""locator"","
86261,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerClusterTest.java,91,,"        ""--name="" + ""locator"","
86262,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerClusterTest.java,123,,"        .addServer(""localhost"", server1Port)"
86263,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerLonerTest.java,114,,"        .as(""Function executions timers on server"")"
86264,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/metrics/function/executions/FunctionExecutionsTimerNoResultTest.java,89,,"        ""--name="" + ""locator"","
86265,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/modules/DeployJarAcceptanceTest.java,78,,"        ""deploy --jar="" + jarFile.getCanonicalPath()).execute(gfshRule);"
86266,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/modules/DeployJarAcceptanceTest.java,80,,"    assertThat(GfshScript.of(getLocatorGFSHConnectionString(), ""list deployed"")"
86267,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/rules/DockerComposeRule.java,129,,"        .orElseThrow(() -> new IllegalArgumentException(""Unknown service name: "" + serviceName));"
86268,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,123,,"        .sanDnsName(""localhost"")"
86269,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,124,,"        .sanIpAddress(InetAddress.getByName(""127.0.0.1""))"
86270,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,130,,"    assertThatCode(() -> region.put(""foo"", ""bar""))"
86271,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,130,,"    assertThatCode(() -> region.put(""foo"", ""bar""))"
86272,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,142,,"        .commonName(""client"")"
86273,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,307,,"    Properties properties = CertStores.propertiesWith(""all"", ""any"", ""any"","
86274,./TargetProjects/geode/geode-assembly/src/acceptanceTest/java/org/apache/geode/ssl/CertificateRotationTest.java,378,,"        ""--security-properties-file="" + clusterSecurityProperties.getAbsolutePath());"
86275,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/JQFilterVerificationDUnitTest.java,103,,"        if (method.getValue().get(""jqFilter"") != null) {"
86276,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/JQFilterVerificationDUnitTest.java,124,,"    System.out.println(""JQ output: "" + response.getOutput());"
86277,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/client/CreateRegionWithDiskstoreAndSecurityDUnitTest.java,64,,"        ""data,cluster"", ""data,cluster"");"
86278,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/client/CreateRegionWithDiskstoreAndSecurityDUnitTest.java,79,,"    regionConfig.setDiskStoreName(""DISKSTORE"");"
86279,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StartLocatorCommandDUnitTest.java,126,,"        .addOption(""J"", ""-Dgemfire.enable-management-rest-service=false"");"
86280,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StatusLocatorCommandSSLTest.java,75,,"        + "" --security-properties-file="" + gfPropertiesFile.getAbsolutePath())"
86281,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/StopLocatorCommandDUnitTest.java,158,,"    gfsh.executeAndAssertThat(""list members"").doesNotContainOutput(memberName);"
86282,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClientClusterManagementSSLTest.java,70,,"    sslProps.setProperty(SSL_KEYSTORE_PASSWORD, ""password"");"
86283,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClientClusterManagementSSLTest.java,97,,"    region.setName(""customer"");"
86284,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClientClusterManagementSSLTest.java,108,,"              .setUsername(""dataManage"")"
86285,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ClusterManagementServiceOnServerTest.java,62,,"    sslProps.setProperty(SSL_KEYSTORE_PASSWORD, ""password"");"
86286,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java,62,,"    jar = new File(stagingDir, ""lib.jar"");"
86287,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java,66,,"    server1 = cluster.startServerVM(1, ""group1"", locator.getPort());"
86288,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java,95,,"        .containsExactlyInAnyOrder(""lib.v1.jar"", ""lib.v1.jar"");"
86289,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementDUnitTest.java,63,,"    clusterJar = new File(stagingDir, ""cluster.jar"");"
86290,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementDUnitTest.java,73,,"        DistributionConfig.GROUPS_NAME, ""group1"").withCredential(""cluster"", ""cluster""));"
86291,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementDUnitTest.java,107,,"        .containsExactlyInAnyOrder(""group1.v1.jar"", ""group2.v1.jar"", ""cluster.v1.jar"","
86292,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,60,,"    semanticJarVersion0 = new File(stagedDir, ""def-1.0.jar"");"
86293,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,61,,"    jarBuilder.buildJar(semanticJarVersion0, createClassContent(""version1"", ""Def""));"
86294,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,64,,"    semanticJarVersion2 = new File(stagedDir, ""def-1.2.jar"");"
86295,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,69,,"    semanticJarVersion0c = new File(stagingTempDir.newFolder(""v1c""), ""def.jar"");"
86296,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,104,,"      assertThat(Paths.get(""."").resolve(""cluster_config"").resolve(""cluster"").toFile().list())"
86297,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,104,,"      assertThat(Paths.get(""."").resolve(""cluster_config"").resolve(""cluster"").toFile().list())"
86298,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,110,,"    assertThat(server2.getWorkingDir().list()).containsExactly(""def-1.0.v1.jar"");"
86299,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,111,,"    server2.invoke(() -> verifyLoadAndHasVersion(""def"", ""jddunit.function.Def"", ""version1""));"
86300,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentSemanticVersionJarDUnitTest.java,111,,"    server2.invoke(() -> verifyLoadAndHasVersion(""def"", ""jddunit.function.Def"", ""version1""));"
86301,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,44,,"    assertResponse(client.doGet(""/swagger-ui.html"", null, null)).hasStatusCode(200);"
86302,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,45,,"    assertResponse(client.doGet(""/v1/api-docs"", null, null)).hasStatusCode(200);"
86303,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,48,,"    assertResponse(client.doGet(""/swagger-ui.html"", ""cluster"", ""cluster"")).hasStatusCode(200);"
86304,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,52,,"    assertResponse(client.doGet(""/v1"", ""data"", ""data"")).hasStatusCode(200);"
86305,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,52,,"    assertResponse(client.doGet(""/v1"", ""data"", ""data"")).hasStatusCode(200);"
86306,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,53,,"    assertResponse(client.doGet(""/v1/ping"", ""cluster"", ""cluster"")).hasStatusCode(200);"
86307,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeveloperRestSecurityConfigurationDUnitTest.java,57,,"    assertResponse(client.doGet(""/v1"", ""data"", ""invalid"")).hasStatusCode(401);"
86308,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/GatewayReceiverManagementDUnitTest.java,55,,"        .withProperty(""groups"", ""group1""));"
86309,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/GatewayReceiverManagementDUnitTest.java,90,,"    receiver.setGroup(""group2"");"
86310,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/GeodeConnectionConfigTest.java,66,,"        .withCredential(""cluster"", ""cluster""));"
86311,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java,70,,"    config.setName(""region1"");"
86312,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java,76,,"    index1.setName(""index1"");"
86313,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java,84,,"    index2.setExpression(""key"");"
86314,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java,167,,"          .containsExactlyInAnyOrder(""server-1"", ""server-2"", ""server-3"");"
86315,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexManagementDUnitTest.java,246,,"    region.setName(""region2"");"
86316,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexOnPartitionRegionTest.java,53,,"    lsRule.startServerVM(1, ""group1"", locator.getPort());"
86317,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexOnPartitionRegionTest.java,54,,"    lsRule.startServerVM(2, ""group2"", locator.getPort());"
86318,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexOnPartitionRegionTest.java,55,,"    lsRule.startServerVM(3, ""group3"", locator.getPort());"
86319,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexOnPartitionRegionTest.java,63,,"    config.setName(""testRegion"");"
86320,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListIndexOnPartitionRegionTest.java,83,,"    index.setName(""index"");"
86321,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListRegionManagementDunitTest.java,66,,"    server1 = cluster.startServerVM(1, ""group1"", locator.getPort());"
86322,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ListRegionManagementDunitTest.java,67,,"    server2 = cluster.startServerVM(2, ""group2"", locator.getPort());"
86323,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,43,,"    assertResponse(client.doGet(""/swagger-ui.html"", null, null)).hasStatusCode(200);"
86324,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,44,,"    assertResponse(client.doGet(""/v1/api-docs"", null, null)).hasStatusCode(200);"
86325,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,47,,"    assertResponse(client.doGet(""/swagger-ui.html"", ""cluster"", ""cluster"")).hasStatusCode(200);"
86326,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,51,,"    assertResponse(client.doGet(""/v1/regions"", ""cluster"", ""cluster"")).hasStatusCode(200);"
86327,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,52,,"    assertResponse(client.doGet(""/v1/ping"", ""cluster"", ""cluster"")).hasStatusCode(200);"
86328,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/ManagementRestSecurityConfigurationDUnitTest.java,56,,"    assertResponse(client.doGet(""/v1/regions"", ""data"", ""invalid"")).hasStatusCode(401);"
86329,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java,74,,"    regionConfig.setName(""customers1"");"
86330,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RebalanceManagementDunitTest.java,80,,"    regionConfig.setName(""customers2"");"
86331,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/RegionManagementDunitTest.java,67,,"    server1 = cluster.startServerVM(1, ""group1"", locator.getPort());"
86332,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/RestFunctionExecuteDUnitTest.java,88,,"    assertResponse(client.doPost(""/functions/myTestFunction"", ""dataRead"", ""dataRead"", """"))"
86333,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/RestFunctionExecuteDUnitTest.java,92,,"    assertResponse(client.doPost(""/functions/myTestFunction"", ""dataManage"", ""dataManage"", """"))"
86334,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIOnRegionFunctionExecutionDUnitTest.java,135,,"    restURLs.add(vm0.invoke(""createCacheWithGroups"","
86335,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIOnRegionFunctionExecutionDUnitTest.java,144,,"    vm0.invoke(""registerFunction(new SampleFunction())"","
86336,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIOnRegionFunctionExecutionDUnitTest.java,158,,"    vm3.invoke(""createPeer"", () -> createPeer(DataPolicy.EMPTY));"
86337,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIOnRegionFunctionExecutionDUnitTest.java,165,,"    CloseableHttpResponse response = executeFunctionThroughRestCall(""SampleFunction"","
86338,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,87,,"  private static final String PEOPLE_REGION_NAME = ""People"";"
86339,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,105,,"      ""{"" + ""\""@type\"": \""org.apache.geode.rest.internal.web.controllers.Person\"","" + ""\""id\"": 501,"""
86340,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,107,,"          + "" \""lastName\"": \""Obama\"","" + "" \""birthDate\"": \""04/08/1961\"","" + ""\""gender\"": \""MALE\"""""
86341,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,113,,"      + "" \""lastName\"": \""Patel3\"","" + "" \""birthDate\"": \""07/31/2009\"","" + ""\""gender\"": \""FEMALE\"""""
86342,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,116,,"      + "" \""lastName\"": \""Patel4\"","" + "" \""birthDate\"": \""23/08/2012\"","" + ""\""gender\"": \""MALE\"""""
86343,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,119,,"      + "" \""lastName\"": \""Patel5\"","" + "" \""birthDate\"": \""31/09/2009\"","" + ""\""gender\"": \""FEMALE\"""""
86344,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,122,,"      + "" \""lastName\"": \""Patel\"","" + "" \""birthDate\"": \""23/08/2012\"","" + ""\""gender\"": \""MALE\"""""
86345,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,177,,"    props.setProperty(JMX_MANAGER, ""true"");"
86346,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,283,,"    post.addHeader(""Content-Type"", ""application/json"");"
86347,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,283,,"    post.addHeader(""Content-Type"", ""application/json"");"
86348,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsAndInterOpsDUnitTest.java,284,,"    post.addHeader(""Accept"", ""application/json"");"
86349,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsOnGroupsFunctionExecutionDUnitTest.java,72,,"          executeFunctionThroughRestCall(""OnGroupsFunction"", null, null, null, ""g0,g1"", null);"
86350,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsOnMembersFunctionExecutionDUnitTest.java,75,,"          executeFunctionThroughRestCall(""OnMembersFunction"", null, null, null, null, null);"
86351,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsOnMembersFunctionExecutionDUnitTest.java,85,,"    restURLs.add(vm0.invoke(""createCacheAndRegisterFunction"","
86352,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,130,,"  @SuppressWarnings(""deprecation"")"
86353,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,187,,"    KeyStore clientKeys = KeyStore.getInstance(""JKS"");"
86354,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,189,,"    clientKeys.load(new FileInputStream(keystoreJKSForPath), ""password"".toCharArray());"
86355,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,275,,"    props.setProperty(SSL_WEB_SERVICE_REQUIRE_AUTHENTICATION, ""true"");"
86356,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,320,,"    props.setProperty(SSL_PROTOCOLS, ""SSL"");"
86357,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,350,,"    props.setProperty(SSL_PROTOCOLS, ""TLSv1.2"");"
86358,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java,383,,"    System.setProperty(""javax.net.debug"", ""ssl,handshake"");"
86359,./TargetProjects/geode/geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java,195,,"    String value = ""Foo"";"
86360,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/management/internal/HttpServiceIntegrationTest.java,39,,"        new GeodeDevRestClient(""/geode/v1"", ""localhost"", server.getHttpPort(), false);"
86361,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,58,,"      .withRegion(RegionShortcut.REPLICATE, ""regionA"");"
86362,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,101,,"    region.put(""customer1"", new Customer(1L, ""jon"", ""doe"", ""123-456-789""));"
86363,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,101,,"    region.put(""customer1"", new Customer(1L, ""jon"", ""doe"", ""123-456-789""));"
86364,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,101,,"    region.put(""customer1"", new Customer(1L, ""jon"", ""doe"", ""123-456-789""));"
86365,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,101,,"    region.put(""customer1"", new Customer(1L, ""jon"", ""doe"", ""123-456-789""));"
86366,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,102,,"    region.put(""customer2"", new Customer(2L, ""jane"", ""doe"", ""123-456-999""));"
86367,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,102,,"    region.put(""customer2"", new Customer(2L, ""jane"", ""doe"", ""123-456-999""));"
86368,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,116,,"    JsonNode jsonObject = restClient.doGetAndAssert(""/regionA/customer1"")"
86369,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,326,,"        restClient.doPutAndAssert(""/regionA/customer"" + i,"
86370,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,383,,"      + ""      },\n"" + ""      { \""category\"": \""fiction\"",\n"""
86371,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestRegionAPIDUnitTest.java,383,,"      + ""      },\n"" + ""      { \""category\"": \""fiction\"",\n"""
86372,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,65,,"    assertResponse(restClient.doGet(""/functions"", ""user"", ""wrongPswd"")).hasStatusCode(401);"
86373,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,65,,"    assertResponse(restClient.doGet(""/functions"", ""user"", ""wrongPswd"")).hasStatusCode(401);"
86374,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,67,,"    assertResponse(restClient.doGet(""/functions"", ""dataRead"", ""dataRead""))"
86375,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,115,,"    assertResponse(restClient.doPost(""/queries/id"", ""user"", ""wrongPswd"", ""{\""id\"" : \""foo\""}""))"
86376,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,115,,"    assertResponse(restClient.doPost(""/queries/id"", ""user"", ""wrongPswd"", ""{\""id\"" : \""foo\""}""))"
86377,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,137,,"    assertResponse(restClient.doDelete(""/queries/id"", ""stranger"", ""stranger""))"
86378,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,139,,"    assertResponse(restClient.doDelete(""/queries/id"", ""dataWrite"", ""dataWrite""))"
86379,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,160,,"    assertResponse(restClient.doHEAD(""/ping"", ""stranger"", ""stranger""))"
86380,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,165,,"    assertResponse(restClient.doHEAD(""/ping"", ""data"", ""data""))"
86381,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,266,,"    assertResponse(restClient.doGet(""/"" + REGION_NAME + ""/key1"", ""dataReadAuthRegionKey1"","
86382,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,289,,"    assertResponse(restClient.doDelete(""/"" + REGION_NAME + ""/key1"", ""dataWriteAuthRegionKey1"","
86383,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityIntegrationTest.java,301,,"        ""{ \""key9\"" : \""foo\"" }""))"
86384,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityPostProcessorTest.java,81,,"        assertResponse(restClient.doGet(""/customers/1"", ""dataReader"", ""1234567""))"
86385,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityPostProcessorTest.java,81,,"        assertResponse(restClient.doGet(""/customers/1"", ""dataReader"", ""1234567""))"
86386,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityPostProcessorTest.java,86,,"    assertEquals(""*********"", jsonNode.get(""ssn"").asText());"
86387,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/rest/internal/web/RestSecurityPostProcessorTest.java,86,,"    assertEquals(""*********"", jsonNode.get(""ssn"").asText());"
86388,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/EmbeddedPulseHttpSecurityTest.java,49,,"    HttpResponse response = client.loginToPulse(""data"", ""wrongPassword"");"
86389,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigDefaultProfileTest.java,41,,"    HttpResponse response = client.loginToPulse(""admin"", ""wrongPassword"");"
86390,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigGemfireProfileTest.java,47,,"    client.loginToPulseAndVerify(""cluster"", ""cluster"");"
86391,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityWithSSLTest.java,78,,"    securityProps.setProperty(SSL_KEYSTORE_PASSWORD, ""password"");"
86392,./TargetProjects/geode/geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityWithSSLTest.java,92,,"    client.loginToPulseAndVerify(""cluster"", ""cluster"");"
86393,./TargetProjects/geode/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/StartLocatorCommandTest.java,70,,"            .setMemberName(""testLocatorCommandLineWithRestAPI"").setBindAddress(""localhost"")"
86394,./TargetProjects/geode/geode-assembly/src/uiTest/java/org/apache/geode/tools/pulse/ui/PulseAcceptanceTestBase.java,136,,"    searchByIdAndClick(""default_grid_button"");"
86395,./TargetProjects/geode/geode-assembly/src/uiTest/java/org/apache/geode/tools/pulse/ui/PulseAcceptanceTestBase.java,149,,"          getWebDriver().findElement(By.xpath(""//table[@id='memberList']/tbody/tr[contains(@id, '"""
86396,./TargetProjects/geode/geode-assembly/src/upgradeTest/java/org/apache/geode/management/RollingUpgradeWithGfshDUnitTest.java,87,,"            .and(startServerCommand(""server1"", server1Port, locatorPort))"
86397,./TargetProjects/geode/geode-assembly/src/upgradeTest/java/org/apache/geode/management/RollingUpgradeWithGfshDUnitTest.java,88,,"            .and(startServerCommand(""server2"", server2Port, locatorPort))"
86398,./TargetProjects/geode/geode-assembly/src/upgradeTest/java/org/apache/geode/session/tests/Tomcat8ClientServerRollingUpgradeTest.java,305,,"        ""/lib/geode-modules-"" + oldVersion + "".jar"","
86399,./TargetProjects/geode/geode-common/src/test/java/org/apache/geode/util/internal/GeodeConverterTest.java,43,,"    assertThat(GeodeConverter.convertToActualType(""foo"", ""string"")).isEqualTo(""foo"");"
86400,./TargetProjects/geode/geode-common/src/test/java/org/apache/geode/util/internal/GeodeConverterTest.java,74,,"    assertThat(GeodeConverter.convertToActualType(""5.0"", ""float"")).isEqualTo((float) 5);"
86401,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcAsyncWriterIntegrationTest.java,73,,"        .writeString(""id"", ""1"").writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86402,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcAsyncWriterIntegrationTest.java,73,,"        .writeString(""id"", ""1"").writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86403,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcAsyncWriterIntegrationTest.java,152,,"        statement.executeQuery(""select * from "" + REGION_TABLE_NAME + "" order by id asc"");"
86404,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcAsyncWriterIntegrationTest.java,152,,"        statement.executeQuery(""select * from "" + REGION_TABLE_NAME + "" order by id asc"");"
86405,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcAsyncWriterIntegrationTest.java,219,,"    PdxInstance compositeKey1 = cache.createPdxInstanceFactory(""IdAgeKeyType"").neverDeserialize()"
86406,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,102,,"    statement.execute(""Create Table "" + TABLE_NAME"
86407,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,201,,"    createRegionCmd.append(""create region --name="" + REGION_NAME + "" --type=REPLICATE"""
86408,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,209,,"              .writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86409,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,209,,"              .writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86410,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,209,,"              .writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86411,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,211,,"      assertThatThrownBy(() -> region.put(""key1"", pdxEmployee1))"
86412,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,256,,"              .writeString(""id"", ""id1"").writeString(""name"", ""Emp1"").writeInt(""age"", 55).create();"
86413,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,358,,"    MemberVM server1 = createTableForGroup(4, ""datagroup"");"
86414,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,360,,"    MemberVM accessor1 = addServerForGroup(6, ""accessorgroup"");"
86415,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,463,,"    final String key = ""emp1"";"
86416,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcDistributedTest.java,887,,"            ? "" --type="" + RegionShortcut.REPLICATE_PROXY.name()"
86417,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcLoaderIntegrationTest.java,102,,"        new FieldMapping(""name"", FieldType.STRING.name(), ""name"", JDBCType.VARCHAR.name(), true),"
86418,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcLoaderIntegrationTest.java,132,,"        .execute(""Insert into "" + REGION_TABLE_NAME + ""(id, name, age) values('1', 'Emp1', 21)"");"
86419,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcLoaderIntegrationTest.java,140,,"    assertThat(value.getName()).isEqualTo(""Emp1"");"
86420,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,80,,"        .writeString(""name"", ""Emp1"")"
86421,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,81,,"        .writeInt(""age"", 55).create();"
86422,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,100,,"      statement.execute(""Create Table "" + REGION_TABLE_NAME"
86423,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,188,,"        statement.executeQuery(""select * from "" + REGION_TABLE_NAME + "" order by id asc"");"
86424,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,188,,"        statement.executeQuery(""select * from "" + REGION_TABLE_NAME + "" order by id asc"");"
86425,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/JdbcWriterIntegrationTest.java,217,,"    PdxInstance compositeKey1 = cache.createPdxInstanceFactory(""IdAgeKeyType"").neverDeserialize()"
86426,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerIntegrationTest.java,82,,"        + "" VARCHAR(10) primary key not null,"" + quote + ""name"" + quote + "" VARCHAR(10),"" + quote"
86427,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerIntegrationTest.java,82,,"        + "" VARCHAR(10) primary key not null,"" + quote + ""name"" + quote + "" VARCHAR(10),"" + quote"
86428,./TargetProjects/geode/geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerIntegrationTest.java,83,,"        + ""age"" + quote + "" int)"");"
86429,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,87,,"  private static final String EMPLOYEE_REGION = ""employeeRegion"";"
86430,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,162,,"          DataSource ds = JNDIInvoker.getDataSource(""connection"");"
86431,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,182,,"    gfsh.executeAndAssertThat(""create region --name="" + regionName + "" --type=REPLICATE"""
86432,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,304,,"    csb.addOption(TABLE_NAME, ""myTable"");"
86433,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,306,,"    csb.addOption(ID_NAME, ""myId"");"
86434,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,307,,"    csb.addOption(SCHEMA_NAME, ""mySchema"");"
86435,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,505,,"        new FieldMapping(""name"", FieldType.STRING.name(), ""NAME"", JDBCType.VARCHAR.name(), true));"
86436,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,530,,"        .isEqualTo(""org.apache.geode.connectors.jdbc.internal.cli.ResourcePDX"");"
86437,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,537,,"        .isEqualTo(new FieldMapping(""id"", ""STRING"", ""ID"", ""VARCHAR"", false));"
86438,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,537,,"        .isEqualTo(new FieldMapping(""id"", ""STRING"", ""ID"", ""VARCHAR"", false));"
86439,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,541,,"        .isEqualTo(new FieldMapping(""age"", ""INT"", ""AGE"", ""INTEGER"", true));"
86440,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java,603,,"    String region1Name = ""region1"";"
86441,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandForProxyRegionDUnitTest.java,136,,"          DataSource ds = JNDIInvoker.getDataSource(""connection"");"
86442,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandForProxyRegionDUnitTest.java,152,,"            : "" --type=PARTITION"") + "" --groups="" + groupNames)"
86443,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandForProxyRegionDUnitTest.java,268,,"    csb.addOption(TABLE_NAME, ""myTable"");"
86444,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandForProxyRegionDUnitTest.java,270,,"    csb.addOption(ID_NAME, ""myId"");"
86445,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandForProxyRegionDUnitTest.java,271,,"    csb.addOption(SCHEMA_NAME, ""mySchema"");"
86446,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandDUnitTest.java,71,,"        .tableHasRowWithValues(""Property"", ""Value"", ""name"", ""simple"")"
86447,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandDUnitTest.java,71,,"        .tableHasRowWithValues(""Property"", ""Value"", ""name"", ""simple"")"
86448,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandDUnitTest.java,71,,"        .tableHasRowWithValues(""Property"", ""Value"", ""name"", ""simple"")"
86449,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandDUnitTest.java,72,,"        .tableHasRowWithValues(""Property"", ""Value"", ""pooled"", ""false"")"
86450,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,106,,"        DataSource ds = JNDIInvoker.getDataSource(""connection"");"
86451,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,142,,"      writer.writeString(""name"", name);"
86452,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,186,,"  @SuppressWarnings(""deprecation"")"
86453,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,195,,"    gfsh.executeAndAssertThat(""create region --name="" + regionName + "" --type=REPLICATE"")"
86454,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,195,,"    gfsh.executeAndAssertThat(""create region --name="" + regionName + "" --type=REPLICATE"")"
86455,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,201,,"    csb.addOption(SCHEMA_NAME, ""mySchema"");"
86456,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,202,,"    csb.addOption(TABLE_NAME, ""testTable"");"
86457,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,204,,"    csb.addOption(SYNCHRONOUS_NAME, ""true"");"
86458,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,205,,"    csb.addOption(ID_NAME, ""myId"");"
86459,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,215,,"    commandResultAssert.doesNotContainOutput(""Mapping for group"");"
86460,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,229,,"    String groupName = ""group1"";"
86461,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,236,,"        ""create region --name="" + regionName + "" --type=REPLICATE --group="" + groupName)"
86462,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,285,,"    csb.addOption(SYNCHRONOUS_NAME, ""false"");"
86463,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandDUnitTest.java,359,,"    String groupName2 = ""group2"";"
86464,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyMappingCommandDunitTest.java,98,,"    gfsh.executeAndAssertThat(""create region --name="" + TEST_REGION + "" --type=PARTITION"")"
86465,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyMappingCommandDunitTest.java,98,,"    gfsh.executeAndAssertThat(""create region --name="" + TEST_REGION + "" --type=PARTITION"")"
86466,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyMappingCommandDunitTest.java,101,,"        ""create region --name="" + GROUP1_REGION + "" --groups="" + TEST_GROUP1 + "" --type=PARTITION"")"
86467,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyMappingCommandDunitTest.java,170,,"          DataSource ds = JNDIInvoker.getDataSource(""myDataSource"");"
86468,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,56,,"  @SuppressWarnings(""deprecation"")"
86469,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,61,,"        .statusIsSuccess().tableHasColumnOnlyWithValues(""Member"", ""server-1"");"
86470,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,61,,"        .statusIsSuccess().tableHasColumnOnlyWithValues(""Member"", ""server-1"");"
86471,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,63,,"    CommandResultAssert result = gfsh.executeAndAssertThat(""list data-source"");"
86472,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86473,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86474,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86475,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86476,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86477,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,66,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""false"","
86478,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,67,,"            ""jdbc:derby:memory:newDB;create=true"");"
86479,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandDUnitTest.java,151,,"        .tableHasRowWithValues(""name"", ""pooled"", ""in use"", ""url"", ""simple"", ""false"", ""true"","
86480,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,129,,"  @SuppressWarnings(""deprecation"")"
86481,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,137,,"        ""create data-source --name=connection --url=\""jdbc:derby:memory:newDB;create=true\"""")"
86482,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,139,,"    gfsh.executeAndAssertThat(""create region --name="" + regionName + "" --type=REPLICATE"")"
86483,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,139,,"    gfsh.executeAndAssertThat(""create region --name="" + regionName + "" --type=REPLICATE"")"
86484,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,143,,"      String mapping = ""create jdbc-mapping --region="" + regionName + "" --data-source=connection """
86485,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,143,,"      String mapping = ""create jdbc-mapping --region="" + regionName + "" --data-source=connection """
86486,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,173,,"          + ""--table=myTable --schema=mySchema --pdx-name="" + IdAndName.class.getName();"
86487,./TargetProjects/geode/geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandDUnitTest.java,177,,"          new CommandStringBuilder(LIST_MAPPING + "" --groups="" + TEST_GROUP1);"
86488,./TargetProjects/geode/geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/SqlHandler.java,317,,"            ""The key \"""" + key + ""\"" of class \"""" + key.getClass().getName()"
86489,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/JdbcConnectorExceptionTest.java,45,,"    Exception e = JdbcConnectorException.createException(""message"", new IllegalStateException());"
86490,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/JdbcPooledDataSourceFactoryTest.java,30,,"    poolProperties.setProperty(""connection-url"", ""foo"");"
86491,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/JdbcPooledDataSourceFactoryTest.java,84,,"    poolProperties.setProperty(""foo-bar-zoo"", ""value"");"
86492,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/JdbcWriterTest.java,51,,"  @SuppressWarnings(""unchecked"")"
86493,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,40,,"    mapping = new RegionMapping(null, ""pdxClassName"", null, null, null, null, null);"
86494,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,81,,"    String ids = ""ids"";"
86495,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,89,,"    String catalog = ""catalog"";"
86496,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,97,,"    String schema = ""schema"";"
86497,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,106,,"        new RegionMapping(""regionName"", ""pdxClassName"", null, ""dataSourceName"", null, null, null);"
86498,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/RegionMappingTest.java,106,,"        new RegionMapping(""regionName"", ""pdxClassName"", null, ""dataSourceName"", null, null, null);"
86499,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,213,,"    Object createKey = ""createKey"";"
86500,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,382,,"    Object compositeKeyFieldValueOne = ""fieldValueOne"";"
86501,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,383,,"    Object compositeKeyFieldValueTwo = ""fieldValueTwo"";"
86502,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,386,,"    when(compositeKey.getFieldNames()).thenReturn(Arrays.asList(""fieldOne"", ""fieldTwo""));"
86503,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,386,,"    when(compositeKey.getFieldNames()).thenReturn(Arrays.asList(""fieldOne"", ""fieldTwo""));"
86504,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,405,,"    when(regionMapping.getIds()).thenReturn(""fieldOne,fieldTwo"");"
86505,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,730,,"                ""The key \"""" + compositeKey + ""\"" should have 2 fields but has 1 fields."");"
86506,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,739,,"    when(compositeKey.getFieldNames()).thenReturn(Arrays.asList(""fieldOne"", ""fieldTwoWrong""));"
86507,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/SqlHandlerTest.java,827,,"    String nonKeyColumn = ""otherColumn"";"
86508,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,129,,"    when(columnResultSet.getString(""COLUMN_NAME"")).thenReturn(""existingColumn"");"
86509,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,160,,"        .thenReturn(""ExistentId"");"
86510,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,249,,"    when(tablesResultSet.getString(""TABLE_NAME"")).thenReturn(""otherTable"");"
86511,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,559,,"    String stringToFind = ""stringToFind"";"
86512,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,561,,"    String column = ""column"";"
86513,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataManagerTest.java,562,,"    String description = ""description"";"
86514,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/TableMetaDataTest.java,105,,"    tableName = ""myTable"";"
86515,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateDataSourceCommandTest.java,244,,"    CliFunctionResult result = new CliFunctionResult(""server1"", true,"
86516,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateDataSourceCommandTest.java,245,,"        ""Tried creating jndi binding \""name\"" on \""server1\"""");"
86517,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateDataSourceInterceptorTest.java,51,,"    when(parseResult.getParamValueAsString(CreateDataSourceCommand.POOLED)).thenReturn(""false"");"
86518,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandTest.java,163,,"    String ids = ""ids"";"
86519,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandTest.java,164,,"    String catalog = ""catalog"";"
86520,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandTest.java,165,,"    String schema = ""schema"";"
86521,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingFunctionTest.java,70,,"  @SuppressWarnings(""unchecked"")"
86522,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java,211,,"    Set<String> columnNames = new LinkedHashSet<>(Arrays.asList(""col1"", ""col2""));"
86523,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java,211,,"    Set<String> columnNames = new LinkedHashSet<>(Arrays.asList(""col1"", ""col2""));"
86524,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java,247,,"    when(pdxField1.getFieldName()).thenReturn(""COL1"");"
86525,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandTest.java,211,,"    configProperties.add(new ConfigProperty(""name1"", ""value1""));"
86526,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandTest.java,211,,"    configProperties.add(new ConfigProperty(""name1"", ""value1""));"
86527,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandTest.java,283,,"    when(regionMapping.getDataSourceName()).thenReturn(""dataSourceName"");"
86528,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandTest.java,298,,"      when(regionConfig1.getName()).thenReturn(""regionName1"");"
86529,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeDataSourceCommandTest.java,316,,"      when(regionConfig3.getName()).thenReturn(""regionName3"");"
86530,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,82,,"    when(regionConfig.getName()).thenReturn(""region1"");"
86531,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,95,,"    regionMapping.setPdxName(""class1"");"
86532,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,96,,"    regionMapping.setTableName(""table1"");"
86533,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,97,,"    regionMapping.setDataSourceName(""name1"");"
86534,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,98,,"    regionMapping.setIds(""myId"");"
86535,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,100,,"    regionMapping.setCatalog(""myCatalog"");"
86536,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,101,,"    regionMapping.setSchema(""mySchema"");"
86537,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,209,,"        .containsEntry(SPECIFIED_ID_NAME, ""true"")"
86538,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DescribeMappingCommandTest.java,238,,"        .containsEntry(SPECIFIED_ID_NAME, ""false"")"
86539,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,95,,"    gfsh.executeAndAssertThat(command, COMMAND + "" --name=name"").statusIsError()"
86540,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,96,,"        .containsOutput(""does not exist."");"
86541,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,130,,"    jndiBinding.setJndiName(""name"");"
86542,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,185,,"    verify(command).updateConfigForGroup(eq(""cluster""), eq(cacheConfig), isNotNull());"
86543,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,228,,"        new CliFunctionResult(""server1"", true, ""Data source \""name\"" not found on \""server1\"""");"
86544,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,228,,"        new CliFunctionResult(""server1"", true, ""Data source \""name\"" not found on \""server1\"""");"
86545,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,240,,"  @SuppressWarnings(""deprecation"")"
86546,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,256,,"        .tableHasColumnOnlyWithValues(""Member"", ""server1"")"
86547,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,257,,"        .tableHasColumnOnlyWithValues(""Status"", ""OK"")"
86548,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,258,,"        .tableHasColumnOnlyWithValues(""Message"", ""Data source \""name\"" not found on \""server1\"""");"
86549,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyDataSourceCommandTest.java,294,,"        new CliFunctionResult(""server1"", true, ""Data source \""name\"" destroyed on \""server1\"""");"
86550,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/DestroyMappingCommandFunctionTest.java,64,,"  @SuppressWarnings(""unchecked"")"
86551,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandTest.java,69,,"    binding.setConnectionUrl(""myURL"");"
86552,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandTest.java,126,,"        .isEqualTo(Arrays.asList(DATA_SOURCE_NAME, ""false"", ""false"", ""myURL""));"
86553,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandTest.java,138,,"        .isEqualTo(Arrays.asList(DATA_SOURCE_NAME, ""true"", ""false"", ""myURL""));"
86554,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDataSourceCommandTest.java,218,,"    when(regionMapping.getDataSourceName()).thenReturn(""dataSourceName"");"
86555,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDriversCommandTest.java,58,,"    driverNames.add(""Driver.Class.One"");"
86556,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDriversCommandTest.java,59,,"    driverNames.add(""Driver.Class.Two"");"
86557,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDriversCommandTest.java,60,,"    driverNames.add(""Driver.Class.Three"");"
86558,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListDriversCommandTest.java,61,,"    result = new CliFunctionResult(""Server 1"", driverNames,"
86559,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandTest.java,96,,"    when(region1Config.getName()).thenReturn(""region1"");"
86560,./TargetProjects/geode/geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/ListMappingCommandTest.java,97,,"    when(region2Config.getName()).thenReturn(""region2"");"
86561,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolAndLoaderDUnitTest.java,88,,"        factory.create(""pool1"");"
86562,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolAndLoaderDUnitTest.java,196,,"          fail(""Should have gotten a cache writer exception"");"
86563,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolAndLoaderDUnitTest.java,329,,"        region.put(""c"", ""client1-c"");"
86564,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,271,,"    final Object createCallbackArg = ""CREATE CALLBACK ARG"";"
86565,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,274,,"    vm0.invoke(""Create Cache Server"", () -> {"
86566,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,294,,"    vm1.invoke(""Create region"", () -> {"
86567,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,309,,"        region.create(i, ""old"" + i, createCallbackArg);"
86568,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,312,,"        region.put(i, ""new"" + i, updateCallbackArg);"
86569,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,322,,"    vm1.invoke(""Close Pool"", () -> {"
86570,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,421,,"      logger.info(""before create server"");"
86571,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,447,,"    logger.info(""before create client"");"
86572,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,448,,"    vm2.invoke(""Create Cache Server Client"", createClient);"
86573,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,461,,"          String expected = ""key-"" + i;"
86574,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,469,,"    AsyncInvocation inv2 = vm2.invokeAsync(""Initialize Client"", initializeClient);"
86575,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1020,,"    vm1.invoke(""Put values"", () -> {"
86576,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1024,,"        region.put(""key-string-"" + i, ""value-"" + i);"
86577,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1024,,"        region.put(""key-string-"" + i, ""value-"" + i);"
86578,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1029,,"        region.put(""key-object-"" + i, order);"
86579,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1032,,"        region.put(""key-bytes-"" + i, (""value-"" + i).getBytes());"
86580,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1237,,"    vm1.invoke(""Populate region"", () -> {"
86581,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1258,,"    vm1.invoke(""Turn on history"", () -> {"
86582,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1270,,"        region.put(i, ""new"" + i, ""callbackArg"" + i);"
86583,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1274,,"    vm1.invoke(""Verify invalidates"", () -> {"
86584,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1305,,"        region.destroy(key, ""destroyCB"" + i);"
86585,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1335,,"    vm2.invoke(""recreate"", () -> {"
86586,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1511,,"        region.create(key, ""create"" + i, ""createCB"" + i);"
86587,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1540,,"        assertThat(""create"" + i).isEqualTo(region.get(key, ""loadCB"" + i));"
86588,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1966,,"    vm1.invoke(""Create Entries and Register Interest"", () -> {"
86589,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1968,,"      assertThat(region.get(""key-1"")).isEqualTo(""key-1"");"
86590,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1969,,"      assertThat(region.get(""key-2"")).isEqualTo(""key-2"");"
86591,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1981,,"    vm1.invoke(""Put New Values"", () -> {"
86592,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1984,,"      region.put(""key-2"", ""vm1-key-2"");"
86593,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,1990,,"    vm2.invoke(""Validate Entries"", () -> {"
86594,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2001,,"      region.put(""key-1"", ""vm2-key-1"");"
86595,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2017,,"    vm1.invoke(""Unregister Interest"", () -> {"
86596,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2125,,"      assertThat(region.get(""key-6"")).isEqualTo(""key-6"");"
86597,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2743,,"      region.create(""key-1"", ""key-1-create"", ""key-1-create"");"
86598,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2745,,"      region.put(""key-1"", ""key-1-update"", ""key-1-update"");"
86599,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2747,,"      region.destroy(""key-1"", ""key-1-destroy"");"
86600,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java,2865,,"    vm2.invoke(""Put Value"", () -> {"
86601,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/PRCreationTotalNumBucketsDistributedTest.java,65,,"      regionFactory.create(""PR1"");"
86602,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ReplicateRegionNetsearchDistributedTest.java,100,,"      region.put(""key-1"", ""value-1"");"
86603,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/ReplicateRegionNetsearchDistributedTest.java,100,,"      region.put(""key-1"", ""value-1"");"
86604,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/ClientServerRegisterInterestsDUnitTest.java,120,,"          Region<String, String> example = regionFactory.create(""Example"");"
86605,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/ClientServerRegisterInterestsDUnitTest.java,232,,"      String value = put(SEPARATOR + ""Example"", ""2"", ""TWO"");"
86606,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceDUnitTest.java,88,,"    int locatorPort = vm0.invoke(""Start Locator"", () -> startLocator(hostName, """"));"
86607,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceDUnitTest.java,92,,"    vm1.invoke(""Start BridgeServer"", () -> startBridgeServer(null, locators));"
86608,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceDUnitTest.java,94,,"    vm2.invoke(""StartBridgeClient"","
86609,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceDUnitTest.java,291,,"    vm1.invoke(""Start BridgeServer"", () -> startBridgeServer(new String[] {""group1"", ""group2""},"
86610,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/AutoConnectionSourceDUnitTest.java,291,,"    vm1.invoke(""Start BridgeServer"", () -> startBridgeServer(new String[] {""group1"", ""group2""},"
86611,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,116,,"  private static final String CLIENT_KEY_STORE = ""default.keystore"";"
86612,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,212,,"    String cacheServerSslprotocols = ""any"";"
86613,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,231,,"      gemFireProps.setProperty(CLUSTER_SSL_KEYSTORE_TYPE, ""jks"");"
86614,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,233,,"      gemFireProps.setProperty(CLUSTER_SSL_KEYSTORE_PASSWORD, ""password"");"
86615,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,244,,"    Region r = factory.create(""serverRegion"");"
86616,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CacheServerSSLConnectionDUnitTest.java,346,,"    region.put(""clientkey"", ""clientvalue"");"
86617,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/ClientServerHostNameVerificationDistributedTest.java,68,,"    Region r = factory.create(""region"");"
86618,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/ClientServerHostNameVerificationDistributedTest.java,81,,"        .commonName(""locator"")"
86619,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/ClientServerHostNameVerificationDistributedTest.java,93,,"        .commonName(""server"")"
86620,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/ClientServerHostNameVerificationDistributedTest.java,102,,"        .commonName(""client"")"
86621,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CustomSSLProviderDistributedTest.java,88,,"    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + ""region"", 1);"
86622,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CustomSSLProviderDistributedTest.java,101,,"        .commonName(""locator"")"
86623,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CustomSSLProviderDistributedTest.java,112,,"        .commonName(""server"")"
86624,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/CustomSSLProviderDistributedTest.java,120,,"        .commonName(""client"")"
86625,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/LocatorLoadBalancingDUnitTest.java,91,,"    int locatorPort = vm0.invoke(""Start Locator"", () -> startLocator(hostName, """"));"
86626,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/LocatorLoadBalancingDUnitTest.java,95,,"    int serverPort = vm1.invoke(""Start BridgeServer"","
86627,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/LocatorLoadBalancingDUnitTest.java,103,,"    vm0.invoke(""check Locator Load"", () -> checkLocatorLoad(expected));"
86628,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/LocatorLoadBalancingDUnitTest.java,330,,"    vm1.invoke(""Check Connection Count"", () -> checkConnectionCount(6));"
86629,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/LocatorLoadBalancingDUnitTest.java,417,,"    vm1.invoke(""changeLoad"", () -> changeLoad(load1));"
86630,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/SSLDualServerNoClientAuthDUnitTest.java,106,,"    gemFireProps.setProperty(SSL_KEYSTORE_PASSWORD, ""password"");"
86631,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/SSLNoClientAuthDUnitTest.java,142,,"    String cacheServerSslprotocols = ""any"";"
86632,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/SSLNoClientAuthDUnitTest.java,160,,"    gemFireProps.setProperty(SERVER_SSL_KEYSTORE_PASSWORD, ""password"");"
86633,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/client/internal/SSLNoClientAuthDUnitTest.java,170,,"    Region r = factory.create(""serverRegion"");"
86634,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,157,,"      ""<ExpectedException action=add>"" + expectedEx + ""</ExpectedException>"";"
86635,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,473,,"        gfCache.getInternalResourceManager().getHeapMonitor().updateStateAndSendEvent(950, ""test"");"
86636,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,1000,,"          fail(""expected low memory exception was not thrown"");"
86637,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,1209,,"                fail(""expected LowMemoryExcception was not thrown"");"
86638,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,1276,,"        Pool p = PoolManager.find(""pool1"");"
86639,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsDUnitTest.java,1439,,"            Assert.fail(""Unexpected exception: "", ex);"
86640,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,104,,"      ""<ExpectedException action=add>"" + this.expectedEx + ""</ExpectedException>"";"
86641,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,178,,"        getRootRegion().getSubregion(regionName).destroy(""oh3"");"
86642,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,296,,"        if (!region.containsKey(""oh1"")) {"
86643,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,297,,"          region.put(""oh5"", new byte[954204]);"
86644,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,613,,"                return ""expected region "" + r + "" to set memoryThreshold"";"
86645,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,1062,,"                return ""verify critical state"";"
86646,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/MemoryThresholdsOffHeapDUnitTest.java,1432,,"            Assert.fail(""Unexpected exception: "", ex);"
86647,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,136,,"    final String[] regionPath = new String[] {getUniqueName() + ""-PR-0"", getUniqueName() + ""-PR-1""};"
86648,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,136,,"    final String[] regionPath = new String[] {getUniqueName() + ""-PR-0"", getUniqueName() + ""-PR-1""};"
86649,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,1266,,"        assertEquals(""SRC member reports redundancy "" + redundancy, redundantCopies, redundancy);"
86650,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,1288,,"        assertNotNull(""Bucket is null on DST member"", bucket);"
86651,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,1293,,"        assertTrue(""DST member is not hosting bucket"", bucket.isHosting());"
86652,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/management/ResourceManagerDUnitTest.java,1294,,"        assertNotNull(""BucketRegion is null on DST member"", bucketRegion);"
86653,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/partition/PartitionRegionHelperDUnitTest.java,75,,"    SerializableRunnable createPrRegion = new SerializableRunnable(""createRegion"") {"
86654,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/partition/PartitionRegionHelperDUnitTest.java,85,,"        cache.createRegion(""region1"", attr.create());"
86655,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/partition/PartitionRegionHelperDUnitTest.java,588,,"    vm0.invoke(new SerializableRunnable(""create data"") {"
86656,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/partition/PartitionRegionHelperDUnitTest.java,613,,"          fail(""Should have received an exception"");"
86657,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompactRangeIndexDUnitTest.java,65,,"    utils.createReplicateRegion(""exampleRegion"", vm0);"
86658,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,152,,"        ""select * from "" + regName + "" where getMapField['1'] in SET ($1,$2)"";"
86659,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,152,,"        ""select * from "" + regName + "" where getMapField['1'] in SET ($1,$2)"";"
86660,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,154,,"    vm0.invoke(new CacheSerializableRunnable(""Create cache server"") {"
86661,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,159,,"        createIndex(""myIndex"", ""ts.getMapField[*]"", regName + "" ts"");"
86662,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,159,,"        createIndex(""myIndex"", ""ts.getMapField[*]"", regName + "" ts"");"
86663,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,159,,"        createIndex(""myIndex"", ""ts.getMapField[*]"", regName + "" ts"");"
86664,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CompiledInDUnitTest.java,199,,"    final String queryString = ""select * from "" + regName + "" where getMapField['1'] in SET ($1)"";"
86665,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,127,,"    String regionName = ""portfolio"";"
86666,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,128,,"    String INDEX_NAME = ""key_index1"";"
86667,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,139,,"    map1.put(""SUN"", 1);"
86668,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,140,,"    map1.put(""IBM"", 2);"
86669,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,141,,"    map1.put(""AOL"", 4);"
86670,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,146,,"    Index keyIndex1 = queryService.createIndex(INDEX_NAME, ""positions[*]"", SEPARATOR + ""portfolio"");"
86671,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,150,,"    map2.put(""APPL"", 3);"
86672,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,151,,"    map2.put(""AOL"", ""hello"");"
86673,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,155,,"    assertEquals(""Put must be successful"", 2, region.size());"
86674,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,163,,"            ""select * from "" + SEPARATOR"
86675,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/CorruptedIndexIntegrationTest.java,164,,"                + ""portfolio p where p.positions['AOL'] = 'hello' OR p.positions['IBM'] = 2"")"
86676,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/HashIndexDUnitTest.java,58,,"    utils.createReplicateRegion(""exampleRegion"", vm0);"
86677,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/IndexUsageInJoinQueryDistributedTest.java,112,,"    queryService.createKeyIndex(""productIdKeyIndex"", ""productId"", productRegion.getFullPath());"
86678,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,67,,"    final String[] queries = {""select * from "" + name + "" where status = 'inactive'"","
86679,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,68,,"        ""select p from "" + name + "" p where p.status = 'inactive'"","
86680,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,68,,"        ""select p from "" + name + "" p where p.status = 'inactive'"","
86681,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,69,,"        ""select * from "" + name + "" p, p.positions.values v where v.secId = 'IBM'"","
86682,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,70,,"        ""select p.status from "" + name + "" p where p.status = 'inactive' or p.ID > 0"","
86683,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,70,,"        ""select p.status from "" + name + "" p where p.status = 'inactive' or p.ID > 0"","
86684,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,71,,"        ""select * from "" + name + "" p where p.status = 'inactive' and p.ID >= 0"","
86685,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,72,,"        ""select p.status from "" + name + "" p where p.status in set ('inactive', 'active')"","
86686,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,73,,"        ""select * from "" + name + "" p where p.ID > 0 and p.ID < 10"",};"
86687,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,76,,"    server1.invoke(new SerializableCallable(""Create Server1"") {"
86688,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,83,,"          r1.put(""key-"" + i, p);"
86689,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,101,,"          Assert.fail(""Failed to get QueryService."", e);"
86690,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,107,,"            assertTrue(""Size of resultset should be greater than 0 for query: "" + queries[i],"
86691,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,110,,"            Assert.fail(""Failed executing query "" + queries[i], e);"
86692,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,134,,"        ""select distinct * from "" + name + "" where status = 'inactive'"","
86693,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,172,,"        PositionPdx pos = new PositionPdx(""IBM"", 100);"
86694,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,184,,"        out.writeString(""secId"", pos.secId);"
86695,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,215,,"                        + r[j].getClass() + "" for query: "" + queries[i]);"
86696,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,250,,"        ""select v from "" + name + "" p, p.positions.values v where v.secId = 'IBM'"", // 4"
86697,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,257,,"        ""select v from "" + name + "" p, p.positions.values v where p.status = 'inactive'"", // numberOfEntries*2"
86698,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,259,,"        ""select distinct p from "" + name"
86699,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,267,,"            + "" p where p.status = 'inactive')"", // numberOfEntries"
86700,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,268,,"        ""select * from "" + name + "" r1, "" + name2 + "" r2 where r1.status = r2.status"", // 200"
86701,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,357,,"            assertEquals(""Expected and actual results do not match for query: "" + queries[i],"
86702,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,470,,"                    fail(""Result object should be a domain object and not an instance of """
86703,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxLocalQueryDUnitTest.java,542,,"        qs.createIndex(""pIdIndex"", ""pos.getPid()"", name + "" p, p.positions.values pos"");"
86704,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxMultiThreadQueryDUnitTest.java,113,,"        region.put(""key-"" + i, new TestObject(i, ""vmware""));"
86705,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxMultiThreadQueryDUnitTest.java,128,,"      logger.info(""### Executing Query on server: "" + queryString[1] + "": from client region: """
86706,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxMultiThreadQueryDUnitTest.java,197,,"          GeodeGlossary.GEMFIRE_PREFIX + ""enableQueryRetryOnPdxSerializationException"", ""true"");"
86707,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,98,,"    vm0.invoke(new CacheSerializableRunnable(""Create cache server"") {"
86708,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,104,,"          region.put(""key-"" + i, new TestObject(i, ""vmware""));"
86709,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,104,,"          region.put(""key-"" + i, new TestObject(i, ""vmware""));"
86710,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,207,,"    SerializableRunnable executeQueries = new CacheSerializableRunnable(""Execute queries"") {"
86711,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,215,,"          Assert.fail(""Failed to get QueryService."", e);"
86712,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,222,,"          Assert.fail(""Failed executing "" + queryString[0], e);"
86713,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,251,,"        ""asddfjkhaskkfdjhzjc0943509328kvnhfjkldsg09q3485ibjafdp9q8y43p9u7hgavpiuaha48uy9afliasdnuaiuqa498qa4"""
86714,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,371,,"          Assert.fail(""Failed to load the class."", ex);"
86715,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,481,,"    final String poolName = ""testClientServerQueryPool"";"
86716,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,486,,"    vm3.invoke(new CacheSerializableRunnable(""Create region"") {"
86717,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,533,,"            logger.info(""### Executing Query on server:"" + queryString[i]);"
86718,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,538,,"            logger.info(""### Executing Query locally:"" + queryString[i]);"
86719,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,545,,"              fail(""Local and Remote Query Results are not matching for query :"" + queryString[i]);"
86720,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,586,,"    final String[] qs = new String[] {""SELECT * FROM "" + regName + "" p WHERE p.ID > 0"","
86721,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,587,,"        ""SELECT p FROM "" + regName + "" p WHERE p.ID > 0"","
86722,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,593,,"        ""SELECT p, pos FROM "" + regName + "" p, p.positions.values pos WHERE p.ID > 0"","
86723,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,618,,"          qs.createIndex(""idIndex"", ""p.ID"", regName + "" p"");"
86724,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,907,,"        ""SELECT * FROM "" + this.regName + "" portfolio1, "" + this.regName + "" portfolio2 WHERE """
86725,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,1621,,"          qs.createIndex(""tickerIndex"", IndexType.FUNCTIONAL, ""p.ticker"", regName + "" p"");"
86726,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,1621,,"          qs.createIndex(""tickerIndex"", IndexType.FUNCTIONAL, ""p.ticker"", regName + "" p"");"
86727,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,1625,,"          fail(""Unable to create index. "" + ex.getMessage());"
86728,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2699,,"    Invoke.invokeInEveryVM(DistributedTestCase.class, ""disconnectFromDS"");"
86729,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2719,,"    final String[] qs = {""select * from "" + name + "" where pdxStatus = 'active'"","
86730,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2720,,"        ""select pdxStatus from "" + name + "" where id > 4""};"
86731,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2723,,"    final int port1 = (Integer) vm0.invoke(new SerializableCallable(""Create Server1"") {"
86732,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2737,,"    final int port2 = (Integer) vm1.invoke(new SerializableCallable(""Create Server2"") {"
86733,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2751,,"    vm2.invoke(new SerializableCallable(""Create client"") {"
86734,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2763,,"              PdxInstanceFactoryImpl.newCreator(""PdxVersionedNewPortfolio"", false, getCache());"
86735,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2765,,"          pdxInstanceFactory.writeString(""pdxStatus"", (i % 2 == 0 ? ""active"" : ""inactive""));"
86736,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2765,,"          pdxInstanceFactory.writeString(""pdxStatus"", (i % 2 == 0 ? ""active"" : ""inactive""));"
86737,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,2788,,"          pdxInstanceFactory.writeString(""status"", (i % 2 == 0 ? ""active"" : ""inactive""));"
86738,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,3069,,"                  fail(""Result should be either null or String and not "" + o.getClass());"
86739,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,3463,,"              PdxInstanceFactoryImpl.newCreator(""PdxVersionedFieldType"", false, getCache());"
86740,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,3469,,"          logger.info(""Putting object: "" + pdxInstance);"
86741,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxQueryDUnitTest.java,3624,,"        Region region = getCache().createRegionFactory(RegionShortcut.REPLICATE).create(""testJson"");"
86742,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,89,,"      ""SELECT pos.secId FROM "" + regName + "" p, p.positions.values pos WHERE pos.secId LIKE '%L'"","
86743,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,160,,"    server0.invoke(new CacheSerializableRunnable(""Create Server1"") {"
86744,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,169,,"          Assert.fail(""Failed to get QueryService."", e);"
86745,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,175,,"              regName + "" p, p.positions.values pos"");"
86746,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,180,,"          fail(""Failed to create index."" + ex.getMessage());"
86747,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,186,,"    server1.invoke(new CacheSerializableRunnable(""Create Server2"") {"
86748,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,195,,"    server2.invoke(new CacheSerializableRunnable(""Create Server3"") {"
86749,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,211,,"    final String poolName = ""testClientServerQueryPool"";"
86750,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,215,,"    client.invoke(new CacheSerializableRunnable(""Create client"") {"
86751,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,222,,"        LogWriterUtils.getLogWriter().info(""Put PortfolioPdx"");"
86752,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,224,,"          region.put(""key-"" + i, new PortfolioPdx(i));"
86753,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,230,,"    SerializableRunnable executeQueries = new CacheSerializableRunnable(""Execute queries"") {"
86754,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,251,,"                .info(""### Executing Query on remote server:"" + queryString[i]);"
86755,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,256,,"                + rs[0][0].size() + "" for query: "" + queryString[i]);;"
86756,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,260,,"                .info(""### Executing Query locally on client:"" + queryString[i]);"
86757,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,269,,"            Assert.fail(""Failed executing "" + queryString[i], e);"
86758,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,296,,"              fail(""Local and Remote Query Results are not matching for query :"" + queryString[i]);"
86759,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,310,,"              fail(""Results with and without index are not matching for query :"" + queryString2[i]);"
86760,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,337,,"    server0.invoke(new CacheSerializableRunnable(""Create cache server"") {"
86761,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,342,,"        LogWriterUtils.getLogWriter().info(""Put Objects locally on server"");"
86762,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,352,,"                .info(""### Executing Query locally on server:"" + queryString[i]);"
86763,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,459,,"          index = localQueryService.createIndex(""statusIndex"", ""status"", regName);"
86764,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,514,,"    server0.invoke(new CacheSerializableRunnable(""Create Server"") {"
86765,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,606,,"                .info(""RR server local indexType:Range  size of resultset: "" + rs.size()"
86766,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,698,,"          index = localQueryService.createIndex(""secIdIndex"", ""pos.secId"","
86767,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,940,,"            fail(""Partitioned index expected"");"
86768,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PdxStringQueryDUnitTest.java,1028,,"                .info(""isPR: "" + isPr + ""  client local indexType:no index size of resultset: """
86769,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,105,,"    String regionName = ""testRegion"";"
86770,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,110,,"    IntStream.range(0, numEntries).forEach(i -> entries.put(""key-"" + i, new Portfolio(i)));"
86771,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,132,,"    String regionName = ""testRegionWithEntrySetIndex"";"
86772,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,160,,"      verifyAllEntries(""select key, value from "" + SEPARATOR + regionName + "" where ID = "","
86773,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,160,,"      verifyAllEntries(""select key, value from "" + SEPARATOR + regionName + "" where ID = "","
86774,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/PersistentRegionCompactRangeIndexDUnitTest.java,296,,"          ""select key, value from "" + SEPARATOR + regionName + "".entrySet where value.ID = "","
86775,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,92,,"    server.invoke(""create indexes"", () -> {"
86776,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,107,,"        fail(""Index creation failed"");"
86777,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,113,,"    AsyncInvocation putThread = server.invokeAsync(""update a Region Entry"", () -> {"
86778,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,119,,"    server.invoke(""query on server"", () -> {"
86779,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,129,,"        fail(""Query execution failed on server."");"
86780,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,136,,"        fail(""Query thread did not verify index results even when RE is under update"");"
86781,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,161,,"          fail(""Query thread did not verify index results even when RE is under update and """
86782,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,162,,"              + ""RegionEntry value has been modified before releasing the lock"");"
86783,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,216,,"            queryService.newQuery(""<trace> select pos from "" + SEPARATOR + repRegionName"
86784,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,217,,"                + "" p, p.positions.values pos where pos.secId = 'APPL' AND p.ID = 1"").execute();"
86785,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryDataInconsistencyDUnitTest.java,218,,"        cache.getLogger().fine(""Shobhit: "" + resultSet);"
86786,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,79,,"        Region region = cache.getRegion(""portfolios"");"
86787,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,108,,"      logger.info(""REGION IS NULL"");"
86788,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,116,,"      Assert.fail(""Caught exception while trying to do put operation"", e);"
86789,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,144,,"        p.status = ""active"";"
86790,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,276,,"    vms[0].invoke(new CacheSerializableRunnable(""Execute query validate results"") {"
86791,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,280,,"        String[] regionNames = new String[] {""replicateOverFlowRegion"","
86792,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,281,,"            ""replicatePersistentOverFlowRegion"", ""prOverFlowRegion"", ""prPersistentOverFlowRegion"",};"
86793,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,281,,"            ""replicatePersistentOverFlowRegion"", ""prOverFlowRegion"", ""prPersistentOverFlowRegion"",};"
86794,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,281,,"            ""replicatePersistentOverFlowRegion"", ""prOverFlowRegion"", ""prPersistentOverFlowRegion"",};"
86795,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,297,,"            new String[] {""SELECT * FROM "" + SEPARATOR + ""REGION_NAME pf WHERE pf.ID = 1"","
86796,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,297,,"            new String[] {""SELECT * FROM "" + SEPARATOR + ""REGION_NAME pf WHERE pf.ID = 1"","
86797,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,298,,"                ""SELECT ID FROM "" + SEPARATOR + ""REGION_NAME pf WHERE pf.ID = 1"","
86798,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,299,,"                ""SELECT * FROM "" + SEPARATOR + ""REGION_NAME pf WHERE pf.ID > 5"","
86799,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,301,,"                ""SELECT * FROM "" + SEPARATOR + ""REGION_NAME.keys key WHERE key.ID = 1"","
86800,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,303,,"                ""SELECT * FROM "" + SEPARATOR + ""REGION_NAME.keys key WHERE key.ID > 5"","
86801,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,314,,"              String queryStr = qString[q].replace(""REGION_NAME"", regionNames[i]);"
86802,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,322,,"          LogWriterUtils.getLogWriter().info(""Failed to Execute query"", ex);"
86803,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,323,,"          fail(""Failed to Execute query."");"
86804,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,330,,"            String indexName = ""idIndex"" + regionNames[i];"
86805,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,332,,"                .fine(""createIndexOnOverFlowRegions() checking for index: "" + indexName);"
86806,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,336,,"                    .fine(""createIndexOnOverFlowRegions() Index doesn't exist, creating index: """
86807,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,338,,"                Index i1 = qs.createIndex(indexName, ""pf.ID"", SEPARATOR + regionNames[i] + "" pf"");"
86808,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,340,,"              indexName = ""keyIdIndex"" + regionNames[i];"
86809,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,346,,"                    qs.createIndex(indexName, ""key.ID"", SEPARATOR + regionNames[i] + "".keys key"");"
86810,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,346,,"                    qs.createIndex(indexName, ""key.ID"", SEPARATOR + regionNames[i] + "".keys key"");"
86811,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,354,,"          logger.info(""Failed to create index"", ex);"
86812,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,355,,"          fail(""Failed to create index."");"
86813,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,370,,"                fail(""Index not used for query. "" + queryStr);"
86814,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,386,,"          logger.info(""Comparing the result for the query : "" + queryString[i]"
86815,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,387,,"              + "" Index in ResultSet is: "" + i);"
86816,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexDUnitTest.java,472,,"                ""SELECT key.ID FROM "" + SEPARATOR + ""REGION_NAME.keys key WHERE key.ID = 1"","
86817,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,80,,"      {""Select * from "" + SEPARATOR + NAME + "" where ID > 10"","
86818,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,80,,"      {""Select * from "" + SEPARATOR + NAME + "" where ID > 10"","
86819,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,83,,"      {""Select * from "" + SEPARATOR + NAME + "" where ID = 5"","
86820,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,89,,"      {""Select * from "" + SEPARATOR + NAME + "" where status = 'active'"","
86821,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,138,,"    getLogWriter().info(""Creating index using an xml file name : "" + CACHE_XML_FILE_NAME);"
86822,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryIndexUsingXMLDUnitTest.java,151,,"    vm0.invoke(prIndexCreationCheck(NAME, ""secIndex"", -1));"
86823,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,119,,"      new String[] {""select * from "" + SEPARATOR + PartitionedRegionName1 + "" where ID>=0"","
86824,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,120,,"          ""Select * from "" + SEPARATOR + PartitionedRegionName1 + "" r1, "" + SEPARATOR"
86825,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,120,,"          ""Select * from "" + SEPARATOR + PartitionedRegionName1 + "" r1, "" + SEPARATOR"
86826,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,215,,"            fail(""Function call did not fail for query with function context"");"
86827,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,232,,"    client.invoke(new CacheSerializableRunnable(""Test query on client and server"") {"
86828,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,242,,"          TestServerQueryFunction func = new TestServerQueryFunction(""LDS Server function-1"");"
86829,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,243,,"          function = new TestQueryFunction(""queryFunction-1"");"
86830,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingFunctionContextDUnitTest.java,248,,"            fail(queries[i] + ""result is null from client function"");"
86831,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,93,,"    this.rootRegionName = ""root"";"
86832,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,99,,"            ""SELECT DISTINCT * FROM "" + this.regName + "" WHERE id < $1 ORDER BY   id"", // 1"
86833,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,102,,"            ""SELECT * FROM "" + this.regName + "" WHERE id = $1 and Ticker = $2"", // 4"
86834,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,163,,"    vm0.invoke(""Create cache server"", () -> {"
86835,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,174,,"        region.put(""key-"" + i, new TestObject(i, ""ibm""));"
86836,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,174,,"        region.put(""key-"" + i, new TestObject(i, ""ibm""));"
86837,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,185,,"    vm1.invoke(""createPool"", () -> createPool(poolName, host0, port));"
86838,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,188,,"    vm1.invoke(""Execute queries"", () -> {"
86839,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,197,,"        Assert.fail(""Failed to get QueryService."", e);"
86840,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,201,,"          ""import org.apache.geode.admin.QueryUsingPoolDUnitTest.TestObject; select distinct * from """
86841,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,208,,"        Assert.fail(""Failed executing "" + queryString, e);"
86842,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,276,,"    vm0.invoke(""Stop CacheServer"", () -> stopBridgeServer(getCache()));"
86843,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,321,,"          ""import org.apache.geode.admin.QueryUsingPoolDUnitTest.TestObject; select distinct ticker, price from """
86844,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,471,,"          ""SELECT DISTINCT itr.value FROM "" + regionName + "".entries itr where itr.key = 'key-1'"";"
86845,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,493,,"      assertEquals(""key-1"", results.asList().get(0));"
86846,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,496,,"      queryString = ""SELECT DISTINCT * FROM "" + regionName + "" WHERE id < 101 ORDER BY id"";"
86847,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,516,,"              ""The id for "" + resultsArray[i] + "" should be less than the id for """
86848,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,516,,"              ""The id for "" + resultsArray[i] + "" should be less than the id for """
86849,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,631,,"    final String poolName = ""testClientServerQueriesWithParams"";"
86850,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,670,,"    vm0.invoke(""validate compiled query."", () -> {"
86851,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,692,,"        logger.info(""### Executing Query :"" + queryString[i]);"
86852,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,786,,"    vm2.invoke(""closeClient"", () -> closeClient());"
86853,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,937,,"    vm0.invoke(""validate Compiled query"", () -> validateCompiledQuery(0));"
86854,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/QueryUsingPoolDUnitTest.java,1230,,"        vm0.invoke(""getCacheServerPort"", () -> QueryUsingPoolDUnitTest.getCacheServerPort());"
86855,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,97,,"    vm0.invoke(new CacheSerializableRunnable(""Create cache server"") {"
86856,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,102,,"            ""localhost["" + DistributedTestUtils.getDUnitLocatorPort() + ""]"");"
86857,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,111,,"          Assert.fail(""While starting CacheServer"", ex);"
86858,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,122,,"          region.put(""key-"" + i, new TestObject(i, ""ibm""));"
86859,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,122,,"          region.put(""key-"" + i, new TestObject(i, ""ibm""));"
86860,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,130,,"    vm1.invoke(new CacheSerializableRunnable(""Create region"") {"
86861,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,145,,"    vm1.invoke(new CacheSerializableRunnable(""Execute queries"") {"
86862,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,156,,"          Assert.fail(""Failed executing "" + queryString, e);"
86863,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,223,,"    vm0.invoke(new SerializableRunnable(""Stop CacheServer"") {"
86864,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,301,,"            ""import org.apache.geode.admin.RemoteQueryDUnitTest.TestObject; select distinct * from """
86865,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,447,,"            ""import org.apache.geode.admin.RemoteQueryDUnitTest.TestObject; select distinct ticker, price from """
86866,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,717,,"            + "".entries itr where itr.key = 'key-1'"";"
86867,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,737,,"        assertEquals(""key-1"", results.asList().get(0));"
86868,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,990,,"            .create(""clientPool"");"
86869,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/RemoteQueryDUnitTest.java,1085,,"    vm1.invoke(new CacheSerializableRunnable(""Close client"") {"
86870,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,115,,"      irm.getHeapMonitor().updateStateAndSendEvent(NORMAL_HEAP_USED, ""test"");"
86871,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,284,,"      client.invoke(""Executing query when system is 'Normal'"", () -> {"
86872,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,287,,"            getCache().getQueryService().newQuery(""Select * From "" + SEPARATOR + ""portfolios"");"
86873,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,287,,"            getCache().getQueryService().newQuery(""Select * From "" + SEPARATOR + ""portfolios"");"
86874,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,464,,"        ""compact"");"
86875,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/ResourceManagerWithQueryMonitorDUnitTest.java,482,,"        ""hash"");"
86876,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,74,,"      ""SELECT * from "" + SEPARATOR + regName + "".values"", // 5"
86877,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,75,,"      ""SELECT distinct * FROM "" + SEPARATOR + regName, // 6"
86878,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,116,,"    client.invoke(new SerializableCallable(""Create client"") {"
86879,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,128,,"    client.invoke(new SerializableCallable(""Put objects"") {"
86880,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,133,,"          r1.put(""key-"" + i, new PortfolioPdx(i));"
86881,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,140,,"    client.invoke(new SerializableCallable(""Query"") {"
86882,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,143,,"        getLogWriter().info(""Querying remotely from client"");"
86883,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,155,,"          fail(""Exception getting query service "", e);"
86884,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,256,,"    server1.invoke(new SerializableCallable(""Set observer"") {"
86885,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,313,,"            fail(""Error executing query: "" + queries[i], e);"
86886,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,325,,"                    fail(""Result objects for remote client query: "" + queries[i]"
86887,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,326,,"                        + "" should be instance of PortfolioPdx and not "" + obj.getClass());"
86888,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,342,,"    server1.invoke(new SerializableCallable(""Get observer"") {"
86889,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,586,,"    final int port = (Integer) server1.invoke(new SerializableCallable(""Create Server1"") {"
86890,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,965,,"          qs.createIndex(""status"", ""status"", SEPARATOR + regName);"
86891,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/SelectStarQueryDUnitTest.java,1291,,"                        + "" should be instance of PdxInstance and not "" + obj.getClass());"
86892,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/QueryConfigurationServiceConstraintsDistributedTest.java,100,,"        new Object[] {""LOCAL"", ""PUT""},"
86893,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/QueryConfigurationServiceConstraintsDistributedTest.java,108,,"        new Object[] {""REPLICATE"", ""PUT""},"
86894,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/QueryConfigurationServiceConstraintsDistributedTest.java,116,,"        new Object[] {""PARTITION"", ""PUT""},"
86895,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/QueryConfigurationServiceConstraintsDistributedTest.java,329,,"  @Parameters(method = ""getRegionTypeAndOperation"")"
86896,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/QueryConfigurationServiceConstraintsDistributedTest.java,330,,"  @TestCaseName(""[{index}] {method}(RegionType:{0};Operation:{1})"")"
86897,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,263,,"        new Object[] {""REPLICATE"", true},"
86898,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,266,,"        new Object[] {""PARTITION"", true},"
86899,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,312,,"  @Parameters(method = ""regionTypeAndTwoBooleans"")"
86900,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,313,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1},Alias:{2})"")"
86901,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,344,,"      @SuppressWarnings(""unchecked"")"
86902,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,386,,"        assertThat(((String) struct.get(""status""))).isEqualTo(id % 2 == 0 ? ""active"" : ""inactive"");"
86903,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,386,,"        assertThat(((String) struct.get(""status""))).isEqualTo(id % 2 == 0 ? ""active"" : ""inactive"");"
86904,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,392,,"  @Parameters(method = ""regionTypeAndThreeBooleans"")"
86905,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,393,,"  @TestCaseName(""[{index}] {method}(RegionType:{0},PDX:{1},Alias:{2},NestedQuery:{3})"")"
86906,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,400,,"        ? ""ELEMENT(SELECT * FROM "" + SEPARATOR + regionName + "" iter WHERE iter.ID = p.ID)"" : ""*"";"
86907,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,404,,"      queryString = ""SELECT p.status, COUNT("" + expression + "") FROM "" + SEPARATOR + regionName"
86908,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,408,,"          ""SELECT p.status AS st, COUNT("" + expression + "") AS ct FROM "" + SEPARATOR + regionName"
86909,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,409,,"              + "" p WHERE p.ID > 0 GROUP BY st"";"
86910,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,489,,"        ? ""ELEMENT(SELECT iter.shortID FROM "" + SEPARATOR + regionName"
86911,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,491,,"        : ""p.shortID"";"
86912,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,497,,"              + "" p WHERE p.ID > 0 GROUP BY status"";"
86913,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,687,,"        ? ""ELEMENT(SELECT iter.ID FROM "" + SEPARATOR + regionName + "" iter WHERE iter.ID = p.ID)"""
86914,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,688,,"        : ""p.ID"";"
86915,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,696,,"          ""SELECT p.status AS st, SUM("" + expression + "") AS sm FROM "" + SEPARATOR + regionName"
86916,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1284,,"          ""SELECT p.status AS st, MAX("" + expression + "") as mx FROM "" + SEPARATOR + regionName"
86917,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1462,,"      queryString = ""SELECT p.status, p.description, SUM("" + expression + ""), COUNT("" + expression"
86918,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1467,,"          + "") as sm, COUNT("" + expression + "") as ag, AVG("" + expression + "") as ct FROM """
86919,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1714,,"      queryString = ""SELECT AVG("" + expression + ""), SUM("" + expression + ""), MIN("" + expression"
86920,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1716,,"          + "" p WHERE p.ID > 0"";"
86921,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1812,,"      queryString = ""SELECT AVG(DISTINCT "" + expression + ""), SUM(DISTINCT "" + expression"
86922,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/aggregate/AggregateFunctionsQueryDUnitTest.java,1814,,"          + "" p WHERE p.ID > 0 AND p.isActive() = true"";"
86923,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexInitOnOverflowRegionDUnitTest.java,104,,"              DiskStore ds = cache.findDiskStore(""disk"");"
86924,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexInitOnOverflowRegionDUnitTest.java,135,,"              fail(""Index creation failed"");"
86925,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexInitOnOverflowRegionDUnitTest.java,180,,"                  cache.getQueryService().createIndex(""idIndex"", ""p.ID"", SEPARATOR + name + "" p"");"
86926,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,86,,"    name = ""PartionedPortfoliosPR"";"
86927,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,89,,"        new CacheSerializableRunnable(""Create local region with synchronous index maintenance"") {"
86928,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,96,,"              DiskStore ds = cache.findDiskStore(""disk"");"
86929,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,114,,"              LogWriterUtils.getLogWriter().warning(""Creation caught IllegalStateException"", ex);"
86930,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,116,,"            assertNotNull(""Region "" + name + "" not in cache"", cache.getRegion(name));"
86931,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,116,,"            assertNotNull(""Region "" + name + "" not in cache"", cache.getRegion(name));"
86932,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,117,,"            assertNotNull(""Region ref null"", partitionRegion);"
86933,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,118,,"            assertTrue(""Region ref claims to be destroyed"", !partitionRegion.isDestroyed());"
86934,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,122,,"                  cache.getQueryService().createIndex(""statusIndex"", ""p.ID"","
86935,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,122,,"                  cache.getQueryService().createIndex(""statusIndex"", ""p.ID"","
86936,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,127,,"              fail(""Index creation failed"");"
86937,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,134,,"        vm0.invokeAsync(new CacheSerializableRunnable(""Change value in region"") {"
86938,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,151,,"            getCache().getLogger().fine(""Destroying the value"");"
86939,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,159,,"        vm0.invokeAsync(new CacheSerializableRunnable(""Run query on region"") {"
86940,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,166,,"                .newQuery(""select * from "" + SEPARATOR + name + "" p where p.ID > -1"");"
86941,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,166,,"                .newQuery(""select * from "" + SEPARATOR + name + "" p where p.ID > -1"");"
86942,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexOperationsOnOverflowRegionDUnitTest.java,172,,"              getCache().getLogger().fine(""Querying the region"");"
86943,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,186,,"        Assert.fail(""Random region operation failed on VM_"" + inv.getId(), inv.getException());"
86944,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,462,,"              LogWriterUtils.getLogWriter().info(""Portfolio: "" + ((Portfolio) value));"
86945,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,466,,"                  ""Did not find index key for REgionEntry [key: "" + internalEntry.getKey()"
86946,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,467,,"                      + "" , value: "" + value + "" ] in index: "" + index.getName(),"
86947,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,467,,"                      + "" , value: "" + value + "" ] in index: "" + index.getName(),"
86948,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,481,,"                      ""Did not find index value for REgionEntry [key: "" + internalEntry.getKey()"
86949,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithInplaceObjectModFalseDUnitTest.java,483,,"                          + "" For index key: "" + ID,"
86950,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,161,,"        Assert.fail(""Random region operation failed on VM_"" + inv.getId(), inv.getException());"
86951,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,567,,"              LogWriterUtils.getLogWriter().info(""Portfolio: "" + ((Portfolio) value));"
86952,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,571,,"                  ""Did not find index key for REgionEntry [key: "" + internalEntry.getKey()"
86953,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,572,,"                      + "" , value: "" + value + "" ] in index: "" + index.getName(),"
86954,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,572,,"                      + "" , value: "" + value + "" ] in index: "" + index.getName(),"
86955,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,585,,"                      ""Did not find index value for REgionEntry [key: "" + internalEntry.getKey()"
86956,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/ConcurrentIndexUpdateWithoutWLDUnitTest.java,587,,"                          + "" For index key: "" + ID,"
86957,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,98,,"    helpTestPRQueryOnLocalNode(utils.queries.get(""545""), 100, 100, true);"
86958,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,99,,"    helpTestPRQueryOnLocalNode(utils.queries.get(""546""), 100, 100, true);"
86959,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,100,,"    helpTestPRQueryOnLocalNode(utils.queries.get(""543""), 100, 100, true);"
86960,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,101,,"    helpTestPRQueryOnLocalNode(utils.queries.get(""544""), 100, 100, true);"
86961,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,102,,"    helpTestPRQueryOnLocalNode(""select * from "" + SEPARATOR + ""portfolios p where p.ID = 1"", 100, 1,"
86962,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,102,,"    helpTestPRQueryOnLocalNode(""select * from "" + SEPARATOR + ""portfolios p where p.ID = 1"", 100, 1,"
86963,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,154,,"    createPartitionRegion(vm0, ""portfolios"");"
86964,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,162,,"          utils.createIndex(""idIndex"", ""p.ID"", SEPARATOR + ""portfolios p"");"
86965,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,162,,"          utils.createIndex(""idIndex"", ""p.ID"", SEPARATOR + ""portfolios p"");"
86966,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,162,,"          utils.createIndex(""idIndex"", ""p.ID"", SEPARATOR + ""portfolios p"");"
86967,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,174,,"          p.status = ""testStatus"";"
86968,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,242,,"            p.status = ""discardStatus"";"
86969,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/CopyOnReadIndexDUnitTest.java,303,,"            assertEquals(""status should not have been changed"", ""testStatus"", p.status);"
86970,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/IndexTrackingQueryObserverDUnitTest.java,155,,"        Region region = getCache().createRegion(""portfolio"", af.create());"
86971,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/internal/index/InitializeIndexEntryDestroyQueryDUnitTest.java,134,,"      vm0.invoke(() -> createIndex(name, ""statusIndex"", ""p.status"", SEPARATOR + name + "" p""));"
86972,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,110,,"        PARTITIONED_REGION_NAME, ""PrIndexOnStatus"", ""p.status"", null, ""p""));"
86973,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,110,,"        PARTITIONED_REGION_NAME, ""PrIndexOnStatus"", ""p.status"", null, ""p""));"
86974,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,154,,"        PARTITIONED_REGION_NAME, ""PrIndexOnID"", ""p.ID"", null, ""p""));"
86975,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,154,,"        PARTITIONED_REGION_NAME, ""PrIndexOnID"", ""p.ID"", null, ""p""));"
86976,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,294,,"        PARTITIONED_REGION_NAME, ""PrIndexOnId"", ""p.ID"", null, ""p""));"
86977,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,683,,"            ""PrIndexOnKeyID"", ""key.ID"", SEPARATOR + PARTITIONED_REGION_NAME + "".keys key"", null));"
86978,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicIndexCreationDUnitTest.java,683,,"            ""PrIndexOnKeyID"", ""key.ID"", SEPARATOR + PARTITIONED_REGION_NAME + "".keys key"", null));"
86979,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,100,,"    names.add(""PrIndexOnStatus"");"
86980,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,101,,"    names.add(""PrIndexOnID"");"
86981,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,104,,"    exps.add(""status"");"
86982,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,224,,"    names.add(""PrIndexOnPKID"");"
86983,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,229,,"    exps.add(""pkid"");"
86984,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRBasicMultiIndexCreationDUnitTest.java,792,,"    fromClause.add(SEPARATOR + name + "".keys key"");"
86985,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,272,,"    vm0.invoke(prQueryDUnitHelper.getCacheSerializableRunnableForPRIndexCreate(name, ""IdIndex1"","
86986,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,273,,"        ""r1.ID"", SEPARATOR + name + "" r1"", null));"
86987,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,273,,"        ""r1.ID"", SEPARATOR + name + "" r1"", null));"
86988,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,278,,"    vm0.invoke(prQueryDUnitHelper.getCacheSerializableRunnableForPRIndexCreate(coloName, ""IdIndex2"","
86989,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,279,,"        ""r2.id"", SEPARATOR + coloName + "" r2"", null));"
86990,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRColocatedEquiJoinDUnitTest.java,279,,"        ""r2.id"", SEPARATOR + coloName + "" r2"", null));"
86991,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,122,,"                + regionName + "" not in cache"","
86992,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,205,,"            ""PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region """
86993,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,209,,"            ""PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region ref null"","
86994,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,212,,"            ""PRQueryDUnitHelper#getCacheSerializableRunnableForPRCreateWithRedundancy: Partitioned Region ref claims to be destroyed"","
86995,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,516,,"    SerializableRunnable prPuts = new CacheSerializableRunnable(""PRPuts"") {"
86996,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,647,,"    SerializableRunnable PrRegion = new CacheSerializableRunnable(""PRQuery"") {"
86997,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,657,,"          queries = new String[] {""import org.apache.geode.cache.\""query\"".data.Position;"""
86998,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,696,,"              ""<ExpectedException action=add>"" + expectedExceptions[i] + ""</ExpectedException>"");"
86999,./TargetProjects/geode/geode-core/src/distributedTest/java/org/apache/geode/cache/query/partitioned/PRQueryDUnitHelper.java,696,,"              ""<ExpectedException action=add>"" + expectedExceptions[i] + ""</ExpectedException>"");"
