114000,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,1523,,"      Put p = new Put(Bytes.toBytes((char)('a'+i) + ""row""));"
114001,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,1634,,"    s = new Scan().withStartRow(ROWS_THREE[0]).withStopRow(Bytes.toBytes(""rowThree-4""));"
114002,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,1841,,"          "" total but already scanned "" + (i+1), expectedRows > i);"
114003,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java,1842,,"      assertEquals(""Expected "" + expectedKeys + "" keys per row but "" +"
114004,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,85,,"      fail(""The IllegalArgumentException should be thrown because the added filter is reversed"");"
114005,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,134,,"    filters.add(new WhileMatchFilter(new PrefixFilter(Bytes.toBytes(""yyy""))));"
114006,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,566,,"            new FamilyFilter(CompareOperator.EQUAL, new BinaryComparator(Bytes.toBytes(""fam""))),"
114007,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,574,,"        Bytes.toBytes(""row""), Bytes.toBytes(""fam""), Bytes.toBytes(""qual1""), Bytes.toBytes(""value""));"
114008,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,574,,"        Bytes.toBytes(""row""), Bytes.toBytes(""fam""), Bytes.toBytes(""qual1""), Bytes.toBytes(""value""));"
114009,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,680,,"    KeyValue kv4 = new KeyValue(Bytes.toBytes(""row1""), Bytes.toBytes(""fam""), Bytes.toBytes(""c""), 4,"
114010,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java,934,,"    KeyValue kv1 = new KeyValue(Bytes.toBytes(""row""), Bytes.toBytes(""cf""), Bytes.toBytes(""column1""),"
114011,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestMultiRowRangeFilter.java,328,,"    LOG.info(""found "" + resultsSize + "" results"");"
114012,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestMultiRowRangeFilter.java,328,,"    LOG.info(""found "" + resultsSize + "" results"");"
114013,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestParseFilter.java,117,,"    assertEquals(""qualifier"", new String(columnPrefix, StandardCharsets.UTF_8));"
114014,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestParseFilter.java,325,,"    assertEquals(""family"", new String(dependentColumnFilter.getFamily(), StandardCharsets.UTF_8));"
114015,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestParseFilter.java,439,,"    assertEquals(""realtime"", new String(prefix, StandardCharsets.UTF_8));"
114016,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestRegexComparator.java,42,,"    RegexStringComparator a = new RegexStringComparator(""a|b"");"
114017,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestRegexComparator.java,101,,"    new TestCase(""[abc]+"", ""ababab"", true),"
114018,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestRegexComparator.java,146,,"    new TestCase(""a?b"", ""aaaab"", true),"
114019,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestRegexComparator.java,147,,"    new TestCase(""a?b"", ""aaacc"", false),"
114020,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestScanRowPrefix.java,132,,"    verifyScanResult(table, scan, expected0, ""Scan after prefix reset failed"");"
114021,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestScanRowPrefix.java,136,,"    verifyScanResult(table, scan, expected1, ""Double check on column prefix failed"");"
114022,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestSingleColumnValueFilter.java,158,,"    assertTrue(""basicFilter4"", filter.filterCell(cell) == Filter.ReturnCode.NEXT_ROW);"
114023,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestSingleColumnValueFilter.java,172,,"    assertTrue(""basicFilter5"", filter.filterCell(cell) == Filter.ReturnCode.INCLUDE);"
114024,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestSingleColumnValueFilter.java,224,,"    assertTrue(""regexTrue"","
114025,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/http/TestInfoServersACL.java,172,,"        assertTrue(""expected="" + expectedContent + "", content="" + pair.getSecond(),"
114026,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/http/TestInfoServersACL.java,172,,"        assertTrue(""expected="" + expectedContent + "", content="" + pair.getSecond(),"
114027,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestHFileLink.java,68,,"    Assert.assertEquals(""fefefe"", HFileLink.getReferencedRegionName(testName));"
114028,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestHFileLink.java,69,,"    Assert.assertEquals(""0123456"", HFileLink.getReferencedHFileName(testName));"
114029,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestImmutableBytesWritable.java,114,,"      ""Comparing "" + a + "" and "" + b + "" as raw"","
114030,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestImmutableBytesWritable.java,114,,"      ""Comparing "" + a + "" and "" + b + "" as raw"","
114031,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java,73,,"    KeyValue kv1 = new KeyValue(Bytes.toBytes(""aaa""), Bytes.toBytes(""f1""), Bytes.toBytes(""q1""),"
114032,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java,74,,"        Bytes.toBytes(""val""));"
114033,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java,76,,"    KeyValue kv2 = new KeyValue(Bytes.toBytes(""aab""), Bytes.toBytes(""f1""), Bytes.toBytes(""q1""),"
114034,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java,79,,"    KeyValue kv3 = new KeyValue(Bytes.toBytes(""aac""), Bytes.toBytes(""f1""), Bytes.toBytes(""q1""),"
114035,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java,259,,"    KeyValue kv1 = new KeyValue(Bytes.toBytes(""aaa""), Bytes.toBytes(""fam1""), Bytes.toBytes(""q1""),"
114036,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java,442,,"        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(""family""), Bytes.toBytes(""qual""),"
114037,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java,442,,"        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(""family""), Bytes.toBytes(""qual""),"
114038,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java,804,,"    kv1 = new KeyValue(Bytes.toBytes(""ilovehbase""), family, qualA, 5, Type.Put);"
114039,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileEncryption.java,106,,"        "" uncompressedSizeWithoutHeader="" + hbw.getOnDiskSizeWithoutHeader() +"
114040,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileScannerImplReferenceCount.java,83,,"    return Arrays.asList(new Object[] { ""file"" }, new Object[] { ""offheap"" },"
114041,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruAdaptiveBlockCache.java,283,,"    CachedItem [] singleBlocks = generateFixedBlocks(5, 10000, ""single"");"
114042,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruAdaptiveBlockCache.java,284,,"    CachedItem [] multiBlocks = generateFixedBlocks(5, 10000, ""multi"");"
114043,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java,277,,"    CachedItem [] singleBlocks = generateFixedBlocks(5, 10000, ""single"");"
114044,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java,278,,"    CachedItem [] multiBlocks = generateFixedBlocks(5, 10000, ""multi"");"
114045,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestReseekTo.java,85,,"        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(""family""), Bytes.toBytes(""qual""),"
114046,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestReseekTo.java,85,,"        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(""family""), Bytes.toBytes(""qual""),"
114047,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekTo.java,89,,"      return new KeyValue(Bytes.toBytes(row), Bytes.toBytes(""family""), Bytes.toBytes(""qualifier""),"
114048,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekTo.java,89,,"      return new KeyValue(Bytes.toBytes(row), Bytes.toBytes(""family""), Bytes.toBytes(""qualifier""),"
114049,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekTo.java,90,,"          Bytes.toBytes(""value""));"
114050,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java,273,,"    String ioEngineName = ""file:"" + testDir + ""/bucket.cache"";"
114051,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java,276,,"    String persistencePath = testDir + ""/bucket.persistence"";"
114052,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestBucketCache.java,455,,"    assertEquals(BucketCache.ACCEPT_FACTOR_CONFIG_NAME + "" failed to propagate."", 0.9f,"
114053,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestVerifyBucketCacheFile.java,92,,"      new BucketCache(""file:"" + testDir + ""/bucket.cache"", capacitySize, constructedBlockSize,"
114054,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestVerifyBucketCacheFile.java,92,,"      new BucketCache(""file:"" + testDir + ""/bucket.cache"", capacitySize, constructedBlockSize,"
114055,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/bucket/TestVerifyBucketCacheFile.java,93,,"        constructedBlockSizes, writeThreads, writerQLen, testDir + ""/bucket.persistence"");"
114056,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/AbstractTestIPC.java,111,,"    RpcServer rpcServer = createRpcServer(null, ""testRpcServer"","
114057,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/AbstractTestIPC.java,113,,"            SERVICE, null)), new InetSocketAddress(""localhost"", 0), CONF,"
114058,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/AbstractTestIPC.java,119,,"      String message = ""hello"";"
114059,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/AbstractTestIPC.java,185,,"      LOG.info(""Caught expected exception: "" + e.toString());"
114060,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/TestBufferChain.java,70,,"    assertTrue(Bytes.equals(Bytes.toBytes(""hello world""), chain.getBytes()));"
114061,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/TestSimpleRpcScheduler.java,358,,"          Bytes.toBytes(""abc""), new Put(Bytes.toBytes(""row"")));"
114062,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/TestSimpleRpcScheduler.java,358,,"          Bytes.toBytes(""abc""), new Put(Bytes.toBytes(""row"")));"
114063,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/ipc/TestSimpleRpcScheduler.java,359,,"      RequestHeader putHead = RequestHeader.newBuilder().setMethodName(""mutate"").build();"
114064,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java,89,,"      ServerName master = ServerName.valueOf(""localhost"", 1, EnvironmentEdgeManager.currentTime());"
114065,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java,59,,"    sm.regionServerStartup(request.build(), 0, ""0.0.0"", ia1);"
114066,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDeadServer.java,55,,"  final ServerName hostname123 = ServerName.valueOf(""127.0.0.1"", 123, 3L);"
114067,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailover.java,196,,"      assertEquals(""hbase:meta should be online on RS"","
114068,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestRegionsRecoveryConfigManager.java,61,,"    conf.unset(""hbase.regions.recovery.store.file.ref.count"");"
114069,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestRollingRestart.java,131,,"    log(""Verifying there are "" + numRegions + "" assigned on cluster\n"");"
114070,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java,234,,"    String tasknode = submitTaskAndWait(batch, ""foo/1"");"
114071,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java,298,,"    conf.setInt(""hbase.splitlog.max.resubmit"", 2);"
114072,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java,304,,"    final ServerName worker1 = ServerName.valueOf(""worker1,1,1"");"
114073,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerBase.java,412,,"              LOG.info(""Sending in CRASH of "" + server);"
114074,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestSplitTableRegionProcedure.java,151,,"    assertTrue(""not able to find a splittable region"", regions != null);"
114075,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestFavoredStochasticLoadBalancer.java,123,,"    admin.createTable(tableDescriptor, Bytes.toBytes(""aaa""), Bytes.toBytes(""zzz""), REGION_NUM);"
114076,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestFavoredStochasticLoadBalancer.java,123,,"    admin.createTable(tableDescriptor, Bytes.toBytes(""aaa""), Bytes.toBytes(""zzz""), REGION_NUM);"
114077,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestFavoredStochasticLoadBalancer.java,135,,"    assertTrue(""Balancer did not run"", admin.balance());"
114078,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestFavoredStochasticLoadBalancer.java,392,,"    assertTrue(""Region: "" + region + "" should be RIT"","
114079,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestFavoredStochasticLoadBalancer.java,392,,"    assertTrue(""Region: "" + region + "" should be RIT"","
114080,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,80,,"    String confKey = ""hbase.test.cleaner.delegates"";"
114081,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,84,,"      new AllValidPaths(""test-file-cleaner"", stop, conf, fs, testDir, confKey, POOL);"
114082,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,87,,"    Path parent = new Path(testDir, ""parent"");"
114083,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,88,,"    Path file = new Path(parent, ""someFile"");"
114084,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,92,,"    assertTrue(""Test file didn't get created."", fs.exists(file));"
114085,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,110,,"    Path child = new Path(testDir, ""child"");"
114086,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestCleanerChore.java,182,,"    assertFalse(""Empty directory didn't get deleted"", fs.exists(child));"
114087,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java,231,,"      new FileStatus(100, false, 3, 100, EnvironmentEdgeManager.currentTime(), new Path(""log1"")),"
114088,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java,232,,"      new FileStatus(100, false, 3, 100, EnvironmentEdgeManager.currentTime(), new Path(""log2""))"
114089,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestReplicationBarrierCleaner.java,114,,"      List<String> firstPeerIds, @SuppressWarnings(""unchecked"") List<String>... peerIds) {"
114090,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotCleanerChore.java,76,,"      stopper.stop(""Stopping Test Stopper"");"
114091,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotCleanerChore.java,89,,"    snapshotDescriptionList.add(getSnapshotDescription(-2, ""snapshot01"", ""table01"","
114092,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotCleanerChore.java,89,,"    snapshotDescriptionList.add(getSnapshotDescription(-2, ""snapshot01"", ""table01"","
114093,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotCleanerChore.java,91,,"    snapshotDescriptionList.add(getSnapshotDescription(10, ""snapshot02"", ""table02"","
114094,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotCleanerChore.java,91,,"    snapshotDescriptionList.add(getSnapshotDescription(10, ""snapshot02"", ""table02"","
114095,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java,246,,"    assertEquals(""Found unexpected number of snapshots"", 0, response.getSnapshotsCount());"
114096,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/http/TestMetaBrowser.java,108,,"      hasProperty(""row"", bytesAsStringBinary(startsWith(a + "",,""))),"
114097,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/http/TestMetaBrowser.java,110,,"      hasProperty(""row"", bytesAsStringBinary(startsWith(b + "",80000000"")))));"
114098,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/http/TestMetaBrowserNoCluster.java,82,,"    assertEquals(TableName.valueOf(""foo"", ""bar""), metaBrowser.getScanTable());"
114099,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/janitor/TestCatalogJanitor.java,137,,"      createRegionInfo(td.getTableName(), Bytes.toBytes(""aaa""), Bytes.toBytes(""eee""));"
114100,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/janitor/TestCatalogJanitor.java,137,,"      createRegionInfo(td.getTableName(), Bytes.toBytes(""aaa""), Bytes.toBytes(""eee""));"
114101,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/janitor/TestCatalogJanitor.java,139,,"      createRegionInfo(td.getTableName(), Bytes.toBytes(""aaa""), Bytes.toBytes(""ccc""));"
114102,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/janitor/TestCatalogJanitor.java,222,,"      createRegionInfo(td.getTableName(), Bytes.toBytes(""aaa""), Bytes.toBytes(""bbb""));"
114103,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/janitor/TestCatalogJanitor.java,231,,"      createRegionInfo(td.getTableName(), Bytes.toBytes(""ccc""), Bytes.toBytes(""ddd""));"
114104,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/locking/TestLockManager.java,122,,"        LockType.EXCLUSIVE, ""desc"");"
114105,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/locking/TestLockProcedure.java,179,,"    validateLockRequestException(getNamespaceLock("""", ""desc""), ""Empty namespace"");"
114106,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java,164,,"        tn1 + "" should have split."","
114107,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestCreateNamespaceProcedure.java,122,,"    LOG.debug(""Create namespace failed with exception: "" + result.getException());"
114108,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestMasterProcedureScheduler.java,274,,"    String nsName1 = ""ns1"";"
114109,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestMasterProcedureScheduler.java,1099,,"    queue.waitTableExclusiveLock(procedure1, TableName.valueOf(""ns4"", ""table4""));"
114110,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestMasterProcedureSchedulerConcurrency.java,114,,"                LOG.debug(""[S] peerId=""+ peerId +"" procId=""+ procId +"" concurrent=""+ concurrent);"
114111,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestMasterProcedureSchedulerConcurrency.java,114,,"                LOG.debug(""[S] peerId=""+ peerId +"" procId=""+ procId +"" concurrent=""+ concurrent);"
114112,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestModifyTableProcedure.java,61,,"  private static final String column_Family1 = ""cf1"";"
114113,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestModifyTableProcedure.java,62,,"  private static final String column_Family2 = ""cf2"";"
114114,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestModifyTableProcedure.java,63,,"  private static final String column_Family3 = ""cf3"";"
114115,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestModifyTableProcedure.java,457,,"    assertTrue(""Expected ConcurrentTableModificationException."","
114116,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/snapshot/TestSnapshotFileCache.java,110,,"      10000000, ""test-snapshot-file-cache-refresh"", new SnapshotFiles());"
114117,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobStoreCompaction.java,147,,"    assertEquals(""Before compaction: store files"", compactionThreshold, countStoreFiles());"
114118,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobStoreCompaction.java,148,,"    assertEquals(""Before compaction: mob file count"", 0, countMobFiles());"
114119,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobStoreCompaction.java,149,,"    assertEquals(""Before compaction: rows"", compactionThreshold, UTIL.countRows(region));"
114120,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobStoreCompaction.java,150,,"    assertEquals(""Before compaction: mob rows"", 0, countMobRows());"
114121,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobStoreCompaction.java,154,,"    assertEquals(""After compaction: store files"", 1, countStoreFiles());"
114122,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobUtils.java,47,,"        .putAll(TEST_TABLE_1, ""file1a"")"
114123,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/monitoring/TestTaskMonitor.java,184,,"    rpcHandlers.get(0).setRPC(""operations"", new Object[]{ m, q }, 3000);"
114124,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestNamedQueueRecorder.java,99,,"    boolean isClientExpected = slowLogPayloads.get(i).getClientAddress().equals(""client_"" + j);"
114125,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestNamedQueueRecorder.java,100,,"    boolean isUserExpected = slowLogPayloads.get(i).getUserName().equals(""userName_"" + j);"
114126,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestNamedQueueRecorder.java,101,,"    boolean isClassExpected = slowLogPayloads.get(i).getServerClass().equals(""class_"" + j);"
114127,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestNamedQueueRecorder.java,118,,"    LOG.debug(""Initially ringbuffer of Slow Log records is empty"");"
114128,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestNamedQueueRecorder.java,367,,"        .setUserName(""userName_87"")"
114129,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestSlowLogAccessor.java,126,,"        .getRpcLogDetails(""userName_"" + (i + 1), ""client_"" + (i + 1), ""class_"" + (i + 1));"
114130,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestSlowLogAccessor.java,126,,"        .getRpcLogDetails(""userName_"" + (i + 1), ""client_"" + (i + 1), ""class_"" + (i + 1));"
114131,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namequeues/TestSlowLogAccessor.java,126,,"        .getRpcLogDetails(""userName_"" + (i + 1), ""client_"" + (i + 1), ""class_"" + (i + 1));"
114132,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,151,,"    assertNotNull(""Namespace descriptor found null."", ADMIN.getNamespaceDescriptor(nsp));"
114133,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,154,,"      ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(""fam1"")).build();"
114134,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,157,,"      .newBuilder(TableName.valueOf(nsp + TableName.NAMESPACE_DELIM + ""table1""));"
114135,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,160,,"      .newBuilder(TableName.valueOf(nsp + TableName.NAMESPACE_DELIM + ""table2""));"
114136,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,168,,"      ADMIN.createTable(tableDescTwo.build(), Bytes.toBytes(""AAA""), Bytes.toBytes(""ZZZ""), 5);"
114137,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java,168,,"      ADMIN.createTable(tableDescTwo.build(), Bytes.toBytes(""AAA""), Bytes.toBytes(""ZZZ""), 5);"
114138,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/procedure/TestZKProcedure.java,358,,"    assertEquals(""Operation error state was unexpected"", opHasError, proc.getErrorMonitor()"
114139,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/procedure/TestZKProcedureControllers.java,164,,"    runMockCommitWithOrchestratedControllers(startCoordinatorFirst, operationName, data, ""cohort"");"
114140,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java,255,,"    String[] namespaces = new String[] { ""NS0"", ""NS01"", ""NS2"" };"
114141,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java,288,,"    assertNumResults(21, new QuotaFilter().setUserFilter(""User.*""));"
114142,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java,343,,"        assertTrue(""Expected to find a cell"", cells.advance());"
114143,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaAdmin.java,366,,"        assertNull(""Did not expect to find a quota entry"", rs.next());"
114144,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaObserverChoreWithMiniCluster.java,200,,"        LOG.debug(""Interrupted while sleeping."" , e);"
114145,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaObserverChoreWithMiniCluster.java,348,,"    assertEquals(""Found tables: "" + tables, tablesWithQuotas, tables.getTableQuotaTables());"
114146,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaThrottle.java,241,,"    final String NAMESPACE = ""default"";"
114147,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSnapshotQuotaObserverChore.java,135,,"    admin.snapshot(new SnapshotDescription(tn1 + ""snapshot"", tn1, SnapshotType.SKIPFLUSH));"
114148,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSnapshotQuotaObserverChore.java,146,,"    admin.snapshot(new SnapshotDescription(tn2 + ""snapshot1"", tn2, SnapshotType.SKIPFLUSH));"
114149,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaBasicFunctioning.java,92,,"    Put p = new Put(Bytes.toBytes(""to_reject""));"
114150,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaBasicFunctioning.java,94,,"        Bytes.toBytes(""reject""));"
114151,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaRemoval.java,129,,"    Put put = new Put(Bytes.toBytes(""to_reject""));"
114152,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaRemoval.java,131,,"        Bytes.toBytes(""reject""));"
114153,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaViolationPolicyRefresherChore.java,96,,"        TableName.valueOf(""table1""),"
114154,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaViolationPolicyRefresherChore.java,99,,"        TableName.valueOf(""table2""),"
114155,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaViolationPolicyRefresherChore.java,102,,"        TableName.valueOf(""table3""),"
114156,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestSpaceQuotaViolationPolicyRefresherChore.java,105,,"        TableName.valueOf(""table4""),"
114157,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestTableQuotaViolationStore.java,83,,"    TableName tn1 = TableName.valueOf(""foo"");"
114158,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestTablesWithQuotas.java,110,,"    TableName tooFewRegionsNamespaceTable = TableName.valueOf(""ns1"", ""tn2"");"
114159,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestTablesWithQuotas.java,158,,"    tables.addNamespaceQuotaTable(TableName.valueOf(""ns2"", ""t1""));"
114160,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/policies/BaseViolationPolicyEnforcement.java,27,,"  static final Append APPEND = new Append(Bytes.toBytes(""foo""));"
114161,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java,219,,"    String FAMILY = ""cf1"";"
114162,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java,224,,"      putData(FAMILY, ""row"", ""col1"", 1);"
114163,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java,224,,"      putData(FAMILY, ""row"", ""col1"", 1);"
114164,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java,225,,"      putData(FAMILY, ""row"", ""col2"", 2);"
114165,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java,226,,"      putData(FAMILY, ""row"", ""col3"", 3);"
114166,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBulkLoad.java,59,,"    TableName tableName = TableName.valueOf(""test"", ""test"");"
114167,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestColumnSeeking.java,71,,"    String family = ""Family"";"
114168,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestColumnSeeking.java,158,,"          LOG.info(""Columns: "" + columnLists[i].size() + ""  Keys: """
114169,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestColumnSeeking.java,158,,"          LOG.info(""Columns: "" + columnLists[i].size() + ""  Keys: """
114170,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,275,,"    byte[] row = Bytes.toBytes(""testrow"");"
114171,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,276,,"    byte[] fam = Bytes.toBytes(""testfamily"");"
114172,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,277,,"    byte[] qf1 = Bytes.toBytes(""testqualifier1"");"
114173,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,278,,"    byte[] qf2 = Bytes.toBytes(""testqualifier2"");"
114174,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,279,,"    byte[] qf3 = Bytes.toBytes(""testqualifier3"");"
114175,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java,282,,"    byte[] val = Bytes.toBytes(""testval"");"
114176,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingToCellFlatMapMemStore.java,495,,"    byte[] fam = Bytes.toBytes(""testfamily"");"
114177,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingToCellFlatMapMemStore.java,501,,"        byte[] qf = Bytes.toBytes(""testqualifier""+j);"
114178,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactionLifeCycleTracker.java,237,,"    region.requestCompaction(""test"", Store.PRIORITY_USER, false, tracker);"
114179,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,313,,"    final byte[] f = Bytes.toBytes(""family"");"
114180,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,622,,"    byte [] row = Bytes.toBytes(""testrow"");"
114181,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,623,,"    byte [] fam = Bytes.toBytes(""testfamily"");"
114182,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,629,,"    byte [] val = Bytes.toBytes(""testval"");"
114183,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,774,,"    memstore.add(KeyValueTestUtil.create(""row1"", ""fam"", ""a"", 100, ""dont-care""), null);"
114184,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,774,,"    memstore.add(KeyValueTestUtil.create(""row1"", ""fam"", ""a"", 100, ""dont-care""), null);"
114185,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java,774,,"    memstore.add(KeyValueTestUtil.create(""row1"", ""fam"", ""a"", 100, ""dont-care""), null);"
114186,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEncryptionKeyRotation.java,93,,"    conf.set(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY, ""hbase"");"
114187,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEncryptionKeyRotation.java,126,,"      assertTrue(""Store file "" + path + "" has incorrect key"","
114188,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEncryptionKeyRotation.java,126,,"      assertTrue(""Store file "" + path + "" has incorrect key"","
114189,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,236,,"  protected final byte[] qual = Bytes.toBytes(""qual"");"
114190,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,238,,"  protected final byte[] qual2 = Bytes.toBytes(""qual2"");"
114191,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,240,,"  protected final byte[] value = Bytes.toBytes(""value"");"
114192,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,241,,"  protected final byte[] value1 = Bytes.toBytes(""value1"");"
114193,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,242,,"  protected final byte[] value2 = Bytes.toBytes(""value2"");"
114194,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,243,,"  protected final byte[] row = Bytes.toBytes(""rowA"");"
114195,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,244,,"  protected final byte[] row2 = Bytes.toBytes(""rowB"");"
114196,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,392,,"    final Path logDir = TEST_UTIL.getDataTestDirOnTestFS(callingMethod + "".log"");"
114197,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,446,,"    byte[] family = Bytes.toBytes(""family"");"
114198,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,700,,"        Path recoveredEdits = new Path(recoveredEditsDir, String.format(""%019d"", i));"
114199,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1404,,"        Bytes.toBytes(""trans-date""), Bytes.toBytes(""trans-tags""), Bytes.toBytes(""trans-group"") };"
114200,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1441,,"    this.region = initHRegion(tableName, method, CONF, true, Bytes.toBytes(""somefamily""));"
114201,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1571,,"    metricsAssertHelper.assertCounter(""syncTimeNumOps"", syncs + 1, source);"
114202,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1771,,"    byte[] row1 = Bytes.toBytes(""row1"");"
114203,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1772,,"    byte[] fam1 = Bytes.toBytes(""fam1"");"
114204,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1773,,"    byte[] qf1 = Bytes.toBytes(""qualifier"");"
114205,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,1945,,"    byte[] val3 = Bytes.toBytes(""value3"");"
114206,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2032,,"    byte[] fam2 = Bytes.toBytes(""fam2"");"
114207,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2090,,"    byte[] qf1 = Bytes.toBytes(""qualifier1"");"
114208,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2091,,"    byte[] qf2 = Bytes.toBytes(""qualifier2"");"
114209,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2161,,"    final byte[] FAMILY = Bytes.toBytes(""fam"");"
114210,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2291,,"      fail(""should throw DoNotRetryIOException"");"
114211,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,2319,,"      assertEquals(""The row of the action <wrongRow> doesn't match the original one <rowA>"","
114212,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,3063,,"    final byte[] row = Bytes.toBytes(""row"");"
114213,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,3182,,"    byte[] fam = Bytes.toBytes(""info"");"
114214,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,3304,,"    row = Bytes.toBytes(""row2"");"
114215,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,3534,,"    byte[] col1 = Bytes.toBytes(""col1"");"
114216,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,3535,,"    byte[] col2 = Bytes.toBytes(""col2"");"
114217,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,4782,,"          LOG.info(""Interrupted"", e);"
114218,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,5963,,"    byte[] rowC = Bytes.toBytes(""rowC"");"
114219,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,6281,,"    byte[] cf1 = Bytes.toBytes(""CF1"");"
114220,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,6519,,"    put.addColumn(cf1, col, Bytes.toBytes(""val""));"
114221,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,7125,,"    int prevLockTimeout = CONF.getInt(""hbase.rowlock.wait.duration"", 30000);"
114222,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,7679,,"          LOG.info(""Starting region operation holder"");"
114223,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java,7695,,"          LOG.info(""Stopped region operation holder"");"
114224,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionFileSystem.java,92,,"    LOG.debug(""Storage policy of cf 0: ["" + spA + ""]."");"
114225,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionFileSystem.java,93,,"    LOG.debug(""Storage policy of cf 1: ["" + spB + ""]."");"
114226,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionFileSystem.java,117,,"      cfdA.setValue(HStore.BLOCK_STORAGE_POLICY_KEY, ""ONE_SSD"");"
114227,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionFileSystem.java,127,,"      cfdB.setStoragePolicy(""ALL_SSD"");"
114228,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionFileSystem.java,286,,"      if (retryCount++ < successRetryCount) throw new IOException(""Something bad happen"");"
114229,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,132,,"      Bytes.toBytes(""cf1""), Bytes.toBytes(""cf2""), Bytes.toBytes(""cf3"")};"
114230,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,282,,"    LOG.info(""-- Replaying edits and flush events in secondary"");"
114231,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,292,,"          LOG.info(""-- Replaying flush start in secondary"");"
114232,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,399,,"          LOG.info(""-- Replaying flush commit in secondary"");"
114233,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,438,,"    LOG.info(""-- Verifying edits from secondary"");"
114234,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,553,,"    LOG.info(""-- Verifying edits from primary."");"
114235,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,872,,"    LOG.info(""-- Replaying edits and region events in secondary"");"
114236,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java,1593,,"        .setStoreHomeDir(""/store_home_dir"")"
114237,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionTracing.java,134,,"    assertSpan(""Region.getRowLock"");"
114238,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHStore.java,143,,"  byte [] row = Bytes.toBytes(""row"");"
114239,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHStore.java,1255,,"        assertTrue(""expected:"" + Bytes.toStringBinary(value1)"
114240,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHStore.java,1256,,"          + "", actual:"" + Bytes.toStringBinary(actualValue)"
114241,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHStoreFile.java,554,,"      KeyValue kv = new KeyValue(Bytes.toBytes(row), Bytes.toBytes(""family""), Bytes.toBytes(""col""),"
114242,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHStoreFile.java,554,,"      KeyValue kv = new KeyValue(Bytes.toBytes(row), Bytes.toBytes(""family""), Bytes.toBytes(""col""),"
114243,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHeapMemoryManager.java,141,,"    final ChoreService choreService = new ChoreService(""TEST_SERVER_NAME"");"
114244,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueScanFixture.java,44,,"        KeyValueTestUtil.create(""RowA"", ""family"", ""qf1"","
114245,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMasterAddressTracker.java,84,,"    final ServerName sn = ServerName.valueOf(""localhost"", 1234,"
114246,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsRegionServer.java,261,,"    assertFalse(HELPER.checkGaugeExists(""ServerWriteQueryPerSecond_count"", serverSource));"
114247,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsTableLatencies.java,96,,"      tn1, MetricsTableQueryMeterImpl.TABLE_READ_QUERY_PER_SECOND + ""_"" + ""count""),"
114248,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMiniBatchOperationInProgress.java,61,,"      fail(""Should throw Exception while accessing out of range"");"
114249,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java,248,,"    long writeRequests = metricsHelper.getCounter(""writeRequestCount"", serverSource);"
114250,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestReversibleScanners.java,133,,"        LOG.info(""Setting read point to "" + readPoint);"
114251,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRowPrefixBloomFilter.java,161,,"              new KeyValue(Bytes.toBytes(row), Bytes.toBytes(""family""), Bytes.toBytes(""col""), now,"
114252,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSCVFWithMiniCluster.java,99,,"    put.addColumn(FAMILY_A, QUALIFIER_BAR, Bytes.toBytes(""_flag_""));"
114253,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithBulkload.java,83,,"        .newBuilder(Bytes.toBytes(""col""))"
114254,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithBulkload.java,106,,"    Put put0 = new Put(Bytes.toBytes(""row1""));"
114255,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestScannerWithBulkload.java,108,,"        .toBytes(""version3"")));"
114256,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSeekOptimizations.java,193,,"        String.format(""%.2f%%"", totalSeekLazy * 100.0 / totalSeekDiligent) +"
114257,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java,407,,"      printOutRegions(server, ""Initial regions: "");"
114258,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java,528,,"      .setColumnFamily(ColumnFamilyDescriptorBuilder.of(""col"")).build();"
114259,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java,533,,"        String row = ""row"" + i;"
114260,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java,234,,"      LOG.info(""Cell="" + cell + "", nextIndex="" + CellUtil.toString(getNextIndexedKey(), false)"
114261,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java,234,,"      LOG.info(""Cell="" + cell + "", nextIndex="" + CellUtil.toString(getNextIndexedKey(), false)"
114262,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java,235,,"          + "", optimized="" + optimized);"
114263,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java,523,,"        create(r1, CF_STR, ""a"", 1, KeyValue.Type.Put, ""dont-care""),"
114264,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScannerClosure.java,93,,"      new KeyValue[] { create(""R1"", ""cf"", ""a"", 11, KeyValue.Type.Put, ""dont-care""),"
114265,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java,134,,"      put.setAttribute(""visibility"", Bytes.toBytes(""myTag""));"
114266,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java,145,,"      byte[] value1 = Bytes.toBytes(""1000dfsdf"");"
114267,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java,401,,"      put.setAttribute(""visibility"", Bytes.toBytes(""tag1""));"
114268,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java,419,,"      increment.setAttribute(""visibility"", Bytes.toBytes(""tag2""));"
114269,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java,265,,"    s = s + ""The smallest sequence in region WAL is: "" + smallestSeqInRegionCurrentMemstorePhaseII"
114270,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java,266,,"        + "", the smallest sequence in CF1:"" + smallestSeqCF1PhaseII + "", "" +"
114271,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java,267,,"        ""the smallest sequence in CF2:"""
114272,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java,268,,"        + smallestSeqCF2PhaseII +"", the smallest sequence in CF3:"" + smallestSeqCF3PhaseII + ""\n"";"
114273,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestCompactedHFilesDischarger.java,109,,"      Put p = new Put(Bytes.toBytes(""row"" + i));"
114274,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestStripeCompactionPolicy.java,166,,"    conf.unset(""hbase.hstore.compaction.min.size"");"
114275,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestScanDeleteTracker.java,52,,"    KeyValue kv = new KeyValue(Bytes.toBytes(""row""), Bytes.toBytes(""f""), Bytes.toBytes(""qualifier""),"
114276,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestScanDeleteTracker.java,52,,"    KeyValue kv = new KeyValue(Bytes.toBytes(""row""), Bytes.toBytes(""f""), Bytes.toBytes(""qualifier""),"
114277,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestScanWildcardColumnTracker.java,53,,"    qualifiers.add(Bytes.toBytes(""qualifier1""));"
114278,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestUserScanQueryMatcher.java,114,,"      LOG.debug(""expected "" + expected.get(i) + "", actual "" + actual.get(i));"
114279,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestUserScanQueryMatcher.java,114,,"      LOG.debug(""expected "" + expected.get(i) + "", actual "" + actual.get(i));"
114280,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestMetricsWAL.java,85,,"    TableName tableName = TableName.valueOf(""foo"");"
114281,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestPerTableCFReplication.java,217,,"    assertEquals(""cf1"", tabCFsMap.get(tableName2).get(0));// the only cf is ""cf1"""
114282,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestPerTableCFReplication.java,225,,"    assertTrue(tabCFsMap.get(tableName3).contains(""cf3""));// contains ""cf3"""
114283,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationEndpoint.java,399,,"        .containsKey(""RandomNewTable"");"
114284,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSmallTests.java,125,,"        fail(""Waited too much time for put replication"");"
114285,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSyncUpTool.java,98,,"      p = new Put(Bytes.toBytes(""row"" + i));"
114286,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSyncUpTool.java,99,,"      p.addColumn(FAMILY, QUALIFIER, Bytes.toBytes(""val"" + i));"
114287,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSyncUpToolWithBulkLoadedData.java,180,,"    loadAndValidateHFileReplication(""HFileReplication_1"", row, FAMILY, ht1Source, hfileRanges, 50);"
114288,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWALEntryFilters.java,78,,"    WALKeyImpl key3 = new WALKeyImpl(new byte[0], TableName.valueOf(""foo""),"
114289,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWALEntryFilters.java,336,,"    namespaces.add(""default"");"
114290,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationWALEntryFilters.java,345,,"    namespaces.add(""ns1"");"
114291,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestSyncReplicationStandBy.java,81,,"      assertDisallow(table, t -> t.get(new Get(Bytes.toBytes(""row""))));"
114292,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpoint.java,139,,"        LOG.warn(""Region replica replication peer id="" + peerId + "" not exist"", e);"
114293,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSource.java,127,,"    conf.setInt(""replication.source.maxretriesmultiplier"", 1);"
114294,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSource.java,141,,"      TEST_UTIL.createMockRegionServerService(ServerName.parseServerName(""a.b.c,1,1""));"
114295,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSource.java,148,,"      rs.enqueueLog(new Path(""a.1"" + META_WAL_PROVIDER_ID));"
114296,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSource.java,153,,"      rs.terminate(""Done"");"
114297,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin1.java,111,,"    assertNull(ADMIN.getRSGroup(Address.fromParts(""bogus"", 123)));"
114298,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin1.java,208,,"    addGroup(""bar"", 3);"
114299,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin1.java,559,,"      fail(""ConstraintException was expected."");"
114300,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin2.java,181,,"    ADMIN.addRSGroup(""foo"");"
114301,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin2.java,194,,"      String msg = ""Expected '"" + exp + ""' in exception message: "";"
114302,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsAdmin2.java,194,,"      String msg = ""Expected '"" + exp + ""' in exception message: "";"
114303,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureIPC.java,318,,"    setRpcProtection(""privacy,authentication"", ""authentication"");"
114304,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureIPC.java,338,,"    setRpcProtection(""integrity"", ""privacy"");"
114305,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureIPC.java,349,,"    setCryptoAES(""true"", ""true"");"
114306,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java,127,,"    final User user = User.createUserForTesting(conf, ""testuser"", new String[]{""foo""});"
114307,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java,235,,"    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION, ""kerberos"");"
114308,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java,161,,"        fail(""Expected action to pass for user '"" + user.getShortName() + ""' but was denied"");"
114309,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/SecureTestUtil.java,161,,"        fail(""Expected action to pass for user '"" + user.getShortName() + ""' but was denied"");"
114310,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessControlFilter.java,123,,"      p.addColumn(FAMILY, PUBLIC_COL, Bytes.toBytes(""info "" + i));"
114311,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,198,,"  private static final String GROUP_ADMIN = ""group_admin"";"
114312,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,2220,,"          Put put = new Put(Bytes.toBytes(""test""));"
114313,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,2382,,"      LOG.error(""error during call of AccessControlClient.grant. "", e);"
114314,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,2393,,"      LOG.error(""error during call of AccessControlClient.revoke "", e);"
114315,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,3339,,"        fail(""this should have thrown IllegalArgumentException"");"
114316,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java,3401,,"              HConstants.EMPTY_BYTE_ARRAY, ""dummy"", actions);"
114317,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java,261,,"    final User user1 = User.createUserForTesting(conf, ""user1"", new String[0]);"
114318,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java,262,,"    final User user2 = User.createUserForTesting(conf, ""user2"", new String[0]);"
114319,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCoprocessorWhitelistMasterObserver.java,109,,"    conf.setInt(""hbase.client.retries.number"", 5);"
114320,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestScanEarlyTermination.java,158,,"        conf.set(""testkey"", TEST_UTIL.getRandomUUID().toString());"
114321,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestScanEarlyTermination.java,192,,"            assertTrue(""Improper exclusion"", result.containsColumn(TEST_FAMILY1, TEST_Q1));"
114322,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestTablePermissions.java,147,,"        new UserPermission(""george"","
114323,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestTablePermissions.java,152,,"        new UserPermission(""hubert"","
114324,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestUnloadAccessController.java,66,,"      fail(""Expected UnsupportedOperationException but not found"");"
114325,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestWithDisabledAuthorization.java,596,,"        SnapshotDescription snapshot = new SnapshotDescription(""foo"");"
114326,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestWithDisabledAuthorization.java,677,,"        NamespaceDescriptor ns = NamespaceDescriptor.create(""test"").build();"
114327,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/CustomSaslAuthenticationProviderTestBase.java,134,,"    db.put(""user1"", USER1_PASSWORD);"
114328,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestEnforcingScanLabelGenerator.java,137,,"          assertTrue(""Missing authorization"", result.containsColumn(CF, Q1));"
114329,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabels.java,95,,"  public static final byte[] row1 = Bytes.toBytes(""row1"");"
114330,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabels.java,670,,"      fail(""Lables table should not get altered by user."");"
114331,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsOpWithDifferentUsersNoACL.java,81,,"    NORMAL_USER = User.createUserForTesting(conf, ""user1"", new String[] {});"
114332,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsOpWithDifferentUsersNoACL.java,120,,"    assertEquals(""org.apache.hadoop.hbase.security.AccessDeniedException"", response"
114333,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithACL.java,103,,"    SUPERUSER = User.createUserForTesting(conf, ""admin"", new String[] { ""supergroup"" });"
114334,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithACL.java,104,,"    NORMAL_USER1 = User.createUserForTesting(conf, ""user1"", new String[] {});"
114335,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithACL.java,245,,"    assertEquals(""org.apache.hadoop.hbase.security.AccessDeniedException"", response"
114336,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithDeletes.java,104,,"                ""("" + PRIVATE + ""&"" + CONFIDENTIAL + "")|("" + SECRET + ""&"" + TOPSECRET + "")""));"
114337,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithDeletes.java,542,,"      Put put = new Put(Bytes.toBytes(""row1""));"
114338,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabelsWithDeletes.java,928,,"    put = new Put(Bytes.toBytes(""row2""));"
114339,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLablesWithGroups.java,110,,"          VisibilityClient.setAuths(conn, new String[] { CONFIDENTIAL }, ""@testgroup"");"
114340,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestWithDisabledAuthorization.java,115,,"          fail(""Should not have failed"");"
114341,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestSnapshotDescriptionUtils.java,175,,"      new Path(""file:"" + hbsaeDir + ""/""), conf));"
114342,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,97,,"    new byte[][] { Bytes.toBytes(""ddd""), Bytes.toBytes(""ppp"") };"
114343,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,97,,"    new byte[][] { Bytes.toBytes(""ddd""), Bytes.toBytes(""ppp"") };"
114344,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,126,,"      new byte[][][] { new byte[][] { Bytes.toBytes(""aaaa""), Bytes.toBytes(""cccc"") },"
114345,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,127,,"        new byte[][] { Bytes.toBytes(""ddd""), Bytes.toBytes(""ooo"") }, },"
114346,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,157,,"      new byte[][][] { new byte[][] { Bytes.toBytes(""aaaa""), Bytes.toBytes(""eee"") },"
114347,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,158,,"        new byte[][] { Bytes.toBytes(""fff""), Bytes.toBytes(""zzz"") }, });"
114348,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,158,,"        new byte[][] { Bytes.toBytes(""fff""), Bytes.toBytes(""zzz"") }, });"
114349,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,188,,"      new byte[][] { Bytes.toBytes(""aaa""), Bytes.toBytes(""fff""), Bytes.toBytes(""jjj""),"
114350,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,189,,"        Bytes.toBytes(""ppp""), Bytes.toBytes(""uuu""), Bytes.toBytes(""zzz""), },"
114351,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,504,,"      QUALIFIER, Bytes.toBytes(""begin""), Bytes.toBytes(""end""), 500);"
114352,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestBulkLoadHFiles.java,504,,"      QUALIFIER, Bytes.toBytes(""begin""), Bytes.toBytes(""end""), 500);"
114353,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java,47,,"    TableName fakeTableName1 = TableName.valueOf(""fakeTableName1"");"
114354,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java,52,,"    TableName fakeTableName2 = TableName.valueOf(""fakeTableName2"");"
114355,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java,100,,"    final String[] args = { ""-t"", ""10000"", ""-zookeeper"" };"
114356,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/coprocessor/CoprocessorValidatorTest.java,96,,"    List<CoprocessorViolation> violations = validateClass(""NoSuchClass"");"
114357,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/coprocessor/CoprocessorValidatorTest.java,170,,"    List<CoprocessorViolation> violations = validateClass(""ObsoleteMethodObserver"");"
114358,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java,332,,"      LOG.error(""Error checking data for key ["" + rowKeyStr + ""], no data returned"");"
114359,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java,364,,"          LOG.error(""Error checking data for key ["" + rowKeyStr + ""], column family ["""
114360,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/MultiThreadedAction.java,365,,"            + cfStr + ""], column ["" + Bytes.toString(MUTATE_INFO) + ""]; value is not found"");"
114361,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestFSTableDescriptors.java,74,,"    Path p = new Path(""/tmp"", FSTableDescriptors.TABLEINFO_FILE_PREFIX);"
114362,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckCleanReplicationBarriers.java,108,,"      assertEquals(""check if there is lastPushedId"", 10,"
114363,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionMover1.java,114,,"      LOG.info(""Unloading "" + regionServer.getServerName());"
114364,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionMover2.java,85,,"      .setColumnFamily(ColumnFamilyDescriptorBuilder.of(""fam1"")).build();"
114365,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitCalculator.java,144,,"    assertEquals(""A:\t[A, B]\t\n"" + ""B:\t[B, C]\t\n"" + ""C:\t[C, D]\t\nD:\t\n"", res);"
114366,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitCalculator.java,199,,"        + ""C:\t\n"", res);"
114367,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,89,,"    expectedBounds.add(Bytes.toBytes(""10000000""));"
114368,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,90,,"    expectedBounds.add(Bytes.toBytes(""20000000""));"
114369,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,91,,"    expectedBounds.add(Bytes.toBytes(""30000000""));"
114370,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,167,,"    byte[] firstRow = Bytes.toBytes(""00000000"");"
114371,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,322,,"    assertFalse(splitFailsPrecondition(algo, ""\\x00"", ""\\xAA"")); // custom is fine"
114372,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java,322,,"    assertFalse(splitFailsPrecondition(algo, ""\\x00"", ""\\xAA"")); // custom is fine"
114373,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestSortedList.java,84,,"      fail(""Iterator should have thrown an exception"");"
114374,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestBoundedRegionGroupingStrategy.java,130,,"      new String[] { ""-threads"", ""3"", ""-verify"", ""-noclosefs"", ""-iterations"", ""3000"" });"
114375,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestBoundedRegionGroupingStrategy.java,130,,"      new String[] { ""-threads"", ""3"", ""-verify"", ""-noclosefs"", ""-iterations"", ""3000"" });"
114376,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestBoundedRegionGroupingStrategy.java,130,,"      new String[] { ""-threads"", ""3"", ""-verify"", ""-noclosefs"", ""-iterations"", ""3000"" });"
114377,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestBoundedRegionGroupingStrategy.java,130,,"      new String[] { ""-threads"", ""3"", ""-verify"", ""-noclosefs"", ""-iterations"", ""3000"" });"
114378,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestBoundedRegionGroupingStrategy.java,130,,"      new String[] { ""-threads"", ""3"", ""-verify"", ""-noclosefs"", ""-iterations"", ""3000"" });"
114379,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestFSHLogProvider.java,156,,"    final byte[] row = Bytes.toBytes(""row"");"
114380,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java,205,,"    scopes.put(Bytes.toBytes(""column""), 0);"
114381,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java,518,,"    byte[] row = Bytes.toBytes(""row"");"
114382,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALProvider.java,42,,"    Path metaPath1 = new Path(""hdfs://localhost:59875/user/stack/test-data/"" +"
114383,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALProvider.java,43,,"      ""f4cb8ffa-6ff7-59a6-f167-6cc00f24899a/WALs/localhost,59908,1600304600425/"" +"
114384,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALSplit.java,425,,"    final String REGION = ""region__1"";"
114385,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/WALCorruptionDueToDanglingByteBufferTestBase.java,68,,"        table.batch(Arrays.asList(new Put(getBytes(""row"", i))"
114386,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/WALCorruptionDueToDanglingByteBufferTestBase.java,69,,"          .addColumn(CF, CQ, getBytes(""value"", i)).setDurability(Durability.ASYNC_WAL)),"
114387,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/WALCorruptionWithMultiPutDueToDanglingByteBufferTestBase.java,70,,"        Put p = new Put(getBytes(""row"", i)).addColumn(CF, CQ, getBytes(""value"", i))"
114388,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/wal/WALCorruptionWithMultiPutDueToDanglingByteBufferTestBase.java,70,,"        Put p = new Put(getBytes(""row"", i)).addColumn(CF, CQ, getBytes(""value"", i))"
114389,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZooKeeperACL.java,141,,"    assertEquals(""sasl"", acls.get(0).getId().getScheme());"
114390,./TargetProjects/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZooKeeperACL.java,142,,"    assertEquals(""hbase"", acls.get(0).getId().getId());"
114391,./TargetProjects/hbase/hbase-testing-util/src/main/java/org/apache/hadoop/hbase/HBaseTestingUtility.java,414,,"      ""mapreduce.cluster.local.dir"","
114392,./TargetProjects/hbase/hbase-testing-util/src/main/java/org/apache/hadoop/hbase/HBaseTestingUtility.java,602,,"    Log4jUtils.setLogLevel(org.apache.hadoop.metrics2.util.MBeans.class.getName(), ""ERROR"");"
114393,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftHBaseServiceHandler.java,844,,"      LOG.warn(""scanner ID is invalid"");"
114394,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java,162,,"    this.compression = ""NONE"";"
114395,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,758,,"      sendBase(""enableTable"", args);"
114396,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,781,,"      sendBase(""disableTable"", args);"
114397,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,804,,"      sendBase(""isTableEnabled"", args);"
114398,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,830,,"      sendBase(""compact"", args);"
114399,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,853,,"      sendBase(""majorCompact"", args);"
114400,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,875,,"      sendBase(""getTableNames"", args);"
114401,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,901,,"      sendBase(""getColumnDescriptors"", args);"
114402,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,927,,"      sendBase(""getTableRegions"", args);"
114403,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,954,,"      sendBase(""createTable"", args);"
114404,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,983,,"      sendBase(""deleteTable"", args);"
114405,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1009,,"      sendBase(""get"", args);"
114406,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1039,,"      sendBase(""getVer"", args);"
114407,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1070,,"      sendBase(""getVerTs"", args);"
114408,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1098,,"      sendBase(""getRow"", args);"
114409,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1127,,"      sendBase(""getRowWithColumns"", args);"
114410,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1156,,"      sendBase(""getRowTs"", args);"
114411,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1186,,"      sendBase(""getRowWithColumnsTs"", args);"
114412,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1214,,"      sendBase(""getRows"", args);"
114413,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1243,,"      sendBase(""getRowsWithColumns"", args);"
114414,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1272,,"      sendBase(""getRowsTs"", args);"
114415,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1302,,"      sendBase(""getRowsWithColumnsTs"", args);"
114416,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1331,,"      sendBase(""mutateRow"", args);"
114417,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1361,,"      sendBase(""mutateRowTs"", args);"
114418,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1389,,"      sendBase(""mutateRows"", args);"
114419,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1418,,"      sendBase(""mutateRowsTs"", args);"
114420,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1447,,"      sendBase(""atomicIncrement"", args);"
114421,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1479,,"      sendBase(""deleteAll"", args);"
114422,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1506,,"      sendBase(""deleteAllTs"", args);"
114423,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1531,,"      sendBase(""deleteAllRow"", args);"
114424,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1554,,"      sendBase(""increment"", args);"
114425,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1577,,"      sendBase(""incrementRows"", args);"
114426,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1603,,"      sendBase(""deleteAllRowTs"", args);"
114427,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1628,,"      sendBase(""scannerOpenWithScan"", args);"
114428,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1657,,"      sendBase(""scannerOpen"", args);"
114429,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1687,,"      sendBase(""scannerOpenWithStop"", args);"
114430,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1716,,"      sendBase(""scannerOpenWithPrefix"", args);"
114431,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1746,,"      sendBase(""scannerOpenTs"", args);"
114432,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1777,,"      sendBase(""scannerOpenWithStopTs"", args);"
114433,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1803,,"      sendBase(""scannerGet"", args);"
114434,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1833,,"      sendBase(""scannerGetList"", args);"
114435,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1862,,"      sendBase(""scannerClose"", args);"
114436,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1888,,"      sendBase(""getRegionInfo"", args);"
114437,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1914,,"      sendBase(""append"", args);"
114438,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1945,,"      sendBase(""checkAndPut"", args);"
114439,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1973,,"      sendBase(""getThriftServerType"", args);"
114440,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,1995,,"      sendBase(""getClusterId"", args);"
114441,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,2050,,"          throw new java.lang.IllegalStateException(""Method call not finished!"");"
114442,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,5260,,"              _LOGGER.error(""TTransportException writing to internal frame buffer"", e);"
114443,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,5263,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
114444,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,5276,,"              _LOGGER.error(""TTransportException inside handler"", e);"
114445,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,5280,,"              _LOGGER.error(""TApplicationException inside handler"", e);"
114446,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,5284,,"              _LOGGER.error(""Exception inside handler"", e);"
114447,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8266,,"    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(""tableName"", org.apache.thrift.protocol.TType.STRING, (short)1);"
114448,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8310,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
114449,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8310,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
114450,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8344,,"          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , ""Bytes"")));"
114451,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8532,,"      sb.append(""tableName:"");"
114452,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8534,,"        sb.append(""null"");"
114453,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,8897,,"      sb.append(""io:"");"
114454,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,10170,,"    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(""success"", org.apache.thrift.protocol.TType.BOOL, (short)0);"
114455,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,10484,,"      sb.append(""success:"");"
114456,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,10639,,"    private static final org.apache.thrift.protocol.TField TABLE_NAME_OR_REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(""tableNameOrRegionName"", org.apache.thrift.protocol.TType.STRING, (short)1);"
114457,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,12459,,"              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , ""Text""))));"
114458,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,15709,,"      sb.append(""ia:"");"
114459,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,16651,,"    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField(""row"", org.apache.thrift.protocol.TType.STRING, (short)2);"
114460,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,16652,,"    private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField(""column"", org.apache.thrift.protocol.TType.STRING, (short)3);"
114461,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,16653,,"    private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField(""attributes"", org.apache.thrift.protocol.TType.MAP, (short)4);"
114462,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,17233,,"      sb.append(""row:"");"
114463,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,17241,,"      sb.append(""column:"");"
114464,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,17249,,"      sb.append(""attributes:"");"
114465,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,18010,,"    private static final org.apache.thrift.protocol.TField NUM_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField(""numVersions"", org.apache.thrift.protocol.TType.I32, (short)4);"
114466,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,19479,,"    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField(""timestamp"", org.apache.thrift.protocol.TType.I64, (short)4);"
114467,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,20243,,"      sb.append(""timestamp:"");"
114468,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,22282,,"    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField(""columns"", org.apache.thrift.protocol.TType.LIST, (short)3);"
114469,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,22879,,"      sb.append(""columns:"");"
114470,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,26514,,"    private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField(""rows"", org.apache.thrift.protocol.TType.LIST, (short)2);"
114471,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,27005,,"      sb.append(""rows:"");"
114472,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,32135,,"    private static final org.apache.thrift.protocol.TField MUTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField(""mutations"", org.apache.thrift.protocol.TType.LIST, (short)3);"
114473,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,34938,,"    private static final org.apache.thrift.protocol.TField ROW_BATCHES_FIELD_DESC = new org.apache.thrift.protocol.TField(""rowBatches"", org.apache.thrift.protocol.TType.LIST, (short)2);"
114474,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,37484,,"    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(""value"", org.apache.thrift.protocol.TType.I64, (short)4);"
114475,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,45890,,"          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , ""ScannerID"")));"
114476,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,46281,,"    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField(""startRow"", org.apache.thrift.protocol.TType.STRING, (short)2);"
114477,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,46883,,"      sb.append(""startRow:"");"
114478,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java,47633,,"    private static final org.apache.thrift.protocol.TField STOP_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField(""stopRow"", org.apache.thrift.protocol.TType.STRING, (short)3);"
114479,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java,104,,"        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , ""Text"")));"
114480,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TAppend.java,550,,"      sb.append(""null"");"
114481,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java,123,,"        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , ""Text"")));"
114482,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java,749,,"      sb.append(""null"");"
114483,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java,142,,"        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , ""Text"")));"
114484,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java,953,,"        sb.append(""null"");"
114485,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/client/ThriftAdmin.java,502,,"    throw new NotImplementedException(""compact not supported in ThriftAdmin"");"
114486,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/client/ThriftAdmin.java,538,,"    throw new NotImplementedException(""majorCompact not supported in ThriftAdmin"");"
114487,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TAppend.java,684,,"      sb.append(""null"");"
114488,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnFamilyDescriptor.java,1711,,"      sb.append(""null"");"
114489,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java,675,,"      sb.append(""null"");"
114490,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java,727,,"      sb.append(""null"");"
114491,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java,1357,,"      sb.append(""null"");"
114492,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,677,,"      sendBase(""exists"", args);"
114493,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,704,,"      sendBase(""existsAll"", args);"
114494,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,731,,"      sendBase(""get"", args);"
114495,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,758,,"      sendBase(""getMultiple"", args);"
114496,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,785,,"      sendBase(""put"", args);"
114497,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,813,,"      sendBase(""checkAndPut"", args);"
114498,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,840,,"      sendBase(""putMultiple"", args);"
114499,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,864,,"      sendBase(""deleteSingle"", args);"
114500,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,888,,"      sendBase(""deleteMultiple"", args);"
114501,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,919,,"      sendBase(""checkAndDelete"", args);"
114502,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,946,,"      sendBase(""increment"", args);"
114503,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,973,,"      sendBase(""append"", args);"
114504,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1000,,"      sendBase(""openScanner"", args);"
114505,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1027,,"      sendBase(""getScannerRows"", args);"
114506,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1056,,"      sendBase(""closeScanner"", args);"
114507,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1083,,"      sendBase(""mutateRow"", args);"
114508,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1108,,"      sendBase(""getScannerResults"", args);"
114509,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1136,,"      sendBase(""getRegionLocation"", args);"
114510,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1162,,"      sendBase(""getAllRegionLocations"", args);"
114511,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1194,,"      sendBase(""checkAndMutate"", args);"
114512,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1220,,"      sendBase(""getTableDescriptor"", args);"
114513,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1246,,"      sendBase(""getTableDescriptors"", args);"
114514,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1272,,"      sendBase(""tableExists"", args);"
114515,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1299,,"      sendBase(""getTableDescriptorsByPattern"", args);"
114516,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1325,,"      sendBase(""getTableDescriptorsByNamespace"", args);"
114517,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1352,,"      sendBase(""getTableNamesByPattern"", args);"
114518,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1378,,"      sendBase(""getTableNamesByNamespace"", args);"
114519,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1405,,"      sendBase(""createTable"", args);"
114520,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1428,,"      sendBase(""deleteTable"", args);"
114521,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1452,,"      sendBase(""truncateTable"", args);"
114522,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1475,,"      sendBase(""enableTable"", args);"
114523,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1498,,"      sendBase(""disableTable"", args);"
114524,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1521,,"      sendBase(""isTableEnabled"", args);"
114525,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1547,,"      sendBase(""isTableDisabled"", args);"
114526,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1573,,"      sendBase(""isTableAvailable"", args);"
114527,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1600,,"      sendBase(""isTableAvailableWithSplit"", args);"
114528,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1627,,"      sendBase(""addColumnFamily"", args);"
114529,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1651,,"      sendBase(""deleteColumnFamily"", args);"
114530,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1675,,"      sendBase(""modifyColumnFamily"", args);"
114531,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1698,,"      sendBase(""modifyTable"", args);"
114532,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1721,,"      sendBase(""createNamespace"", args);"
114533,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1744,,"      sendBase(""modifyNamespace"", args);"
114534,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1767,,"      sendBase(""deleteNamespace"", args);"
114535,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1790,,"      sendBase(""getNamespaceDescriptor"", args);"
114536,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1815,,"      sendBase(""listNamespaceDescriptors"", args);"
114537,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1840,,"      sendBase(""listNamespaces"", args);"
114538,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1865,,"      sendBase(""getThriftServerType"", args);"
114539,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1887,,"      sendBase(""getClusterId"", args);"
114540,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1911,,"      sendBase(""getSlowLogResponses"", args);"
114541,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1937,,"      sendBase(""clearSlowLogResponses"", args);"
114542,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,1998,,"          throw new java.lang.IllegalStateException(""Method call not finished!"");"
114543,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,5292,,"              _LOGGER.error(""TTransportException writing to internal frame buffer"", e);"
114544,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,5295,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
114545,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,5308,,"              _LOGGER.error(""TTransportException inside handler"", e);"
114546,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,5312,,"              _LOGGER.error(""TApplicationException inside handler"", e);"
114547,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,5316,,"              _LOGGER.error(""Exception inside handler"", e);"
114548,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8521,,"    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField(""table"", org.apache.thrift.protocol.TType.STRING, (short)1);"
114549,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8522,,"    private static final org.apache.thrift.protocol.TField TGET_FIELD_DESC = new org.apache.thrift.protocol.TField(""tget"", org.apache.thrift.protocol.TType.STRUCT, (short)2);"
114550,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8576,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
114551,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8576,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
114552,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8873,,"      sb.append(""table:"");"
114553,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8875,,"        sb.append(""null"");"
114554,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,8895,,"        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'table' was not present! Struct: "" + toString());"
114555,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,9022,,"    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(""success"", org.apache.thrift.protocol.TType.BOOL, (short)0);"
114556,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,9336,,"      sb.append(""success:"");"
114557,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,9340,,"      sb.append(""io:"");"
114558,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,9492,,"    private static final org.apache.thrift.protocol.TField TGETS_FIELD_DESC = new org.apache.thrift.protocol.TField(""tgets"", org.apache.thrift.protocol.TType.LIST, (short)2);"
114559,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,12629,,"    private static final org.apache.thrift.protocol.TField TPUT_FIELD_DESC = new org.apache.thrift.protocol.TField(""tput"", org.apache.thrift.protocol.TType.STRUCT, (short)2);"
114560,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,13497,,"    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField(""row"", org.apache.thrift.protocol.TType.STRING, (short)2);"
114561,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,13498,,"    private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField(""family"", org.apache.thrift.protocol.TType.STRING, (short)3);"
114562,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,13499,,"    private static final org.apache.thrift.protocol.TField QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField(""qualifier"", org.apache.thrift.protocol.TType.STRING, (short)4);"
114563,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,13500,,"    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(""value"", org.apache.thrift.protocol.TType.STRING, (short)5);"
114564,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,14260,,"      sb.append(""row:"");"
114565,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,14309,,"        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'row' was not present! Struct: "" + toString());"
114566,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,15904,,"    private static final org.apache.thrift.protocol.TField TDELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(""tdelete"", org.apache.thrift.protocol.TType.STRUCT, (short)2);"
114567,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,21295,,"    private static final org.apache.thrift.protocol.TField TSCAN_FIELD_DESC = new org.apache.thrift.protocol.TField(""tscan"", org.apache.thrift.protocol.TType.STRUCT, (short)2);"
114568,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,22264,,"    private static final org.apache.thrift.protocol.TField SCANNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(""scannerId"", org.apache.thrift.protocol.TType.I32, (short)1);"
114569,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,22265,,"    private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField(""numRows"", org.apache.thrift.protocol.TType.I32, (short)2);"
114570,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,31627,,"    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(""tableName"", org.apache.thrift.protocol.TType.STRUCT, (short)1);"
114571,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,31880,,"      sb.append(""tableName:"");"
114572,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,32478,,"    private static final org.apache.thrift.protocol.TField REGEX_FIELD_DESC = new org.apache.thrift.protocol.TField(""regex"", org.apache.thrift.protocol.TType.STRING, (short)1);"
114573,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,32479,,"    private static final org.apache.thrift.protocol.TField INCLUDE_SYS_TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField(""includeSysTables"", org.apache.thrift.protocol.TType.BOOL, (short)2);"
114574,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,33491,,"    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(""name"", org.apache.thrift.protocol.TType.STRING, (short)1);"
114575,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,33744,,"      sb.append(""name:"");"
114576,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,33758,,"        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'name' was not present! Struct: "" + toString());"
114577,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,36298,,"    private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField(""desc"", org.apache.thrift.protocol.TType.STRUCT, (short)1);"
114578,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,36299,,"    private static final org.apache.thrift.protocol.TField SPLIT_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField(""splitKeys"", org.apache.thrift.protocol.TType.LIST, (short)2);"
114579,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,37477,,"        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'tableName' was not present! Struct: "" + toString());"
114580,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,43834,,"    private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField(""column"", org.apache.thrift.protocol.TType.STRUCT, (short)2);"
114581,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,47163,,"    private static final org.apache.thrift.protocol.TField NAMESPACE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField(""namespaceDesc"", org.apache.thrift.protocol.TType.STRUCT, (short)1);"
114582,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java,53034,,"    private static final org.apache.thrift.protocol.TField SERVER_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField(""serverNames"", org.apache.thrift.protocol.TType.SET, (short)1);"
114583,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java,691,,"      sb.append(""null"");"
114584,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TLogQueryFilter.java,728,,"        sb.append(""null"");"
114585,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TOnlineLogRecord.java,1219,,"      sb.append(""null"");"
114586,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java,696,,"      sb.append(""null"");"
114587,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java,1614,,"        sb.append(""null"");"
114588,./TargetProjects/hbase/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTableDescriptor.java,529,,"      sb.append(""null"");"
114589,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/ErrorThrowingGetObserver.java,65,,"          throw new CallQueueTooBigException(""Failing for test"");"
114590,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java,760,,"    long preGetCounter = metricsHelper.checkCounterExists(""getRow_num_ops"", metrics.getSource()) ?"
114591,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,725,,"      TPut put = new TPut(wrap(Bytes.toBytes(""testScan"" + i)), columnValues);"
114592,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,757,,"      fail(""Scanner id should be invalid"");"
114593,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,1160,,"          new TPut(wrap(Bytes.toBytes(""testGetScannerResults"" + pad(i, (byte) 2))), columnValues);"
114594,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,1272,,"    table.put(new Put(rowkey).addColumn(family, col, Bytes.toBytes(""val1"")));"
114595,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,1281,,"    long preGetCounter = metricsHelper.checkCounterExists(""get_num_ops"", metrics.getSource()) ?"
114596,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java,1381,,"    byte[] attributeKey = Bytes.toBytes(""attribute1"");"
114597,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandlerWithLabels.java,206,,"      TPut put = new TPut(wrap(Bytes.toBytes(""testScan"" + i)), columnValues);"
114598,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandlerWithLabels.java,274,,"          wrap(Bytes.toBytes(""testGetScannerResults"" + pad(i, (byte) 2))), columnValues);"
114599,./TargetProjects/hbase/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandlerWithReadOnly.java,211,,"      assertEquals(""Thrift Server is in Read-only mode."", e.getMessage());"
114600,./TargetProjects/hbase/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKNodeTracker.java,135,,"        LOG.warn(""Unexpected exception handling blockUntilAvailable"", e);"
114601,./TargetProjects/hbase/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java,249,,"      if (""true"".equalsIgnoreCase(jaasEnvVar)) {"
114602,./TargetProjects/hbase/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java,447,,"      LOG.debug(zkw.prefix(""Unable to list children of znode "" + znode + "" "" +"
114603,./TargetProjects/hbase/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java,614,,"      LOG.debug(zkw.prefix(""Unable to get data of znode "" + znode + "" "" +"
114604,./TargetProjects/hbase/hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java,1848,,"        sb.append(""\n "").append(MasterAddressTracker.getMasterAddress(zkw));"
114605,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKMainServer.java,107,,"    c.set(""hbase.zookeeper.quorum"", ""example.com"");"
114606,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKMainServer.java,125,,"                                    ""[2001:db8:1::242:ac11:3]:5678"");"
114607,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKUtil.java,105,,"      ZKUtil.deleteNode(ZKW, ""/l1/l2"");"
114608,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKUtil.java,129,,"    ZKUtil.createWithParents(ZKW, ""/s1/s2/s3"");"
114609,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKUtilNoServer.java,52,,"    conf.set(Superusers.SUPERUSER_CONF_KEY, ""user1"");"
114610,./TargetProjects/hbase/hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKUtilNoServer.java,68,,"    assertTrue(aclList.contains(new ACL(Perms.ALL, new Id(""sasl"", ""user1""))));"
114611,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/HBCK2.java,451,,"    writer.println(""   Options:"");"
114612,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/hbck1/HBaseFsck.java,1230,,"          + path + "" to "" + dst);"
114613,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/hbck1/HBaseFsck.java,3578,,"              + "".  Just continuing... "", e);"
114614,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/hbck1/HFileCorruptionChecker.java,170,,"          "" does not exist.  Likely due to concurrent split/compaction. Skipping."");"
114615,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/hbck1/HFileCorruptionChecker.java,199,,"          "" does not exist.  Likely the table is deleted. Skipping."");"
114616,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/main/java/org/apache/hbase/hbck1/HFileCorruptionChecker.java,530,,"    String initialState = (corrupted.isEmpty()) ? ""OK"" : ""CORRUPTED"";"
114617,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestFsRegionsMetaRecoverer.java,80,,"    when(mockedAdmin.tableExists(TableName.valueOf(""test-tbl""))).thenReturn(true);"
114618,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,101,,"    TEST_UTIL.createMultiRegionTable(TABLE_NAME, Bytes.toBytes(""family1""), 5);"
114619,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,239,,"      TABLE_NAME.getNameWithNamespaceInclAsString(), ""hbase:namespace"");"
114620,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,256,,"    expectedResult = ""\thbase:namespace -> No mismatching regions. This table is good!\n\t"";"
114621,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,273,,"    expectedResult = ""\t"" + tableName.getNameAsString() + ""->\n\t\t"""
114622,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,277,,"    expectedResult = ""\n\thbase:namespace -> No mismatching regions. This table is good!\n\t"";"
114623,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCK2.java,457,,"    String expectedResult = ""Regions in Meta but having no equivalent dir, for each table:\n"";"
114624,./TargetProjects/hbase-operator-tools/hbase-hbck2/src/test/java/org/apache/hbase/TestHBCKFsTableDescriptors.java,67,,"    Path p = new Path(""/tmp"", HBCKFsTableDescriptors.TABLEINFO_FILE_PREFIX);"
114625,./TargetProjects/hbase-operator-tools/hbase-tools/src/test/java/org/apache/hbase/TestRegionsMerger.java,86,,"    assertEquals(""Row count before and after merge should be equal"","
114626,./TargetProjects/hcatalog/core/src/main/java/org/apache/hcatalog/cli/HCatCli.java,307,,"            ss.err.println(""Invalid permission specification: "" + perms);"
114627,./TargetProjects/hcatalog/core/src/main/java/org/apache/hcatalog/data/JsonSerDe.java,366,,"                sb.append(""null"");"
114628,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/cli/DummyStorageHandler.java,221,,"            throw new IOException(""This operation is not supported."");"
114629,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/cli/TestSemanticAnalysis.java,87,,"        driver.run(""drop table junit_sem_analysis"");"
114630,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/cli/TestSemanticAnalysis.java,132,,"            assertEquals(0, hcatDriver.run(""drop database "" + testDb1).getResponseCode());"
114631,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/cli/TestSemanticAnalysis.java,181,,"        hcatDriver.run(""create table junit_sem_analysis (a int) partitioned by (b string) stored as RCFILE"");"
114632,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/data/TestDefaultHCatRecord.java,160,,"        rec_1.add(new Byte(""123""));"
114633,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/data/TestDefaultHCatRecord.java,161,,"        rec_1.add(new Short(""456""));"
114634,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/data/TestDefaultHCatRecord.java,167,,"        rec_1.add(new String(""hcat and hadoop""));"
114635,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/data/schema/TestHCatSchema.java,31,,"        fieldSchemaList.add(new HCatFieldSchema(""age"", HCatFieldSchema.Type.INT, ""So very old""));"
114636,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatHiveCompatibility.java,60,,"        Table table = client.getTable(""default"", ""junit_unparted_noisd"");"
114637,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatMultiOutputFormat.java,78,,"    private static final String DATABASE = ""default"";"
114638,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatMultiOutputFormat.java,313,,"            tableNames[0] + "" is not correct"", outputs.get(0), ""a,a,1,ag"");"
114639,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatOutputFormat.java,100,,"        fields.add(new FieldSchema(""colname"", serdeConstants.STRING_TYPE_NAME, """"));"
114640,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatPartitioned.java,73,,"        fields.add(new FieldSchema(""part0"", serdeConstants.STRING_TYPE_NAME, """"));"
114641,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestHCatPartitioned.java,90,,"        partitionMap.put(""part1"", ""p1value1"");"
114642,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestInputJobInfo.java,33,,"        InputJobInfo jobInfo = InputJobInfo.create(""Db"", ""Table"", ""Filter"", p);"
114643,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestInputJobInfo.java,33,,"        InputJobInfo jobInfo = InputJobInfo.create(""Db"", ""Table"", ""Filter"", p);"
114644,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestMultiOutputFormat.java,118,,"        configurer.addOutputFormat(""out1"", TextOutputFormat.class, IntWritable.class, Text.class);"
114645,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/mapreduce/TestMultiOutputFormat.java,119,,"        configurer.addOutputFormat(""out2"", SequenceFileOutputFormat.class, Text.class,"
114646,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/rcfile/TestRCFileMapReduceInputFormat.java,91,,"            bytesArray = new byte[][]{""123"".getBytes(""UTF-8""),"
114647,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/rcfile/TestRCFileMapReduceInputFormat.java,95,,"                ""NULL"".getBytes(""UTF-8"")};"
114648,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,158,,"        exec(""CREATE DATABASE doo"");"
114649,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,167,,"        exec(""SHOW TABLES"");"
114650,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,168,,"        exec(""SHOW TABLE EXTENDED LIKE foo1"");"
114651,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,173,,"        exec(""USE doo"");"
114652,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,179,,"        Path dbPath = new Path(whPath, new Random().nextInt() + ""/mydb"");"
114653,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,181,,"        exec(""CREATE DATABASE doo2 LOCATION '%s'"", dbPath.toUri());"
114654,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,216,,"        whFs.setPermission(getDbPath(""doo""), perm500); //revoke write"
114655,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,262,,"        exec(""CREATE TABLE foo1 (foo INT) STORED AS RCFILE"");"
114656,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,267,,"        Path tablePath = new Path(whPath, new Random().nextInt() + ""/mytable"");"
114657,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,269,,"        exec(""CREATE EXTERNAL TABLE foo2 (foo INT) STORED AS RCFILE LOCATION '%s'"", tablePath);"
114658,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,362,,"        whFs.mkdirs(getTablePath(""default"", ""foo1""), perm500); //revoke w"
114659,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,362,,"        whFs.mkdirs(getTablePath(""default"", ""foo1""), perm500); //revoke w"
114660,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,410,,"        exec(""CREATE EXTERNAL TABLE foo3 (foo INT) STORED AS RCFILE LOCATION '%s'"", tablePath);"
114661,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,432,,"        tablePath = new Path(whPath, new Random().nextInt() + ""/mytable2"");"
114662,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,465,,"        exec(""CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS TEXTFILE"");"
114663,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,476,,"        String relPath = new Random().nextInt() + ""/mypart"";"
114664,./TargetProjects/hcatalog/core/src/test/java/org/apache/hcatalog/security/TestHdfsAuthorizationProvider.java,545,,"        exec(""CREATE TABLE foo1 (foo INT) PARTITIONED BY (b STRING) STORED AS RCFILE"");"
114665,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatLoader.java,197,,"        server.registerQuery(""X = load '"" + BASIC_TABLE + ""' using org.apache.hcatalog.pig.HCatLoader();"");"
114666,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatLoaderStorer.java,61,,"            String.format(""%d\t%d"", Short.MIN_VALUE, Byte.MIN_VALUE),"
114667,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,48,,"        driver.run(""drop table junit_unparted"");"
114668,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,52,,"            throw new IOException(""Failed to create table."");"
114669,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,61,,"        server.registerQuery(""A = load '"" + INPUT_FILE_NAME + ""' as (a:int, b:chararray);"");"
114670,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,61,,"        server.registerQuery(""A = load '"" + INPUT_FILE_NAME + ""' as (a:int, b:chararray);"");"
114671,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,62,,"        server.registerQuery(""store A into 'default.junit_unparted' using "" + HCatStorer.class.getName() + ""('b=1');"");"
114672,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,63,,"        server.registerQuery(""B = load 'default.junit_unparted' using "" + HCatLoader.class.getName() + ""();"");"
114673,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,83,,"        driver.run(""drop table employee"");"
114674,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,84,,"        String createTable = ""CREATE TABLE employee (emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING ) "" +"
114675,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,85,,"            "" PARTITIONED BY (emp_country STRING , emp_state STRING ) STORED AS RCFILE"";"
114676,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,100,,"        pig.registerQuery(""A = LOAD '"" + INPUT_FILE_NAME + ""' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"" +"
114677,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,100,,"        pig.registerQuery(""A = LOAD '"" + INPUT_FILE_NAME + ""' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"" +"
114678,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,101,,"            ""emp_gender:chararray,emp_country:chararray,emp_state:chararray);"");"
114679,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,111,,"        driver.run(""select * from employee"");"
114680,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,204,,"        String createTable = ""create table junit_unparted(a int, b string) stored as RCFILE"";"
114681,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorer.java,235,,"        driver.run(""select * from junit_unparted"");"
114682,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorerMulti.java,97,,"        createTable(BASIC_TABLE, ""a int, b string"");"
114683,./TargetProjects/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hcatalog/pig/TestHCatStorerMulti.java,108,,"        driver.run(""select * from "" + BASIC_TABLE);"
114684,./TargetProjects/hcatalog/server-extensions/src/test/java/org/apache/hcatalog/listener/TestNotificationListener.java,120,,"        kvs.put(""b"", ""2011"");"
114685,./TargetProjects/hcatalog/server-extensions/src/test/java/org/apache/hcatalog/listener/TestNotificationListener.java,121,,"        client.markPartitionForEvent(""mydb"", ""mytbl"", kvs,"
114686,./TargetProjects/hcatalog/server-extensions/src/test/java/org/apache/hcatalog/listener/TestNotificationListener.java,121,,"        client.markPartitionForEvent(""mydb"", ""mytbl"", kvs,"
114687,./TargetProjects/hcatalog/server-extensions/src/test/java/org/apache/hcatalog/listener/TestNotificationListener.java,146,,"                Assert.assertTrue(""Unexpected message-type."", message2 instanceof CreateDatabaseMessage);"
114688,./TargetProjects/hcatalog/src/test/e2e/hcatalog/tools/generate/java/org/apache/hadoop/hive/tools/generate/RCFileGenerator.java,102,,"        return buf.toString().getBytes(""UTF-8"");"
114689,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/HBaseHCatStorageHandler.java,131,,"            jobProperties.put(""tmpjars"", jobConf.get(""tmpjars""));"
114690,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/snapshot/IDGenerator.java,70,,"            LOG.warn(""Exception while obtaining lock for ID."", e);"
114691,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/snapshot/IDGenerator.java,94,,"            LOG.warn(""Exception while reading current revision id."", e);"
114692,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/snapshot/ZKBasedRevisionManager.java,160,,"            throw new IOException(""Exception while obtaining lock."", e);"
114693,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/snapshot/ZKUtil.java,136,,"            LOG.warn(""Caught: "", e);"
114694,./TargetProjects/hcatalog/storage-handlers/hbase/src/java/org/apache/hcatalog/hbase/snapshot/ZKUtil.java,383,,"                ""Exception while updating trasactional data. "", e);"
114695,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseBulkOutputFormat.java,130,,"                put.add(Bytes.toBytes(""my_family""),"
114696,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseBulkOutputFormat.java,196,,"        Path inputPath = new Path(methodTestDir, ""mr_input"");"
114697,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseBulkOutputFormat.java,204,,"        job.setWorkingDirectory(new Path(methodTestDir, ""mr_work""));"
114698,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseDirectOutputFormat.java,111,,"        String familyName = ""my_family"";"
114699,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,82,,"        hcatDriver.run(""drop table test_table"");"
114700,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,85,,"                		     ""'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"""
114701,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,91,,"        boolean doesTableExist = hAdmin.tableExists(""test_table"");"
114702,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,98,,"        rm.getAbortedWriteTransactions(""test_table"", ""cf1"");"
114703,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,163,,"        boolean doesTableExist = hAdmin.tableExists(""CaseSensitiveTable"");"
114704,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseHCatStorageHandler.java,198,,"        boolean doesTableExist = hAdmin.tableExists(""mytable"");"
114705,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,82,,"    private final byte[] FAMILY = Bytes.toBytes(""testFamily"");"
114706,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,122,,"                Put put = new Put(Bytes.toBytes(""testRow""));"
114707,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,188,,"        String tableQuery = ""CREATE TABLE "" + databaseName + ""."" + tableName"
114708,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,189,,"            + ""(key string, testqualifier1 string, testqualifier2 string) STORED BY "" +"
114709,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,190,,"            ""'org.apache.hcatalog.hbase.HBaseHCatStorageHandler'"""
114710,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,234,,"        String dropTableQuery = ""DROP TABLE "" + hbaseTableName;"
114711,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/TestHBaseInputFormat.java,505,,"                && (value.get(1).toString()).equalsIgnoreCase(""textValue-5"")"
114712,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,42,,"        int port = getHbaseConf().getInt(""hbase.zookeeper.property.clientPort"", 2181);"
114713,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,43,,"        String servers = getHbaseConf().get(""hbase.zookeeper.quorum"");"
114714,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,52,,"        ZKUtil zkutil = new ZKUtil(sb.toString(), ""/rm_base"");"
114715,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,53,,"        String tableName = newTableName(""testTable"");"
114716,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,97,,"        List<String> columnFamilies = Arrays.asList(""cf1"", ""cf2"", ""cf3"");"
114717,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,97,,"        List<String> columnFamilies = Arrays.asList(""cf1"", ""cf2"", ""cf3"");"
114718,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestRevisionManager.java,97,,"        List<String> columnFamilies = Arrays.asList(""cf1"", ""cf2"", ""cf3"");"
114719,./TargetProjects/hcatalog/storage-handlers/hbase/src/test/org/apache/hcatalog/hbase/snapshot/TestZNodeSetUp.java,69,,"        hcatConf.set(RMConstants.ZOOKEEPER_DATADIR, ""/rm_base"");"
114720,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,128,,"        cols.add(new HCatFieldSchema(""value"", Type.STRING, ""value comment""));"
114721,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,130,,"            .create(db, tableOne, cols).fileFormat(""rcfile"").build();"
114722,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,175,,"        cols.add(new HCatFieldSchema(""userid"", Type.INT, ""id columns""));"
114723,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,184,,"        ptnCols.add(new HCatFieldSchema(""country"", Type.STRING,"
114724,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,345,,"            client.getTable(""foo"", tableName);"
114725,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,392,,"                    new HCatFieldSchema(""bar"", Type.STRING, """"));"
114726,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,424,,"                LOG.info(""Got exception: "", exception);"
114727,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,479,,"            LOG.error(""Unexpected exception!"", t);"
114728,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,480,,"            assertTrue(""Unexpected exception! "" + t.getMessage(), false);"
114729,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,521,,"                    new HCatFieldSchema(""grid"", Type.STRING, """"));"
114730,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,561,,"            partitionSpec.put(""dt"", ""2012_01_01"");"
114731,./TargetProjects/hcatalog/webhcat/java-client/src/test/java/org/apache/hcatalog/api/TestHCatClient.java,575,,"            assertArrayEquals(""Mismatched partition."", new String[]{""2012_01_01"", ""AB""}, partitions.get(0).getValues().toArray());"
114732,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,118,,"                    put(""error"", ""Database "" + db + "" does not exist"")"
114733,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,118,,"                    put(""error"", ""Database "" + db + "" does not exist"")"
114734,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,119,,"                    .put(""errorCode"", ""404"")"
114735,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,120,,"                    .put(""database"", db).build();"
114736,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,156,,"            exec += String.format("" comment '%s'"", desc.comment);"
114737,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,158,,"            exec += String.format("" location '%s'"", desc.location);"
114738,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,205,,"                .put(""table"", desc.table)"
114739,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/HcatDelegator.java,639,,"                .put(""partition"", partition)"
114740,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,156,,"                        @FormParam(""group"") String group,"
114741,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,157,,"                        @FormParam(""permissions"") String permissions)"
114742,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,178,,"        verifyDdlParam(db, "":db"");"
114743,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,190,,"    @Path(""ddl/database/{db}/table/{table}"")"
114744,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,193,,"                                @PathParam(""table"") String table,"
114745,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,199,,"        verifyDdlParam(table, "":table"");"
114746,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,586,,"                                          @FormParam(""statusdir"") String statusdir,"
114747,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/Server.java,587,,"                                          @FormParam(""callback"") String callback)"
114748,./TargetProjects/hcatalog/webhcat/svr/src/main/java/org/apache/hcatalog/templeton/tool/JobState.java,148,,"            jobids = getField(""children"");"
114749,./TargetProjects/hcatalog/webhcat/svr/src/test/java/org/apache/hcatalog/templeton/tool/TestTempletonUtils.java,103,,"            TempletonUtils.hadoopFsPath(""/tmp"", null, null);"
114750,./TargetProjects/hcatalog/webhcat/svr/src/test/java/org/apache/hcatalog/templeton/tool/TestTempletonUtils.java,114,,"            Assert.fail(""Should not have found /scoobydoo/teddybear"");"
114751,./TargetProjects/helix/helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java,153,,"        String scopeKey1 = getValue(""scopeKey1"");"
114752,./TargetProjects/helix/helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JsonParameters.java,169,,"        throw new HelixException(""Missing Json parameters: '"" + ENABLED + ""'"");"
114753,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java,81,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName"
114754,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java,81,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName"
114755,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,167,,"    return ""http://localhost:"" + ADMIN_PORT + ""/clusters"" + ""/"" + cluster;"
114756,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,167,,"    return ""http://localhost:"" + ADMIN_PORT + ""/clusters"" + ""/"" + cluster;"
114757,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,171,,"    return ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + cluster + ""/instances/"" + instance;"
114758,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,208,,"    String response = assertSuccessPostOperation(url, addClusterCmd(""clusterTest""), false);"
114759,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,218,,"    response = assertSuccessPostOperation(url, addClusterCmd(""\\ClusterTest""), false);"
114760,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,235,,"    clusterUrl = getClusterUrl(""clusterTest1"");"
114761,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,272,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName + ""/resourceGroups"";"
114762,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,275,,"            addResourceCmd(resourceName, ""MasterSlave"", partitions), false);"
114763,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,287,,"        assertSuccessPostOperation(reourcesUrl, addResourceCmd(""db_22"", ""MasterSlave"", 144), false);"
114764,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,291,,"        assertSuccessPostOperation(reourcesUrl, addResourceCmd(""db_11"", ""MasterSlave"", 44), false);"
114765,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,310,,"        assertSuccessPostOperation(reourcesUrl, addResourceCmd(""db_33"", ""MasterSlave"", 44), false);"
114766,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,314,,"        assertSuccessPostOperation(reourcesUrl, addResourceCmd(""db_44"", ""MasterSlave"", 44), false);"
114767,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,339,,"    addInstancesToCluster(clusterName, ""localhost:123"", 6, null);"
114768,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,344,,"    addInstancesToCluster(controllerClusterName, ""controller_900"", 2, null);"
114769,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,348,,"      String instanceName = ""localhost_123"" + i;"
114770,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,384,,"    HelixDataAccessor accessor = participants.get(""localhost_1231"").getHelixDataAccessor();"
114771,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,436,,"        new ClusterControllerManager(ZK_ADDR, clusterName, ""controller_9900"");"
114772,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,463,,"    String idealStateUrl = getResourceUrl(clusterName, ""db_11"") + ""/idealState"";"
114773,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,532,,"    String instancesUrl = clusterUrl + ""/instances"";"
114774,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,614,,"    Assert.assertTrue(response.contains(""db_11_0""));"
114775,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,615,,"    Assert.assertTrue(response.contains(""db_11_11""));"
114776,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,692,,"    String instanceUrl = getInstanceUrl(clusterName, ""localhost_1232"");"
114777,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestHelixAdminScenariosRest.java,705,,"            swapInstanceCmd(""localhost_1232"", ""localhost_12320""), true);"
114778,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetPartitionState.java,125,,"    errStateMap.put(""TestDB0"", new HashMap<String, String>());"
114779,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetPartitionState.java,126,,"    errStateMap.get(""TestDB0"").put(""TestDB0_4"", ""localhost_12918"");"
114780,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetResource.java,84,,"    errStateMap.put(""TestDB0"", new HashMap<String, String>());"
114781,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/resources/TestJobQueuesResource.java,115,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName + ""/jobQueues"";"
114782,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/resources/TestJobQueuesResource.java,115,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName + ""/jobQueues"";"
114783,./TargetProjects/helix/helix-admin-webapp/src/test/java/org/apache/helix/webapp/resources/TestJobQueuesResource.java,125,,"        ""http://localhost:"" + ADMIN_PORT + ""/clusters/"" + clusterName + ""/jobQueues/"" + queueName;"
114784,./TargetProjects/helix/helix-agent/src/test/java/org/apache/helix/agent/TestHelixAgent.java,120,,"        builder.setTransition(""SLAVE"", ""MASTER"").setCommand(""simpleHttpClient.py SLAVE-MASTER"")"
114785,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java,163,,"      throw new HelixException(""cluster "" + clusterName + "" is not setup yet"");"
114786,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java,167,,"    String[] splits = scopeStr.split(""\\|"");"
114787,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java,221,,"      LOG.warn(""No config found at {}."", scope.getZkPath());"
114788,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java,288,,"      throw new HelixException(""cluster: "" + clusterName + "" is NOT setup."");"
114789,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/ExternalCommand.java,227,,"      throw new IllegalStateException(""you must call start first"");"
114790,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java,104,,"    addEntry(PropertyType.PROPERTYSTORE, 1, ""/{clusterName}/PROPERTYSTORE"");"
114791,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java,1070,,"                    + "", listener: "" + this);"
114792,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/controller/LogUtil.java,26,,"    logger.info(String.format(""Event %s : %s"", eventInfo, message));"
114793,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/BootstrapHandler.java,54,,"    @Transition(from = ""MASTER"", to = ""SLAVE"")"
114794,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/BrokerResourceOnlineOfflineStateModelFactory.java,48,,"      initialState = ""OFFLINE"""
114795,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/DummyParticipant.java,35,,"  @StateModelInfo(initialState = ""OFFLINE"", states = {"
114796,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/DummyParticipant.java,36,,"      ""MASTER"", ""SLAVE"", ""ERROR"""
114797,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/IdealStateBuilderExample.java,66,,"    admin.addStateModelDef(clusterName, ""MasterSlave"", new StateModelDefinition("
114798,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/IdealStateBuilderExample.java,87,,"      builder.assignPreferenceList(buildPartitionName(resourceName, 0), ""localhost_12918"","
114799,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/IdealStateBuilderExample.java,88,,"          ""localhost_12919"").assignPreferenceList(buildPartitionName(resourceName, 1),"
114800,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/LeaderStandbyStateModelFactory.java,85,,"          + "" transitioning from "" + message.getFromState() + "" to "" + message.getToState()"
114801,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/LeaderStandbyStateModelFactory.java,85,,"          + "" transitioning from "" + message.getFromState() + "" to "" + message.getToState()"
114802,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/LeaderStandbyStateModelFactory.java,86,,"          + "" for "" + message.getResourceName() + "" "" + message.getPartitionName());"
114803,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/MasterSlaveStateModelFactory.java,81,,"      System.out.println(_instanceName + "" transitioning from "" + message.getFromState() + "" to """
114804,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/MasterSlaveStateModelFactory.java,81,,"      System.out.println(_instanceName + "" transitioning from "" + message.getFromState() + "" to """
114805,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/MasterSlaveStateModelFactory.java,82,,"          + message.getToState() + "" for "" + partitionName);"
114806,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/SegmentOnlineOfflineStateModelFactory.java,41,,"  @StateModelInfo(states = ""{'OFFLINE','ONLINE', 'DROPPED'}"", initialState = ""OFFLINE"")"
114807,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/WeightAwareRebalanceUtilExample.java,166,,"        new ZkBasedPartitionWeightProvider(ZK_ADDRESS, CLUSTER_NAME, ""QPS"");"
114808,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/examples/WeightAwareRebalanceUtilExample.java,174,,"        new ZkBasedPartitionWeightProvider(ZK_ADDRESS, CLUSTER_NAME, ""MEM"");"
114809,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,186,,"      throw new HelixException(""cluster "" + clusterName + "" is not setup yet"");"
114810,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,186,,"      throw new HelixException(""cluster "" + clusterName + "" is not setup yet"");"
114811,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,193,,"      throw new HelixException(""Node "" + nodeId + "" already exists in cluster "" + clusterName);"
114812,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,308,,"        newInstanceConfig == null ? ""NULL"" : newInstanceConfig.toString());"
114813,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,334,,"    logger.info(""{} instance {} in cluster {}."", enabled ? ""Enable"" : ""Disable"", instanceName,"
114814,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,334,,"    logger.info(""{} instance {} in cluster {}."", enabled ? ""Enable"" : ""Disable"", instanceName,"
114815,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,368,,"      throw new HelixException(""Cluster "" + clusterName + "", resource: "" + resourceName"
114816,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,368,,"      throw new HelixException(""Cluster "" + clusterName + "", resource: "" + resourceName"
114817,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,376,,"              ""Cluster: "" + clusterName + "", resource: "" + resourceName + "", ideal-state is null"");"
114818,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,397,,"      throw new HelixException(""Cluster: "" + clusterName + "", instance: "" + instanceName"
114819,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java,1542,,"          throw new HelixException(""Invalid or unsupported state model definition"");"
114820,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java,235,,"        + "", clusterName: "" + clusterName + "", instanceName: "" + instanceName + "", type: """
114821,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java,1135,,"    LOG.info(""Handling new session, session id: "" + _sessionId + "", instance: "" + _instanceName"
114822,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java,404,,"            + "". Will retry."");"
114823,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java,578,,"            ""getData_async, size: "" + paths.size() + "", paths: "" + paths.get(0) + "",... time: "" + ("
114824,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java,578,,"            ""getData_async, size: "" + paths.size() + "", paths: "" + paths.get(0) + "",... time: "" + ("
114825,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/manager/zk/ZkBaseDataAccessor.java,579,,"                endT - startT) + "" ns"");"
114826,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java,205,,"        throw new HelixException(""Message factory type mismatch. Type: "" + type + "", factory: """
114827,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java,230,,"              + "", factory: "" + factory + "", pool: "" + _executorMap.get(type));"
114828,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/LeaderStandbySMD.java,84,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""OFFLINE"");"
114829,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/LeaderStandbySMD.java,86,,"    statePriorityList.add(""LEADER"");"
114830,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/LeaderStandbySMD.java,87,,"    statePriorityList.add(""STANDBY"");"
114831,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/LeaderStandbySMD.java,89,,"    statePriorityList.add(""DROPPED"");"
114832,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/LeaderStandbySMD.java,96,,"        metadata.put(""count"", ""1"");"
114833,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/MasterSlaveSMD.java,85,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""OFFLINE"");"
114834,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/MasterSlaveSMD.java,87,,"    statePriorityList.add(""MASTER"");"
114835,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/MasterSlaveSMD.java,88,,"    statePriorityList.add(""SLAVE"");"
114836,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/MasterSlaveSMD.java,90,,"    statePriorityList.add(""DROPPED"");"
114837,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/MasterSlaveSMD.java,98,,"        metadata.put(""count"", ""1"");"
114838,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/OnlineOfflineSMD.java,79,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""OFFLINE"");"
114839,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/OnlineOfflineSMD.java,81,,"    statePriorityList.add(""ONLINE"");"
114840,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/OnlineOfflineSMD.java,83,,"    statePriorityList.add(""DROPPED"");"
114841,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/ScheduledTaskSMD.java,82,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""OFFLINE"");"
114842,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/ScheduledTaskSMD.java,84,,"    statePriorityList.add(""COMPLETED"");"
114843,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/ScheduledTaskSMD.java,86,,"    statePriorityList.add(""DROPPED"");"
114844,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java,108,,"          if (metaData.get(""count"") != null) {"
114845,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/StorageSchemataSMD.java,79,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""OFFLINE"");"
114846,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/StorageSchemataSMD.java,81,,"    statePriorityList.add(""MASTER"");"
114847,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/StorageSchemataSMD.java,83,,"    statePriorityList.add(""DROPPED"");"
114848,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/StorageSchemataSMD.java,91,,"        metadata.put(""count"", ""N"");"
114849,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/TaskSMD.java,162,,"    stateTransitionPriorityList.add(String.format(""%s-%s"", TaskPartitionState.INIT.name(), TaskPartitionState.RUNNING.name()));"
114850,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/builder/StateTransitionTableBuilder.java,160,,"    states.add(""SLAVE"");"
114851,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/builder/StateTransitionTableBuilder.java,162,,"    states.add(""OFFLINE"");"
114852,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/model/util/StateModelDefinitionValidator.java,116,,"        _logger.error(""State "" + state + "" needs an upper bound constraint, state model: """
114853,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/AbstractHelixLeaderStandbyStateModel.java,38,,"@StateModelInfo(initialState = ""OFFLINE"", states = {"
114854,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/AbstractHelixLeaderStandbyStateModel.java,39,,"    ""LEADER"", ""STANDBY"""
114855,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/DistClusterControllerStateModel.java,37,,"@StateModelInfo(initialState = ""OFFLINE"", states = {""LEADER"", ""STANDBY""})"
114856,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/DistClusterControllerStateModel.java,37,,"@StateModelInfo(initialState = ""OFFLINE"", states = {""LEADER"", ""STANDBY""})"
114857,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/GenericLeaderStandbyModel.java,36,,"    ""LEADER"", ""STANDBY"""
114858,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/participant/statemachine/ScheduledTaskStateModel.java,34,,"  static final String DEFAULT_INITIAL_STATE = ""OFFLINE"";"
114859,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/spectator/RoutingDataCache.java,100,,"              + "" TargetExternalViews. Takes "" + (System.currentTimeMillis() - start) + "" ms"");"
114860,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/JobConfig.java,763,,"            .format(""Job %s, %s has invalid value %s"", _jobId, JobConfigProperty.Timeout,"
114861,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskDriver.java,348,,"      throw new IllegalStateException(""Queue "" + queue + "" is still running!"");"
114862,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,37,,"@StateModelInfo(states = ""{'NOT USED BY HELIX'}"", initialState = ""INIT"")"
114863,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,77,,"  @Transition(to = ""RUNNING"", from = ""INIT"")"
114864,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,82,,"  @Transition(to = ""STOPPED"", from = ""RUNNING"")"
114865,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,87,,"          ""Invalid state transition. There is no running task for partition %s."", taskPartition));"
114866,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,110,,"          ""Partition %s received a state transition to %s but the result status code is %s."","
114867,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/task/TaskStateModel.java,185,,"  @Transition(to = ""DROPPED"", from = ""INIT"")"
114868,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java,610,,"    String[] scopeArgs = scopeArgsCsv.split(""[\\s,]"");"
114869,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java,805,,"    addClusterOption.setArgName(""clusterName"");"
114870,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java,840,,"    expandResourceOption.setArgName(""clusterName resourceName"");"
114871,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/DefaultIdealStateCalculator.java,45,,"  static final String _partitions = ""partitions"";"
114872,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/DefaultIdealStateCalculator.java,46,,"  static final String _replicas = ""replicas"";"
114873,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/RUSHrHash.java,137,,"      clusterData.put(""count"", nodeCt);"
114874,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/TestExecutor.java,109,,"          logger.warn(""invalid key for list field: "" + key"
114875,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/TestExecutor.java,133,,"          logger.warn(""invalid key for map field: "" + key"
114876,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/TestExecutor.java,203,,"      diff.setSimpleField(key + ""/expect"", expect);"
114877,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/TestExecutor.java,204,,"      diff.setSimpleField(key + ""/actual"", actual);"
114878,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/TestExecutor.java,453,,"        logger.warn(""invalid key for list field: "" + key + "", value for key part-1 doesn't exist"");"
114879,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/TaskAdmin.java,148,,"    LOG.info(""-------"");"
114880,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZKLogFormatter.java,226,,"          bw.write(""EOF reached after "" + count + "" txns."");"
114881,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZKLogFormatter.java,226,,"          bw.write(""EOF reached after "" + count + "" txns."");"
114882,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,132,,"      formatter(cfgBw, ""timestamp"", ""instanceName"", ""host"", ""port"", ""enabled"");"
114883,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,132,,"      formatter(cfgBw, ""timestamp"", ""instanceName"", ""host"", ""port"", ""enabled"");"
114884,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,133,,"      formatter(isBw, ""timestamp"", ""resourceName"", ""partitionNumber"", ""mode"", ""partition"","
114885,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,133,,"      formatter(isBw, ""timestamp"", ""resourceName"", ""partitionNumber"", ""mode"", ""partition"","
114886,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,153,,"          pos = inputLine.indexOf(""data:{"", pos);"
114887,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/tools/commandtools/ZkLogCSVFormatter.java,155,,"            String timestamp = getAttributeValue(inputLine, ""time:"");"
114888,./TargetProjects/helix/helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java,125,,"          throw new HelixException(""Invalid or unsupported state model definition"");"
114889,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,48,,"    System.out.println(""START "" + clusterName + "" at "" + new Date(System.currentTimeMillis()));"
114890,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,58,,"    String clusterConfigValue = configAccessor.get(clusterScope, ""clusterConfigKey"");"
114891,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,64,,"    configAccessor.set(clusterScope, ""clusterConfigKey"", ""clusterConfigValue"");"
114892,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,73,,"        new ConfigScopeBuilder().forCluster(clusterName).forResource(""testResource"").build();"
114893,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,74,,"    configAccessor.set(resourceScope, ""resourceConfigKey"", ""resourceConfigValue"");"
114894,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,80,,"        .forResource(""testResource"").forPartition(""testPartition"").build();"
114895,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,81,,"    configAccessor.set(partitionScope, ""partitionConfigKey"", ""partitionConfigValue"");"
114896,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,87,,"        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(""localhost_12918"").build();"
114897,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,88,,"    configAccessor.set(participantScope, ""participantConfigKey"", ""participantConfigValue"");"
114898,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,88,,"    configAccessor.set(participantScope, ""participantConfigKey"", ""participantConfigValue"");"
114899,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,131,,"    Assert.assertNull(clusterConfigValue, ""Should be null since it's removed"");"
114900,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,292,,"    cloudConfigInitBuilder.setCloudID(""TestCloudID"");"
114901,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,294,,"    sourceList.add(""TestURL"");"
114902,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java,296,,"    cloudConfigInitBuilder.setCloudInfoProcessorName(""TestProcessor"");"
114903,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java,44,,"      instanceNames.add(""localhost:123"" + i);"
114904,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestGroupCommit.java,40,,"    System.out.println(accessor.get(""test"", null, 0));"
114905,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,41,,"    System.out.println(""START "" + clusterName + "" at "" + new Date(System.currentTimeMillis()));"
114906,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,51,,"    String clusterConfigValue = configAccessor.get(clusterScope, ""clusterConfigKey"");"
114907,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,61,,"            .forResource(""testResource"").build();"
114908,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,62,,"    configAccessor.set(resourceScope, ""resourceConfigKey"", ""resourceConfigValue"");"
114909,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,69,,"            .forResource(""testResource"").forPartition(""testPartition"").build();"
114910,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,70,,"    configAccessor.set(partitionScope, ""partitionConfigKey"", ""partitionConfigValue"");"
114911,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,77,,"            .forParticipant(""localhost_12918"").build();"
114912,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,78,,"    configAccessor.set(participantScope, ""participantConfigKey"", ""participantConfigValue"");"
114913,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,78,,"    configAccessor.set(participantScope, ""participantConfigKey"", ""participantConfigValue"");"
114914,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java,137,,"    Assert.assertNull(clusterConfigValue, ""Should be null since it's removed"");"
114915,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java,51,,"    message.setPartitionName(""TestDB_0"");"
114916,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java,53,,"    message.setResourceName(""TestDB"");"
114917,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java,55,,"    message.setStateModelDef(""MasterSlave"");"
114918,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,682,,"    record.setSimpleField(StateModelDefinitionProperty.INITIAL_STATE.toString(), ""IDLE"");"
114919,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,684,,"    statePriorityList.add(""ONLINE"");"
114920,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,685,,"    statePriorityList.add(""BOOTSTRAP"");"
114921,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,686,,"    statePriorityList.add(""OFFLINE"");"
114922,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,688,,"    statePriorityList.add(""DROPPED"");"
114923,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHelper.java,696,,"        metadata.put(""count"", ""R"");"
114924,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestHierarchicalDataStore.java,55,,"    add(path + ""/child1"", ""child 1 data"");"
114925,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallback.java,139,,"        ""Instance Config size does not match"");"
114926,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallback.java,162,,"    value._record.setSimpleField("""" + System.currentTimeMillis(), ""newValue"");"
114927,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallback.java,190,,"    Assert.assertTrue(result, ""Should get resourceConfig callback invoked since we add resourceConfig"");"
114928,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallbackBatchMode.java,130,,"    System.out.println(""START "" + methodName + "" at "" + new Date(System.currentTimeMillis()));"
114929,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallbackBatchMode.java,130,,"    System.out.println(""START "" + methodName + "" at "" + new Date(System.currentTimeMillis()));"
114930,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallbackBatchMode.java,138,,"    System.out.println(""END "" + methodName + "" at "" + new Date(System.currentTimeMillis()));"
114931,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallbackBatchMode.java,146,,"    System.setProperty(""isAsyncBatchModeEnabled"", ""true"");"
114932,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestListenerCallbackPrefetch.java,114,,"    System.out.println(""START "" + methodName + "" at "" + new Date(System.currentTimeMillis()));"
114933,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java,30,,"    actual = PropertyPathBuilder.idealState(""test_cluster"");"
114934,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java,35,,"    actual = PropertyPathBuilder.instance(""test_cluster"", ""instanceName1"");"
114935,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,53,,"        ""localhost_8900"", ""localhost_8901"""
114936,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,53,,"        ""localhost_8900"", ""localhost_8901"""
114937,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,107,,"    ZNRecord record = new ZNRecord(""TESTDB"");"
114938,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,111,,"      add(record, ""TESTDB_0"", ""localhost_8900"", ""MASTER"");"
114939,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,111,,"      add(record, ""TESTDB_0"", ""localhost_8900"", ""MASTER"");"
114940,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,122,,"      add(record, ""TESTDB_1"", ""localhost_8900"", ""SLAVE"");"
114941,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestRoutingTable.java,122,,"      add(record, ""TESTDB_1"", ""localhost_8900"", ""SLAVE"");"
114942,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestShuffledIdealState.java,54,,"    IdealCalculatorByConsistentHashing.printIdealStateStats(result, ""MASTER"");"
114943,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestShuffledIdealState.java,55,,"    IdealCalculatorByConsistentHashing.printIdealStateStats(result, ""SLAVE"");"
114944,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestShuffledIdealState.java,126,,"      instanceNames.add(""localhost_"" + (1231 + i));"
114945,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZKCallback.java,149,,"        HelixManagerFactory.getZKHelixManager(clusterName, ""localhost_8900"","
114946,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZKCallback.java,178,,"      ExternalView extView = new ExternalView(""db-12345"");"
114947,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZKCallback.java,276,,"    ClusterSetup.processCommandLineArgs(createArgs(""-zkSvr "" + ZK_ADDR + "" -addCluster """
114948,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZKCallback.java,283,,"    ClusterSetup.processCommandLineArgs(createArgs(""-zkSvr "" + ZK_ADDR + "" -addNode "" + clusterName"
114949,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZNRecord.java,62,,"    list1.add(""list1Value1"");"
114950,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZNRecord.java,63,,"    list1.add(""list1Value2"");"
114951,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZkBasis.java,75,,"    System.out.println(""START "" + clusterName + "" at "" + new Date(System.currentTimeMillis()));"
114952,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZnodeModify.java,50,,"    logger.info(""RUN: "" + new Date(System.currentTimeMillis()));"
114953,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZnodeModify.java,59,,"    arg = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, ""+"", ""key1"", ""simpleValue1"");"
114954,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZnodeModify.java,59,,"    arg = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, ""+"", ""key1"", ""simpleValue1"");"
114955,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/TestZnodeModify.java,108,,"        new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, ""+"", ""key1"", ""simpleValue1-new"");"
114956,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java,703,,"      instances.add(""localhost_"" + i);"
114957,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/common/caches/TestPropertyCache.java,68,,"    @SuppressWarnings(""unchecked"")"
114958,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/common/caches/TestPropertyCache.java,70,,"        ""mock property cache"", mock(PropertyCache.PropertyCacheKeyFuncs.class), false);"
114959,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/changedetector/trimmer/TestHelixPropoertyTimmer.java,235,,"        .setListField(helixProperty.getId() + ""NewListField"", Collections.singletonList(""foobar""));"
114960,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java,76,,"        ""MASTER"", ""SLAVE"""
114961,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java,76,,"        ""MASTER"", ""SLAVE"""
114962,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java,152,,"    private static final String RESOURCE_NAME = ""resource"";"
114963,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java,632,,"      Assert.assertNotNull(preferenceList, ""invalid preference list for "" + partition);"
114964,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java,800,,"    states.put(""ONLINE"", nReplicas);"
114965,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/util/TestResourceUsageCalculator.java,66,,"        ""partition1"", ImmutableMap.of(""capacity1"", 20, ""capacity2"", 40),"
114966,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/util/TestResourceUsageCalculator.java,66,,"        ""partition1"", ImmutableMap.of(""capacity1"", 20, ""capacity2"", 40),"
114967,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/TestWagedRebalancer.java,163,,"  @Test(dependsOnMethods = ""testRebalance"")"
114968,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/constraints/TestPartitionMovementConstraint.java,71,,"        .thenReturn(ImmutableMap.of(INSTANCE, ""Master""));"
114969,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/constraints/TestPartitionMovementConstraint.java,82,,"    when(_testReplica.getReplicaState()).thenReturn(""Slave"");"
114970,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,60,,"    _resourceNames.add(""Resource1"");"
114971,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,61,,"    _resourceNames.add(""Resource2"");"
114972,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,68,,"    _capacityDataMap.put(""item1"", 20);"
114973,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,69,,"    _capacityDataMap.put(""item2"", 40);"
114974,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,133,,"    partitionStateMap1.put(_partitionNames.get(0), ""MASTER"");"
114975,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,134,,"    partitionStateMap1.put(_partitionNames.get(1), ""SLAVE"");"
114976,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/AbstractTestClusterModel.java,195,,"    _resourceNames.add(""Resource3"");"
114977,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestAssignableNode.java,206,,"    ClusterConfig testClusterConfig = new ClusterConfig(""testClusterConfigId"");"
114978,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestAssignableNode.java,212,,"    InstanceConfig testInstanceConfig = new InstanceConfig(""testInstanceConfigId"");"
114979,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestAssignableReplica.java,48,,"    capacityDataMapResource1.put(""item1"", 3);"
114980,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestAssignableReplica.java,49,,"    capacityDataMapResource1.put(""item2"", 6);"
114981,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/BaseStageTest.java,71,,"    System.out.println(""START "" + className.substring(className.lastIndexOf('.') + 1) + "" at """
114982,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java,49,,"      ""testResourceName"""
114983,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java,73,,"          .get(""localhost_"" + (p + 1) % 5));"
114984,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java,43,,"      ""testResourceName"""
114985,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java,68,,"    when(message.getFromState()).thenReturn(""OFFLINE"");"
114986,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java,123,,"    List<Message> messages = generateMessages(""ERROR"", ""ERROR"", ""OFFLINE"");"
114987,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java,133,,"    List<Message> messages = generateMessages(""ONLINE"", ""ONLINE"", ""OFFLINE"");"
114988,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,49,,"        output.getCurrentStateMap(""testResourceName"", new Partition(""testResourceName_0"")).size(),"
114989,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,74,,"    message.setFromState(""OFFLINE"");"
114990,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,77,,"    message.setPartitionName(""testResourceName_1"");"
114991,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,78,,"    message.setTgtName(""localhost_3"");"
114992,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,79,,"    message.setTgtSessionId(""session_3"");"
114993,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,100,,"    stateWithDeadSession.setSessionId(""session_dead"");"
114994,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,104,,"    ZNRecord record3 = new ZNRecord(""testTaskResourceName"");"
114995,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java,108,,"    taskStateWithLiveSession.setState(""testTaskResourceName_1"", ""INIT"");"
114996,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java,48,,"  private final String RESOURCE_NAME = ""TestDB"";"
114997,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java,54,,"    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(resources, nPartition, ""OnlineOffline""));"
114998,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java,79,,"            currentStateOutput.setCurrentState(resource, partition, instanceName, ""OFFLINE"");"
114999,./TargetProjects/helix/helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java,81,,"            Message pendingMessage = generateMessage(""OFFLINE"", ""ONLINE"", instanceName);"
