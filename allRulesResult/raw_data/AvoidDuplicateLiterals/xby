50000,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,130,,"        bean.set(""intArray"", intArray);"
50001,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,138,,"        bean.set(""stringArray"", stringArray);"
50002,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,326,,"            final Object value = bean.get(""mappedProperty"", ""unknown"");"
50003,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,341,,"        Object value = bean.get(""mappedProperty"", ""key1"");"
50004,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,367,,"        assertNotNull(""Got a value"", value);"
50005,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,368,,"        ObjectAssert.assertInstanceOf(""Got correct type"", Boolean.class, value);"
50006,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,369,,"        assertTrue(""Got correct value"", ((Boolean) value).booleanValue());"
50007,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java,565,,"        assertTrue(""Matched new value"", newValue == ((Boolean) bean.get(""booleanProperty"")).booleanValue());"
50008,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java,171,,"        args.add(ConstructorArg.forValue(""test""));"
50009,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java,116,,"        config.addProperty(KEY + ""[@config-class]"", getClass().getName());"
50010,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java,118,,"        assertEquals(""Wrong class name"", getClass().getName(), decl"
50011,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,96,,"        assertSame(""Wrong result"", params, params.setLogger(log));"
50012,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,110,,"                .get(""throwExceptionOnMissing""));"
50013,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,125,,"                .get(""listDelimiterHandler""));"
50014,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,149,,"        final Map<String, Lookup> lookups = Collections.singletonMap(""test"", look);"
50015,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,151,,"        final Map<?, ?> map = (Map<?, ?>) params.getParameters().get(""prefixLookups"");"
50016,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java,181,,"                (Collection<?>) params.getParameters().get(""defaultLookups"");"
50017,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java,110,,"        assertEquals(""Wrong parameters"", createTestParameters(), params2);"
50018,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java,123,,"        params.put(""anotherParameter"", ""value"");"
50019,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java,47,,"        assertEquals(""Wrong super type"", Event.ANY,"
50020,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java,54,,"        assertSame(""Wrong result"", params, params.setDataSource(src));"
50021,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java,79,,"        assertSame(""Wrong result"", params,"
50022,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java,109,,"                ConfigurationAssert.getTestFile(""test.properties"")"
50023,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java,224,,"                .getParameters().get(""throwExceptionOnMissing""));"
50024,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java,284,,"        BeanHelper.setProperty(params, ""fileName"", ""test.xml"");"
50025,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java,55,,"                .get(""expressionEngine""));"
50026,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java,55,,"        assertSame(""Wrong result"", params, params.setIncludesAllowed(true));"
50027,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java,98,,"                params.getParameters().get(""IOFactory""));"
50028,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java,54,,"        assertSame(""Wrong result"", params, params.setEntityResolver(resolver));"
50029,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java,57,,"                .getParameters().get(""entityResolver""));"
50030,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java,70,,"                .get(""documentBuilder""));"
50031,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java,83,,"        assertSame(""Wrong result"", params,"
50032,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java,352,,"                createDefinitionConfig(""xml"", attrs);"
50033,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java,1019,,"                ccparams.providerForTag(""test""));"
50034,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java,116,,"                createDeclaration(config.configurationAt(""xml""));"
50035,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java,141,,"        assertEquals(""Wrong class"", DEF_CLASS,"
50036,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java,84,,"        PropertyUtils.setProperty(createBean(false), ""throwExceptionOnMissing"","
50037,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java,108,,"                        .setFileName(""test.xml"").getParameters();"
50038,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java,111,,"        assertEquals(""Wrong file name"", ""test.xml"", fbparams.getFileHandler()"
50039,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java,178,,"                        .setBasePath(""test"").setListDelimiterHandler(listHandler)"
50040,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java,88,,"        assertEquals(""Wrong result"", Integer.parseInt(REPLACEMENT),"
50041,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java,51,,"        assertEquals(""Wrong result"", ""test"", handler.escapeString(""test""));"
50042,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java,51,,"        assertEquals(""Wrong result"", ""test"", handler.escapeString(""test""));"
50043,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java,79,,"        final File f = new File(""dir"", ""file"");"
50044,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java,79,,"        final File f = new File(""dir"", ""file"");"
50045,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java,90,,"        assertEquals(""Wrong conversion result"", new File(""dir"", ""file""), PropertyConverter.toFile(""dir/file""));"
50046,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java,204,,"        assertFalse(""Wrong result"","
50047,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java,180,,"        assertSame(""Wrong result"", ci,"
50048,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java,517,,"        assertEquals(""Wrong variable value"", TEST_VALUE, interpolator"
50049,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java,94,,"        vars.add(new ExprLookup.Variable(""String"", org.apache.commons.lang3.StringUtils.class));"
50050,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java,109,,"        vars2.add(new ExprLookup.Variable(""System"", ""Class:java.lang.System""));"
50051,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java,109,,"        vars2.add(new ExprLookup.Variable(""System"", ""Class:java.lang.System""));"
50052,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,291,,"        assertNull(""Got a base path"", locator.getBasePath());"
50053,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,292,,"        assertNull(""Got a file name"", locator.getFileName());"
50054,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,293,,"        assertNull(""Got a URL"", locator.getSourceURL());"
50055,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,306,,"        assertEquals(""Wrong base path"", directory.getAbsolutePath(),"
50056,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,308,,"        assertEquals(""Wrong file name"", TEST_FILENAME, handler.getFileName());"
50057,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,482,,"        assertEquals(""Wrong content"", CONTENT, content.getContent());"
50058,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,915,,"        assertTrue(""Location not defined"", handler.isLocationDefined());"
50059,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,1002,,"        assertEquals(""Wrong result"", file.toURI().toURL().toString() + "": """
50060,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java,1160,,"        listener.checkMethods(""locationChanged"");"
50061,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java,112,,"        assertEquals(""base path of "" + url, ""http://xyz.net/foo/"", FileLocatorUtils.getBasePath(url));"
50062,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java,112,,"        assertEquals(""base path of "" + url, ""http://xyz.net/foo/"", FileLocatorUtils.getBasePath(url));"
50063,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java,213,,"        assertFalse(""Wrong result"", FileLocatorUtils.isLocationDefined(null));"
50064,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java,151,,"        ObjectAssert.assertInstanceOf(""the array element is not parsed as a List"", List.class, array);"
50065,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java,155,,"        assertEquals(""size"", 2, list.size());"
50066,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java,200,,"        assertEquals(""configuration element"", ""bar"", conf1.getProperty(""foo""));"
50067,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java,218,,"        ObjectAssert.assertInstanceOf(""data"", ArrayUtils.EMPTY_BYTE_ARRAY.getClass(), config.getProperty(""data""));"
50068,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,99,,"        assertEquals(""'string' property"", ""value1"", config.getString(""string""));"
50069,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,124,,"        assertEquals(""1st element"", ""value1"", config.getProperty(""dictionary.key1""));"
50070,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,125,,"        assertEquals(""2nd element"", ""value2"", config.getProperty(""dictionary.key2""));"
50071,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,169,,"        final Object array = config.getProperty(""array"");"
50072,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,172,,"        ObjectAssert.assertInstanceOf(""the array element is not parsed as a List"", List.class, array);"
50073,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,176,,"        assertEquals(""size"", 3, list.size());"
50074,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java,233,,"        assertEquals(""configuration element"", ""bar"", conf1.getProperty(""foo""));"
50075,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java,97,,"        assertFalse(""Reloading required"", detector.isReloadingRequired());"
50076,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java,98,,"        assertTrue(""Reloading not detected"", detector.isReloadingRequired());"
50077,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java,121,,"                        + ""test""));"
50078,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java,144,,"        assertEquals(""Key was not right trimmed"", "".test"", key"
50079,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java,168,,"        key.append(""tables"").append(""table(0)."");"
50080,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java,221,,"                .constructAttributeKey(""dataType""));"
50081,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java,362,,"        assertEquals(""Wrong key part"", ""tables"", it.nextKey());"
50082,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,49,,"    { ""docid"", ""name"", ""creationDate"", ""authorID"", ""version""}};"
50083,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,101,,"        checkKey(""tables.table[@type]"", ""type"", 2);"
50084,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,210,,"        checkAttributeValue(""[@test]"", ""test"", ""true"");"
50085,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,234,,"        assertEquals(""Invalid name for descendant of root"", ""tables"", engine"
50086,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,350,,"        assertTrue(""Path nodes available"", data.getPathNodes().isEmpty());"
50087,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,351,,"        assertEquals(""Wrong name of new node"", ""newNode"", data.getNewNodeName());"
50088,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,357,,"        assertEquals(""Wrong parent node"", ""field"", data.getParent().getNodeName());"
50089,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,374,,"        assertEquals(""Wrong type of parent node"", ""table"", data.getParent()"
50090,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java,374,,"        assertEquals(""Wrong type of parent node"", ""table"", data.getParent()"
50091,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java,399,,"                new ImmutableNode.Builder().name(""child2"").create();"
50092,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java,118,,"                        ""Homer/Ilias""), ""location"", false,"
50093,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java,155,,"                        ""Homer""), ""work"", false, null);"
50094,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java,162,,"        model.addProperty(KEY, Collections.singleton(""Odyssee""), resolver);"
50095,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java,252,,"                        NodeStructureHelper.author(0)), ""year"", true,"
50096,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java,144,,"        assertEquals(""Wrong reference 2"", ""Simmons"","
50097,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java,142,,"                NodeStructureHelper.nodeForKey(model, ""tables/table(1)"");"
50098,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java,144,,"        assertSame(""Wrong node"", node, model.getTrackedNode(selector));"
50099,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java,386,,"        model.clearProperty(""fields.field(0).name"", selector, resolver);"
50100,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java,746,,"        final String nodeKey1 = ""tables/table(0)"";"
50101,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java,805,,"        assertEquals(""Wrong selector"", selector, selectors.iterator().next());"
50102,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java,106,,"        assertNull(""Got a result"", selector.select(root, resolverMock, handler));"
50103,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java,76,,"        assertEquals(""Wrong number of attributes"", 3, iteratorSize(it));"
50104,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java,84,,"        assertEquals(""Wrong number of elements"", CHILD_COUNT, iteratorSize(it));"
50105,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java,130,,"                QueryResult.createAttributeResult(root, ""attr"");"
50106,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java,216,,"                engine.nodeKey(root, ""parent"", handler));"
50107,./TargetProjects/commons-configuration/src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java,271,,"                engine.attributeKey(null, ""child""));"
50108,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/AbstractCipherTest.java,89,,"		enc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(KEY, ""AES""), new IvParameterSpec(IV));"
50109,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/CryptoCipherFactoryTest.java,33,,"                .getCryptoCipher(""AES/CBC/NoPadding"");"
50110,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,76,,"        final String kHex = ""00000000000000000000000000000000"";"
50111,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,98,,"        final String kHex = ""feffe9928665731c6d6a8f9467308308"";"
50112,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,99,,"        final String pHex = ""d9313225f88406e5a55909c5aff5269a"""
50113,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,100,,"                + ""86a7a9531534f7da2e4c303d8a318a72"""
50114,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,101,,"                + ""1c3c0c95956809532fcf0e2449a6b525"""
50115,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,102,,"                + ""b16aedf5aa0de657ba637b39"";"
50116,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,104,,"        final String aadHex = ""feedfacedeadbeeffeedfacedeadbeef"""
50117,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,105,,"                + ""abaddad2"";"
50118,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/GcmCipherTest.java,225,,"            final Key key = new SecretKeySpec(keyBytes, ""AES"");"
50119,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/OpenSslCipherTest.java,51,,"                ""AES/CTR/NoPadding""};"
50120,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,29,,"            ""128"", ""2b7e151628aed2a6abf7158809cf4f3c"","
50121,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,29,,"            ""128"", ""2b7e151628aed2a6abf7158809cf4f3c"","
50122,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,31,,"            ""6bc1bee22e409f96e93d7e117393172a"","
50123,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,36,,"            ""ae2d8a571e03ac9c9eb76fac45af8e51"","
50124,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,49,,"            ""256"","
50125,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/cipher/TestData.java,50,,"            ""603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4"","
50126,./TargetProjects/commons-crypto/src/test/java/org/apache/commons/crypto/stream/AbstractCipherStreamTest.java,352,,"                new SecretKeySpec(key, ""AES""), new GCMParameterSpec(0, new byte[0]), withChannel));"
50127,./TargetProjects/commons-csv/src/main/java/org/apache/commons/csv/CSVParser.java,251,,"    @SuppressWarnings(""resource"")"
50128,./TargetProjects/commons-csv/src/main/java/org/apache/commons/csv/CSVParser.java,255,,"        Objects.requireNonNull(format, ""format"");"
50129,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,82,,"    @SuppressWarnings(""deprecation"")"
50130,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,284,,"                .setHeader(""One"", ""Two"", ""Three"")"
50131,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,284,,"                .setHeader(""One"", ""Two"", ""Three"")"
50132,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,284,,"                .setHeader(""One"", ""Two"", ""Three"")"
50133,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,423,,"                .setNullString(""null"")"
50134,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,503,,"        assertEquals(""\\N"", csvFormatTwo.getNullString());"
50135,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,790,,"        assertEquals(""a,b,c"", format.format(""a"", ""b"", ""c""));"
50136,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVFormatTest.java,1036,,"        assertEquals(""\r\n"", RFC4180.getRecordSeparator());"
50137,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,110,,"        final String[][] res = {{""one"", ""two"", ""three""}, // 0"
50138,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,110,,"        final String[][] res = {{""one"", ""two"", ""three""}, // 0"
50139,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,182,,"        final URL url = ClassLoader.getSystemClassLoader().getResource(""org/apache/commons/csv/CSVFileParser/bom.csv"");"
50140,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,185,,"                final String string = record.get(""Date"");"
50141,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,341,,"        final String[][] res = {{""hello"", """"} // CSV format ignores empty lines"
50142,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,381,,"        final String[] codes = {""hello,\r\n\r\nworld,\r\n"", ""hello,\r\n\r\nworld,"", ""hello,\r\n\r\nworld,\""\""\r\n"","
50143,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,382,,"            ""hello,\r\n\r\nworld,\""\"""", ""hello,\r\n\r\nworld,\n"", ""hello,\r\n\r\nworld,"", ""hello,\r\n\r\nworld,\""\""\n"","
50144,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,498,,"        try (final Reader in = new StringReader(""a,b,c\n1,2,3\nx,y,z"")) {"
50145,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,934,,"        try (final CSVParser parser = CSVParser.parse(""a,b,c"" + CRLF + ""d,e,f"", CSVFormat.DEFAULT)) {"
50146,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVParserTest.java,1063,,"            assertEquals(""xyz"", csvRecord.get(1));"
50147,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,300,,"        final Object value = ""abc"";"
50148,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,313,,"        list.add(""\\\\"");   // \\"
50149,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,346,,"            printer.print(""a,b,c"");"
50150,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,347,,"            printer.print(""xyz"");"
50151,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,476,,"            printer.print(""\\\r"");"
50152,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,557,,"            printer.printRecords((Object[]) new String[][] { { ""r1c1"", ""r1c2"" }, { ""r2c1"", ""r2c2"" } });"
50153,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,557,,"            printer.printRecords((Object[]) new String[][] { { ""r1c1"", ""r1c2"" }, { ""r2c1"", ""r2c2"" } });"
50154,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,557,,"            printer.printRecords((Object[]) new String[][] { { ""r1c1"", ""r1c2"" }, { ""r2c1"", ""r2c2"" } });"
50155,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,557,,"            printer.printRecords((Object[]) new String[][] { { ""r1c1"", ""r1c2"" }, { ""r2c1"", ""r2c2"" } });"
50156,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,558,,"            assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2"" + recordSeparator, sw.toString());"
50157,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,558,,"            assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2"" + recordSeparator, sw.toString());"
50158,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,596,,"            assertEquals(""a,b"" + recordSeparator, sw.toString());"
50159,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,866,,"        Object[] s = new String[] { ""NULL"", null };"
50160,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,878,,"        s = new String[] { ""\\N"", null };"
50161,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,1260,,"            printer.printRecord(""a"", ""b\\c"");"
50162,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,1261,,"            assertEquals(""a,b\\c"" + recordSeparator, sw.toString());"
50163,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVRecordTest.java,50,,"        FIRST(""first""),"
50164,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVRecordTest.java,51,,"        SECOND(""second""),"
50165,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVRecordTest.java,52,,"        THIRD(""third"");"
50166,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/CSVRecordTest.java,113,,"        headerMap.put(""fourth"", Integer.valueOf(4));"
50167,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java,95,,"            assertThat(parser.nextToken(new Token()), matches(TOKEN, ""line""));"
50168,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java,285,,"        try (final Lexer lexer = createLexer(""character\\"" + CR + ""Escaped"", formatWithEscaping)) {"
50169,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java,285,,"        try (final Lexer lexer = createLexer(""character\\"" + CR + ""Escaped"", formatWithEscaping)) {"
50170,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java,286,,"            assertThat(lexer.nextToken(new Token()), hasContent(""character"" + CR + ""Escaped""));"
50171,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java,292,,"        try (final Lexer lexer = createLexer(""character"" + CR + ""NotEscaped"", formatWithEscaping)) {"
50172,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/TokenMatchersTest.java,39,,"        token.content.append(""content"");"
50173,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java,36,,"                .setNullString(""N/A"")"
50174,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java,43,,"            printer.printRecord(null, ""Hello"", null, ""World"");"
50175,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java,43,,"            printer.printRecord(null, ""Hello"", null, ""World"");"
50176,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv93Test.java,45,,"    private static Object[] objects1 = {""abc"", """", null, ""a,b,c"", 123};"
50177,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv93Test.java,45,,"    private static Object[] objects1 = {""abc"", """", null, ""a,b,c"", 123};"
50178,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv93Test.java,47,,"    private static Object[] objects2 = {""abc"", ""NULL"", null, ""a,b,c"", 123};"
50179,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv93Test.java,66,,"                ""abc,,,\""a,b,c\"",123"","
50180,./TargetProjects/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv93Test.java,67,,"                new String[]{""abc"", """", """", ""a,b,c"", ""123""});"
50181,./TargetProjects/commons-dbcp/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java,90,,"    @SuppressWarnings(""resource"")"
50182,./TargetProjects/commons-dbcp/src/main/java/org/apache/commons/dbcp2/DelegatingStatement.java,323,,"    @SuppressWarnings(""resource"") // Caller is responsible for closing the resource."
50183,./TargetProjects/commons-dbcp/src/main/java/org/apache/commons/dbcp2/cpdsadapter/PooledConnectionImpl.java,589,,"            throw new SQLException(""Borrow prepareStatement from pool failed"", e);"
50184,./TargetProjects/commons-dbcp/src/main/java/org/apache/commons/dbcp2/managed/LocalXAConnectionFactory.java,88,,"                throw new XAException(""Invalid Xid: expected "" + this.currentXid + "", but was "" + xid);"
50185,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,79,,"        ds.setDriverClassName(""org.apache.commons.dbcp2.TesterDriver"");"
50186,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,80,,"        ds.setUrl(""jdbc:apache:commons:testdriver"");"
50187,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,88,,"        ds.setPassword(""password"");"
50188,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,89,,"        ds.setValidationQuery(""SELECT DUMMY FROM DUAL"");"
50189,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,162,,"        assertEquals(""value1"", ds.getConnectionProperties().getProperty(""name1""));"
50190,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,162,,"        assertEquals(""value1"", ds.getConnectionProperties().getProperty(""name1""));"
50191,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,163,,"        assertEquals(""value2"", ds.getConnectionProperties().getProperty(""name2""));"
50192,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,278,,"        ds.setValidationQuery(""invalid"");"
50193,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,882,,"        properties.put(""username"", ""foo"");"
50194,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSource.java,883,,"        properties.put(""password"", ""bar"");"
50195,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestBasicDataSourceFactory.java,116,,"        properties.setProperty(""defaultAutoCommit"", ""true"");"
50196,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestConnectionPool.java,142,,"            final PreparedStatement stmt = conn.prepareStatement(""select * from dual"");"
50197,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestConnectionPool.java,292,,"                ""resultSet.getStatement() should return the exact same statement instance that was used to create the result set"");"
50198,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestConnectionPool.java,551,,"        hash.put(con, ""test"");"
50199,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDataSourceConnectionFactory.java,56,,"        final DataSourceConnectionFactory factory = new DataSourceConnectionFactory(datasource, ""foo"", ""bar"");"
50200,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingCallableStatement.java,73,,"            delegate.getArray(""foo"");"
50201,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java,98,,"        connection = new TesterConnection(""test"", ""test"");"
50202,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingConnection.java,111,,"            fail(""Expecting SQLException"");"
50203,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingDatabaseMetaData.java,135,,"            delegate.getAttributes(""foo"",""foo"",""foo"",""foo"");"
50204,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingPreparedStatement.java,385,,"            delegate.setNString(1,""foo"");"
50205,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingResultSet.java,49,,"        testConn = new TesterConnection(""foo"", ""bar"");"
50206,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingStatement.java,62,,"        testerConnection = new TesterConnection(""test"", ""test"");"
50207,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDelegatingStatement.java,74,,"            delegatingStatement.addBatch(""foo"");"
50208,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestDriverManagerConnectionFactory.java,73,,"        final DriverManagerConnectionFactory cf = new DriverManagerConnectionFactory(""jdbc:apache:commons:testdriver"", null, ""pass"");"
50209,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,44,,"        Assertions.assertNotEquals(new PStmtKey(""sql"", ""catalog1"", ""schema1""), new PStmtKey(""sql"", ""catalog1"", ""schema2""));"
50210,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,44,,"        Assertions.assertNotEquals(new PStmtKey(""sql"", ""catalog1"", ""schema1""), new PStmtKey(""sql"", ""catalog1"", ""schema2""));"
50211,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,44,,"        Assertions.assertNotEquals(new PStmtKey(""sql"", ""catalog1"", ""schema1""), new PStmtKey(""sql"", ""catalog1"", ""schema2""));"
50212,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,44,,"        Assertions.assertNotEquals(new PStmtKey(""sql"", ""catalog1"", ""schema1""), new PStmtKey(""sql"", ""catalog1"", ""schema2""));"
50213,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,82,,"        Assertions.assertNotEquals(new PStmtKey(""sql"", ""catalog1"", ""schema1""), new PStmtKey(""sql"", ""catalog2"", ""schema1""));"
50214,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,209,,"        final PStmtKey pStmtKey = new PStmtKey(""SELECT 1"", ""catalog"", ""public"");"
50215,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,209,,"        final PStmtKey pStmtKey = new PStmtKey(""SELECT 1"", ""catalog"", ""public"");"
50216,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtKey.java,209,,"        final PStmtKey pStmtKey = new PStmtKey(""SELECT 1"", ""catalog"", ""public"");"
50217,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java,50,,"            final Statement stmt1 = conn.prepareStatement(""select 1 from dual"");"
50218,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtPooling.java,106,,"                ""jdbc:apache:commons:testdriver"",""u1"",""p1"");"
50219,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtPoolingBasicDataSource.java,55,,"        final PreparedStatement stmt1 = conn.prepareStatement(""select 'a' from dual"");"
50220,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPStmtPoolingBasicDataSource.java,146,,"        conn.setCatalog(""catalog1"");"
50221,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPoolingConnection.java,55,,"        final String sql = ""select 'a' from dual"";"
50222,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPoolingDriver.java,54,,"        return DriverManager.getConnection(""jdbc:apache:commons:dbcp:test"");"
50223,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TestPoolingDriver.java,86,,"        driver.registerPool(""test"",pool);"
50224,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TesterConnection.java,107,,"        throw new SQLException(""Not implemented."");"
50225,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TesterPreparedStatement.java,267,,"        throw new SQLException(""Not implemented."");"
50226,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TesterResultSet.java,345,,"        throw new SQLException(""Not implemented."");"
50227,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/TesterStatement.java,112,,"        throw new SQLException(""Not implemented."");"
50228,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java,60,,"        pcds.setUser(""foo"");"
50229,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java,61,,"        pcds.setPassword(""bar"");"
50230,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java,190,,"        pcds.setUser(""Alice"");"
50231,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java,207,,"        pcds.setPassword(""Secret"");"
50232,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/CharArrayTest.java,33,,"        assertEquals(""foo"", new CharArray(""foo"").asString());"
50233,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestCPDSConnectionFactory.java,48,,"        delegate.setUser(""userName"");"
50234,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestCPDSConnectionFactory.java,49,,"        delegate.setPassword(""password"");"
50235,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestInstanceKeyDataSource.java,114,,"        spds.setDataSourceName(""anything"");"
50236,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestInstanceKeyDataSource.java,164,,"        assertNull(spds.getJndiEnvironment(""name""));"
50237,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestInstanceKeyDataSource.java,165,,"        spds.setJndiEnvironment(""name"", ""king"");"
50238,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestKeyedCPDSConnectionFactory.java,49,,"        delegate.setUser(""userName"");"
50239,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestKeyedCPDSConnectionFactory.java,50,,"        delegate.setPassword(""password"");"
50240,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,58,,"        return ds.getConnection(user,""bar"");"
50241,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,93,,"        try (Connection c = ds.getConnection(user, ""bay"")){"
50242,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,185,,"        TesterDriver.addUser(""mkh"", ""password"");"
50243,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,185,,"        TesterDriver.addUser(""mkh"", ""password"");"
50244,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,186,,"        TesterDriver.addUser(""hanafey"", ""password"");"
50245,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,187,,"        TesterDriver.addUser(""jsmith"", ""password"");"
50246,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,351,,"        userDefaultBlockWhenExhausted.put(""key"", Boolean.FALSE);"
50247,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,357,,"        userDefaultBlockWhenExhausted.put(""anonymous"", Boolean.FALSE);"
50248,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,390,,"        assertEquals(ds.getDefaultBlockWhenExhausted(), ds.getPerUserBlockWhenExhausted(""missingkey""));"
50249,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,407,,"        ds.setPerUserBlockWhenExhausted(""anotheruser"", Boolean.FALSE);"
50250,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,432,,"        ds.setPerUserBlockWhenExhausted(""whatismyuseragain?"", Boolean.FALSE);"
50251,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPerUserPoolDataSource.java,1511,,"        final PreparedStatement stmt = conn.prepareStatement(""select * from dual"");"
50252,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestPoolKey.java,37,,"        poolKey = new PoolKey(""ds"", ""user"");"
50253,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java,49,,"        return ds.getConnection(""foo"",""bar"");"
50254,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java,49,,"        return ds.getConnection(""foo"",""bar"");"
50255,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java,125,,"        final PreparedStatement stmt = conn.prepareStatement(""select * from dual"");"
50256,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java,404,,"        final PreparedStatement stmt = conn.prepareCall(""{call home()}"");"
50257,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestSharedPoolDataSource.java,686,,"        try (Connection c = ds.getConnection(""foo"", ""bay"")){"
50258,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestUserPassKey.java,39,,"        userPassKey = new UserPassKey(""user"", ""pass"");"
50259,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/datasources/TestUserPassKey.java,39,,"        userPassKey = new UserPassKey(""user"", ""pass"");"
50260,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/managed/TestBasicManagedDataSource.java,68,,"            basicManagedDataSource.setDriverClassName(""org.apache.commons.dbcp2.TesterDriver"");"
50261,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/managed/TestBasicManagedDataSource.java,69,,"            basicManagedDataSource.setUrl(""jdbc:apache:commons:testdriver"");"
50262,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/managed/TestBasicManagedDataSource.java,70,,"            basicManagedDataSource.setUsername(""userName"");"
50263,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/managed/TestBasicManagedDataSource.java,71,,"            basicManagedDataSource.setPassword(""password"");"
50264,./TargetProjects/commons-dbcp/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java,411,,"                ""resultSet.getStatement() should return the exact same statement instance that was used to create the result set"");"
50265,./TargetProjects/commons-dbutils/src/main/java/org/apache/commons/dbutils/QueryRunner.java,165,,"            throw new SQLException(""Null connection"");"
50266,./TargetProjects/commons-dbutils/src/main/java/org/apache/commons/dbutils/QueryRunner.java,172,,"            throw new SQLException(""Null SQL statement"");"
50267,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java,84,,"        final Future<int[]> future = runner.batch(conn, ""select * from blah where ? = ?"", params);"
50268,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java,108,,"        final String[][] params = new String[][] { { ""unit"", ""unit"" }, { ""test"", ""test"" } };"
50269,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java,108,,"        final String[][] params = new String[][] { { ""unit"", ""unit"" }, { ""test"", ""test"" } };"
50270,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java,470,,"        runner.insert(""2"", handler, ""param1"");"
50271,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java,70,,"        assertEquals(""not set"", row.getDoNotSet());"
50272,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java,105,,"        final String[] columnNames = { ""test"", ""test"", ""three"" };"
50273,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java,49,,"    @SuppressWarnings(""boxing"") // test code"
50274,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,99,,"        runner.batch(conn, ""select * from blah where ? = ?"", params);"
50275,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,119,,"        final String[][] params = new String[][] { { ""unit"", ""unit"" }, { ""test"", ""test"" } };"
50276,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,119,,"        final String[][] params = new String[][] { { ""unit"", ""unit"" }, { ""test"", ""test"" } };"
50277,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,165,,"            fail(""Exception never thrown, but expected"");"
50278,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,326,,"        callQueryWithException(""unit"", ""test"", ""fail"");"
50279,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,573,,"        int result = runner.execute(conn, ""{call my_proc(?, ?)}"", ""unit"", ""test"");"
50280,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,583,,"        result = runner.execute(conn, ""{call my_proc()}"");"
50281,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,596,,"        result = runner.execute(conn, ""{?= call my_proc()}"", intParam);"
50282,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,609,,"        result = runner.execute(conn, ""{?= call my_proc(?, ?)}"", intParam, ""unit"", ""test"");"
50283,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java,621,,"        when(call.getObject(3)).thenReturn(""out"");"
50284,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java,46,,"        assertEquals(""not set"", row.getDoNotSet());"
50285,./TargetProjects/commons-dbutils/src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java,76,,"        assertNull(rs.getAsciiStream(""column""));"
50286,./TargetProjects/commons-digester/core/src/main/java/org/apache/commons/digester3/Digester.java,2625,,"            log.warn( ""Empty stack (returning null)"" );"
50287,./TargetProjects/commons-digester/core/src/main/java/org/apache/commons/digester3/binder/PluginCreateRuleBuilder.java,113,,"            reportError( ""createPlugin().setPluginClassAttribute( String )"", ""NULL attribute name not allowed"" );"
50288,./TargetProjects/commons-digester/core/src/main/java/org/apache/commons/digester3/plugins/PluginCreateRule.java,262,,"                log.debug( ""init: pluginClassAttr set to per-digester values ["" + ""ns="" + pluginClassAttrNs + "", name="""
50289,./TargetProjects/commons-digester/core/src/main/java/org/apache/commons/digester3/plugins/PluginCreateRule.java,262,,"                log.debug( ""init: pluginClassAttr set to per-digester values ["" + ""ns="" + pluginClassAttrNs + "", name="""
50290,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/AsyncReaderTestCase.java,79,,"        final Future<Employee> future = digester.asyncParse( getClass().getResource( ""Test9.xml"" ) );"
50291,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/BeanPropertySetterRuleTestCase.java,74,,"                forPattern( ""root/alpha"" ).addRuleCreatedBy( new TestRule.TestRuleProvider( ""first"", callOrder ) );"
50292,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/BeanPropertySetterRuleTestCase.java,74,,"                forPattern( ""root/alpha"" ).addRuleCreatedBy( new TestRule.TestRuleProvider( ""first"", callOrder ) );"
50293,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/BeanPropertySetterRuleTestCase.java,76,,"                forPattern( ""root/alpha"" ).addRuleCreatedBy( new TestRule.TestRuleProvider( ""second"", callOrder ) );"
50294,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/BeanPropertySetterRuleTestCase.java,78,,"                forPattern( ""root/alpha"" ).addRuleCreatedBy( new TestRule.TestRuleProvider( ""third"", callOrder ) );"
50295,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/BeanPropertySetterRuleTestCase.java,132,,"                forPattern( ""root"" ).addRuleCreatedBy( new TestRule.TestRuleProvider( ""root"", callOrder ) );"
50296,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,63,,"                forPattern( ""employee"" ).createObject().ofType( Employee.class );"
50297,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,65,,"                forPattern( ""employee"" ).callMethod( ""toString"" ).withParamCount( 0 ).withParamTypes( (Class[]) null )"
50298,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,80,,"        final Employee root1 = digester.parse( getInputStream( ""Test5.xml"" ) );"
50299,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,214,,"                    .callMethod( ""put"" ).withParamCount( 2 );"
50300,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,264,,"                    .callMethod( ""setName"" ).withParamCount( 1 );"
50301,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,346,,"        digester.addObjectCreate( ""root/bean"", PrimitiveBean.class );"
50302,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,347,,"        digester.addSetNext( ""root/bean"", ""add"" );"
50303,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,352,,"        digester.addObjectCreate( ""root/beanie"", PrimitiveBean.class );"
50304,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,396,,"        digester.addObjectCreate( ""root/one"", NamedBean.class );"
50305,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,401,,"        digester.addObjectCreate( ""root/two"", NamedBean.class );"
50306,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,406,,"        digester.addObjectCreate( ""root/three"", NamedBean.class );"
50307,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,411,,"        digester.addObjectCreate( ""root/four"", NamedBean.class );"
50308,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,416,,"        digester.addObjectCreate( ""root/five"", NamedBean.class );"
50309,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,460,,"        digester.addObjectCreate( ""root/param"", ParamBean.class );"
50310,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,502,,"        digester.addObjectCreate( ""root/spam"", NamedBean.class );"
50311,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,507,,"        digester.addObjectCreate( ""root/spam/spam"", NamedBean.class );"
50312,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,512,,"        digester.addObjectCreate( ""root/spam/spam/spam"", NamedBean.class );"
50313,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,517,,"        digester.addObjectCreate( ""root/spam/spam/spam/spam"", NamedBean.class );"
50314,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/CallMethodRuleTestCase.java,651,,"        digester.addObjectCreate( ""employee/address"", Address.class );"
50315,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/Digester153TestCase.java,48,,"        digester.addRule( ""toplevel/bean"", createRule );"
50316,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/Digester153TestCase.java,49,,"        digester.addCallParam( ""toplevel/bean"", 0, ""boolean"" );"
50317,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/Digester153TestCase.java,52,,"        TestBean bean = digester.parse( getClass().getResourceAsStream( ""BasicConstructor.xml"" ) );"
50318,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/DigesterTestCase.java,111,,"            fail( ""Expected IllegalArgumentException with null argument"" );"
50319,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/DigesterTestCase.java,314,,"        digester.addRule( ""a/b/c/d"", new TestRule( ""a/b/c/d"" ) );"
50320,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/DigesterTestCase.java,689,,"        d.push( ""stack1"", obj8 );"
50321,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ErrorHandlerTest.java,53,,"            fail( ""Expected SAXException"" );"
50322,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,64,,"        assertEquals( ""Initial rules list is empty"", 0, digester.getRules().rules().size() );"
50323,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,69,,"        digester.addRule( ""alpha/beta/gamma/delta"", new TestRule( ""exact"" ) );"
50324,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,69,,"        digester.addRule( ""alpha/beta/gamma/delta"", new TestRule( ""exact"" ) );"
50325,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,72,,"        digester.addRule( ""*/beta/gamma/?"", new TestRule( ""wild_parent"" ) );"
50326,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,84,,"        list = digester.getRules().match( null, ""alpha/beta/gamma/epsilon"", null, null );"
50327,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,215,,"        digester.addRule( ""!*"", new TestRule( ""universal_wild"" ) );"
50328,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,309,,"        digester.addRule( ""!a/b/*"", new TestRule( ""uni-a-b-star"" ) );"
50329,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,311,,"        digester.addRule( ""a/b/c"", new TestRule( ""a-b-c"" ) );"
50330,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,311,,"        digester.addRule( ""a/b/c"", new TestRule( ""a-b-c"" ) );"
50331,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,369,,"        digester.addRule( ""a/b/c/d/*"", new TestRule( ""a-b-c-d-star"" ) );"
50332,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ExtendedBaseRulesTestCase.java,392,,"        digester.addRule( ""!instructors/*"", new TestRule( ""instructors"" ) );"
50333,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NamespaceSnapshotTestCase.java,109,,"        assertEquals( ""http://commons.apache.org/digester/Foo"", nsmap.get( ""foo"" ) );"
50334,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NamespaceSnapshotTestCase.java,110,,"        assertEquals( ""http://commons.apache.org/digester/Bar"", nsmap.get( ""bar"" ) );"
50335,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,87,,"            fail( ""IllegalArgumentException expected for type "" + ""CDATA_SECTION_NODE"" );"
50336,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,219,,"                forPattern( ""root"" ).createNode().ofType( NodeType.DOCUMENT_FRAGMENT );"
50337,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,314,,"                forPattern( ""employee"" ).createNode().ofType( NodeType.DOCUMENT_FRAGMENT );"
50338,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,326,,"        assertEquals( ""address"", address1.getNodeName() );"
50339,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,328,,"        assertEquals( ""home"", address1.getAttribute( ""type"" ) );"
50340,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,329,,"        assertEquals( ""Home Street"", address1.getAttribute( ""street"" ) );"
50341,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,330,,"        assertEquals( ""Home City"", address1.getAttribute( ""city"" ) );"
50342,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,331,,"        assertEquals( ""HS"", address1.getAttribute( ""state"" ) );"
50343,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,332,,"        assertEquals( ""HmZip"", address1.getAttribute( ""zipCode"" ) );"
50344,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,374,,"        assertEquals( ""http://commons.apache.org/digester/Bar"", address1.getNamespaceURI() );"
50345,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,421,,"        assertNotNull( element.getAttributeNodeNS( ""http://commons.apache.org/digester/Bar"", ""test"" ) );"
50346,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/NodeCreateRuleTestCase.java,456,,"        assertNotNull( element.getAttributeNode( ""firstName"" ) );"
50347,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/ObjectParamRuleTestCase.java,63,,"                forPattern( ""arraylist/A"" ).callMethod( ""add"" ).withParamCount( 1 )"
50348,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/OverlappingCallMethodRuleTestCase.java,62,,"        input.append( ""<root>"" );"
50349,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/OverlappingCallMethodRuleTestCase.java,64,,"        input.append( ""</root>"" );"
50350,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/OverlappingCallMethodRuleTestCase.java,72,,"                forPattern( ""root/item"" ).callMethod( ""setItemId"" ).withParamCount( 1 )"
50351,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/OverlappingCallMethodRuleTestCase.java,72,,"                forPattern( ""root/item"" ).callMethod( ""setItemId"" ).withParamCount( 1 )"
50352,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/OverlappingCallMethodRuleTestCase.java,76,,"                    .callMethod( ""setItemName"" ).withParamCount( 1 )"
50353,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RegexRulesTestCase.java,49,,"        rules.add( ""/a/b/b"", new TestRule( ""alpha"" ) );"
50354,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RegexRulesTestCase.java,50,,"        rules.add( ""/a/d"", new TestRule( ""beta"" ) );"
50355,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RegexRulesTestCase.java,51,,"        rules.add( ""/b"", new TestRule( ""gamma"" ) );"
50356,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RegexRulesTestCase.java,56,,"        assertEquals( ""Wrong number of rules returned (1)"", 3, matches.size() );"
50357,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RegexRulesTestCase.java,172,,"                      matcher.match( ""/alpha/beta/gamma"", ""/alpha/beta/gamma"" ) );"
50358,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,90,,"        digester.addObjectCreate( ""employee"", ""org.apache.commons.digester3.Employee"" );"
50359,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,90,,"        digester.addObjectCreate( ""employee"", ""org.apache.commons.digester3.Employee"" );"
50360,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,94,,"        final Employee employee = digester.parse( getInputStream( ""Test1.xml"" ) );"
50361,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,96,,"        assertNotNull( ""Digester returned an object"", employee );"
50362,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,97,,"        assertEquals( ""First name is correct"", ""First Name"", employee.getFirstName() );"
50363,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,97,,"        assertEquals( ""First name is correct"", ""First Name"", employee.getFirstName() );"
50364,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,98,,"        assertEquals( ""Last name is correct"", ""Last Name"", employee.getLastName() );"
50365,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,98,,"        assertEquals( ""Last name is correct"", ""Last Name"", employee.getLastName() );"
50366,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,115,,"        digester.addObjectCreate( ""employee/address"", ""org.apache.commons.digester3.Address"" );"
50367,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,115,,"        digester.addObjectCreate( ""employee/address"", ""org.apache.commons.digester3.Address"" );"
50368,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,263,,"        assertNotNull( ""Can retrieve home address"", employee.getAddress( ""home"" ) );"
50369,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,264,,"        assertNotNull( ""Can retrieve office address"", employee.getAddress( ""office"" ) );"
50370,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RuleTestCase.java,394,,"        digester.addSetNext( ""!root/?"", ""add"" );"
50371,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RulesBaseTestCase.java,98,,"        assertEquals( ""Initial rules list is empty"", 0, digester.getRules().match( null, ""a"", null, null ).size() );"
50372,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RulesBaseTestCase.java,136,,"        digester.addRule( ""a/b/c/d"", new TestRule( ""a/b/c/d"" ) );"
50373,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RulesBaseTestCase.java,180,,"        digester.addRule( ""alpha/beta/gamma"", new TestRule( ""No-Namespace"" ) );"
50374,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RulesBaseTestCase.java,180,,"        digester.addRule( ""alpha/beta/gamma"", new TestRule( ""No-Namespace"" ) );"
50375,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/RulesBaseTestCase.java,229,,"        digester.addRule( ""alpha/beta/gamma"", new TestRule( ""one"" ) );"
50376,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,47,,"    protected final static String TEST_XML = ""<?xml version='1.0'?>"" + ""<root>ROOT BODY"" + ""<alpha>ALPHA BODY</alpha>"""
50377,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,47,,"    protected final static String TEST_XML = ""<?xml version='1.0'?>"" + ""<root>ROOT BODY"" + ""<alpha>ALPHA BODY</alpha>"""
50378,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,48,,"        + ""<beta>BETA BODY</beta>"" + ""<gamma>GAMMA BODY</gamma>"" + ""<delta>DELTA BODY</delta>"" + ""</root>"";"
50379,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,48,,"        + ""<beta>BETA BODY</beta>"" + ""<gamma>GAMMA BODY</gamma>"" + ""<delta>DELTA BODY</delta>"" + ""</root>"";"
50380,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,48,,"        + ""<beta>BETA BODY</beta>"" + ""<gamma>GAMMA BODY</gamma>"" + ""<delta>DELTA BODY</delta>"" + ""</root>"";"
50381,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,65,,"                forPattern( ""root"" ).createObject().ofType( ""org.apache.commons.digester3.SimpleTestBean"" )"
50382,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,65,,"                forPattern( ""root"" ).createObject().ofType( ""org.apache.commons.digester3.SimpleTestBean"" )"
50383,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,77,,"        assertEquals( ""Property beta not set correctly"", ""BETA BODY"", bean.getBeta() );"
50384,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,77,,"        assertEquals( ""Property beta not set correctly"", ""BETA BODY"", bean.getBeta() );"
50385,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,79,,"        assertEquals( ""Property gamma not set correctly"", ""GAMMA BODY"", bean.getGamma() );"
50386,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,79,,"        assertEquals( ""Property gamma not set correctly"", ""GAMMA BODY"", bean.getGamma() );"
50387,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,81,,"        assertEquals( ""Property delta not set correctly"", ""DELTA BODY"", bean.getDeltaValue() );"
50388,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,168,,"        assertEquals( ""Digester rules object not reset."", RulesBase.class, digester.getRules().getClass() );"
50389,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,281,,"                + ""<gamma>GAMMA "" + ""<prop name='delta' value='delta-prop'/>"" + ""BODY"" + ""</gamma>"" + ""</testbean>"""
50390,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetNestedPropertiesRuleTestCase.java,324,,"            ""<?xml version='1.0'?>"" + ""<root>"" + ""<testbean>"" + ""<beta>BETA BODY</beta>"" + ""<foo>GAMMA</foo>"""
50391,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetPropertiesRuleTestCase.java,77,,"                forPattern( ""root"" ).createObject().ofType( ""org.apache.commons.digester3.SimpleTestBean"" )"
50392,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/SetPropertiesRuleTestCase.java,77,,"                forPattern( ""root"" ).createObject().ofType( ""org.apache.commons.digester3.SimpleTestBean"" )"
50393,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,86,,"        digester.addFactoryCreate( ""root"", new ThrowExceptionCreateRule(), ignoreCreateExceptions );"
50394,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,115,,"        String xml = ""<?xml version='1.0' ?><root one='good' two='bad' three='ugly'><element/></root>"";"
50395,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,119,,"        assertEquals( ""Attribute not passed (1)["" + ignoreCreateExceptions + ""]"", factory.attributes.getValue( ""one"" ),"
50396,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,120,,"                      ""good"" );"
50397,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,121,,"        assertEquals( ""Attribute not passed (2)["" + ignoreCreateExceptions + ""]"", factory.attributes.getValue( ""two"" ),"
50398,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,122,,"                      ""bad"" );"
50399,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,123,,"        assertEquals( ""Attribute not passed (3)["" + ignoreCreateExceptions + ""]"", factory.attributes.getValue( ""three"" ),"
50400,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,124,,"                      ""ugly"" );"
50401,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,129,,"        digester.addSetNext( ""root"", ""add"" );"
50402,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,135,,"        assertEquals( ""List should contain only the factory object"", list.size(), 1 );"
50403,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/TestFactoryCreate.java,146,,"        digester.addFactoryCreate( ""root"", ""org.apache.commons.digester3.ObjectCreationFactoryTestImpl"", ""override"","
50404,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/WithDefaultsRulesWrapperTestCase.java,41,,"        rules.add( ""alpha"", new TestRule( ""Tom"" ) );"
50405,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/WithDefaultsRulesWrapperTestCase.java,41,,"        rules.add( ""alpha"", new TestRule( ""Tom"" ) );"
50406,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/WithDefaultsRulesWrapperTestCase.java,42,,"        rules.add( ""alpha"", new TestRule( ""Dick"" ) );"
50407,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/WithDefaultsRulesWrapperTestCase.java,43,,"        rules.add( ""alpha"", new TestRule( ""Harry"" ) );"
50408,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/WithDefaultsRulesWrapperTestCase.java,54,,"        rules.addDefault( new TestRule( ""Roger"" ) );"
50409,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/annotations/addressbook/AddressBookTestCase.java,40,,"        person.addEmail( ""business"", ""gonzo@muppets.com"" );"
50410,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/plugins/TestConfigurablePluginAttributes.java,53,,"        digester.addRule( ""root/widget"", widgetPluginRule );"
50411,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/plugins/TestConfigurablePluginAttributes.java,57,,"        digester.addRule( ""root/gadget"", gadgetPluginRule );"
50412,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/plugins/TestDefaultPlugin.java,47,,"        digester.addRule( ""root/widget"", pcr );"
50413,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/plugins/TestLocalRules.java,50,,"        digester.addRule( ""root/widget"", pcr2 );"
50414,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/plugins/TestRuleInfo.java,51,,"        digester.addRule( ""root/widget"", pcr );"
50415,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/substitution/VariableExpansionTestCase.java,86,,"        digester.addObjectCreate( ""root/bean"", SimpleTestBean.class );"
50416,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/substitution/VariableExpansionTestCase.java,107,,"        digester.addObjectCreate( ""root"", SimpleTestBean.class );"
50417,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/substitution/VariableExpansionTestCase.java,156,,"            ""<root>"" + ""<bean alpha='${attr1}' beta='var{attr1}'/>"" + ""<bean alpha='${attr2}' beta='var{attr2}'/>"""
50418,./TargetProjects/commons-digester/core/src/test/java/org/apache/commons/digester3/substitution/VariableExpansionTestCase.java,157,,"                + ""</root>"";"
50419,./TargetProjects/commons-digester/examples/api/catalog/src/main/java/org/apache/commons/digester3/examples/api/catalog/Main.java,135,,"        d.addObjectCreate( ""catalog/dvd"", AudioVisual.class );"
50420,./TargetProjects/commons-digester/examples/api/catalog/src/main/java/org/apache/commons/digester3/examples/api/catalog/Main.java,189,,"        d.addObjectCreate( ""catalog/video"", AudioVisual.class );"
50421,./TargetProjects/commons-digester/examples/rss/src/main/java/org/apache/commons/digester3/rss/RSSDigester.java,217,,"        addCallMethod( ""rss/channel/description"", ""setDescription"", 0 );"
50422,./TargetProjects/commons-digester/examples/rss/src/main/java/org/apache/commons/digester3/rss/RSSDigester.java,221,,"        addCallMethod( ""rss/channel/link"", ""setLink"", 0 );"
50423,./TargetProjects/commons-digester/examples/rss/src/main/java/org/apache/commons/digester3/rss/RSSDigester.java,227,,"        addCallMethod( ""rss/channel/title"", ""setTitle"", 0 );"
50424,./TargetProjects/commons-email/src/main/java/org/apache/commons/mail/Email.java,571,,"        if (""true"".equalsIgnoreCase(auth))"
50425,./TargetProjects/commons-email/src/main/java/org/apache/commons/mail/Email.java,655,,"                    isStartTLSEnabled() ? ""true"" : ""false"");"
50426,./TargetProjects/commons-email/src/main/java/org/apache/commons/mail/Email.java,800,,"            throw new EmailException(""Address List provided was invalid"");"
50427,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailLiveTest.java,189,,"        textMsg = ""Your email client does not support HTML messages"";"
50428,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,54,,"            ""me@home.com"","
50429,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,55,,"            ""joe.doe@apache.org"","
50430,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,56,,"            ""someone_here@work-address.com.au"""
50431,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,188,,"        String testObject = ""test string object"";"
50432,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,318,,"        final String[] testEmailNames = {""Name1"", """", null};"
50433,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,343,,"        email.setFrom(""me@home.com"", ""me@home.com"", ""bad.encoding\uc5ec\n"");"
50434,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,842,,"        headers.put(""X-Mailer"", ""Sendmail"");"
50435,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,922,,"        email.setFrom(""a@b.com"");"
50436,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,923,,"        email.addTo(""c@d.com"");"
50437,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,924,,"        email.setSubject(""test mail"");"
50438,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailTest.java,1200,,"        email.setCharset(""ISO-8859-1"");"
50439,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/EmailUtilsTest.java,38,,"        assertEquals(""abcdefg"", EmailUtils.replaceEndOfLineCharactersWithSpaces(""abcdefg""));"
50440,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/HtmlEmailTest.java,82,,"                fail(""Should have thrown an exception"");"
50441,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/HtmlEmailTest.java,214,,"        final File file = File.createTempFile(""testEmbedFile"", ""txt"");"
50442,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/ImageHtmlEmailTest.java,73,,"        final String strSubject = ""Test HTML Send default"";"
50443,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/ImageHtmlEmailTest.java,89,,"        email.setTextMsg(""Your email client does not support HTML messages"");"
50444,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/ImageHtmlEmailTest.java,100,,"        assertTrue(mimeMessageParser.getHtmlContent().contains(""\""cid:""));"
50445,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/InvalidAddressTest.java,92,,"                fail(""setFrom "" + i + "" passed: "" + ARR_INVALID_EMAILS[i]);"
50446,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/InvalidInternetAddressTest.java,131,,"                + "" - "" + ex.getMessage());"
50447,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/InvalidInternetAddressTest.java,151,,"            final InternetAddress address = new InternetAddress(ARR_INVALID_EMAILS[i], ""Joe"");"
50448,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/InvalidInternetAddressTest.java,164,,"                    fail(""Validate "" + i + "" passed: "" + ARR_INVALID_EMAILS[i]);"
50449,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/MultiPartEmailTest.java,91,,"                fail(""Should have thrown an exception"");"
50450,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/MultiPartEmailTest.java,118,,"        attachment.setDescription(""Test Attachment Desc"");"
50451,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/MultiPartEmailTest.java,198,,"        attachment.setName(""Test Attachment"");"
50452,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java,60,,"        assertEquals(""test_from@apache.org"", mimeMessageParser.getFrom());"
50453,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java,109,,"        assertEquals(""siegfried.goeschl@it20one.at"", mimeMessageParser.getFrom());"
50454,./TargetProjects/commons-email/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java,377,,"        email.setSubject(""Test Subject"");"
50455,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,40,,"        final CommandLine cmdl = new CommandLine(""test"");"
50456,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,81,,"        cmdl.addArgument(""foo"");"
50457,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,82,,"        cmdl.addArgument(""bar"");"
50458,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,83,,"        assertEquals(""[test, foo, bar]"", cmdl.toString());"
50459,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,313,,"        final CommandLine cmdl = new CommandLine(""runMemorySud.cmd"");"
50460,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,316,,"        cmdl.addArgument(""-XX:+UseParallelGC"", false);"
50461,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,317,,"        cmdl.addArgument(""\""-XX:ParallelGCThreads=2\"""", false);"
50462,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,356,,"        substitutionMap.put(""appMainClass"", ""foo.bar.Main"");"
50463,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,365,,"        cmdl = CommandLine.parse(""${JAVA_HOME}/bin/java ${appMainClass}"");"
50464,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,366,,"        assertTrue(cmdl.getExecutable().indexOf(""${JAVA_HOME}"") == 0 );"
50465,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,367,,"        assertArrayEquals(new String[]{""${appMainClass}""}, cmdl.getArguments());"
50466,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,410,,"        cmdl.addArgument(""-class"");"
50467,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,415,,"        substitutionMap.put(""file"", ""C:\\Document And Settings\\documents\\432431.pdf"");"
50468,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/CommandLineTest.java,437,,"        substitutionMap.put(""file"", ""C:\\Document And Settings\\documents\\432432.pdf"");"
50469,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java,105,,"        assertEquals(""FOO.."", baos.toString().trim());"
50470,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java,227,,"        assertTrue(""ResultHandler received a result"", handler.hasResult());"
50471,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/DefaultExecutorTest.java,679,,"        assertFalse(environment.indexOf(""NEW_VAR"") >= 0);"
50472,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/environment/EnvironmentUtilsTest.java,53,,"        env.put(""foo"", ""bar"");"
50473,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/issues/Exec36Test.java,87,,"                    ""WITHOUT_HELP_DOC=true"";"
50474,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/MapUtilTest.java,40,,"        procEnvironment.put(""JAVA_HOME"", ""/usr/opt/java"");"
50475,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/MapUtilTest.java,40,,"        procEnvironment.put(""JAVA_HOME"", ""/usr/opt/java"");"
50476,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/StringUtilTest.java,39,,"        vars.put(""foo"", ""FOO"");"
50477,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/StringUtilTest.java,39,,"        vars.put(""foo"", ""FOO"");"
50478,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/StringUtilTest.java,42,,"        assertEquals(""This is a FOO & BAR test"", StringUtils.stringSubstitution(""This is a FOO & BAR test"", vars, true).toString());"
50479,./TargetProjects/commons-exec/src/test/java/org/apache/commons/exec/util/StringUtilTest.java,56,,"        assertEquals(""This is a FOO & BAR test"", StringUtils.stringSubstitution(""This is a ${foo} & ${bar} test"", vars, true).toString());"
50480,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/DefaultFileItemTest.java,124,,"            fail(""Unexpected IOException"");"
50481,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/DefaultFileItemTest.java,289,,"                ""doesnotmatter"","
50482,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/DefaultFileItemTest.java,290,,"                ""text/plain; charset="" + CHARSET_ISO88591,"
50483,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileItemHeadersTest.java,43,,"        aMutableFileItemHeaders.addHeader(""Content-Type"", ""text/plain"");"
50484,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileItemHeadersTest.java,45,,"        aMutableFileItemHeaders.addHeader(""TestHeader"", ""headerValue1"");"
50485,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,56,,"    @MethodSource(""data"")"
50486,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,60,,"                                               ""-----1234\r\n"" +"
50487,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,63,,"                                               ""Content-Type: text/whatever\r\n"" +"
50488,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,64,,"                                               ""\r\n"" +"
50489,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,65,,"                                               ""This is the content of the file\n"" +"
50490,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,70,,"                                               ""fieldValue\r\n"" +"
50491,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,72,,"                                               ""Content-Disposition: form-data; name=\""multi\""\r\n"" +"
50492,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,79,,"                                               ""-----1234--\r\n"");"
50493,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/FileUploadTest.java,95,,"        assertEquals(""multi"", multi0.getFieldName());"
50494,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/MockHttpServletRequest.java,418,,"    @SuppressWarnings(""javadoc"") // This is a Servlet 2.4 method"
50495,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/ParameterParserTest.java,38,,"        assertNull(params.get(""test""));"
50496,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/ParameterParserTest.java,119,,"        assertEquals(""If you can read this you understand the example."", params.get(""filename""));"
50497,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,59,,"            final String header = ""-----1234\r\n"""
50498,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,61,,"                + ""\r\n"";"
50499,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,68,,"        baos.write(""-----1234--\r\n"".getBytes(StandardCharsets.US_ASCII));"
50500,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,98,,"            ""Content-Type: text/whatever\r\n"" +"
50501,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,100,,"            ""This is the content of the file\n"" +"
50502,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/SizesTest.java,126,,"            fail(""Expected exception."");"
50503,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/StreamingTest.java,61,,"            assertEquals(""field"" + (num++), item.getFieldName());"
50504,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/StreamingTest.java,190,,"        return ""-----1234\r\n"""
50505,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/StreamingTest.java,192,,"            + ""\r\n"";"
50506,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/jaksrvlt/JakSrvltFileUploadTest.java,48,,"        final String text = ""-----1234\r\n"" +"
50507,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/jaksrvlt/JakSrvltFileUploadTest.java,51,,"                      ""\r\n"" +"
50508,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/jaksrvlt/MockJakSrvltHttpRequest.java,432,,"    @SuppressWarnings(""javadoc"") // This is a Servlet 2.4 method"
50509,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/jaksrvlt/MockJakSrvltHttpRequest.java,582,,"            throw new IllegalStateException(""Not implemented"");"
50510,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/portlet/PortletFileUploadTest.java,53,,"        final String text = ""-----1234\r\n"" +"
50511,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/portlet/PortletFileUploadTest.java,56,,"                      ""\r\n"" +"
50512,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/servlet/ServletFileUploadTest.java,49,,"        final String text = ""-----1234\r\n"" +"
50513,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/servlet/ServletFileUploadTest.java,52,,"                      ""\r\n"" +"
50514,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/util/mime/Base64DecoderTestCase.java,95,,"        assertIOException(""truncated"", ""Zm9vYmFy1"");"
50515,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/util/mime/RFC2231UtilityTestCase.java,41,,"        final String nameWithAsteriskNotAtEnd = ""param*name"";"
50516,./TargetProjects/commons-fileupload/src/test/java/org/apache/commons/fileupload2/util/mime/RFC2231UtilityTestCase.java,44,,"        final String nameWithoutAsterisk = ""paramname"";"
50517,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestBoundNullaryFunction.java,40,,"        return new BoundNullaryFunction<Object>(Identity.INSTANCE,""xyzzy"");"
50518,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestBoundNullaryPredicate.java,41,,"        return new BoundNullaryPredicate(Constant.TRUE,""xyzzy"");"
50519,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestBoundNullaryProcedure.java,40,,"        return new BoundNullaryProcedure(NoOp.INSTANCE,""xyzzy"");"
50520,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryFunction.java,41,,"        return new FullyBoundNullaryFunction<Object>(RightIdentity.FUNCTION, null, ""xyzzy"");"
50521,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryFunction.java,58,,"        assertObjectsAreEqual(new FullyBoundNullaryFunction<Object>(RightIdentity.FUNCTION, ""bar"", ""xyzzy""),"
50522,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryPredicate.java,40,,"        return new FullyBoundNullaryPredicate(Constant.TRUE, null, ""xyzzy"");"
50523,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryPredicate.java,49,,"                new BinaryFunctionBinaryPredicate<Object, Boolean>(RightIdentity.<Object, Boolean> function()), ""foo"","
50524,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryProcedure.java,40,,"        return new FullyBoundNullaryProcedure(NoOp.INSTANCE, ""xyzzy"", null);"
50525,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestFullyBoundNullaryProcedure.java,49,,"                RightIdentity.FUNCTION), ""foo"", null);"
50526,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestIgnoreLeftFunction.java,40,,"        return new IgnoreLeftFunction<Object, Object, Object>(Constant.of(""xyzzy""));"
50527,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestIgnoreRightFunction.java,40,,"        return new IgnoreRightFunction<Object, Object, Object>(Constant.of(""xyzzy""));"
50528,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestLeftBoundFunction.java,41,,"        return new LeftBoundFunction<Object, Object>(RightIdentity.FUNCTION,""xyzzy"");"
50529,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestLeftBoundPredicate.java,41,,"        return new LeftBoundPredicate<Object>(Constant.TRUE,""xyzzy"");"
50530,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestLeftBoundProcedure.java,40,,"        return new LeftBoundProcedure<Object>(NoOp.INSTANCE,""xyzzy"");"
50531,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestNullaryFunctionFunction.java,39,,"        return new NullaryFunctionFunction<Object, Object>(Constant.of(""xyzzy""));"
50532,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestRightBoundFunction.java,41,,"        return new RightBoundFunction<Object, Object>(LeftIdentity.FUNCTION,""xyzzy"");"
50533,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestRightBoundPredicate.java,41,,"        return new RightBoundPredicate<Object>(Constant.TRUE, ""xyzzy"");"
50534,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/adapter/TestRightBoundProcedure.java,41,,"        return new RightBoundProcedure<Object>(NoOp.INSTANCE,""xyzzy"");"
50535,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/aggregator/AbstractListBackedAggregatorTest.java,48,,"        @SuppressWarnings(""unchecked"")"
50536,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/aggregator/AbstractNoStoreAggregatorTest.java,47,,"        @SuppressWarnings(""unchecked"")"
50537,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestConstant.java,45,,"        Constant<Object> f = new Constant<Object>(""xyzzy"");"
50538,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestConstant.java,50,,"        assertEquals(""xyzzy"", f.evaluate(""foo""));"
50539,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestIsEqual.java,50,,"        assertTrue(p.test(""foo"", ""foo""));"
50540,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestIsNotEqual.java,48,,"        assertTrue(!p.test(""foo"", ""foo""));"
50541,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestIsNotSame.java,50,,"        assertFalse(p.test(""foo"", ""foo""));"
50542,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestIsNull.java,53,,"        assertTrue(IsNull.left().test(null, ""not null""));"
50543,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestIsSame.java,50,,"        assertTrue(p.test(""foo"", ""foo""));"
50544,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestLeftIdentity.java,55,,"        assertNull(f.evaluate(null,""xyzzy""));"
50545,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/TestRightIdentity.java,55,,"        assertNull(f.evaluate(""xyzzy"",null));"
50546,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/algorithm/TestFindWithinGenerator.java,54,,"            assertEquals(""equals must be symmetric"", obj2, obj);"
50547,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterable.java,224,,"        Iterable<Object> objects = Arrays.asList((Object) ""foo"", ""bar"", ""baz"", 2L, BigInteger.ZERO);"
50548,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterable.java,224,,"        Iterable<Object> objects = Arrays.asList((Object) ""foo"", ""bar"", ""baz"", 2L, BigInteger.ZERO);"
50549,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterable.java,224,,"        Iterable<Object> objects = Arrays.asList((Object) ""foo"", ""bar"", ""baz"", 2L, BigInteger.ZERO);"
50550,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestAnd.java,47,,"        assertTrue((new And<Object>()).test(""xyzzy""));"
50551,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestBinaryAnd.java,48,,"        assertTrue((new BinaryAnd<String, Integer>()).test(""xyzzy"",3));"
50552,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestBinaryCompositeBinaryFunction.java,42,,"            Constant.of(""left""),"
50553,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestBinaryCompositeBinaryFunction.java,55,,"        assertEquals(""right"",f.evaluate(""left"",""right""));"
50554,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestBinaryOr.java,48,,"        assertTrue((new BinaryOr<Object, Object>(Constant.TRUE)).test(""xyzzy"", Integer.valueOf(3)));"
50555,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestBinarySequence.java,52,,"        seq.run(""xyzzy"",""xyzzy"");"
50556,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestCompositeBinaryFunction.java,43,,"            Constant.of(""left""),"
50557,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestCompositeBinaryFunction.java,56,,"        assertEquals(""right"",f.evaluate(""left"",""right""));"
50558,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalBinaryFunction.java,39,,"            Constant.of(""left""),"
50559,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalBinaryFunction.java,40,,"            Constant.of(""right""));"
50560,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalFunction.java,39,,"            Constant.of(""left""),"
50561,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalFunction.java,40,,"            Constant.of(""right""));"
50562,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalNullaryFunction.java,38,,"            Constant.of(""left""),"
50563,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestConditionalNullaryFunction.java,39,,"            Constant.of(""right""));"
50564,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestOr.java,46,,"        assertTrue((new Or<Object>(Constant.TRUE)).test(""xyzzy""));"
50565,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/core/composite/TestSequence.java,71,,"        seq.run(""xyzzy"");"
50566,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,85,,"        Object key = ""key"";"
50567,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,118,,"        map.put(""key-1"", ""value-1"");"
50568,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,119,,"        map.put(Integer.valueOf(2), ""value-2"");"
50569,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,210,,"        map.put(""key"", ""value 1"");"
50570,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,218,,"        map.put(""key"", ""value 2"");"
50571,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/FlexiMapExample.java,305,,"            throw new UnsupportedOperationException(""Left as an exercise for the reader."");"
50572,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/QuicksortExample.java,501,,"        list.add(""First"");"
50573,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/QuicksortExample.java,504,,"        list.add(""Second"");"
50574,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/kata/one/SupermarketPricingExample.java,143,,"            new Product(""Apple"", ""SKU-0003"", ToMoney.from(Composite.function(Multiply.by(40), BinaryFunctionFunction"
50575,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/kata/one/SupermarketPricingExample.java,143,,"            new Product(""Apple"", ""SKU-0003"", ToMoney.from(Composite.function(Multiply.by(40), BinaryFunctionFunction"
50576,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/map/TestFixedSizeMap.java,66,,"            fixedMap.put(""xyzzy"", ""xyzzy"");"
50577,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/map/TestFixedSizeMap.java,75,,"        map.put(Integer.valueOf(1), ""uno"");"
50578,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/example/map/TestPredicatedMap.java,61,,"        predicatedMap.put(""xyzzy"", Integer.valueOf(17));"
50579,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/generator/TestBaseGenerator.java,101,,"        assertEquals(""[0, 1, 2, 3, 4]"", col.toString());"
50580,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/generator/loop/TestLoopGenerator.java,160,,"        assertEquals(""[0, 1, 2, 3, 4]"", col.toString());"
50581,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,339,,"        assertTrue(""The range was expected to be empty."", empty1.isEmpty());"
50582,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,357,,"        assertFalse(""The range was not expected to be empty."","
50583,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,385,,"            assertTrue(""Expected element ["" + element +"
50584,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,386,,"                               ""] is missing in range ["" + range + ""]"","
50585,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,392,,"            assertFalse(""Unexpected element ["" + element +"
50586,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,393,,"                                ""] is present in range ["" + range + ""]"","
50587,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestCharacterRange.java,644,,"        assertFalse(""Invalid equals after changing attributes"","
50588,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,379,,"        assertTrue(""The range was expected to be empty."", empty1.isEmpty());"
50589,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,397,,"        assertFalse(""The range was not expected to be empty."","
50590,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,425,,"            assertTrue(""Expected element ["" + element +"
50591,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,426,,"                               ""] is missing in range ["" + range + ""]"","
50592,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,432,,"            assertFalse(""Unexpected element ["" + element +"
50593,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,433,,"                                ""] is present in range ["" + range + ""]"","
50594,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestDoubleRange.java,679,,"        assertFalse(""Invalid equals after changing attributes"","
50595,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,359,,"        assertTrue(""The range was expected to be empty."", empty1.isEmpty());"
50596,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,377,,"        assertFalse(""The range was not expected to be empty."","
50597,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,414,,"            assertTrue(""Expected element ["" + element +"
50598,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,415,,"                               ""] is missing in range ["" + range + ""]"","
50599,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,421,,"            assertFalse(""Unexpected element ["" + element +"
50600,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,422,,"                                ""] is present in range ["" + range + ""]"","
50601,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestFloatRange.java,668,,"        assertFalse(""Invalid equals after changing attributes"","
50602,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,357,,"        assertTrue(""The range was expected to be empty."", empty1.isEmpty());"
50603,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,375,,"        assertFalse(""The range was not expected to be empty."","
50604,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,403,,"            assertTrue(""Expected element ["" + element +"
50605,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,404,,"                               ""] is missing in range ["" + range + ""]"","
50606,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,410,,"            assertFalse(""Unexpected element ["" + element +"
50607,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,411,,"                                ""] is present in range ["" + range + ""]"","
50608,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestIntegerRange.java,656,,"        assertFalse(""Invalid equals after changing attributes"","
50609,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,350,,"        assertTrue(""The range was expected to be empty."", empty1.isEmpty());"
50610,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,368,,"        assertFalse(""The range was not expected to be empty."","
50611,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,405,,"            assertTrue(""Expected element ["" + element +"
50612,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,406,,"                               ""] is missing in range ["" + range + ""]"","
50613,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,412,,"            assertFalse(""Unexpected element ["" + element +"
50614,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,413,,"                                ""] is present in range ["" + range + ""]"","
50615,./TargetProjects/commons-functor/core/src/test/java/org/apache/commons/functor/range/TestLongRange.java,659,,"        assertFalse(""Invalid equals after changing attributes"","
50616,./TargetProjects/commons-geometry/commons-geometry-euclidean/src/test/java/org/apache/commons/geometry/euclidean/EuclideanTestUtils.java,147,,"        final String msg = ""Expected coordinates to equal "" + expected + "" but was "" + actual + "";"";"
50617,./TargetProjects/commons-geometry/commons-geometry-euclidean/src/test/java/org/apache/commons/geometry/euclidean/EuclideanTestUtils.java,251,,"            Assertions.assertEquals(loc, region.classify(pt), ""Unexpected region location for point "" + pt);"
50618,./TargetProjects/commons-geometry/commons-geometry-euclidean/src/test/java/org/apache/commons/geometry/euclidean/twod/LineTest.java,58,,"                IllegalArgumentException.class, ""Line direction cannot be zero"");"
50619,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/BoundaryIOManagerTest.java,46,,"    private static final GeometryFormat FMT_A = new StubGeometryFormat(""testA"", Arrays.asList(""a"", ""aext""));"
50620,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/BoundaryIOManagerTest.java,101,,"        final StubGeometryFormat nullExts = new StubGeometryFormat(""b"", Arrays.asList(""bext"", null, null));"
50621,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/BoundaryIOManagerTest.java,240,,"                ""Failed to find handler: no format specified and no file extension available"");"
50622,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/input/StreamGeometryInputTest.java,43,,"        final StreamGeometryInput in = new StreamGeometryInput(byteStream, ""test.txt"");"
50623,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/GeometryIOUtilsTest.java,44,,"        Assertions.assertEquals(""myfile"", GeometryIOUtils.getFileName(Paths.get(""myfile"")));"
50624,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/GeometryIOUtilsTest.java,45,,"        Assertions.assertEquals(""myfile.txt"", GeometryIOUtils.getFileName(Paths.get(""path/to/myfile.txt"")));"
50625,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,37,,"        final SimpleTextParser p = parser(""abc"");"
50626,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,186,,"        final SimpleTextParser p = parser(""abcdef\r\n\r ghi"");"
50627,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,238,,"        }, IllegalStateException.class, ""No token has been read from the character stream"");"
50628,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,438,,"        final SimpleTextParser p = parser(""abcdef"");"
50629,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,872,,"            p.match(""empty"");"
50630,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,1159,,"                p.unexpectedToken(""test"").getMessage());"
50631,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/internal/SimpleTextParserTest.java,1230,,"        final IOException exc = p.tokenError(""test message"");"
50632,./TargetProjects/commons-geometry/commons-geometry-io-core/src/test/java/org/apache/commons/geometry/io/core/output/StreamGeometryOutputTest.java,43,,"        final StreamGeometryOutput out = new StreamGeometryOutput(byteStream, ""test.txt"");"
50633,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/BoundaryIOManager3DTest.java,100,,"        final GeometryInput in = new FileGeometryInput(Paths.get(""myfile""));"
50634,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/BoundaryIOManager3DTest.java,116,,"        final GeometryInput in = new FileGeometryInput(Paths.get(""myfile.test""));"
50635,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryReadHandler3DTest.java,60,,"                ""v 0 0 0\n"" +"
50636,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryReadHandler3DTest.java,61,,"                ""v 1 1 0\n"" +"
50637,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryReadHandler3DTest.java,62,,"                ""v 0 1 0\n"" +"
50638,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryReadHandler3DTest.java,63,,"                ""f 1 2 3\n"", StandardCharsets.UTF_8);"
50639,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryWriteHandler3DTest.java,78,,"                ""v 0.0 0.0 0.0\n"" +"
50640,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryWriteHandler3DTest.java,81,,"                ""v 0.0 1.0 0.0\n"" +"
50641,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryWriteHandler3DTest.java,125,,"                ""v 0.0 0.0 0.0\r\n"" +"
50642,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjBoundaryWriteHandler3DTest.java,126,,"                ""v 0.3 0.0 0.0\r\n"" +"
50643,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,236,,"            ""v 0.0 0.0 0.0\n"" +"
50644,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,237,,"            ""v 1.0 0.0 0.0\n"" +"
50645,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,238,,"            ""v 1.0 1.0 0.0\n"" +"
50646,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,239,,"            ""v 0.0 1.0 0.0\n"" +"
50647,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,240,,"            ""f 1 2 3\n"" +"
50648,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,269,,"            ""vn 0.0 0.0 1.0\n"" +"
50649,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,270,,"            ""vn 0.0 0.0 -1.0\n"" +"
50650,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,271,,"            ""f 1//1 2//1 3//1\n"" +"
50651,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,377,,"            ""v 0.0 0.0 1.0\n"" +"
50652,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/ObjWriterTest.java,406,,"            ""v 0.0 1.5 0.0\n"" +"
50653,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,60,,"                ""v 0 1 0"","
50654,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,65,,"                ""f 1 2 3"","
50655,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,295,,"                ""# test content"","
50656,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,297,,"                ""v 0 0 0"","
50657,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,298,,"                ""v 1 0 0"","
50658,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,299,,"                ""v 1 1 0"","
50659,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/obj/PolygonObjParserTest.java,306,,"                ""vn 0 0 1"","
50660,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,81,,"                ""facet normal 1 2 3 "" +"
50661,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,82,,"                    ""outer loop "" +"
50662,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,83,,"                        ""vertex 4 5 6 "" +"
50663,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,84,,"                        ""vertex 7 8 9 "" +"
50664,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,85,,"                        ""vertex 10 11 12 "" +"
50665,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,86,,"                    ""endloop "" +"
50666,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlFacetDefinitionReaderTest.java,87,,"                ""endfacet "" +"
50667,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,112,,"                ""solid \n"" +"
50668,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,113,,"                ""endsolid \n"", out.toString());"
50669,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,191,,"            ""outer loop\n"" +"
50670,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,192,,"            ""vertex 0.0 4.0 0.0\n"" +"
50671,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,193,,"            ""vertex 0.3333333333333333 0.0 0.0\n"" +"
50672,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,194,,"            ""vertex 0.0 0.5 10.0\n"" +"
50673,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,195,,"            ""endloop\n"" +"
50674,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,196,,"            ""endfacet\n"" +"
50675,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,244,,"            ""vertex 0.0 0.0 0.0\n"" +"
50676,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,328,,"            ""facet 0.0 0.0 1.0\n"" +"
50677,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,331,,"            ""vertex 1.0 0.0 0.0\n"" +"
50678,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,332,,"            ""vertex 0.0 1.0 0.0\n"" +"
50679,./TargetProjects/commons-geometry/commons-geometry-io-euclidean/src/test/java/org/apache/commons/geometry/io/euclidean/threed/stl/TextStlWriterTest.java,373,,"            ""vertex 1.0 1.0 0.0\n"" +"
50680,./TargetProjects/commons-geometry/commons-geometry-spherical/src/test/java/org/apache/commons/geometry/spherical/SphericalTestUtils.java,40,,"        final String msg = ""Expected point to equal "" + expected + "" but was "" + actual + "";"";"
50681,./TargetProjects/commons-geometry/commons-geometry-spherical/src/test/java/org/apache/commons/geometry/spherical/twod/RegionBSPTree2STest.java,1029,,"                    "" but was "" + actual);"
50682,./TargetProjects/commons-graph/base/src/test/java/org/apache/commons/graph/contract/AcyclicContractTest.java,68,,"            fail(""No GraphException thrown when Self-Cycle introduced."");"
50683,./TargetProjects/commons-graph/base/src/test/java/org/apache/commons/graph/contract/AcyclicContractTest.java,154,,"            fail(""Contract allowed cycle to be introduced."");"
50684,./TargetProjects/commons-graph/base/src/test/java/org/apache/commons/graph/contract/AcyclicContractTest.java,300,,"            fail(""Contract prevented adding of valid edge. V2->V3"");"
50685,./TargetProjects/commons-graph/src/main/java/org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath.java,62,,"        source = checkNotNull( source, ""Impossible to add a shortest path from a null source"" );"
50686,./TargetProjects/commons-graph/src/main/java/org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath.java,63,,"        target = checkNotNull( target, ""Impossible to add a shortest path to a null target"" );"
50687,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/KruskalTestCase.java,134,,"        input.addEdge( a, new BaseLabeledWeightedEdge<Double>( ""a <-> b"", 7D ), b );"
50688,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/KruskalTestCase.java,137,,"        input.addEdge( b, new BaseLabeledWeightedEdge<Double>( ""b <-> c"", 8D ), c );"
50689,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/KruskalTestCase.java,254,,"        input.addEdge( c, new BaseLabeledWeightedEdge<Double>( ""c <-> d"", 1D ), d );"
50690,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java,131,,"        input.addEdge( a, new BaseLabeledWeightedEdge<Double>( ""a <-> b"", 7D ), b );"
50691,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/PrimTestCase.java,138,,"        input.addEdge( c, new BaseLabeledWeightedEdge<Double>( ""c <-> e"", 1D ), e );"
50692,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/ReverseDeleteTestCase.java,92,,"        input.addEdge( a, new BaseLabeledWeightedEdge<Double>( ""a <-> b"", 7D ), b );"
50693,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/ReverseDeleteTestCase.java,94,,"        input.addEdge( c, new BaseLabeledWeightedEdge<Double>( ""c <-> a"", 4D ), a );"
50694,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/spanning/ReverseDeleteTestCase.java,176,,"        input.addEdge( d, new BaseLabeledWeightedEdge<Double>( ""d <-> e"", 4D ), e );"
50695,./TargetProjects/commons-graph/src/test/java/org/apache/commons/graph/utils/GraphUtils.java,63,,"                        g.addEdge( v1, new BaseLabeledEdge( format( ""%s -> %s"", v1, v2 ) ), v2 );"
50696,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/common/BasicCParser.java,314,,"            throw new ImageReadException(""Parsing XPM file failed, """
50697,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/common/itu_t4/T4AndT6Compression.java,160,,"                    throw new ImageReadException(""Unrecoverable row length error in image row "" + y);"
50698,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/common/itu_t4/T4AndT6Compression.java,231,,"                    throw new ImageReadException(""Decompression error"", huffmanException);"
50699,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java,99,,"        final byte identifier1 = readByte(""Identifier1"", is, ""Not a Valid BMP File"");"
50700,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java,254,,"            final int a = 0xff & readByte(""RLE a"", is, ""BMP: Bad RLE"");"
50701,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java,501,,"            throw new ImageReadException(""Unknown parameter: "" + firstKey);"
50702,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java,89,,"            data = read3Bytes(""Pixel"", is, ""BMP Image Data"", ByteOrder.LITTLE_ENDIAN);"
50703,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserBitFields.java,89,,"            data = read3Bytes(""Pixel"", is, ""BMP Image Data"", ByteOrder.LITTLE_ENDIAN);"
50704,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/bmp/PixelParserRle.java,100,,"            final int a = 0xff & BinaryFunctions.readByte(""RLE ("" + x + "","" + y + "") a"", is, ""BMP: Bad RLE"");"
50705,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java,123,,"        final byte identifier1 = readByte(""identifier1"", is, ""Not a Valid GIF File"");"
50706,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java,202,,"        readByte(""block_size"", is, ""GIF: corrupt GraphicControlExt"");"
50707,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java,491,,"            throw new ImageReadException(""GIF: Couldn't read Header"");"
50708,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/ico/IcoImageParser.java,135,,"        final int reserved = read2Bytes(""Reserved"", is, ""Not a Valid ICO File"", getByteOrder());"
50709,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java,159,,"            Debug.debug(""tagMarker: "" + tagMarker + "" (0x"" + Integer.toHexString(tagMarker) + "")"");"
50710,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/JfifSegment.java,64,,"                ""Not a Valid JPEG File"");"
50711,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SofnSegment.java,68,,"        precision = readByte(""Data_precision"", is, ""Not a Valid JPEG File"");"
50712,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/jpeg/segments/SosSegment.java,65,,"                ""Not a Valid JPEG File"");"
50713,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java,157,,"            final int length = read4Bytes(""Length"", is, ""Not a Valid PNG File"", getByteOrder());"
50714,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java,271,,"            throw new ImageReadException(""PNG contains more than one Header"");"
50715,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/png/chunks/PngChunkIhdr.java,42,,"        width = read4Bytes(""Width"", is, ""Not a Valid Png File: IHDR Corrupt"", getByteOrder());"
50716,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/psd/PsdImageParser.java,105,,"        readAndVerifyBytes(is, new byte[] { 56, 66, 80, 83 }, ""Not a Valid PSD File"");"
50717,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java,287,,"            throw new ImageReadException(""Field \"""" + tag.name"
50718,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java,306,,"            throw new ImageReadException(""Required field \"""" + tag.name"
50719,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java,307,,"                    + ""\"" is missing"");"
50720,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java,311,,"                    + ""\"" has incorrect type "" + field.getFieldType().getName());"
50721,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffDirectory.java,314,,"            throw new ImageReadException(""Field \"""" + tag.name + ""\"" has wrong count "" + field.getCount());"
50722,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffField.java,198,,"                    result.append(""... ("").append(objects.length).append("")"");"
50723,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/TiffReader.java,74,,"        final int byteOrder1 = readByte(""BYTE_ORDER_1"", is, ""Not a Valid TIFF File"");"
50724,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputDirectory.java,93,,"            throw new ImageWriteException(""Tag expects "" + tagInfo.length"
50725,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputDirectory.java,94,,"                    + "" value(s), not 1"");"
50726,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputDirectory.java,106,,"                    + "" value(s), not "" + values.length);"
50727,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java,265,,"                    throw new ImageReadException(""Parsing XBM file failed, """
50728,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java,254,,"                throw new ImageReadException(""Parsing XPM file failed, """
50729,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java,120,,"            final int profileSize = read4Bytes(""ProfileSize"", is, ""Not a Valid ICC Profile"", getByteOrder());"
50730,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccProfileParser.java,178,,"            final int deviceModel = read4Bytes(""DeviceModel"", is, ""Not a Valid ICC Profile"", getByteOrder());"
50731,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java,37,,"                read4Bytes(""type_signature"", bis, ""ICC: corrupt tag data"", ByteOrder.BIG_ENDIAN);"
50732,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagDataTypes.java,37,,"                read4Bytes(""type_signature"", bis, ""ICC: corrupt tag data"", ByteOrder.BIG_ENDIAN);"
50733,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagTypes.java,46,,"            ""blueMatrixColumnTag"", ""XYZType"", 0x6258595A"
50734,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagTypes.java,51,,"            ""curveType or parametricCurveType"", 0x62545243"
50735,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagTypes.java,57,,"            ""lut8Type or lut16Type or lutBtoAType"", 0x42324130"
50736,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/icc/IccTagTypes.java,149,,"            ""copyrightTag"", ""multiLocalizedUnicodeType"", 0x63707274"
50737,./TargetProjects/commons-imaging/src/main/java/org/apache/commons/imaging/internal/Debug.java,176,,"            debug(message, ""null"");"
50738,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/TestImageReadException.java,32,,"		final ImageReadException exception = new ImageReadException(""imaging"");"
50739,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/TestImageWriteException.java,53,,"		final ImageWriteException exception = new ImageWriteException(""imaging"");"
50740,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/examples/MetadataExample.java,87,,"                    System.out.println(""    "" + ""GPS Description: """
50741,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/gif/GifReadTest.java,58,,"    @MethodSource(""data"")"
50742,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/ico/IcoRoundtripTest.java,355,,"            writeAndReadImageData(""16x16x"" + bitDepth, baos.toByteArray(),"
50743,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriteTest.java,67,,"            Debug.debug(""imageFile"", imageFile);"
50744,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriteTest.java,87,,"                final File tempFile = File.createTempFile(""test"", "".jpg"");"
50745,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriteTest.java,88,,"                Debug.debug(""tempFile"", tempFile);"
50746,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriteTest.java,91,,"                Debug.debug(""Output Segments:"");"
50747,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcUpdateTest.java,55,,"    @MethodSource(""data"")"
50748,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/tiff/TiffLzwTest.java,124,,"                        Debug.debug(""clearCode: "" + index + ""/"" + codes.size());"
50749,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/tiff/TiffLzwTest.java,128,,"                        Debug.debug(""eoiCode: "" + index + ""/"" + codes.size());"
50750,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/formats/tiff/TiffLzwTest.java,135,,"                    Debug.debug(""code: "" + code + "" (0x"""
50751,./TargetProjects/commons-imaging/src/test/java/org/apache/commons/imaging/roundtrip/ImageAsserts.java,58,,"                    Debug.debug(""a_argb: "" + a_argb + "" (0x"" + Integer.toHexString(a_argb) + "")"");"
50752,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/DirectoryWalker.java,443,,"    @SuppressWarnings(""unused"") // Possibly thrown from subclasses."
50753,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,325,,"                ""for path '"" + normPath + ""'"");"
50754,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileSystemUtils.java,413,,"                    ""Command line '"" + DF + ""' did not return info as expected "" +"
50755,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,285,,"        requireExistsChecked(file, ""file"");"
50756,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,1187,,"        Objects.requireNonNull(directory, ""directory"");"
50757,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/FileUtils.java,1303,,"        requireDirectoryIfExists(destDir, ""destDir"");"
50758,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/IOUtils.java,199,,"    @SuppressWarnings(""resource"") // parameter null check"
50759,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/IOUtils.java,1826,,"            throw new EOFException(""Length to read: "" + length + "" actual: "" + actual);"
50760,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/filefilter/OrFileFilter.java,78,,"        this(Objects.requireNonNull(fileFilters, ""fileFilters"").length);"
50761,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/function/IOFunction.java,62,,"        Objects.requireNonNull(before, ""before"");"
50762,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/function/IOFunction.java,138,,"        Objects.requireNonNull(after, ""after"");"
50763,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/ObservableInputStream.java,55,,"        @SuppressWarnings(""unused"") // Possibly thrown from subclasses."
50764,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/input/XmlStreamReader.java,357,,"    @SuppressWarnings(""resource"") // InputStream is managed through a InputStreamReader in this instance."
50765,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/FilterCollectionWriter.java,223,,"            throw new IOExceptionList(""write"", causeList);"
50766,./TargetProjects/commons-io/src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java,129,,"    @SuppressWarnings(""resource"") // the underlying stream is managed by a subclass."
50767,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/ByteOrderMarkTestCase.java,81,,"        assertArrayEquals(TEST_BOM_1.getBytes(), new byte[]{(byte) 1}, ""test1 bytes"");"
50768,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/CopyUtilsTest.java,74,,"        assertEquals(inData.length, baout.size(), ""Sizes differ"");"
50769,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/CopyUtilsTest.java,75,,"        assertArrayEquals(inData, baout.toByteArray(), ""Content differs"");"
50770,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/CopyUtilsTest.java,100,,"    @SuppressWarnings(""resource"") // 'in' is deliberately not closed"
50771,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java,79,,"        assertEquals(1 + dirs.length + ioFiles.length + outputFiles.length, results.size(), ""Result Size"");"
50772,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java,287,,"            fail(""CancelException not thrown for '"" + cancelName + ""'"");"
50773,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java,290,,"            assertEquals(5, cancel.getDepth(), ""Depth: "" + cancelName);"
50774,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java,292,,"            fail(""IOException: "" + cancelName + "" "" + ex);"
50775,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java,80,,"        assertEquals(1 + dirs.length + ioFiles.length + outputFiles.length, results.size(), ""Result Size"");"
50776,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java,283,,"            fail(""CancelException not thrown for '"" + cancelName + ""'"");"
50777,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java,286,,"            assertEquals(5, cancel.getDepth(), ""Depth: "" + cancelName);"
50778,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,168,,"                "" Volume in drive C is HDD\n"" +"
50779,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,169,,"                        "" Volume Serial Number is XXXX-YYYY\n"" +"
50780,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,171,,"                        "" Directory of C:\\Documents and Settings\\Xxxx\n"" +"
50781,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,173,,"                        ""19/08/2005  22:43    <DIR>          .\n"" +"
50782,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,174,,"                        ""19/08/2005  22:43    <DIR>          ..\n"" +"
50783,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,175,,"                        ""11/08/2005  01:07                81 build.properties\n"" +"
50784,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,176,,"                        ""17/08/2005  21:44    <DIR>          Desktop\n"" +"
50785,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,233,,"                        ""               7 File(s)         180260 bytes\n"" +"
50786,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,234,,"                        ""              10 Dir(s)     41411551232 bytes free"";"
50787,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,333,,"                ""Filesystem           1K-blocks      Used Available Use% Mounted on\n"" +"
50788,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java,419,,"        assertEquals(1472504L, fsu.freeSpaceUnix(""/home/users/s"", false, false, NEG_1_TIMEOUT));"
50789,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java,41,,"        if (System.getProperty(""os.name"").startsWith(""Win"")) {"
50790,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java,41,,"        if (System.getProperty(""os.name"").startsWith(""Win"")) {"
50791,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java,56,,"        final File randomFile = new File(top, ""randomfile"");"
50792,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java,59,,"        final File symlinkFile = new File(realInner, ""fakeinner"");"
50793,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java,90,,"        final File randomDirectory = new File(top, ""randomDir"");"
50794,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,45,,"        final File realInner = new File(realOuter, ""realinner"");"
50795,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,48,,"        FileUtils.touch(new File(realInner, ""file1""));"
50796,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,51,,"        final File randomDirectory = new File(top, ""randomDir"");"
50797,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,54,,"        FileUtils.touch(new File(randomDirectory, ""randomfile""));"
50798,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,57,,"        final File symlinkDirectory = new File(realOuter, ""fakeinner"");"
50799,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java,67,,"        assertEquals(1, randomDirectory.list().length, ""Contents of sym link should not have been removed"");"
50800,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java,116,,"        final File dir = new File(""DOESNOTEXIST"");"
50801,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,47,,"        File file = new File(dir, ""dummy-build.xml"");"
50802,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,49,,"        file = new File(dir, ""README"");"
50803,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,61,,"        file = new File(dir, ""dummy-file.txt"");"
50804,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,63,,"        file = new File(dir, ""dummy-index.html"");"
50805,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,69,,"        file = new File(dir, ""Entries"");"
50806,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,152,,"        assertTrue(filenames.contains(""dummy-build.xml""), ""'dummy-build.xml' is missing"");"
50807,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java,154,,"        assertFalse(filenames.contains(""Entries""), ""'Entries' shouldn't be found"");"
50808,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,203,,"        final File file1 = new File(grandParentDir, ""file1.txt"");"
50809,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,204,,"        final File file2 = new File(parentDir, ""file2.txt"");"
50810,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,212,,"        FileUtils.writeStringToFile(file1, ""File 1 in grandparent"", ""UTF8"");"
50811,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,250,,"        final File file = new File(""test.txt"");"
50812,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,285,,"            throw new IOException(""Cannot create file "" + testFile1"
50813,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,286,,"                    + "" as the parent directory does not exist"");"
50814,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,331,,"        final File directory = new File(temporaryFolder, ""subdir"");"
50815,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,386,,"                ""abcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyzabcdevwxyz"" +"
50816,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,415,,"        assertEquals(""1 KB"", FileUtils.byteCountToDisplaySize(KB1));"
50817,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,418,,"        assertEquals(""1 MB"", FileUtils.byteCountToDisplaySize(MB1));"
50818,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,421,,"        assertEquals(""1 GB"", FileUtils.byteCountToDisplaySize(GB1));"
50819,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,464,,"        final String text = ""Imagination is more important than knowledge - Einstein"";"
50820,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,465,,"        final File file = new File(temporaryFolder, ""checksum-test.txt"");"
50821,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,466,,"        FileUtils.writeStringToFile(file, text, ""US-ASCII"");"
50822,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,594,,"                getClass().getResource(""/java/lang/Object.class""),"
50823,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,728,,"        final File parentDir = new File(grandParentDir, ""parent"");"
50824,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,729,,"        final File childDir = new File(parentDir, ""child"");"
50825,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,752,,"        FileUtils.writeStringToFile(sourceFile, ""HELLO WORLD"", ""UTF8"");"
50826,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,814,,"        assertTrue(expectedSize > 0, ""Size > 0"");"
50827,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,848,,"        final File destDir = new File(System.getProperty(""java.io.tmpdir""), ""tmp-FileUtilsTestCase"");"
50828,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1002,,"        assertTrue(destination.exists(), ""Check Exist"");"
50829,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1003,,"        assertEquals(testFile1Size, destination.length(), ""Check Full copy"");"
50830,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1004,,"        assertEquals(getLastModifiedMillis(testFile1), getLastModifiedMillis(destination), ""Check last modified date preserved"");"
50831,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1138,,"        assertTrue(outputDirDestination.exists(), ""Check Exists"");"
50832,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1143,,"        assertEquals(testFile1Size, destFile1.length(), ""Check Full Copy"");"
50833,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1255,,"        assertEquals(""foo"", FileUtils.decodeUrl(""foo""));"
50834,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1265,,"        assertEquals(""\u00E4\u00F6\u00FC\u00DF"", FileUtils.decodeUrl(""%C3%A4%C3%B6%C3%BC%C3%9F""));"
50835,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1319,,"        assertFalse(testDirectory.exists(), ""Check No Exist"");"
50836,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1380,,"        FileUtils.writeStringToFile(file2, filename, ""UTF-8"");"
50837,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1494,,"        final File expected_A = new File(""src"");"
50838,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1495,,"        final File expected_B = new File(expected_A, ""main"");"
50839,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1496,,"        final File expected_C = new File(expected_B, ""java"");"
50840,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1817,,"                Arrays.asList(""a.txt"", ""b.txt"", ""c.txt"", ""d.txt"", ""e.txt"", ""f.txt""));"
50841,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1833,,"            final WildcardFileFilter allFilesFileFilter = new WildcardFileFilter(""*.*"");"
50842,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,1874,,"        final File subDir2 = new File(subDir1, ""subdir2"");"
50843,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2037,,"        assertFalse(src.exists(), ""Original deleted"");"
50844,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2476,,"        final byte[] text = ""Hello /u1234"".getBytes();"
50845,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2498,,"        final File file = TestUtils.newFile(temporaryFolder, ""lines.txt"");"
50846,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2500,,"            final String[] data = {""hello"", ""/u1234"", """", ""this is"", ""some text""};"
50847,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2500,,"            final String[] data = {""hello"", ""/u1234"", """", ""this is"", ""some text""};"
50848,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2500,,"            final String[] data = {""hello"", ""/u1234"", """", ""this is"", ""some text""};"
50849,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2517,,"            fail(""Exception expected."");"
50850,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2540,,"        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(temporaryFolder), ""Unexpected directory size"");"
50851,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2667,,"        final URL url = new URL(""file"", null, ""a/b/c/file.txt"");"
50852,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2709,,"        assertTrue(files[0].toString().contains(""file1.txt""), ""File: "" + files[0]);"
50853,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2820,,"        FileUtils.writeStringToFile(file, ""This line was there before you..."");"
50854,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2822,,"        FileUtils.write(file, ""this is brand new data"", false);"
50855,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2913,,"        final File file = new File(temporaryFolder, ""write.txt"");"
50856,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2930,,"                ""hello"", new StringBuffer(""world""), """", ""this is"", null, ""some text""};"
50857,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2948,,"        final List<String> linesToAppend = Arrays.asList(""my first line"", ""The second Line"");"
50858,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FileUtilsTestCase.java,2948,,"        final List<String> linesToAppend = Arrays.asList(""my first line"", ""The second Line"");"
50859,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,67,,"            throw new IOException(""Cannot create file "" + testFile1"
50860,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,68,,"                    + "" as the parent directory does not exist"");"
50861,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,104,,"        assertNull(FilenameUtils.normalize(""1:\\a\\b\\c.txt""));"
50862,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,106,,"        assertNull(FilenameUtils.normalize(""1:a""));"
50863,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,107,,"        assertNull(FilenameUtils.normalize(""\\\\\\a\\b\\c.txt""));"
50864,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,108,,"        assertNull(FilenameUtils.normalize(""\\\\a""));"
50865,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,110,,"        assertEquals(""a"" + SEP + ""b"" + SEP + ""c.txt"", FilenameUtils.normalize(""a\\b/c.txt""));"
50866,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,113,,"        assertEquals("""" + SEP + """" + SEP + ""server"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c.txt"", FilenameUtils.normalize(""\\\\server\\a\\b/c.txt""));"
50867,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,115,,"        assertEquals(""~user"" + SEP + ""a"" + SEP + ""b"" + SEP + ""c.txt"", FilenameUtils.normalize(""~user\\a\\b/c.txt""));"
50868,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,192,,"        assertEquals(""~user"" + SEP, FilenameUtils.normalize(""~user/""));"
50869,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,211,,"        assertEquals(""C:"" + SEP + """", FilenameUtils.normalize(""C:/""));"
50870,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,213,,"        assertEquals(""C:"" + ""a"", FilenameUtils.normalize(""C:a""));"
50871,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,247,,"        assertEquals(SEP + SEP + ""server"" + SEP + """", FilenameUtils.normalize(""//server/""));"
50872,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,299,,"        assertEquals(""/a/c/"", FilenameUtils.normalize(""/a/b/../c/"", true));"
50873,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,300,,"        assertEquals(""/a/c/"", FilenameUtils.normalize(""\\a\\b\\..\\c\\"", true));"
50874,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,485,,"        assertEquals(""a"" + SEP + ""b"" + SEP + ""f"" + SEP, FilenameUtils.concat(""a/b/"", ""f/""));"
50875,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,486,,"        assertEquals(""a"" + SEP + ""b"" + SEP + ""f"", FilenameUtils.concat(""a/b"", ""f""));"
50876,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,512,,"        assertEquals(""/a/b/c"", FilenameUtils.separatorsToUnix(""/a/b/c""));"
50877,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,513,,"        assertEquals(""/a/b/c.txt"", FilenameUtils.separatorsToUnix(""/a/b/c.txt""));"
50878,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,515,,"        assertEquals(""/a/b/c"", FilenameUtils.separatorsToUnix(""\\a\\b\\c""));"
50879,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,516,,"        assertEquals(""D:/a/b/c"", FilenameUtils.separatorsToUnix(""D:\\a\\b\\c""));"
50880,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,516,,"        assertEquals(""D:/a/b/c"", FilenameUtils.separatorsToUnix(""D:\\a\\b\\c""));"
50881,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,523,,"        assertEquals(""\\a\\b\\c.txt"", FilenameUtils.separatorsToWindows(""\\a\\b\\c.txt""));"
50882,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,568,,"        assertEquals(3, FilenameUtils.getPrefixLength(""C:\\""));"
50883,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,575,,"        assertEquals(0, FilenameUtils.getPrefixLength(""a\\b\\c.txt""));"
50884,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,581,,"        assertEquals(0, FilenameUtils.getPrefixLength(""a/b/c.txt""));"
50885,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,583,,"        assertEquals(3, FilenameUtils.getPrefixLength(""C:/a/b/c.txt""));"
50886,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,584,,"        assertEquals(9, FilenameUtils.getPrefixLength(""//server/a/b/c.txt""));"
50887,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,585,,"        assertEquals(2, FilenameUtils.getPrefixLength(""~/a/b/c.txt""));"
50888,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,586,,"        assertEquals(6, FilenameUtils.getPrefixLength(""~user/a/b/c.txt""));"
50889,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,595,,"        assertEquals(-1, FilenameUtils.getPrefixLength(""///a/b/c.txt""));"
50890,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,614,,"        assertEquals(-1, FilenameUtils.indexOfLastSeparator(""noseperator.inthispath""));"
50891,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,615,,"        assertEquals(3, FilenameUtils.indexOfLastSeparator(""a/b/c""));"
50892,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,616,,"        assertEquals(3, FilenameUtils.indexOfLastSeparator(""a\\b\\c""));"
50893,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,622,,"        assertEquals(-1, FilenameUtils.indexOfExtension(""file""));"
50894,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,623,,"        assertEquals(4, FilenameUtils.indexOfExtension(""file.txt""));"
50895,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,633,,"        		FilenameUtils.indexOfExtension(""foo.exe:bar.txt"");"
50896,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,707,,"        assertEquals(""a/b/c/"", FilenameUtils.getPath(""a/b/c/""));"
50897,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,711,,"        assertNull(FilenameUtils.getPath(""1:/a/b/c.txt""));"
50898,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,715,,"        assertNull(FilenameUtils.getPath(""//a""));"
50899,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,729,,"        assertEquals(""a/b/"", FilenameUtils.getPath(""C:a/b/c.txt""));"
50900,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,937,,"        assertEquals("""", FilenameUtils.getExtension(""a.b/c""));"
50901,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,938,,"        assertEquals(""txt"", FilenameUtils.getExtension(""a.b/c.txt""));"
50902,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,940,,"        assertEquals("""", FilenameUtils.getExtension(""a.b\\c""));"
50903,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,984,,"        assertFalse(FilenameUtils.equals(""file.txt"", ""FILE.TXT""));"
50904,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,985,,"        assertFalse(FilenameUtils.equals(""a\\b\\file.txt"", ""a/b/file.txt""));"
50905,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,985,,"        assertFalse(FilenameUtils.equals(""a\\b\\file.txt"", ""a/b/file.txt""));"
50906,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,1028,,"        assertFalse(FilenameUtils.equalsNormalizedOnSystem(""//file.txt"", ""file.txt""));"
50907,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,1049,,"        assertFalse(FilenameUtils.isExtension(""file.txt"", ""rtf""));"
50908,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,1056,,"        assertFalse(FilenameUtils.isExtension(""a.b/file.txt"", (String) null));"
50909,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,1066,,"        assertFalse(FilenameUtils.isExtension(""a.b\\file.txt"", (String) null));"
50910,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java,1071,,"        assertFalse(FilenameUtils.isExtension(""a.b\\file.txt"", ""TXT""));"
50911,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,38,,"        assertFalse(FilenameUtils.wildcardMatch(null, ""Foo""));"
50912,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,45,,"        assertTrue(FilenameUtils.wildcardMatch(""Foo"", ""Fo*""));"
50913,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,51,,"        assertTrue(FilenameUtils.wildcardMatch(""Adobe Acrobat Installer"", ""Ad*er""));"
50914,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,52,,"        assertTrue(FilenameUtils.wildcardMatch(""Foo"", ""*Foo""));"
50915,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,54,,"        assertTrue(FilenameUtils.wildcardMatch(""Foo"", ""Foo*""));"
50916,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,56,,"        assertFalse(FilenameUtils.wildcardMatch(""FOO"", ""*Foo""));"
50917,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,57,,"        assertFalse(FilenameUtils.wildcardMatch(""BARFOO"", ""*Foo""));"
50918,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,59,,"        assertFalse(FilenameUtils.wildcardMatch(""FOOBAR"", ""Foo*""));"
50919,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,142,,"        assertMatch(""log.txt"", ""log.txt"", true);"
50920,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java,168,,"        assertMatch(""log.log"", ""log**log"", true);"
50921,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/HexDumpTest.java,81,,"        assertEquals(outputArray.length, actualOutput.length, ""array size mismatch"");"
50922,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/HexDumpTest.java,83,,"            assertEquals(outputArray[j], actualOutput[j], ""array[ "" + j + ""] mismatch"");"
50923,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/HexDumpTest.java,83,,"            assertEquals(outputArray[j], actualOutput[j], ""array[ "" + j + ""] mismatch"");"
50924,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOCaseTestCase.java,85,,"        assertTrue(IOCase.SENSITIVE.checkCompareTo(""ABC"", """") > 0);"
50925,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOCaseTestCase.java,87,,"        assertTrue(IOCase.SENSITIVE.checkCompareTo(""ABC"", ""DEF"") < 0);"
50926,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOCaseTestCase.java,109,,"        assertTrue(IOCase.SENSITIVE.checkCompareTo(""ABC"", ""abc"") < 0);"
50927,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOCaseTestCase.java,130,,"        assertFalse(IOCase.SENSITIVE.checkEquals(""ABC"", ""ABCD""));"
50928,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOCaseTestCase.java,222,,"        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf(""ABCDEFGHIJ"", 0, ""A""));"
50929,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java,66,,"    @SuppressWarnings(""resource"") // 'in' is deliberately not closed"
50930,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java,77,,"        assertEquals(0, in.available(), ""Not all bytes were read"");"
50931,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java,78,,"        assertEquals(inData.length, baout.size(), ""Sizes differ"");"
50932,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java,79,,"        assertArrayEquals(inData, baout.toByteArray(), ""Content differs"");"
50933,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java,149,,"    @SuppressWarnings({ ""resource"", ""deprecation"" }) // 'in' is deliberately not closed"
50934,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,183,,"            fail(""Expected NullPointerException"");"
50935,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,401,,"    @SuppressWarnings(""squid:S2699"") // Suppress ""Add at least one assertion to this test case"""
50936,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,521,,"        final byte[] dataAbc = ""ABC"".getBytes(StandardCharsets.UTF_8);"
50937,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,962,,"            fail(""Should have failed with IllegalArgumentException"");"
50938,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,1074,,"            final List<String> lines = IOUtils.readLines(in, ""UTF-8"");"
50939,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,1120,,"        final long fileSize = TestResources.getFile(""FileUtilsTestDataCR.dat"").length();"
50940,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,1121,,"        final byte[] bytes = IOUtils.resourceToByteArray(""/org/apache/commons/io/FileUtilsTestDataCR.dat"");"
50941,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,1416,,"            assertEquals(0, fin.available(), ""Not all bytes were read"");"
50942,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsTestCase.java,1417,,"            assertEquals(FILE_SIZE, out.length, ""Wrong output size"");"
50943,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,56,,"        assertEquals(inData.length, baout.size(), ""Sizes differ"");"
50944,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,57,,"        assertArrayEquals(inData, baout.toByteArray(), ""Content differs"");"
50945,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,84,,"        @SuppressWarnings(""resource"") // deliberately not closed"
50946,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,569,,"                ""hello"", new StringBuffer(""world""), """", ""this is"", null, ""some text""};"
50947,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,569,,"                ""hello"", new StringBuffer(""world""), """", ""this is"", null, ""some text""};"
50948,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,569,,"                ""hello"", new StringBuffer(""world""), """", ""this is"", null, ""some text""};"
50949,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/IOUtilsWriteTestCase.java,569,,"                ""hello"", new StringBuffer(""world""), """", ""this is"", null, ""some text""};"
50950,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/LineIteratorTestCase.java,146,,"            LineIterator iterator = FileUtils.lineIterator(testFile, ""UTF-8"")"
50951,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/LineIteratorTestCase.java,191,,"        final File testFile = new File(temporaryFolder, ""LineIterator-nextOnly.txt"");"
50952,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/LineIteratorTestCase.java,333,,"            assertEquals(idx, lines.size(), ""Line Count doesn't match"");"
50953,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/LineIteratorTestCase.java,338,,"                fail(""Expected NoSuchElementException"");"
50954,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,64,,"        assertEquals(0, comparator.compare(equalFile1, equalFile2), ""equal"");"
50955,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,65,,"        assertTrue(comparator.compare(lessFile, moreFile) < 0, ""less"");"
50956,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java,66,,"        assertTrue(comparator.compare(moreFile, lessFile) > 0, ""more"");"
50957,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java,49,,"            throw new IOException(""Cannot create file "" + lessFile"
50958,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java,50,,"                    + "" as the parent directory does not exist"");"
50959,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/AccumulatorPathVisitorTest.java,61,,"    @MethodSource(""testParameters"")"
50960,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/CleaningPathVisitorTest.java,66,,"    @MethodSource(""cleaningPathVisitors"")"
50961,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/CopyDirectoryVisitorTest.java,55,,"    @MethodSource(""pathCounters"")"
50962,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/CountersTest.java,38,,"    @MethodSource(""pathCounters"")"
50963,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/CountingPathVisitorTest.java,39,,"    @MethodSource(""countingPathVisitors"")"
50964,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/DeletingPathVisitorTest.java,63,,"    @MethodSource(""deletingPathVisitors"")"
50965,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java,126,,"            final Path dir1 = Paths.get(""src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1"");"
50966,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/PathUtilsTest.java,105,,"                assertTrue(Files.exists(targetDir.resolve(""dirs-a-file-size-1"")));"
50967,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/file/PathUtilsVisitorTest.java,55,,"    @MethodSource(""testParameters"")"
50968,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,75,,"            ""Filter(File) "" + filter.getClass().getName() + "" not "" + expected + "" for "" + file);"
50969,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,75,,"            ""Filter(File) "" + filter.getClass().getName() + "" not "" + expected + "" for "" + file);"
50970,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,106,,"        assertFiltering(filter, new File(""foo""), true);"
50971,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,108,,"        assertFiltering(filter, new File(""bar""), true);"
50972,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,109,,"        assertFiltering(filter, new File(""fred""), false);"
50973,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,118,,"        assertFiltering(filter, new File(""FOO""), false);"
50974,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,119,,"        assertFiltering(filter, new File(""BAR""), false);"
50975,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,170,,"        assertFiltering(filter, new File(""barfoo""), false);"
50976,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,171,,"        assertFiltering(filter, new File(""foobar""), false);"
50977,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,206,,"            fail(""Cannot create file "" + oldFile + "" as the parent directory does not exist"");"
50978,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,206,,"            fail(""Cannot create file "" + oldFile + "" as the parent directory does not exist"");"
50979,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,296,,"        assertFiltering(trueFilter.and(trueFilter), new File(""foo.test""), true);"
50980,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,312,,"        assertFiltering(new AndFileFilter(filters), new File(""test""), false);"
50981,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,430,,"        IOFileFilter filter = new WildcardFilter(""*.txt"");"
50982,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,440,,"        assertFiltering(filter, new File(""log.txt""), true);"
50983,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,462,,"        filter = new WildcardFilter(""*.java"", ""*.class"");"
50984,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,462,,"        filter = new WildcardFilter(""*.java"", ""*.class"");"
50985,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,463,,"        assertFiltering(filter, new File(""Test.java""), true);"
50986,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,464,,"        assertFiltering(filter, new File(""Test.class""), true);"
50987,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,465,,"        assertFiltering(filter, new File(""Test.jsp""), false);"
50988,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,471,,"        assertFiltering(listFilter, new File(""Test.txt""), true);"
50989,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,472,,"        assertFiltering(listFilter, new File(""Test.xml""), true);"
50990,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,473,,"        assertFiltering(listFilter, new File(""Test.gif""), true);"
50991,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,474,,"        assertFiltering(listFilter, new File(""Test.bmp""), false);"
50992,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,524,,"        assertFiltering(filter, new File(""src/""), true);"
50993,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,529,,"        assertFiltering(filter, new File(""pom.xml""), false);"
50994,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,532,,"        assertFiltering(filter, new File(""imaginary""), false);"
50995,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,534,,"        assertFiltering(filter, new File(""imaginary/""), false);"
50996,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,537,,"        assertFiltering(filter, new File(""LICENSE.txt""), false);"
50997,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,1099,,"        final IOFileFilter filter2 = FileFilterUtils.makeCVSAware(FileFilterUtils.nameFileFilter(""test-file1.txt""));"
50998,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,1398,,"        filter = new PrefixFileFilter(""tes"");"
50999,./TargetProjects/commons-io/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java,1599,,"        IOFileFilter filter = new SuffixFileFilter(""tes"", ""est"");"
