Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"private static final Map<Class<?>, Class<?>> primitiveToWrapper = new HashMap<Class<?>, Class<?>>();","private static final Map<Class<?>,Class<?>> primitiveToWrapper=new HashMap<Class<?>,Class<?>>();
",0,18329,14,40512,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
2,"private static boolean enableJMS = UtilProperties.getPropertyAsBoolean(""service"", ""enableJMS"", true);","private static boolean enableJMS=UtilProperties.getPropertyAsBoolean(""service"",""enableJMS"",true);
",0,13783,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
3,"private static final double[] testRadians = { -0.000000001, -0.25,","private static final double[] testRadians={-0.000000001,-0.25,0.000000001,0.25,0.5,0.0,1.0,2.0,java.lang.StrictMath.PI,java.lang.StrictMath.PI};
",0,1280,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
4,"private Map<W, Set<Windmill.GlobalDataRequest>> blockedMap = null;","private Map<W,Set<Windmill.GlobalDataRequest>> blockedMap=null;
",0,1150,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
5,protected final boolean[] wasNull = {false};,"/** 
 * Slot into which each accessor should write whether the value returned was null.
 */
protected final boolean[] wasNull={false};
",0,1,6,,"Modifier(),
Modifier(),
PrimitiveType(ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
BooleanLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, ),
"
6,"private final _Lazy<Map<Class<? extends Facet>, Facet>> snapshot = _Lazy.threadSafe(this::snapshot);","private final _Lazy<Map<Class<? extends Facet>,Facet>> snapshot=_Lazy.threadSafe(this::snapshot);
",0,665,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(ExpressionMethodReference-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
7,private static final int CHARACTERISTICS =  Spliterator.DISTINCT|Spliterator.NONNULL|Spliterator.CONCURRENT;,"private static final int CHARACTERISTICS=Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.CONCURRENT;
",0,132,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
8,"static final Version VERSION = new Version(1, 0, 5, """", ""io.micrometer"", ""micrometer-core"");","static final Version VERSION=new Version(1,0,5,"""",""io.micrometer"",""micrometer-core"");
",0,956,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
9,"private static final AvroType<String> strings = new AvroType<String>(String.class, Schema.create(Schema.Type.STRING),","private static final AvroType<String> strings=new AvroType<String>(String.class,Schema.create(Schema.Type.STRING),UTF8_TO_STRING,STRING_TO_UTF8,NoOpDeepCopier.<String>create(),AvroType.AvroRecordType.GENERIC);
",0,773,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
10,"private ImmutableMap.Builder<List<Byte>, ChecksumStatus> checksums = ImmutableMap.builder();","private ImmutableMap.Builder<List<Byte>,ChecksumStatus> checksums=ImmutableMap.builder();
",0,117,8,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
11,"private final Map<IngressIdentifier<?>, List<Router<?>>> routers = new HashMap<>();","private final Map<IngressIdentifier<?>,List<Router<?>>> routers=new HashMap<>();
",0,56,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
12,"protected BiFunction<Collection<?>, Collection<?>, Collection<?>> mergeNestedLists = null;","protected BiFunction<Collection<?>,Collection<?>,Collection<?>> mergeNestedLists=null;
",0,18,10,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
13,"final OptionSimple mode = new OptionSimple(""native"", """", null, """", true);","final OptionSimple mode=new OptionSimple(""native"","""",null,"""",true);
",0,170,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
14,protected static final char EOT = (char) -1;,"protected static final char EOT=(char)-1;
",0,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(CastExpression-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, CastExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
15,private final LazyParticipant<ClockProvider> clockProvider = new LazyParticipant<>(this::getDefaultClockProvider);,"private final LazyParticipant<ClockProvider> clockProvider=new LazyParticipant<>(this::getDefaultClockProvider);
",0,8,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(ExpressionMethodReference-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
16,"private final Class<?>[] extensions = new Class[] { MarkFastReloadAction.class, MarkTableReloadAction.class };","private final Class<?>[] extensions=new Class[]{MarkFastReloadAction.class,MarkTableReloadAction.class};
",0,268,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
17,private @Nullable SubscriptionPath subscriptionPath = null;,"private @Nullable SubscriptionPath subscriptionPath=null;
",0,39,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
18,final long errors[] = new long[fields.length];,"final long errors[]=new long[fields.length];
",0,4,7,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
19,"private static final int searchConcurrencyFactor = Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + ""search_concurrency_factor"", ""1""));","private static final int searchConcurrencyFactor=Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + ""search_concurrency_factor"",""1""));
",0,57,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
20,"public static final Span ELAPSED = start(0, TimeUnit.NANOSECONDS);","public static final Span ELAPSED=start(0,TimeUnit.NANOSECONDS);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
21,private static final Consumer<?> NOOP = item -> {,"private static final Consumer<?> NOOP=item -> {
}
;
",0,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
22,private LinkedEntries.LinkNode next = ((LinkedEntries.LinkNode) header).getNextLinkNode();,"private LinkedEntries.LinkNode next=((LinkedEntries.LinkNode)header).getNextLinkNode();
",0,4,6,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
23,List<Class<?>> types = new ArrayList<>();,"List<Class<?>> types=new ArrayList<>();
",0,0,5,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
24,private List<Class<? extends DruidService>> serviceClasses = ImmutableList.of();,"private List<Class<? extends DruidService>> serviceClasses=ImmutableList.of();
",0,4,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
25,private final AbstractRequest.Builder<?> requestBuilder;,"private final AbstractRequest.Builder<?> requestBuilder;
",0,1,5,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
26,private final Tree<Info> infos = new Tree<Info>(Constants.FS_NATIVE.charAt(0));,"private final Tree<Info> infos=new Tree<Info>(Constants.FS_NATIVE.charAt(0));
",0,22,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
27,"static final char[] NEWLINE = SecurityUtilities.getSystemProperty(""line.separator"", ""\n"").toCharArray();","static final char[] NEWLINE=SecurityUtilities.getSystemProperty(""line.separator"",""\n"").toCharArray();
",0,10,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
28,int poolingConcurrency = 2 * Runtime.getRuntime().availableProcessors();,"int poolingConcurrency=2 * Runtime.getRuntime().availableProcessors();
",0,0,6,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
29,private static final AtomicReference<Preferences> prefs = new AtomicReference<Preferences>(NbPreferences.forModule(MavenFileOwnerQueryImpl.class).node(EXTERNAL_OWNERS));,"private static final AtomicReference<Preferences> prefs=new AtomicReference<Preferences>(NbPreferences.forModule(MavenFileOwnerQueryImpl.class).node(EXTERNAL_OWNERS));
",0,56,13,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
30,"private final List<ConsumerRecord<byte[], byte[]>> bufferedRecords;","private final List<ConsumerRecord<byte[],byte[]>> bufferedRecords;
",0,14,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
31,"protected Map<String, ? extends DriveMetrics> driveMetrics = ImmutableMap.<String, DriveMetrics> of();","protected Map<String,? extends DriveMetrics> driveMetrics=ImmutableMap.<String,DriveMetrics>of();
",0,2,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
32,"private Map<Tree, Collection<Map<Element, State>>> resumeAfter = new IdentityHashMap<Tree, Collection<Map<Element, State>>>();","private Map<Tree,Collection<Map<Element,State>>> resumeAfter=new IdentityHashMap<Tree,Collection<Map<Element,State>>>();
",0,9,14,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
33,"private static final String[] PREFIXES = { """", ""K"", ""M"", ""G"", ""T"" };","private static final String[] PREFIXES={"""",""K"",""M"",""G"",""T""};
",0,16,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
34,protected Predicate<? super byte[]> iconData;,"protected Predicate<? super byte[]> iconData;
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
35,"private final Map<RequestExecutor,String> failed = Collections.synchronizedMap(new LinkedHashMap<RequestExecutor,String>());","private final Map<RequestExecutor,String> failed=Collections.synchronizedMap(new LinkedHashMap<RequestExecutor,String>());
",0,7,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
36,private static final ByteSizeStrings JAVA = ByteSizeStrings.builder(),"private static final ByteSizeStrings JAVA=ByteSizeStrings.builder().suffixBytes("""").suffixKilo(""k"").suffixMega(""m"").suffixGiga(""g"").suffixTera(""000g"").noSpace().bytesPerMetricUnit(1024).maxLen(6).precision(0).lowerLimit(10).build();
",0,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
37,"private final LazyInt hashCode = new LazyInt(() -> Objects.hash(getContainerClass(), getTypeArgumentIndex()));","private final LazyInt hashCode=new LazyInt(() -> Objects.hash(getContainerClass(),getTypeArgumentIndex()));
",0,11,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
38,"private final Lazy<String> toString = new Lazy<>(() -> String.format(""%s: %s<[%d]>"",","private final Lazy<String> toString=new Lazy<>(() -> String.format(""%s: %s<[%d]>"",ContainerElementKey.class.getSimpleName(),getContainerClass().getName(),getTypeArgumentIndex()));
",0,11,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
39,Optional<Class<?>> next = Optional.of(type);,"Optional<Class<?>> next=Optional.of(type);
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
40,private Predicate<? super R> predicate = r -> true;,"private Predicate<? super R> predicate=r -> true;
",0,6,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
41,"private final Comparator<Row> rowComparator = (r1, r2) -> compare((ClusteringPrefix<?>) r1.clustering(),","private final Comparator<Row> rowComparator=(r1,r2) -> compare((ClusteringPrefix<?>)r1.clustering(),(ClusteringPrefix<?>)r2.clustering());
",0,8,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
42,@Nullable Object @Nullable [] current;,"@Nullable Object @Nullable [] current;
",0,0,4,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
SimpleName(MarkerAnnotation-typeName, Dimension-annotations, ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
43,static final Logger LOG = Logger.getLogger(Testing.class.getName());,"static final Logger LOG=Logger.getLogger(Testing.class.getName());
",0,3,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
44,"public static final boolean DEBUG = Boolean.getBoolean(Log.class.getName() + "".debug"");","public static final boolean DEBUG=Boolean.getBoolean(Log.class.getName() + "".debug"");
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
45,"private static final Set<String> VERSIONS = new HashSet<>(Arrays.asList(""46.0"", ""50.0""));","private static final Set<String> VERSIONS=new HashSet<>(Arrays.asList(""46.0"",""50.0""));
",0,8,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
46,private volatile Class<?> documentType = Document.class;,"private volatile Class<?> documentType=Document.class;
",0,3,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
47,private Class<E> castAs = (Class<E>) Object.class;,"@SuppressWarnings(""unchecked"") private Class<E> castAs=(Class<E>)Object.class;
",0,0,7,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, CastExpression-expression, VariableDeclarationFragment-initializer, ),
"
48,private FileIO io = new HadoopFileIO(spark().sessionState().newHadoopConf());,"private FileIO io=new HadoopFileIO(spark().sessionState().newHadoopConf());
",0,1,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
49,private final FutureTask<Long> commit = new FutureTask<Long>(new Callable<Long>() {,"private final FutureTask<Long> commit=new FutureTask<Long>(new Callable<Long>(){
  @Override public Long call() throws Exception {
    long t0=Clock.ACCURATE.getTime();
    Clock.ACCURATE.waitUntil(Clock.ACCURATE.getTime() + 100);
    assertSame(AFTER,limiter.processCommit(EMPTY_NODE,AFTER,null));
    return Clock.ACCURATE.getTime() - t0;
  }
}
);
",0,2,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
50,"private static final SimpleQueryResult EMPTY = new SimpleQueryResult(new String[0], null);","private static final SimpleQueryResult EMPTY=new SimpleQueryResult(new String[0],null);
",0,2,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
51,public static final ObjectFactory<byte[]> factory = ByteArrayObjectFactory.instance;,"public static final ObjectFactory<byte[]> factory=ByteArrayObjectFactory.instance;
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
52,Collection<Mutation> next = firstBuild.isEmpty(),"Collection<Mutation> next=firstBuild.isEmpty() ? buildNext() : firstBuild;
",0,0,5,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
53,"private Supplier<Function<Descriptor, TableMetadata>> schemaCallback = () -> null;","private Supplier<Function<Descriptor,TableMetadata>> schemaCallback=() -> null;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
54,private final Consumer<Graph> removeGraph = g -> g.find().forEachRemaining(g::delete);,"private final Consumer<Graph> removeGraph=g -> g.find().forEachRemaining(g::delete);
",0,2,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-expression, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
55,"private final BinaryOperator<B> combiner = (a, b) -> { a.addAll(b); return a; };","private final BinaryOperator<B> combiner=(a,b) -> {
  a.addAll(b);
  return a;
}
;
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ReturnStatement-expression, Block-statements, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
56,"private volatile State state = new State(Collections.emptyList(), Collections.emptyList(), Collections.emptyList());","private volatile State state=new State(Collections.emptyList(),Collections.emptyList(),Collections.emptyList());
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
57,"public static final CompressionParams NOOP = new CompressionParams(NoopCompressor.create(Collections.emptyMap()),","public static final CompressionParams NOOP=new CompressionParams(NoopCompressor.create(Collections.emptyMap()),1024 * 4,Integer.MAX_VALUE,DEFAULT_MIN_COMPRESS_RATIO,Collections.emptyMap());
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
58,"private final Map<String, RequestProcessor.Task> onStart = new HashMap<String, RequestProcessor.Task>();","private final Map<String,RequestProcessor.Task> onStart=new HashMap<String,RequestProcessor.Task>();
",0,9,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
59,private final _Lazy<TreeAdapter<T>> treeAdapter = _Lazy.of(this::newTreeAdapter);,"private final _Lazy<TreeAdapter<T>> treeAdapter=_Lazy.of(this::newTreeAdapter);
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(ExpressionMethodReference-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
60,private Consumer<T> adjustment = x -> {};,"private Consumer<T> adjustment=x -> {
}
;
",0,1,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Block(LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
61,private final ArrayBlockingQueue<ByteBuffer> sendBuffer = new ArrayBlockingQueue<ByteBuffer>(MAX_BUFFER_SIZE * 2);,"private final ArrayBlockingQueue<ByteBuffer> sendBuffer=new ArrayBlockingQueue<ByteBuffer>(MAX_BUFFER_SIZE * 2);
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
62,"private static final HashRange ALL = new HashRange(0, Integer.MAX_VALUE);","private static final HashRange ALL=new HashRange(0,Integer.MAX_VALUE);
",0,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
63,private TypeToken<? extends Context> context = typeToken(Context.class);,"private TypeToken<? extends Context> context=typeToken(Context.class);
",0,4,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
64,DistributedLogConfiguration dlConf = new DistributedLogConfiguration(),"DistributedLogConfiguration dlConf=new DistributedLogConfiguration().setLockTimeout(10).setOutputBufferSize(0).setImmediateFlushEnabled(true);
",0,0,3,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
65,"private static final TaskLocation UNKNOWN = new TaskLocation(null, -1, -1);","private static final TaskLocation UNKNOWN=new TaskLocation(null,-1,-1);
",0,9,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
66,private int next = findNext(-1);,"private int next=findNext(-1);
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
67,"final Map<String, byte[]> entries = new HashMap<String, byte[]>();","final Map<String,byte[]> entries=new HashMap<String,byte[]>();
",0,3,10,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
68,public boolean run;,"/** 
 */
public boolean run;
",0,0,4,,"Javadoc(FieldDeclaration-javadoc, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
69,"private volatile boolean skipCheckpointOnNodeStop = getBoolean(IGNITE_PDS_SKIP_CHECKPOINT_ON_NODE_STOP, false);","/** 
 * Avoid the start checkpoint if checkpointer was canceled. 
 */
private volatile boolean skipCheckpointOnNodeStop=getBoolean(IGNITE_PDS_SKIP_CHECKPOINT_ON_NODE_STOP,false);
",0,5,7,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
70,@Nullable private RevisionCompacted revisions[];,"@Nullable private RevisionCompacted revisions[];
",0,1,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
"
71,"private final static URI CWD = new File(""."").toURI();","private final static URI CWD=new File(""."").toURI();
",0,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
72,{ private Shape[][][] shapes = new Shape[10][10][];,"private Shape[][][] shapes=new Shape[10][10][];
",0,26,12,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
73,"LocalDateTime endOfTerm = LocalDate.of(2015, 8, 15).atStartOfDay();","LocalDateTime endOfTerm=LocalDate.of(2015,8,15).atStartOfDay();
",0,0,8,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
74,private static final SerializableOptional<?> EMPTY = new SerializableOptional<>(null);,"private static final SerializableOptional<?> EMPTY=new SerializableOptional<>(null);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
75,"private static final SnapshotResult<?> EMPTY = new SnapshotResult<>(null, null);","/** 
 * An singleton instance to represent an empty snapshot result. 
 */
private static final SnapshotResult<?> EMPTY=new SnapshotResult<>(null,null);
",0,0,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
WildcardType(ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
76,@Nullable private final byte[] value;,"/** 
 */
@Nullable private final byte[] value;
",0,5,6,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
Modifier(),
PrimitiveType(ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
"
77,@Parameterized.Parameter public static boolean compressionEnabled;,"@Parameterized.Parameter public static boolean compressionEnabled;
",0,0,5,,"QualifiedName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
78,"@Parameterized.Parameter public TtlStateTestContextBase<?, ?, ?> ctx;","@Parameterized.Parameter public TtlStateTestContextBase<?,?,?> ctx;
",0,0,7,,"QualifiedName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
79,private static final ThreadLocal<Jar> current = ThreadLocal.withInitial(Jar::new);,"private static final ThreadLocal<Jar> current=ThreadLocal.withInitial(Jar::new);
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, CreationReference-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
80,"private @DataTypeHint(""RAW"") Object someObject;","private @DataTypeHint(""RAW"") Object someObject;
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SingleMemberAnnotation-typeName, FieldDeclaration-modifiers, ),
StringLiteral(SingleMemberAnnotation-value, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
81,private static final Deque<?> EMPTY = new ArrayDeque<>(0);,"private static final Deque<?> EMPTY=new ArrayDeque<>(0);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
82,"private final Fn<byte[], T> deserialize;","private final Fn<byte[],T> deserialize;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
83,"private static final State[] fromInt = {STARTING, RUNNING, STOPPING, STOPPED, FAILED};","private static final State[] fromInt={STARTING,RUNNING,STOPPING,STOPPED,FAILED};
",0,2,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
84,private static final ThreadLocal<Boolean> isDominoThread = withInitial(() -> FALSE);,"private static final ThreadLocal<Boolean> isDominoThread=withInitial(() -> FALSE);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
85,public static final DateTimeFormatter FORMAT = new DateTimeFormatterBuilder(),"/** 
 * The thread-safe instance to use for reading and formatting dates. Only the year is mandatory, all other fields are optional at parsing time. However all fields are written, including milliseconds at formatting time.
 */
public static final DateTimeFormatter FORMAT=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendValue(ChronoField.YEAR,4,5,SignStyle.NORMAL).optionalStart().appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR,2).optionalStart().appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH,2).optionalStart().appendLiteral('T').appendValue(ChronoField.HOUR_OF_DAY,2).optionalStart().appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR,2).optionalStart().appendLiteral(':').appendValue(ChronoField.SECOND_OF_MINUTE,2).appendFraction(ChronoField.MILLI_OF_SECOND,3,3,true).optionalEnd().optionalEnd().optionalEnd().optionalStart().appendOffsetId().toFormatter(Locale.ROOT);
",0,1,6,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
86,int threads = Runtime.getRuntime().availableProcessors() * 2;,"int threads=Runtime.getRuntime().availableProcessors() * 2;
",0,0,6,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
87,"private final List<Queryable.Order<? super T, ? extends U>> orderBy;","private final List<Queryable.Order<? super T,? extends U>> orderBy;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
88,"private Entry<String, Value>[] items = new Entry[20];","/** 
 * The items held in the map.
 */
@SuppressWarnings(""unchecked"") private Entry<String,Value>[] items=new Entry[20];
",0,6,9,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ArrayType-elementType, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, ),
"
89,"private Map<String, String> attributes = new HashMap<String, String>(4);","/** 
 * map to handle unknown attributes.
 */
private Map<String,String> attributes=new HashMap<String,String>(4);
",0,0,9,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
90,"private static Algorithm ARGON2I13 = new Algorithm(""argon2i13"", 1, 3, true);","private static Algorithm ARGON2I13=new Algorithm(""argon2i13"",1,3,true);
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
91,private Long writeSet[] = new Long[MAX_INLINE];,"private Long writeSet[]=new Long[MAX_INLINE];
",0,1,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
Dimension(VariableDeclarationFragment-extraDimensions2, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
92,"static final byte [] LASTKEY = Bytes.toBytes(RESERVED_PREFIX + ""LASTKEY"");","static final byte[] LASTKEY=Bytes.toBytes(RESERVED_PREFIX + ""LASTKEY"");
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
93,long next = BaseQueryGranularity.this.next(curr);,"long next=BaseQueryGranularity.this.next(curr);
",0,0,5,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(ThisExpression-qualifier, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
94,private Mode[] benchmarkModes = new Mode[] { Mode.Throughput };,"/** 
 * Benchmark modes. 
 */
private Mode[] benchmarkModes=new Mode[]{Mode.Throughput};
",0,0,7,,"Modifier(),
SimpleName(SimpleType-name, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, ),
"
95,private EnumSet<JdbcThinFeature> features = EnumSet.noneOf(JdbcThinFeature.class);,"/** 
 * Features. 
 */
private EnumSet<JdbcThinFeature> features=EnumSet.noneOf(JdbcThinFeature.class);
",0,0,7,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
96,"private final boolean isQuiet = Boolean.valueOf(System.getProperty(IGNITE_QUIET, ""true""));","/** 
 * Quiet flag. 
 */
@GridToStringInclude private final boolean isQuiet=Boolean.valueOf(System.getProperty(IGNITE_QUIET,""true""));
",0,0,10,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
97,"@Nullable private Map<Short, Collection<Short>> participatingNodes;","/** 
 * Transaction participating nodes. Structure: Primary node -> [Backup nodes...], where nodes are identified by compact ID for some baseline topology.
 */
@Nullable private Map<Short,Collection<Short>> participatingNodes;
",0,0,7,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
98,private final AtomicLong state = new AtomicLong((long)MOVING.ordinal() << 32);,"/** 
 * State. 32 bits - size, 16 bits - reservations, 13 bits - reserved, 3 bits - GridDhtPartitionState. 
 */
@GridToStringExclude private final AtomicLong state=new AtomicLong((long)MOVING.ordinal() << 32);
",0,0,9,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NumberLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
99,"private @Nullable IgniteBiPredicate<WALRecord.RecordType, WALPointer> recordDeserializeFilter;","/** 
 * Read record filter. 
 */
private @Nullable IgniteBiPredicate<WALRecord.RecordType,WALPointer> recordDeserializeFilter;
",0,0,6,,"Modifier(),
SimpleName(MarkerAnnotation-typeName, ),
SimpleName(SimpleType-name, ParameterizedType-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
100,"private Cache.Entry<?, ?> next;","/** 
 */
private Cache.Entry<?,?> next;
",0,0,5,,"Modifier(),
QualifiedName(SimpleType-name, ParameterizedType-type, ),
WildcardType(ParameterizedType-typeArguments, ),
WildcardType(ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
101,"private volatile long longTransactionTimeDumpThreshold = getLong(IGNITE_LONG_TRANSACTION_TIME_DUMP_THRESHOLD, 0);","/** 
 * Threshold timeout for long transactions, if transaction exceeds it, it will be dumped in log with information about how much time did it spent in system time (time while aquiring locks, preparing, commiting, etc) and user time (time when client node runs some code while holding transaction and not waiting it). Equals 0 if not set. No transactions are dumped in log if this parameter is not set.
 */
private volatile long longTransactionTimeDumpThreshold=getLong(IGNITE_LONG_TRANSACTION_TIME_DUMP_THRESHOLD,0);
",0,0,7,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
102,"private volatile Map<Class<?>, Object[]> extensions;","/** 
 */
private volatile Map<Class<?>,Object[]> extensions;
",0,0,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
103,private static ThreadLocal<Span> span = ThreadLocal.withInitial(() -> NOOP_SPAN);,"/** 
 * Thread local span holder. 
 */
private static ThreadLocal<Span> span=ThreadLocal.withInitial(() -> NOOP_SPAN);
",0,0,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
104,"private static final Map<Class<? extends Vector>, Class<? extends Matrix>> typesMap = typesMap();","/** 
 */
private static final Map<Class<? extends Vector>,Class<? extends Matrix>> typesMap=typesMap();
",0,1,10,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
105,private ReentrantReadWriteLock.WriteLock writeLock = new ReentrantReadWriteLock.WriteLock(delegate) {};,"/** 
 * Write lock holder. 
 */
private ReentrantReadWriteLock.WriteLock writeLock=new ReentrantReadWriteLock.WriteLock(delegate){
}
;
",0,0,6,,"Modifier(),
QualifiedName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
AnonymousClassDeclaration(ClassInstanceCreation-anonymousClassDeclaration, VariableDeclarationFragment-initializer, ),
"
106,"private transient Map<String, Collection<SecurityPermission>> servicePermissions = isSecurityCompatibilityMode()","/** 
 * Service permissions. 
 */
@GridToStringInclude private transient Map<String,Collection<SecurityPermission>> servicePermissions=isSecurityCompatibilityMode() ? compatibleServicePermissions() : new HashMap<String,Collection<SecurityPermission>>();
",0,0,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, ),
"
107,@Nullable private CacheAtomicityMode atomicMode = null;,"/** 
 */
@Parameter(names={""--atomic-mode"",""--atomicMode""}) @Nullable private CacheAtomicityMode atomicMode=null;
",0,0,5,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
NullLiteral(VariableDeclarationFragment-initializer, ),
"
108,"public static MethodEffector<String> CONCATENATE = new MethodEffector<String>(MyEntityImpl.class, ""concatenate"");","public static MethodEffector<String> CONCATENATE=new MethodEffector<String>(MyEntityImpl.class,""concatenate"");
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
109,"public final ArgDecl USAGE = new ArgDecl( false, ""usage"", (arg,val) -> usage() );","public final ArgDecl USAGE=new ArgDecl(false,""usage"",(arg,val) -> usage());
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
110,"@SerializedName(""isAdmin"") private boolean isAdmin;","@SerializedName(""isAdmin"") private boolean isAdmin;
",0,0,5,,"SimpleName(SingleMemberAnnotation-typeName, FieldDeclaration-modifiers, ),
StringLiteral(SingleMemberAnnotation-value, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
111,"private static final Function<Object,Integer> ZERO = t -> 0;","/** 
 * Single instance of constant function that returns zero.
 */
private static final Function<Object,Integer> ZERO=t -> 0;
",0,0,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
NumberLiteral(LambdaExpression-body, VariableDeclarationFragment-initializer, ),
"
112,private static final ToString<ActionDomainEvent<?>> toString = ObjectContracts.<ActionDomainEvent<?>>,"private static final ToString<ActionDomainEvent<?>> toString=ObjectContracts.<ActionDomainEvent<?>>toString(""source"",ActionDomainEvent::getSource).thenToString(""identifier"",ActionDomainEvent::getIdentifier).thenToString(""eventPhase"",ActionDomainEvent::getEventPhase);
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
113,private final @NonNull Class<? extends Facet> facetType;,"private final @NonNull Class<? extends Facet> facetType;
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
114,@Getter(onMethod = @__(@Override)) private final T delegate;,"@Getter(onMethod=@__(@Override)) private final T delegate;
",0,0,8,,"SimpleName(NormalAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(MemberValuePair-name, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(SingleMemberAnnotation-typeName, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(MarkerAnnotation-typeName, SingleMemberAnnotation-value, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
115,"private static final IKey<TodayButton> ShowTodayButton = newKey(""todayBtn"", TodayButton.FALSE);","/** 
 * If true, displays a ""Today"" button at the bottom of the datepicker to select the current date. If true, the ""Today"" button will only move the current date into view;
 */
private static final IKey<TodayButton> ShowTodayButton=newKey(""todayBtn"",TodayButton.FALSE);
",0,0,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
116,"private static final boolean ISLOCKINGSUPPORTED = !(""disabled"".equals(LOCKSUPPORT));","private static final boolean ISLOCKINGSUPPORTED=!(""disabled"".equals(LOCKSUPPORT));
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
117,"private int initialSchema = Integer.getInteger(""org.apache.jackrabbit.oak.plugins.document.rdb.RDBOptions.INITIALSCHEMA"", 2);","private int initialSchema=Integer.getInteger(""org.apache.jackrabbit.oak.plugins.document.rdb.RDBOptions.INITIALSCHEMA"",2);
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
118,"public static final Map<InstanceState, Status> toPortableNodeStatus = ImmutableMap","public static final Map<InstanceState,Status> toPortableNodeStatus=ImmutableMap.<InstanceState,Status>builder().put(InstanceState.PENDING,Status.PENDING).put(InstanceState.RUNNING,Status.RUNNING).put(InstanceState.SHUTTING_DOWN,Status.PENDING).put(InstanceState.TERMINATED,Status.TERMINATED).put(InstanceState.STOPPING,Status.PENDING).put(InstanceState.STOPPED,Status.SUSPENDED).put(InstanceState.UNRECOGNIZED,Status.UNRECOGNIZED).build();
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
119,"static final Payload PAYLOAD = newByteSourcePayload(ByteSource.wrap(""swifty"".getBytes()));","static final Payload PAYLOAD=newByteSourcePayload(ByteSource.wrap(""swifty"".getBytes()));
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
120,"static final Map<ServerState, Status> toPortableNodeStatus = ImmutableMap.<ServerState, Status> builder()","@VisibleForTesting static final Map<ServerState,Status> toPortableNodeStatus=ImmutableMap.<ServerState,Status>builder().put(ServerState.ON,Status.RUNNING).put(ServerState.STARTING,Status.PENDING).put(ServerState.OFF,Status.SUSPENDED).put(ServerState.STOPPING,Status.PENDING).put(ServerState.RESTARTING,Status.PENDING).put(ServerState.SAVING,Status.PENDING).put(ServerState.UNRECOGNIZED,Status.UNRECOGNIZED).put(ServerState.RESTORING,Status.PENDING).put(ServerState.UPDATING,Status.PENDING).build();
",0,0,10,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
121,"static final Map<ServerImageState, Image.Status> toPortableImageStatus = ImmutableMap","@VisibleForTesting static final Map<ServerImageState,Image.Status> toPortableImageStatus=ImmutableMap.<ServerImageState,Image.Status>builder().put(ServerImageState.AVAILABLE,Image.Status.AVAILABLE).put(ServerImageState.SAVING,Image.Status.PENDING).put(ServerImageState.TRASH,Image.Status.DELETED).put(ServerImageState.UNRECOGNIZED,Image.Status.UNRECOGNIZED).build();
",0,0,7,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
122,private final ThreadLocal<Boolean> isInTransaction = withInitial(() -> false);,"private final ThreadLocal<Boolean> isInTransaction=withInitial(() -> false);
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
123,"private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {","/** 
 * We descend through the nested  {@link PMap}s building up  {@link Stream}s of partial tuples from which we develop a {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.
 */
@SuppressWarnings(""unchecked"") private TFunction4<Node,Stream<Quad>> find=(first,second,third,fourth) -> {
  debug(""Querying on four-tuple pattern: {} {} {} {} ."",first,second,third,fourth);
  final FourTupleMap fourTuples=local().get();
  if (isConcrete(first)) {
    debug(""Using a specific first slot value."");
    return (Stream<Quad>)fourTuples.get(first).map(threeTuples -> {
      if (isConcrete(second)) {
        debug(""Using a specific second slot value."");
        return threeTuples.get(second).map(twoTuples -> {
          if (isConcrete(third)) {
            debug(""Using a specific third slot value."");
            return twoTuples.get(third).map(oneTuples -> {
              if (isConcrete(fourth)) {
                debug(""Using a specific fourth slot value."");
                return oneTuples.contains(fourth) ? of(unmap(first,second,third,fourth)) : empty();
              }
              debug(""Using a wildcard fourth slot value."");
              return oneTuples.stream().map(slot4 -> unmap(first,second,third,slot4));
            }
).orElse(empty());
          }
          debug(""Using wildcard third and fourth slot values."");
          return twoTuples.flatten((slot3,oneTuples) -> oneTuples.stream().map(slot4 -> unmap(first,second,slot3,slot4)));
        }
).orElse(empty());
      }
      debug(""Using wildcard second, third and fourth slot values."");
      return threeTuples.flatten((slot2,twoTuples) -> twoTuples.flatten((slot3,oneTuples) -> oneTuples.stream().map(slot4 -> unmap(first,slot2,slot3,slot4))));
    }
).orElse(empty());
  }
  debug(""Using a wildcard for all slot values."");
  return fourTuples.flatten((slot1,threeTuples) -> threeTuples.flatten((slot2,twoTuples) -> twoTuples.flatten((slot3,oneTuples) -> oneTuples.stream().map(slot4 -> unmap(slot1,slot2,slot3,slot4)))));
}
;
",0,1,10,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
"
124,final protected Build buildBGP = (ItemList list) ->	{,"final protected Build buildBGP=(ItemList list) -> {
  BasicPattern triples=buildBGP(list);
  return new OpBGP(triples);
}
;
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SingleVariableDeclaration-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
125,"private static final boolean LogLogging     = System.getenv(""FUSEKI_LOGLOGGING"") != null || System.getProperty(""fuseki.loglogging"") != null;","private static final boolean LogLogging=System.getenv(""FUSEKI_LOGLOGGING"") != null || System.getProperty(""fuseki.loglogging"") != null;
",0,6,13,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
126,"String disableAllowBodyParam="""", allowedHeaderParams="""", allowedMethodHeaders="""", allowedMethodParams="""", clientVersionHeader="""", config="""", debug="""", debugOn="""", defaultAccept="""", defaultCharset="""", defaultContentType="""", maxInput="""", messages="""", path="""", renderResponseStackTraces="""", roleGuard="""", rolesDeclared="""", siteName="""", uriAuthority="""", uriContext="""", uriRelativity="""", uriResolution="""";","String disableAllowBodyParam="""", allowedHeaderParams="""", allowedMethodHeaders="""", allowedMethodParams="""", clientVersionHeader="""", config="""", debug="""", debugOn="""", defaultAccept="""", defaultCharset="""", defaultContentType="""", maxInput="""", messages="""", path="""", renderResponseStackTraces="""", roleGuard="""", rolesDeclared="""", siteName="""", uriAuthority="""", uriContext="""", uriRelativity="""", uriResolution="""";
",0,22,45,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
127,"Class<?> implClass=Null.class, interfaceClass=Null.class, stopClass=Null.class;","Class<?> implClass=Null.class, interfaceClass=Null.class, stopClass=Null.class;
",0,1,8,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
128,Class<? extends BeanInterceptor<?>> interceptor=BeanInterceptor.Default.class;,"Class<? extends BeanInterceptor<?>> interceptor=BeanInterceptor.Default.class;
",0,30,5,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
129,"private final String disableAllowBodyParam, allowedHeaderParams, allowedMethodHeaders, allowedMethodParams, clientVersionHeader, config, debug, debugOn, defaultAccept, defaultCharset, defaultContentType, maxInput, messages, path, renderResponseStackTraces, roleGuard, rolesDeclared, siteName, uriAuthority, uriContext, uriRelativity, uriResolution;","private final String disableAllowBodyParam, allowedHeaderParams, allowedMethodHeaders, allowedMethodParams, clientVersionHeader, config, debug, debugOn, defaultAccept, defaultCharset, defaultContentType, maxInput, messages, path, renderResponseStackTraces, roleGuard, rolesDeclared, siteName, uriAuthority, uriContext, uriRelativity, uriResolution;
",0,9,25,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
130,"Class<?>[] children={}, parsers={}, serializers={};","Class<?>[] children={}, parsers={}, serializers={};
",0,6,9,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
131,"List<Pattern> include = AList.of(Pattern.compile("".*"")), exclude = AList.create();","List<Pattern> include=AList.of(Pattern.compile("".*"")), exclude=AList.create();
",0,1,11,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
132,"String[] _default={}, _enum={}, additionalProperties={}, allOf={}, d={}, description={}, df={}, e={}, ex={}, example={}, examples={}, exs={}, properties={}, value={}, xml={};","String[] _default={}, _enum={}, additionalProperties={}, allOf={}, d={}, description={}, df={}, e={}, ex={}, example={}, examples={}, exs={}, properties={}, value={}, xml={};
",0,16,32,,"SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
133,"private final String[] description, d, _default, df, _enum, e, allOf, properties, additionalProperties, xml, example, ex, examples, exs, value;","private final String[] description, d, _default, df, _enum, e, allOf, properties, additionalProperties, xml, example, ex, examples, exs, value;
",0,6,19,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
134,"long maxi=-1, maxItems=-1, maxl=-1, maxLength=-1, maxp=-1, maxProperties=-1, mini=-1, minItems=-1, minl=-1, minLength=-1, minp=-1, minProperties=-1;","long maxi=-1, maxItems=-1, maxl=-1, maxLength=-1, maxp=-1, maxProperties=-1, mini=-1, minItems=-1, minl=-1, minLength=-1, minp=-1, minProperties=-1;
",0,6,25,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
135,"boolean allowEmptyValue, aev,exclusiveMaximum, emax, exclusiveMinimum, emin, r=true, required=true, uniqueItems, ui;","boolean allowEmptyValue, aev, exclusiveMaximum, emax, exclusiveMinimum, emin, r=true, required=true, uniqueItems, ui;
",0,0,13,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
136,"int[] code={}, value={};","int[] code={}, value={};
",0,1,6,,"PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ArrayInitializer(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
137,"private static final int GET=1, PUT=2, POST=3, DELETE=4;","/** 
 * The list of possible request types. 
 */
private static final int GET=1, PUT=2, POST=3, DELETE=4;
",0,0,12,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(VariableDeclarationFragment-initializer, ),
"
138,"File workingDir = System.getProperty(""juneau.workingDir"") == null ? null : new File(System.getProperty(""juneau.workingDir""));","File workingDir=System.getProperty(""juneau.workingDir"") == null ? null : new File(System.getProperty(""juneau.workingDir""));
",0,0,11,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
139,"Predicate<HttpServletRequest> conditionalPredicate = x -> ""true"".equalsIgnoreCase(x.getHeader(""Debug""));","Predicate<HttpServletRequest> conditionalPredicate=x -> ""true"".equalsIgnoreCase(x.getHeader(""Debug""));
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
140,Class<?>[] encoders=new Class<?>[0];,"Class<?>[] encoders=new Class<?>[0];
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
141,"private Map<String,List<A[]>> f9;","private Map<String,List<A[]>> f9;
",0,1,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
142,"private volatile LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = null;","private volatile LinkedHashMap<TopicPartition,FetchResponseData.PartitionData> responseData=null;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
143,"private final ConsumerRecord<byte[], byte[]> originalRecord;","private final ConsumerRecord<byte[],byte[]> originalRecord;
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
144,"private LogOffsetMetadata highWatermark = new LogOffsetMetadata(0, Optional.empty());","private LogOffsetMetadata highWatermark=new LogOffsetMetadata(0,Optional.empty());
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
145,"private KeyValue<Windowed<Bytes>, byte[]> next;","private KeyValue<Windowed<Bytes>,byte[]> next;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
146,"private final Map<String, String> tags = mkMap(mkEntry(""tag"", ""value""));","private final Map<String,String> tags=mkMap(mkEntry(""tag"",""value""));
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
147,"final ThreadCache cache = new ThreadCache(new LogContext(""testCache ""), 1024 * 1024L, metrics());","final ThreadCache cache=new ThreadCache(new LogContext(""testCache ""),1024 * 1024L,metrics());
",0,1,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
148,final Logger LOG = Logger.getLogger(this.getClass().getName());,"final Logger LOG=Logger.getLogger(this.getClass().getName());
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
149,"int resolverParallelism = Math.max(2, Runtime.getRuntime().availableProcessors());","int resolverParallelism=Math.max(2,Runtime.getRuntime().availableProcessors());
",0,0,8,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
150,private ZookeeperDistributedLock lock = (ZookeeperDistributedLock) new ZookeeperDistributedLock.Factory().lockForCurrentProcess();,"private ZookeeperDistributedLock lock=(ZookeeperDistributedLock)new ZookeeperDistributedLock.Factory().lockForCurrentProcess();
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
151,int index = i++;,"int index=i++;
",0,0,3,,"PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(PostfixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
152,public static final DoubleDoubleFunction MINUS = plusMult(-1);,"/** 
 * Function that returns <tt>a - b</tt>. 
 */
public static final DoubleDoubleFunction MINUS=plusMult(-1);
",0,0,7,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
153,private final ClientCall.Listener<T> listener = new QueuingListener();,"private final ClientCall.Listener<T> listener=new QueuingListener();
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
154,private static int characteristics = NONNULL | ORDERED | IMMUTABLE;,"private static int characteristics=NONNULL | ORDERED | IMMUTABLE;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
155,private int length = (-1);,"private int length=(-1);
",0,0,4,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
156,private final org.slf4j.Logger log = LoggerFactory.getLogger(JSch.class);,"private final org.slf4j.Logger log=LoggerFactory.getLogger(JSch.class);
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
157,"protected static final Buffer CLOSE = new ByteArrayBuffer(null, 0, 0);","protected static final Buffer CLOSE=new ByteArrayBuffer(null,0,0);
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
158,private Lookup                            lookup = new Lookup.MetaInf (null);,"private Lookup lookup=new Lookup.MetaInf(null);
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
159,"private static final List<String> POSTFIXES = Arrays.asList(new String[]{""deg"", ""rad"", ""grad"", ""turn""});","private static final List<String> POSTFIXES=Arrays.asList(new String[]{""deg"",""rad"",""grad"",""turn""});
",0,4,14,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
160,public static final int EXTEND = 16 | OVERLAP;,"/** 
 * Two bit value meaning that the tested block fully includes THIS block. The block must be extended at least by one character, otherwise the 'inside' values will be used. It is included in the following values: EXTEND_BEGIN, INCLUDE, EXTEND_END. The value includes OVERLAP.
 */
public static final int EXTEND=16 | OVERLAP;
",0,0,7,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
"
161,private static final Character STAR = new Character ((char) 0);,"private static final Character STAR=new Character((char)0);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
PrimitiveType(CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
162,private final TokenOrEmbedding<T>[] tokenOrEmbeddings;,"private final TokenOrEmbedding<T>[] tokenOrEmbeddings;
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
163,private static final Language<TokenId> language = new LanguageHierarchy<TokenId>() {,"private static final Language<TokenId> language=new LanguageHierarchy<TokenId>(){
  @Override protected Collection<TokenId> createTokenIds(){
    return Arrays.asList(new TokenId[]{IDENTIFIER_ID,MINUS_ID,PLUS_ID,SLASH_ID,STAR_ID,SL_COMMENT_ID,PLUS_MINUS_PLUS_ID,ML_COMMENT_ID,WHITESPACE_ID,ERROR_ID,PUBLIC_ID,PRIVATE_ID,STATIC_ID});
  }
  @Override protected Map<String,Collection<TokenId>> createTokenCategories(){
    Map<String,Collection<TokenId>> cats=new HashMap<String,Collection<TokenId>>();
    cats.put(""operator"",Arrays.asList(new TokenId[]{PLUS_MINUS_PLUS_ID}));
    cats.put(""whitespace"",Arrays.asList(new TokenId[]{WHITESPACE_ID}));
    cats.put(""test-category"",Arrays.asList(new TokenId[]{PLUS_ID,MINUS_ID,IDENTIFIER_ID}));
    return cats;
  }
  @Override protected Lexer<TokenId> createLexer(  LexerRestartInfo<TokenId> info){
    return null;
  }
  @Override protected String mimeType(){
    return ""text/x-gen"";
  }
}
.language();
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
164,"private ActiveRegion root = new ActiveRegion(null, new Coord(), false);","private ActiveRegion root=new ActiveRegion(null,new Coord(),false);
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
165,"private final boolean isWindows = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"".equals(UIManager.getLookAndFeel().getClass().getName());","private final boolean isWindows=""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"".equals(UIManager.getLookAndFeel().getClass().getName());
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
166,private int                         suspend = (SINGLE_THREAD_STEPPING) ? SUSPEND_EVENT_THREAD : SUSPEND_ALL;,"private int suspend=(SINGLE_THREAD_STEPPING) ? SUSPEND_EVENT_THREAD : SUSPEND_ALL;
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
167,final boolean selected = !template.checkForTests || hasTests(project);,"final boolean selected=!template.checkForTests || hasTests(project);
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
168,Project next = excludeSelf ? project : parentOf(project);,"Project next=excludeSelf ? project : parentOf(project);
",0,0,6,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
169,private static final AdditionalQueryConstraints EMPTY = new AdditionalQueryConstraints(Collections.<String>emptySet());,"private static final AdditionalQueryConstraints EMPTY=new AdditionalQueryConstraints(Collections.<String>emptySet());
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
170,"private RequestProcessor.Task flush = RP.create(this, true);","private RequestProcessor.Task flush=RP.create(this,true);
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
171,"private static final CompactCharSequence EMPTY = new Fixed_0_7(new byte[0], 0);","private static final CompactCharSequence EMPTY=new Fixed_0_7(new byte[0],0);
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
172,private static boolean forceSpeed = FORCE_SPEED || !isLocalDisplay();,"private static boolean forceSpeed=FORCE_SPEED || !isLocalDisplay();
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
173,"final private static int[] enabledStates = new int[]{Profiler.PROFILING_PAUSED, Profiler.PROFILING_RUNNING, Profiler.PROFILING_STARTED};","final private static int[] enabledStates=new int[]{Profiler.PROFILING_PAUSED,Profiler.PROFILING_RUNNING,Profiler.PROFILING_STARTED};
",0,1,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
174,"private static final WatchedFields ALL = new WatchedFields((List<Pair<String, String[]>>) null);","private static final WatchedFields ALL=new WatchedFields((List<Pair<String,String[]>>)null);
",0,0,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
175,"private final AtomicReference<FlowFileQueueSize> size = new AtomicReference<>(new FlowFileQueueSize(0, 0L, 0, 0L, 0, 0, 0L));","private final AtomicReference<FlowFileQueueSize> size=new AtomicReference<>(new FlowFileQueueSize(0,0L,0,0L,0,0,0L));
",0,0,14,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
176,"static String PROMPT = TTY_Reset + TTY_Bright + ""[openejb]$ "" + TTY_Reset;","static String PROMPT=TTY_Reset + TTY_Bright + ""[openejb]$ ""+ TTY_Reset;
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
177,private Set<Class<? extends Annotation>> stereotypes = new HashSet<>();,"private Set<Class<? extends Annotation>> stereotypes=new HashSet<>();
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
178,private static final List<SingleRow> DATA = Collections.unmodifiableList(SingleRow.generateRandomData(ROW_COUNT));,"private static final List<SingleRow> DATA=Collections.unmodifiableList(SingleRow.generateRandomData(ROW_COUNT));
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
179,"private Set<Entry<String, Object>> entrySet = new AbstractSet<Map.Entry<String,Object>>() {","private Set<Entry<String,Object>> entrySet=new AbstractSet<Map.Entry<String,Object>>(){
  @Override public Iterator<java.util.Map.Entry<String,Object>> iterator(){
    return entries.iterator();
  }
  @Override public int size(){
    return entries.size();
  }
}
;
",0,0,10,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
180,private final Promise<?> terminationFuture = new DefaultPromise<Void>(GlobalEventExecutor.INSTANCE);,"private final Promise<?> terminationFuture=new DefaultPromise<Void>(GlobalEventExecutor.INSTANCE);
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
181,private static final double[] POW10 = new double[EXPONENT_FOR_MAX - EXPONENT_FOR_ZERO];,"/** 
 * Table of integer powers of 10, precomputed both for performance and accuracy reasons. This table consumes 4.9 kb of memory. We pay this cost because integer powers of ten are requested often, and  {@link Math#pow(double,double)} has slight rounding errors.
 * @see #pow10(int)
 */
@Workaround(library=""JDK"",version=""1.4"") private static final double[] POW10=new double[EXPONENT_FOR_MAX - EXPONENT_FOR_ZERO];
",0,0,10,,"Modifier(),
Modifier(),
Modifier(),
PrimitiveType(ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(InfixExpression-leftOperand, ArrayCreation-dimensions, VariableDeclarationFragment-initializer, ),
SimpleName(InfixExpression-rightOperand, ArrayCreation-dimensions, VariableDeclarationFragment-initializer, ),
"
182,"static final char MULTIPLY = '⋅', DIVIDE = '∕';","/** 
 * The multiplication and division symbols used for Unicode representation. Also used for internal representation of  {@link #symbol}.
 */
static final char MULTIPLY='⋅', DIVIDE='∕';
",0,0,7,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
CharacterLiteral(VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, ),
CharacterLiteral(VariableDeclarationFragment-initializer, ),
"
183,private static final int GET    =  0;,"/** 
 * The ""get""    operation.  
 */
private static final int GET=0;
",0,0,7,,"TextElement(TagElement-fragments, Javadoc-tags, FieldDeclaration-javadoc, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
184,"private List<Map<String, List<Map<String, String>>>> logs;","private List<Map<String,List<Map<String,String>>>> logs;
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
185,"private Map.Entry<String, Object> next = this.seek();","private Map.Entry<String,Object> next=this.seek();
",0,0,7,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
186,@Expose	protected final org.apache.tajo.type.Type type;,"@Expose protected final org.apache.tajo.type.Type type;
",0,0,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
187,private String channelizer = Channelizer.WebSocketChannelizer.class.getName();,"private String channelizer=Channelizer.WebSocketChannelizer.class.getName();
",0,0,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
188,"private ScopeType[] scopes = { ScopeType.COMPILE, ScopeType.RUNTIME };","private ScopeType[] scopes={ScopeType.COMPILE,ScopeType.RUNTIME};
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
189,private final Logger log = LogManager.getLogger(this.getClass());,"/** 
 * Logging 
 */
private final Logger log=LogManager.getLogger(this.getClass());
",0,0,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
190,private final JsonProvider jsonProvider = new GsonJsonProvider(GSONBuilderService.this.gson.create());,"private final JsonProvider jsonProvider=new GsonJsonProvider(GSONBuilderService.this.gson.create());
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
191,@NotNull private Integer limit = UsergridQuery.LIMIT_DEFAULT;,"@NotNull private Integer limit=UsergridQuery.LIMIT_DEFAULT;
",0,0,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
192,private final Class<? extends Page> LOGIN = LoginPage.class;,"private final Class<? extends Page> LOGIN=LoginPage.class;
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
193,"private final Map<Class<?>, Object> extensions = Maps.newLinkedHashMap();","private final Map<Class<?>,Object> extensions=Maps.newLinkedHashMap();
",1,66,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
194,"private static final List<Map.Entry<Class<?>,GenericRecordHandler>> handler = new ArrayList<>();","private static final List<Map.Entry<Class<?>,GenericRecordHandler>> handler=new ArrayList<>();
",1,7,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
195,"protected List<? extends Map<String, ?>> assertions = ImmutableList.of();","protected List<? extends Map<String,?>> assertions=ImmutableList.of();
",1,129,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
196,private Short isGlobal = Short.valueOf((short) 0);,"@Column(name=""is_global"",nullable=false,length=1) private Short isGlobal=Short.valueOf((short)0);
",1,5,7,,"Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
NumberLiteral(CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
197,"private final String tostring = ""SubscriptionContext(""+Identifiers.getBase64IdFromValue(System.identityHashCode(this), 5)+"")"";","private final String tostring=""SubscriptionContext("" + Identifiers.getBase64IdFromValue(System.identityHashCode(this),5) + "")"";
",1,29,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
198,private final Set<Class<?>> mixinTypes = new LinkedHashSet<>();,"private final Set<Class<?>> mixinTypes=new LinkedHashSet<>();
",1,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
199,private static final ImmutableList<TripleIterator<?>> COLUMNS = ImmutableList.of();,"private static final ImmutableList<TripleIterator<?>> COLUMNS=ImmutableList.of();
",1,2,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
200,private @SetFromFlag Set<Object> tags = Sets.newLinkedHashSet();,"private @SetFromFlag Set<Object> tags=Sets.newLinkedHashSet();
",1,43,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
201,"private final MergingStateAccessor<?, W> state;","private final MergingStateAccessor<?,W> state;
",1,1,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
202,public final StateSpec<ValueState<Integer>> intState = StateSpecs.value(VarIntCoder.of());,"@StateId(STATE_ID) public final StateSpec<ValueState<Integer>> intState=StateSpecs.value(VarIntCoder.of());
",1,1,10,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
203,"public static final PartitionJoinCondition CROSS = new PartitionJoinCondition(null, null, null, null, true);","/** 
 * Cross JOIN. 
 */
public static final PartitionJoinCondition CROSS=new PartitionJoinCondition(null,null,null,null,true);
",1,2,11,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
204,"private final @Nullable Function<RelBuilder, RelNode> relFn;","private final @Nullable Function<RelBuilder,RelNode> relFn;
",1,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
205,private long observationWindowMs = TimeUnit.MINUTES.toMillis(1);,"private long observationWindowMs=TimeUnit.MINUTES.toMillis(1);
",1,3,6,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
206,"public static EntitlementClass<Void> ROOT = new BasicEntitlementClassDefinition<Void>(""root"", Void.class);","/** 
 * Permission to run untrusted code or embedded scripts at the server. A secondary check is required for any operation which could potentially grant root-level access.
 */
public static EntitlementClass<Void> ROOT=new BasicEntitlementClassDefinition<Void>(""root"",Void.class);
",1,1,9,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
207,"private final RelationSupportInternal relations = new ByObjectBasicRelationSupport(this, new RelationChangedCallback());","@SuppressWarnings({""rawtypes"",""unchecked""}) private final RelationSupportInternal relations=new ByObjectBasicRelationSupport(this,new RelationChangedCallback());
",1,1,7,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
ThisExpression(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
208,"@Deprecated protected Function<? super Collection<S>, ? extends T> computing;","/** 
 * @deprecated since 0.7.0, kept for backwards compatibility for rebind, but not used otherwise 
 */
@Deprecated protected Function<? super Collection<S>,? extends T> computing;
",1,2,7,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
209,"private Function<? super Integer,Duration> delayOnIteration = null;","private Function<? super Integer,Duration> delayOnIteration=null;
",1,3,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
210,"private static final ValidatorMapping EMPTY = new ValidatorMapping(""empty"", Collections.emptyList());","@SuppressWarnings({""rawtypes"",""unchecked""}) private static final ValidatorMapping EMPTY=new ValidatorMapping(""empty"",Collections.emptyList());
",1,1,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
211,"public static final EntityComparisonOperator<?,?> EQUALS = new ComparableEntityComparisonOperator<Object>(ID_EQUALS, ""="") {","public static final EntityComparisonOperator<?,?> EQUALS=new ComparableEntityComparisonOperator<Object>(ID_EQUALS,""=""){
  @Override public boolean compare(  Comparable<Object> lhs,  Object rhs){
    return EntityComparisonOperator.compareEqual(lhs,rhs);
  }
  @Override protected void makeRHSWhereString(  ModelEntity entity,  List<EntityConditionParam> entityConditionParams,  StringBuilder sb,  ModelField field,  Object rhs,  Datasource datasourceInfo){
    if (rhs == null || rhs == GenericEntity.NULL_FIELD) {
      sb.append("" IS NULL"");
    }
 else {
      super.makeRHSWhereString(entity,entityConditionParams,sb,field,rhs,datasourceInfo);
    }
  }
}
;
",1,3,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
212,public static final AbstractType<?> partitionOrdering = new PartitionerDefinedOrder(instance);,"public static final AbstractType<?> partitionOrdering=new PartitionerDefinedOrder(instance);
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
213,"private Submit applyOptions = new Submit(""apply"", ""Apply Options"", this, ""onApplyOptionsClick"");","private Submit applyOptions=new Submit(""apply"",""Apply Options"",this,""onApplyOptionsClick"");
",1,2,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
214,"public static final BinaryFunction<Object, Object, Object> FUNCTION = LeftIdentity.<Object, Object>function();","/** 
 * Left-identity function.
 */
public static final BinaryFunction<Object,Object,Object> FUNCTION=LeftIdentity.<Object,Object>function();
",1,8,12,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
215,private RoutingService.Builder[] routingServiceBuilders;,"private RoutingService.Builder[] routingServiceBuilders;
",1,1,4,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
216,"final static Logger DUMP = Logger.getLogger(className + "".DUMP"");","final static Logger DUMP=Logger.getLogger(className + "".DUMP"");
",1,3,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
217,"@MetastoreFieldDefinition(column = MetastoreColumn.LOCATION, scopes = {TABLE, SEGMENT, FILE, ROW_GROUP}) private final String location;","@MetastoreFieldDefinition(column=MetastoreColumn.LOCATION,scopes={TABLE,SEGMENT,FILE,ROW_GROUP}) private final String location;
",1,8,12,,"SimpleName(NormalAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(MemberValuePair-name, NormalAnnotation-values, FieldDeclaration-modifiers, ),
QualifiedName(MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(MemberValuePair-name, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(ArrayInitializer-expressions, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(ArrayInitializer-expressions, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(ArrayInitializer-expressions, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(ArrayInitializer-expressions, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
218,private final VectorMatch match = VectorMatch.wrap(new int[selector.getMaxVectorSize()]);,"private final VectorMatch match=VectorMatch.wrap(new int[selector.getMaxVectorSize()]);
",1,8,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
219,private static final NilColumnValueSelector INSTANCE = NullHandling.sqlCompatible(),"private static final NilColumnValueSelector INSTANCE=NullHandling.sqlCompatible() ? new SqlCompatibleNilColumnValueSelector() : new NilColumnValueSelector();
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
220,"private static final Committed NIL = new Committed(ImmutableMap.of(), null);","private static final Committed NIL=new Committed(ImmutableMap.of(),null);
",1,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
221,"private Map<Integer,Map<Integer,Double>> minimumDistances = null;","private Map<Integer,Map<Integer,Double>> minimumDistances=null;
",1,5,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
222,LocalDateTime nextBeat = now.minusDays(1).truncatedTo(ChronoUnit.DAYS);,"LocalDateTime nextBeat=now.minusDays(1).truncatedTo(ChronoUnit.DAYS);
",1,1,7,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
223,final PrintWriter writer = spy(new PrintWriter(System.out));,"final PrintWriter writer=spy(new PrintWriter(System.out));
",1,1,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
224,private Class<? extends SingleProcessHBaseCluster.MiniHBaseClusterRegionServer> rsClass = null;,"private Class<? extends SingleProcessHBaseCluster.MiniHBaseClusterRegionServer> rsClass=null;
",1,2,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
225,"private final Map<String, Supplier<byte[]>> entries = new HashMap<>();","private final Map<String,Supplier<byte[]>> entries=new HashMap<>();
",1,4,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
226,private final Class<?>[] argTypes;,"/** 
 * Argument types. 
 */
private final Class<?>[] argTypes;
",1,1,6,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
"
227,private static final Column [] testGenerateCuboids = new Column[numCubeColumns];,"private static final Column[] testGenerateCuboids=new Column[numCubeColumns];
",1,2,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
228,"public static final IgniteBiFunction<Double, Double, Double> MULT = (a, b) -> a * b;","/** 
 * Function that returns  {@code a * b}. 
 */
public static final IgniteBiFunction<Double,Double,Double> MULT=(a,b) -> a * b;
",1,1,12,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, ),
SimpleName(InfixExpression-leftOperand, LambdaExpression-body, VariableDeclarationFragment-initializer, ),
SimpleName(InfixExpression-rightOperand, LambdaExpression-body, VariableDeclarationFragment-initializer, ),
"
229,public static final double LOG2 = Math.log(2);,"public static final double LOG2=Math.log(2);
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
230,"public static final PinotResourceManagerResponse SUCCESS = new PinotResourceManagerResponse(true, null);","public static final PinotResourceManagerResponse SUCCESS=new PinotResourceManagerResponse(true,null);
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
231,"private static final IKey<String> MinDate = newKey(""minDate"", null);","/** 
 * @see <a href=""http://eonasdan.github.io/bootstrap-datetimepicker/Options/#mindate"">online reference</a>
 */
private static final IKey<String> MinDate=newKey(""minDate"",null);
",1,1,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
232,private int maxMessageSize = 10 * 1024 * 1024;,"/** 
 * Default max message size in chars: ~ 10MB chars. If the mbox file contains larger messages they will not be decoded correctly.
 */
private int maxMessageSize=10 * 1024 * 1024;
",1,1,6,,"Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
NumberLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, ),
"
233,"public static final Predicate<NetworkService> supportsStaticNAT = Predicates.and(new NetworkServiceNamed(""Firewall""),","public static final Predicate<NetworkService> supportsStaticNAT=Predicates.and(new NetworkServiceNamed(""Firewall""),new CapabilitiesInclude(""StaticNat""));
",1,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
234,"public static final Map<ImageState, Image.Status> toPortableImageStatus = ImmutableMap","@VisibleForTesting public static final Map<ImageState,Image.Status> toPortableImageStatus=ImmutableMap.<ImageState,Image.Status>builder().put(ImageState.AVAILABLE,Image.Status.AVAILABLE).put(ImageState.DEREGISTERED,Image.Status.DELETED).put(ImageState.UNRECOGNIZED,Image.Status.UNRECOGNIZED).build();
",1,1,8,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
235,"public static final Map<org.jclouds.openstack.nova.v2_0.domain.Image.Status, Image.Status> toPortableImageStatus = ImmutableMap","@VisibleForTesting public static final Map<org.jclouds.openstack.nova.v2_0.domain.Image.Status,Image.Status> toPortableImageStatus=ImmutableMap.<org.jclouds.openstack.nova.v2_0.domain.Image.Status,Image.Status>builder().put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.ACTIVE,Image.Status.AVAILABLE).put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.SAVING,Image.Status.PENDING).put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.DELETED,Image.Status.DELETED).put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.ERROR,Image.Status.ERROR).put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.UNKNOWN,Image.Status.UNRECOGNIZED).put(org.jclouds.openstack.nova.v2_0.domain.Image.Status.UNRECOGNIZED,Image.Status.UNRECOGNIZED).build();
",1,1,8,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
236,private static final DateTimeFormatter rfc1123DateFormat = DateTimeFormat.forPattern(,"private static final DateTimeFormatter rfc1123DateFormat=DateTimeFormat.forPattern(""EEE, dd MMM yyyyy HH:mm:ss Z"").withLocale(Locale.US).withZone(DateTimeZone.forID(""GMT""));
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
237,private Filter[] pushedFilters = new Filter[]{};,"private Filter[] pushedFilters=new Filter[]{};
",1,3,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ArrayInitializer(ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
238,private final AtomicReference<FinalState> finalState = new AtomicReference<>(null);,"private final AtomicReference<FinalState> finalState=new AtomicReference<>(null);
",1,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
239,"private LeaderAndEpoch notifiedLeader = new LeaderAndEpoch(OptionalInt.empty(), 0);","private LeaderAndEpoch notifiedLeader=new LeaderAndEpoch(OptionalInt.empty(),0);
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
240,private final ObjectProperty<Predicate<TreeTable.Node>> createTreeItemForNodeProperty = new SimpleObjectProperty<>(HIDE_EMPTY_LEAF);,"private final ObjectProperty<Predicate<TreeTable.Node>> createTreeItemForNodeProperty=new SimpleObjectProperty<>(HIDE_EMPTY_LEAF);
",1,3,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
241,private final int index = unpivot[x.index()];,"private final int index=unpivot[x.index()];
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(ArrayAccess-array, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-index, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-index, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
242,private static final List<Object[]> PARAMETERS = Collections.unmodifiableList(,"@SuppressWarnings(""deprecation"") private static final List<Object[]> PARAMETERS=Collections.unmodifiableList(Arrays.asList(new Object[]{BuiltinCiphers.aes128cbc,com.jcraft.jsch.jce.AES128CBC.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.aes128ctr,com.jcraft.jsch.jce.AES128CTR.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.tripledescbc,com.jcraft.jsch.jce.TripleDESCBC.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.blowfishcbc,com.jcraft.jsch.jce.BlowfishCBC.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.aes192cbc,com.jcraft.jsch.jce.AES192CBC.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.aes192ctr,com.jcraft.jsch.jce.AES192CTR.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.aes256cbc,com.jcraft.jsch.jce.AES256CBC.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.aes256ctr,com.jcraft.jsch.jce.AES256CTR.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.arcfour128,com.jcraft.jsch.jce.ARCFOUR128.class,NUM_LOADTEST_ROUNDS},new Object[]{BuiltinCiphers.arcfour256,com.jcraft.jsch.jce.ARCFOUR256.class,NUM_LOADTEST_ROUNDS}));
",1,1,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
243,"public boolean captureScreen = Boolean.valueOf(System.getProperty(""jemmy.screen.capture"", ""true"")).booleanValue();","/** 
 * screen capture feature in case of failure is enabled by default
 */
public boolean captureScreen=Boolean.valueOf(System.getProperty(""jemmy.screen.capture"",""true"")).booleanValue();
",1,1,10,,"Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
244,"private static final StopOrStep STOP = new StopOrStep(true, 0, 0);","private static final StopOrStep STOP=new StopOrStep(true,0,0);
",1,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
245,"protected static final Method ISIDENTICAL = getMethod(EJBObject.class, ""isIdentical"", EJBObject.class);","protected static final Method ISIDENTICAL=getMethod(EJBObject.class,""isIdentical"",EJBObject.class);
",1,1,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
246,private Optional<CommitTable.Client> commitTableClient = Optional.absent();,"private Optional<CommitTable.Client> commitTableClient=Optional.absent();
",1,1,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
247,private final boolean  isFloat;,"/** 
 * {@code true} for floating point number. 
 */
private final boolean isFloat;
",1,1,6,,"TextElement(TagElement-fragments, TagElement-fragments, Javadoc-tags, FieldDeclaration-javadoc, ),
TextElement(TagElement-fragments, Javadoc-tags, FieldDeclaration-javadoc, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
248,"private final String workingDirectory = String.format(""%s/target/paxexam/%s/%s"", PathUtils.getBaseDir(), getClass().getSimpleName(), UUID.randomUUID());","private final String workingDirectory=String.format(""%s/target/paxexam/%s/%s"",PathUtils.getBaseDir(),getClass().getSimpleName(),UUID.randomUUID());
",1,1,13,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
249,"private String globalBrooklynPropertiesFile = Os.mergePaths(Os.home(), "".brooklyn"", ""brooklyn.properties"");","private String globalBrooklynPropertiesFile=Os.mergePaths(Os.home(),"".brooklyn"",""brooklyn.properties"");
",2,139,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
250,private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(JpaLogger.class);,"/** 
 * The logger.
 */
private static final org.slf4j.Logger LOG=LoggerFactory.getLogger(JpaLogger.class);
",2,2,8,,"Modifier(),
Modifier(),
Modifier(),
QualifiedName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
251,private static byte[] data = null;,"private static byte[] data=null;
",2,19,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
252,"@NonNull private final Function<JdoObjectIdDecodingRequest, Object> parser;","@NonNull private final Function<JdoObjectIdDecodingRequest,Object> parser;
",2,114,7,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
253,"protected static String OPEN = org.netbeans.jellytools.Bundle.getStringTrimmed(""org.openide.actions.Bundle"", ""Open"");","protected static String OPEN=org.netbeans.jellytools.Bundle.getStringTrimmed(""org.openide.actions.Bundle"",""Open"");
",2,6,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
254,"private transient volatile Set<Map.Entry<K, V>> entrySet;","/** 
 * The  {@link #entrySet()} view
 */
private transient volatile Set<Map.Entry<K,V>> entrySet;
",2,2,8,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
255,"private Consumer<String> info = (ln) -> logger.info(""{}"", ln);","private Consumer<String> info=(ln) -> logger.info(""{}"",ln);
",2,2,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
256,private static final List<Data[]> LIST = new ArrayList<Data[]>();,"/** 
 * List of all RNGs implemented in the library. 
 */
private static final List<Data[]> LIST=new ArrayList<Data[]>();
",2,3,10,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
257,"Integer[] testIntegerArray = {10, 11, 12, 13, 14};","Integer[] testIntegerArray={10,11,12,13,14};
",2,2,8,,"SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
258,"private Key k = null, pubK = null;","private Key k=null, pubK=null;
",2,2,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
259,"private final Map<Integer, T2<ReservationReason, Map<Integer, CheckpointEntry>>> earliestValidCheckpoints;","/** 
 * Map (groupId, Reason why reservation cannot be made deeper): Map (partitionId, earliest valid checkpoint to history search)).
 */
private final Map<Integer,T2<ReservationReason,Map<Integer,CheckpointEntry>>> earliestValidCheckpoints;
",2,2,10,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
"
260,"private static final String TOSTRING = ""@"" + BeforeDestroyed.class.getName() + ""("";","private static final String TOSTRING=""@"" + BeforeDestroyed.class.getName() + ""("";
",2,3,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
261,"public static final IgniteFunction<List<RPropParameterUpdate>, RPropParameterUpdate> SUM = RPropParameterUpdate::sum;","/** 
 * Sums updates returned by different trainings. 
 */
public static final IgniteFunction<List<RPropParameterUpdate>,RPropParameterUpdate> SUM=RPropParameterUpdate::sum;
",2,3,10,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(ExpressionMethodReference-expression, VariableDeclarationFragment-initializer, ),
SimpleName(ExpressionMethodReference-name, VariableDeclarationFragment-initializer, ),
"
262,"private final LongAdderMetric joinedNodesCnt = new LongAdderMetric(metricName(DISCO_METRICS, ""JoinedNodes""),","/** 
 */
private final LongAdderMetric joinedNodesCnt=new LongAdderMetric(metricName(DISCO_METRICS,""JoinedNodes""),""Joined nodes count"");
",2,2,8,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
263,@Expose private final int size;,"@Expose private final int size;
",2,2,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
264,"Class<?>[] encoders=new Class<?>[0], parsers=new Class<?>[0], serializers=new Class<?>[0];","Class<?>[] encoders=new Class<?>[0], parsers=new Class<?>[0], serializers=new Class<?>[0];
",2,5,18,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
265,"private final boolean aev, allowEmptyValue, emax, emin, exclusiveMaximum, exclusiveMinimum, multi, r, required, sie, skipIfEmpty, ui, uniqueItems;","private final boolean aev, allowEmptyValue, emax, emin, exclusiveMaximum, exclusiveMinimum, multi, r, required, sie, skipIfEmpty, ui, uniqueItems;
",2,4,16,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
266,"private boolean unmodifiable = false, sparse = false;","private boolean unmodifiable=false, sparse=false;
",2,2,6,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
267,protected static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());,"protected static final Logger LOG=LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
",2,2,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
268,private final RequestProcessor.Task updateContent = rp.create(new Runnable() {,"private final RequestProcessor.Task updateContent=rp.create(new Runnable(){
  @Override public void run(){
    updateContent();
  }
}
);
",2,2,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
269,private int offsetGapLength = Integer.MAX_VALUE / 2;,"private int offsetGapLength=Integer.MAX_VALUE / 2;
",2,2,5,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
270,private static final int REMOVE = -1;,"/** 
 * The ""remove"" operation.  
 */
private static final int REMOVE=-1;
",2,2,7,,"TextElement(TagElement-fragments, Javadoc-tags, FieldDeclaration-javadoc, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
271,"public static final JobExecutionResultImpl SUCCEEDED = new JobExecutionResultImpl(InternalJobState.SUCCEEDED, null, null);","/** 
 * Constant object for the success case. 
 */
public static final JobExecutionResultImpl SUCCEEDED=new JobExecutionResultImpl(InternalJobState.SUCCEEDED,null,null);
",2,2,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
272,private final byte[] sync = new byte[SYNC_HASH_SIZE];,"private final byte[] sync=new byte[SYNC_HASH_SIZE];
",3,145,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
273,"private final Config lower = new Config(""abcdefghijklmnopqrstuvwxyz"").min(3).max(5);","private final Config lower=new Config(""abcdefghijklmnopqrstuvwxyz"").min(3).max(5);
",3,13,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
274,"public static final char QUOTE = '\""';","public static final char QUOTE='\""';
",3,8,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
CharacterLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
275,"private transient volatile Set<Map.Entry<K,V>> entrySet;","private transient volatile Set<Map.Entry<K,V>> entrySet;
",3,23,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
276,@Nullable private Throwable markFailed = null;,"@Nullable private Throwable markFailed=null;
",3,4,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
277,"private final Trigger<? super TaggedUnion<T1, T2>, ? super W> trigger;","private final Trigger<? super TaggedUnion<T1,T2>,? super W> trigger;
",3,4,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
278,private static final Logger LOG = LoggerFactory.getLogger( DefaultChangeLog.class );,"/** 
 * The class logger 
 */
private static final Logger LOG=LoggerFactory.getLogger(DefaultChangeLog.class);
",3,3,8,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
279,private ParallelIndexTuningConfig tuningConfig = new ParallelIndexTestingFactory.TuningConfigBuilder(),"private ParallelIndexTuningConfig tuningConfig=new ParallelIndexTestingFactory.TuningConfigBuilder().partitionsSpec(HASHED_PARTITIONS_SPEC).build();
",3,5,4,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
280,"static byte[] DaysInMonth = new byte[] { 31, 28, 31, 30, 31, 30, 31, 31,","static byte[] DaysInMonth=new byte[]{31,28,31,30,31,30,31,31,30,31,30,31};
",3,9,14,,"Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
281,"transient Set<Map.Entry<K, V>> entrySet = null;","transient Set<Map.Entry<K,V>> entrySet=null;
",3,3,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
282,@Nullable private List<String> disableIssueTypes = new ArrayList<>();,"/** 
 * Disable notifications for the following issue types. See  IssueType#code()   
 */
@Nullable private List<String> disableIssueTypes=new ArrayList<>();
",3,3,6,,"SimpleName(MarkerAnnotation-typeName, ),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
283,"private final Map<ItemId, ItemState> addedStates = (Map<ItemId, ItemState>) new LinkedMap();","/** 
 * Added states
 */
@SuppressWarnings(""unchecked"") private final Map<ItemId,ItemState> addedStates=(Map<ItemId,ItemState>)new LinkedMap();
",3,3,10,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, CastExpression-expression, VariableDeclarationFragment-initializer, ),
"
284,public String[] description = {};,"/** 
 * Optional text lines to use as the description of the help message, displayed between the synopsis and the options list. Initialized from  {@link Command#description()} if the {@code Command} annotation is present,otherwise this is an empty array and the help message has no description. Applications may programmatically set this field to create a custom help message. 
 */
public String[] description={};
",3,3,5,,"Modifier(),
SimpleName(SimpleType-name, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
ArrayInitializer(VariableDeclarationFragment-initializer, ),
"
285,public static final boolean DEBUG = (LEVEL.intValue() <= Level.FINE.intValue());,"public static final boolean DEBUG=(LEVEL.intValue() <= Level.FINE.intValue());
",3,3,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
286,private static final String[][] ISO8859_1_UNESCAPE = invert(ISO8859_1_ESCAPE);,"private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);
",4,6,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
287,"@MetastoreFieldDefinition(column = MetastoreColumn.COLUMNS_STATISTICS, scopes = {ALL}) private final Map<String, String> columnsStatistics;","@MetastoreFieldDefinition(column=MetastoreColumn.COLUMNS_STATISTICS,scopes={ALL}) private final Map<String,String> columnsStatistics;
",4,6,11,,"SimpleName(NormalAnnotation-typeName, FieldDeclaration-modifiers, ),
SimpleName(MemberValuePair-name, NormalAnnotation-values, FieldDeclaration-modifiers, ),
QualifiedName(MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(MemberValuePair-name, NormalAnnotation-values, FieldDeclaration-modifiers, ),
SimpleName(ArrayInitializer-expressions, MemberValuePair-value, NormalAnnotation-values, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
288,"@SerializedName(""login"") private String login;","@SerializedName(""login"") private String login;
",4,4,5,,"SimpleName(SingleMemberAnnotation-typeName, FieldDeclaration-modifiers, ),
StringLiteral(SingleMemberAnnotation-value, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
289,@SetFromFlag protected boolean targetIsSsl = false;,"@SetFromFlag protected boolean targetIsSsl=false;
",4,7,5,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
290,private final ThreadLocal<TxnType> transactionType = withInitial(() -> null);,"private final ThreadLocal<TxnType> transactionType=withInitial(() -> null);
",4,4,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
291,"private static final APIResult SUCCESS = new APIResult(Status.SUCCEEDED, null);","private static final APIResult SUCCESS=new APIResult(Status.SUCCEEDED,null);
",4,4,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
292,protected final List<Throwable> errors = Collections.synchronizedList(MutableList.<Throwable>of());,"protected final List<Throwable> errors=Collections.synchronizedList(MutableList.<Throwable>of());
",5,30,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
293,"private Duration period = Duration.of(30, TimeUnit.SECONDS);","private Duration period=Duration.of(30,TimeUnit.SECONDS);
",5,5,7,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
294,"private Item<String[]>           tripleIndexes         = new Item<>(StoreParamsConst.tripleIndexes, false);","private Item<String[]> tripleIndexes=new Item<>(StoreParamsConst.tripleIndexes,false);
",5,35,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
295,"private static final AvroType<Void> nulls = create(Void.class, Schema.Type.NULL);","private static final AvroType<Void> nulls=create(Void.class,Schema.Type.NULL);
",5,5,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
296,private static ProjectStage[] values = null;,"/** 
 * All the registered ProjectStage values. We don't need to make this volatile because of the classloader guarantees of the VM.
 */
private static ProjectStage[] values=null;
",5,5,6,,"Modifier(),
Modifier(),
SimpleName(SimpleType-name, ArrayType-elementType, ),
Dimension(ArrayType-dimensions, ),
SimpleName(VariableDeclarationFragment-name, ),
NullLiteral(VariableDeclarationFragment-initializer, ),
"
297,private static final int SHUTDOWN   =  0 << COUNT_BITS;,"private static final int SHUTDOWN=0 << COUNT_BITS;
",5,6,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
298,private final long endTime = System.currentTimeMillis() + RAND.nextInt(1000) + 500;,"/** 
 * End time. 
 */
private final long endTime=System.currentTimeMillis() + RAND.nextInt(1000) + 500;
",5,8,10,,"Modifier(),
Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
NumberLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, ),
"
299,"private transient EqualsBean equals = new EqualsBean(Forecast.class, this);","private transient EqualsBean equals=new EqualsBean(Forecast.class,this);
",5,6,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
300,private CharBuffer view;,"/** 
 * A view over the enclosing byte buffer. 
 */
private CharBuffer view;
",5,5,4,,"TextElement(TagElement-fragments, Javadoc-tags, FieldDeclaration-javadoc, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
301,public static final com.google.protobuf.Parser<Foo> PARSER = new com.google.protobuf.AbstractParser<Foo>() {,"@java.lang.Deprecated public static final com.google.protobuf.Parser<Foo> PARSER=new com.google.protobuf.AbstractParser<Foo>(){
  public Foo parsePartialFrom(  com.google.protobuf.CodedInputStream input,  com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
    return new Foo(input,extensionRegistry);
  }
}
;
",6,7,8,,"Modifier(),
Modifier(),
Modifier(),
QualifiedName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
"
302,"private ImmutableMap.Builder<String, String> tags = ImmutableMap.<String, String> builder();","private ImmutableMap.Builder<String,String> tags=ImmutableMap.<String,String>builder();
",6,26,9,,"Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
303,private char zzBuffer[] = new char[ZZ_BUFFERSIZE];,"/** 
 * this buffer contains the current text to be matched and is the source of the yytext() string 
 */
private char zzBuffer[]=new char[ZZ_BUFFERSIZE];
",6,6,7,,"Modifier(),
PrimitiveType(),
SimpleName(VariableDeclarationFragment-name, ),
Dimension(VariableDeclarationFragment-extraDimensions2, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, ),
"
304,public static final ComparatorFunction<Comparable<?>> INSTANCE = ComparatorFunction.<Comparable<?>>instance();,"/** 
 * Basic ComparatorFunction instance.
 */
public static final ComparatorFunction<Comparable<?>> INSTANCE=ComparatorFunction.<Comparable<?>>instance();
",7,7,11,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-type, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, ),
WildcardType(ParameterizedType-typeArguments, MethodInvocation-typeArguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
"
305,"private Map<Long, List<HadoopyShardSpec>> shardSpecs = Collections.emptyMap();","private Map<Long,List<HadoopyShardSpec>> shardSpecs=Collections.emptyMap();
",7,7,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
306,"@NotNull private static final String AND = ""and"";","@NotNull private static final String AND=""and"";
",7,7,7,,"SimpleName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
307,public static final int DIE = 1 << 0;,"public static final int DIE=1 << 0;
",8,12,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
308,"private static final ColorBuffer.ColorAttr BOLD = new ColorAttr(""\033[1m"");","private static final ColorBuffer.ColorAttr BOLD=new ColorAttr(""\033[1m"");
",8,8,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
309,"private Item<FileMode>           fileMode              = new Item<>(StoreParamsConst.fileMode, false);","/** 
 * Database and query configuration 
 */
private Item<FileMode> fileMode=new Item<>(StoreParamsConst.fileMode,false);
",8,9,7,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
310,"private static final IKey<Boolean> Readonly = newKey(""readonly"", false);","/** 
 */
private static final IKey<Boolean> Readonly=newKey(""readonly"",false);
",9,9,9,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, ),
"
311,public static final int DEBUG = TRACE + 10;,"public static final int DEBUG=TRACE + 10;
",11,12,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
312,"private static final Method GETPRIMARYKEY = getMethod(EJBObject.class, ""getPrimaryKey"", null);","private static final Method GETPRIMARYKEY=getMethod(EJBObject.class,""getPrimaryKey"",null);
",12,12,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
313,Class<? extends Encoder>[] encoders = new Class[0];,"Class<? extends Encoder>[] encoders=new Class[0];
",18,18,7,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
314,"public static final Schema SCHEMA = Schema.of(TableMetadataUnit.class, Builder.class);","public static final Schema SCHEMA=Schema.of(TableMetadataUnit.class,Builder.class);
",19,87,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
315,private InetSocketAddress[] favoredNodes = null;,"private InetSocketAddress[] favoredNodes=null;
",19,19,5,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
316,private static final byte[] EMPTY = new byte[0];,"private static final byte[] EMPTY=new byte[0];
",21,182,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
PrimitiveType(ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
317,private final Class<? extends Throwable>[] abortOn;,"private final Class<? extends Throwable>[] abortOn;
",21,21,6,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, FieldDeclaration-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
"
318,public static final OutParameter ARRAY         = new OutParameter(){ @Override,"public static final OutParameter ARRAY=new OutParameter(){
  @Override public int getType(){
    return Types.ARRAY;
  }
}
;
",29,29,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MarkerAnnotation-typeName, MethodDeclaration-modifiers, AnonymousClassDeclaration-bodyDeclarations, ClassInstanceCreation-anonymousClassDeclaration, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
319,@java.lang.Deprecated public static final com.google.protobuf.Parser<MajorType>,"@java.lang.Deprecated public static final com.google.protobuf.Parser<MajorType> PARSER=new com.google.protobuf.AbstractParser<MajorType>(){
  @java.lang.Override public MajorType parsePartialFrom(  com.google.protobuf.CodedInputStream input,  com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
    return new MajorType(input,extensionRegistry);
  }
}
;
",81,81,6,,"QualifiedName(MarkerAnnotation-typeName, FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
QualifiedName(SimpleType-name, ParameterizedType-type, FieldDeclaration-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, FieldDeclaration-type, ),
"
