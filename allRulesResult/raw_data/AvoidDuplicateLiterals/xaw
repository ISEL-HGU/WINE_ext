22000,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,630,,"        Assert.assertEquals(""NUM_OF_WRITE_LEDGERS_REMOVED_CACHE_EXPIRY"", 0,"
22001,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,632,,"        Assert.assertEquals(""NUM_OF_WRITE_LEDGERS_REMOVED_CACHE_MAXSIZE"", 0,"
22002,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,634,,"        Assert.assertEquals(""NUM_LEDGERS_HAVING_MULTIPLE_ENTRYLOGS"", 0,"
22003,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java,636,,"        Assert.assertEquals(""ENTRYLOGS_PER_LEDGER SuccessCount"", 0, entryLogsPerLedger.getSuccessCount());"
22004,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryMemTableTest.java,244,,"                assertTrue(ledgerId + "":"" + entryId + "" is duplicate in mem-table!"","
22005,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryMemTableTest.java,330,,"                assertEquals(""listOfEntries should be sorted"", Long.valueOf(i + 1), listOfEntries.get(i));"
22006,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,151,,"            byte[] masterKey = ""blah"".getBytes();"
22007,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,158,,"            fail(""Failed to add entry."");"
22008,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,273,,"        File ledgerDir1 = createTempDir(""bkTest"", "".dir"");"
22009,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,273,,"        File ledgerDir1 = createTempDir(""bkTest"", "".dir"");"
22010,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,335,,"            b.addEntry(packet, false, new BookieImpl.NopWriteCallback(), null, ""passwd"".getBytes());"
22011,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,738,,"        assertTrue(""EntryMemTable SnapShot is expected to be empty"", memTable.snapshot.isEmpty());"
22012,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java,747,,"        assertEquals(""Flusher called"", 1, flushTestSortedLedgerStorage.getNumOfTimesFlushSnapshotCalled());"
22013,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerDirsManagerTest.java,93,,"        File tmpDir = createTempDir(""bkTest"", "".dir"");"
22014,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerDirsManagerTest.java,93,,"        File tmpDir = createTempDir(""bkTest"", "".dir"");"
22015,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerDirsManagerTest.java,143,,"            fail(""Should not reach here due to there is no writable ledger dir."");"
22016,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,204,,"        File tmpDir = createTempDir(""DiskCheck"", ""test"");"
22017,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,204,,"        File tmpDir = createTempDir(""DiskCheck"", ""test"");"
22018,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,217,,"        Assert.assertEquals(""Number of JournalDirs"", 1, conf.getJournalDirs().length);"
22019,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,228,,"        byte[] dataBytes = ""data"".getBytes();"
22020,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,232,,"            LedgerHandle handle = bkClient.createLedgerAdv((long) i, 1, 1, 1, DigestType.CRC32, ""passwd"".getBytes(),"
22021,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageCheckpointTest.java,243,,"        File lastMarkFile = new File(ledgerDir, ""lastMark"");"
22022,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,100,,"        this.rootDir = createTempDir(""bkTest"", "".dir"");"
22023,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,100,,"        this.rootDir = createTempDir(""bkTest"", "".dir"");"
22024,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,220,,"        return (""ledger-"" + ledger + ""-"" + entry);"
22025,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,317,,"        ledgerStorage.setMasterKey(1, ""key"".getBytes());"
22026,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,588,,"                LOG.error(""Got Exception for AddEntry call. LedgerId: "" + ledgerId + "" entryId: "" + entryId, e);"
22027,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,638,,"                LOG.error(""Got Exception for GetEntry call. LedgerId: "" + ledgerId + "" entryId: "" + entryId, e);"
22028,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,650,,"    @FlakyTest(value = ""https://github.com/apache/bookkeeper/issues/1516"")"
22029,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,786,,"        Assert.assertEquals(""entryLogger's leastUnflushedLogId "", 0L, entryLogger.getLeastUnflushedLogId());"
22030,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,873,,"        Assert.assertEquals(""EntryLogManager class type"", EntryLogManagerForSingleEntryLog.class,"
22031,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,906,,"        Assert.assertEquals(""Number of current active EntryLogs "", 0, entryLogManager.getCopyOfCurrentLogs().size());"
22032,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,907,,"        Assert.assertEquals(""Number of Rotated Logs "", 0, entryLogManager.getRotatedLogChannels().size());"
22033,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1062,,"        assertEquals(""LogChannel for ledger "" + ledgerId + "" should match"", logChannel, currentLogForLedger);"
22034,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1151,,"                assertEquals(""LedgerId "", ledgerId, readLedgerId);"
22035,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1152,,"                assertEquals(""EntryId "", entryId, readEntryId);"
22036,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1153,,"                assertEquals(""Entry Data "", expectedValue, new String(readData));"
22037,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1468,,"                Assert.assertEquals(""EntryLogId for ledger: "" + i, i, entryLogId);"
22038,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestEntryLog.java,1658,,"        Assert.assertEquals(""Number of rotated logchannels"", 0, entryLogManager.getRotatedLogChannels().size());"
22039,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java,84,,"        updateCookie(""-bookieId"", ""hostname"", true);"
22040,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java,115,,"        String[] argv = new String[] { ""updatecookie"", ""-b"", ""invalidBookieID"" };"
22041,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java,189,,"        File journalDir = initV1JournalDirectory(createTempDir(""bookie"", ""journal""));"
22042,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/storage/ldb/DbLedgerStorageTest.java,97,,"        storage.setMasterKey(3, ""key"".getBytes());"
22043,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/storage/ldb/DbLedgerStorageTest.java,126,,"        entry.writeBytes(""entry-1"".getBytes());"
22044,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperAdminTest.java,86,,"    private static final String PASSWORD = ""testPasswd"";"
22045,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperAdminTest.java,100,,"            assertEquals(""LostBookieRecoveryDelay"","
22046,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperAdminTest.java,225,,"        String ledgersRootPath = ""/testledgers"";"
22047,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperAdminTest.java,465,,"            lh.addEntry(""000"".getBytes());"
22048,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperClientTestsWithBookieErrors.java,132,,"        byte[] passwd = ""AAAAAAA"".getBytes();"
22049,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperClientTestsWithBookieErrors.java,142,,"            wlh.addEntry(""foobarfoo"".getBytes());"
22050,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperClientTestsWithBookieErrors.java,149,,"            fail(""It is expected to fail with BKDigestMatchException"");"
22051,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java,131,,"        LOG.info(""Closing bookkeeper client"");"
22052,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java,135,,"            fail(""should have failed, client is closed"");"
22053,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java,168,,"        LOG.info(""Create ledger and add entries to it"");"
22054,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java,260,,"            lh.addEntry(""foobar"".getBytes());"
22055,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperDiskSpaceWeightedLedgerPlacementTest.java,137,,"    @FlakyTest(""https://github.com/apache/bookkeeper/issues/503"")"
22056,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperDiskSpaceWeightedLedgerPlacementTest.java,161,,"            LedgerHandle lh = client.createLedger(3, 3, DigestType.CRC32, ""testPasswd"".getBytes());"
22057,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperDiskSpaceWeightedLedgerPlacementTest.java,172,,"            assertTrue(""Weigheted placement is not honored: "" + Math.abs(ratio1 - multiple),"
22058,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,101,,"        bkc.createLedger(digestType, ""testPasswd"".getBytes()).close();"
22059,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,160,,"                lh.addEntry(""foobar"".getBytes());"
22060,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,217,,"        lh.asyncAddEntry(""test"".getBytes(), new AddCallback() {"
22061,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,370,,"                    ""Expected LAC of rlh: "" + (numOfEntries - 2) + "" actual LAC of rlh: "" + rlh.getLastAddConfirmed(),"
22062,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,370,,"                    ""Expected LAC of rlh: "" + (numOfEntries - 2) + "" actual LAC of rlh: "" + rlh.getLastAddConfirmed(),"
22063,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java,644,,"                        fail(""ByteBuf already released"");"
22064,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieDecommissionTest.java,127,,"            lh1.addEntry(j, ""data"".getBytes());"
22065,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieNetworkAddressChangeTest.java,64,,"                h.append(""foo"".getBytes(""utf-8""));"
22066,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieNetworkAddressChangeTest.java,64,,"                h.append(""foo"".getBytes(""utf-8""));"
22067,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java,284,,"        assertTrue(""Not fully replicated"", verifyFullyReplicated(lh, 3 * numEntries));"
22068,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java,308,,"        LOG.info(""Finished writing all ledger entries so shutdown one of the bookies."");"
22069,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java,372,,"        LOG.info(""Now recover the data on the killed bookie ("" + bookieSrc"
22070,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java,373,,"          + "") and replicate it to a random available one"");"
22071,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java,138,,"        LOG.info(""Ledger ID: "" + lh.getId());"
22072,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java,862,,"        LOG.info(""Ledger ID-1: "" + lh.getId());"
22073,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java,863,,"        LOG.info(""Ledger ID-2: "" + lh2.getId());"
22074,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java,1357,,"            data.writeBytes((""fragment0"" + entryId).getBytes());"
22075,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ExplicitLacTest.java,82,,"            digestType, ""testPasswd"".getBytes());"
22076,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ExplicitLacTest.java,86,,"            wlh.addEntry((""foobar"" + i).getBytes());"
22077,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ExplicitLacTest.java,91,,"                ""Expected LAC of rlh: "" + (numOfEntries - 2) + "" actual LAC of rlh: "" + rlh.getLastAddConfirmed(),"
22078,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ExplicitLacTest.java,91,,"                ""Expected LAC of rlh: "" + (numOfEntries - 2) + "" actual LAC of rlh: "" + rlh.getLastAddConfirmed(),"
22079,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/HandleFailuresTest.java,73,,"        lh.appendAsync(""entry1"".getBytes());"
22080,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/HandleFailuresTest.java,74,,"        lh.appendAsync(""entry2"".getBytes());"
22081,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerClose2Test.java,84,,"        lh.append(""entry1"".getBytes());"
22082,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java,73,,"        String tmp = ""BookKeeper is cool!"";"
22083,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MdcContextTest.java,148,,"            Assert.fail(""should not get here"");"
22084,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MdcContextTest.java,157,,"        MDC.put(MDC_REQUEST_ID, ""ledger_add_entry"");"
22085,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MdcContextTest.java,224,,"        MDC.put(MDC_REQUEST_ID, ""ledger_read_entry"");"
22086,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MetadataUpdateLoopTest.java,78,,"                .newEnsembleEntry(0L, Lists.newArrayList(BookieId.parse(""0.0.0.0:3181""),"
22087,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MetadataUpdateLoopTest.java,79,,"                                          BookieId.parse(""0.0.0.1:3181""),"
22088,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MetadataUpdateLoopTest.java,80,,"                                          BookieId.parse(""0.0.0.2:3181""),"
22089,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/MockBookKeeperTestCase.java,339,,"                @SuppressWarnings(""unchecked"")"
22090,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java,177,,"            assertEquals(""Cardinality"", 3, entriesStriped.cardinality());"
22091,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java,152,,"                    LOG.debug(""Checked ledgers returned {} {}"", rc, badFragments);"
22092,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestDelayEnsembleChange.java,140,,"        byte[] data = ""foobar"".getBytes();"
22093,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestDelayEnsembleChange.java,156,,"        assertEquals(""There should be no ensemble change if delaying ensemble change is enabled."","
22094,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java,62,,"        writelh = bkc.createLedger(digestType, ""password"".getBytes());"
22095,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java,64,,"        String tmp = ""BookKeeper is cool!"";"
22096,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java,77,,"            LOG.error(""Should have thrown an exception"");"
22097,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java,78,,"            fail(""Should have thrown an exception when trying to write"");"
22098,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java,256,,"        System.setProperty(""passwd"", ""testPasswd"");"
22099,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java,97,,"        assertNotNull(""Result shouldn't be null"", result);"
22100,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java,99,,"            LOG.info(""unreplicated fragment: {}"", r);"
22101,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java,149,,"        LOG.info(""Killing "" + lastBookieFromEnsemble + "" from ensemble="""
22102,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java,149,,"        LOG.info(""Killing "" + lastBookieFromEnsemble + "" from ensemble="""
22103,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java,93,,"        byte[] data = ""TestLedgerFragmentReplication"".getBytes();"
22104,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,86,,"        StaticDNSResolver.addNodeToRack(""127.0.0.1"", NetworkTopology.DEFAULT_REGION_AND_RACK);"
22105,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,91,,"        addr1 = new BookieSocketAddress(""127.0.0.2"", 3181);"
22106,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,92,,"        addr2 = new BookieSocketAddress(""127.0.0.3"", 3181);"
22107,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,93,,"        addr3 = new BookieSocketAddress(""127.0.0.4"", 3181);"
22108,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,94,,"        addr4 = new BookieSocketAddress(""127.0.0.5"", 3181);"
22109,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,173,,"        LOG.info(""reorder set : {}"", reorderSet);"
22110,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,181,,"        updateMyRack(""/r1/rack1"");"
22111,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,456,,"        BookieSocketAddress addr5 = new BookieSocketAddress(""127.0.0.6"", 3181);"
22112,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,457,,"        BookieSocketAddress addr6 = new BookieSocketAddress(""127.0.0.7"", 3181);"
22113,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,458,,"        BookieSocketAddress addr7 = new BookieSocketAddress(""127.0.0.8"", 3181);"
22114,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,577,,"        StaticDNSResolver.addNodeToRack(addr2.getHostName(), ""/default-region/r2"");"
22115,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,579,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/default-region/r3"");"
22116,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,606,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/default-region/r4"");"
22117,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,665,,"        StaticDNSResolver.addNodeToRack(addr2.getHostName(), ""/r2"");"
22118,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,667,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/r3"");"
22119,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,719,,"            fail(""Should not get not enough bookies exception even there is only one rack."");"
22120,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,789,,"                bookieSocketAddresses[index] = new BookieSocketAddress(""128.0.0."" + index, 3181).toBookieId();"
22121,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,790,,"                StaticDNSResolver.addNodeToRack(""128.0.0."" + index, ""/default-region/r"" + i);"
22122,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,807,,"        assertEquals(""NUM_WRITABLE_BOOKIES_IN_DEFAULT_RACK guage value"", numOfBookiesInDefaultRack,"
22123,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,840,,"        assertEquals(""Number of writeQuorum sets covered"", ensembleSize,"
22124,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,963,,"            bookieSocketAddressesInDefaultRack[i] = new BookieSocketAddress(""127.0.0."" + (i + 100), 3181).toBookieId();"
22125,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java,1157,,"        assertTrue(""BookieNode should not be from Rack /r0"" + bookieNode.getNetworkLocation(),"
22126,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java,105,,"        BookieSocketAddress addr1 = new BookieSocketAddress(""127.0.0.1"", 3181); // /1 rack"
22127,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java,106,,"        BookieSocketAddress addr2 = new BookieSocketAddress(""127.0.0.2"", 3181); // /2 rack"
22128,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java,107,,"        BookieSocketAddress addr3 = new BookieSocketAddress(""127.0.1.2"", 3181); // /2 rack"
22129,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java,108,,"        BookieSocketAddress addr4 = new BookieSocketAddress(""127.0.0.4"", 3181); // /4 rack"
22130,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadLastConfirmedLongPoll.java,75,,"            lh.addEntry((""data"" + i).getBytes());"
22131,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,93,,"        addr1 = new BookieSocketAddress(""127.0.0.2"", 3181);"
22132,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,94,,"        addr2 = new BookieSocketAddress(""127.0.0.3"", 3181);"
22133,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,95,,"        addr3 = new BookieSocketAddress(""127.0.0.4"", 3181);"
22134,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,96,,"        addr4 = new BookieSocketAddress(""127.0.0.5"", 3181);"
22135,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,98,,"        StaticDNSResolver.addNodeToRack(addr1.getHostName(), ""/r1/rack1"");"
22136,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,183,,"        LOG.info(""reorder set : {}"", reorderSet);"
22137,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,428,,"        StaticDNSResolver.addNodeToRack(addr2.getHostName(), ""/region1/r1"");"
22138,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,429,,"        StaticDNSResolver.addNodeToRack(addr3.getHostName(), ""/region1/r2"");"
22139,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,453,,"        StaticDNSResolver.addNodeToRack(addr3.getHostName(), ""/region2/r3"");"
22140,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,454,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/region3/r4"");"
22141,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,481,,"        StaticDNSResolver.addNodeToRack(addr2.getHostName(), ""/region2/r2"");"
22142,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,482,,"        StaticDNSResolver.addNodeToRack(addr3.getHostName(), ""/region3/r3"");"
22143,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,495,,"            fail(""Should throw BKNotEnoughBookiesException when there is not enough bookies"");"
22144,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,562,,"            fail(""Should not get not enough bookies exception even there is only one rack."");"
22145,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,613,,"        BookieSocketAddress addr5 = new BookieSocketAddress(""127.0.0.6"", 3181);"
22146,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,614,,"        BookieSocketAddress addr6 = new BookieSocketAddress(""127.0.0.7"", 3181);"
22147,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,615,,"        BookieSocketAddress addr7 = new BookieSocketAddress(""127.0.0.8"", 3181);"
22148,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,616,,"        BookieSocketAddress addr8 = new BookieSocketAddress(""127.0.0.9"", 3181);"
22149,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,623,,"        StaticDNSResolver.addNodeToRack(addr6.getHostName(), ""/region1/r12"");"
22150,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,625,,"        StaticDNSResolver.addNodeToRack(addr8.getHostName(), ""/region3/r14"");"
22151,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,663,,"        BookieSocketAddress addr9 = new BookieSocketAddress(""127.0.0.10"", 3181);"
22152,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,721,,"        conf.setProperty(REPP_DISALLOW_BOOKIE_PLACEMENT_IN_REGION_FEATURE_NAME, ""disallowBookies"");"
22153,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,774,,"            ((SettableFeature) featureProvider.scope(""region2"").getFeature(""disallowBookies"")).set(true);"
22154,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java,824,,"        StaticDNSResolver.addNodeToRack(addr3.getHostName(), ""/region1/r3"");"
22155,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,143,,"        BookieSocketAddress addr5 = new BookieSocketAddress(""127.0.0.6"", 3181);"
22156,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,144,,"        BookieSocketAddress addr6 = new BookieSocketAddress(""127.0.0.7"", 3181);"
22157,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,147,,"        StaticDNSResolver.addNodeToRack(addr1.getHostName(), ""/zone1/ud1"");"
22158,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,148,,"        StaticDNSResolver.addNodeToRack(addr2.getHostName(), ""/zone2/ud1"");"
22159,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,149,,"        StaticDNSResolver.addNodeToRack(addr3.getHostName(), ""/zone3/ud1"");"
22160,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,150,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/zone4/ud1"");"
22161,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,246,,"        assertEquals(""PlacementPolicyAdherence"", PlacementPolicyAdherence.MEETS_STRICT,"
22162,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,274,,"        BookieSocketAddress addr7 = new BookieSocketAddress(""127.0.0.8"", 3181);"
22163,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,307,,"            assertTrue(""Bookie from default faultDomain shouldn't be part of ensemble"","
22164,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,328,,"        BookieSocketAddress addr8 = new BookieSocketAddress(""127.0.0.9"", 3181);"
22165,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,329,,"        BookieSocketAddress addr9 = new BookieSocketAddress(""127.0.0.10"", 3181);"
22166,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,330,,"        BookieSocketAddress addr10 = new BookieSocketAddress(""127.0.0.11"", 3181);"
22167,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,336,,"        StaticDNSResolver.addNodeToRack(addr4.getHostName(), ""/zone1/ud2"");"
22168,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,337,,"        StaticDNSResolver.addNodeToRack(addr5.getHostName(), ""/zone2/ud2"");"
22169,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,338,,"        StaticDNSResolver.addNodeToRack(addr6.getHostName(), ""/zone3/ud2"");"
22170,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,339,,"        StaticDNSResolver.addNodeToRack(addr7.getHostName(), ""/zone1/ud3"");"
22171,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,340,,"        StaticDNSResolver.addNodeToRack(addr8.getHostName(), ""/zone2/ud3"");"
22172,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestZoneawareEnsemblePlacementPolicy.java,517,,"        BookieSocketAddress addr11 = new BookieSocketAddress(""127.0.0.12"", 3181);"
22173,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/UpdateLedgerOpTest.java,94,,"            LOG.info(""Create ledger and add entries to it"");"
22174,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/UpdateLedgerOpTest.java,118,,"                assertTrue(""Failed to update the ledger metadata to use bookie host name"","
22175,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/api/ExplicitLACWithWriteHandleAPITest.java,56,,"                writer.append(""foo"".getBytes(""utf-8""));"
22176,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/api/ExplicitLACWithWriteHandleAPITest.java,56,,"                writer.append(""foo"".getBytes(""utf-8""));"
22177,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/api/LedgerMetadataTest.java,98,,"                    fail(""Should thrown error"");"
22178,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/AbstractConfigurationTest.java,79,,"    @SuppressWarnings({ ""unchecked"" })"
22179,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/AbstractZkLedgerManagerTest.java,379,,"            fail(""Should fail on reading ledger metadata if a ledger doesn't exist"");"
22180,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java,269,,"                    LOG.info(""Cleaned {}"", ledgerId);"
22181,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java,281,,"        assertNull(""Should have cleaned nothing"", cleaned.poll());"
22182,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java,161,,"        assertEquals(""Comparing LedgersIds read asynchronously"", lids, ledgersReadAsync);"
22183,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/MetadataDriversTest.java,92,,"            return ""driver1"";"
22184,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/MetadataDriversTest.java,102,,"            return ""driver2"";"
22185,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java,101,,"            fail(""Shouldn't reach here"");"
22186,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java,103,,"            LOG.error(""Received exception"", e);"
22187,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java,104,,"            assertTrue(""Invalid exception"","
22188,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/net/BookieIdTest.java,35,,"        assertEquals(""test"", BookieId.parse(""test"").toString());"
22189,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java,138,,"                .setMasterKey(ByteString.copyFrom(""masterKey"".getBytes()))"
22190,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBookieRequestProcessor.java,152,,"        assertFalse(""writeEntryProcessorV3's toString shouldn't contain flag"", toString.contains(""flag""));"
22191,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java,103,,"                ""Auditor re-election is not happened for auditor failure!"","
22192,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,173,,"        LOG.debug(""Created ledger : "" + ledgerId);"
22193,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,184,,"        LOG.debug(""Waiting for ledgers to be marked as under replicated"");"
22194,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,196,,"        assertTrue(""Ledger is not marked as underreplicated:"" + ledgerId,"
22195,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,199,,"        assertTrue(""Bookie "" + shutdownBookie"
22196,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,200,,"                + ""is not listed in the ledger as missing replica :"" + data,"
22197,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,387,,"        assertFalse(""audit of lost bookie isn't delayed"", underReplicaLatch.await(4, TimeUnit.SECONDS));"
22198,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,388,,"        assertEquals(""under replicated ledgers identified when it was not expected"", 0,"
22199,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java,532,,"        Assert.assertEquals(""auditTask is supposed to be null"", null, auditTask);"
22200,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java,148,,"        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, ""passwd"".getBytes());"
22201,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java,151,,"            lh.addEntry(""testdata"".getBytes());"
22202,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPlacementPolicyCheckTest.java,108,,"            bookieAddress = new BookieSocketAddress(""98.98.98."" + i, 2181);"
22203,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPlacementPolicyCheckTest.java,228,,"        StaticDNSResolver.addNodeToRack(""98.98.98.0"", ""/rack1"");"
22204,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPlacementPolicyCheckTest.java,229,,"        StaticDNSResolver.addNodeToRack(""98.98.98.1"", ""/rack2"");"
22205,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,158,,"        assertNull(""UrLedger already exists!"","
22206,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,161,,"        LOG.info(""Killing Bookie :"" + replicaToKillAddr);"
22207,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,167,,"        LOG.info(""Watching on urLedgerPath:"" + urLedgerZNode"
22208,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,168,,"                + "" to know the status of rereplication process"");"
22209,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,169,,"        assertNotNull(""UrLedger doesn't exists!"","
22210,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,178,,"        LOG.debug(""Waiting to finish the replication of failed bookie : """
22211,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java,183,,"        LOG.info(""Waiting to update the urledger metadata in zookeeper"");"
22212,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java,188,,"        String missingReplica = ""localhost:3181"";"
22213,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java,211,,"            fail(""Shouldn't be able to find a ledger to replicate"");"
22214,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java,238,,"        assertEquals(""Should be the ledger I just marked"", ledger, l);"
22215,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java,565,,"            LOG.debug(""Unexpected exception while marking urLedger"", e);"
22216,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java,170,,"        LOG.info(""Killing Bookie : {}"", replicaToKill);"
22217,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java,174,,"        LOG.info(""New Bookie addr : {}"", newBkAddr);"
22218,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/server/http/TestHttpService.java,165,,"        assertEquals(""true"", configMap.get(""TEST_PROPERTY3""));"
22219,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/server/http/TestHttpService.java,178,,"        @SuppressWarnings(""unchecked"")"
22220,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/server/http/TestHttpService.java,309,,"        String content = ""Apache BookKeeper is cool!"";"
22221,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/server/http/TestHttpService.java,337,,"        params.put(""ledger_id"", ledgerId.toString());"
22222,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/server/http/service/AutoRecoveryStatusServiceTest.java,57,,"        assertEquals(Boolean.TRUE, json.get(""enabled"").asBoolean());"
22223,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,196,,"            LOG.info(""Ledger ID: "" + lh.getId());"
22224,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,210,,"                    LOG.debug(""Entries counter = "" + sync.counter);"
22225,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,213,,"                assertEquals(""Error adding"", BKException.Code.OK, sync.getReturnCode());"
22226,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,216,,"            LOG.debug(""*** WRITE COMPLETE ***"");"
22227,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,224,,"            LOG.debug(""Number of entries written: "" + (lh.getLastAddConfirmed() + 1));"
22228,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,225,,"            assertTrue(""Verifying number of entries written"", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));"
22229,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,234,,"                assertEquals(""Error reading"", BKException.Code.OK, sync.getReturnCode());"
22230,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,248,,"                LOG.debug(""Length of result: "" + result.capacity());"
22231,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,253,,"                assertTrue(""Checking entry "" + i + "" for equality"", origEntry.equals(retrEntry));"
22232,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,261,,"            LOG.error(""Test failed"", e);"
22233,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,262,,"            fail(""Test failed due to BookKeeper exception"");"
22234,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,266,,"            fail(""Test failed due to interruption"");"
22235,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,796,,"                LOG.error(""Unexpected exception"", ex);"
22236,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java,804,,"            assertEquals(""Last confirmed add: "", lac, (numEntriesToWrite * 2) - 1);"
22237,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java,44,,"        System.clearProperty(""metadataServiceUri"");"
22238,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java,56,,"            LedgerHandle lh = bkc.createLedger(1, 1, DigestType.CRC32, ""bk is cool"".getBytes());"
22239,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java,67,,"        assertEquals(""Only one ledger dir should be present"", 1,"
22240,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java,73,,"            ledger.addEntry(""data"".getBytes());"
22241,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java,77,,"        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], ""current""));"
22242,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,100,,"                 { ""JKS"", ""JKS"", false },"
22243,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,101,,"                 { ""PEM"", ""PEM"", false },"
22244,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,103,,"                 { ""PKCS12"", ""PKCS12"", false },"
22245,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,142,,"            baseClientConf.setTLSKeyStorePasswordPath(getResourcePath(""keyStoreClientPassword.txt""));"
22246,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,158,,"            baseClientConf.setTLSTrustStore(getResourcePath(""server-cert.pem""));"
22247,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,164,,"            baseClientConf.setTLSTrustStorePasswordPath(getResourcePath(""keyStoreServerPassword.txt""));"
22248,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,281,,"        byte[] passwd = ""testPassword"".getBytes();"
22249,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,283,,"        byte[] testEntry = ""testEntry"".getBytes();"
22250,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/tls/TestTLS.java,535,,"            fail(""Shouldn't be able to connect"");"
22251,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/AvailabilityOfEntriesOfLedgerTest.java,59,,"            assertEquals(""Expected total number of entries"", tempArray.length,"
22252,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/AvailabilityOfEntriesOfLedgerTest.java,62,,"                assertTrue(tempArray[j] + "" is supposed to be available"","
22253,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/SubTreeCacheTest.java,202,,"                        , ""/a/a"""
22254,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/SubTreeCacheTest.java,203,,"                        , ""/a/a/a"""
22255,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/SubTreeCacheTest.java,226,,"        tree.createNode(""/a/a/c"");"
22256,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java,51,,"        File placeHolderDir = IOUtils.createTempDir(""DiskCheck"", ""test-placeholder"");"
22257,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java,53,,"        File placeHolder = new File(placeHolderDir, ""test"");"
22258,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java,81,,"        assertNull(map.put(1, ""one""));"
22259,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java,84,,"        assertNull(map.put(2, ""two""));"
22260,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java,100,,"        assertEquals(map.put(1, ""uno""), ""one"");"
22261,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java,112,,"        assertFalse(map.remove(0, ""zero""));"
22262,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java,196,,"        String value = ""value"";"
22263,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongLongHashMapTest.java,376,,"            fail(""should have failed"");"
22264,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongLongPairHashMapTest.java,305,,"            fail(""should have failed"");"
22265,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java,81,,"        assertNull(map.put(""1"", ""one""));"
22266,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java,84,,"        assertNull(map.put(""2"", ""two""));"
22267,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java,100,,"        assertEquals(map.put(""1"", ""uno""), ""one"");"
22268,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java,112,,"        assertFalse(map.remove(""0"", ""zero""));"
22269,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java,165,,"        String value = ""value"";"
22270,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java,185,,"        Assert.assertTrue(""Client failed to connect an alive ZooKeeper."","
22271,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java,230,,"        byte[] data = ""test"".getBytes();"
22272,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java,233,,"        logger.info(""Create znode "" + path);"
22273,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java,235,,"        logger.info(""Created znode "" + path);"
22274,./TargetProjects/bookkeeper/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java,250,,"        client.create(path + ""/children"", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"
22275,./TargetProjects/bookkeeper/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/codahale/FastTimerTest.java,89,,"        assertEquals(""FastTimer.getCount()"", 10001, t.getCount());"
22276,./TargetProjects/bookkeeper/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/codahale/FastTimerTest.java,90,,"        assertEquals(""FastSnapshot.getMin()"", 1, s.getMin());"
22277,./TargetProjects/bookkeeper/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/codahale/FastTimerTest.java,91,,"        assertEquals(""FastSnapshot.getMax()"", TimeUnit.MICROSECONDS.toNanos(10000), s.getMax());"
22278,./TargetProjects/bookkeeper/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/codahale/FastTimerTest.java,92,,"        assertEquals(""FastSnapshot.getMean()"", TimeUnit.MICROSECONDS.toNanos(5000), (long) s.getMean());"
22279,./TargetProjects/bookkeeper/bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/codahale/FastTimerTest.java,96,,"        assertEquals(""FastSnapshot.getValue(0.99)"", TimeUnit.MICROSECONDS.toNanos(9900), (long) s.getValue(0.99));"
22280,./TargetProjects/bookkeeper/bookkeeper-stats-providers/prometheus-metrics-provider/src/test/java/org/apache/bookkeeper/stats/prometheus/TestPrometheusFormatter.java,59,,"        OpStatsLogger opStats1 = statsLogger.scopeLabel(""test_label"", ""test_value"")"
22281,./TargetProjects/bookkeeper/bookkeeper-stats-providers/prometheus-metrics-provider/src/test/java/org/apache/bookkeeper/stats/prometheus/TestPrometheusFormatter.java,59,,"        OpStatsLogger opStats1 = statsLogger.scopeLabel(""test_label"", ""test_value"")"
22282,./TargetProjects/bookkeeper/bookkeeper-stats-providers/prometheus-metrics-provider/src/test/java/org/apache/bookkeeper/stats/prometheus/TestPrometheusFormatter.java,85,,"        assertEquals(""false"", m.tags.get(""success""));"
22283,./TargetProjects/bookkeeper/bookkeeper-stats-providers/prometheus-metrics-provider/src/test/java/org/apache/bookkeeper/stats/prometheus/TestPrometheusFormatter.java,85,,"        assertEquals(""false"", m.tags.get(""success""));"
22284,./TargetProjects/bookkeeper/bookkeeper-stats-providers/prometheus-metrics-provider/src/test/java/org/apache/bookkeeper/stats/prometheus/TestPrometheusFormatter.java,91,,"        assertEquals(""true"", m.tags.get(""success""));"
22285,./TargetProjects/bookkeeper/circe-checksum/src/test/java/com/scurrilous/circe/checksum/ChecksumTest.java,38,,"        final byte[] bytes = ""Some String"".getBytes();"
22286,./TargetProjects/bookkeeper/metadata-drivers/etcd/src/main/java/org/apache/bookkeeper/metadata/etcd/EtcdUtils.java,55,,"        return String.format(""%s/%s"", scope, BUCKETS_NODE);"
22287,./TargetProjects/bookkeeper/metadata-drivers/etcd/src/test/java/org/apache/bookkeeper/metadata/etcd/EtcdRegistrationTest.java,239,,"        BookieId bookieId = BookieId.parse(runtime.getMethodName() + "":3181"");"
22288,./TargetProjects/bookkeeper/metadata-drivers/etcd/src/test/java/org/apache/bookkeeper/metadata/etcd/helpers/KeySetReaderTest.java,70,,"                ""VersionedKeys : "" + versionedKeys,"
22289,./TargetProjects/bookkeeper/metadata-drivers/etcd/src/test/java/org/apache/bookkeeper/metadata/etcd/helpers/KeySetReaderTest.java,248,,"                String key = String.format(""%s-%03d"", prefix, i);"
22290,./TargetProjects/bookkeeper/microbenchmarks/src/main/java/org/apache/bookkeeper/stats/codahale/TimerBenchmark.java,78,,"                logger = new CodahaleMetricsProvider().getStatsLogger(""test"");"
22291,./TargetProjects/bookkeeper/stream/api/src/main/java/org/apache/bookkeeper/api/kv/options/Options.java,29,,"    @SuppressWarnings(""rawtypes"")"
22292,./TargetProjects/bookkeeper/stream/api/src/main/java/org/apache/bookkeeper/api/kv/options/Options.java,197,,"    @SuppressWarnings(""unchecked"")"
22293,./TargetProjects/bookkeeper/stream/clients/java/all/src/test/java/org/apache/bookkeeper/clients/StorageClientImplTest.java,86,,"    @SuppressWarnings(""unchecked"")"
22294,./TargetProjects/bookkeeper/stream/clients/java/all/src/test/java/org/apache/bookkeeper/clients/StorageClientImplTest.java,115,,"            .setStreamName(""table1"")"
22295,./TargetProjects/bookkeeper/stream/clients/java/all/src/test/java/org/apache/bookkeeper/clients/StorageClientImplTest.java,124,,"            .setStreamName(""table2"")"
22296,./TargetProjects/bookkeeper/stream/clients/java/base/src/main/java/org/apache/bookkeeper/clients/impl/channel/StorageServerChannel.java,77,,"    @GuardedBy(""this"")"
22297,./TargetProjects/bookkeeper/stream/clients/java/base/src/test/java/org/apache/bookkeeper/clients/utils/ListenableFutureRpcProcessorTest.java,101,,"        String request = ""request"";"
22298,./TargetProjects/bookkeeper/stream/clients/java/base/src/test/java/org/apache/bookkeeper/clients/utils/ListenableFutureRpcProcessorTest.java,102,,"        String response = ""response"";"
22299,./TargetProjects/bookkeeper/stream/clients/java/base/src/test/java/org/apache/bookkeeper/clients/utils/TestNetUtils.java,42,,"        String hostname = ""10.138.10.56"";"
22300,./TargetProjects/bookkeeper/stream/common/src/main/java/org/apache/bookkeeper/common/resolver/AbstractNameResolver.java,45,,"    @GuardedBy(""this"")"
22301,./TargetProjects/bookkeeper/stream/distributedlog/common/src/test/java/org/apache/distributedlog/common/config/TestConcurrentBaseConfiguration.java,32,,"        conf.setProperty(""prop1"", ""1"");"
22302,./TargetProjects/bookkeeper/stream/distributedlog/common/src/test/java/org/apache/distributedlog/common/config/TestConfigurationSubscription.java,74,,"        assertEquals(null, conf.getProperty(""prop1""));"
22303,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/BKLogHandler.java,192,,"                            promise.completeExceptionally(new LogEmptyException(""Log """
22304,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/BKLogHandler.java,193,,"                                    + getFullyQualifiedName() + "" has no records""));"
22305,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/admin/DistributedLogAdmin.java,107,,"                System.out.println(""LogSegments for "" + streamName + "" : "");"
22306,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/thrift/BKDLConfigFormat.java,913,,"        sb.append(""null"");"
22307,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/tools/DistributedLogTool.java,419,,"                                System.out.println(""Thread "" + tid + "" is done."");"
22308,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/tools/DistributedLogTool.java,449,,"            options.addOption(""x"", ""hex"", false, ""Print metadata in hex format"");"
22309,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/tools/DistributedLogTool.java,2018,,"                            System.out.println(""\t-------------------------------"");"
22310,./TargetProjects/bookkeeper/stream/distributedlog/core/src/main/java/org/apache/distributedlog/tools/DistributedLogTool.java,2384,,"            options.addOption(""dlsn"", true, ""Truncate all records older than this dlsn"");"
22311,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestAppendOnlyStreamReader.java,51,,"        writer.write(DLMTestUtil.repeatString(""abc"", 5).getBytes());"
22312,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestAppendOnlyStreamWriter.java,57,,"        byte[] byteStream = DLMTestUtil.repeatString(""abc"", 51).getBytes();"
22313,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestAsyncReaderWriter.java,744,,"        assertFalse(""All writes should succeed"", writeErrors.get());"
22314,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestAsyncReaderWriter.java,1679,,"            fail(""Should have thrown"");"
22315,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogManager.java,1263,,"        ledgerMetadata.addCustomMetadata(""custom"", custom);"
22316,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java,75,,"                .setEnableLedgerAllocatorPool(true).setLedgerAllocatorPoolName(""test"");"
22317,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java,130,,"        String streamName = ""test-stream"";"
22318,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java,171,,"        DistributedLogManager dlm = namespace.openLog(""test1"");"
22319,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java,297,,"        initDlogMeta(namespace, ""test-un"", ""test-stream"");"
22320,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java,444,,"            fail(""Should throw exception after namespace is closed"");"
22321,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,231,,"        ZKDistributedLock lock = createLock(""/test/lock-"" + runtime.getMethodName(), zkc, true);"
22322,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,243,,"        assertEquals(""Last tx id should be "" + (numRecords - 1),"
22323,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,245,,"        assertEquals(""Last acked tx id should be -1"","
22324,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,247,,"        assertEquals(""Last DLSN should be "" + DLSN.InvalidDLSN,"
22325,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,249,,"        assertEquals(""Position should be "" + numRecords,"
22326,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,255,,"        assertEquals(""Last tx id should still be "" + (numRecords - 1),"
22327,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,259,,"        assertEquals(""Position should still be "" + numRecords,"
22328,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,266,,"            assertEquals(""Incorrent ledger sequence number"","
22329,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,268,,"            assertEquals(""Incorrent entry id"","
22330,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,270,,"            assertEquals(""Inconsistent slot id"","
22331,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,277,,"        assertTrue(""Ledger "" + lh.getId() + "" should be closed"", readLh.isClosed());"
22332,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,321,,"        assertEquals(""Last DLSN should still be "" + DLSN.InvalidDLSN,"
22333,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,329,,"                fail(""Should be aborted record "" + i + "" with transmit exception"");"
22334,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,329,,"                fail(""Should be aborted record "" + i + "" with transmit exception"");"
22335,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestBKLogSegmentWriter.java,331,,"                assertTrue(""Record "" + i + "" should be aborted because of ledger fenced"","
22336,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestEntry.java,55,,"        assertEquals(""zero bytes"", HEADER_LENGTH, writer.getNumBytes());"
22337,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestEntry.java,56,,"        assertEquals(""zero records"", 0, writer.getNumRecords());"
22338,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestEntry.java,116,,"            LogRecord record = new LogRecord(i, (""record-"" + i).getBytes(UTF_8));"
22339,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestEntry.java,121,,"            assertEquals((i + 1) + "" records"", (i + 1), writer.getNumRecords());"
22340,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestLogSegmentsZK.java,86,,"                .setLedgerAllocatorPoolName(""test"");"
22341,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestWriteLimiter.java,51,,"        WriteLimiter limiter = new WriteLimiter(""test"", streamLimiter, globalLimiter);"
22342,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestZooKeeperClient.java,109,,"        ZooKeeperClient zkcAuth = buildAuthdClient(""test"");"
22343,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestZooKeeperClient.java,110,,"        zkcAuth.get().create(""/test"", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"
22344,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/TestZooKeeperClient.java,111,,"        zkcAuth.get().create(""/test/key1"", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"
22345,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/bk/TestLedgerAllocator.java,195,,"        long eid = lh.addEntry(""hello world"".getBytes());"
22346,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java,51,,"        writer.setProperty(""feature_1"", ""10000"");"
22347,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java,52,,"        writer.setProperty(""feature_2"", ""5000"");"
22348,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java,69,,"        Feature feature3 = provider.getFeature(""feature_3"");"
22349,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java,87,,"        overlayWriter.setProperty(""feature_2"", ""6000"");"
22350,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java,88,,"        overlayWriter.setProperty(""feature_4"", ""6000"");"
22351,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,145,,"        assertNotNull(""LogSegment "" + segment + "" should be created"","
22352,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,145,,"        assertNotNull(""LogSegment "" + segment + "" should be created"","
22353,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,188,,"            assertTrue(""Should throw NoNodeException if log segment doesn't exist"","
22354,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,374,,"                logger.info(""Received segments : {}"", segments);"
22355,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,385,,"        assertTrue(""Should contain listener"", lsmStore.listeners.containsKey(rootPath));"
22356,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,390,,"        assertEquals(""Should receive one segment list update"","
22357,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,394,,"        assertEquals(""List of segments should be same"","
22358,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKLogSegmentMetadataStore.java,416,,"        assertEquals(""List of segments should be updated"","
22359,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/TestZKNamespaceWatcher.java,123,,"        expectedLogs.add(""test1"");"
22360,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/federated/TestFederatedZKLogMetadataStore.java,251,,"            fail(""should throw exception when duplicated log found"");"
22361,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/logsegment/TestBKLogSegmentEntryReader.java,166,,"        assertEquals(segments.size() + "" log segments found, expected to be only one"","
22362,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZKLogStreamMetadataStore.java,312,,"        String logIdentifier = ""<default>"";"
22363,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java,42,,"    @SuppressWarnings(""unchecked"")"
22364,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java,47,,"        String logName = ""test-log"";"
22365,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java,48,,"        String logIdentifier = ""<default>"";"
22366,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java,59,,"        String rootPath = ""/test-missing-version"";"
22367,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZkMetadataResolver.java,50,,"    private static final BKDLConfig bkdlConfig = new BKDLConfig(""127.0.0.1:7000"", ""ledgers"");"
22368,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/impl/metadata/TestZkMetadataResolver.java,50,,"    private static final BKDLConfig bkdlConfig = new BKDLConfig(""127.0.0.1:7000"", ""ledgers"");"
22369,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/lock/TestDistributedLock.java,539,,"                fail(""Should fail check write lock since lock is already held by other people"");"
22370,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/lock/TestZKSessionLock.java,669,,"                    logger.error(""Failed on locking lock1 : "", e);"
22371,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/lock/TestZKSessionLock.java,672,,"        }, ""lock1-thread"");"
22372,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,44,,"            new BKDLConfig(""127.0.0.1:7000"", ""127.0.0.1:7000"","
22373,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,45,,"                           ""127.0.0.1:7000"", ""127.0.0.1:7000"", ""ledgers"");"
22374,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,47,,"            new BKDLConfig(""127.0.0.1:7001"", ""127.0.0.1:7002"","
22375,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,48,,"                           ""127.0.0.1:7003"", ""127.0.0.1:7004"", ""ledgers2"");"
22376,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,48,,"                           ""127.0.0.1:7003"", ""127.0.0.1:7004"", ""ledgers2"");"
22377,./TargetProjects/bookkeeper/stream/distributedlog/core/src/test/java/org/apache/distributedlog/metadata/TestDLMetadata.java,116,,"        URI uri = createURI(""/metadata"");"
22378,./TargetProjects/bookkeeper/stream/distributedlog/io/dlfs/src/test/java/org/apache/distributedlog/fs/TestDLFileSystem.java,57,,"        Path path = new Path(""/path/to/"" + runtime.getMethodName());"
22379,./TargetProjects/bookkeeper/stream/distributedlog/protocol/src/test/java/org/apache/distributedlog/TestLogRecordSet.java,49,,"        assertEquals(""zero user bytes"", HEADER_LEN, writer.getNumBytes());"
22380,./TargetProjects/bookkeeper/stream/distributedlog/protocol/src/test/java/org/apache/distributedlog/TestLogRecordSet.java,50,,"        assertEquals(""zero records"", 0, writer.getNumRecords());"
22381,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/api/mvcc/MVCCAsyncStore.java,214,,"                        ""Failed to put ("" + k + "", "" + v + "") to store "" + name());"
22382,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/impl/kv/RocksdbKVStore.java,457,,"        checkNotNull(key, ""key cannot be null"");"
22383,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/impl/mvcc/MVCCAsyncBytesStoreImpl.java,94,,"                return FutureUtils.exception(new InvalidStateStoreException(""State store is not initialized yet.""));"
22384,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/impl/mvcc/MVCCCommandProcessor.java,66,,"                ""Failed to apply command "" + op + "" at revision """
22385,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/impl/mvcc/MVCCCommandProcessor.java,66,,"                ""Failed to apply command "" + op + "" at revision """
22386,./TargetProjects/bookkeeper/stream/statelib/src/main/java/org/apache/bookkeeper/statelib/impl/mvcc/MVCCCommandProcessor.java,67,,"                    + revision + "" to the state store "" + localStore.name());"
22387,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStore.java,82,,"        store.put(null, ""val"");"
22388,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStore.java,144,,"        store.put(""key"", ""val"");"
22389,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStore.java,217,,"        multi.put(""key"", ""value"");"
22390,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStore.java,279,,"            multi.put(""key-"" + i, ""value-"" + i);"
22391,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStore.java,279,,"            multi.put(""key-"" + i, ""value-"" + i);"
22392,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/kv/TestRocksdbKVStoreCheckpoint.java,71,,"        assertEquals(""transaction-1"", store.get(""transaction-id""));"
22393,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/mvcc/TestMVCCAsyncBytesStoreImpl.java,215,,"                fail(""key2 doesn't exist yet"");"
22394,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/mvcc/TestMVCCStoreImpl.java,101,,"        assertNull(store.get(""key""));"
22395,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/mvcc/TestMVCCStoreImpl.java,107,,"        store.put(""key"", ""value"", 1L);"
22396,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/mvcc/op/proto/ProtoCompareImplTest.java,38,,"    private static final ByteString KEY = ByteString.copyFromUtf8(""test-key"");"
22397,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/rocksdb/RocksUtilsTest.java,81,,"            testPrefix + ""/checkpoints/"" + runtime.getMethodName(),"
22398,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/rocksdb/RocksUtilsTest.java,116,,"            testPrefix + ""/checkpoints/"" + runtime.getMethodName() + ""/"" + runtime.getMethodName() + "".sst"","
22399,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/rocksdb/checkpoint/RocksCheckpointerTest.java,368,,"        testStore.addNumKVs(""transaction-1"", numKvs, 0);"
22400,./TargetProjects/bookkeeper/stream/statelib/src/test/java/org/apache/bookkeeper/statelib/impl/rocksdb/checkpoint/RocksCheckpointerTest.java,384,,"        assertEquals(""transaction-1"", testStore.get(""transaction-id""));"
22401,./TargetProjects/bookkeeper/stream/storage/impl/src/test/java/org/apache/bookkeeper/stream/storage/impl/TestStorageContainerStoreImpl.java,316,,"        String colName = ""test-delete-namespace-no-root-storage-container-store"";"
22402,./TargetProjects/bookkeeper/stream/storage/impl/src/test/java/org/apache/bookkeeper/stream/storage/impl/TestStorageContainerStoreImpl.java,326,,"        String colName = ""test-get-namespace-no-root-storage-container-store"";"
22403,./TargetProjects/bookkeeper/stream/storage/impl/src/test/java/org/apache/bookkeeper/stream/storage/impl/routing/RoutingHeaderProxyInterceptorTest.java,186,,"            .setKey(ByteString.copyFromUtf8(""test-key""))"
22404,./TargetProjects/bookkeeper/stream/storage/impl/src/test/java/org/apache/bookkeeper/stream/storage/impl/sc/DefaultStorageContainerControllerTest.java,82,,"        BookieId address1 = new BookieSocketAddress(""127.0.0.1"", 4181).toBookieId();"
22405,./TargetProjects/bookkeeper/tests/integration-tests-utils/src/main/java/org/apache/bookkeeper/tests/integration/utils/BookKeeperClusterUtils.java,95,,"            String bookkeeper = ""/opt/bookkeeper/"" + version + ""/bin/bookkeeper"";"
22406,./TargetProjects/bookkeeper/tests/integration/cluster/src/test/java/org/apache/bookkeeper/tests/integration/stream/BkCtlTest.java,135,,"            ""table"","
22407,./TargetProjects/bookkeeper/tests/integration/cluster/src/test/java/org/apache/bookkeeper/tests/integration/stream/StorageAdminClientTest.java,92,,"            fail(""Should fail on get if namespace "" + notFoundColName + "" doesn't exist"");"
22408,./TargetProjects/bookkeeper/tests/integration/cluster/src/test/java/org/apache/bookkeeper/tests/integration/stream/TableClientTest.java,124,,"        byte[] lKey = ""testing-key"".getBytes(UTF_8);"
22409,./TargetProjects/bookkeeper/tests/integration/smoke/src/test/java/org/apache/bookkeeper/tests/integration/TestDlogCLI.java,81,,"            ""tool"","
22410,./TargetProjects/bookkeeper/tests/integration/smoke/src/test/java/org/apache/bookkeeper/tests/integration/TestDlogCLI.java,85,,"            ""--uri"", dlogUri,"
22411,./TargetProjects/bookkeeper/tests/integration/smoke/src/test/java/org/apache/bookkeeper/tests/integration/TestSmoke.java,90,,"                    writelh.addEntry((""entry-"" + i).getBytes());"
22412,./TargetProjects/bookkeeper/tests/integration/smoke/src/test/java/org/apache/bookkeeper/tests/integration/TestSmoke.java,151,,"        @Cleanup(""shutdown"") ExecutorService writeExecutor = Executors.newSingleThreadExecutor("
22413,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,56,,"        assertTrue(consoleBufferStr.contains(""Commands:""));"
22414,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,57,,"        assertTrue(consoleBufferStr.contains(""Flags:""));"
22415,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,63,,"            ""help"""
22416,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,123,,"            ""-s"", ""string"","
22417,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,140,,"            ""nested"""
22418,./TargetProjects/bookkeeper/tools/framework/src/test/java/org/apache/bookkeeper/tools/framework/CliTest.java,148,,"        assertTrue(consoleBufferStr.contains(""cat""));"
22419,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookie/LedgerCommandTest.java,127,,"        testLedgerCommand(""-id"", ""1"");"
22420,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookies/ListBookiesCommandTest.java,123,,"            ""list"","
22421,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookies/RecoverCommandTest.java,72,,"    private BookieId bookieSocketAddress = BookieId.parse(""127.0.0.1:8000"");"
22422,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/bookies/RecoverCommandTest.java,161,,"        Assert.assertFalse(cmd.apply(bkFlags, new String[] { ""-bs"", ""127.0.0.1:8000,$nonvalidbookieid:8001"" }));"
22423,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/CreateCookieCommandTest.java,104,,"        assertFalse(runCommand(new String[] { ""-cf"", ""test-cookie-file"", INVALID_BOOKIE_ID }));"
22424,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/CreateCookieCommandTest.java,104,,"        assertFalse(runCommand(new String[] { ""-cf"", ""test-cookie-file"", INVALID_BOOKIE_ID }));"
22425,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/GenerateCookieCommandTest.java,89,,"            ""-j"", ""/path/to/journal"","
22426,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/GenerateCookieCommandTest.java,90,,"            ""-l"", ""/path/to/ledgers"","
22427,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/UpdateCookieCommandTest.java,104,,"        assertFalse(runCommand(new String[] { ""-cf"", ""test-cookie-file"", INVALID_BOOKIE_ID }));"
22428,./TargetProjects/bookkeeper/tools/ledger/src/test/java/org/apache/bookkeeper/tools/cli/commands/cookie/UpdateCookieCommandTest.java,104,,"        assertFalse(runCommand(new String[] { ""-cf"", ""test-cookie-file"", INVALID_BOOKIE_ID }));"
22429,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/EnrichersSlightlySimplerYamlTest.java,109,,"        srv0.sensors().set(Sensors.newDoubleSensor(""my.load""), 20.0);"
22430,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/EnrichersSlightlySimplerYamlTest.java,111,,"        EntityAsserts.assertAttributeEventually(dwac, Sensors.newSensor(Double.class, ""my.load.averaged""),"
22431,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/JavaWebAppsIntegrationTest.java,118,,"            final String url = Asserts.succeedsEventually(MutableMap.of(""timeout"", Duration.TEN_SECONDS), new Callable<String>() {"
22432,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/load/AbstractLoadTest.java,323,,"                ""        "" + SimulatedVanillaSoftwareProcessImpl.EXEC_SSH_ON_START.getName() + "": "" + config.execSshOnStart,"
22433,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/longevity/MonitorUtilsTest.java,83,,"    @Test(groups=""UNIX"")"
22434,./TargetProjects/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/longevity/MonitorUtilsTest.java,131,,"            assertEquals(MonitorUtils.searchLog(file, ""line1""), Arrays.asList(""line1""));"
22435,./TargetProjects/brooklyn-library/sandbox/monitoring/src/main/java/org/apache/brooklyn/entity/monitoring/zabbix/ZabbixFeed.java,141,,"        @SuppressWarnings(""unchecked"")"
22436,./TargetProjects/brooklyn-library/sandbox/nosql/src/main/java/org/apache/brooklyn/entity/nosql/infinispan/Infinispan5SshDriver.java,88,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)."
22437,./TargetProjects/brooklyn-library/software/cm/chef/src/main/java/org/apache/brooklyn/entity/chef/ChefAttributeFeed.java,140,,"        @SuppressWarnings(""unchecked"")"
22438,./TargetProjects/brooklyn-library/software/cm/chef/src/main/java/org/apache/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java,195,,"            if (Strings.isNonBlank(primary)) runList = ImmutableList.of(primary+""::""+""start"");"
22439,./TargetProjects/brooklyn-library/software/cm/chef/src/main/java/org/apache/brooklyn/entity/chef/ChefLifecycleEffectorTasks.java,258,,"            throw new IllegalStateException(""The process for ""+entity()+"" appears not to be running (pid file ""+getPidFile()+"")"");"
22440,./TargetProjects/brooklyn-library/software/cm/chef/src/test/java/org/apache/brooklyn/entity/chef/mysql/TypedToyMySqlEntityChef.java,37,,"        config().set(CHEF_COOKBOOK_PRIMARY_NAME, ""mysql"");"
22441,./TargetProjects/brooklyn-library/software/cm/salt/src/main/java/org/apache/brooklyn/entity/cm/salt/SaltHighstate.java,58,,"            @SuppressWarnings(""unchecked"")"
22442,./TargetProjects/brooklyn-library/software/cm/salt/src/main/java/org/apache/brooklyn/entity/cm/salt/impl/SaltLifecycleEffectorTasks.java,38,,"        throw new UnsupportedOperationException(""Legacy SaltEntity no longer supported"");"
22443,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/crate/CrateNodeImpl.java,66,,"                        .onSuccess(HttpValueFunctions.jsonContents(new String[]{""version"", ""build_timestamp""}, String.class)))"
22444,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mariadb/MariaDbSshDriver.java,215,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)"
22445,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/InitSlaveTaskBody.java,182,,"                .environmentVariable(""RUN_DIR"", sourceRunDir)"
22446,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/InitSlaveTaskBody.java,293,,"        log.info(""MySql cluster "" + cluster + "": generating new replication snapshot on master node "" + master + "" with name "" + dumpName);"
22447,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/MySqlSshDriver.java,141,,"        commands.add(installPackage(ImmutableMap.of(""yum"", ""libgcc_s.so.1""), null));"
22448,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/MySqlSshDriver.java,142,,"        commands.add(installPackage(ImmutableMap.of(""yum"", ""libaio.so.1 libncurses.so.5"", ""apt"", ""libaio1 libaio-dev""), null));"
22449,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/MySqlSshDriver.java,282,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)"
22450,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,166,,"        if (DynamicTasks.queue(SshEffectorTasks.ssh(sudoAsUser(""postgres"", ""ls ""+getInstallDir())).allowingNonZeroExitCode()"
22451,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,262,,"            sudo(""chown postgres:postgres "" + getDataDir()),"
22452,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,341,,"                    sudoAsUser(""postgres"", getInstallDir() + ""/bin/psql -p "" + entity.getAttribute(PostgreSqlNode.POSTGRESQL_PORT) +"
22453,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,347,,"                ""cd "" + getInstallDir(),"
22454,./TargetProjects/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,532,,"        newScript(MutableMap.of(""usePidFile"", false), LAUNCHING)"
22455,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mariadb/MariaDbLiveRackspaceTest.java,42,,"    @Test(groups = {""Live""})"
22456,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlClusterIntegrationTest.java,52,,"    @Test(groups=""Integration"")"
22457,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlClusterIntegrationTest.java,82,,"            MySqlNode slave = (MySqlNode) Iterables.getOnlyElement(cluster.invoke(MySqlCluster.RESIZE_BY_DELTA, ImmutableMap.of(""delta"", 1)).getUnchecked());"
22458,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlLiveRackspaceTest.java,42,,"    @Test(groups = {""Live""})"
22459,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlRackspaceLiveTest.java,42,,"    @Test(groups = ""Live"")"
22460,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlTest.java,67,,"                        ""Developer"", null,"
22461,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepEc2LiveTest.java,47,,"    @Test(enabled=false, groups = ""Live"")"
22462,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepIntegrationTest.java,361,,"        startInLocation(app, db1, ""feedback"", db1, ""feedback1"", new LocalhostMachineProvisioningLocation());"
22463,./TargetProjects/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepRackspaceLiveTest.java,46,,"    @Test(groups = ""Live"")"
22464,./TargetProjects/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,224,,"                   .add(""cd "" + getInstallDir())"
22465,./TargetProjects/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,225,,"                   .add(BashCommands.installPackage(ImmutableMap.of(""brew"", ""automake""), ""make""))"
22466,./TargetProjects/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,225,,"                   .add(BashCommands.installPackage(ImmutableMap.of(""brew"", ""automake""), ""make""))"
22467,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,71,,"    @Test(groups = ""Integration"")"
22468,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,76,,"        EntityAsserts.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", 10*60*1000), activeMQ, Startable.SERVICE_UP, true);"
22469,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,77,,"        log.info(""JMX URL is ""+activeMQ.getAttribute(UsesJmx.JMX_URL));"
22470,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,133,,"        Assert.assertTrue(url.contains(""jmxmp""), ""url=""+url);"
22471,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,133,,"        Assert.assertTrue(url.contains(""jmxmp""), ""url=""+url);"
22472,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/kafka/KafkaIntegrationTest.java,69,,"        EntityAsserts.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", 60*1000), zookeeper, Startable.SERVICE_UP, true);"
22473,./TargetProjects/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/qpid/QpidIntegrationTest.java,67,,"    @BeforeMethod(groups = ""Integration"")"
22474,./TargetProjects/brooklyn-library/software/monitoring/src/test/java/org/apache/brooklyn/entity/monitoring/monit/MonitIntegrationTest.java,84,,"        EntityAsserts.assertAttributeEqualsEventually(monitNode, MonitNode.MONIT_TARGET_PROCESS_STATUS, ""Running"");"
22475,./TargetProjects/brooklyn-library/software/network/src/main/java/org/apache/brooklyn/entity/network/bind/BindDnsServerSshDriver.java,110,,"                .body.append(BashCommands.sudo(""service "" + getOsSupport().getServiceName() + "" start""))"
22476,./TargetProjects/brooklyn-library/software/network/src/test/java/org/apache/brooklyn/entity/network/bind/BindDnsServerIntegrationTest.java,71,,"    @Test(groups = ""Integration"")"
22477,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenter.java,65,,"    @SuppressWarnings(""serial"")"
22478,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java,531,,"                .configure(""producer"", this)"
22479,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java,532,,"                .configure(""source"", READ_COMPLETED)"
22480,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraNodeImpl.java,533,,"                .configure(""target"", READS_PER_SECOND_LAST)"
22481,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseCluster.java,45,,"    @SuppressWarnings(""serial"")"
22482,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchdb/CouchDBNodeSshDriver.java,96,,"               ""yum"", ""gcc"","
22483,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchdb/CouchDBNodeSshDriver.java,98,,"               ""zypper"", ""gcc gcc-c++"","
22484,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchdb/CouchDBNodeSshDriver.java,101,,"               ""onlyifmissing"", ""make"","
22485,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/elasticsearch/ElasticSearchNodeImpl.java,103,,"                    .poll(getSensorFromNodeStat(DOCUMENT_COUNT, ""indices"", ""docs"", ""count"")"
22486,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/elasticsearch/ElasticSearchNodeSshDriver.java,87,,"        newScript(MutableMap.of(""usePidFile"", false), LAUNCHING)"
22487,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBClientSupport.java,181,,"        Optional<CommandResult> result = runDBCommand(""admin"", ""serverStatus"");"
22488,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfig.java,91,,"        checkArgument(config.containsField(""_id""), ""_id missing from replica set config"");"
22489,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/redis/RedisStoreSshDriver.java,89,,"        newScript(MutableMap.of(""usePidFile"", false), CUSTOMIZING)"
22490,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java,243,,"    void bucketTypeCreate(@EffectorParam(name = ""bucketTypeName"") String bucketTypeName,"
22491,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeSshDriver.java,397,,"                        .body.append(sudo(format(""%s cluster plan"", getRiakAdminCmd())))"
22492,./TargetProjects/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeSshDriver.java,398,,"                        .body.append(sudo(format(""%s cluster commit"", getRiakAdminCmd())))"
22493,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/AstyanaxSupport.java,223,,"                        .putColumn(""name"", ""Alice"", null)"
22494,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenterLiveTest.java,95,,"    @Test(groups = ""Live"")"
22495,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenterTest.java,97,,"        log.debug(""Test ""+JavaClassNames.niceClassAndMethod()+"", cluster ""+cluster+"" has ""+cluster.getMembers()+""; e1=""+e1+"" e2=""+e2);"
22496,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseSyncGatewayEc2LiveTest.java,76,,"    @Test(groups = {""Live""})"
22497,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,77,,"        Asserts.succeedsEventually(ImmutableMap.of(""timeout"", TIMEOUT), new Runnable() {"
22498,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,89,,"    @Test(groups = ""Integration"")"
22499,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,101,,"        final String documentId = MongoDBTestHelper.insert(replicaSet.getPrimary(), ""meaning-of-life"", 42);"
22500,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,55,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""host"", host));"
22501,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,55,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""host"", host));"
22502,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,61,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""version"", version, ""members"", memberList));"
22503,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,61,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""version"", version, ""members"", memberList));"
22504,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,65,,"        ReplicaSetConfig setConfig = ReplicaSetConfig.builder(""replica-set-name"");"
22505,./TargetProjects/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,118,,"        BasicBSONObject config = makeSetConfig(""replica-set-name"", version, makeSetMember(33, ""example.com:7777""));"
22506,./TargetProjects/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,61,,"    @Test(groups = {""Integration"", ""WIP""})"
22507,./TargetProjects/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,61,,"    @Test(groups = {""Integration"", ""WIP""})"
22508,./TargetProjects/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,64,,"                .configure(""name"", Identifiers.makeRandomId(8))"
22509,./TargetProjects/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,65,,"                .configure(""displayName"", ""Karaf Test""));"
22510,./TargetProjects/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,65,,"                .configure(""displayName"", ""Karaf Test""));"
22511,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/LoadBalancer.java,74,,"    @SuppressWarnings(""serial"")"
22512,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java,56,,"            appendSslConfig(""global"", config, ""    "", globalSslConfig, true, true);"
22513,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java,64,,"            config.append(""    listen ""+nginx.getPort()+"";\n"");"
22514,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java,66,,"            config.append(""  }\n"");"
22515,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,141,,"                ""onlyifmissing"", ""gcc"","
22516,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,142,,"                ""yum"", ""gcc"","
22517,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,145,,"                ""port"", null);"
22518,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,147,,"                ""onlyifmissing"", ""make"","
22519,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,191,,"            cmds.add(format(""cd %s"", pcreExpandedInstallDirname));"
22520,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/DynamicWebAppClusterImpl.java,169,,"        checkNotNull(targetName, ""targetName"");"
22521,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/WebAppServiceMethods.java,47,,"                .configure(""producer"", entity)"
22522,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/WebAppServiceMethods.java,48,,"                .configure(""source"", REQUEST_COUNT)"
22523,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/WebAppServiceMethods.java,49,,"                .configure(""target"", REQUESTS_PER_SECOND_LAST)"
22524,./TargetProjects/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/tomcat/TomcatSshDriver.java,104,,"        return newScript(MutableMap.of(USE_PID_FILE, ""pid.txt""), CHECK_RUNNING).execute() == 0;"
22525,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,103,,"        westChild = newSshMachineLocation(""West child"", WEST_IP, westParent);"
22526,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,109,,"        eastChildWithLocationAndWithPrivateHostname = newSshMachineLocation(""East child with location"", ""localhost"", EAST_IP, eastParent, EAST_LATITUDE, EAST_LONGITUDE); "
22527,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,109,,"        eastChildWithLocationAndWithPrivateHostname = newSshMachineLocation(""East child with location"", ""localhost"", EAST_IP, eastParent, EAST_LATITUDE, EAST_LONGITUDE); "
22528,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,113,,"        northChildWithLocation = newSshMachineLocation(""North child"", ""localhost"", NORTH_IP, northParent, NORTH_LATITUDE, NORTH_LONGITUDE);"
22529,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,53,,"                .configure(""serverPool"", cluster) "
22530,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,55,,"                .configure(""domain"", ""mydomain""));"
22531,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,55,,"                .configure(""domain"", ""mydomain""));"
22532,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/ProxySslConfigTest.java,33,,"            ""certificateSourceUrl"", ""file://tmp/cert.txt"", "
22533,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/UrlMappingTest.java,85,,"    @Test(groups = ""Integration"")"
22534,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,88,,"    @Test(groups = ""Integration"")"
22535,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,92,,"                .configure(""initialSize"", 1)"
22536,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,93,,"                .configure(NginxController.DOMAIN_NAME, ""localhost""));"
22537,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxHttpsSslIntegrationTest.java,72,,"        localLoc = mgmt.getLocationRegistry().getLocationManaged(""localhost"");"
22538,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,67,,"        localLoc = mgmt.getLocationRegistry().getLocationManaged(""localhost"");"
22539,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,78,,"    @Test(groups = ""Integration"")"
22540,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,81,,"                .configure(""initialSize"", 0)"
22541,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,85,,"                .configure(""serverPool"", serverPool)"
22542,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,86,,"                .configure(""domain"", ""localhost""));"
22543,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,125,,"                .configure(""portNumberSensor"", WebAppService.HTTP_PORT));"
22544,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java,128,,"                .configure(""domain"", ""localhost""));"
22545,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,95,,"        List<String> allHosts = ImmutableList.of(""localhost"", ""localhost1"", ""localhost2"", ""localhost3"", ""localhost4"");"
22546,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,95,,"        List<String> allHosts = ImmutableList.of(""localhost"", ""localhost1"", ""localhost2"", ""localhost3"", ""localhost4"");"
22547,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,114,,"    @Test(groups = ""Integration"")"
22548,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,117,,"                .configure(""urlMappings"", urlMappingsGroup));"
22549,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,121,,"                .configure(""initialSize"", 1)"
22550,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,122,,"                .configure(DynamicCluster.MEMBER_SPEC, EntitySpec.create(Tomcat8Server.class).configure(""httpPort"", ""8100+""))"
22551,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,122,,"                .configure(DynamicCluster.MEMBER_SPEC, EntitySpec.create(Tomcat8Server.class).configure(""httpPort"", ""8100+""))"
22552,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,125,,"                .configure(""domain"", ""localhost1"")"
22553,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,126,,"                .configure(""target"", c0));"
22554,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,135,,"                .configure(""path"", ""/hello-world($|/.*)"")"
22555,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,164,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port, ""Hello"");"
22556,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,164,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port, ""Hello"");"
22557,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,166,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port+""/hello/frank"", ""http://localhost1:""+port+""/hello/frank"");"
22558,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,170,,"                    HttpTestUtils.assertContentContainsText(""http://localhost2:""+port+""/hello-world"", ""Hello"");"
22559,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,170,,"                    HttpTestUtils.assertContentContainsText(""http://localhost2:""+port+""/hello-world"", ""Hello"");"
22560,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,176,,"                    HttpTestUtils.assertContentContainsText(""http://localhost3:""+port+""/c2"", ""Hello"");"
22561,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,183,,"        HttpTestUtils.assertHttpStatusCodeEquals(""http://localhost:""+port+""/"", 404);"
22562,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,217,,"                .configure(""port"", ""8000+"")"
22563,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,217,,"                .configure(""port"", ""8000+"")"
22564,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,218,,"                .configure(""portNumberSensor"", WebAppService.HTTP_PORT)"
22565,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,192,,"    @DataProvider(name = ""basicEntities"")"
22566,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,198,,"    @Test(groups = ""Integration"", dataProvider = ""basicEntities"")"
22567,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,201,,"        log.info(""test=canStartAndStop; entity=""+entity+""; app=""+entity.getApplication());"
22568,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,205,,"                MutableMap.of(""timeout"", 120*1000), entity, Startable.SERVICE_UP, Boolean.TRUE);"
22569,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,452,,"    @DataProvider(name = ""entitiesWithWarAndURL"")"
22570,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterIntegrationTest.java,76,,"    @Test(groups=""Integration"")"
22571,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterIntegrationTest.java,79,,"                .configure(""initialSize"", 1));"
22572,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterTest.java,77,,"                .configure(""initialSize"", 0)"
22573,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/DynamicWebAppFabricTest.java,82,,"        EntityAsserts.assertAttributeEqualsEventually(MutableMap.of(""timeout"", TIMEOUT_MS), fabric, DynamicWebAppFabric.REQUEST_COUNT, 2);"
22574,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,51,,"        assertMapping(""/"", ""/"", ""ROOT.war"");"
22575,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,63,,"        assertMapping(""/foo"", ""/foo"", ""foo.war"");"
22576,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,63,,"        assertMapping(""/foo"", ""/foo"", ""foo.war"");"
22577,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,74,,"        Assert.assertEquals(m.findArchiveNameFromUrl(""http//localhost/simple.war"", false), ""simple.war"");"
22578,./TargetProjects/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/jboss/JBoss7ServerNonInheritingIntegrationTest.java,72,,"    @Test(groups = ""Integration"")"
22579,./TargetProjects/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java,321,,"            throw new IllegalStateException(""Implementation "" + implClazz + "" must have a no-argument constructor"");"
22580,./TargetProjects/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java,398,,"        flags.put(checkNotNull(key, ""key"").toString(), val);"
22581,./TargetProjects/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/location/LocationRegistry.java,78,,"    @SuppressWarnings(""rawtypes"")"
22582,./TargetProjects/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/objs/BrooklynObjectType.java,41,,"    @SuppressWarnings(""unchecked"") ENTITY(Entity.class, EntitySpec.class, ""entities""),"
22583,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java,200,,"        @SuppressWarnings(""unchecked"")"
22584,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/creation/CampInternalUtils.java,133,,"    @SuppressWarnings(""unchecked"")"
22585,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/creation/CampInternalUtils.java,137,,"            itemMap = ImmutableMap.<String, Object>of(""type"", policy);"
22586,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/methods/BrooklynDslCommon.java,374,,"                return object(MutableMap.of(""type"", argL.remove(0), ""constructor.args"", argL));"
22587,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/dsl/methods/DslComponent.java,844,,"                        throw new IndexOutOfBoundsException(""Target entity (""+component+"") has ""+locations.size()+"" location(s), but requested index ""+index);"
22588,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AbstractJcloudsRebindStubYamlTest.java,120,,"                ""      "" + SshMachineLocation.SSH_TOOL_CLASS.getName() + "": "" + RecordingSshTool.class.getName(),"
22589,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AbstractJcloudsStubYamlTest.java,126,,"                ""      "" + SshMachineLocation.SSH_TOOL_CLASS.getName() + "": "" + RecordingSshTool.class.getName(),"
22590,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,50,,"            ""  - type: ""+AddChildrenEffector.class.getName(),"
22591,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,51,,"            ""    brooklyn.config:"","
22592,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,53,,"            (includeDeclaredParameters ? Strings.lines(indent(""      "","
22593,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,56,,"                ""    defaultValue: default"","
22594,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,103,,"        Assert.assertEquals(child.getConfig(ConfigKeys.newStringConfigKey(""p.parent"")), ""parent"");"
22595,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,104,,"        Assert.assertEquals(child.getConfig(ConfigKeys.newStringConfigKey(""p.param2"")), ""default"");"
22596,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,106,,"        Assert.assertEquals(child.getConfig(ConfigKeys.newStringConfigKey(""p.param1"")), ""effector_param"");"
22597,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,106,,"        Assert.assertEquals(child.getConfig(ConfigKeys.newStringConfigKey(""p.param1"")), ""effector_param"");"
22598,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,113,,"                    ""blueprint_yaml: |"","
22599,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,114,,"                    ""  services:"","
22600,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,140,,"            ""blueprint_yaml:"",  "
22601,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AddChildrenEffectorYamlTest.java,146,,"        Assert.assertEquals(child.getConfig(ConfigKeys.newStringConfigKey(""p.child"")), ""child"");"
22602,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,48,,"                ""services:"","
22603,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,49,,"                ""- type: "" + BasicApplication.class.getName(),"
22604,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,50,,"                ""  brooklyn.children:"","
22605,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,51,,"                ""    - type: "" + TestEntity.class.getName(),"
22606,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,53,,"                ""  brooklyn.enrichers:"","
22607,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,55,,"                ""      brooklyn.config:"","
22608,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,56,,"                ""        ""+Aggregator.SOURCE_SENSOR.getName()+"": myVal"","
22609,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,56,,"                ""        ""+Aggregator.SOURCE_SENSOR.getName()+"": myVal"","
22610,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,57,,"                ""        ""+Aggregator.TARGET_SENSOR.getName()+"": myResult"","
22611,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,173,,"        child1.sensors().set(myVal, ""val1"");"
22612,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AggregatorYamlTest.java,176,,"        child2.sensors().set(myVal, ""val2"");"
22613,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AppYamlTest.java,44,,"                ""services:"","
22614,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AppYamlTest.java,56,,"                ""- serviceType: org.apache.brooklyn.core.test.entity.TestApplication"");"
22615,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,56,,"                ""services:"","
22616,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,57,,"                ""- type: "" + BasicEntity.class.getName());"
22617,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,131,,"                ""name: topLevel"","
22618,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,135,,"        assertDoesNotWrap(app, BasicApplication.class, ""topLevel"");"
22619,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,150,,"                ""brooklyn.catalog:"","
22620,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,151,,"                ""  id: simple"","
22621,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,152,,"                ""  version: "" + TEST_VERSION,"
22622,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,153,,"                ""  itemType: entity"","
22623,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,154,,"                ""  displayName: catalogLevel"","
22624,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,155,,"                ""  item:"","
22625,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,156,,"                ""    type: "" + BasicApplication.class.getName());"
22626,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,161,,"                ""- type: simple:"" + TEST_VERSION);"
22627,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,265,,"                ""  version: 0.1.2"","
22628,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,267,,"                ""  items:"","
22629,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,268,,"                ""  - id: app1"","
22630,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,270,,"                ""    item:"","
22631,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,271,,"                ""      type: "" + BasicApplication.class.getName(),"
22632,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,284,,"        Entity app1 = createAndStartApplication(""services: [ {type: app1} ]"");"
22633,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,59,,"    @SuppressWarnings(""unchecked"")"
22634,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,63,,"                ""services:"","
22635,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,64,,"                ""- serviceType: org.apache.brooklyn.entity.stock.BasicApplication"");"
22636,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
22637,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
22638,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
22639,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,78,,"                ""location:"","
22640,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,79,,"                ""  byon:"","
22641,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,80,,"                ""    hosts:"","
22642,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,82,,"                ""      privateAddresses: [10.0.0.1]"","
22643,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,83,,"                ""      password: mypassword"","
22644,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,84,,"                ""      user: myuser"","
22645,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,95,,"                SshMachineLocation.PASSWORD.getName(), ""mypassword"","
22646,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,97,,"        assertEquals(machine.getPrivateAddresses(), ImmutableSet.of(""10.0.0.1""));"
22647,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,158,,"        SshMachineLocation machine1 = (SshMachineLocation) Iterables.find(machines, LocationPredicates.configEqualTo(ConfigKeys.newStringConfigKey(""mykey""), ""myval1""));"
22648,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,86,,"                ""brooklyn.catalog:"","
22649,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,88,,"                ""  itemType: entity"","
22650,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,89,,"                ""  item:"","
22651,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,90,,"                ""    type: org.apache.brooklyn.entity.software.base.EmptySoftwareProcess"","
22652,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,91,,"                ""    brooklyn.config:"","
22653,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,92,,"                ""      shell.env:"","
22654,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,93,,"                ""        ENV1: myEnv1"","
22655,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,95,,"                ""        ""+emptyFile.getAbsolutePath()+"": myfile"","
22656,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,95,,"                ""        ""+emptyFile.getAbsolutePath()+"": myfile"","
22657,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,155,,"                ""location: localhost-stub"","
22658,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,156,,"                ""services:"","
22659,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,164,,"                ImmutableMap.of(""ENV1"", ""myEnv1""),"
22660,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,164,,"                ImmutableMap.of(""ENV1"", ""myEnv1""),"
22661,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,166,,"                ImmutableMap.of(""mykey"", ""myval"", ""templateOptions"", ImmutableMap.of(""myOptionsKey"", ""myOptionsVal"")));"
22662,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,166,,"                ImmutableMap.of(""mykey"", ""myval"", ""templateOptions"", ImmutableMap.of(""myOptionsKey"", ""myOptionsVal"")));"
22663,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,166,,"                ImmutableMap.of(""mykey"", ""myval"", ""templateOptions"", ImmutableMap.of(""myOptionsKey"", ""myOptionsVal"")));"
22664,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,166,,"                ImmutableMap.of(""mykey"", ""myval"", ""templateOptions"", ImmutableMap.of(""myOptionsKey"", ""myOptionsVal"")));"
22665,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,166,,"                ImmutableMap.of(""mykey"", ""myval"", ""templateOptions"", ImmutableMap.of(""myOptionsKey"", ""myOptionsVal"")));"
22666,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,175,,"                ""  brooklyn.config:"","
22667,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,176,,"                ""    shell.env:"","
22668,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,177,,"                ""      ENV2: myEnv2"","
22669,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,179,,"                ""      ""+emptyFile2.getAbsolutePath()+"": myfile2"","
22670,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,179,,"                ""      ""+emptyFile2.getAbsolutePath()+"": myfile2"","
22671,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,191,,"                ""      mykey2: myval2"","
22672,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,200,,"                ImmutableMap.of(""ENV1"", ""myEnv1"", ""ENV2"", ""myEnv2""),"
22673,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,200,,"                ImmutableMap.of(""ENV1"", ""myEnv1"", ""ENV2"", ""myEnv2""),"
22674,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,202,,"                ImmutableMap.of(""mykey"", ""myval"", ""mykey2"", ""myval2"", ""templateOptions"", "
22675,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,202,,"                ImmutableMap.of(""mykey"", ""myval"", ""mykey2"", ""myval2"", ""templateOptions"", "
22676,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,211,,"                ""- type: org.apache.brooklyn.entity.stock.BasicApplication"","
22677,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,216,,"                ""      mykey: myval"","
22678,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,219,,"                ""  brooklyn.children:"","
22679,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,242,,"                ""    myOtherConf: myOther"","
22680,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,244,,"                ""  - type: org.apache.brooklyn.core.test.entity.TestEntity"");"
22681,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,250,,"        assertEquals(entity.config().get(TestEntity.CONF_NAME), ""myOther"");"
22682,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,256,,"                return app.sensors().set(Sensors.newStringSensor(""myOtherSensor""), ""myObject"");"
22683,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,338,,"                ""      ""+emptyFile3.getAbsolutePath()+"": myfile3"","
22684,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,385,,"                ""        mykey2: myval2"","
22685,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,407,,"                ""  items:"","
22686,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,409,,"                ""    item:"","
22687,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,410,,"                ""      type: org.apache.brooklyn.core.test.entity.TestEntity"","
22688,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,411,,"                ""      brooklyn.parameters:"","
22689,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,412,,"                ""      - name: map.type-merged"","
22690,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,413,,"                ""        type: java.util.Map"","
22691,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,415,,"                ""        default: {myDefaultKey: myDefaultVal}"","
22692,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,427,,"                ""      brooklyn.config:"","
22693,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,439,,"                    ""- type: entity-with-keys"");"
22694,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,444,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-merged"", ImmutableMap.of(""myDefaultKey"", ""myDefaultVal""));"
22695,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,444,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-merged"", ImmutableMap.of(""myDefaultKey"", ""myDefaultVal""));"
22696,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,444,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-merged"", ImmutableMap.of(""myDefaultKey"", ""myDefaultVal""));"
22697,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,445,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-overwrite"", ImmutableMap.of(""myDefaultKey"", ""myDefaultVal""));"
22698,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,446,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-never"", null);"
22699,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,455,,"                    ""    map.type-merged:"","
22700,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,457,,"                    ""    map.type-overwrite:"","
22701,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,459,,"                    ""    map.type-never:"","
22702,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,573,,"            assertDeclaredKeyAndAnonymousKeyValuesEqual(entity, ""map.type-not-reinherited"", ImmutableMap.of(""myDefaultKey"", ""myDefaultVal""));"
22703,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,588,,"                    ""    map.type-not-reinherited:"","
22704,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigInheritanceYamlTest.java,619,,"                    ""      map.type-merged:"","
22705,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,185,,"                ""brooklyn.catalog:"","
22706,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,189,,"                ""  item:"","
22707,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,191,,"                ""    brooklyn.config:"","
22708,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,193,,"                ""      templateOptions:"","
22709,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,198,,"    @Test(groups=""Live"")"
22710,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,201,,"                ""location: jclouds-config-test-with-conf"","
22711,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,202,,"                ""services:"","
22712,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,203,,"                ""- type: org.apache.brooklyn.entity.software.base.EmptySoftwareProcess"");"
22713,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,211,,"                ImmutableMap.of(""networks"", ImmutableList.of(""mynetwork"")));"
22714,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,211,,"                ImmutableMap.of(""networks"", ImmutableList.of(""mynetwork"")));"
22715,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,220,,"                ""  brooklyn.config:"","
22716,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,221,,"                ""    provisioning.properties:"","
22717,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,222,,"                ""      minCores: 2"","
22718,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,224,,"                ""        subnetId: mysubnet"");"
22719,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,232,,"                ImmutableMap.of(""networks"", ImmutableList.of(""mynetwork""), ""subnetId"", ""mysubnet""));"
22720,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigLocationInheritanceYamlTest.java,232,,"                ImmutableMap.of(""networks"", ImmutableList.of(""mynetwork""), ""subnetId"", ""mysubnet""));"
22721,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigNestedYamlTest.java,48,,"        addCatalogItems( loadYaml(""config-nested-test.bom"") );"
22722,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigNestedYamlTest.java,122,,"        Assert.assertTrue(map1.containsKey(""field""), ""missing 'field' in ""+map1);"
22723,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,62,,"                ""brooklyn.catalog:"","
22724,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,63,,"                ""  itemType: entity"","
22725,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,64,,"                ""  items:"","
22726,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,65,,"                ""  - id: entity-with-keys"","
22727,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,66,,"                ""    item:"","
22728,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,67,,"                ""      type: ""+BasicEntity.class.getName(),"
22729,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,68,,"                ""      brooklyn.parameters:"","
22730,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,69,,"                ""      - name: key1"","
22731,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,70,,"                ""        deprecatedNames:"","
22732,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,71,,"                ""        - oldKey1"","
22733,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,73,,"                ""        description: myDescription"","
22734,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,74,,"                ""        type: String"","
22735,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,78,,"                ""services:"","
22736,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,84,,"        ConfigKey<?> key = findKey(entity, ""key1"");"
22737,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersDeprecationYamlTest.java,118,,"        assertEquals(entity.config().get(findKey(entity, ""key1"")), ""myval"");"
22738,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,106,,"                ""brooklyn.catalog:"","
22739,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,107,,"                ""  itemType: entity"","
22740,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,108,,"                ""  items:"","
22741,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,109,,"                ""  - id: entity-with-keys"","
22742,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,110,,"                ""    item:"","
22743,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,111,,"                ""      type: ""+TestEntity.class.getName(),"
22744,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,112,,"                ""      brooklyn.parameters:"","
22745,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,114,,"                ""        description: myDescription"","
22746,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,115,,"                ""        type: String"","
22747,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,116,,"                ""        default: myDefaultVal"","
22748,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,117,,"                ""      brooklyn.config:"","
22749,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,121,,"                ""services:"","
22750,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,122,,"                ""- type: entity-with-keys"");"
22751,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,128,,"        assertKeyEquals(entity, ""testConfigParametersListedInType.mykey"", ""myDescription"", String.class, ""myDefaultVal"", ""myOverridingVal"");"
22752,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,128,,"        assertKeyEquals(entity, ""testConfigParametersListedInType.mykey"", ""myDescription"", String.class, ""myDefaultVal"", ""myOverridingVal"");"
22753,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,128,,"        assertKeyEquals(entity, ""testConfigParametersListedInType.mykey"", ""myDescription"", String.class, ""myDefaultVal"", ""myOverridingVal"");"
22754,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,146,,"                ""      - name: "" + TestEntity.CONF_NAME.getName(),"
22755,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,159,,"        assertKeyEquals(entity, TestEntity.CONF_NAME.getName(), ""myDescription"", String.class, ""myDefaultYamlVal"", ""myDefaultYamlVal"");"
22756,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,223,,"        assertKeyEquals(entity, TestEntity.CONF_MAP_THING.getName(), ""myDescription"", java.util.Map.class, null, ImmutableMap.of(""mykey"", ""myval""));"
22757,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,286,,"                ""  itemType: template"","
22758,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,288,,"                ""  - id: template-with-top-level-params"","
22759,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,291,,"                ""      - name: test.parameter"","
22760,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,294,,"                ""        default: myDefaultParamVal"","
22761,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,295,,"                ""      services:"","
22762,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,296,,"                ""      - type: ""+TestEntity.class.getName(),"
22763,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,301,,"                ""- type: template-with-top-level-params"");"
22764,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,305,,"        assertKeyEquals(app, ""test.parameter"", ""myDescription"", String.class, ""myDefaultParamVal"", ""myDefaultParamVal"");"
22765,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,305,,"        assertKeyEquals(app, ""test.parameter"", ""myDescription"", String.class, ""myDefaultParamVal"", ""myDefaultParamVal"");"
22766,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,357,,"                ""      - name: my.param.key"","
22767,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,358,,"                ""        type: string"","
22768,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,369,,"                ""      type: entity-with-keys"");"
22769,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,375,,"                ""  - id: wrapper-entity"","
22770,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,386,,"            assertEquals(entity.config().get(ConfigKeys.newStringConfigKey(""my.other.key"")), ""myDefaultVal"");"
22771,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,393,,"                    ""  brooklyn.config:"","
22772,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,403,,"                    ""- type: sub-entity"");"
22773,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,423,,"                    ""- type: wrapper-entity"");"
22774,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,554,,"                ""        type: ""+java.util.Set.class.getName(),"
22775,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,669,,"        assertEquals(entity.config().get(ConfigKeys.newStringConfigKey(""my.param.key"")), ""myDefaultValInOuter"");"
22776,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,669,,"        assertEquals(entity.config().get(ConfigKeys.newStringConfigKey(""my.param.key"")), ""myDefaultValInOuter"");"
22777,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,916,,"        Assert.assertEquals(entity1.getCatalogItemId(), ""test-entity:""+BasicBrooklynCatalog.NO_VERSION);"
22778,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,999,,"                ""      - name: testRequired"","
22779,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,1001,,"                ""        constraints:"","
22780,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,1023,,"        assertKeyEquals(entity, ""testRequired"", null, String.class, null, ""myval"");"
22781,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,1079,,"        assertKeyEquals(entity, ""testRequired"", null, String.class, null, ""myprefix-myVal"");"
22782,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigParametersYamlTest.java,1268,,"            assertEquals(pinned2.getLabel(), ""mylabel-pinned2"", ""item=""+symbolicName);"
22783,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,75,,"                ""services:"","
22784,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,76,,"                ""- type: org.apache.brooklyn.core.test.entity.TestEntity"","
22785,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,77,,"                ""  brooklyn.config:"","
22786,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,199,,"                ""    - myval"","
22787,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,207,,"        assertEquals(entity.config().get(TestEntity.CONF_MAP_PLAIN), ImmutableMap.of(""mykey"", ""myval""));"
22788,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,207,,"        assertEquals(entity.config().get(TestEntity.CONF_MAP_PLAIN), ImmutableMap.of(""mykey"", ""myval""));"
22789,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,289,,"                ""    - $brooklyn:config(\""myOtherConf\"")"","
22790,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,301,,"        assertEquals(entity.config().get(TestEntity.CONF_NAME), ""myOther"");"
22791,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ConfigYamlTest.java,350,,"                ""    - $brooklyn:attributeWhenReady(\""myOtherSensor\"")"","
22792,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,83,,"                        ""      type: ""+(isList ? Strings.removeAllFromEnd(Strings.removeAllFromStart(type, ""list"", ""<""), "">"") : type) : """","
22793,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,136,,"    public static final ConfigKey<Object> CONF1_ANONYMOUS = ConfigKeys.newConfigKey(Object.class, ""test.conf1"");"
22794,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,146,,"        deployWithTestingCustomTypeObjectConfigAndAssert(true, false, false, TestingCustomType.class.getName(), CONF1_ANONYMOUS, ""foo"", null);"
22795,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,153,,"        assertLastThrowableContainsIgnoreCase(""expected class "" + TestingCustomType.class.getName().toLowerCase(), ""but found"", ""map"");"
22796,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,153,,"        assertLastThrowableContainsIgnoreCase(""expected class "" + TestingCustomType.class.getName().toLowerCase(), ""but found"", ""map"");"
22797,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,153,,"        assertLastThrowableContainsIgnoreCase(""expected class "" + TestingCustomType.class.getName().toLowerCase(), ""but found"", ""map"");"
22798,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,183,,"        deployWithTestingCustomTypeObjectConfigAndAssert(true, false, false, ""custom-type"", CONF1_ANONYMOUS, ""foo"", null);"
22799,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,232,,"        deployWithTestingCustomTypeObjectConfigAndAssert(true, true, false, ""custom-type"", CONF1_ANONYMOUS, ""foo"", ""bar"");"
22800,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,239,,"                ""brooklyn.catalog:"","
22801,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,240,,"                ""  version: ""+TEST_VERSION,"
22802,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,241,,"                ""  items:"","
22803,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,242,,"                ""  - id: custom-type"","
22804,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,245,,"                ""    item:"","
22805,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeConfigYamlTest.java,299,,"        deployWithTestingCustomTypeObjectConfigAndAssert(true, false, true, ""list<""+TestingCustomType.class.getName()+"">"", CONF1_ANONYMOUS, ""foo"", null);"
22806,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,116,,"            ""  - ""+""type: ""+type).appendAll(Arrays.asList(extras))));"
22807,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,134,,"                ""    brooklyn.config:"","
22808,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,135,,"                ""      x: foo"");"
22809,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,136,,"        assertInitializerRanAndXY(testEntity, ""foo"", null);"
22810,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,148,,"                ""    y: bar"","
22811,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,151,,"        assertInitializerRanAndXY(testEntity, ""foo"", ""bar"");"
22812,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/CustomTypeInitializerYamlTest.java,156,,"        ((BasicBrooklynTypeRegistry)mgmt().getTypeRegistry()).addToLocalUnpersistedTypeRegistry(RegisteredTypes.bean(""custom-type"", ""1"","
22813,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,151,,"        ((EntityInternal) testEntity).sensors().set(Sensors.newStringSensor(""foo""), ""bar"");"
22814,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,151,,"        ((EntityInternal) testEntity).sensors().set(Sensors.newStringSensor(""foo""), ""bar"");"
22815,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,325,,"                ""  id: x"","
22816,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,326,,"                ""  brooklyn.config:"","
22817,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,425,,"        Assert.assertEquals(getConfigInTask(testEntity, TestEntity.CONF_NAME), ""myDefaultVal"");"
22818,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,439,,"                ""services:"","
22819,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,440,,"                ""- type: "" + BasicApplication.class.getName(),"
22820,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,445,,"                ""  - type: "" + DoNothingSoftwareProcess.class.getName(),"
22821,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,446,,"                ""    brooklyn.config:"","
22822,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,459,,"        assertEquals(getConfigInTask(app, ConfigKeys.newConfigKey(Object.class, ""config1"")), appLoc);"
22823,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,460,,"        assertEquals(getConfigInTask(app, ConfigKeys.newConfigKey(Object.class, ""config2"")), appLoc);"
22824,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,512,,"        Assert.assertEquals(getConfigInTask(testEntity, TestEntity.CONF_NAME), ""hello world"");"
22825,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,591,,"        testEntity.sensors().set(Sensors.newStringSensor(""mySensor""), ""x"");"
22826,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,664,,"        Assert.assertEquals(""somebarname"", testEntity.getConfig(ConfigKeys.newStringConfigKey(""test.regex.config"")));"
22827,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,63,,"        log.info(""App started:"");"
22828,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,122,,"        Entity app = createAndStartApplication(loadYaml(""test-entity-basic-template.yaml"","
22829,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,123,,"                    ""  id: parentId"","
22830,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,128,,"                    ""  brooklyn.enrichers:"","
22831,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,168,,"                    ""        enricher.sourceSensor: $brooklyn:sensor(\""""+sourceSensor.getName()+""\"")"","
22832,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,186,,"        entity.sensors().set(otherSensor, ""myval"");"
22833,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,237,,"        entity.sensors().set(TestEntity.NAME, ""New Name"");"
22834,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,100,,"        Entity app = createAndStartApplication(loadYaml(""test-entity-basic-template.yaml"", extras));"
22835,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,105,,"        Assert.assertEquals(app.getDisplayName(), ""test-entity-basic-template"");"
22836,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,107,,"        log.info(""App started:"");"
22837,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,110,,"        Assert.assertTrue(app.getChildren().iterator().hasNext(), ""Expected app to have child entity"");"
22838,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,112,,"        Assert.assertTrue(entity instanceof TestEntity, ""Expected TestEntity, found "" + entity.getClass());"
22839,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,125,,"            ""  brooklyn.config:"","
22840,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,166,,"        Assert.assertEquals(testEntity.getConfig(TestEntity.CONF_NAME), ""Foo Bar"");"
22841,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,187,,"                ""services:"","
22842,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,563,,"                ""- type: "" + ReferencingYamlTestEntity.class.getName(),"
22843,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,655,,"            if (location.getDisplayName().equals(""localhost name""))"
22844,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,657,,"            else if (location.getDisplayName().equals(""byon name""))"
22845,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,793,,"                ""services:\n""+"
22846,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,794,,"                ""- serviceType: org.apache.brooklyn.core.test.entity.TestEntity\n""+"
22847,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,795,,"                ""  brooklyn.config:\n""+"
22848,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,796,,"                ""   test.childSpec:\n""+"
22849,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,797,,"                ""     $brooklyn:entitySpec:\n""+"
22850,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,798,,"                ""       type: org.apache.brooklyn.core.test.entity.TestEntity\n""+"
22851,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,799,,"                ""       brooklyn.config:\n""+"
22852,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,806,,"        assertEquals(child.getConfig(TestEntity.CONF_NAME), ""inchildspec"");"
22853,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,970,,"                ""  brooklyn.initializers: [ { type: ""+ TestConfigurableInitializerStatic.class.getName()+"" } ]"";"
22854,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,988,,"            MutableMap.of(""name"", ""Bob""));"
22855,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,988,,"            MutableMap.of(""name"", ""Bob""));"
22856,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,994,,"    @Test(dataProvider = ""initializersToTest"")"
22857,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntityRefsYamlTest.java,44,,"                ""services:"","
22858,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntityRefsYamlTest.java,45,,"                ""- type: "" + TestEntity.class.getName(),"
22859,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntityRefsYamlTest.java,62,,"                ""  brooklyn.children:"","
22860,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntityRefsYamlTest.java,63,,"                ""  - type: "" + TestEntity.class.getName(),"
22861,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntityRefsYamlTest.java,137,,"                ""    conf1.sibling: $brooklyn:sibling(\""""+duplicatedId+""\"")"","
22862,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,48,,"        props.put(""brooklyn.external.myprovider.mykey"", ""myval"");"
22863,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,51,,"        props.put(""myproperty"", ""$brooklyn:external(\""myprovider\"", \""mykey\"")"");"
22864,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,63,,"                ConfigKeys.newStringConfigKey(""myDynamicProperty""), ""$brooklyn:literal(\""myliteral\"")"");"
22865,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,79,,"        props.put(""brooklyn.external.myprovider.mykey"", ""myval"");"
22866,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,111,,"        ConfigKey<String> MY_CONFIG_KEY = ConfigKeys.newStringConfigKey(""my.config.key"");"
22867,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,114,,"            ""services:"","
22868,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,117,,"            ""    my.config.key: $brooklyn:external(\""myprovider\"", \""mykey\"")"");"
22869,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,142,,"    @Test(groups=""Integration"")"
22870,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/FunctionSensorYamlTest.java,95,,"            ""      ""+FunctionSensor.SENSOR_PERIOD.getName()+"": 100ms"","
22871,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/HttpRequestSensorYamlTest.java,80,,"            ""      ""+HttpRequestSensor.SENSOR_PERIOD.getName()+"": 100ms"","
22872,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/HttpRequestSensorYamlTest.java,89,,"        EntityAsserts.assertAttributeEqualsEventually(entity, SENSOR_STRING, ""myValue"");"
22873,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/JcloudsCustomizerInstantiationYamlDslTest.java,134,,"        RecordingLocationCustomizer.assertCallsEqual(""customize1"", ""customize2"", ""customize3"", ""customize4"", ""preRelease"", ""postRelease"");"
22874,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/JcloudsCustomizerInstantiationYamlDslTest.java,163,,"        RecordingMachineCustomizer.assertCallsEqual(""customize"");"
22875,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationExternalConfigYamlTest.java,52,,"        props.put(""brooklyn.external.myprovider.mykey"", ""myval"");"
22876,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationExternalConfigYamlTest.java,74,,"        Assert.assertTrue(rawConfig.get() instanceof DeferredSupplier, ""Expected deferred raw value; got ""+rawConfig.get());"
22877,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,51,,"                ""services:\n""+"
22878,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,52,,"                ""- type: org.apache.brooklyn.core.test.entity.TestEntity\n"";"
22879,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,87,,"                ""locations:\n""+"
22880,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,219,,"        assertUserAddress(l1, ""root"", ""127.0.0.1"");"
22881,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/MapReferenceYamlTest.java,83,,"        Object frog = testMap.get(""frog"");"
22882,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/MapReferenceYamlTest.java,91,,"        Assert.assertTrue(one instanceof BasicEntity, ""Should have found a BasicEntity: "" + one);"
22883,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,241,,"            ""  brooklyn.config:"","
22884,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,242,,"            ""    test.confObject:"","
22885,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,243,,"            ""      $brooklyn:object:"","
22886,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,244,,"            ""        type: ""+ObjectsYamlTest.class.getName()+""$TestObject"","
22887,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,244,,"            ""        type: ""+ObjectsYamlTest.class.getName()+""$TestObject"","
22888,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,245,,"            ""        object.fields:"","
22889,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,254,,"        Assert.assertTrue(testObject instanceof TestObject, ""Expected a TestObject: ""+testObject);"
22890,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,257,,"        Assert.assertEquals(((TestObject) testObject).getString(), ""frog"");"
22891,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,260,,"        Assert.assertTrue(testObjectObject instanceof SimpleTestPojo, ""Expected a SimpleTestPojo: ""+testObjectObject);"
22892,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,269,,"            ""        type: ""+ObjectsYamlTest.class.getName()+""$ConfigurableObject"","
22893,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,272,,"            ""        brooklyn.config:"","
22894,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,372,,"            ""        factoryMethod.args:"","
22895,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,428,,"                ""    mystring: myval"","
22896,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,429,,"                ""    myint: 123"","
22897,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,441,,"            Assert.assertEquals(testObject.getString(), ""myval"");"
22898,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,533,,"                ""    mydouble: 1.4"","
22899,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,127,,"        String appSymbolicName = ""my.catalog.app.id.load"";"
22900,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,128,,"        String appVersion = ""0.1.0"";"
22901,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,133,,"                    ""brooklyn.catalog:"","
22902,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,134,,"                    ""  id: "" + appSymbolicName,"
22903,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,135,,"                    ""  version: "" + appVersion,"
22904,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,136,,"                    ""  itemType: entity"","
22905,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,137,,"                    ""  libraries:"","
22906,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,138,,"                    ""  - "" + OSGI_BUNDLE_URL,"
22907,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,139,,"                    ""  item:"","
22908,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,140,,"                    ""    type: "" + OSGI_ENTITY_TYPE);"
22909,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,156,,"                ""location: localhost\n"","
22910,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,157,,"                ""services:"","
22911,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/RebindOsgiTest.java,158,,"                ""- type: "" + CatalogUtils.getVersionedId(appSymbolicName, appVersion));"
22912,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,47,,"            ""brooklyn.catalog:"","
22913,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,58,,"            ""services:"","
22914,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,59,,"            ""- name: "" + entityName,"
22915,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,102,,"            ""  brooklyn.libraries:"","
22916,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,103,,"            ""  - "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_URL,"
22917,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedOsgiYamlTest.java,104,,"            ""  items:"","
22918,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,37,,"            ""services:"","
22919,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,38,,"            ""- name: "" + entityName,"
22920,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,95,,"            ""brooklyn.catalog:"","
22921,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,98,,"            ""  itemType: entity"","
22922,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,101,,"        String entityName = ""YAML -> catalog item -> yaml url"";"
22923,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,105,,"            ""  type: "" + ver(""yaml.reference""));"
22924,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,105,,"            ""  type: "" + ver(""yaml.reference""));"
22925,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,153,,"            ""  items:"","
22926,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,154,,"            ""  - id: yaml.basic"","
22927,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,155,,"            ""    version: "" + TEST_VERSION,"
22928,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,156,,"            ""    item:"","
22929,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,158,,"            ""  - id: yaml.reference"","
22930,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,181,,"            ""      services:"","
22931,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencingYamlTestEntity.java,30,,"    @SuppressWarnings(""serial"")"
22932,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ServiceFailureDetectorYamlRebindTest.java,61,,"        TestEntity newEntity = (TestEntity) Iterables.find(app().getChildren(), EntityPredicates.displayNameEqualTo(""targetEntity""));"
22933,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ServiceFailureDetectorYamlTest.java,67,,"            ""    - type: "" + ServiceFailureDetector.class.getName());"
22934,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/SshCommandEffectorYamlTest.java,51,,"        RecordingSshTool.setCustomResponse("".*myCommand.*"", new RecordingSshTool.CustomResponse(0, ""myResponse"", null));"
22935,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/SshCommandSensorYamlTest.java,59,,"        RecordingSshTool.setCustomResponse("".*myCommand.*"", new RecordingSshTool.CustomResponse(0, ""myResponse"", null));"
22936,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/SshCommandSensorYamlTest.java,71,,"            ""    brooklyn.config:"","
22937,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,42,,"                    ""services:"","
22938,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,54,,"                    ""brooklyn.catalog:"","
22939,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,55,,"                    ""  id: "" + Identifiers.makeRandomId(8),"
22940,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,56,,"                    ""  version: 1.0.0"","
22941,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,58,,"                    ""  item:"","
22942,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,83,,"                    ""- type: "" + TestApplication.class.getName(),"
22943,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ValidationMissingTypeYamlTest.java,196,,"            ""  brooklyn.policies:"","
22944,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/VanillaSoftwareProcessYamlTest.java,155,,"                ExecCmdAsserts.assertExecHasAtLeastOnce(RecordingSshTool.getExecCmds(), ""myCheckRunning"");"
22945,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/VanillaSoftwareProcessYamlTest.java,199,,"            ""      ""+FunctionSensor.SENSOR_PERIOD.getName()+"": 10ms"","
22946,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,150,,"    @Test(groups=""Live"")"
22947,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,153,,"                .put(""myarg"", ""myval"")"
22948,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,153,,"                .put(""myarg"", ""myval"")"
22949,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,154,,"                .put(""launch.powershell.command"", JavaStringEscapes.wrapJavaString(""& \""$Env:INSTALL_DIR\\exit0.ps1\""""))"
22950,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,155,,"                .put(""checkRunning.powershell.command"", JavaStringEscapes.wrapJavaString(""& \""$Env:INSTALL_DIR\\exit0.bat\""""))"
22951,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,167,,"                .put(""pre.install.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
22952,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,167,,"                .put(""pre.install.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
22953,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,168,,"                .put(""install.powershell.command"", ""\""& c:\\\\echoMyArg.ps1 -myarg myInstall\"""")"
22954,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,168,,"                .put(""install.powershell.command"", ""\""& c:\\\\echoMyArg.ps1 -myarg myInstall\"""")"
22955,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,169,,"                .put(""post.install.powershell.command"", ""\""& c:\\\\echoArg.bat myPostInstall\"""")"
22956,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,169,,"                .put(""post.install.powershell.command"", ""\""& c:\\\\echoArg.bat myPostInstall\"""")"
22957,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,170,,"                .put(""customize.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.bat\"""")"
22958,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,170,,"                .put(""customize.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.bat\"""")"
22959,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,171,,"                .put(""pre.launch.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.ps1\"""")"
22960,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,171,,"                .put(""pre.launch.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.ps1\"""")"
22961,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,173,,"                .put(""post.launch.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
22962,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,175,,"                .put(""stop.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
22963,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,192,,"                .put(""pre.install.command"", ""\""PowerShell -NonInteractive -NoProfile -Command c:\\\\exit0.ps1\"""")"
22964,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,304,,"            log.info(""App started:"");"
22965,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,359,,"        assertPhaseStreamSatisfies(win, ""install"", ""stdout"", Predicates.equalTo(in));"
22966,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,382,,"                ""Write-Host \"""" + hostMsg + ""\""\n"" +"
22967,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,415,,"                Strings.countOccurrences(s, warningMsg + ""</S>"") == 1 &&"
22968,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,94,,"                ""location: ""+LOCATION_CATALOG_ID,"
22969,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,95,,"                ""services:"","
22970,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,96,,"                ""- type: ""+VanillaWindowsProcess.class.getName(),"
22971,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,97,,"                ""  brooklyn.config:"","
22972,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,124,,"        RecordingWinRmTool.setCustomResponse(""myPreInstall"", new CustomResponse(0, ""myPreInstallStdout"", """"));"
22973,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,125,,"        RecordingWinRmTool.setCustomResponse(""myInstall"", new CustomResponse(0, ""myInstallStdout"", """"));"
22974,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,126,,"        RecordingWinRmTool.setCustomResponse(""myPostInstall"", new CustomResponse(0, ""myPostInstallStdout"", """"));"
22975,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,127,,"        RecordingWinRmTool.setCustomResponse(""myCustomize"", new CustomResponse(0, ""myCustomizeStdout"", """"));"
22976,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,128,,"        RecordingWinRmTool.setCustomResponse(""myPreLaunch"", new CustomResponse(0, ""myPreLaunchStdout"", """"));"
22977,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,129,,"        RecordingWinRmTool.setCustomResponse(""myLaunch"", new CustomResponse(0, ""myLaunchStdout"", """"));"
22978,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,130,,"        RecordingWinRmTool.setCustomResponse(""myPostLaunch"", new CustomResponse(0, ""myPostLaunchStdout"", """"));"
22979,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlTest.java,131,,"        RecordingWinRmTool.setCustomResponse(""myStop"", new CustomResponse(0, ""myStopStdout"", """"));"
22980,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,27,,"            ""name: Empty App\n"" +"
22981,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,28,,"            ""services:\n"" +"
22982,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,29,,"            ""   - type: org.apache.brooklyn.core.test.entity.TestApplication"";"
22983,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,126,,"                ""brooklyn.catalog:"","
22984,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,127,,"                ""  id: simple-osgi-library"","
22985,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,128,,"                ""  version: \""1.0\"""","
22986,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,129,,"                ""  itemType: template"","
22987,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,130,,"                ""  libraries:"","
22988,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,131,,"                ""  - "" + classpathUrl,"
22989,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,132,,"                ""  item:"","
22990,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,133,,"                ""    services:"","
22991,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,134,,"                ""    - type: org.apache.brooklyn.test.osgi.entities.SimpleApplication"");"
22992,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,136,,"        RegisteredType item = mgmt().getTypeRegistry().get(""simple-osgi-library"", ""1.0"");"
22993,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,136,,"        RegisteredType item = mgmt().getTypeRegistry().get(""simple-osgi-library"", ""1.0"");"
22994,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,230,,"                    ""    - type: "" + BasicApplication.class.getName());"
22995,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiLibraryTest.java,262,,"        externalConfigProviderRegistry.addProvider(""myprovider"", new MyExternalConfigSupplier(mgmt(), ""myprovider"", externalConfig));"
22996,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,125,,"                ""brooklyn.catalog:"","
22997,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,127,,"                ""  version: 1.0"","
22998,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,128,,"                ""  item:"","
22999,./TargetProjects/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityRebindTest.java,129,,"                ""    services:"","
