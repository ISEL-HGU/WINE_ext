Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"if (coll.contains(""val="" + priKeys.get(2)) || coll.contains(""val="" + priKeys.get(0)));","if (coll.contains(""val="" + priKeys.get(2)) || coll.contains(""val="" + priKeys.get(0))) ;
",0,1792,13,3002,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
2,"((HttpServletRequest)request).getSession(true).setAttribute(""secret"", UUID.randomUUID().toString());;","((HttpServletRequest)request).getSession(true).setAttribute(""secret"",UUID.randomUUID().toString());
",0,183,9,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
3,getRaf().getChannel().force(!isSkipMetadataUpdate);;,"getRaf().getChannel().force(!isSkipMetadataUpdate);
",0,1,4,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
4,this.asyncInvokeService = mbeanTimeout > 0 ? executor : null;;,"this.asyncInvokeService=mbeanTimeout > 0 ? executor : null;
",0,13,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
5,result = Boolean.valueOf(((Integer) obj).intValue() != 0);;,"result=Boolean.valueOf(((Integer)obj).intValue() != 0);
",0,21,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
6,service.getManagementContext().setCreateConnector(false);;,"service.getManagementContext().setCreateConnector(false);
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
7,"A20 x = client().findFluentSetters().build().post(""/echoBody"",new StringReader(""{foo:'1'}"")).run().cacheBody().assertBody().contains(""{foo:'1'}"").getBody().asType(A20.class);;","A20 x=client().findFluentSetters().build().post(""/echoBody"",new StringReader(""{foo:'1'}"")).run().cacheBody().assertBody().contains(""{foo:'1'}"").getBody().asType(A20.class);
",0,106,17,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
8,"newPath = StringUtils.substringBeforeLast( res.getAsset().getPath(), ""/"" ) + ""/maven-metadata-"" + sRepoId + "".xml"";;","newPath=StringUtils.substringBeforeLast(res.getAsset().getPath(),""/"") + ""/maven-metadata-"" + sRepoId+ "".xml"";
",0,31,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
9,"final String id = data.optString(PARAM_ID, null);;","final String id=data.optString(PARAM_ID,null);
",0,21,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
10,"boolean batchCreate = !applyDirectives(Request.Type.POST, body, uriInfo, resource);;","boolean batchCreate=!applyDirectives(Request.Type.POST,body,uriInfo,resource);
",0,4,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
11,"Map<String, Map<String, Object>> currBusinessMetadata = (storedEntity != null) ? storedEntity.getBusinessAttributes() : entityRetriever.getBusinessMetadata(storedVertex);;","Map<String,Map<String,Object>> currBusinessMetadata=(storedEntity != null) ? storedEntity.getBusinessAttributes() : entityRetriever.getBusinessMetadata(storedVertex);
",0,7,13,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
12,user = createTestUser(((JackrabbitSession) superuser).getUserManager());;,"user=createTestUser(((JackrabbitSession)superuser).getUserManager());
",0,1,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
13,"String path = jarFile.substring(0, jarFile.lastIndexOf('/'));;","String path=jarFile.substring(0,jarFile.lastIndexOf('/'));
",0,6,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
14,final IPointable p = VoidPointable.FACTORY.createPointable();;,"final IPointable p=VoidPointable.FACTORY.createPointable();
",0,0,5,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
15,final FrameTupleAccessor accessor = new FrameTupleAccessor(outRecDescs[0]);;,"final FrameTupleAccessor accessor=new FrameTupleAccessor(outRecDescs[0]);
",0,6,6,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
16,rtreeCmpFactories[0] = IntegerBinaryComparatorFactory.INSTANCE;;,"rtreeCmpFactories[0]=IntegerBinaryComparatorFactory.INSTANCE;
",0,6,3,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, ),
"
17,"location = location + File.separatorChar + Constants.getConstant(serverVersion, Constants.SERVERPATH); ;","location=location + File.separatorChar + Constants.getConstant(serverVersion,Constants.SERVERPATH);
",0,6,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
18,"watcher.assertHasEvent(matchingRegexes("".*"" + app.getApplicationId() + "".*Hello world.*""));;","watcher.assertHasEvent(matchingRegexes("".*"" + app.getApplicationId() + "".*Hello world.*""));
",0,12,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
19,"printer.writeLine(String.format(""%s = %s;"", assignNode.getTargets().get(0).accept(this), assignNode.getValue().accept(this))); ;","printer.writeLine(String.format(""%s = %s;"",assignNode.getTargets().get(0).accept(this),assignNode.getValue().accept(this)));
",0,11,15,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
20,"dag.addStream(""PiValues"", calc.output, adaptor.inPort, console.input).setLocality(locality);;","dag.addStream(""PiValues"",calc.output,adaptor.inPort,console.input).setLocality(locality);
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
21,"testMeta.context = mockOperatorContext(1, attributeMap);;","testMeta.context=mockOperatorContext(1,attributeMap);
",0,3,4,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
22,"String prefix = null, localName = null;;","String prefix=null, localName=null;
",0,0,5,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
23,serializer = tfactory.newTransformer(new StreamSource( new StringReader(styleSheet) ));;,"serializer=tfactory.newTransformer(new StreamSource(new StringReader(styleSheet)));
",0,12,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
24,"EventSubject snapshotEventSubject = EventSubject.getSubject(this.getClass(), dataDomain.getName());;","EventSubject snapshotEventSubject=EventSubject.getSubject(this.getClass(),dataDomain.getName());
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
25,try{Thread.sleep(m_connectRetryInterval);}catch(InterruptedException ie){};,"try {
  Thread.sleep(m_connectRetryInterval);
}
 catch (InterruptedException ie) {
}
",0,6,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, ),
Block(CatchClause-body, TryStatement-catchClauses, ),
"
26,tokenRef.setKeyIdentifierEncKeySHA1(((EncryptedKeyToken)tok).getSHA1());;,"tokenRef.setKeyIdentifierEncKeySHA1(((EncryptedKeyToken)tok).getSHA1());
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
27,"backupsInProgress -= statsMap.getOrDefault(StatsKey.BACKUPS_IN_PROGRESS, 0).intValue();;","backupsInProgress-=statsMap.getOrDefault(StatsKey.BACKUPS_IN_PROGRESS,0).intValue();
",0,8,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
28,"String props = validateInput((String) rawProps, ""role '""+roleName+""' property ""+rawProps);;","String props=validateInput((String)rawProps,""role '"" + roleName + ""' property ""+ rawProps);
",0,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
29,if (!user.equals(loginUser)){ proxyUsers.add(user); };,"if (!user.equals(loginUser)) {
  proxyUsers.add(user);
}
",0,2,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
30,"A15c x = client().dictionaryOn(A15c.class,A15a.class,A15b.class).addRootType().addBeanTypes().build().post(""/echoBody"",A15c.get()).run().cacheBody().assertBody().is(""{foo:{_type:'foo',foo:'1'}}"").getBody().asType(A15c.class);;","A15c x=client().dictionaryOn(A15c.class,A15a.class,A15b.class).addRootType().addBeanTypes().build().post(""/echoBody"",A15c.get()).run().cacheBody().assertBody().is(""{foo:{_type:'foo',foo:'1'}}"").getBody().asType(A15c.class);
",0,8,22,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
31,"entity.config().set(TestEntity.CONF_MAP_THING, ImmutableMap.of(""bkey"",""bval""));;","entity.config().set(TestEntity.CONF_MAP_THING,ImmutableMap.of(""bkey"",""bval""));
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
32,if (in != null) try { in.close(); } catch (IOException e) {  };,"if (in != null) try {
  in.close();
}
 catch (IOException e) {
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, TryStatement-body, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, TryStatement-body, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, IfStatement-thenStatement, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, IfStatement-thenStatement, ),
Block(CatchClause-body, TryStatement-catchClauses, IfStatement-thenStatement, ),
"
33,jwtDecoder.setClaimSetConverter(new KeycloakUsernameSubClaimAdapter(getProvider().getUserNameAttribute()));;,"jwtDecoder.setClaimSetConverter(new KeycloakUsernameSubClaimAdapter(getProvider().getUserNameAttribute()));
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
34,"assertRows(execute(""SELECT "" + copySign + ""(max(c), c) FROM %s""), row(-1.4));;","assertRows(execute(""SELECT "" + copySign + ""(max(c), c) FROM %s""),row(-1.4));
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
35,DeletionTime delete = (open ? marker.openDeletionTime(false) : marker.closeDeletionTime(false));;,"DeletionTime delete=(open ? marker.openDeletionTime(false) : marker.closeDeletionTime(false));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
36,List<AbstractType<?>> subComparators = new ArrayList<AbstractType<?>>(){{;,";
",0,0,1,,"EmptyStatement(Block-statements, Initializer-body, AnonymousClassDeclaration-bodyDeclarations, ClassInstanceCreation-anonymousClassDeclaration, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
37,"List<ArtGroup> results = ObjectSelect.query(ArtGroup.class, ArtGroup.NAME.eq(""g1"")).select(context);;","List<ArtGroup> results=ObjectSelect.query(ArtGroup.class,ArtGroup.NAME.eq(""g1"")).select(context);
",0,6,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
38,"ddlBuf.setCharAt(ddlBuf.length()-1, ')');;","ddlBuf.setCharAt(ddlBuf.length() - 1,')');
",0,2,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
39,final com.cloud.host.Host host = Mockito.mock(com.cloud.host.Host.class);;,"final com.cloud.host.Host host=Mockito.mock(com.cloud.host.Host.class);
",0,1,6,,"Modifier(VariableDeclarationStatement-modifiers, ),
QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
40,"String loadFile = CachedFile.getFileName(MODEL_FILE, this.modelPath);;","String loadFile=CachedFile.getFileName(MODEL_FILE,this.modelPath);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
41,"String addTableName = td.getSchemaName() + ""."" + td.getName();;","String addTableName=td.getSchemaName() + ""."" + td.getName();
",0,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
42,try { a.close(); } catch (Throwable tt) {;},"try {
  a.close();
}
 catch (Throwable tt) {
  ;
}
",0,11,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, ),
EmptyStatement(Block-statements, CatchClause-body, TryStatement-catchClauses, ),
"
43,throw StandardException.newException(SQLState.WRONG_BOOT_PASSWORD);;,"throw StandardException.newException(SQLState.WRONG_BOOT_PASSWORD);
",0,0,3,,"SimpleName(MethodInvocation-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ThrowStatement-expression, ),
"
44,while(collectAffectedRows(false)) {};,"while (collectAffectedRows(false)) {
}
",0,0,3,,"SimpleName(MethodInvocation-name, WhileStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
45,"createArchive(""dclt.jar"", new File(backupDir, db), ""dbro"");;","createArchive(""dclt.jar"",new File(backupDir,db),""dbro"");
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
46,"String avroSchemaText = new String(Files.readAllBytes(Paths.get(""src/test/resources/xml/testschema3"")));;","String avroSchemaText=new String(Files.readAllBytes(Paths.get(""src/test/resources/xml/testschema3"")));
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
47,"this.props = new Hashtable<String, Object>(MapUtil.toMap(properties));;","this.props=new Hashtable<String,Object>(MapUtil.toMap(properties));
",0,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
48,String[] stringArray = row.toString().split(IncrementalUpdateConstants.NODEID_BS_DELIM);;,"String[] stringArray=row.toString().split(IncrementalUpdateConstants.NODEID_BS_DELIM);
",0,1,7,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
49,"entityDefinition.setTags(new String[] {""cluster"", ""datacenter"", ""random""});;","entityDefinition.setTags(new String[]{""cluster"",""datacenter"",""random""});
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
50,"result = (Class<Consumer<AccessibleObject[]>>) defineAnonymousClass.invoke(unsafe, URL.class, accessor , null);;","result=(Class<Consumer<AccessibleObject[]>>)defineAnonymousClass.invoke(unsafe,URL.class,accessor,null);
",0,13,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
51,"if (nickname == null ) { nickname = """"+i; };","if (nickname == null) {
  nickname="""" + i;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
52,Class<?> fieldType = method.getParameterTypes()[0];;,"Class<?> fieldType=method.getParameterTypes()[0];
",0,0,6,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
53,while (parser.nextToken() != null) {};,"while (parser.nextToken() != null) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
54,"ScheduleExpression expr = new ScheduleExpression().year(2011).month(6).dayOfWeek(""3"").hour(22).minute(1).second(1).start(new Date(0));;","ScheduleExpression expr=new ScheduleExpression().year(2011).month(6).dayOfWeek(""3"").hour(22).minute(1).second(1).start(new Date(0));
",0,2,18,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
55,"System.out.println(""KKKKKK:["" + pi.getName() + ""]"");;","System.out.println(""KKKKKK:["" + pi.getName() + ""]"");
",0,5,6,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
56,"this.serviceManager.startAsync().awaitHealthy(10, TimeUnit.SECONDS);;","this.serviceManager.startAsync().awaitHealthy(10,TimeUnit.SECONDS);
",0,1,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
57,"IndexManager im = IndexUtils.getIndexManager((InternalCache) cache, root, true);;","IndexManager im=IndexUtils.getIndexManager((InternalCache)cache,root,true);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
58,"sb.append(diagnoses[i]).append(""\n"");;","sb.append(diagnoses[i]).append(""\n"");
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
59,result = prime * result + (int) (threadId ^ (threadId >>> 32));;,"result=prime * result + (int)(threadId ^ (threadId >>> 32));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
60,m.userAttrs = (String[]) userAttributes.toArray(temp);;,"m.userAttrs=(String[])userAttributes.toArray(temp);
",0,0,6,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
61,this.autoResetEvent = new AutoResetEvent(false);;,"this.autoResetEvent=new AutoResetEvent(false);
",0,3,4,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
62,processors[i].addShadowPartitionedRegionForUserRR(userRegion);;,"processors[i].addShadowPartitionedRegionForUserRR(userRegion);
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
63,values[i] = valueIt.next();;,"values[i]=valueIt.next();
",0,0,4,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
64,result = tableRef.getColumn(column.toUpperCase(Locale.ROOT));;,"result=tableRef.getColumn(column.toUpperCase(Locale.ROOT));
",0,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
65,"CheckpointsOptions options = new CheckpointsOptions(""checkpoints {<path>|<mongo-uri>|<jdbc-uri>} [list|rm-all|rm-unreferenced|rm <checkpoint>|info <checkpoint>|set <checkpoint> <name> [<value>]] [--segment]"").parse(args);;","CheckpointsOptions options=new CheckpointsOptions(""checkpoints {<path>|<mongo-uri>|<jdbc-uri>} [list|rm-all|rm-unreferenced|rm <checkpoint>|info <checkpoint>|set <checkpoint> <name> [<value>]] [--segment]"").parse(args);
",0,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
66,"is_benchmark_flag = tempArr[i++].replaceAll(""\"""", "" "").trim();;","is_benchmark_flag=tempArr[i++].replaceAll(""\"""","" "").trim();
",0,4,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
67,"String searchString = (String)actionRequest.getPortletSession().getAttribute(""searchStringValue"");;","String searchString=(String)actionRequest.getPortletSession().getAttribute(""searchStringValue"");
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
68,final int ch = data[i] & 0xff; ;,"final int ch=data[i] & 0xff;
",0,0,6,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
69,"assertFalse(tracker.removeUpdateStatsCommandRegion(regionInfo, new HashSet<byte[]>(Arrays.asList(Bytes.toBytes(""L#0"")))));;","assertFalse(tracker.removeUpdateStatsCommandRegion(regionInfo,new HashSet<byte[]>(Arrays.asList(Bytes.toBytes(""L#0"")))));
",0,1,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
PrimitiveType(ArrayType-elementType, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
70,"tenantKeyParts[4] = Bytes.toBytes(SCHEMA_NAME + ""."" +viewName.toUpperCase());;","tenantKeyParts[4]=Bytes.toBytes(SCHEMA_NAME + ""."" + viewName.toUpperCase());
",0,2,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
71,"assertEquals(-1, result);;","assertEquals(-1,result);
",0,0,3,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
72,srcNames = list.toArray(new File[list.size()]);;,"srcNames=list.toArray(new File[list.size()]);
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
73,this.getCounter(DYNAMIC_GRAPH_COUNTER.ADDED_VERTEX).increment(1);;,"this.getCounter(DYNAMIC_GRAPH_COUNTER.ADDED_VERTEX).increment(1);
",0,0,5,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
74,"res.copy(_slice[0], _slice[1]-1, 0, mb.getNumColumns() - 1, tmp, false);;","res.copy(_slice[0],_slice[1] - 1,0,mb.getNumColumns() - 1,tmp,false);
",0,1,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
75,"pic.getClass().getMethod(""publicMethod"", (Class[])null).invoke(pic, (Object[])null);;","pic.getClass().getMethod(""publicMethod"",(Class[])null).invoke(pic,(Object[])null);
",0,0,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
NullLiteral(CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
76,boolean[] columnsToInclude = new boolean[dataColumnCount];;,"boolean[] columnsToInclude=new boolean[dataColumnCount];
",0,0,6,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayCreation-dimensions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
77,TimestampColumnVector timestampColVector = new TimestampColumnVector(batch.DEFAULT_SIZE);;,"TimestampColumnVector timestampColVector=new TimestampColumnVector(batch.DEFAULT_SIZE);
",0,0,4,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
78,boolean isNull = !nonMatchedIterator.readNonMatchedBytesKey();;,"boolean isNull=!nonMatchedIterator.readNonMatchedBytesKey();
",0,0,4,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
79,List<JobHandle.Listener<String>> listeners = Lists.newArrayList(listener);;,"List<JobHandle.Listener<String>> listeners=Lists.newArrayList(listener);
",0,1,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
80,"assert false : ""Unexpected discovery message type: "" + type;;","assert false : ""Unexpected discovery message type: "" + type;
",0,0,3,,"BooleanLiteral(AssertStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, AssertStatement-message, ),
SimpleName(InfixExpression-rightOperand, AssertStatement-message, ),
"
81,"U.error(log, ""Failed to lock partitions [jobId="" + ses.getJobId() + "", ses="" + ses + ']', e);;","U.error(log,""Failed to lock partitions [jobId="" + ses.getJobId() + "", ses=""+ ses+ ']',e);
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
82,"File file = new File(fileDir, ""node-"" + ctx.localNodeId() + "".prf"");;","File file=new File(fileDir,""node-"" + ctx.localNodeId() + "".prf"");
",0,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
83,"setField(node, ""metrics"", new MockedClusterMetrics(original));;","setField(node,""metrics"",new MockedClusterMetrics(original));
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
84,"this.uniqueTag = JavaClassNames.simpleClassName(getClass())+"":""+source.getName()+""*->""+target.getName();;","this.uniqueTag=JavaClassNames.simpleClassName(getClass()) + "":"" + source.getName()+ ""*->""+ target.getName();
",0,4,11,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
85,"entityStore = new AtlasEntityStoreV1(deleteHandler, typeRegistry, mockChangeNotifier, graphMapper);;","entityStore=new AtlasEntityStoreV1(deleteHandler,typeRegistry,mockChangeNotifier,graphMapper);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
86,sortedArray[--numRecordsToRetain] = intermediateRecord._record;;,"sortedArray[--numRecordsToRetain]=intermediateRecord._record;
",0,0,3,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, ),
"
87,final String name = Stream.generate(() -> String.valueOf('a')).limit(BASE64_LIMIT + 1).collect(Collectors.joining());;,"final String name=Stream.generate(() -> String.valueOf('a')).limit(BASE64_LIMIT + 1).collect(Collectors.joining());
",0,1,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
88,"this.add(scrollPane, BorderLayout.CENTER);;","this.add(scrollPane,BorderLayout.CENTER);
",0,0,4,,"ThisExpression(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
89,when(mockNodeState.getChildNode(REP_PRINCIPAL_POLICY)).thenReturn(mockNodeState);;,"when(mockNodeState.getChildNode(REP_PRINCIPAL_POLICY)).thenReturn(mockNodeState);
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
90,this.businessName = data.getCompany(false);;,"this.businessName=data.getCompany(false);
",0,0,5,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
91,JsonParser p = JsonParser.DEFAULT.copy().applyAnnotations(B2Config.class).build();;,"JsonParser p=JsonParser.DEFAULT.copy().applyAnnotations(B2Config.class).build();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
92,"int[][][] in =  {{{1,2},{3,4}},{{5,6},{7,8}}};;","int[][][] in={{{1,2},{3,4}},{{5,6},{7,8}}};
",0,0,13,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayInitializer-expressions, ArrayInitializer-expressions, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
93,"Object in = new A[]{A.create(""c""),A.create(""a""),null,null,A.create(""b"")};;","Object in=new A[]{A.create(""c""),A.create(""a""),null,null,A.create(""b"")};
",0,0,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
94,"m = client().dictionary(A15a.class,A15b.class).addRootType().addBeanTypes().build().post(""/echoBody"",m).run().cacheBody().assertBody().is(""{x:{_type:'foo',foo:'1'},y:{_type:'bar',foo:'2'}}"").getBody().asType(OMap.class);;","m=client().dictionary(A15a.class,A15b.class).addRootType().addBeanTypes().build().post(""/echoBody"",m).run().cacheBody().assertBody().is(""{x:{_type:'foo',foo:'1'},y:{_type:'bar',foo:'2'}}"").getBody().asType(OMap.class);
",0,1,19,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
95,"x = client().findFluentSetters(A20.class).build().post(""/echoBody"",new StringReader(""{foo:'1'}"")).run().cacheBody().assertBody().contains(""{foo:'1'}"").getBody().asType(A20.class);;","x=client().findFluentSetters(A20.class).build().post(""/echoBody"",new StringReader(""{foo:'1'}"")).run().cacheBody().assertBody().contains(""{foo:'1'}"").getBody().asType(A20.class);
",0,2,17,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
96,pluginService = (PluginService) clazz.getDeclaredConstructor().newInstance();;,"pluginService=(PluginService)clazz.getDeclaredConstructor().newInstance();
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
97,FileOutputSpecs specs = new FileOutputSpecs(getSpecNode(outputDescription.getSpecification()));;,"FileOutputSpecs specs=new FileOutputSpecs(getSpecNode(outputDescription.getSpecification()));
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
98,parent.setProfiles( Collections.singletonList( new Profile() ) );;,"parent.setProfiles(Collections.singletonList(new Profile()));
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
99,"assertThat( apidocs.resolve( ""def/configuration/package-frame.html"" )).exists();;","assertThat(apidocs.resolve(""def/configuration/package-frame.html"")).exists();
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
100,"((ScmManagerStub) scmManager ).setException( new NoSuchScmProviderException( ""..."" ) );;","((ScmManagerStub)scmManager).setException(new NoSuchScmProviderException(""...""));
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
101,return dataFactory.create(apiXSDType);;,"return dataFactory.create(apiXSDType);
",0,1,3,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
102,byte[] data = null;;,"byte[] data=null;
",0,0,4,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NullLiteral(VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
103,boolean isVertical   = CorePanelGroupLayout.LAYOUT_VERTICAL.equals(layout);;,"boolean isVertical=CorePanelGroupLayout.LAYOUT_VERTICAL.equals(layout);
",0,0,5,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
104,this.displayName = Deployment.getDefault().getServerInstance(instanceID).getDisplayName();;,"this.displayName=Deployment.getDefault().getServerInstance(instanceID).getDisplayName();
",0,0,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
105,while(input.read() != LexerInput.EOF) {};,"while (input.read() != LexerInput.EOF) {
}
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, WhileStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
106,"List<Position.Bias> biases = addBias(null, dotOffsetAndBias, 0);;","List<Position.Bias> biases=addBias(null,dotOffsetAndBias,0);
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
107,"path = this.getDDNameValue(cur, name).toString();;","path=this.getDDNameValue(cur,name).toString();
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
108,return null;;,"return null;
",0,0,1,,"NullLiteral(ReturnStatement-expression, ),
"
109,ald.runAtomic(() -> {;,";
",0,0,1,,"EmptyStatement(Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
110,LayoutInterval li = dragger.getMovingComponents()[0].getLayoutInterval(dimension);;,"LayoutInterval li=dragger.getMovingComponents()[0].getLayoutInterval(dimension);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
111,((CPChildren) getChildren()).addNotify();;,"((CPChildren)getChildren()).addNotify();
",0,0,3,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
112,"typedChars = token.text().toString().substring(0, caretOffset - tOffset);;","typedChars=token.text().toString().substring(0,caretOffset - tOffset);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
113,while ('u' == (ch = input.read())) {};,"while ('u' == (ch=input.read())) {
}
",0,0,5,,"CharacterLiteral(InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
114,this.cops.removeChangeListener(this.copsCl);;,"this.cops.removeChangeListener(this.copsCl);
",0,2,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
115,"compositeColor (g, r, new Color (0, 120, 255), 0.2f);;","compositeColor(g,r,new Color(0,120,255),0.2f);
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
116,"proc.addEntity(""name"", ""id3"", initialTimestamp + 1);;","proc.addEntity(""name"",""id3"",initialTimestamp + 1);
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
117,"WebTarget webTarget = currentSchemaRegistryTargets().schemasTarget.path(encode(schemaName) + ""/versions/latest"").queryParam(""branch"", schemaBranchName);;","WebTarget webTarget=currentSchemaRegistryTargets().schemasTarget.path(encode(schemaName) + ""/versions/latest"").queryParam(""branch"",schemaBranchName);
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
118,"ScheduleExpression expr = new ScheduleExpression().year(""2011"").month(""dec-dec"").dayOfMonth(29).hour(23).minute(1).second(0).start(new Date(0));;","ScheduleExpression expr=new ScheduleExpression().year(""2011"").month(""dec-dec"").dayOfMonth(29).hour(23).minute(1).second(0).start(new Date(0));
",0,0,18,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
119,"org.apache.phoenix.thirdparty.com.google.common.collect.Table<String, String, Object> upsertedData = dataWriter.getDataTable();;","org.apache.phoenix.thirdparty.com.google.common.collect.Table<String,String,Object> upsertedData=dataWriter.getDataTable();
",0,0,7,,"QualifiedName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
120,"if (expression.evaluate(null, ptr)) {;","if (expression.evaluate(null,ptr)) {
  ;
  splits[i]=ByteUtil.copyKeyBytesIfNecessary(ptr);
  continue;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(Block-statements, IfStatement-thenStatement, ),
"
121,Long phoenixTTLProp = (Long) TableProperty.PHOENIX_TTL.getValue(tableProps);;,"Long phoenixTTLProp=(Long)TableProperty.PHOENIX_TTL.getValue(tableProps);
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
122,"Map<String, List<Pair<String, Object>>> properties=new HashMap<>(statement.getProps().size());;","Map<String,List<Pair<String,Object>>> properties=new HashMap<>(statement.getProps().size());
",0,3,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
123,LogicalSchema origSchema = predFS.schema.getField(0).schema;;,"LogicalSchema origSchema=predFS.schema.getField(0).schema;
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, FieldAccess-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
124,"PersistentTopicInternalStats stats = admin.topics().getInternalStats(checkTopic, false);;","PersistentTopicInternalStats stats=admin.topics().getInternalStats(checkTopic,false);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
125,"_outcomes = outcomes == null ? null : Arrays.copyOf(outcomes, outcomes.length);;","_outcomes=outcomes == null ? null : Arrays.copyOf(outcomes,outcomes.length);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
126,"LoginContext loginContext = new LoginContext(configScope, new CredentialCallbackHandler());;","LoginContext loginContext=new LoginContext(configScope,new CredentialCallbackHandler());
",0,0,5,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
127,package org.apache.ranger.ugsyncutil.model;;,"package org.apache.ranger.ugsyncutil.model;
",0,0,1,,"QualifiedName(PackageDeclaration-name, ),
"
128,int physicalLine = logicalLine + sourceFragments[i].getPhysicalLine();;,"int physicalLine=logicalLine + sourceFragments[i].getPhysicalLine();
",0,0,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
129,@Nullable final Object[] services = serviceTracker.getServices();;,"@Nullable final Object[] services=serviceTracker.getServices();
",0,0,7,,"SimpleName(MarkerAnnotation-typeName, VariableDeclarationStatement-modifiers, ),
Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
130,assertTrue(chunkText.indexOf(tokens.get(ct).getText()) >= 0);;,"assertTrue(chunkText.indexOf(tokens.get(ct).getText()) >= 0);
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
131,if(new URI(value.toString()).isAbsolute()){;,"if (new URI(value.toString()).isAbsolute()) {
  ;
  return valueFactory.createReference(value);
}
 else {
  return null;
}
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
EmptyStatement(Block-statements, IfStatement-thenStatement, ),
"
132,"List<Pair<Object, Values>> values = TestUtils.MockInsertBolt.getCollectedValues();;","List<Pair<Object,Values>> values=TestUtils.MockInsertBolt.getCollectedValues();
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
133,"TrackedTopology tracked = new TrackedTopology(Thrift.buildTopology(spoutMap, boltMap), cluster);;","TrackedTopology tracked=new TrackedTopology(Thrift.buildTopology(spoutMap,boltMap),cluster);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
134,deserializer = (XMLStreamHelperImpl)((HelperContextImpl)scope).getXMLStreamHelper();;,"deserializer=(XMLStreamHelperImpl)((HelperContextImpl)scope).getXMLStreamHelper();
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
135,"m_uimaFM.initialize(cfgFile, null == isXMLBeansarser ? false : isXMLBeansarser.booleanValue());;","m_uimaFM.initialize(cfgFile,null == isXMLBeansarser ? false : isXMLBeansarser.booleanValue());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
136,"new StateEventKey(null, e0);;","new StateEventKey(null,e0);
",0,0,3,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
"
137,"new StateEventKey(s0, null);;","new StateEventKey(s0,null);
",0,0,3,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
"
138,"logger.debug(""HttpWorkerThread.run()"", null, ""Thread Id:""+Thread.currentThread().getId()+"" Requesting next WI from JD"");;","logger.debug(""HttpWorkerThread.run()"",null,""Thread Id:"" + Thread.currentThread().getId() + "" Requesting next WI from JD"");
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
139,"String start = getTimeStamp(request,reservation.getDuccId(), reservation.getStandardInfo().getDateOfSubmission());;","String start=getTimeStamp(request,reservation.getDuccId(),reservation.getStandardInfo().getDateOfSubmission());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
140,String retVal = formatter.format(swapBytes/GB);;,"String retVal=formatter.format(swapBytes / GB);
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
141,"final String key2 = ""key2"";;","final String key2=""key2"";
",0,0,4,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
142,"Map<String, Set<String>> expectedTableColumn = new HashMap<String, Set<String>>();;","Map<String,Set<String>> expectedTableColumn=new HashMap<String,Set<String>>();
",1,22,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
143,hashCode = super.hashCode();;,"hashCode=super.hashCode();
",1,1,2,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SuperMethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
144,"TypesDef typesDef = TypeConverterUtil.toTypesDef(typeRegistry.getType(typeName), typeRegistry);;","TypesDef typesDef=TypeConverterUtil.toTypesDef(typeRegistry.getType(typeName),typeRegistry);
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
145,final int bufferSize = AtlasConfiguration.WEBSERVER_REQUEST_BUFFER_SIZE.getInt();;,"final int bufferSize=AtlasConfiguration.WEBSERVER_REQUEST_BUFFER_SIZE.getInt();
",1,1,5,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
146,this.factory = MexUtil.getSOAPFactory(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);;,"this.factory=MexUtil.getSOAPFactory(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
",1,5,5,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
147,case ITERABLE:;,"case ITERABLE:
",1,1,1,,"SimpleName(SwitchCase-expression, ),
"
148,"else if ("".:"".indexOf(c)>=0) ;","if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
149,long offeringRootDiskSize = 10l * GiB_TO_BYTES;;,"long offeringRootDiskSize=10l * GiB_TO_BYTES;
",1,2,4,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
150,"RecordingWinRmTool.setCustomResponse("".*my.*File.*"", new MyResponseGenerator(true,mutexSupport));;","RecordingWinRmTool.setCustomResponse("".*my.*File.*"",new MyResponseGenerator(true,mutexSupport));
",1,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
151,if (el.getClassName().startsWith(s)) return false;;,"if (el.getClassName().startsWith(s)) return false;
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
152,while (waitOnForExpiry(this)) {};,"while (waitOnForExpiry(this)) {
}
",1,1,3,,"SimpleName(MethodInvocation-name, WhileStatement-expression, ),
ThisExpression(MethodInvocation-arguments, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
153,int x = xPositionForValue(value) - label.getWidth() / 2;;,"int x=xPositionForValue(value) - label.getWidth() / 2;
",1,4,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
154,"new RowUpdateBuilder(cfs.metadata(), 2, ""k1"").clustering(""c"").add(""birthdate"", 1L).build().apply();;","new RowUpdateBuilder(cfs.metadata(),2,""k1"").clustering(""c"").add(""birthdate"",1L).build().apply();
",1,1,12,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
155,final Language language = lang == null ? null : new Language(lang);;,"final Language language=lang == null ? null : new Language(lang);
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
156,if ( leftLength == rightLength );,"if (leftLength == rightLength) ;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
157,"verifyListenerValue(server1, MemoryState.NORMAL, 0, true);;","verifyListenerValue(server1,MemoryState.NORMAL,0,true);
",1,1,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
158,"System.out.println(""Plugin "" + this + "" creating server socket for port="" + port + "" backlog="" + backlog);;","System.out.println(""Plugin "" + this + "" creating server socket for port=""+ port+ "" backlog=""+ backlog);
",1,1,8,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
159,do { ; } while,";
",1,1,1,,"EmptyStatement(Block-statements, DoStatement-body, ),
"
160,CheckpointStorage spy = Mockito.spy((CheckpointStorage)secondary1.getFSImage());;,"CheckpointStorage spy=Mockito.spy((CheckpointStorage)secondary1.getFSImage());
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
161,"Assert.assertEquals(replication, locations[0].getNames().length);;","Assert.assertEquals(replication,locations[0].getNames().length);
",1,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
162,"amContainer.setApplicationACLs(new HashMap<ApplicationAccessType, String>());;","amContainer.setApplicationACLs(new HashMap<ApplicationAccessType,String>());
",1,1,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
163,"Int32Pointer childrenCount = bridge.createInt32Pointer(1, false);;","Int32Pointer childrenCount=bridge.createInt32Pointer(1,false);
",1,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
164,int r = (color.getRGB() >> 16) & 0xFF;;,"int r=(color.getRGB() >> 16) & 0xFF;
",1,1,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
165,int compareSignature = signature.compareTo(nat.signature);;,"int compareSignature=signature.compareTo(nat.signature);
",1,1,5,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
166,output.vector[i] = vector[i];;,"output.vector[i]=vector[i];
",1,1,4,,"QualifiedName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
167,Assert.assertTrue(jss1.getNextRunTimeMillis().get().longValue() <= System.currentTimeMillis());;,"Assert.assertTrue(jss1.getNextRunTimeMillis().get().longValue() <= System.currentTimeMillis());
",1,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
168,if (cmp < 0) { x = (Tuple)xi.next(); continue; };,"if (cmp < 0) {
  x=(Tuple)xi.next();
  continue;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
ContinueStatement(Block-statements, IfStatement-thenStatement, ),
"
169,case 'q':; break;,"case 'q':
",1,1,1,,"CharacterLiteral(SwitchCase-expression, ),
"
170,return ret > 0 ? 1 : -1;;,"return ret > 0 ? 1 : -1;
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
171,if (!licenses.contains(license)) ;,"if (!licenses.contains(license)) ;
",1,2,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
172,"if (e.getActionCommand ().equals (""SwitchMe!""));","if (e.getActionCommand().equals(""SwitchMe!"")) ;
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
173,"Logger.getLogger(ErrorDescriptionFactory.class.getName()).log(Level.INFO, ""Incorrect span,  start="" + starts[i] + "", end="" + ends[i], new Exception());;","Logger.getLogger(ErrorDescriptionFactory.class.getName()).log(Level.INFO,""Incorrect span,  start="" + starts[i] + "", end=""+ ends[i],new Exception());
",1,1,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
174,"if (cake == null) fail(""Cannot get 'ValidateXMLCookie'."");;","if (cake == null) fail(""Cannot get 'ValidateXMLCookie'."");
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
175,"setAttribute(PARTS_PROPERTY, SOAPAttribute.PARTS, Util.toString(parts));;","setAttribute(PARTS_PROPERTY,SOAPAttribute.PARTS,Util.toString(parts));
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
176,"if (UtilValidate.isNotEmpty(payPalConfig.getString(""imageUrl"")));","if (UtilValidate.isNotEmpty(payPalConfig.getString(""imageUrl""))) ;
",1,1,6,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
177,"ScheduleExpression expr = new ScheduleExpression().year(""2009-2013"").month(2).dayOfMonth(29).hour(23).minute(1).second(0).start(new Date(0));;","ScheduleExpression expr=new ScheduleExpression().year(""2009-2013"").month(2).dayOfMonth(29).hour(23).minute(1).second(0).start(new Date(0));
",1,1,18,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
178,"String v1 = line1[attrIndex].toLowerCase().replace(""\"""", """").replace("",  "", "", "").replace("", "", "","");;","String v1=line1[attrIndex].toLowerCase().replace(""\"""","""").replace("",  "","", "").replace("", "","","");
",1,1,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
179,settings.expectedOpGroups = scenario.getLoadProfile().getOpDistribution().size();;,"settings.expectedOpGroups=scenario.getLoadProfile().getOpDistribution().size();
",1,1,5,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
180,DateTimeFormatter fmtr = DateTimeFormat.forPattern(PherfConstants.DEFAULT_DATE_PATTERN).withZone(DateTimeZone.UTC);;,"DateTimeFormatter fmtr=DateTimeFormat.forPattern(PherfConstants.DEFAULT_DATE_PATTERN).withZone(DateTimeZone.UTC);
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
181,while((b = _data.get()) != 0) {};,"while ((b=_data.get()) != 0) {
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, WhileStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
182,bindableVarInfo.isStatic = node.hasModifier(ASModifier.STATIC);;,"bindableVarInfo.isStatic=node.hasModifier(ASModifier.STATIC);
",1,1,4,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
183,"getContext().getCounters().findCounter(COUNTER_NAME, COUNTER_NAME).increment(1);;","getContext().getCounters().findCounter(COUNTER_NAME,COUNTER_NAME).increment(1);
",1,1,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
184,while (pos < end && isWhiteSpace(bytes[pos])) {pos++; };,"while (pos < end && isWhiteSpace(bytes[pos])) {
  pos++;
}
",1,2,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, Block-statements, WhileStatement-body, ),
"
185,"File sourceFile2 = new File(this.getTempDataDirectory(), ""plain.j8.enc.txt"");;","File sourceFile2=new File(this.getTempDataDirectory(),""plain.j8.enc.txt"");
",1,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
186,try { Thread.sleep(5); } catch ( Exception intentionallyIgnored ) {};,"try {
  Thread.sleep(5);
}
 catch (Exception intentionallyIgnored) {
}
",1,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, ),
Block(CatchClause-body, TryStatement-catchClauses, ),
"
187,"if (dir.equals(""lro"")) {dir = ""ltr""; mode=""bidi-override"";};","if (dir.equals(""lro"")) {
  dir=""ltr"";
  mode=""bidi-override"";
}
",1,1,7,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
188,if (contentType != null);,"if (contentType != null) ;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
189,"assertOptional(t.tags()).isType(Set.class).asJson().is(""['foo','bar']"");;","assertOptional(t.tags()).isType(Set.class).asJson().is(""['foo','bar']"");
",2,26,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
190,"IMessage data = (IMessage) DeploymentUtils.deserialize(message, deploymentId, ctx);;","IMessage data=(IMessage)DeploymentUtils.deserialize(message,deploymentId,ctx);
",2,8,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
191,"int minKeySize = conf.getInt(MIN_KEY, 10);;","int minKeySize=conf.getInt(MIN_KEY,10);
",2,12,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
192,this.mcontext = camelContext.getExtension(ManagedCamelContext.class);;,"this.mcontext=camelContext.getExtension(ManagedCamelContext.class);
",2,8,5,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
193,while (EOF != worker.read(readBuffer)) {};,"while (EOF != worker.read(readBuffer)) {
}
",2,6,5,,"SimpleName(InfixExpression-leftOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, WhileStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, WhileStatement-expression, ),
Block(WhileStatement-body, ),
"
194,ArrayList<String> retv = new ArrayList<String>(1);;,"ArrayList<String> retv=new ArrayList<String>(1);
",2,3,6,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
195,"trainingParameters.put(AbstractDataIndexer.SORT_PARAM, false);;","trainingParameters.put(AbstractDataIndexer.SORT_PARAM,false);
",2,2,4,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
196,case DataExpression.DELIM_HAS_HEADER_ROW: ;,"case DataExpression.DELIM_HAS_HEADER_ROW:
",2,2,1,,"QualifiedName(SwitchCase-expression, ),
"
197,"TestLogger.logger.debug(""Holder Response String ="" + strHolder.value);;","TestLogger.logger.debug(""Holder Response String ="" + strHolder.value);
",3,3,4,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
198,"final Task<Void> secondStop = entity.invoke(Startable.STOP, ImmutableMap.<String, Object>of());;","final Task<Void> secondStop=entity.invoke(Startable.STOP,ImmutableMap.<String,Object>of());
",3,15,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
199,if (obj == Void.class) {;,"if (obj == Void.class) {
  ;
  return null;
}
 else {
  return (T)obj;
}
",3,3,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(Block-statements, IfStatement-thenStatement, ),
"
200,"cs.setBigDecimal(1,new BigDecimal(""1""));;","cs.setBigDecimal(1,new BigDecimal(""1""));
",3,5,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
201,default:;,"default :
",3,3,1,,"SwitchCase(),
"
202,boolean enoughRacks = false;;,"boolean enoughRacks=false;
",3,3,3,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
BooleanLiteral(VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
203,float y2 = coords[(i+1)*2+1];;,"float y2=coords[(i + 1) * 2 + 1];
",3,3,7,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
204,"this.actionProcessor = Objects.requireNonNull(actionProcessor, ""actionProcessor is null"");;","this.actionProcessor=Objects.requireNonNull(actionProcessor,""actionProcessor is null"");
",3,3,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
205,"GeometryWrapper geometry2 = GeometryWrapper.extract(""<http:","GeometryWrapper geometry2=GeometryWrapper.extract(""<http://www.opengis.net/def/crs/EPSG/0/4326> POINT(10.0 20.0001)"",WKTDatatype.URI);
",3,3,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
206,"rule = ""#"" + selectElementIdTextField.getText().trim();;","rule=""#"" + selectElementIdTextField.getText().trim();
",3,4,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
207,"if (starts.length == 0 || starts[0] < 0) throw new IndexOutOfBoundsException(""start < 0 ("" + starts + "" < 0)"");;","if (starts.length == 0 || starts[0] < 0) throw new IndexOutOfBoundsException(""start < 0 ("" + starts + "" < 0)"");
",3,3,9,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
208,if (elementDecls == null) return org.openide.util.Enumerations.empty();;,"if (elementDecls == null) return org.openide.util.Enumerations.empty();
",3,3,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
209,int endIndex = -1; ;,"int endIndex=-1;
",4,4,3,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
NumberLiteral(PrefixExpression-operand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
210,"allowJavaSessionRemovalOutput = allowJavaSessionRemoval.equals(WebcrawlerConfig.ATTRVALUE_NO)?Messages.getBodyString(locale, ""WebcrawlerConnector.no""):Messages.getBodyString(locale, ""WebcrawlerConnector.yes"");;","allowJavaSessionRemovalOutput=allowJavaSessionRemoval.equals(WebcrawlerConfig.ATTRVALUE_NO) ? Messages.getBodyString(locale,""WebcrawlerConnector.no"") : Messages.getBodyString(locale,""WebcrawlerConnector.yes"");
",4,6,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
211,new JDomBuild( null ).addExtension( null );;,"new JDomBuild(null).addExtension(null);
",5,5,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
212,"points.add(new double[]{90, 90});;","points.add(new double[]{90,90});
",5,5,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
PrimitiveType(ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
213,"text = eo.getText(eo.getLineNumber() + iOffset).replace(""\r\n"", """").replace(""\n"", """");;","text=eo.getText(eo.getLineNumber() + iOffset).replace(""\r\n"","""").replace(""\n"","""");
",6,6,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
214,final StoragePool pool = Mockito.mock(StoragePool.class);;,"final StoragePool pool=Mockito.mock(StoragePool.class);
",7,7,6,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
215,HelpCtx expected = new HelpCtx(CloneViewAction.class);;,"HelpCtx expected=new HelpCtx(CloneViewAction.class);
",7,7,4,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
216,load1.setScriptSchema(org.apache.pig.newplan.logical.Util.translateSchema((inputSchema1)));;,"load1.setScriptSchema(org.apache.pig.newplan.logical.Util.translateSchema((inputSchema1)));
",8,9,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
217,if (!ok) {;,"if (!ok) {
  ;
  if (hval != null)   str+=""Attribute could not be removed through HttpServletRequest."";
  if (pval != null)   str+=""Attribute could not be removed through ActionRequest."";
  tr45.appendTcDetail(str);
}
",15,15,2,,"SimpleName(PrefixExpression-operand, IfStatement-expression, ),
EmptyStatement(Block-statements, IfStatement-thenStatement, ),
"
218,import org.apache.ambari.logfeeder.manager.InputConfigHolder;;,"import org.apache.ambari.logfeeder.manager.InputConfigHolder;
",34,34,1,,"QualifiedName(ImportDeclaration-name, ),
"
