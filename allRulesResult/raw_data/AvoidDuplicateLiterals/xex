127000,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,175,,"                new AttributeDefinition(""manager"", ""Manager"", Multiplicity.OPTIONAL, false, ""subordinates""),"
127001,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,202,,"                createTraitTypeDef(""SecurityClearance"", ""SecurityClearance""+_description, ImmutableSet.<String>of(),"
127002,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,297,,"                        createOptionalAttrDef(""attr"", DataTypes.STRING_TYPE));"
127003,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,356,,"                        createRequiredAttrDef(""description"", DataTypes.STRING_TYPE));"
127004,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,366,,"        EnumTypeDefinition enumTypeDefinition = new EnumTypeDefinition(""tableType"", ""tableType"" + _description, values);"
127005,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/TestUtils.java,371,,"                        createRequiredAttrDef(""type"", DataTypes.STRING_TYPE));"
127006,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/DataSetLineageServiceTest.java,137,,"        JSONArray rows = results.getJSONArray(""rows"");"
127007,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/DataSetLineageServiceTest.java,170,,"        JSONObject values = results.getJSONObject(""values"");"
127008,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/DataSetLineageServiceTest.java,173,,"        final JSONObject vertices = values.getJSONObject(""vertices"");"
127009,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/DataSetLineageServiceTest.java,176,,"        final JSONObject edges = values.getJSONObject(""edges"");"
127010,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/DataSetLineageServiceTest.java,199,,"                repository.getEntityDefinition(HIVE_TABLE_TYPE, ""name"", ""sales_fact_monthly_mv"");"
127011,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,92,,"        ITypedReferenceableInstance jane = repositoryService.getEntityDefinition(""Manager"", ""name"", ""Jane"");"
127012,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,147,,"        JSONArray rows = results.getJSONArray(""rows"");"
127013,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,265,,"        System.out.println(""results = "" + results);"
127014,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,267,,"        Object query = results.get(""query"");"
127015,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,338,,"        for (String name : Arrays.asList(""John"", ""Max"")) {"
127016,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,695,,"               {""from hive_db as h orderby h.owner limit 3"", 3, ""owner"", isAscending},"
127017,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,701,,"               {""hive_column select hive_column.name orderby hive_column.name "", 37, ""hive_column.name"", isAscending},"
127018,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,776,,"               {""hive_db where (name = \""Reporting\"") select name as _col_0, (createTime + 1) as _col_1 orderby '_col_1'"", 1, ""_col_1"", isAscending},"
127019,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,786,,"               {""hive_table where (name = \""sales_fact\"" and createTime >= \""2014-12-11T02:35:58.440Z\"" ) select name as _col_0, createTime as _col_1 orderby '_col_0' "", 1, ""_col_0"", isAscending},"
127020,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,802,,"                                new FieldValueValidator().withFieldNames(""m.name"", ""count()"").withExpectedValues(""Max"", 1)"
127021,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,803,,"                                        .withExpectedValues(""Julius"", 1) },"
127022,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,826,,"                                new FieldValueValidator().withFieldNames(""organDonor"", ""max"", ""min"", ""count"")"
127023,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,834,,"                                        .withExpectedValues(""Jane BI"", ""Reporting"", 1)"
127024,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,834,,"                                        .withExpectedValues(""Jane BI"", ""Reporting"", 1)"
127025,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,835,,"                                        .withExpectedValues(""Tim ETL"", ""Logging"", 1)"
127026,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,835,,"                                        .withExpectedValues(""Tim ETL"", ""Logging"", 1)"
127027,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,836,,"                                        .withExpectedValues(""John ETL"", ""Sales"", 1) },"
127028,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,836,,"                                        .withExpectedValues(""John ETL"", ""Sales"", 1) },"
127029,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,920,,"        System.out.println(""Executing dslQuery = "" + dslQuery);"
127030,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,970,,"        System.out.println(""query ["" + dslQuery + ""] returned ["" + rows.length() + ""] rows"");"
127031,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/discovery/GraphBackedDiscoveryServiceTest.java,970,,"        System.out.println(""query ["" + dslQuery + ""] returned ["" + rows.length() + ""] rows"");"
127032,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/lineage/EntityLineageServiceTest.java,81,,"        String entityGuid = getEntityId(HIVE_TABLE_TYPE, ""name"", ""table2"");"
127033,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/lineage/EntityLineageServiceTest.java,104,,"    @Test(dataProvider = ""invalidQueryParamsProvider"")"
127034,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/query/QueryProcessorTest.java,53,,"        assertTrue(tc.wasTypeRequested(""hive_db""));"
127035,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/query/QueryProcessorTest.java,55,,"        assertFalse(tc.wasTypeRequested(""name""));"
127036,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,91,,"        GroovyExpression expr3 = makeHasExpression(""prop1"",""Fred"");"
127037,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,91,,"        GroovyExpression expr3 = makeHasExpression(""prop1"",""Fred"");"
127038,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,92,,"        GroovyExpression expr4 = makeHasExpression(""prop2"",""George"");"
127039,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,92,,"        GroovyExpression expr4 = makeHasExpression(""prop2"",""George"");"
127040,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,93,,"        GroovyExpression toOptimize = getFactory().generateLogicalExpression(getVerticesExpression(), ""and"", Arrays.asList(expr1, expr2, expr3, expr4));"
127041,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,194,,"        input = makeHasExpression(input, ""name"",""Fred"");"
127042,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,215,,"        toOptimize = makeHasExpression(toOptimize, ""age"",""13"");"
127043,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,216,,"        toOptimize = makeOutExpression(toOptimize, ""livesIn"");"
127044,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,273,,"        toOptimize = new FunctionCallExpression(TraversalStepType.END, toOptimize,""toList"");"
127045,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,287,,"        toOptimize = new FunctionCallExpression(toOptimize,""size"");"
127046,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,300,,"        toOptimize = makeOutExpression(toOptimize, ""knows"");"
127047,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/AbstractGremlinQueryOptimizerTest.java,652,,"        GroovyExpression expr0 = makeHasExpression(""__typeName"", ""OMAS_OMRSAsset"");"
127048,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,105,,"        HierarchicalTypeDefinition<ClassType> mapValueDef = TypesUtil.createClassTypeDef(""CompositeMapValue"","
127049,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,113,,"            new AttributeDefinition(""map"", DataTypes.mapTypeName(DataTypes.STRING_TYPE.getName(),"
127050,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,143,,"                repositoryService.getEntityDefinition(TestUtils.DATABASE_TYPE, ""name"", entity.get(""name""));"
127051,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,362,,"        ITypedReferenceableInstance mapValueInstance = map.get(""value1"");"
127052,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,407,,"        ITypedReferenceableInstance john = repositoryService.getEntityDefinition(nameGuidMap.get(""John""));"
127053,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,410,,"        ITypedReferenceableInstance max = repositoryService.getEntityDefinition(nameGuidMap.get(""Max""));"
127054,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,425,,"        maxEntity.set(""mentor"", johnGuid);"
127055,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,590,,"        HierarchicalTypeDefinition<ClassType> structTargetDef = TypesUtil.createClassTypeDef(""StructTarget"","
127056,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,592,,"        HierarchicalTypeDefinition<ClassType> traitTargetDef = TypesUtil.createClassTypeDef(""TraitTarget"","
127057,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,594,,"        HierarchicalTypeDefinition<ClassType> structContainerDef = TypesUtil.createClassTypeDef(""StructContainer"","
127058,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,595,,"            ImmutableSet.<String>of(), TypesUtil.createOptionalAttrDef(""struct"", ""TestStruct""));"
127059,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,600,,"            new AttributeDefinition(""target"", DataTypes.arrayTypeName(""StructTarget""), Multiplicity.OPTIONAL, false, null),"
127060,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,601,,"            new AttributeDefinition(""nestedStructs"", DataTypes.arrayTypeName(""NestedStruct""), Multiplicity.OPTIONAL, false, null));"
127061,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,604,,"        HierarchicalTypeDefinition<TraitType> traitDef = TypesUtil.createTraitTypeDef(""TestTrait"", ImmutableSet.<String>of(),"
127062,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,712,,"        HierarchicalTypeDefinition<ClassType> mapValueDef = TypesUtil.createClassTypeDef(""MapValue"","
127063,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,714,,"            new AttributeDefinition(""biMapOwner"", ""MapOwner"", Multiplicity.OPTIONAL, false, ""biMap""));"
127064,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,714,,"            new AttributeDefinition(""biMapOwner"", ""MapOwner"", Multiplicity.OPTIONAL, false, ""biMap""));"
127065,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryDeleteTestBase.java,829,,"        HierarchicalTypeDefinition<ClassType> mapValueDef = TypesUtil.createClassTypeDef(""RequiredMapValue"","
127066,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,139,,"                        new AttributeDefinition(""ref"", refType.typeName, Multiplicity.OPTIONAL, true, null));"
127067,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,259,,"        wallaceComputer.set(""name"", ""wallaceComputer"");"
127068,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,382,,"    @Test(dependsOnMethods = ""testSubmitEntity"")"
127069,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,446,,"    @Test(dependsOnMethods = ""testCreateEntity"")"
127070,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,577,,"                TypesUtil.createRequiredAttrDef(""type"", DataTypes.STRING_TYPE));"
127071,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,688,,"        String typeName = dataType.getString(""typeName"");"
127072,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,722,,"        Assert.assertEquals(typeName, ""Person"");"
127073,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphBackedMetadataRepositoryTest.java,799,,"        results = new JSONArray(discoveryService.searchByFullText(""Department"", queryParams));"
127074,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/GraphRepoMapperScaleTest.java,98,,"        databaseInstance.set(""name"", DATABASE_NAME);"
127075,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/Gremlin2QueryOptimizerTest.java,44,,"        return ""def r=(([]) as Set);"""
127076,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/Gremlin3QueryOptimizerTest.java,45,,"        return ""def r=(([]) as Set);"""
127077,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/ReverseReferenceUpdateTestBase.java,70,,"            TypesUtil.createRequiredAttrDef(""name"", DataTypes.STRING_TYPE),"
127078,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/ReverseReferenceUpdateTestBase.java,72,,"            new AttributeDefinition(""oneB"", ""B"", Multiplicity.OPTIONAL, false, ""manyA""), // 1-*"
127079,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/graph/ReverseReferenceUpdateTestBase.java,72,,"            new AttributeDefinition(""oneB"", ""B"", Multiplicity.OPTIONAL, false, ""manyA""), // 1-*"
127080,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/AtlasImportRequestTest.java,115,,"        assertTrue(tr.getTransforms().containsKey(""hive_db""));"
127081,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/AtlasImportRequestTest.java,117,,"        assertTrue(tr.getTransforms(""hive_db"").containsKey(""qualifiedName""));"
127082,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/AtlasImportRequestTest.java,140,,"        assertTrue(tr.getTransforms().containsKey(""hive_table""));"
127083,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ExportServiceTest.java,119,,"        itemsToExport.add(new AtlasObjectId(""Department"", ""name"", ""hr""));"
127084,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ExportServiceTest.java,260,,"                ""getOverallOperationStatus""));"
127085,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportServiceTest.java,63,,"        loadModelFromJson(""0010-base_model.json"", typeDefStore, typeRegistry);"
127086,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,30,,"        String param1 = ""@cl1"";"
127087,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,31,,"        String param2 = ""@cl2"";"
127088,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,33,,"        ImportTransformer e = ImportTransformer.getTransformer(String.format(""%s:%s:%s"", ""replace"", param1, param2));"
127089,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,75,,"        assertEquals(e.apply(""@CL1""), ""@cl1"");"
127090,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,98,,"        assertEquals(e.apply(""default@cl1""), ""default@cl2"");"
127091,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ImportTransformerTest.java,99,,"        assertEquals(e.apply(""@cl11""), ""@cl21"");"
127092,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,97,,"        AtlasEntityDef existing = getAtlasEntityDefWithAttributes(""name"", ""qualifiedName"");"
127093,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,97,,"        AtlasEntityDef existing = getAtlasEntityDefWithAttributes(""name"", ""qualifiedName"");"
127094,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,128,,"        AtlasEnumDef existing = getAtlasEnumWithAttributes(""Alpha"", ""Bravo"");"
127095,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,128,,"        AtlasEnumDef existing = getAtlasEnumWithAttributes(""Alpha"", ""Bravo"");"
127096,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,129,,"        AtlasEnumDef incoming = getAtlasEnumWithAttributes(""Alpha"", ""Bravo"", ""Delta"", ""Echo"");"
127097,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/TypeAttributeDifferenceTest.java,129,,"        AtlasEnumDef incoming = getAtlasEnumWithAttributes(""Alpha"", ""Bravo"", ""Delta"", ""Echo"");"
127098,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/impexp/ZipSourceTest.java,40,,"    @DataProvider(name = ""zipFileStocks"")"
127099,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,54,,"            AtlasTypeUtil.createRelationshipTypeDef(""Invalid_Attribute_Type"", ""description"","""" ,"
127100,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,57,,"                    new AtlasRelationshipEndDef(""typeA"", ""attr1"", AtlasStructDef.AtlasAttributeDef.Cardinality.SINGLE),"
127101,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,60,,"                    AtlasTypeUtil.createRequiredAttrDef(""order"", ""string""),"
127102,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,70,,"                AtlasTypeUtil.createRelationshipTypeDef(""basicType"", ""description"",""0"" ,"
127103,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,73,,"                        new AtlasRelationshipEndDef(""typeC"", ""attr1"", AtlasStructDef.AtlasAttributeDef.Cardinality.SINGLE),"
127104,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,74,,"                        new AtlasRelationshipEndDef(""typeD"", ""attr1"", AtlasStructDef.AtlasAttributeDef.Cardinality.SINGLE),"
127105,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,76,,"                        AtlasTypeUtil.createRequiredAttrDef(""aaaa"", ""string""),"
127106,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,77,,"                        AtlasTypeUtil.createRequiredAttrDef(""bbbb"", ""string""));"
127107,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,284,,"            fail(""expected error"");"
127108,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasRelationshipDefStoreV1Test.java,287,,"                fail(""unexpected AtlasErrorCode ""+e.getAtlasErrorCode());"
127109,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasTypeDefGraphStoreTest.java,73,,"            fail(""Exception expected for invalid name"");"
127110,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasTypeDefGraphStoreTest.java,79,,"            fail(""Exception expected for invalid guid"");"
127111,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasTypeDefGraphStoreTest.java,171,,"    @Test(dependsOnMethods = {""testGet""}, dataProvider = ""validCreateDeptTypes"")"
127112,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/AtlasTypeDefGraphStoreTest.java,310,,"            assertEquals(hiveTypes.getEnumDefs(), createdTypes.getEnumDefs(), ""Data integrity issue while persisting"");"
127113,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,111,,"        AtlasEntityDef mapValueDef = AtlasTypeUtil.createClassTypeDef(""CompositeMapValue"", ""CompositeMapValue"" + ""_description"", ""1.0"","
127114,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,111,,"        AtlasEntityDef mapValueDef = AtlasTypeUtil.createClassTypeDef(""CompositeMapValue"", ""CompositeMapValue"" + ""_description"", ""1.0"","
127115,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,113,,"            AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string"")"
127116,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,113,,"            AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string"")"
127117,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,120,,"            new AtlasStructDef.AtlasAttributeDef(""map"", ""map<string,CompositeMapValue>"", true,"
127118,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,351,,"        maxEmployee.setAttribute(""mentor"", AtlasTypeUtil.getAtlasObjectId(johnEmployeeCreated));"
127119,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,553,,"            new AtlasEntityDef(""TraitTarget"", ""TraitTarget_description"", ""1.0"","
127120,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,557,,"            new AtlasStructDef.AtlasAttributeDef(""struct"", ""TestStruct"","
127121,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,570,,"            new AtlasStructDef.AtlasAttributeDef(""target"", ""array<StructTarget>"","
127122,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,610,,"        AtlasClassificationDef traitDef = new AtlasClassificationDef(""TestTrait"", ""TestTrait_desc"", ""1.0"", Arrays.asList(traitDefAttributes));"
127123,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,721,,"            new AtlasStructDef.AtlasAttributeDef(""biMapOwner"", ""MapOwner"","
127124,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,728,,"                        put(AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_ATTRIBUTE, ""biMap"");"
127125,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasDeleteHandlerV1Test.java,772,,"        mapOwnerInstance.setAttribute(""map"", Collections.singletonMap(""value1"", AtlasTypeUtil.getAtlasObjectId(mapValueInstance)));"
127126,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,170,,"        String description = (String) attributesMap.get(""description"");"
127127,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,220,,"        AtlasObjectId dbObjectId = (AtlasObjectId) tblEntity.getEntity().getAttribute(""database"");"
127128,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,232,,"    @Test(dependsOnMethods = ""testCreate"")"
127129,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,240,,"        col1.setAttribute(TestUtilsV2.NAME, ""col1"");"
127130,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,312,,"        partsMap.put(""part0"", new AtlasStruct(TestUtils.PARTITION_STRUCT_TYPE, TestUtilsV2.NAME, ""test""));"
127131,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,314,,"        tableEntity.setAttribute(""partitionsMap"", partsMap);"
127132,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,326,,"        partsMap.put(""part1"", new AtlasStruct(TestUtils.PARTITION_STRUCT_TYPE, TestUtilsV2.NAME, ""test1""));"
127133,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,341,,"        partsMap.put(""part2"", new AtlasStruct(TestUtils.PARTITION_STRUCT_TYPE, TestUtilsV2.NAME, ""test2""));"
127134,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,373,,"        col0.setAttribute(""type"", ""string"");"
127135,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,373,,"        col0.setAttribute(""type"", ""string"");"
127136,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,586,,"        final String isReplicatedAttr = ""isReplicated"";"
127137,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityStoreV1Test.java,684,,"        dbEntity.setAttribute(""name"", RandomStringUtils.randomAlphanumeric(10));"
127138,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1Test.java,141,,"        AtlasObjectId maxDepartmentId = toAtlasObjectId(max.getRelationshipAttribute(""department""));"
127139,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1Test.java,145,,"        AtlasObjectId maxManagerId = toAtlasObjectId(max.getRelationshipAttribute(""manager""));"
127140,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1Test.java,149,,"        AtlasObjectId maxMentorId = toAtlasObjectId(max.getRelationshipAttribute(""mentor""));"
127141,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1Test.java,153,,"        List<AtlasObjectId> maxMenteesId = toAtlasObjectIds(max.getRelationshipAttribute(""mentees""));"
127142,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/typestore/GraphBackedTypeStoreTest.java,107,,"        Assert.assertEquals(orgLevel.name, ""OrgLevel"");"
127143,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/typestore/GraphBackedTypeStoreTest.java,138,,"        HierarchicalTypeDefinition<ClassType> specialTypeDef1 = createClassTypeDef(""SpecialTypeDef1"", ""Typedef with special character"","
127144,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/repository/typestore/GraphBackedTypeStoreTest.java,180,,"        HierarchicalTypeDefinition<ClassType> deptTypeDef = createClassTypeDef(""Department"", ""Department""+_description,"
127145,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,169,,"        entity.set(""description"", ""us db"");"
127146,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,334,,"        table.set(""type"", ""type"");"
127147,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,353,,"        final List<String> colNameList = ImmutableList.of(""col1"", ""col2"");"
127148,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,353,,"        final List<String> colNameList = ImmutableList.of(""col1"", ""col2"");"
127149,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,355,,"            put(""columnNames"", colNameList);"
127150,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,370,,"        partsMap.put(""part0"", new Struct(TestUtils.PARTITION_STRUCT_TYPE,"
127151,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,375,,"        table.set(""partitionsMap"", partsMap);"
127152,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,385,,"        partsMap.put(""part1"", new Struct(TestUtils.PARTITION_STRUCT_TYPE,"
127153,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,401,,"        partsMap.put(""part2"", new Struct(TestUtils.PARTITION_STRUCT_TYPE,"
127154,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,668,,"        table.set(""serde1"", serdeInstance);"
127155,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,772,,"        table.set(""partitions"", partitions);"
127156,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,1162,,"            metadataService.getAuditEvents(null, ""key"", (short) 10);"
127157,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/service/DefaultMetadataServiceTest.java,1163,,"            fail(""expected IllegalArgumentException"");"
127158,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/services/MetricsServiceTest.java,62,,"                .thenReturn(""count()"", ""count()"", ""count()"", ""count()"", ""count()"", ""toList()"", ""count()"", ""toList()"");"
127159,./TargetProjects/incubator-atlas/repository/src/test/java/org/apache/atlas/util/CompiledQueryCacheKeyTest.java,38,,"        CompiledQueryCacheKey e1 = new CompiledQueryCacheKey(""query 1"");"
127160,./TargetProjects/incubator-atlas/server-api/src/main/test/org/apache/atlas/ha/AtlasServerIdSelectorTest.java,45,,"        when(configuration.getStringArray(HAConfiguration.ATLAS_SERVER_IDS)).thenReturn(new String[] {""id1"", ""id2""});"
127161,./TargetProjects/incubator-atlas/server-api/src/main/test/org/apache/atlas/ha/AtlasServerIdSelectorTest.java,45,,"        when(configuration.getStringArray(HAConfiguration.ATLAS_SERVER_IDS)).thenReturn(new String[] {""id1"", ""id2""});"
127162,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/persistence/Id.java,174,,"        throw new AtlasException(""Get/Set not supported on an Id object"");"
127163,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/persistence/StructInstance.java,185,,"            throw new AtlasException(String.format(""Unknown field %s for Struct %s"", attrName, getTypeName()));"
127164,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/persistence/StructInstance.java,302,,"                    String.format(""Field %s for Struct %s is not a %s, call generic get method"", attrName,"
127165,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/persistence/StructInstance.java,545,,"                    String.format(""Field %s for Struct %s is not a %s, call generic set method"", attrName,"
127166,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/types/TypeSystem.java,416,,"                        throw new TypeExistsException(String.format(""Redefinition of type %s is not supported"", eDef.name));"
127167,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/types/TypeSystem.java,418,,"                        LOG.warn(""Found duplicate definition of type {}. Ignoring.."", eDef.name);"
127168,./TargetProjects/incubator-atlas/typesystem/src/main/java/org/apache/atlas/typesystem/types/TypeSystem.java,699,,"            throw new AtlasException(""Internal Error: define type called on TransientTypeSystem"");"
127169,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/json/SerializationJavaTest.java,68,,"        HierarchicalTypeDefinition<ClassType> deptTypeDef = createClassTypeDef(""Department"", ImmutableSet.<String>of(),"
127170,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/json/SerializationJavaTest.java,69,,"                createRequiredAttrDef(""name"", DataTypes.STRING_TYPE),"
127171,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/json/SerializationJavaTest.java,70,,"                new AttributeDefinition(""employees"", String.format(""array<%s>"", ""Person""), Multiplicity.COLLECTION,"
127172,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/json/SerializationJavaTest.java,71,,"                        true, ""department""));"
127173,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/json/SerializationJavaTest.java,83,,"                        createRequiredAttrDef(""level"", DataTypes.INT_TYPE));"
127174,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,135,,"                .createClassTypeDef(""Department"", ImmutableSet.<String>of(),"
127175,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,136,,"                        TypesUtil.createRequiredAttrDef(""name"", DataTypes.STRING_TYPE),"
127176,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,137,,"                        new AttributeDefinition(""employees"", String.format(""array<%s>"", ""Person""),"
127177,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,138,,"                                Multiplicity.COLLECTION, true, ""department""));"
127178,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,143,,"                        new AttributeDefinition(""manager"", ""Manager"", Multiplicity.OPTIONAL, false, ""subordinates""));"
127179,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/BaseTest.java,150,,"                .createTraitTypeDef(""SecurityClearance"", ImmutableSet.<String>of(),"
127180,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/FieldMappingTest.java,59,,"        HierarchicalTypeDefinition<ClassType> valueDef = TypesUtil.createClassTypeDef(""Value"","
127181,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/FieldMappingTest.java,61,,"            new AttributeDefinition(""owner"", ""Owner"", Multiplicity.OPTIONAL, false, null));"
127182,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/FieldMappingTest.java,61,,"            new AttributeDefinition(""owner"", ""Owner"", Multiplicity.OPTIONAL, false, null));"
127183,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/FieldMappingTest.java,66,,"            new AttributeDefinition(""value"", ""Value"", Multiplicity.OPTIONAL, false, null));"
127184,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/HierarchicalTypeDependencySorterTest.java,60,,"        HierarchicalType testDataSetType = new ClassType(ts, ""TestDataSet"", null, ImmutableSet.of(""TestObject""), 0);"
127185,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,95,,"            nameToQualifiedName.put(""A.B.D.b"", ""A.B.D.b"");"
127186,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,96,,"            nameToQualifiedName.put(""A.B.D.c"", ""A.B.D.c"");"
127187,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,97,,"            nameToQualifiedName.put(""A.B.D.d"", ""A.B.D.d"");"
127188,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,98,,"            nameToQualifiedName.put(""A.C.D.a"", ""A.C.D.a"");"
127189,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,99,,"            nameToQualifiedName.put(""A.C.D.b"", ""A.C.D.b"");"
127190,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,100,,"            nameToQualifiedName.put(""A.C.D.c"", ""A.C.D.c"");"
127191,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,101,,"            nameToQualifiedName.put(""A.C.D.d"", ""A.C.D.d"");"
127192,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,120,,"        Assert.assertEquals(ts.toString(), ""{\n"" +"
127193,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,121,,"                ""\td : \t1\n"" +"
127194,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,122,,"                ""\tb : \ttrue\n"" +"
127195,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,123,,"                ""\tc : \t1\n"" +"
127196,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,124,,"                ""\ta : \t1\n"" +"
127197,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,126,,"                ""\tA.B.D.c : \t2\n"" +"
127198,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,127,,"                ""\tA.B.D.d : \t2\n"" +"
127199,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,128,,"                ""\tA.C.D.a : \t3\n"" +"
127200,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,129,,"                ""\tA.C.D.b : \tfalse\n"" +"
127201,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,130,,"                ""\tA.C.D.c : \t3\n"" +"
127202,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TraitTest.java,131,,"                ""\tA.C.D.d : \t3\n"" +"
127203,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeInheritanceTest.java,69,,"        Assert.assertEquals(ts.toString(), ""{\n"" +"
127204,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeInheritanceTest.java,71,,"                ""\tb : \ttrue\n"" +"
127205,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeInheritanceTest.java,72,,"                ""\ta : \t1\n"" +"
127206,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeInheritanceTest.java,140,,"                ""\td : \t1\n"" +"
127207,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeInheritanceTest.java,141,,"                ""\tc : \t1\n"" +"
127208,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeSystemTest.java,66,,"        getTypeSystem().defineEnumType(""enum_test"", new EnumValue(""0"", 0), new EnumValue(""1"", 1), new EnumValue(""2"", 2),"
127209,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeSystemTest.java,87,,"                TypesUtil.createRequiredAttrDef(""type"", DataTypes.STRING_TYPE));"
127210,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/TypeSystemTest.java,247,,"            createOptionalAttrDef(""description"", DataTypes.STRING_TYPE),"
127211,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/ValidationTest.java,29,,"        return new String[][]{{null, ""type""}, {"""", ""type""}, {""name"", null}, {""name"", """"}};"
127212,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/ValidationTest.java,29,,"        return new String[][]{{null, ""type""}, {"""", ""type""}, {""name"", null}, {""name"", """"}};"
127213,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/ValidationTest.java,77,,"        TypesUtil.createClassTypeDef(name, ImmutableSet.of(""super""), value);"
127214,./TargetProjects/incubator-atlas/typesystem/src/test/java/org/apache/atlas/typesystem/types/cache/DefaultTypeCacheTest.java,399,,"        assertTrue(results.containsAll(Arrays.asList(""A1"", ""C"")), ""Results: "" + results);"
127215,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/LocalServletRequest.java,57,,"        throw new IllegalStateException(""Not supported"");"
127216,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,128,,"            {DATABASE_TYPE, TABLE_TYPE, STORAGE_DESC_TYPE, COLUMN_TYPE, LOAD_PROCESS_TYPE, VIEW_TYPE, ""JdbcAccess_v1"","
127217,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,129,,"                    ""ETL_v1"", ""Metric_v1"", ""PII_v1"", ""Fact_v1"", ""Dimension_v1"", ""Log Data_v1""};"
127218,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,129,,"                    ""ETL_v1"", ""Metric_v1"", ""PII_v1"", ""Fact_v1"", ""Dimension_v1"", ""Log Data_v1""};"
127219,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,129,,"                    ""ETL_v1"", ""Metric_v1"", ""PII_v1"", ""Fact_v1"", ""Dimension_v1"", ""Log Data_v1""};"
127220,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,129,,"                    ""ETL_v1"", ""Metric_v1"", ""PII_v1"", ""Fact_v1"", ""Dimension_v1"", ""Log Data_v1""};"
127221,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,129,,"                    ""ETL_v1"", ""Metric_v1"", ""PII_v1"", ""Fact_v1"", ""Dimension_v1"", ""Log Data_v1""};"
127222,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,156,,"                        TypesUtil.createUniqueRequiredAttrDef(""name"", DataTypes.STRING_TYPE),"
127223,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,157,,"                        attrDef(""description"", DataTypes.STRING_TYPE), attrDef(""locationUri"", DataTypes.STRING_TYPE),"
127224,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,158,,"                        attrDef(""owner"", DataTypes.STRING_TYPE), attrDef(""createTime"", DataTypes.LONG_TYPE));"
127225,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,158,,"                        attrDef(""owner"", DataTypes.STRING_TYPE), attrDef(""createTime"", DataTypes.LONG_TYPE));"
127226,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,239,,"                .of(rawColumn(TIME_ID_COLUMN, ""int"", ""time id""), rawColumn(""product_id"", ""int"", ""product id""),"
127227,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,245,,"                        rawColumn(""machine_id"", ""int"", ""machine id""), rawColumn(""log"", ""string"", ""log data"", ""Log Data_v1""));"
127228,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,247,,"        Id salesFact = table(SALES_FACT_TABLE, SALES_FACT_TABLE_DESCRIPTION, salesDB, sd, ""Joe"", ""Managed"","
127229,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java,278,,"        Id logDB = database(""Logging"", ""logging database"", ""Tim ETL"", ""hdfs://host:8000/apps/warehouse/logging"");"
127230,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,92,,"    public static final String NAME_COLUMN                 = ""name"";"
127231,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,197,,"        AtlasEntityDef dbType   = AtlasTypeUtil.createClassTypeDef(DATABASE_TYPE, DATABASE_TYPE, ""1.0"", null,"
127232,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,198,,"                                  AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string""),"
127233,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,199,,"                                  AtlasTypeUtil.createOptionalAttrDef(""description"", ""string""),"
127234,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,201,,"                                  AtlasTypeUtil.createOptionalAttrDef(""owner"", ""string""),"
127235,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,202,,"                                  AtlasTypeUtil.createOptionalAttrDef(""createTime"", ""long""));"
127236,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,202,,"                                  AtlasTypeUtil.createOptionalAttrDef(""createTime"", ""long""));"
127237,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,217,,"                                          new HashMap<String, Object>() {{ put(CONSTRAINT_PARAM_ATTRIBUTE, ""columns""); }}));"
127238,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,270,,"        AtlasEntity logDB       = createDatabase(LOGGING_DB, ""logging database"", ""Tim ETL"", ""hdfs://host:8000/apps/warehouse/logging"");"
127239,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,276,,"        List<AtlasEntity> salesFactColumns   = ImmutableList.of(createColumn(TIME_ID_COLUMN, ""int"", ""time id""),"
127240,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,300,,"                                                     ""Joe"", ""Managed"", salesFactColumns, FACT_CLASSIFICATION);"
127241,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/examples/QuickStartV2.java,522,,"                    System.out.println(""query ["" + dslQuery + ""] returned ["" + entitiesResult.size() + ""] rows."");"
127242,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/filters/AtlasAuthenticationFilter.java,456,,"                            if (headerName.equalsIgnoreCase(""Set-Cookie"") && value.startsWith(""ATLASSESSIONID"")) {"
127243,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/DataSetLineageResource.java,73,,"    public Response inputsGraph(@Context HttpServletRequest request, @PathParam(""tableName"") String tableName) {"
127244,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,184,,"            LOG.error(""Unable to persist entity instance entityDef={}"", entityJson, e);"
127245,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,285,,"                LOG.debug(""Updated entities: {}"", result.getEntityResult());"
127246,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,351,,"                                            @QueryParam(""property"") String attribute,"
127247,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,372,,"            entityType = ParamChecker.notEmpty(entityType, ""Entity type cannot be null"");"
127248,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,399,,"            LOG.error(""Unable to partially update entity {} {}:{}.{}"", entityJson, entityType, attribute, value, e);"
127249,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,441,,"    public Response updateEntityByGuid(@PathParam(""guid"") String guid, @QueryParam(""property"") String attribute,"
127250,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,545,,"            LOG.error(""Unable to add property {} to entity id {} {} "", property, guid, value, e);"
127251,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,618,,"            LOG.error(""Unable to delete entities {} {} {} {} "", guids, entityType, attribute, value, e);"
127252,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,883,,"            LOG.error(""Unable to get trait definition for entity {}"", guid, e);"
127253,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,996,,"            LOG.error(""Unable to get trait definition for entity {} and trait {}"", guid, traitName, e);"
127254,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,1058,,"            LOG.error(""Unable to add trait for entity={} traitDef={}"", guid, traitDefinition, e);"
127255,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java,1113,,"            LOG.error(""Unable to delete trait name={} for entity={}"", traitName, guid, e);"
127256,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/EntityService.java,100,,"                              @PathParam(""entityId"") String entityId) throws CatalogException {"
127257,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/MetadataDiscoveryResource.java,92,,"    public Response search(@QueryParam(""query"") String query,"
127258,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/MetadataDiscoveryResource.java,93,,"                           @DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam(""limit"") int limit,"
127259,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/MetadataDiscoveryResource.java,94,,"                           @DefaultValue(LIMIT_OFFSET_DEFAULT) @QueryParam(""offset"") int offset) {"
127260,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,69,,"    @Path(""{taxonomyName}"")"
127261,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,73,,"                                @PathParam(""taxonomyName"") String taxonomyName) throws CatalogException {"
127262,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,81,,"            properties.put(""name"", taxonomyName);"
127263,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,182,,"    @Path(""{taxonomyName}/terms/{termName}"")"
127264,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,187,,"                                    @PathParam(""termName"") String termName) throws CatalogException {"
127265,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,196,,"            properties.put(""termPath"", termPath);"
127266,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,236,,"                            @PathParam(""remainder"") String remainder) throws CatalogException {"
127267,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,244,,"            String termName = String.format(""%s%s"", rootTerm,"
127268,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,245,,"                    remainder.replaceAll(""/?terms/?([.]*)"", ""$1.""));"
127269,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TaxonomyService.java,245,,"                    remainder.replaceAll(""/?terms/?([.]*)"", ""$1.""));"
127270,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TypesResource.java,130,,"            LOG.error(""Unable to persist types"", e);"
127271,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/resources/TypesResource.java,245,,"            LOG.error(""Unable to get type definition for type {}"", typeName, e);"
127272,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/DiscoveryREST.java,77,,"                                            @QueryParam(""limit"")          int    limit,"
127273,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/DiscoveryREST.java,78,,"                                            @QueryParam(""offset"")         int    offset) throws AtlasBaseException {"
127274,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/EntityREST.java,93,,"    public AtlasEntityWithExtInfo getById(@PathParam(""guid"") String guid) throws AtlasBaseException {"
127275,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/TypesREST.java,66,,"    public AtlasBaseTypeDef getTypeDefByName(@PathParam(""name"") String name) throws AtlasBaseException {"
127276,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/TypesREST.java,82,,"    public AtlasBaseTypeDef getTypeDefByGuid(@PathParam(""guid"") String guid) throws AtlasBaseException {"
127277,./TargetProjects/incubator-atlas/webapp/src/main/java/org/apache/atlas/web/rest/TypesREST.java,113,,"    @Path(""/typedefs"")"
127278,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/AtlasIT.java,40,,"    Assert.assertEquals(22443, port, ""wrong https port"");"
127279,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/CredentialProviderUtilityIT.java,47,,"            testPath = new Path(Files.createTempDirectory(""tempproviders"").toString(), ""test.jks"");"
127280,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/CredentialProviderUtilityIT.java,47,,"            testPath = new Path(Files.createTempDirectory(""tempproviders"").toString(), ""test.jks"");"
127281,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/CredentialProviderUtilityIT.java,60,,"                return JavaKeyStoreProvider.SCHEME_NAME + ""://file/"" + finalTestPath.toString();"
127282,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/examples/QuickStartIT.java,50,,"        assertEquals(QuickStart.SALES_DB, db.get(""name""));"
127283,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/examples/QuickStartV2IT.java,106,,"            String colGuid = (String) colMap.get(""guid"");"
127284,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/notification/NotificationHookConsumerIT.java,99,,"                JSONArray results = searchByDSL(String.format(""%s where qualifiedName='%s'"", DATABASE_TYPE_BUILTIN, entity.get(QUALIFIED_NAME)));"
127285,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/notification/NotificationHookConsumerIT.java,124,,"        newEntity.set(""owner"", randomString());"
127286,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/util/RestUtilsTest.java,79,,"        HierarchicalTypeDefinition<ClassType> dbV1Type = TypesUtil.createClassTypeDef(""database"","
127287,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/util/RestUtilsTest.java,80,,"                ImmutableSet.<String> of(), new AttributeDefinition(""tables"", DataTypes.arrayTypeName(""table""),"
127288,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/util/RestUtilsTest.java,80,,"                ImmutableSet.<String> of(), new AttributeDefinition(""tables"", DataTypes.arrayTypeName(""table""),"
127289,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/util/RestUtilsTest.java,81,,"                        Multiplicity.OPTIONAL, true, ""containingDatabase""));"
127290,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/adapters/TestEntityREST.java,114,,"        testClassification = new AtlasClassification(TestUtilsV2.CLASSIFICATION, new HashMap<String, Object>() {{ put(""tag"", ""tagName""); }});"
127291,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/ActiveServerFilterTest.java,66,,"        when(servletRequest.getRequestURI()).thenReturn(""api/atlas/types"");"
127292,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/ActiveServerFilterTest.java,97,,"        when(servletRequest.getRequestURI()).thenReturn(""types"");"
127293,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/AtlasAuthenticationKerberosFilterTest.java,76,,"        String originalConf = System.getProperty(""atlas.conf"");"
127294,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/AtlasAuthenticationSimpleFilterTest.java,51,,"        String originalConf = System.getProperty(""atlas.conf"");"
127295,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/AuditFilterTest.java,66,,"        assertTrue(auditFilter.isOperationExcludedFromAudit(""GET"", ""Version"", configuration));"
127296,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/AuditFilterTest.java,66,,"        assertTrue(auditFilter.isOperationExcludedFromAudit(""GET"", ""Version"", configuration));"
127297,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/filters/AuditFilterTest.java,68,,"        assertTrue(auditFilter.isOperationExcludedFromAudit(""GET"", ""Ping"", configuration));"
127298,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,115,,"            atlasClientV1 = new AtlasClient(atlasUrls, new String[]{""admin"", ""admin""});"
127299,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,127,,"                LOG.warn(""Type with name {} already exists. Skipping"", enumDef.getName());"
127300,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,295,,"                        attrDef(""owner"", DataTypes.STRING_TYPE), attrDef(""createTime"", DataTypes.INT_TYPE),"
127301,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,295,,"                        attrDef(""owner"", DataTypes.STRING_TYPE), attrDef(""createTime"", DataTypes.INT_TYPE),"
127302,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,304,,"        StructTypeDefinition structTypeDefinition = new StructTypeDefinition(""serdeType"","
127303,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,306,,"                        TypesUtil.createRequiredAttrDef(""serde"", DataTypes.STRING_TYPE)});"
127304,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,310,,"        EnumTypeDefinition enumTypeDefinition = new EnumTypeDefinition(""tableType"", values);"
127305,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,315,,"                        attrDef(""lastAccessTime"", DataTypes.DATE_TYPE),"
127306,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,321,,"                        new AttributeDefinition(""serde1"", ""serdeType"", Multiplicity.OPTIONAL, false, null),"
127307,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,322,,"                        new AttributeDefinition(""serde2"", ""serdeType"", Multiplicity.OPTIONAL, false, null));"
127308,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,334,,"                .createTraitTypeDef(""classification"", ImmutableSet.<String>of(),"
127309,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,335,,"                        TypesUtil.createRequiredAttrDef(""tag"", DataTypes.STRING_TYPE));"
127310,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,337,,"                TypesUtil.createTraitTypeDef(""pii"", ImmutableSet.<String>of());"
127311,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,339,,"                TypesUtil.createTraitTypeDef(""phi"", ImmutableSet.<String>of());"
127312,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,341,,"                TypesUtil.createTraitTypeDef(""pci"", ImmutableSet.<String>of());"
127313,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,343,,"                TypesUtil.createTraitTypeDef(""sox"", ImmutableSet.<String>of());"
127314,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,345,,"                TypesUtil.createTraitTypeDef(""sec"", ImmutableSet.<String>of());"
127315,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,347,,"                TypesUtil.createTraitTypeDef(""finance"", ImmutableSet.<String>of());"
127316,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,373,,"                AtlasTypeUtil.createUniqueRequiredAttrDef(NAME, ""string""),"
127317,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/BaseResourceIT.java,480,,"        values.put(DESCRIPTION, ""foo database"");"
127318,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,62,,"        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.NAME_LINEAGE_INPUTS_GRAPH, null, salesMonthlyTable, ""inputs"", ""graph"");"
127319,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,72,,"        Map<String, Struct> vertices = (Map<String, Struct>) resultsInstance.get(""vertices"");"
127320,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,75,,"        Map<String, Struct> edges = (Map<String, Struct>) resultsInstance.get(""edges"");"
127321,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,150,,"            Assert.assertNotNull(row.getString(""name""));"
127322,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,192,,"                TypesUtil.createTraitTypeDef(""Metric"", ImmutableSet.<String>of());"
127323,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/DataSetLineageJerseyResourceIT.java,201,,"                .of(column(""time_id"", ""int"", ""time id""), column(""product_id"", ""int"", ""product id""),"
127324,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,97,,"        databaseInstance.set(""name"", ""db1"");"
127325,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,98,,"        databaseInstance.set(""description"", ""foo database"");"
127326,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,121,,"                columnInstance.set(""comment"", ""column "" + j + "" for table "" + i);"
127327,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,125,,"            tableInstance.set(""columns"", columns);"
127328,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,139,,"        String tableName = ""table"" + randomString();"
127329,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,149,,"            Assert.fail(""Response is not a guid, "" + guid);"
127330,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,159,,"        entity.set(""clusterName"", randomString());"
127331,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,162,,"        entity.set(""owner"", ""user1"");"
127332,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,162,,"        entity.set(""owner"", ""user1"");"
127333,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,163,,"        entity.set(""clusterName"", ""cl1"");"
127334,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,164,,"        entity.set(""parameters"", Collections.EMPTY_MAP);"
127335,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,165,,"        entity.set(""location"", ""/tmp"");"
127336,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,165,,"        entity.set(""location"", ""/tmp"");"
127337,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,514,,"        queryParams.add(""type"", ""blah"");"
127338,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,586,,"        String traitName = ""PII_Trait"" + randomString();"
127339,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityJerseyResourceIT.java,590,,"        LOG.debug(""traitDefinitionAsJSON = {}"", traitDefinitionAsJSON);"
127340,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityLineageJerseyResourceIT.java,156,,"                .of(column(""time_id"", ""int"", ""time id""), column(""product_id"", ""int"", ""product id""),"
127341,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,96,,"        AtlasEntity databaseInstance = new AtlasEntity(DATABASE_TYPE_V2, ""name"", ""db1"");"
127342,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,98,,"        databaseInstance.setAttribute(""description"", ""foo database"");"
127343,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,121,,"                columnInstance.setAttribute(""comment"", ""column "" + j + "" for table "" + i);"
127344,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,127,,"            tableInstance.setAttribute(""columns"", columns);"
127345,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,196,,"                        AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string"")"
127346,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,288,,"    @Test(dependsOnMethods = ""testSubmitEntity"")"
127347,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,448,,"        traitName = ""PII_Trait"" + randomString();"
127348,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/EntityV2JerseyResourceIT.java,491,,"                        AtlasTypeUtil.createRequiredAttrDef(""type"", ""string""));"
127349,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/MetadataDiscoveryJerseyResourceIT.java,71,,"        queryParams.add(""query"", dslQuery);"
127350,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/MetadataDiscoveryJerseyResourceIT.java,78,,"        assertEquals(response.getString(""queryType""), ""dsl"");"
127351,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypedefsJerseyResourceIT.java,108,,"                ImmutableSet.<String>of(), AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string""));"
127352,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypedefsJerseyResourceIT.java,108,,"                ImmutableSet.<String>of(), AtlasTypeUtil.createUniqueRequiredAttrDef(""name"", ""string""));"
127353,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypedefsJerseyResourceIT.java,197,,"            AtlasEnumDef byName = clientV2.getEnumDefByName(""blah"");"
127354,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypedefsJerseyResourceIT.java,198,,"            fail(""Get for invalid name should have reported a failure"");"
127355,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypedefsJerseyResourceIT.java,201,,"                    ""Should've returned a 404"");"
127356,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/integration/TypesJerseyResourceIT.java,236,,"                .createClassTypeDef(""database"", ImmutableSet.<String>of(),"
127357,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,63,,"        String taxonomyName = ""testTaxonomy"";"
127358,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,74,,"        propertyMap.put(""name"", ""testTaxonomy"");"
127359,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,79,,"        expect(metadataService.getTypeDefinition(TaxonomyResourceProvider.TAXONOMY_TERM_TYPE)).andReturn(TaxonomyResourceProvider.TAXONOMY_TERM_TYPE + ""-definition"");"
127360,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,80,,"        expect(serializer.serialize(result, uriInfo)).andReturn(""Taxonomy Get Response"");"
127361,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,144,,"        URI uri = new URI(""http://localhost:21000/api/atlas/v1/taxonomies/testTaxonomy"");"
127362,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,226,,"        expect(serializer.serialize(result, uriInfo)).andReturn(""Taxonomy Term Get Response"");"
127363,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,237,,"        TermPath termPath = (TermPath) request.getQueryProperties().get(""termPath"");"
127364,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,294,,"        URI uri = new URI(""http://localhost:21000/api/atlas/v1/taxonomies/testTaxonomy/terms/testTerm/terms/testTerm2"");"
127365,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,304,,"        propertyMap.put(""name"", ""testTaxonomy.testTerm.testTerm2"");"
127366,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,321,,"        Response response = service.getSubTerms(null, uriInfo, ""testTaxonomy"", ""testTerm"", ""/terms/testTerm2"");"
127367,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/resources/TaxonomyServiceTest.java,396,,"        URI uri = new URI(""http://localhost:21000/api/atlas/v1/taxonomies/testTaxonomy/terms/testTerm"");"
127368,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/security/FileAuthenticationTest.java,116,,"        when(authentication.getName()).thenReturn(""admin"");"
127369,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/security/FileAuthenticationTest.java,120,,"        LOG.debug("" {}"", auth);"
127370,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/security/NegativeSSLAndKerberosTest.java,68,,"        String confLocation = System.getProperty(""atlas.conf"");"
127371,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/security/SSLAndKerberosTest.java,80,,"        String confLocation = System.getProperty(""atlas.conf"");"
127372,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/service/ActiveInstanceElectorServiceTest.java,64,,"        when(configuration.getStringArray(HAConfiguration.ATLAS_SERVER_IDS)).thenReturn(new String[] {""id1""});"
127373,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/service/ActiveInstanceElectorServiceTest.java,65,,"        when(configuration.getString(HAConfiguration.ATLAS_SERVER_ADDRESS_PREFIX +""id1"")).thenReturn(""127.0.0.1:21000"");"
127374,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/service/ActiveInstanceStateTest.java,68,,"        when(configuration.getString(HAConfiguration.ATLAS_SERVER_ADDRESS_PREFIX +""id1"")).thenReturn(HOST_PORT);"
127375,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/service/SecureEmbeddedServerTest.java,46,,"        String originalConf = System.getProperty(""atlas.conf"");"
127376,./TargetProjects/incubator-atlas/webapp/src/test/java/org/apache/atlas/web/service/SecureEmbeddedServerTestBase.java,105,,"            originalConf = System.getProperty(""atlas.conf"");"
127377,./TargetProjects/incubator-batchee/extensions/extras/src/test/java/org/apache/batchee/extras/JdbcWriterTest.java,42,,"        Connection c = DriverManager.getConnection(""jdbc:derby:memory:jdbcwriter;create=true"", ""app"", ""app"");"
127378,./TargetProjects/incubator-batchee/extensions/groovy/src/test/java/org/apache/batchee/groovy/GroovyReaderTest.java,43,,"            ""    @Override\n"" +"
127379,./TargetProjects/incubator-batchee/extensions/groovy/src/test/java/org/apache/batchee/groovy/GroovyReaderTest.java,46,,"            ""    }\n"" +"
127380,./TargetProjects/incubator-batchee/extensions/groovy/src/test/java/org/apache/batchee/groovy/GroovyWriterTest.java,44,,"            ""    @Override\n"" +"
127381,./TargetProjects/incubator-batchee/extensions/groovy/src/test/java/org/apache/batchee/groovy/GroovyWriterTest.java,47,,"            ""    }\n"" +"
127382,./TargetProjects/incubator-batchee/gui/jaxrs/jaxrs-common/src/main/java/org/apache/batchee/jaxrs/common/JBatchResource.java,40,,"    int getJobInstanceCount(final @PathParam(""name"") String jobName);"
127383,./TargetProjects/incubator-batchee/gui/jaxrs/jaxrs-server/src/main/java/org/apache/batchee/jaxrs/server/JBatchResourceImpl.java,62,,"    public int getJobInstanceCount(final @PathParam(""name"") String jobName) {"
127384,./TargetProjects/incubator-batchee/gui/jaxrs/jaxrs-server/src/test/java/org/apache/batchee/jaxrs/server/RestTest.java,61,,"        assertEquals(""init"", jobNames[0]);"
127385,./TargetProjects/incubator-batchee/gui/servlet/embedded/src/main/java/org/apache/batchee/servlet/JBatchController.java,140,,"        resp.setCharacterEncoding(""UTF-8"");"
127386,./TargetProjects/incubator-batchee/gui/servlet/embedded/src/main/java/org/apache/batchee/servlet/JBatchController.java,184,,"        req.setAttribute(""view"", ""read-only"");"
127387,./TargetProjects/incubator-batchee/gui/servlet/embedded/src/main/java/org/apache/batchee/servlet/JBatchController.java,188,,"        req.setAttribute(""name"", name);"
127388,./TargetProjects/incubator-batchee/gui/servlet/embedded/src/main/java/org/apache/batchee/servlet/SimpleRestController.java,115,,"            reportFailure(executionId, resp, ""NoSuchJob"");"
127389,./TargetProjects/incubator-batchee/gui/servlet/embedded/src/main/java/org/apache/batchee/servlet/SimpleRestController.java,117,,"            StringBuilder msg = new StringBuilder(""Failure in BatchExecution"");"
127390,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/impl/JobOperatorImpl.java,170,,"        throw new NoSuchJobException(""Job "" + jobName + "" not found"");"
127391,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/modelresolver/impl/AbstractPropertyResolver.java,125,,"                    str = str.replace(""#{jobParameters['"" + nextProp.propName + ""']}"" + nextProp.getDefaultValExprWithDelimitersIfExists(), nextPropValue);"
127392,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/services/factory/DefaultBatchArtifactFactory.java,63,,"                throw new BatchContainerRuntimeException(""Tried but failed to load artifact with id: "" + batchId, e);"
127393,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/services/persistence/JPAPersistenceManagerService.java,93,,"                    em.createNamedQuery(query).setParameter(""instanceId"", instanceId).executeUpdate();"
127394,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/services/persistence/jdbc/Dictionary.java,37,,"        String DELETE_CHECKPOINT = DELETE + ""%s"" + WHERE + ""%s = ?"";"
127395,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/container/services/status/DefaultJobStatusManager.java,60,,"            throw new IllegalStateException(""Couldn't find entry to update for id = "" + jobInstanceId);"
127396,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/jaxb/ObjectFactory.java,33,,"    private final static QName _BatchArtifacts_QNAME = new QName(""http://xmlns.jcp.org/xml/ns/javaee"", ""batch-artifacts"");"
127397,./TargetProjects/incubator-batchee/jbatch/src/main/java/org/apache/batchee/jmx/BatchEEMBeanImpl.java,72,,"            PROPERTIES_COMPOSITE_TYPE = new CompositeType(""Properties"", ""Properties"", PROPERTIES_ATTRIBUTES, PROPERTIES_ATTRIBUTES,"
127398,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/spi/PersistenceManagerServiceTest.java,67,,"                final JobInstance instance = service.createJobInstance(""test"", ""xml"");"
127399,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/spi/PersistenceManagerServiceTest.java,69,,"                final StepExecutionImpl step = service.createStepExecution(exec.getExecutionId(), new StepContextImpl(""step""));"
127400,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/test/jmx/JMXTest.java,54,,"        id = jobOperator.start(""jmx"", new Properties() {{ setProperty(""foo"", ""bar""); }});"
127401,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/test/jmx/JMXTest.java,109,,"        assertEquals(""jmx"", cd.get(""jobName""));"
127402,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/test/jmx/JMXTest.java,140,,"        assertEquals(""COMPLETED"", cd.get(""Exit status""));"
127403,./TargetProjects/incubator-batchee/jbatch/src/test/java/org/apache/batchee/test/tck/lifecycle/ContainerLifecycle.java,74,,"            .p(""jdbc/orderDB.UserName"", ""app"")"
127404,./TargetProjects/incubator-batchee/tools/cli/src/test/java/org/apache/batchee/cli/MainTest.java,62,,"            ""user2\n"", stderr.getLog().replace(System.getProperty(""line.separator""), ""\n""));"
127405,./TargetProjects/incubator-batchee/tools/cli/src/test/java/org/apache/batchee/cli/MainTest.java,79,,"        main(new String[]{ ""start"", ""-name"", ""sample"" });"
127406,./TargetProjects/incubator-batchee/tools/cli/src/test/java/org/apache/batchee/cli/MainTest.java,79,,"        main(new String[]{ ""start"", ""-name"", ""sample"" });"
127407,./TargetProjects/incubator-batchee/tools/cli/src/test/java/org/apache/batchee/cli/MainTest.java,79,,"        main(new String[]{ ""start"", ""-name"", ""sample"" });"
127408,./TargetProjects/incubator-batchee/tools/cli/src/test/java/org/apache/batchee/cli/MainTest.java,101,,"        main(new String[]{ ""restart"", ""-id"", id, ""status=ok"" });"
127409,./TargetProjects/incubator-batchee/tools/maven-plugin/src/main/java/org/apache/batchee/tools/maven/BarMojo.java,66,,"@Mojo(name = ""bar"", requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, defaultPhase = LifecyclePhase.PACKAGE)"
127410,./TargetProjects/incubator-batchee/tools/maven-plugin/src/main/java/org/apache/batchee/tools/maven/doc/ComponentDocumentationGenerator.java,159,,"                    writer.append(prefix).append("" "").append(className).append(""\n\n"");"
127411,./TargetProjects/incubator-batchee/tools/maven-plugin/src/test/java/org/apache/batchee/tools/maven/DocumentationMojoTest.java,48,,"            ""|===\n"" +"
127412,./TargetProjects/incubator-brooklyn/brooklyn-dist/dist/src/test/java/org/apache/brooklyn/cli/CliIntegrationTest.java,31,,"    @Test(groups = {""Integration"",""Broken""})"
127413,./TargetProjects/incubator-brooklyn/brooklyn-dist/dist/src/test/java/org/apache/brooklyn/cli/CliIntegrationTest.java,31,,"    @Test(groups = {""Integration"",""Broken""})"
127414,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/EnrichersSlightlySimplerYamlTest.java,109,,"        srv0.sensors().set(Sensors.newDoubleSensor(""my.load""), 20.0);"
127415,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/EnrichersSlightlySimplerYamlTest.java,111,,"        EntityTestUtils.assertAttributeEventually(dwac, Sensors.newSensor(Double.class, ""my.load.averaged""),"
127416,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/JavaWebAppsIntegrationTest.java,118,,"            final String url = Asserts.succeedsEventually(MutableMap.of(""timeout"", Duration.TEN_SECONDS), new Callable<String>() {"
127417,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/camp/JavaWebAppsMatchingTest.java,93,,"        Assert.assertEquals(cfg.remove(""literalValue1""), ""$brooklyn: is a fun place"");"
127418,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/longevity/MonitorUtilsTest.java,83,,"    @Test(groups=""UNIX"")"
127419,./TargetProjects/incubator-brooklyn/brooklyn-library/qa/src/test/java/org/apache/brooklyn/qa/longevity/MonitorUtilsTest.java,131,,"            assertEquals(MonitorUtils.searchLog(file, ""line1""), Arrays.asList(""line1""));"
127420,./TargetProjects/incubator-brooklyn/brooklyn-library/sandbox/extra/src/main/java/org/apache/brooklyn/entity/salt/SaltLifecycleEffectorTasks.java,122,,"            throw new IllegalStateException(""The process for ""+entity()+"" appears not to be running (no way to check!)"");"
127421,./TargetProjects/incubator-brooklyn/brooklyn-library/sandbox/monitoring/src/main/java/org/apache/brooklyn/entity/monitoring/zabbix/ZabbixFeed.java,141,,"        @SuppressWarnings(""unchecked"")"
127422,./TargetProjects/incubator-brooklyn/brooklyn-library/sandbox/nosql/src/main/java/org/apache/brooklyn/entity/nosql/infinispan/Infinispan5SshDriver.java,88,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)."
127423,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/crate/CrateNodeImpl.java,66,,"                        .onSuccess(HttpValueFunctions.jsonContents(new String[]{""version"", ""build_timestamp""}, String.class)))"
127424,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mariadb/MariaDbSshDriver.java,214,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)"
127425,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/InitSlaveTaskBody.java,182,,"                .environmentVariable(""RUN_DIR"", sourceRunDir)"
127426,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/InitSlaveTaskBody.java,293,,"        log.info(""MySql cluster "" + cluster + "": generating new replication snapshot on master node "" + master + "" with name "" + dumpName);"
127427,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/mysql/MySqlSshDriver.java,262,,"        newScript(MutableMap.of(""usePidFile"", true), LAUNCHING)"
127428,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,155,,"        if (DynamicTasks.queue(SshEffectorTasks.ssh(sudoAsUser(""postgres"", ""ls ""+getInstallDir())).allowingNonZeroExitCode()"
127429,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,250,,"            sudo(""chown postgres:postgres "" + getDataDir()),"
127430,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,325,,"                ""cd "" + getInstallDir(),"
127431,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,327,,"                sudoAsUser(""postgres"", getInstallDir() + ""/bin/psql -p "" + entity.getAttribute(PostgreSqlNode.POSTGRESQL_PORT) + "
127432,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/main/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlSshDriver.java,426,,"        newScript(MutableMap.of(""usePidFile"", false), LAUNCHING)"
127433,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mariadb/MariaDbLiveRackspaceTest.java,41,,"    @Test(groups = {""Live""})"
127434,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlClusterIntegrationTest.java,52,,"    @Test(groups=""Integration"")"
127435,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlClusterIntegrationTest.java,82,,"            MySqlNode slave = (MySqlNode) Iterables.getOnlyElement(cluster.invoke(MySqlCluster.RESIZE_BY_DELTA, ImmutableMap.of(""delta"", 1)).getUnchecked());"
127436,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/mysql/MySqlLiveRackspaceTest.java,42,,"    @Test(groups = {""Live""})"
127437,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/postgresql/PostgreSqlRackspaceLiveTest.java,42,,"    @Test(groups = ""Live"")"
127438,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepEc2LiveTest.java,47,,"    @Test(enabled=false, groups = ""Live"")"
127439,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepIntegrationTest.java,379,,"        startInLocation(tapp, db1, ""feedback"", db1, ""feedback1"", new LocalhostMachineProvisioningLocation());"
127440,./TargetProjects/incubator-brooklyn/brooklyn-library/software/database/src/test/java/org/apache/brooklyn/entity/database/rubyrep/RubyRepRackspaceLiveTest.java,45,,"    @Test(groups = ""Live"")"
127441,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,229,,"                   .add(""cd "" + getInstallDir())"
127442,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,230,,"                   .add(BashCommands.installPackage(ImmutableMap.of(""brew"", ""automake""), ""make""))"
127443,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/main/java/org/apache/brooklyn/entity/messaging/storm/StormSshDriver.java,230,,"                   .add(BashCommands.installPackage(ImmutableMap.of(""brew"", ""automake""), ""make""))"
127444,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,77,,"    @Test(groups = ""Integration"")"
127445,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,82,,"        EntityTestUtils.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", 10*60*1000), activeMQ, Startable.SERVICE_UP, true);"
127446,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,83,,"        log.info(""JMX URL is ""+activeMQ.getAttribute(UsesJmx.JMX_URL));"
127447,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,139,,"        Assert.assertTrue(url.contains(""jmxmp""), ""url=""+url);"
127448,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/activemq/ActiveMQIntegrationTest.java,139,,"        Assert.assertTrue(url.contains(""jmxmp""), ""url=""+url);"
127449,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/kafka/KafkaIntegrationTest.java,77,,"        EntityTestUtils.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", 60*1000), zookeeper, Startable.SERVICE_UP, true);"
127450,./TargetProjects/incubator-brooklyn/brooklyn-library/software/messaging/src/test/java/org/apache/brooklyn/entity/messaging/qpid/QpidIntegrationTest.java,69,,"    @BeforeMethod(groups = ""Integration"")"
127451,./TargetProjects/incubator-brooklyn/brooklyn-library/software/monitoring/src/test/java/org/apache/brooklyn/entity/monitoring/monit/MonitIntegrationTest.java,84,,"        EntityTestUtils.assertAttributeEqualsEventually(monitNode, MonitNode.MONIT_TARGET_PROCESS_STATUS, ""Running"");"
127452,./TargetProjects/incubator-brooklyn/brooklyn-library/software/network/src/main/java/org/apache/brooklyn/entity/network/bind/BindDnsServerSshDriver.java,110,,"                .body.append(BashCommands.sudo(""service "" + getOsSupport().getServiceName() + "" start""))"
127453,./TargetProjects/incubator-brooklyn/brooklyn-library/software/network/src/test/java/org/apache/brooklyn/entity/network/bind/BindDnsServerIntegrationTest.java,73,,"    @Test(groups = ""Integration"")"
127454,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenter.java,72,,"    @SuppressWarnings(""serial"")"
127455,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseCluster.java,45,,"    @SuppressWarnings(""serial"")"
127456,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/elasticsearch/ElasticSearchNodeImpl.java,94,,"            .poll(getSensorFromNodeStat(DOCUMENT_COUNT, ""indices"", ""docs"", ""count""))"
127457,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/elasticsearch/ElasticSearchNodeSshDriver.java,97,,"        newScript(MutableMap.of(""usePidFile"", false), LAUNCHING)"
127458,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBClientSupport.java,181,,"        Optional<CommandResult> result = runDBCommand(""admin"", ""serverStatus"");"
127459,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfig.java,91,,"        checkArgument(config.containsField(""_id""), ""_id missing from replica set config"");"
127460,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/redis/RedisStoreSshDriver.java,97,,"        newScript(MutableMap.of(""usePidFile"", false), CUSTOMIZING)"
127461,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNode.java,226,,"    void bucketTypeCreate(@EffectorParam(name = ""bucketTypeName"") String bucketTypeName,"
127462,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeSshDriver.java,403,,"                        .body.append(sudo(format(""%s cluster plan"", getRiakAdminCmd())))"
127463,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/main/java/org/apache/brooklyn/entity/nosql/riak/RiakNodeSshDriver.java,404,,"                        .body.append(sudo(format(""%s cluster commit"", getRiakAdminCmd())))"
127464,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/AstyanaxSupport.java,223,,"                        .putColumn(""name"", ""Alice"", null)"
127465,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenterLiveTest.java,95,,"    @Test(groups = ""Live"")"
127466,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/cassandra/CassandraDatacenterTest.java,97,,"        log.debug(""Test ""+JavaClassNames.niceClassAndMethod()+"", cluster ""+cluster+"" has ""+cluster.getMembers()+""; e1=""+e1+"" e2=""+e2);"
127467,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/couchbase/CouchbaseSyncGatewayEc2LiveTest.java,76,,"    @Test(groups = {""Live""})"
127468,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,77,,"        Asserts.succeedsEventually(ImmutableMap.of(""timeout"", TIMEOUT), new Runnable() {"
127469,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,89,,"    @Test(groups = ""Integration"")"
127470,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/MongoDBReplicaSetIntegrationTest.java,101,,"        final String documentId = MongoDBTestHelper.insert(replicaSet.getPrimary(), ""meaning-of-life"", 42);"
127471,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,55,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""host"", host));"
127472,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,55,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""host"", host));"
127473,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,61,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""version"", version, ""members"", memberList));"
127474,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,61,,"        return new BasicBSONObject(ImmutableMap.of(""_id"", id, ""version"", version, ""members"", memberList));"
127475,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,65,,"        ReplicaSetConfig setConfig = ReplicaSetConfig.builder(""replica-set-name"");"
127476,./TargetProjects/incubator-brooklyn/brooklyn-library/software/nosql/src/test/java/org/apache/brooklyn/entity/nosql/mongodb/ReplicaSetConfigTest.java,118,,"        BasicBSONObject config = makeSetConfig(""replica-set-name"", version, makeSetMember(33, ""example.com:7777""));"
127477,./TargetProjects/incubator-brooklyn/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,60,,"    @Test(groups = {""Integration"", ""WIP""})"
127478,./TargetProjects/incubator-brooklyn/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,60,,"    @Test(groups = {""Integration"", ""WIP""})"
127479,./TargetProjects/incubator-brooklyn/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,63,,"                .configure(""name"", Identifiers.makeRandomId(8))"
127480,./TargetProjects/incubator-brooklyn/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,64,,"                .configure(""displayName"", ""Karaf Test""));"
127481,./TargetProjects/incubator-brooklyn/brooklyn-library/software/osgi/src/test/java/org/apache/brooklyn/entity/osgi/karaf/KarafContainerTest.java,64,,"                .configure(""displayName"", ""Karaf Test""));"
127482,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/LoadBalancer.java,67,,"    @SuppressWarnings(""serial"")"
127483,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java,64,,"            config.append(""    listen ""+nginx.getPort()+"";\n"");"
127484,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxDefaultConfigGenerator.java,66,,"            config.append(""  }\n"");"
127485,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,149,,"                ""onlyifmissing"", ""gcc"","
127486,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,150,,"                ""yum"", ""gcc"","
127487,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,153,,"                ""port"", null);"
127488,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,155,,"                ""onlyifmissing"", ""make"","
127489,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/proxy/nginx/NginxSshDriver.java,198,,"            cmds.add(format(""cd %s"", pcreExpandedInstallDirname));"
127490,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.java,76,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127491,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.java,76,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127492,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/DynamicWebAppClusterImpl.java,170,,"        checkNotNull(targetName, ""targetName"");"
127493,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/main/java/org/apache/brooklyn/entity/webapp/tomcat/TomcatSshDriver.java,114,,"        return newScript(MutableMap.of(USE_PID_FILE, ""pid.txt""), CHECK_RUNNING).execute() == 0;"
127494,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,103,,"        westChild = newSshMachineLocation(""West child"", WEST_IP, westParent);"
127495,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/dns/AbstractGeoDnsServiceTest.java,109,,"        eastChildWithLocationAndWithPrivateHostname = newSshMachineLocation(""East child with location"", ""localhost"", EAST_IP, eastParent, EAST_LATITUDE, EAST_LONGITUDE); "
127496,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,94,,"                .configure(""serverPool"", cluster) "
127497,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,96,,"                .configure(""domain"", ""mydomain""));"
127498,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/AbstractControllerTest.java,96,,"                .configure(""domain"", ""mydomain""));"
127499,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/ProxySslConfigTest.java,33,,"            ""certificateSourceUrl"", ""file://tmp/cert.txt"", "
127500,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/UrlMappingTest.java,105,,"    @Test(groups = ""Integration"")"
127501,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,89,,"    @Test(groups = ""Integration"")"
127502,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,93,,"                .configure(""initialSize"", 1)"
127503,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxClusterIntegrationTest.java,94,,"                .configure(NginxController.DOMAIN_NAME, ""localhost""));"
127504,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxHttpsSslIntegrationTest.java,72,,"        localLoc = mgmt.getLocationRegistry().resolve(""localhost"");"
127505,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,67,,"        localLoc = mgmt.getLocationRegistry().resolve(""localhost"");"
127506,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,78,,"    @Test(groups = ""Integration"")"
127507,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,81,,"                .configure(""initialSize"", 0)"
127508,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,88,,"                .configure(""serverPool"", serverPool)"
127509,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,89,,"                .configure(""domain"", ""localhost""));"
127510,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxIntegrationTest.java,131,,"                .configure(""portNumberSensor"", WebAppService.HTTP_PORT));"
127511,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxRebindIntegrationTest.java,127,,"                .configure(""domain"", ""localhost""));"
127512,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,99,,"        List<String> allHosts = ImmutableList.of(""localhost"", ""localhost1"", ""localhost2"", ""localhost3"", ""localhost4"");"
127513,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,99,,"        List<String> allHosts = ImmutableList.of(""localhost"", ""localhost1"", ""localhost2"", ""localhost3"", ""localhost4"");"
127514,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,118,,"    @Test(groups = ""Integration"")"
127515,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,121,,"                .configure(""urlMappings"", urlMappingsGroup));"
127516,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,125,,"                .configure(""initialSize"", 1)"
127517,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,126,,"                .configure(DynamicCluster.MEMBER_SPEC, EntitySpec.create(Tomcat8Server.class).configure(""httpPort"", ""8100+""))"
127518,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,126,,"                .configure(DynamicCluster.MEMBER_SPEC, EntitySpec.create(Tomcat8Server.class).configure(""httpPort"", ""8100+""))"
127519,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,129,,"                .configure(""domain"", ""localhost1"")"
127520,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,130,,"                .configure(""target"", c0));"
127521,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,139,,"                .configure(""path"", ""/hello-world($|/.*)"")"
127522,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,167,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port, ""Hello"");"
127523,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,167,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port, ""Hello"");"
127524,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,169,,"                    HttpTestUtils.assertContentContainsText(""http://localhost1:""+port+""/hello/frank"", ""http://localhost1:""+port+""/hello/frank"");"
127525,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,173,,"                    HttpTestUtils.assertContentContainsText(""http://localhost2:""+port+""/hello-world"", ""Hello"");"
127526,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,173,,"                    HttpTestUtils.assertContentContainsText(""http://localhost2:""+port+""/hello-world"", ""Hello"");"
127527,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,179,,"                    HttpTestUtils.assertContentContainsText(""http://localhost3:""+port+""/c2"", ""Hello"");"
127528,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,186,,"        HttpTestUtils.assertHttpStatusCodeEquals(""http://localhost:""+port+""/"", 404);"
127529,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,220,,"                .configure(""port"", ""8000+"")"
127530,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,220,,"                .configure(""port"", ""8000+"")"
127531,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/proxy/nginx/NginxUrlMappingIntegrationTest.java,221,,"                .configure(""portNumberSensor"", WebAppService.HTTP_PORT)"
127532,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,194,,"    @DataProvider(name = ""basicEntities"")"
127533,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,200,,"    @Test(groups = ""Integration"", dataProvider = ""basicEntities"")"
127534,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,203,,"        log.info(""test=canStartAndStop; entity=""+entity+""; app=""+entity.getApplication());"
127535,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,207,,"                MutableMap.of(""timeout"", 120*1000), entity, Startable.SERVICE_UP, Boolean.TRUE);"
127536,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java,449,,"    @DataProvider(name = ""entitiesWithWarAndURL"")"
127537,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterIntegrationTest.java,75,,"    @Test(groups=""Integration"")"
127538,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterIntegrationTest.java,78,,"                .configure(""initialSize"", 1));"
127539,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/ControlledDynamicWebAppClusterTest.java,75,,"                .configure(""initialSize"", 0)"
127540,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/DynamicWebAppFabricTest.java,83,,"        EntityTestUtils.assertAttributeEqualsEventually(MutableMap.of(""timeout"", TIMEOUT_MS), fabric, DynamicWebAppFabric.REQUEST_COUNT, 2);"
127541,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,51,,"        assertMapping(""/"", ""/"", ""ROOT.war"");"
127542,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,63,,"        assertMapping(""/foo"", ""/foo"", ""foo.war"");"
127543,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,63,,"        assertMapping(""/foo"", ""/foo"", ""foo.war"");"
127544,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/FilenameToWebContextMapperTest.java,74,,"        Assert.assertEquals(m.findArchiveNameFromUrl(""http//localhost/simple.war"", false), ""simple.war"");"
127545,./TargetProjects/incubator-brooklyn/brooklyn-library/software/webapp/src/test/java/org/apache/brooklyn/entity/webapp/jboss/JBoss7ServerNonInheritingIntegrationTest.java,72,,"    @Test(groups = ""Integration"")"
127546,./TargetProjects/incubator-brooklyn/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java,204,,"            throw new IllegalStateException(""Implementation ""+implClazz+"" must have a no-argument constructor"");"
127547,./TargetProjects/incubator-brooklyn/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/internal/AbstractBrooklynObjectSpec.java,266,,"        flags.put(checkNotNull(key, ""key"").toString(), val);"
127548,./TargetProjects/incubator-brooklyn/brooklyn-server/api/src/main/java/org/apache/brooklyn/api/objs/BrooklynObjectType.java,39,,"    @SuppressWarnings(""unchecked"") ENTITY(Entity.class, EntitySpec.class, ""entities""),"
127549,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/creation/BrooklynComponentTemplateResolver.java,176,,"        @SuppressWarnings(""unchecked"")"
127550,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/main/java/org/apache/brooklyn/camp/brooklyn/spi/creation/CampInternalUtils.java,131,,"            itemMap = ImmutableMap.<String, Object>of(""type"", policy);"
127551,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AppYamlTest.java,46,,"                ""services:"","
127552,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/AppYamlTest.java,58,,"                ""- serviceType: org.apache.brooklyn.core.test.entity.TestApplication"");"
127553,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,54,,"                ""services:"","
127554,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,55,,"                ""- type: "" + BasicEntity.class.getName());"
127555,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,129,,"                ""name: topLevel"","
127556,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,133,,"        assertDoesNotWrap(app, BasicApplication.class, ""topLevel"");"
127557,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,148,,"                ""brooklyn.catalog:"","
127558,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,149,,"                ""  id: simple"","
127559,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,150,,"                ""  version: "" + TEST_VERSION,"
127560,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,151,,"                ""  displayName: catalogLevel"","
127561,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,152,,"                ""  item:"","
127562,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,153,,"                ""    services:"","
127563,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,154,,"                ""    - type: "" + BasicApplication.class.getName());"
127564,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ApplicationsYamlTest.java,158,,"                ""- type: simple:"" + TEST_VERSION);"
127565,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,59,,"    @SuppressWarnings(""unchecked"")"
127566,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,63,,"                ""services:"","
127567,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,64,,"                ""- serviceType: org.apache.brooklyn.entity.stock.BasicApplication"");"
127568,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
127569,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
127570,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,71,,"        assertMachine(machine, UserAndHostAndPort.fromParts(""myuser"", ""1.1.1.1"",  22), ImmutableMap.of(""mykey"", ""myval""));"
127571,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,78,,"                ""location:"","
127572,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,79,,"                ""  byon:"","
127573,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,80,,"                ""    hosts:"","
127574,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,82,,"                ""      privateAddresses: [10.0.0.1]"","
127575,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,83,,"                ""      password: mypassword"","
127576,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,84,,"                ""      user: myuser"","
127577,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,95,,"                SshMachineLocation.PASSWORD.getName(), ""mypassword"","
127578,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,97,,"        assertEquals(machine.getPrivateAddresses(), ImmutableSet.of(""10.0.0.1""));"
127579,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ByonLocationsYamlTest.java,158,,"        SshMachineLocation machine1 = (SshMachineLocation) Iterables.find(machines, LocationPredicates.configEqualTo(ConfigKeys.newStringConfigKey(""mykey""), ""myval1""));"
127580,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,157,,"        ((EntityInternal) testEntity).sensors().set(Sensors.newStringSensor(""foo""), ""bar"");"
127581,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,157,,"        ((EntityInternal) testEntity).sensors().set(Sensors.newStringSensor(""foo""), ""bar"");"
127582,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,335,,"                ""  id: x"","
127583,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,336,,"                ""  brooklyn.config:"","
127584,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/DslAndRebindYamlTest.java,467,,"        Assert.assertEquals(""somebarname"", testEntity.getConfig(ConfigKeys.newStringConfigKey(""test.regex.config"")));"
127585,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EmptySoftwareProcessYamlTest.java,45,,"    @Test(groups=""Integration"")"
127586,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,56,,"        log.info(""App started:"");"
127587,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EnrichersYamlTest.java,120,,"        entity.sensors().set(TestEntity.NAME, ""New Name"");"
127588,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,85,,"        Entity app = createAndStartApplication(loadYaml(""test-entity-basic-template.yaml"", extras));"
127589,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,90,,"        Assert.assertEquals(app.getDisplayName(), ""test-entity-basic-template"");"
127590,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,92,,"        log.info(""App started:"");"
127591,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,95,,"        Assert.assertTrue(app.getChildren().iterator().hasNext(), ""Expected app to have child entity"");"
127592,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,97,,"        Assert.assertTrue(entity instanceof TestEntity, ""Expected TestEntity, found "" + entity.getClass());"
127593,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,110,,"            ""  brooklyn.config:"","
127594,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,151,,"        Assert.assertEquals(testEntity.getConfig(TestEntity.CONF_NAME), ""Foo Bar"");"
127595,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,172,,"                ""services:"","
127596,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,545,,"                ""- type: "" + ReferencingYamlTestEntity.class.getName(),"
127597,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,637,,"            if (location.getDisplayName().equals(""localhost name""))"
127598,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,639,,"            else if (location.getDisplayName().equals(""byon name""))"
127599,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,775,,"                ""services:\n""+"
127600,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,776,,"                ""- serviceType: org.apache.brooklyn.core.test.entity.TestEntity\n""+"
127601,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,777,,"                ""  brooklyn.config:\n""+"
127602,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,778,,"                ""   test.childSpec:\n""+"
127603,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,779,,"                ""     $brooklyn:entitySpec:\n""+"
127604,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,780,,"                ""       type: org.apache.brooklyn.core.test.entity.TestEntity\n""+"
127605,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,781,,"                ""       brooklyn.config:\n""+"
127606,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,788,,"        assertEquals(child.getConfig(TestEntity.CONF_NAME), ""inchildspec"");"
127607,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/EntitiesYamlTest.java,965,,"            MutableMap.of(""name"", ""Bob""));"
127608,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,48,,"        props.put(""brooklyn.external.myprovider.mykey"", ""myval"");"
127609,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,51,,"        props.put(""myproperty"", ""$brooklyn:external(\""myprovider\"", \""mykey\"")"");"
127610,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigBrooklynPropertiesTest.java,63,,"                ConfigKeys.newStringConfigKey(""myDynamicProperty""), ""$brooklyn:literal(\""myliteral\"")"");"
127611,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,68,,"        props.put(""brooklyn.external.myprovider.mykey"", ""myval"");"
127612,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,103,,"            ""services:"","
127613,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ExternalConfigYamlTest.java,131,,"    @Test(groups=""Integration"")"
127614,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,52,,"                ""services:\n""+"
127615,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,53,,"                ""- type: org.apache.brooklyn.core.test.entity.TestEntity\n"";"
127616,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,88,,"                ""locations:\n""+"
127617,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/LocationsYamlTest.java,220,,"        assertUserAddress(l1, ""root"", ""127.0.0.1"");"
127618,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/MapReferenceYamlTest.java,81,,"        Object frog = testMap.get(""frog"");"
127619,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/MapReferenceYamlTest.java,89,,"        Assert.assertTrue(one instanceof BasicEntity, ""Should have found a BasicEntity: "" + one);"
127620,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,180,,"            ""  brooklyn.config:"","
127621,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ObjectsYamlTest.java,199,,"        Assert.assertTrue(testObjectObject instanceof SimpleTestPojo, ""Expected a SimpleTestPojo: ""+testObjectObject);"
127622,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencedYamlTest.java,39,,"            ""services:"","
127623,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/ReferencingYamlTestEntity.java,30,,"    @SuppressWarnings(""serial"")"
127624,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,145,,"    @Test(groups=""Live"")"
127625,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,148,,"                .put(""myarg"", ""myval"")"
127626,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,148,,"                .put(""myarg"", ""myval"")"
127627,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,149,,"                .put(""launch.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
127628,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,149,,"                .put(""launch.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
127629,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,150,,"                .put(""checkRunning.powershell.command"", ""\""& c:\\\\exit0.bat\"""")"
127630,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,162,,"                .put(""pre.install.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
127631,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,163,,"                .put(""install.powershell.command"", ""\""& c:\\\\echoMyArg.ps1 -myarg myInstall\"""")"
127632,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,163,,"                .put(""install.powershell.command"", ""\""& c:\\\\echoMyArg.ps1 -myarg myInstall\"""")"
127633,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,164,,"                .put(""post.install.powershell.command"", ""\""& c:\\\\echoArg.bat myPostInstall\"""")"
127634,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,164,,"                .put(""post.install.powershell.command"", ""\""& c:\\\\echoArg.bat myPostInstall\"""")"
127635,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,165,,"                .put(""customize.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.bat\"""")"
127636,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,165,,"                .put(""customize.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.bat\"""")"
127637,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,166,,"                .put(""pre.launch.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.ps1\"""")"
127638,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,166,,"                .put(""pre.launch.powershell.command"", ""\""& c:\\\\echoFreemarkerMyarg.ps1\"""")"
127639,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,168,,"                .put(""post.launch.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
127640,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,170,,"                .put(""stop.powershell.command"", ""\""& c:\\\\exit0.ps1\"""")"
127641,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WindowsYamlLiveTest.java,187,,"                .put(""pre.install.command"", ""\""PowerShell -NonInteractive -NoProfile -Command c:\\\\exit0.ps1\"""")"
127642,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,29,,"            ""name: Empty App\n"" +"
127643,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,30,,"            ""services:\n"" +"
127644,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/WrapAppTest.java,31,,"            ""   - type: org.apache.brooklyn.core.test.entity.TestApplication"";"
127645,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,59,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-more-entities_0.1.0.jar"");"
127646,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,68,,"        Entity app = createAndStartApplication(""services: [ { type: 'more-entity:1.0' } ]"");"
127647,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,71,,"        Assert.assertEquals(moreEntity.getCatalogItemId(), ""more-entity:1.0"");"
127648,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,81,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-entities.jar"");"
127649,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,98,,"        TestResourceUnavailableException.throwIfResourceUnavailable(getClass(), ""/brooklyn/osgi/brooklyn-test-osgi-more-entities_0.2.0.jar"");"
127650,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogOsgiVersionMoreEntityTest.java,101,,"        addCatalogItems(getLocalResource(""more-entity-v2-osgi-catalog.yaml""));"
127651,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,55,,"                ""brooklyn.catalog:"","
127652,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,57,,"                ""  version: ""+TEST_VERSION,"
127653,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlAppTest.java,58,,"                ""services:"","
127654,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlCombiTest.java,67,,"        Assert.assertTrue(BasicEntity.class.isInstance(a), ""Wrong type: ""+a);"
127655,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,59,,"        String symbolicName = ""my.catalog.app.id.load"";"
127656,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,61,,"            ""brooklyn.catalog:"","
127657,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,62,,"            ""  id: "" + symbolicName,"
127658,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,63,,"            ""  version: "" + TEST_VERSION,"
127659,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,64,,"            ""  item:"","
127660,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,65,,"            ""    type: ""+ BasicEntity.class.getName());"
127661,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,69,,"        assertTrue(planYaml.indexOf(""services:"")>=0, ""expected 'services:' block: ""+item+""\n""+planYaml);"
127662,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,93,,"            ""  name: My Catalog App"","
127663,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,94,,"            ""  description: My description"","
127664,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,95,,"            ""  icon_url: classpath://path/to/myicon.jpg"","
127665,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,97,,"            ""  libraries:"","
127666,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,98,,"            ""  - url: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_URL,"
127667,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,146,,"            ""- type: "" + SIMPLE_ENTITY_TYPE);"
127668,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,203,,"            String yaml = ""name: simple-app-yaml\n"" +"
127669,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,204,,"                          ""location: localhost\n"" +"
127670,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,205,,"                          ""services: \n"" +"
127671,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,206,,"                          ""  - serviceType: "" + symbolicName;"
127672,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,228,,"                      ""  - type: "" + ver(referrerSymbolicName);"
127673,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,274,,"            ""  brooklyn.children:"","
127674,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,383,,"            ""  - name: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_NAME,"
127675,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,384,,"            ""    version: "" + OsgiStandaloneTest.BROOKLYN_TEST_OSGI_ENTITIES_VERSION,"
127676,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,556,,"        String symbolicName = ""my.catalog.app.id.basic"";"
127677,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,563,,"            ""- type: org.apache.brooklyn.entity.stock.BasicEntity"");"
127678,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,575,,"            assertTrue(e.toString().contains(""recursive""), ""Unexpected error message: ""+e);"
127679,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,575,,"            assertTrue(e.toString().contains(""recursive""), ""Unexpected error message: ""+e);"
127680,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,612,,"                ""  id: "" + symbolicName + "".caller"","
127681,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,620,,"                ""  id: "" + symbolicName + "".callee"","
127682,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,719,,"        addCatalogOSGiEntity(""test"", TestEntity.class.getName());"
127683,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlEntityTest.java,720,,"        String testName = ""test-applies-config-on-catalog-item"";"
127684,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,66,,"        String symbolicName = ""my.catalog.location.id.load"";"
127685,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlLocationTest.java,137,,"        String symbolicName = ""my.catalog.location.id.launch"";"
127686,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,85,,"        assertEquals(policy.getConfig(new BasicConfigKey<String>(String.class, ""config1"")), ""config1"");"
127687,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlPolicyTest.java,87,,"        assertEquals(policy.getConfig(new BasicConfigKey<String>(String.class, ""config3"")), ""config3"");"
127688,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,87,,"                ""brooklyn.catalog:"","
127689,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,88,,"                ""  id: t1"","
127690,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,89,,"                ""  item_type: template"","
127691,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,91,,"                ""  item:"","
127692,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,92,,"                ""    services:"","
127693,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,93,,"                ""    - type: "" + TestEntity.class.getName());"
127694,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlTemplateTest.java,105,,"                ""services:"","
127695,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,55,,"        String symbolicName = ""sampleId"";"
127696,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,56,,"        String version = ""0.1.0"";"
127697,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/CatalogYamlVersioningTest.java,170,,"                ""services:"","
127698,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterParsingTest.java,63,,"        assertEquals(firstInput.getLabel(), ""simple"");"
127699,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,77,,"    @DataProvider(name=""brooklynTypes"")"
127700,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,87,,"        addCatalogItems(""brooklyn.catalog:"","
127701,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,88,,"                        ""  id: "" + SYMBOLIC_NAME,"
127702,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,89,,"                        ""  version: "" + TEST_VERSION,"
127703,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,90,,"                        ""  item:"","
127704,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,95,,"        ConfigKey<String> SIMPLE_CONFIG = ConfigKeys.newStringConfigKey(""simple"");"
127705,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,145,,"                ""  items:"","
127706,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,147,,"                ""    item:"","
127707,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,148,,"                ""      type: "" + type.getName(),"
127708,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,149,,"                ""      brooklyn.parameters:"","
127709,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,150,,"                ""      - simple"","
127710,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,151,,"                ""  - id: "" + SYMBOLIC_NAME,"
127711,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,224,,"                ""services:"","
127712,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/catalog/SpecParameterUnwrappingTest.java,225,,"                ""- type: "" + ver(SYMBOLIC_NAME));"
127713,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-brooklyn/src/test/java/org/apache/brooklyn/camp/brooklyn/test/lite/CampYamlLiteTest.java,131,,"            .configure(AddChildrenEffector.EFFECTOR_PARAMETER_DEFS, MutableMap.of(""war"", (Object)MutableMap.of("
127714,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-server/src/main/java/org/apache/brooklyn/camp/server/dto/ApiErrorDto.java,60,,"            this.message = checkNotNull(message, ""message"");"
127715,./TargetProjects/incubator-brooklyn/brooklyn-server/camp/camp-server/src/test/java/org/apache/brooklyn/camp/server/dto/BasicDtoTest.java,52,,"        DtoCustomAttributes l = new DtoCustomAttributes(MutableMap.of(""bar"", ""bee""));"
127716,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,218,,"        checkNotNull(version, ""version"");"
127717,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,248,,"            @SuppressWarnings(""unchecked"")"
127718,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,359,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127719,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,366,,"        Map<?,?> catalogMetadata = getFirstAsMap(itemDef, ""brooklyn.catalog"").orNull();"
127720,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,377,,"        catalogMetadata.remove(""item"");"
127721,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,378,,"        catalogMetadata.remove(""items"");"
127722,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/BasicBrooklynCatalog.java,430,,"        List<?> librariesNew = MutableList.copyOf(getFirstAs(itemMetadataWithoutItemDef, List.class, ""brooklyn.libraries"", ""libraries"").orNull());"
127723,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/CatalogUtils.java,183,,"                        ""Catalog item addition: ""+entity+"" from ""+entity.getCatalogItemId()+"" applying its catalog item ID to ""+itemBeingAdded);"
127724,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/CatalogUtils.java,292,,"        Preconditions.checkNotNull(item, ""No such item: "" + symbolicNameAndOptionalVersion);"
127725,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/catalog/internal/CatalogXmlSerializer.java,49,,"        xstream.addImplicitCollection(CatalogDto.class, ""entries"", CatalogTemplateItemDto.class);"
127726,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/ConfigPredicates.java,37,,"    @SuppressWarnings(""unused"") @Deprecated "
127727,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/MapConfigKey.java,68,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127728,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/MapConfigKey.java,68,,"    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127729,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/internal/AbstractCollectionConfigKey.java,90,,"                    log.debug(""Trace for: ""+warning, new Throwable(""Trace for: ""+warning));"
127730,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/config/render/RendererHints.java,92,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
127731,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/effector/MethodEffector.java,86,,"        @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
127732,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,155,,"    @SuppressWarnings(""rawtypes"")"
127733,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,315,,"        if (flags.get(""parent"") != null && parent != null && flags.get(""parent"") != parent) {"
127734,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,316,,"            throw new IllegalArgumentException(""Multiple parents supplied, ""+flags.get(""parent"")+"" and ""+parent);"
127735,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,318,,"        if (flags.get(""owner"") != null && parent != null && flags.get(""owner"") != parent) {"
127736,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,459,,"    @SuppressWarnings(""unchecked"")"
127737,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/AbstractEntity.java,608,,"            throw new UnsupportedOperationException(""Cannot change parent of ""+this+"" from ""+parent+"" to ""+entity+"" (parent change not supported)"");"
127738,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/BrooklynConfigKeys.java,118,,"            ""config['""+ONBOX_BASE_DIR.getName()+""']!"" +"
127739,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/BrooklynConfigKeys.java,118,,"            ""config['""+ONBOX_BASE_DIR.getName()+""']!"" +"
127740,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Entities.java,203,,"    @SuppressWarnings(""unchecked"")"
127741,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Entities.java,338,,"                out.append("" = "");"
127742,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/Entities.java,339,,"                if (isSecret(it.getName())) out.append(""xxxxxxxx"");"
127743,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityFunctions.java,47,,"    @SuppressWarnings(""unused"") @Deprecated "
127744,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityPredicates.java,68,,"    @SuppressWarnings(""unused"") @Deprecated "
127745,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityRelations.java,143,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
127746,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/EntityRelations.java,143,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
127747,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/drivers/ReflectiveEntityDriverFactory.java,165,,"            if (!driverInterfaceName.endsWith(""Driver"")) {"
127748,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/factory/ApplicationBuilder.java,77,,"    @SuppressWarnings(""unchecked"")"
127749,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/entity/internal/ConfigMapViewWithStringKeys.java,72,,"        throw new UnsupportedOperationException(""This view is read-only"");"
127750,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/feed/AttributePollHandler.java,104,,"                log.warn(""unable to compute ""+getBriefDescription()+""; on val=""+val, e);"
127751,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/feed/AttributePollHandler.java,174,,"                        log.warn(""Read of "" + getBriefDescription() + "" gave "" + type + "": "" + val);"
127752,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/feed/AttributePollHandler.java,174,,"                        log.warn(""Read of "" + getBriefDescription() + "" gave "" + type + "": "" + val);"
127753,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/internal/BrooklynPropertiesImpl.java,243,,"    @SuppressWarnings(""unchecked"")"
127754,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/internal/BrooklynPropertiesImpl.java,356,,"        if (flags.get(""warnIfNone"")!=null && !Boolean.FALSE.equals(flags.get(""warnIfNone""))) {"
127755,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/BasicLocationRegistry.java,281,,"            if (getDefinedLocationByName(""localhost"")==null && !BasicOsDetails.Factory.newLocalhostInstance().isWindows()"
127756,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/LocationConfigUtils.java,242,,"                                    log.debug(""Loaded private key data from ""+file+"" (public key data explicitly set)"");"
127757,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/LocationConfigUtils.java,387,,"                if (log.isDebugEnabled()) log.debug(""Loaded ""+LocationConfigKeys.PUBLIC_KEY_DATA.getName()+"" from inferred files, based on ""+LocationConfigKeys.PRIVATE_KEY_FILE.getName() + "": used "" + publicKeyFilesTidied + "" for ""+config.getDescription());"
127758,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/LocationPredicates.java,36,,"    @SuppressWarnings(""unused"") @Deprecated "
127759,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,56,,"            shortener.append(""user"", user);"
127760,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,61,,"                shortener.append(""app"", shortName(app))"
127761,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,62,,"                        .append(""appId"", app.getId());"
127762,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/cloud/names/BasicCloudMachineNamer.java,64,,"            shortener.append(""entity"", shortName(entity))"
127763,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/location/geo/UtraceHostGeoLookup.java,149,,"            log.debug(""Geo info lookup for ""+address+"" timed out after ""+timeout);"
127764,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,332,,"                LOG.info(""Management node ""+ownNodeId+"" running as HA "" + getInternalNodeState() + "" autodetected"""
127765,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerImpl.java,699,,"                new Object[] {result, nodeId, (masterMemento == null ? ""<none>"" : masterMemento.toVerboseString()), (ourMemento == null ? ""<none>"" : ourMemento.toVerboseString())});"
127766,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/BasicSubscriptionContext.java,68,,"    @SuppressWarnings(""rawtypes"")"
127767,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/BrooklynShutdownHooks.java,81,,"                    log.warn(""Call to invokeStopOnShutdown for ""+entity+"" while system already shutting down; invoking stop now and throwing exception"");"
127768,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/DeferredBrooklynProperties.java,166,,"    @SuppressWarnings(""rawtypes"")"
127769,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/EffectorUtils.java,121,,"            throw new IllegalArgumentException(""Invalid arguments (missing ""+newArgsNeeded+"") for effector ""+eff+"": ""+args);"
127770,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalManagementContext.java,245,,"        if (!isRunning()) throw new IllegalStateException(""Management context no longer running"");"
127771,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/LocalSubscriptionManager.java,72,,"    @SuppressWarnings(""rawtypes"")"
127772,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentAccessManager.java,41,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
127773,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentAccessManager.java,41,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
127774,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentEntityManager.java,50,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" (with no initial management context supplied) is not valid for this operation."");"
127775,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentEntityManager.java,50,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" (with no initial management context supplied) is not valid for this operation."");"
127776,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentLocationManager.java,42,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation: cannot create ""+spec);"
127777,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,240,,"        if (!this.entity.equals(entity)) throw new IllegalStateException(""Non-deployment context ""+this+"" can only use a single Entity: has ""+this.entity+"", but passed ""+entity);"
127778,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentManagementContext.java,433,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation."");"
127779,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentUsageManager.java,55,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
127780,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/internal/NonDeploymentUsageManager.java,55,,"            throw new IllegalStateException(""Non-deployment context ""+this+"" is not valid for this operation"");"
127781,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/BrooklynMementoPersisterToObjectStore.java,292,,"                    exceptionHandler.onLoadMementoFailed(type, ""memento ""+id+"" read error"", e);"
127782,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/FileBasedObjectStore.java,108,,"                    log.info(""Persistence deferred backup, directory ""+basedir+"" backed up to ""+backup.getAbsolutePath());"
127783,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/FileBasedObjectStore.java,304,,"            FatalConfigurationRuntimeException problem = new FatalConfigurationRuntimeException(""Invalid persistence directory "" + dir + "": "" +"
127784,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/persist/XmlMementoSerializer.java,190,,"        public String serializedClass(@SuppressWarnings(""rawtypes"") Class type) {"
127785,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,166,,"                        throw new IllegalStateException(""Rebind: aborting due to ""+errmsg, e);"
127786,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,174,,"                        throw new IllegalStateException(""Unexpected state '""+loadPolicyFailureMode+""' for loadPolicyFailureMode"");"
127787,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,189,,"            warn(""No entity found with id ""+id+""; dangling reference on rebind"");"
127788,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,296,,"                warn(errmsg+""; continuing"", e);"
127789,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,300,,"                throw new IllegalStateException(""Unexpected state '""+addPolicyFailureMode+""' for addPolicyFailureMode"");"
127790,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindExceptionHandlerImpl.java,443,,"                allExceptions.add(new IllegalStateException(""Dangling references (""+totalDangling+"" of ""+totalItems+"") present without rebind context""));"
127791,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindIteration.java,818,,"                    LOG.debug(""Inferred catalog item ID ""+t.getId()+"" for ""+entityManifest+"" from ancestor ""+ptr);"
127792,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindIteration.java,886,,"                LOG.warn(""Deprecated rebind of entity without no-arg constructor; this may not be supported in future versions: id=""+entityId+""; type=""+entityType);"
127793,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/RebindManagerImpl.java,259,,"        LOG.debug(""Starting persistence (""+this+""), mgmt ""+managementContext.getManagementNodeId());"
127794,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerLoader.java,60,,"            String oldVal = (String) args.get(""old_val"");"
127795,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/mgmt/rebind/transformer/CompoundTransformerLoader.java,61,,"            String newVal = (String) args.get(""new_val"");"
127796,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicEntityTypeRegistry.java,59,,"                throw new IllegalArgumentException(""Implementation ""+implClazz+"" already registered against type ""+existingType+""; cannot also register against ""+type);"
127797,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicSpecParameter.java,162,,"                @SuppressWarnings(""unchecked"")"
127798,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/objs/BasicSpecParameter.java,197,,"        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127799,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,154,,"    @SuppressWarnings(""unchecked"")"
127800,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,244,,"        @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
127801,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/core/sensor/DependentConfiguration.java,373,,"        return new BasicTask<T>(MutableMap.of(""tag"", ""whenDone"", ""displayName"", ""waiting for job""), job);"
127802,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,69,,"        @SuppressWarnings(""unchecked"")"
127803,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,205,,"        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
127804,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,329,,"                    .add(""publishing"", publishing)"
127805,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,330,,"                    .add(""fromEntity"", fromEntity)"
127806,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/enricher/stock/Enrichers.java,331,,"                    .add(""computing"", computingSupplier)"
127807,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,48,,"    @SuppressWarnings(""unused"") @Deprecated "
127808,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,85,,"                        throw new NoSuchElementException(""No element '""+element+"" in JSON, when walking ""+elements);"
127809,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/http/JsonFunctions.java,85,,"                        throw new NoSuchElementException(""No element '""+element+"" in JSON, when walking ""+elements);"
127810,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/feed/ssh/SshValueFunctions.java,32,,"    @SuppressWarnings(""unused"") @Deprecated "
127811,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/byon/ByonLocationResolver.java,103,,"        String user = (String) config.getStringKey(""user"");"
127812,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/byon/ByonLocationResolver.java,104,,"        Integer port = (Integer) TypeCoercions.coerce(config.getStringKey(""port""), Integer.class);"
127813,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/location/multi/MultiLocation.java,81,,"    @SuppressWarnings(""unchecked"")"
127814,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/FlagUtils.java,441,,"                        f+"" in ""+objectOfField+"": attempting to change to ""+value+"" when was already ""+oldValue);"
127815,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/TypeCoercions.java,136,,"    @SuppressWarnings({ ""unchecked"" })"
127816,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/TypeCoercions.java,205,,"                            throw new ClassCoercionException(""Cannot coerce type ""+value.getClass()+"" to ""+targetType.getCanonicalName()+"" (""+value+""): ""+m.getName()+"" adapting failed, ""+e);"
127817,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/flags/TypeCoercions.java,205,,"                            throw new ClassCoercionException(""Cannot coerce type ""+value.getClass()+"" to ""+targetType.getCanonicalName()+"" (""+value+""): ""+m.getName()+"" adapting failed, ""+e);"
127818,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,258,,"                    .add(""RESULT=$?"");"
127819,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,266,,"            cmds.add(""exit $RESULT"");"
127820,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/ShellAbstractTool.java,355,,"            String catStdoutCmd = ""tail -c +""+(stdoutPosition+1)+"" ""+stdoutPath+"" 2> /dev/null"";"
127821,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/internal/ssh/sshj/SshjTool.java,372,,"                boolean uploadSuccess = Repeater.create(""async script upload on ""+SshjTool.this.toString()+"" (for ""+getSummary()+"")"")"
127822,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/task/BasicExecutionContext.java,77,,"        if (flags.containsKey(""tags"")) tags.addAll((Collection<?>)flags.remove(""tags""));"
127823,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/task/BasicTask.java,522,,"                rv += ""\n\n""+getExtraStatusText();"
127824,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/task/DynamicSequentialTask.java,309,,"                                            log.debug(""Secondary job queue for ""+DynamicSequentialTask.this+"" ignoring error in inessential task ""+secondaryJob+"": ""+e);"
127825,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,178,,"                throw new IllegalStateException(""Error accessing config '""+key+""'""+"": ""+e, e);"
127826,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,279,,"            this.location = checkNotNull(location, ""location"");"
127827,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/main/java/org/apache/brooklyn/util/core/text/TemplateProcessor.java,392,,"            if (""config"".equals(key)) {"
127828,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,57,,"        CatalogItem<Entity, EntitySpec<?>> item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
127829,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,57,,"        CatalogItem<Entity, EntitySpec<?>> item = createItem(CatalogItemBuilder.newEntity(""foo"", ""1.0"")"
127830,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/CatalogPredicatesTest.java,58,,"                .plan(""services:\n- type: org.apache.brooklyn.entity.stock.BasicEntity"")"
127831,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogItemComparatorTest.java,34,,"        compare(""0.0.1"", ""0.0.2"", 1);"
127832,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogItemComparatorTest.java,34,,"        compare(""0.0.1"", ""0.0.2"", 1);"
127833,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,59,,"        assertVersionParsesAs(""foo:1"", ""foo"", ""1"");"
127834,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,81,,"        String symbolicName = ""sampleId"";"
127835,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/catalog/internal/CatalogVersioningTest.java,82,,"        String version = ""0.1.0"";"
127836,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
127837,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
127838,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
127839,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,39,,"        BrooklynProperties props = BrooklynProperties.Factory.newEmpty().addFromMap(ImmutableMap.of(""akey"", ""aval"", ""bkey"", ""bval""));"
127840,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,43,,"        assertEquals(props.getFirst(""akey"", ""notThere""), ""aval"");"
127841,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,150,,"                ""a.key"", ""aval"", ""a.key2"", ""aval2"", ""akey"", ""noval"", ""b.key"", ""bval""));"
127842,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/BrooklynPropertiesTest.java,150,,"                ""a.key"", ""aval"", ""a.key2"", ""aval2"", ""akey"", ""noval"", ""b.key"", ""bval""));"
127843,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyConstraintTest.java,74,,"                .description(""Configuration key that must not be null"")"
127844,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeyConstraintTest.java,182,,"            assertNotNull(t, ""Original exception was: "" + Exceptions.collapseText(e));"
127845,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,34,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""privateKeyFile"", ""my descr"", ""my default val"");"
127846,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,34,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""privateKeyFile"", ""my descr"", ""my default val"");"
127847,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigKeysTest.java,53,,"        ConfigKey<String> key = ConfigKeys.newStringConfigKey(""mykey"", ""my descr"", ""my default val"");"
127848,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/ConfigPredicatesTest.java,32,,"    private final ConfigKey<String> STR1 = ConfigKeys.newStringConfigKey(""test.str1"");"
127849,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/MapConfigKeyAndFriendsMoreTest.java,92,,"        entity.config().set(ConfigKeys.newConfigKey(Object.class, TestEntity.CONF_MAP_THING_OBJECT.getName()+"".dotext""), 1);"
127850,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,61,,"        endpoint = getTestProperty(""endpoint"");"
127851,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,62,,"        path = getTestProperty(""path"");"
127852,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,87,,"    @Test(groups = ""Live"")"
127853,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,90,,"        ExternalConfigSupplier ecs = new VaultTokenExternalConfigSupplier(null, ""test"","
127854,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/config/external/vault/VaultExternalConfigSupplierLiveTest.java,139,,"        String appId = getTestProperty(""appId"");"
127855,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorConcatenateTest.java,177,,"                    log.warn(""Failure: ""+t, t);"
127856,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,69,,"        assertEquals(effector.getDescription(), ""my effector description"");"
127857,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
127858,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
127859,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,74,,"                        new BasicParameterType<String>(""param1"", String.class, ""my param description"", ""my default val"")));"
127860,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorMetadataTest.java,104,,"        assertEquals(actuals.size(), expecteds.size(), ""actual=""+actuals);"
127861,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,77,,"        assertEquals(""sayHi1"", e.SAY_HI_1.getName());"
127862,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,80,,"        assertEquals(ImmutableList.of(""name"", ""greeting""), getParameterNames(e.SAY_HI_1));"
127863,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,80,,"        assertEquals(ImmutableList.of(""name"", ""greeting""), getParameterNames(e.SAY_HI_1));"
127864,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,91,,"        assertEquals(""hi Bob"", e.sayHi1(""Bob"", ""hi""));"
127865,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorSayHiTest.java,91,,"        assertEquals(""hi Bob"", e.sayHi1(""Bob"", ""hi""));"
127866,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,59,,"    public static final Effector<Integer> DOUBLE_1 = Effectors.effector(Integer.class, ""double"")"
127867,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,60,,"            .description(""doubles the given number"")"
127868,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,61,,"            .parameter(Integer.class, ""numberToDouble"")"
127869,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,227,,"            .parameter(Integer.class, ""numberToStartWith"")"
127870,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/EffectorTaskTest.java,374,,"            .parameter(AtomicBoolean.class, ""lock"")"
127871,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,102,,"    @Test(groups=""Integration"")"
127872,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,154,,"            log.info(""The error if required PID is not found is: ""+e);"
127873,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,156,,"            Assert.assertTrue(e.toString().contains(""Process with PID""), ""Expected nice clue in error but got: ""+e);"
127874,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,156,,"            Assert.assertTrue(e.toString().contains(""Process with PID""), ""Expected nice clue in error but got: ""+e);"
127875,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,189,,"        File f = File.createTempFile(""testBrooklynPid"", "".pid"");"
127876,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/effector/ssh/SshEffectorTasksTest.java,189,,"        File f = File.createTempFile(""testBrooklynPid"", "".pid"");"
127877,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/BasicEnricherTest.java,78,,"        enricher.setDisplayName(""Bob"");"
127878,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/BasicEnricherTest.java,79,,"        enricher.config().set(MyEnricher.STR_KEY, ""aval"");"
127879,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/enricher/EnricherConfigTest.java,43,,"                .put(""strKey"", ""aval"")"
127880,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AbstractApplicationLegacyTest.java,72,,"        assertEquals(child.getCallHistory(), ImmutableList.of(""start""));"
127881,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,83,,"            final AttributeSensor<String> nextSensor = Sensors.newStringSensor(""attributeMapTest.exampleSensor""+i, """");"
127882,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,135,,"        map.update(sensor1, ""1val"");"
127883,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,136,,"        map.update(sensor2, ""2val"");"
127884,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,165,,"        map.update(sensor, ""parentValue"");"
127885,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeMapTest.java,166,,"        map.update(childSensor, ""childValue"");"
127886,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/AttributeTest.java,48,,"        e.sensors().set(COLOR, ""red"");"
127887,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,114,,"        Task<Function<String, String>> task = DependentConfiguration.regexReplacement(""foo"", ""bar"");"
127888,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,114,,"        Task<Function<String, String>> task = DependentConfiguration.regexReplacement(""foo"", ""bar"");"
127889,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,117,,"        Assert.assertEquals(regexReplacer.apply(""somefootext""), ""somebartext"");"
127890,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,117,,"        Assert.assertEquals(regexReplacer.apply(""somefootext""), ""somebartext"");"
127891,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,162,,"        entity.sensors().set(TestEntity.NAME, ""myval"");"
127892,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,168,,"        final Task<String> t = submit(DependentConfiguration.attributeWhenReady(entity, TestEntity.NAME, Predicates.equalTo(""myval2"")));"
127893,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/DependentConfigurationTest.java,244,,"            if (!e.toString().contains(""Aborted waiting for ready"")) throw e;"
127894,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitiesTest.java,68,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
127895,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitiesTest.java,113,,"            .addInitializer(EntityInitializers.addingTags(""foo"")));"
127896,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,80,,"        final String myName = ""myname"";"
127897,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,102,,"    @Test(groups=""Integration"")"
127898,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,104,,"        entity.sensors().set(TestEntity.NAME, ""before"");"
127899,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,105,,"        final String after = ""after"";"
127900,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityAssertsTest.java,115,,"        EntityAsserts.assertAttributeEqualsEventually(ImmutableMap.of(""timeout"", ""1s""), entity, TestEntity.NAME, after);"
127901,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,55,,"                .configure(""myentity.myconfig"", ""myval1"")"
127902,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,55,,"                .configure(""myentity.myconfig"", ""myval1"")"
127903,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,56,,"                .configure(""myentity.myconfigwithflagname"", ""myval2""));"
127904,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,56,,"                .configure(""myentity.myconfigwithflagname"", ""myval2""));"
127905,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,67,,"                .configure(""myconfigflagname"", ""myval""));"
127906,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,87,,"                .configure(""notThere"", ""notThereVal""));"
127907,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,87,,"                .configure(""notThere"", ""notThereVal""));"
127908,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,98,,"                .configure(""mychildconfigflagname"", ""myval2"")"
127909,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,127,,"                .configure(""mychildentity.myconfigwithflagname"", ""myval"")"
127910,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,132,,"                .configure(""mychildentity.myconfigwithflagname"", ""overrideMyval"")"
127911,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityConfigTest.java,133,,"                .configure(""notThere"", ""overrideNotThereVal""));"
127912,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityFunctionsTest.java,50,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
127913,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityPredicatesTest.java,67,,"        entity.sensors().set(TestEntity.NAME, ""myname"");"
127914,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityPredicatesTest.java,69,,"        assertFalse(EntityPredicates.attributeEqualTo(TestEntity.NAME, ""wrongname"").apply(entity));"
127915,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySetFromFlagTest.java,37,,"        MyEntity entity = new MyEntity(MutableMap.of(""str1"", ""myval""));"
127916,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySpecTest.java,89,,"                        .configure(MyPolicy.CONF1, ""myconf1val"")"
127917,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySubscriptionTest.java,88,,"        observedEntity.sensors().set(TestEntity.NAME, ""myname"");"
127918,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntitySubscriptionTest.java,249,,"        entity.subscriptions().subscribe(ImmutableMap.of(""notifyOfInitialValue"", true), observedEntity, TestEntity.SEQUENCE, listener);"
127919,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityTypeTest.java,123,,"        assertNotNull(Iterables.find(effectors, new MatchesNamePredicate(""myEffector"")), null);"
127920,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/EntityTypeTest.java,124,,"        assertNotNull(Iterables.find(effectors, new MatchesNamePredicate(""identityEffector"")), null);"
127921,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,70,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
127922,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,72,,"        String expectedFilename = String.format(""version=%s,type=%s,simpletype=%s"", ""myversion"", TestEntity.class.getName(), ""TestEntity"");"
127923,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/BasicDownloadsRegistryTest.java,83,,"        entity.sensors().set(Attributes.DOWNLOAD_ADDON_URLS, ImmutableMap.of(""myaddon"", ""acme.com/addon=${addon},version=${addonversion},type=${type},simpletype=${simpletype}""));"
127924,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,83,,"        brooklynProperties.put(""brooklyn.downloads.all.url"", ""myurl"");"
127925,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,83,,"        brooklynProperties.put(""brooklyn.downloads.all.url"", ""myurl"");"
127926,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,101,,"        brooklynProperties.put(""brooklyn.downloads.all.fallbackurl"", ""version=${version}"");"
127927,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,102,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
127928,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java,103,,"        assertResolves(ImmutableList.<String>of(), ImmutableList.of(""version=myversion""));"
127929,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/drivers/downloads/DownloadSubstitutersTest.java,59,,"        entity.config().set(BrooklynConfigKeys.SUGGESTED_VERSION, ""myversion"");"
127930,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/hello/LocalEntitiesTest.java,177,,"        app.config().set(HelloEntity.MY_NAME, ""Bob"");"
127931,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/hello/LocalEntitiesTest.java,230,,"            ((EntityLocal)dad).sensors().set(HelloEntity.FAVOURITE_NAME, ""Dan"");"
127932,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/ConfigMapTest.java,97,,"        MySubEntity entity2 = new MySubEntity(MutableMap.of(MySubEntity.SUPER_KEY_1, ""changed""), app);"
127933,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/ConfigMapTest.java,156,,"        LatchingCallable work = new LatchingCallable(""abc"");"
127934,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageLegacyTest.java,58,,"        TestEntity entity = new TestEntityImpl(MutableMap.of(""config"", MutableMap.of(strKey, ""aval"", intKey, 2)), app);"
127935,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageLegacyTest.java,58,,"        TestEntity entity = new TestEntityImpl(MutableMap.of(""config"", MutableMap.of(strKey, ""aval"", intKey, 2)), app);"
127936,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageLegacyTest.java,124,,"        TestEntity entity = new TestEntityImpl(MutableMap.of(""config"", MutableMap.of(strKey, ""diffval"")), parent);"
127937,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageTest.java,70,,"                .configure(strKey, ""aval"")"
127938,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageTest.java,114,,"                .configure(strKeyWithDefault, ""customval""));"
127939,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/internal/EntityConfigMapUsageTest.java,150,,"                .configure(strKey, ""diffval""));"
127940,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/EntityManagerTest.java,55,,"        TestEntity child = entity.addChild(EntitySpec.create(TestEntity.class).displayName(""mychildname""));"
127941,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/EntityManagerTest.java,56,,"        assertTrue(child instanceof EntityProxy, ""child=""+child);"
127942,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/entity/proxying/InternalEntityFactoryTest.java,67,,"        assertTrue(proxy instanceof Application, ""proxy=""+app);"
127943,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/internal/storage/impl/BrooklynStorageImplTest.java,59,,"        Reference<Object> ref = storage.getReference(""mykey"");"
127944,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/internal/storage/impl/ConcurrentMapAcceptingNullValsTest.java,61,,"        assertFalse(map.containsKey(""notthere""));"
127945,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/AbstractLocationTest.java,86,,"        Location l1 = createConcrete(""1"", MutableMap.of(""name"", ""bob""));"
127946,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LegacyAbstractLocationTest.java,59,,"        AbstractLocation l1 = new ConcreteLocation(MutableMap.of(""id"", ""1"", ""name"", ""bob""));"
127947,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,58,,"                .configure(""mylocation.myconfig"", ""myval1"")"
127948,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,58,,"                .configure(""mylocation.myconfig"", ""myval1"")"
127949,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,59,,"                .configure(""mylocation.myconfigwithflagname"", ""myval2""));"
127950,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,59,,"                .configure(""mylocation.myconfigwithflagname"", ""myval2""));"
127951,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,72,,"                .configure(""myconfigflagname"", ""myval""));"
127952,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,72,,"                .configure(""myconfigflagname"", ""myval""));"
127953,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,83,,"                .configure(""notThere"", ""notThereVal""));"
127954,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,83,,"                .configure(""notThere"", ""notThereVal""));"
127955,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,95,,"                .configure(""mychildlocation.myconfig"", ""myval1"")"
127956,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,111,,"                .configure(""mychildconfigflagname"", ""myval""));"
127957,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,116,,"        assertEquals(child.config().getBag().getAllConfig(), ImmutableMap.of(""mychildlocation.myconfigwithflagname"", ""myval""));"
127958,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,144,,"                .configure(""mychildlocation.myconfigwithflagname"", ""overrideMyval"")"
127959,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigTest.java,145,,"                .configure(""notThere"", ""overrideNotThereVal""));"
127960,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationConfigUtilsTest.java,45,,"        config.put(LocationConfigKeys.PRIVATE_KEY_DATA, ""mydata"");"
127961,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,42,,"        String provider = ""myprovider"";"
127962,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,69,,"        properties.put(""brooklyn.location.named.mynamed.privateKeyFile"", ""privateKeyFile-inNamed"");"
127963,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,74,,"        properties.put(""brooklyn.location.myprovider.publicKeyFile"", ""publicKeyFile-inProviderSpecific"");"
127964,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationPropertiesFromBrooklynPropertiesTest.java,78,,"        properties.put(""brooklyn.location.privateKeyData"", ""privateKeyData-inGeneric"");"
127965,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,51,,"        properties.put(""brooklyn.location.named.foo"", ""byon:(hosts=\""root@192.168.1.{1,2,3,4}\"")"");"
127966,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,51,,"        properties.put(""brooklyn.location.named.foo"", ""byon:(hosts=\""root@192.168.1.{1,2,3,4}\"")"");"
127967,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,52,,"        properties.put(""brooklyn.location.named.foo.privateKeyFile"", ""~/.ssh/foo.id_rsa"");"
127968,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationRegistryTest.java,55,,"        locdef = mgmt.getLocationRegistry().getDefinedLocationByName(""foo"");"
127969,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/LocationSubscriptionTest.java,85,,"        observedEntity.sensors().set(TestEntity.NAME, ""myname"");"
127970,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/MachinesTest.java,100,,"        entity.sensors().set(Attributes.SUBNET_HOSTNAME, ""myval"");"
127971,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerRebindTest.java,77,,"        String publicIpId = ""5.6.7.8"";"
127972,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerTest.java,72,,"        String publicIpId = ""myipid"";"
127973,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/access/PortForwardManagerTest.java,73,,"        String publicAddress = ""5.6.7.8"";"
127974,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/cloud/CloudMachineNamerTest.java,54,,"        app = ApplicationBuilder.newManagedApp(EntitySpec.create(TestApplication.class).displayName(""TistApp""), LocalManagementContextForTests.newInstance());"
127975,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/cloud/CloudMachineNamerTest.java,55,,"        TestEntity child = app.createAndManageChild(EntitySpec.create(TestEntity.class).displayName(""TestEnt""));"
127976,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/location/geo/HostGeoLookupIntegrationTest.java,42,,"    @Test(groups = ""Integration"")"
127977,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntitlementsTest.java,119,,"        assertFalse(seeNonSecretSensors.isEntitled(null, Entitlements.SEE_SENSOR, Entitlements.EntityAndItem.of(app, ""password"")));"
127978,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntitlementsTest.java,120,,"        assertTrue(seeNonSecretSensors.isEntitled(null, Entitlements.SEE_SENSOR, Entitlements.EntityAndItem.of(app, ""any-sensor"")));"
127979,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntityEntitlementTest.java,71,,"        Assert.assertTrue(mgmt.getEntitlementManager().isEntitled(null, Entitlements.INVOKE_EFFECTOR, EntityAndItem.of(app, StringAndArgument.of(""any-eff"", null))));"
127980,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/entitlement/EntityEntitlementTest.java,72,,"        Assert.assertTrue(mgmt.getEntitlementManager().isEntitled(null, Entitlements.SEE_SENSOR, EntityAndItem.of(app, ""any-sensor"")));"
127981,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerInMemoryIntegrationTest.java,31,,"@Test(groups=""Integration"")"
127982,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerInMemoryTest.java,67,,"        l.config().set(TestEntity.CONF_NAME, ""sample1"");"
127983,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerTestFixture.java,149,,"                .node(newManagerMemento(""node1"", ManagementNodeState.MASTER))"
127984,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HighAvailabilityManagerTestFixture.java,189,,"                .node(newManagerMemento(""zzzzzzz_node1"", ManagementNodeState.STANDBY))"
127985,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,184,,"        app.setDisplayName(""First App"");"
127986,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,283,,"    @Test(groups=""Integration"") // due to time (it waits for background persistence)"
127987,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,300,,"        TestEntity child = app.addChild(EntitySpec.create(TestEntity.class).configure(TestEntity.CONF_NAME, ""first-child""));"
127988,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/HotStandbyTest.java,302,,"        app2.config().set(TestEntity.CONF_NAME, ""second-app"");"
127989,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,55,,"        memento.addNode(newManagerMemento(""node1"",  ManagementNodeState.STANDBY, now));"
127990,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,56,,"        memento.addNode(newManagerMemento(""node2"",  ManagementNodeState.STANDBY, now));"
127991,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,57,,"        memento.addNode(newManagerMemento(""node3"",  ManagementNodeState.STANDBY, now));"
127992,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,85,,"        assertEquals(doTestFiltersOutByStatus(false, false), ImmutableList.of(""node4"", ""node5""));"
127993,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,85,,"        assertEquals(doTestFiltersOutByStatus(false, false), ImmutableList.of(""node4"", ""node5""));"
127994,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/ha/MasterChooserTest.java,94,,"        assertEquals(doTestFiltersOutByStatus(false, true), ImmutableList.of(""node4"", ""node5"", ""node6""));"
127995,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,111,,"                Assert.assertEquals(task.getUnchecked(), ""foo"");"
127996,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,178,,"            runEmptyTaskWithNameAndTags(e, ""task""+count, ManagementContextInternal.NON_TRANSIENT_TASK_TAG, ""boring-tag"");"
127997,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,212,,"        runEmptyTaskWithNameAndTags(app, ""task-""+(count++), ManagementContextInternal.NON_TRANSIENT_TASK_TAG, ""boring-tag"");"
127998,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,223,,"        runEmptyTaskWithNameAndTags(e, ""task-""+(count++), ManagementContextInternal.NON_TRANSIENT_TASK_TAG, ""another-tag"");"
127999,./TargetProjects/incubator-brooklyn/brooklyn-server/core/src/test/java/org/apache/brooklyn/core/mgmt/internal/EntityExecutionManagerTest.java,290,,"    @Test(groups=""Integration"")"
