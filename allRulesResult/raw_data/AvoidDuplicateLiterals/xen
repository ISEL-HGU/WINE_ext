117000,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,977,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(conf, ""select * from COMPACTION_QUEUE""), 1, count);"
117001,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,989,,"    count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from TXN_COMPONENTS"");"
117002,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1279,,"    String tblName = ""mm_nonpart"";"
117003,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1288,,"    executeStatementOnDriver(""INSERT INTO "" + tblName +""(a,b) VALUES(1, 'foo')"", driver);"
117004,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1288,,"    executeStatementOnDriver(""INSERT INTO "" + tblName +""(a,b) VALUES(1, 'foo')"", driver);"
117005,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1289,,"    executeStatementOnDriver(""INSERT INTO "" + tblName +""(a,b) VALUES(2, 'bar')"", driver);"
117006,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1329,,"    executeStatementOnDriver(""INSERT INTO "" + tblName + ""(a,b) SELECT a,b FROM "" + tblName"
117007,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1330,,"        + "" UNION ALL SELECT a,b FROM "" + tblName, driver);"
117008,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1673,,"      + ""'transactional_properties'='default')"", driver);"
117009,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1940,,"    assertEquals(""Value should contain new data"", 2, colStats.get(0).getStatsData().getLongStats().getHighValue());"
117010,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,1964,,"    String tblName2 = ""ttp2""; // acid table with customized tblproperties"
117011,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,2092,,"    CompactionInfo compactionInfo = new CompactionInfo(""dbName"", ""tableName"", ""partName"", CompactionType.MINOR);"
117012,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,2092,,"    CompactionInfo compactionInfo = new CompactionInfo(""dbName"", ""tableName"", ""partName"", CompactionType.MINOR);"
117013,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,2092,,"    CompactionInfo compactionInfo = new CompactionInfo(""dbName"", ""tableName"", ""partName"", CompactionType.MINOR);"
117014,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,88,,"    String dbName = ""default"";"
117015,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,89,,"    String tblName = ""testMajorCompaction"";"
117016,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,99,,"        Arrays.asList(""delta_0000001_0000001_0000"", ""delta_0000002_0000002_0000"","
117017,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,99,,"        Arrays.asList(""delta_0000001_0000001_0000"", ""delta_0000002_0000002_0000"","
117018,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,100,,"            ""delta_0000004_0000004_0000""),"
117019,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,103,,"    Assert.assertEquals(""Delete directories does not match"","
117020,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,104,,"        Arrays.asList(""delete_delta_0000003_0000003_0000"", ""delete_delta_0000005_0000005_0000""),"
117021,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,104,,"        Arrays.asList(""delete_delta_0000003_0000003_0000"", ""delete_delta_0000005_0000005_0000""),"
117022,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,122,,"        testDataProvider.getBucketData(tblName, ""536870912""));"
117023,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,132,,"    String expectedBase = ""base_0000005_v0000009"";"
117024,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,133,,"    Assert.assertEquals(""Base directory does not match after major compaction"","
117025,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,137,,"    List<String> expectedBucketFiles = Arrays.asList(""bucket_00000"");"
117026,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,138,,"    Assert.assertEquals(""Bucket names are not matching after compaction"", expectedBucketFiles,"
117027,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,218,,"    executeStatementOnDriver(""drop table if exists "" + tblName, driver);"
117028,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,223,,"    executeStatementOnDriver(""insert into "" + tblName + "" values(1,2),(1,3),(1,4),(2,2),(2,3),(2,4)"", driver);"
117029,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,225,,"    executeStatementOnDriver(""delete from "" + tblName + "" where b = 2"", driver);"
117030,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,255,,"    List<String> preCompactionRsBucket1 = testDataProvider.getBucketData(tblName, ""536936448"");"
117031,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,271,,"    List<String> expectedBucketFiles = Arrays.asList(""bucket_00000"", ""bucket_00001"", ""bucket_00002"");"
117032,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,303,,"    String partitionToday = ""ds=today"";"
117033,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,304,,"    String partitionTomorrow = ""ds=tomorrow"";"
117034,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,305,,"    String partitionYesterday = ""ds=yesterday"";"
117035,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,311,,"    Assert.assertEquals(""Delta directories does not match"","
117036,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,323,,"        ""{\""writeid\"":2,\""bucketid\"":536870912,\""rowid\"":0}\t3\t3\ttoday"","
117037,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,324,,"        ""{\""writeid\"":2,\""bucketid\"":536870912,\""rowid\"":0}\t3\t4\tyesterday"","
117038,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,437,,"    Assert.assertEquals(""Delta directories does not match after compaction"","
117039,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,481,,"    String tableName = ""testMinorCompaction"";"
117040,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,511,,"        Collections.singletonList(""delta_0000001_0000005_v0000009""), actualDeltasAfterComp);"
117041,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,514,,"    Assert.assertEquals(""Delete delta directories does not match after compaction"","
117042,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,515,,"        Collections.singletonList(""delete_delta_0000001_0000005_v0000009""), actualDeleteDeltasAfterComp);"
117043,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,559,,"    expectedDeltas.add(""delta_0000006_0000006_0000"");"
117044,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,560,,"    expectedDeltas.add(""delta_0000007_0000007_0000"");"
117045,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,561,,"    expectedDeltas.add(""delta_0000008_0000008_0000"");"
117046,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,564,,"    expectedDeleteDeltas.add(""delete_delta_0000002_0000002_0000"");"
117047,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,566,,"    expectedDeleteDeltas.add(""delete_delta_0000004_0000004_0000"");"
117048,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1133,,"    executeStatementOnDriver(""CREATE TABLE "" + tableName + ""(a INT, b STRING) "" + "" CLUSTERED BY(a) INTO 1 BUCKETS"""
117049,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1133,,"    executeStatementOnDriver(""CREATE TABLE "" + tableName + ""(a INT, b STRING) "" + "" CLUSTERED BY(a) INTO 1 BUCKETS"""
117050,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1134,,"        + "" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"", driver);"
117051,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1152,,"      Assert.assertEquals(""Delta names does not match"", Arrays"
117052,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1153,,"          .asList(""delta_0000001_0000002"", ""delta_0000001_0000005_v0000009"", ""delta_0000003_0000004"","
117053,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1156,,"          new Path[] {new Path(table.getSd().getLocation(), ""delta_0000001_0000005_v0000009"")}, ""a,b"", ""int:string"","
117054,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1156,,"          new Path[] {new Path(table.getSd().getLocation(), ""delta_0000001_0000005_v0000009"")}, ""a,b"", ""int:string"","
117055,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1183,,"        Arrays.asList(""delta_0000001_0000002"", ""delta_0000001_0000006_v0000009"", ""delta_0000003_0000004""),"
117056,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1429,,"    List<String> rsBucket0PtnToday = executeStatementOnDriverAndReturnResults(""select ROW__ID, * from  """
117057,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCrudCompactorOnTez.java,1445,,"    Assert.assertEquals(""compacted read"", expectedRsBucket0PtnToday, rsCompactBucket0PtnToday);"
117058,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMaterializedViewRebuild.java,39,,"      ""CBO PLAN:"","
117059,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMaterializedViewRebuild.java,67,,"    executeStatementOnDriver(""insert into "" + TABLE1 + ""(a,b, c) values (1, 'one', 1.1), (2, 'two', 2.2), (NULL, NULL, NULL)"", driver);"
117060,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMaterializedViewRebuild.java,69,,"        ""select a,b,c from "" + TABLE1 + "" where a > 0 or a is null"", driver);"
117061,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMaterializedViewRebuild.java,89,,"    List<String> result = execSelectAndDumpData(""explain cbo alter materialized view "" + MV1 + "" rebuild"", driver, """");"
117062,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMaterializedViewRebuild.java,91,,"    executeStatementOnDriver(""alter materialized view "" + MV1 + "" rebuild"", driver);"
117063,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,67,,"    String dbName = ""default"";"
117064,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,68,,"    String tableName = ""testMmMinorCompaction"";"
117065,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,81,,"    Assert.assertEquals(""Delta directories does not match"", Arrays"
117066,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,82,,"            .asList(""delta_0000001_0000001_0000"", ""delta_0000002_0000002_0000"","
117067,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,82,,"            .asList(""delta_0000001_0000001_0000"", ""delta_0000002_0000002_0000"","
117068,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,83,,"                ""delta_0000003_0000003_0000""),"
117069,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,98,,"    Assert.assertEquals(""Delta directories does not match after compaction"","
117070,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,99,,"        Collections.singletonList(""delta_0000001_0000003_v0000007""), actualDeltasAfterComp);"
117071,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,101,,"    List<String> expectedBucketFiles = Collections.singletonList(""000000_0"");"
117072,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,102,,"    Assert.assertEquals(""Bucket names are not matching after compaction"", expectedBucketFiles,"
117073,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,177,,"    String partitionToday = ""ds=today"";"
117074,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,179,,"    String partitionYesterday = ""ds=yesterday"";"
117075,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestMmCompactorOnTez.java,446,,"    executeStatementOnDriver(""insert into "" + tblName"
117076,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/schq/TestScheduledQueryIntegration.java,57,,"    envSetup.getTestCtx().hiveConf.set(""hive.users.in.admin.role"", ""user1"");"
117077,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,377,,"    argList.add(""--hivevar"");"
117078,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,465,,"    final String SCRIPT_TEXT = ""set hive.support.concurrency = false;\n"" +"
117079,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,466,,"        ""select null from "" + tableName + "" limit 1 ;\n"";"
117080,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,529,,"    argList.add(""--outputformat=tsv2"");"
117081,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,556,,"    System.setProperty(SeparatedValuesOutputFormat.DISABLE_QUOTING_FOR_SV,""false"");"
117082,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,560,,"    System.setProperty(SeparatedValuesOutputFormat.DISABLE_QUOTING_FOR_SV, ""true"");"
117083,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,600,,"    argList.add(""--outputformat=csv"");"
117084,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,777,,"            + ""select count(*) from "" + tableName + "";\n"";"
117085,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,777,,"            + ""select count(*) from "" + tableName + "";\n"";"
117086,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,842,,"    final String SCRIPT_TEXT = ""drop table if exists multiCmdTbl;create table multiCmdTbl """
117087,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,844,,"    final String EXPECTED_PATTERN = "" multicmdtbl "";"
117088,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java,1119,,"    final String EXPECTED_PATTERN = ""hello\thello\thello"";"
117089,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,74,,"    argList.add(""hive"");"
117090,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,75,,"    connectBeelineWithUserPrompt(argList, ""hivepassword"");"
117091,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,114,,"    argList.add(""show tables;"");"
117092,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,116,,"    Assert.assertTrue(""Table name "" + tableName + "" not found in the output"","
117093,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,116,,"    Assert.assertTrue(""Table name "" + tableName + "" not found in the output"","
117094,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeelinePasswordOption.java,130,,"    argList.add(""--force=true"");"
117095,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,82,,"      ""BEGIN\n"" +"
117096,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,91,,"      ""END;\n"" +"
117097,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,99,,"      ""DROP TABLE IF EXISTS result;\n"" +"
117098,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,100,,"      ""CREATE TABLE result (s string);\n"" +"
117099,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,106,,"      ""SELECT * FROM result;\n"" +"
117100,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,207,,"            ""DROP TABLE IF EXISTS emp;\n"" +"
117101,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,208,,"            ""CREATE TABLE emp (name string, age int);\n"" +"
117102,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestHplSqlViaBeeLine.java,209,,"            ""INSERT INTO emp VALUES('alice', 20);\n"" +"
117103,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/hs2connection/TestBeelineConnectionUsingHiveSite.java,54,,"    assertBeelineOutputContains(path, new String[] { ""-e"", ""show tables;"" }, tableName);"
117104,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,42,,"        ""-- this is a comment"","
117105,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,43,,"      ""DROP TABLE IF EXISTS fooTab;"","
117106,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,46,,"      ""DROP TABLE footab;"","
117107,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,47,,"      ""-- ending comment"""
117108,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,50,,"      ""DROP TABLE IF EXISTS fooTab"","
117109,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,52,,"      ""CREATE TABLE fooTab(id INTEGER)"","
117110,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,53,,"      ""DROP TABLE footab"","
117111,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,55,,"    String expectedSQL = StringUtils.join(resultScript, System.getProperty(""line.separator"")) +"
117112,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,76,,"      ""DROP TABLE IF EXISTS "" + childTab1 + "";"","
117113,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,77,,"      ""CREATE TABLE "" + childTab1 + ""(id INTEGER);"","
117114,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,77,,"      ""CREATE TABLE "" + childTab1 + ""(id INTEGER);"","
117115,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/beeline/schematool/TestSchemaTool.java,78,,"      ""DROP TABLE "" + childTab1 + "";"""
117116,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/AbstractTestJdbcGenericUDTFGetSplits.java,160,,"    String query = ""select "" + udtfName + ""("" + ""'select value from "" + tableName + ""', 10)"";"
117117,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/AbstractTestJdbcGenericUDTFGetSplits.java,160,,"    String query = ""select "" + udtfName + ""("" + ""'select value from "" + tableName + ""', 10)"";"
117118,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/AbstractTestJdbcGenericUDTFGetSplits.java,197,,"    String query = ""select "" + udtfName + ""("" + ""'select id from "" + partitionedTableName + ""', 5)"";"
117119,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/BaseJdbcWithMiniLlap.java,149,,"    stmt.execute(""DROP TABLE IF EXISTS "" + tableName);"
117120,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/BaseJdbcWithMiniLlap.java,169,,"    stmt.execute(""create table "" + tableName"
117121,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/BaseJdbcWithMiniLlap.java,208,,"    createTestTable(""testtab1"");"
117122,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/BaseJdbcWithMiniLlap.java,216,,"    assertArrayEquals(new String[] {""0"", ""val_0""}, rowCollector.rows.get(0));"
117123,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/BaseJdbcWithMiniLlap.java,274,,"    String query = ""select * from "" + tableName;"
117124,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,152,,"    String url = ""http://localhost:"" + hiveConf1.get(ConfVars.HIVE_SERVER2_WEBUI_PORT.varname) + ""/leader"";"
117125,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,152,,"    String url = ""http://localhost:"" + hiveConf1.get(ConfVars.HIVE_SERVER2_WEBUI_PORT.varname) + ""/leader"";"
117126,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,153,,"    assertEquals(""true"", sendGet(url));"
117127,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,157,,"    assertEquals(""false"", sendGet(url));"
117128,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,278,,"    confOverlay.put(ConfVars.HIVE_SERVER2_TRANSPORT_MODE.varname, ""http"");"
117129,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,279,,"    confOverlay.put(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PATH.varname, ""clidriverTest"");"
117130,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,296,,"    String hs2_1_directUrl = ""jdbc:hive2://"" + miniHS2_1.getHost() + "":"" + miniHS2_1.getBinaryPort() +"
117131,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,297,,"      ""/default;serviceDiscoveryMode="" + serviceDiscoveryMode + "";zooKeeperNamespace="" + zkHANamespace + "";"";"
117132,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,297,,"      ""/default;serviceDiscoveryMode="" + serviceDiscoveryMode + "";zooKeeperNamespace="" + zkHANamespace + "";"";"
117133,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,359,,"      assertTrue(resp.contains(""Failover successful!""));"
117134,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestActivePassiveHA.java,448,,"      Connection hs2Conn = getConnection(hs1Url, System.getProperty(""user.name"")); // Should work."
117135,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestHiveDatabaseMetaData.java,70,,"    map.put(Utils.JdbcConnectionParams.HIVE_DEFAULT_NULLS_LAST_KEY, ""false"");"
117136,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,105,,"  private static final String defaultDbName = ""default"";"
117137,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,106,,"  private static final String tableName = ""testjdbcdrivertbl"";"
117138,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,149,,"    stmt.execute(""create table "" + tableName"
117139,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,155,,"    stmt.execute(""load data local inpath '"" + dataFilePath.toString() + ""' into table "" + tableName);"
117140,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,155,,"    stmt.execute(""load data local inpath '"" + dataFilePath.toString() + ""' into table "" + tableName);"
117141,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,214,,"    assertNotNull(""Statement is null"", stmt);"
117142,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,216,,"    stmt.execute(""drop database if exists "" + testDbName + "" cascade"");"
117143,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,216,,"    stmt.execute(""drop database if exists "" + testDbName + "" cascade"");"
117144,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,227,,"    stmt.execute(""set "" + ConfVars.HIVE_SUPPORT_CONCURRENCY.varname + ""=true"");"
117145,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,326,,"    stmt1.execute(""SET hive.server2.async.exec.async.compile=false"");"
117146,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,329,,"    stmt1.execute(""create temporary function sleepMsUDF as '"" + SleepMsUDF.class.getName() + ""'"");"
117147,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,332,,"        + tableName + "" limit 1"");"
117148,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,559,,"    PreparedStatement stmt = con.prepareStatement(""select under_col from "" + tableName + "" where value=?"");"
117149,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,590,,"    ps.setObject(12, Timestamp.valueOf(""2012-04-22 09:00:00.123456789"")); //setTimestamp"
117150,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,622,,"      assertEquals(""10"", res.getString(""num""));"
117151,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,743,,"      fail(""Expecting SQLException"");"
117152,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,786,,"    testQuery = ""select * from "" + tableName + "" limit 5"";"
117153,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,935,,"    assertEquals(""2013-01-01"", res.getString(20));"
117154,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1054,,"        assertEquals(res.getInt(1), res.getInt(""under_col""));"
117155,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1058,,"        assertEquals(res.getString(2), res.getString(""value""));"
117156,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1217,,"    stmt.execute(""set "" + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname + "" = """
117157,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1245,,"    assertEquals(""TABLE_CAT"", resMeta.getColumnName(1));"
117158,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1246,,"    assertEquals(""TABLE_SCHEM"", resMeta.getColumnName(2));"
117159,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1247,,"    assertEquals(""TABLE_NAME"", resMeta.getColumnName(3));"
117160,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1248,,"    assertEquals(""TABLE_TYPE"", resMeta.getColumnName(4));"
117161,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1249,,"    assertEquals(""REMARKS"", resMeta.getColumnName(5));"
117162,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1288,,"      String typeInfo = rs.getString(""TYPE_NAME"");"
117163,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1319,,"    tests.put(new Object[] { null, ""testjdbc%"", ALL }, new String[] { testTblWithDb,"
117164,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1325,,"    tests.put(new Object[] { ""%jdbc%"", ""testjdbcdrivertbl"", ALL }, new String[] { testTblWithDb });"
117165,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1460,,"    tests.put(new String[] { ""%jdbcdrivertbl%"", ""under\\_col"" }, 1);"
117166,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1477,,"        String columnname = rs.getString(""COLUMN_NAME"");"
117167,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1523,,"    assertEquals(""Column type 'under_col' for column under_col not found"", ""int"", res.getString(2));"
117168,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1667,,"    assertEquals(Types.INTEGER, colRS.getInt(""DATA_TYPE""));"
117169,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1669,,"    assertEquals(meta.getPrecision(1), colRS.getInt(""COLUMN_SIZE""));"
117170,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,1670,,"    assertEquals(meta.getScale(1), colRS.getInt(""DECIMAL_DIGITS""));"
117171,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2459,,"      System.out.println(""Executing query: "");"
117172,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2514,,"              ""t2.under_col as u2 from "" + tableName +  "" t1 join "" + tableName +"
117173,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2514,,"              ""t2.under_col as u2 from "" + tableName +  "" t1 join "" + tableName +"
117174,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2515,,"              "" t2 on t1.under_col = t2.under_col"");"
117175,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2865,,"        ""REPL::START"","
117176,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2867,,"        ""REPL::END"""
117177,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,2874,,"              "" with ('hive.repl.rootdir' = '"" + replDir + ""')"");"
117178,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java,3051,,"    stmt.execute(""SET hive.driver.parallel.compilation=true"");"
117179,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithLocalClusterSpark.java,106,,"        getConnection(miniHS2.getJdbcURL(), System.getProperty(""user.name""), ""bar"");"
117180,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithLocalClusterSpark.java,106,,"        getConnection(miniHS2.getJdbcURL(), System.getProperty(""user.name""), ""bar"");"
117181,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,98,,"  private static final String defaultDbName = ""default"";"
117182,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,144,,"    return getConnection(miniHS2.getJdbcURL(), System.getProperty(""user.name""), ""bar"");"
117183,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,144,,"    return getConnection(miniHS2.getJdbcURL(), System.getProperty(""user.name""), ""bar"");"
117184,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,266,,"    stmt.execute(""set hive.driver.parallel.compilation=true"");"
117185,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,267,,"    stmt.execute(""set hive.server2.async.exec.async.compile=true"");"
117186,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,391,,"    private String showsql = ""show tables"";"
117187,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,567,,"    stmt.execute(""USE "" + testDbName);"
117188,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,715,,"    ResultSet rs = stmt.executeQuery(""select * from testThriftSerializeShow1 inner join """
117189,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,716,,"        + ""testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"");"
117190,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,806,,"    Connection conn = getConnection(miniHS2.getJdbcURL(testDbName, sessionConf), userName, ""password"");"
117191,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java,1309,,"    res = stmt.executeQuery(""DESCRIBE FUNCTION "" + testDbName + "".example_add"");"
117192,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2ErasureCoding.java,153,,"      stmt.execute(""INSERT INTO TABLE "" + tableName"
117193,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapArrow.java,85,,"    conf.setVar(ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(""user.name""));"
117194,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapArrow.java,416,,"    assertNotNull(""tExecute"", tExecuteHolder.throwable);"
117195,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapArrow.java,419,,"    assertNull(""tCancel"", tKillHolder.throwable);"
117196,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapArrow.java,426,,"    testKillQueryInternal(""user1"", ""user2"", true, tExecuteHolder, tKillHolder);"
117197,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapVectorArrowBatch.java,155,,"    executeSQL(""create table "" + tableName + "" (d date) stored as orc"");"
117198,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapVectorArrowBatch.java,156,,"    executeSQL(""INSERT INTO "" + tableName + "" VALUES "" + ""('2012-02-21'), "" + ""('2014-02-11'), "" + ""('1947-02-11'), """
117199,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapVectorArrowBatch.java,159,,"    final String query = ""select * from "" + tableName;"
117200,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapVectorArrowBatch.java,161,,"    testDateQueries(query, ""orc.proleptic.gregorian.default"", hybridMixedDateExpectedOutput,"
117201,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniLlapVectorArrowBatch.java,340,,"        ImmutableMap.of(LLAP_EXTERNAL_CLIENT_USE_HYBRID_CALENDAR.toString(), ""true"")), false);"
117202,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithServiceDiscovery.java,116,,"            System.getProperty(""user.name""), ""bar"");"
117203,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithServiceDiscovery.java,116,,"            System.getProperty(""user.name""), ""bar"");"
117204,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithServiceDiscovery.java,256,,"    assertNull(""tCancel"", tKillHolder.throwable);"
117205,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestKillQueryWithAuthorizationDisabled.java,61,,"      if (getUserName().equals(""user1"")) {"
117206,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestKillQueryWithAuthorizationDisabled.java,66,,"      } else if (getUserName().equals(System.getProperty(""user.name""))) {"
117207,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestKillQueryWithAuthorizationDisabled.java,224,,"    assertNotNull(""tExecute"", tExecuteHolder.throwable);"
117208,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestKillQueryWithAuthorizationDisabled.java,227,,"    assertNull(""tCancel"", tKillHolder.throwable);"
117209,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestRestrictedList.java,199,,"    String value = ""foo"";"
117210,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java,139,,"            System.getProperty(""user.name""), ""bar"");"
117211,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java,139,,"            System.getProperty(""user.name""), ""bar"");"
117212,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java,159,,"      Assert.assertEquals(""08S01"", e.getSQLState().trim());"
117213,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java,183,,"      hs2Conn = DriverManager.getConnection(miniHS2.getJdbcURL(""default"", SSLTestUtils.SSL_CONN_PARAMS),"
117214,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestServiceDiscoveryWithMiniHS2.java,93,,"    confOverlay.put(""hive.server2.zookeeper.publish.configs"", ""true"");"
117215,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,103,,"      new Action(Action.Type.MOVE_TO_POOL, ""ETL""));"
117216,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,107,,"    String query = ""select sleep(t1.under_col+t2.under_col, 5), t1.value from "" + tableName + "" t1 join "" + tableName +"
117217,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,110,,"    setCmds.add(""set hive.tez.session.events.print.summary=json"");"
117218,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,111,,"    setCmds.add(""set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecWMEventsSummaryPrinter"");"
117219,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,112,,"    setCmds.add(""set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.PostExecWMEventsSummaryPrinter"");"
117220,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,114,,"    errCaptureExpect.add(""Workload Manager Events Summary"");"
117221,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,115,,"    errCaptureExpect.add(""\""eventType\"" : \""GET\"""");"
117222,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,116,,"    errCaptureExpect.add(""\""eventType\"" : \""MOVE\"""");"
117223,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,118,,"    errCaptureExpect.add(""\""eventType\"" : \""RETURN\"""");"
117224,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,122,,"    errCaptureExpect.add(""\""violationMsg\"" : \""Trigger "" + moveTrigger + "" violated"");"
117225,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,122,,"    errCaptureExpect.add(""\""violationMsg\"" : \""Trigger "" + moveTrigger + "" violated"");"
117226,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,126,,"    errCaptureExpect.add(""Event: GET Pool: BI"");"
117227,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,130,,"    errCaptureExpect.add(""Event: RETURN Pool: null Cluster %: 0.00"");"
117228,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java,136,,"    Expression moveExpression = ExpressionFactory.fromString(""HDFS_BYTES_READ > 100"");"
117229,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersNoTezSessionPool.java,50,,"    String query = ""select sleep(t1.under_col, 5), t1.value from "" + tableName + "" t1 join "" + tableName +"
117230,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersNoTezSessionPool.java,50,,"    String query = ""select sleep(t1.under_col, 5), t1.value from "" + tableName + "" t1 join "" + tableName +"
117231,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersNoTezSessionPool.java,51,,"      "" t2 on t1.under_col>=t2.under_col"";"
117232,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersNoTezSessionPool.java,52,,"    runQueryWithTrigger(query, null, trigger + "" violated"", 50);"
117233,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,52,,"    Trigger trigger = new ExecutionTrigger(""slow_query"", expression, new Action(Action.Type.KILL_QUERY));"
117234,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,54,,"    String query = ""select sleep(t1.under_col+t2.under_col, 500), t1.value from "" + tableName + "" t1 join "" + tableName +"
117235,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,55,,"      "" t2 on t1.under_col>=t2.under_col"";"
117236,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,57,,"    setCmds.add(""set hive.exec.post.hooks=org.apache.hadoop.hive.ql.hooks.PostExecWMEventsSummaryPrinter"");"
117237,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,58,,"    setCmds.add(""set hive.exec.failure.hooks=org.apache.hadoop.hive.ql.hooks.PostExecWMEventsSummaryPrinter"");"
117238,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,59,,"    runQueryWithTrigger(query, setCmds, trigger + "" violated"", 110);"
117239,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,80,,"    String query = ""select sleep(t1.under_col+t2.under_col, 5), t1.value from "" + tableName + "" t1 join "" + tableName +"
117240,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,134,,"    Trigger trigger = new ExecutionTrigger(""highly_parallel"", expression, new Action(Action.Type.KILL_QUERY));"
117241,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,160,,"    Trigger trigger = new ExecutionTrigger(""high_read_ops"", expression, new Action(Action.Type.KILL_QUERY));"
117242,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,175,,"    cmds.add(""set hive.optimize.sort.dynamic.partition.threshold=-1"");"
117243,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersTezSessionPoolManager.java,297,,"    String query = ""select t1.under_col, t1.value from "" + tableName + "" t1 join "" + tableName +"
117244,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/authorization/TestJdbcMetadataApiAuth.java,159,,"    res = dbmetadata.getTables(null, ""default"", ""t%"", null);"
117245,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/authorization/TestJdbcMetadataApiAuth.java,187,,"      fail(""HiveAccessControlException expected"");"
117246,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/authorization/TestJdbcWithSQLAuthorization.java,76,,"      Connection hs2Conn = getConnection(""user1"");"
117247,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/authorization/TestJdbcWithSQLAuthorization.java,95,,"      Connection hs2Conn = getConnection(""user2"");"
117248,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/authorization/TestJdbcWithSQLAuthorization.java,104,,"        assertTrue(""Checking permission denied error"", msg.contains(""user2""));"
117249,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,113,,"    Connection con1 = getConnection(""default"");"
117250,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,117,,"    assertNotNull(""Statement is null"", stmt1);"
117251,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,149,,"      stmt.execute(""drop table "" + tableName);"
117252,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,155,,"    stmt.execute(""create table "" + tableName"
117253,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,160,,"    stmt.execute(""load data local inpath '"""
117254,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,161,,"        + dataFilePath.toString() + ""' into table "" + tableName);"
117255,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,357,,"        ""select c5, c1 from "" + dataTypeTableName + "" order by c1"");"
117256,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,406,,"            ""c1*2, sentences(null, null, null) as b, c23 from "" + dataTypeTableName + "" limit 1"");"
117257,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,515,,"    ps.setObject(12, Timestamp.valueOf(""2012-04-22 09:00:00.123456789"")); //setTimestamp"
117258,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,547,,"      assertEquals(""10"", res.getString(""num""));"
117259,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,572,,"    PreparedStatement ps = con.prepareStatement(""set "" + key + "" = ?"");"
117260,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,712,,"      stmt.executeQuery(""select * from "" + tableName);"
117261,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,863,,"    assertEquals(""2013-01-01"", res.getString(20));"
117262,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,979,,"        assertEquals(res.getInt(1), res.getInt(""under_col""));"
117263,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,983,,"        assertEquals(res.getString(2), res.getString(""value""));"
117264,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1102,,"        "" = "" + TableTypeMappings.HIVE.toString());"
117265,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1124,,"    tests.put(""test%jdbc%"", new Object[]{""testhivejdbcdriver_table"""
117266,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1142,,"      assertEquals(""TABLE_CAT"", resMeta.getColumnName(1));"
117267,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1261,,"    tests.put(new String[]{""%jdbcdriver\\_table%"", ""under\\_col""}, 1);"
117268,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1279,,"        String columnname = rs.getString(""COLUMN_NAME"");"
117269,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1370,,"    assertEquals(""Column type 'under_col' for column under_col not found"", ""int"", res"
117270,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1482,,"    assertEquals(Types.INTEGER, colRS.getInt(""DATA_TYPE""));"
117271,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1483,,"    assertEquals(""int"", colRS.getString(""TYPE_NAME"").toLowerCase());"
117272,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1484,,"    assertEquals(meta.getPrecision(1), colRS.getInt(""COLUMN_SIZE""));"
117273,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/jdbc/cbo_rp_TestJdbcDriver2.java,1485,,"    assertEquals(meta.getScale(1), colRS.getInt(""DECIMAL_DIGITS""));"
117274,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/cli/operation/OperationLoggingAPITestBase.java,85,,"    String queryString = ""set hive.server2.logging.operation.level=verbose"";"
117275,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/cli/operation/TestOperationLoggingLayout.java,152,,"    checkAppenderState(""before operation close "", LogDivertAppender.QUERY_ROUTING_APPENDER, queryId, expectedStopped);"
117276,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestQueryDisplay.java,66,,"            TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V8, ""testuser"", """", """","
117277,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestQueryDisplay.java,70,,"    OperationHandle opHandle1 = session.executeStatement(""show databases"", null);"
117278,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestQueryDisplay.java,72,,"    OperationHandle opHandle2 = session.executeStatement(""show tables"", null);"
117279,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,74,,"      if (getUserName().equals(""user1"")) {"
117280,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,75,,"        groups.add(""group_a"");"
117281,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,76,,"      } else if (getUserName().equals(""user2"")) {"
117282,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,98,,"        if (hiveObject.getDbname().equals(""testdb1"")) {"
117283,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,101,,"        } else if (hiveObject.getDbname().equals(""testdb2"")) {"
117284,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,105,,"        if (hiveObject.getDbname().equals(""testdb1"") && hiveObject.getObjectName().equals(""testtable1"")) {"
117285,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,129,,"            && hiveObject.getColumns().get(0).equals(""key"")) {"
117286,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,197,,"    confOverlay.put(""mapred.local.dir"", workDir + File.separator + ""TestInformationSchemaWithPrivilege"""
117287,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,198,,"        + File.separator + ""mapred"" + File.separator + ""local"");"
117288,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,206,,"    confOverlay.put(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY.varname, ""true"");"
117289,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,255,,"    serviceClient.executeStatement(sessHandle, ""DROP TABLE IF EXISTS "" + db1Name + ""."" + table1Name, confOverlay);"
117290,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,257,,"        ""CREATE TABLE "" + db1Name + ""."" + table1Name + ""(key string, value double)"", confOverlay);"
117291,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,388,,"      if (cols[3].equals(db1Name) && cols[4].equals(table1Name) && cols[5].equals(""SELECT"")) {"
117292,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hive/service/server/InformationSchemaWithPrivilegeTestBase.java,414,,"      } else if (cols[1].equals(db1Name) && cols[2].equals(table1Name) && cols[3].equals(""value"")) {"
117293,./TargetProjects/hive/itests/qtest-druid/src/main/java/org/apache/hive/druid/MiniDruidCluster.java,50,,"      Arrays.asList(""-server"", ""-XX:MaxDirectMemorySize=10g"", ""-Xmx512m"", ""-Xmx512m"", COMMON_DRUID_JVM_PROPERTIES);"
117294,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCoreBlobstoreCliDriver.java,83,,"      System.err.println(""Exception: "" + e.getMessage());"
117295,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,47,,"        setQueryDir(""ql/src/test/queries/clientpositive"");"
117296,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,52,,"        setLogDir(""itests/qtest/target/qfile-results/clientpositive"");"
117297,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,54,,"        setInitScript(""q_test_init.sql"");"
117298,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,55,,"        setCleanupScript(""q_test_cleanup.sql"");"
117299,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,60,,"        throw new RuntimeException(""can't construct cliconfig"", e);"
117300,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,144,,"        setHiveConfDir(""data/conf/llap"");"
117301,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,161,,"        setLogDir(""itests/qtest/target/tmp/log"");"
117302,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,254,,"        setInitScript(""q_test_init_src.sql"");"
117303,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java,255,,"        setCleanupScript(""q_test_cleanup_src.sql"");"
117304,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCliDriver.java,84,,"      System.err.println(""Exception: "" + e.getMessage());"
117305,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCompareCliDriver.java,68,,"      System.err.println(""Exception: "" + e.getMessage());"
117306,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseCliDriver.java,55,,"      System.err.println(""Exception: "" + e.getMessage());"
117307,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreHBaseNegativeCliDriver.java,55,,"      System.err.println(""Exception: "" + e.getMessage());"
117308,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestResultProcessor.java,94,,"      ss.out = new SortPrintStream(fo, ""UTF-8"");"
117309,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestSyntaxUtil.java,91,,"    String[] tokens = cmdTrimmed.split(""\\s+"");"
117310,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java,595,,"    String execEngine = conf.get(""hive.execution.engine"");"
117311,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/ql/security/DummyHiveMetastoreAuthorizationProvider.java,127,,"      "" , write:"" + debugPrivPrint(writeRequiredPriv)"
117312,./TargetProjects/hive/itests/util/src/main/java/org/apache/hadoop/hive/ql/security/DummyHiveMetastoreAuthorizationProvider.java,138,,"        "" , read:"" + debugPrivPrint(readRequiredPriv) +"
117313,./TargetProjects/hive/itests/util/src/main/java/org/apache/hive/beeline/QFile.java,218,,"    String output = FileUtils.readFileToString(rawOutputFile, ""UTF-8"");"
117314,./TargetProjects/hive/itests/util/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java,598,,"      return ""jdbc:hive2://"" + getHost() + "":"" + getHttpPort() + ""/"";"
117315,./TargetProjects/hive/itests/util/src/test/java/org/apache/hadoop/hive/ql/TestQOutProcessor.java,35,,"    Assert.assertEquals(String.format(""hdfs://%s"", QOutProcessor.HDFS_MASK),"
117316,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/config/TestJdbcStorageConfigManager.java,38,,"    props.put(JdbcStorageConfig.JDBC_URL.getPropertyName(), ""jdbc://localhost:3306/hive"");"
117317,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/config/TestJdbcStorageConfigManager.java,39,,"    props.put(JdbcStorageConfig.QUERY.getPropertyName(), ""SELECT col1,col2,col3 FROM sometable"");"
117318,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,62,,"    conf.set(""mapred.input.dir"", ""/temp"");"
117319,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,62,,"    conf.set(""mapred.input.dir"", ""/temp"");"
117320,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,63,,"    conf.set(""hive.sql.numPartitions"", ""3"");"
117321,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,107,,"    conf.set(""hive.sql.partitionColumn"", ""a"");"
117322,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,109,,"    conf.set(""hive.sql.lowerBound"", ""1"");"
117323,./TargetProjects/hive/jdbc-handler/src/test/java/org/apache/hive/storage/jdbc/TestJdbcInputFormat.java,110,,"    conf.set(""hive.sql.upperBound"", ""10"");"
117324,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java,75,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117325,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java,440,,"        throw new SQLException(""Illegal conversion to int from column "" + columnIndex + "" ["" + obj + ""]"", e);"
117326,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveCallableStatement.java,66,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117327,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java,419,,"            throw new SQLException(errMsg + e.getMessage(), "" 08S01"", e);"
117328,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java,1289,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117329,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java,1294,,"      throw new SQLException(""Connection is closed"");"
117330,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDataSource.java,78,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117331,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java,98,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117332,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java,149,,"      throw new SQLException(e.getMessage(), ""08S01"", e);"
117333,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java,161,,"    private final static String[] COLUMN_TYPES = { ""STRING"", ""INT"", ""STRING"", ""STRING"" };"
117334,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java,161,,"    private final static String[] COLUMN_TYPES = { ""STRING"", ""INT"", ""STRING"", ""STRING"" };"
117335,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java,448,,"            ""SMALLINT"","
117336,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HivePreparedStatement.java,71,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117337,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveQueryResultSet.java,319,,"      throw new SQLException(""Resultset is closed"");"
117338,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java,46,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117339,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java,155,,"    throw new SQLFeatureNotSupportedException(""Method not supported"");"
117340,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java,174,,"      throw new SQLException(""Failed to cancel statement"", ""08S01"", e);"
117341,./TargetProjects/hive/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java,118,,"        throw new SQLException(""Invalid column type: "" + columnType);"
117342,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHiveBaseResultSet.java,51,,"    resultSet.row = new Object[] {""ABC""};"
117343,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHiveBaseResultSet.java,148,,"    fieldSchema.setType(""int"");"
117344,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHiveBaseResultSet.java,259,,"    resultSet.normalizedColumnNames = Arrays.asList(""one"", ""two"", ""three"");"
117345,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHiveBaseResultSet.java,266,,"    when(resultSet.findColumn(""Two"")).thenCallRealMethod();"
117346,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHiveBaseResultSet.java,267,,"    when(resultSet.findColumn(""THREE"")).thenCallRealMethod();"
117347,./TargetProjects/hive/jdbc/src/test/org/apache/hive/jdbc/TestHivePreparedStatement.java,85,,"  @SuppressWarnings(""resource"")"
117348,./TargetProjects/hive/kafka-handler/src/java/org/apache/hadoop/hive/kafka/HiveKafkaProducer.java,139,,"    Object transactionManager = getValue(kafkaProducer, ""transactionManager"");"
117349,./TargetProjects/hive/kafka-handler/src/java/org/apache/hadoop/hive/kafka/HiveKafkaProducer.java,211,,"        throw new RuntimeException(""Incompatible KafkaProducer version"", e);"
117350,./TargetProjects/hive/kafka-handler/src/test/org/apache/hadoop/hive/kafka/AvroBytesConverterTest.java,106,,"    tbl.setProperty(AvroSerdeUtils.AvroTableProperties.AVRO_SERDE_TYPE.getPropName(), ""SKIP"");"
117351,./TargetProjects/hive/kafka-handler/src/test/org/apache/hadoop/hive/kafka/HiveKafkaProducerTest.java,130,,"    secondProducer.sendOffsetsToTransaction(ImmutableMap.of(), ""__dummy_consumer_group"");"
117352,./TargetProjects/hive/kafka-handler/src/test/org/apache/hadoop/hive/kafka/KafkaInputSplitTest.java,38,,"    this.expectedInputSplit = new KafkaInputSplit(topic, 1, 50L, 56L, new Path(""/tmp""));"
117353,./TargetProjects/hive/kafka-handler/src/test/org/apache/hadoop/hive/kafka/KafkaInputSplitTest.java,52,,"    KafkaInputSplit kafkaInputSplit = new KafkaInputSplit(""test-topic"", 2, 10, 400, new Path(""/tmp""));"
117354,./TargetProjects/hive/kafka-handler/src/test/org/apache/hadoop/hive/kafka/KafkaUtilsTest.java,44,,"    configuration.set(""kafka.bootstrap.servers"", ""localhost:9090"");"
117355,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduInputFormat.java,87,,"    ROW.addByte(""key"", (byte) 1);"
117356,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduInputFormat.java,94,,"    ROW.addString(""string"", ""one"");"
117357,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduOutputFormat.java,102,,"      row.addString(""string"", ""one"");"
117358,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduPredicateHandler.java,99,,"    ROW.addBinary(""binary"", ""one"".getBytes(UTF_8));"
117359,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduPredicateHandler.java,102,,"    ROW.setNull(""null"");"
117360,./TargetProjects/hive/kudu-handler/src/test/org/apache/hadoop/hive/kudu/TestKuduPredicateHandler.java,139,,"      if (col.getName().equals(""null"") || col.getName().equals(""default"")) {"
117361,./TargetProjects/hive/llap-client/src/java/org/apache/hadoop/hive/registry/impl/ZookeeperUtils.java,116,,"        krbOptions.put(""doNotPrompt"", ""true"");"
117362,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/daemon/rpc/LlapDaemonProtocolProtos.java,29207,,"              throw new java.lang.AssertionError(""Can't get here."");"
117363,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/daemon/rpc/LlapDaemonProtocolProtos.java,29216,,"              ""Service.getRequestPrototype() given method "" +"
117364,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/daemon/rpc/LlapDaemonProtocolProtos.java,29217,,"              ""descriptor for wrong service type."");"
117365,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/daemon/rpc/LlapDaemonProtocolProtos.java,29242,,"              ""Service.getResponsePrototype() given method "" +"
117366,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/daemon/rpc/LlapDaemonProtocolProtos.java,30604,,"              new java.lang.String[] { ""User"", ""SignatureKeyId"", ""QueryIdentifier"", ""HiveQueryId"", ""DagName"", ""VertexName"", ""VertexIndex"", ""TokenIdentifier"", ""ProcessorDescriptor"", ""InputSpecs"", ""OutputSpecs"", ""GroupedInputSpecs"", ""VertexParallelism"", ""IsExternalSubmission"", });"
117367,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/plugin/rpc/LlapPluginProtocolProtos.java,837,,"              throw new java.lang.AssertionError(""Can't get here."");"
117368,./TargetProjects/hive/llap-common/src/gen/protobuf/gen-java/org/apache/hadoop/hive/llap/plugin/rpc/LlapPluginProtocolProtos.java,847,,"              ""descriptor for wrong service type."");"
117369,./TargetProjects/hive/llap-common/src/test/org/apache/hadoop/hive/llap/metrics/TestReadWriteLockMetrics.java,205,,"        throw new AssertionError(""Not implemented for test"");"
117370,./TargetProjects/hive/llap-common/src/test/org/apache/hadoop/hive/llap/metrics/TestReadWriteLockMetrics.java,485,,"    assertTrue(""Basic ReentrantReadWriteLock expected"","
117371,./TargetProjects/hive/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java,78,,"        new TaskSpec(tezTaskAttemptId, ""dagName"", ""vertexName"", 10, processorDescriptor,"
117372,./TargetProjects/hive/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java,78,,"        new TaskSpec(tezTaskAttemptId, ""dagName"", ""vertexName"", 10, processorDescriptor,"
117373,./TargetProjects/hive/llap-ext-client/src/java/org/apache/hadoop/hive/llap/LlapBaseInputFormat.java,501,,"        LOG.error(""Error during heartbeat responder:"", err);"
117374,./TargetProjects/hive/llap-server/src/java/org/apache/hadoop/hive/llap/cli/status/LlapStatusServiceCommandLine.java,53,,"  @SuppressWarnings(""static-access"")"
117375,./TargetProjects/hive/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/services/impl/SystemConfigurationServlet.java,128,,"            LOG.warn(""Unable to read contents of {}"", thpFileName);"
117376,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocator.java,95,,"        LlapDaemonCacheMetrics.create(""test"", ""1""), null, true);"
117377,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocatorForceEvict.java,288,,"    LOG.info(""After: "" + a.testDump());"
117378,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocatorForceEvict.java,320,,"    LOG.info(""Before: "" + a.testDump());"
117379,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,57,,"    CacheTag table = cacheTagBuilder(""dbname.tablename"");"
117380,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,58,,"    CacheTag p = cacheTagBuilder(""dbname.tablename"", ""p=v1"");"
117381,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,59,,"    CacheTag pp = cacheTagBuilder(""dbname.tablename"", ""p=v1"", ""pp=vv1"");"
117382,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,95,,"    compareViceVersa(1, cacheTagBuilder(""dbname.tablename"", ""p1=v1""), null);"
117383,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,96,,"    compareViceVersa(1, cacheTagBuilder(""dbname.tablename"", ""p1=v1"", ""p2=v2""), null);"
117384,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,185,,"        cacheTagBuilder(""default.testtable"")), null);"
117385,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestCacheContentsTracker.java,187,,"        cacheTagBuilder(""otherdb.testtable"", ""p=v1"", ""pp=vv1"")), null);"
117386,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelCacheImpl.java,162,,"        LlapDaemonCacheMetrics.create(""test"", ""1""), new DummyCachePolicy(),"
117387,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelLrfuCachePolicy.java,72,,"        LlapDaemonCacheMetrics.create(""test"", ""1""));"
117388,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestOrcMetadataCache.java,249,,"    Path path = new Path(""../data/files/alltypesorc"");"
117389,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestProactiveEviction.java,53,,"    cacheTagBuilder(""fx.rates"", ""from=USD"", ""to=HUF""),"
117390,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestProactiveEviction.java,53,,"    cacheTagBuilder(""fx.rates"", ""from=USD"", ""to=HUF""),"
117391,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestProactiveEviction.java,58,,"    cacheTagBuilder(""fx.futures"", ""ccy=EUR""),"
117392,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/cli/service/TestLlapServiceCommandLine.java,49,,"    LlapServiceCommandLine cl = new LlapServiceCommandLine(new String[] {""--instances"", ""1""});"
117393,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/daemon/impl/TestContainerRunnerImpl.java,177,,"            dagId, vId, ""dagName"", 0, 0,"
117394,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/daemon/impl/comparator/TestShortestJobFirstComparator.java,325,,"    TaskWrapper r1 = createTaskWrapper(createSubmitWorkRequestProto(1, 1, 1000, 1000, ""q11"", true), true, 1000);"
117395,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/daemon/services/impl/TestLlapWebServices.java,69,,"    String contextRootURL = ""http://localhost:"" + llapWSPort + ""/"";"
117396,./TargetProjects/hive/llap-server/src/test/org/apache/hadoop/hive/llap/security/TestLlapSignerImpl.java,63,,"      fail(""Didn't throw"");"
117397,./TargetProjects/hive/llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java,528,,"                    ""Unable to run task: "" + taskSpec.getTaskAttemptID() + "" on containerId: "" +"
117398,./TargetProjects/hive/llap-tez/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskSchedulerService.java,615,,"      Object clientCookie1 = ""cookie1"";"
117399,./TargetProjects/hive/llap-tez/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskSchedulerService.java,617,,"      Object clientCookie2 = ""cookie2"";"
117400,./TargetProjects/hive/llap-tez/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskSchedulerService.java,619,,"      Object clientCookie3 = ""cookie3"";"
117401,./TargetProjects/hive/llap-tez/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskSchedulerService.java,621,,"      Object clientCookie4 = ""cookie4"";"
117402,./TargetProjects/hive/parser/src/java/org/apache/hadoop/hive/ql/parse/ParseDriver.java,129,,"      LOG.debug(""Parse Completed"");"
117403,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java,57,,"    Assert.assertEquals(""AST doesn't match"","
117404,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java,66,,"        ""(tok_tabname src) "" +"
117405,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java,77,,"      ""(tok_update_table "" +"
117406,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java,79,,"        ""(tok_set_columns_clause "" +"
117407,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java,80,,"          ""(= "" +"
117408,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestMergeStatement.java,59,,"      ""(tok_merge "" +"
117409,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestMergeStatement.java,63,,"        ""(tok_matched "" +"
117410,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestMergeStatement.java,64,,"          ""(tok_update "" +"
117411,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestMergeStatement.java,82,,"        ""(tok_tabref (tok_tabname target)) (tok_tabref (tok_tabname source)) (= (. (tok_table_or_col target) pk) (. (tok_table_or_col source) pk)) "" +"
117412,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestParseDriver.java,148,,"        ""  ,'a'\n"" +"
117413,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestParseDriver.java,171,,"        ""  ,IF('a' = 'a'\n"" +"
117414,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestParseDriver.java,179,,"        ""  ,IF('a' = 1\n"" +"
117415,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestParseTrim.java,43,,"    assertTrimFunction(tree, ""trim"", ""'foo  bar'"", ""'f'"");"
117416,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestSpecialCharacterInTableNames.java,292,,"    parse(""select * \n"" +"
117417,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestSpecialCharacterInTableNames.java,304,,"        ""  )\n"" +"
117418,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestSpecialCharacterInTableNamesQuotes.java,292,,"    parse(""select * \n"" +"
117419,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestSpecialCharacterInTableNamesQuotes.java,304,,"        ""  )\n"" +"
117420,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,138,,"            ""TOK_FUNCTION\n"" +"
117421,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,139,,"            ""   array\n"" +"
117422,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,140,,"            ""   TOK_FUNCTION\n"" +"
117423,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,141,,"            ""      struct\n"" +"
117424,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,142,,"            ""      1\n"" +"
117425,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,145,,"            ""      4\n"", tree);"
117426,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/TestValuesClause.java,159,,"            ""      TOK_ALIAS\n"" +"
117427,./TargetProjects/hive/parser/src/test/org/apache/hadoop/hive/ql/parse/positive/TestTransactionStatement.java,46,,"    Assert.assertEquals(""AST doesn't match"","
117428,./TargetProjects/hive/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java,657,,"      sb.append(""null"");"
117429,./TargetProjects/hive/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java,812,,"      sb.append(""null"");"
117430,./TargetProjects/hive/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java,751,,"      sb.append(""null"");"
117431,./TargetProjects/hive/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java,821,,"      sb.append(""null"");"
117432,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/QueryPlan.java,569,,"    String v = ""null"";"
117433,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/QueryPlan.java,659,,"    sb.append(getJSONKeyValue(""done"", op.isDone()));"
117434,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/QueryPlan.java,660,,"    sb.append(getJSONKeyValue(""started"", op.isStarted()));"
117435,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java,244,,"      formatOutput(""Rewrite Enabled:"", table.isRewriteEnabled() ? ""Yes"" : ""No"", tableInfo);"
117436,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java,323,,"    formatOutput(""Table:"", partition.getTable().getTableName(), tableInfo);"
117437,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java,420,,"    formatOutput(""Constraint Name:"", constraint.getConstraintName(), constraintsInfo);"
117438,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/info/desc/formatter/TextDescTableFormatter.java,422,,"    String title = ""Column Name:"";"
117439,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/lock/show/ShowLocksOperation.java,228,,"        os.writeBytes((lock.getTablename() == null) ? ""NULL"" : lock.getTablename());"
117440,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/archive/AlterTableArchiveOperation.java,212,,"      context.getConsole().printInfo(""Moving "" + tmpPath + "" to "" + intermediateArchivedDir);"
117441,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/archive/AlterTableArchiveOperation.java,212,,"      context.getConsole().printInfo(""Moving "" + tmpPath + "" to "" + intermediateArchivedDir);"
117442,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/archive/AlterTableUnarchiveOperation.java,199,,"      context.getConsole().printInfo(""Copying "" + copySource + "" to "" + copyDest);"
117443,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ddl/table/storage/concatenate/AlterTableConcatenateAnalyzer.java,100,,"  @SuppressWarnings(""rawtypes"")"
117444,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/AbstractFileMergeOperator.java,257,,"            throw new IOException(""Unable to rename "" + outPath + "" to "" + finalPath);"
117445,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java,116,,"        if (fName.equals(""numNulls"")) {"
117446,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java,118,,"        } else if (fName.equals(""numDVs"")) {"
117447,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java,120,,"        } else if (fName.equals(""lowValue"")) {"
117448,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java,122,,"        } else if (fName.equals(""highValue"")) {"
117449,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java,125,,"          throw new SemanticException(""Unknown stat"");"
117450,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/CommonMergeJoinOperator.java,473,,"    @SuppressWarnings(""rawtypes"")"
117451,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,134,,"          ""<"" + COMMENT + "">\n"" +"
117452,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,155,,"  private final String ALTER_TABLE_CREATE_PARTITION = ""<if("" + COMMENT_SQL + "")><"" + COMMENT_SQL + ""> <endif>"" + ""ALTER TABLE <"""
117453,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,156,,"      + DATABASE_NAME + "">.<"" + TABLE_NAME +"
117454,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,163,,"      + COLUMN_NAME + ""> SET(<"" + TBLPROPERTIES + ""> );"";"
117455,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,179,,"      + DATABASE_NAME + "">.<"" + TABLE_NAME + ""> ADD CONSTRAINT <"" +"
117456,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,198,,"      + COLUMN_NAME + ""> <"" + COLUMN_NAME +"
117457,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLPlanUtils.java,810,,"    return StringUtils.join(columnDescs, "", \n"");"
117458,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java,339,,"          Utilities.FILE_OP_LOGGER.debug(""MoveTask moving "" + sourcePath + "" to "" + targetPath);"
117459,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java,229,,"  @SuppressWarnings(""rawtypes"")"
117460,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Operator.java,312,,"  @SuppressWarnings(""unchecked"")"
117461,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,1092,,"      throw new HiveException(""Unable to move: "" + src + "" to: "" + dst);"
117462,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,1092,,"      throw new HiveException(""Unable to move: "" + src + "" to: "" + dst);"
117463,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,1400,,"        && HiveConf.getVar(hConf, ConfVars.HIVE_EXECUTION_ENGINE).equalsIgnoreCase(""tez"")){"
117464,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,1454,,"        perfLogger.perfLogBegin(""FileSinkOperator"", ""rename"");"
117465,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,1490,,"          perfLogger.perfLogBegin(""FileSinkOperator"", ""moveSpecifiedFileStatus"");"
117466,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,3530,,"          throw new IOException(""Operation is Canceled."");"
117467,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java,3660,,"  @SuppressWarnings({""rawtypes"", ""unchecked""})"
117468,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapredLocalTask.java,273,,"        if (variables.containsKey(""HADOOP_CLASSPATH""))"
117469,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/persistence/MapJoinTableContainerSerDe.java,61,,"  @SuppressWarnings({""unchecked""})"
117470,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/persistence/MapJoinTableContainerSerDe.java,77,,"      throw new HiveException(""IO error while trying to create table container"", e);"
117471,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplStateLogWork.java,149,,"      metricCollector.reportStageProgress(""REPL_LOAD"", ReplUtils.MetricName.TABLES.name(), 1);"
117472,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplicationMigrationTool.java,274,,"      System.err.println(""Directory Size mismatch in source directory "" + srcPath + "" and target directory "" + trgPath);"
117473,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/spark/HiveSparkClientFactory.java,72,,"    String master = sparkConf.get(""spark.master"");"
117474,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/spark/SparkPlan.java,89,,"            sc.setCallSite(CallSite.apply(""UnionRDD ("" + rdd.name() + "", "" +"
117475,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/spark/SparkReporter.java,51,,"    throw new UnsupportedOperationException(""do not support this method now."");"
117476,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/spark/status/RemoteSparkJobMonitor.java,100,,"              console.printInfo(""Spark job["" + sparkJobStatus.getJobId() + ""] status = RUNNING"");"
117477,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java,445,,"    conf.set(""mapred.input.format.class"", inpFormat);"
117478,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/WorkloadManager.java,646,,"      default: throw new AssertionError(""Unknown state "" + rr);"
117479,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorAssignRow.java,556,,"              "" not supported"");"
117480,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,1020,,"                ""Could not vectorize expression (mode = "" + mode.name() + ""): "" + exprDesc.toString()"
117481,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,1461,,"               (arg0Type(expr).equals(""timestamp"")"
117482,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,1462,,"                   || arg0Type(expr).equals(""double"")"
117483,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,1463,,"                   || arg0Type(expr).equals(""float""))) {"
117484,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,1609,,"    if (typeName.equalsIgnoreCase(""boolean"")) {"
117485,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java,3436,,"    if (inputType.equalsIgnoreCase(""string"") || varcharTypePattern.matcher(inputType).matches()) {"
117486,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizedBatchUtil.java,447,,"            throw new IllegalStateException(""bad write"", ioe);"
117487,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/FilterStringColRegExpStringScalar.java,63,,"    private static final Pattern BEGIN_PATTERN = Pattern.compile(LITERAL_CHAR_GROUP + ""\\.\\*"");"
117488,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/VectorExpressionWriterFactory.java,106,,"      throw new HiveException(""Internal error: should not reach here"");"
117489,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/VectorExpressionWriterFactory.java,261,,"          ""Incorrect null/repeating: row:%d noNulls:%b isRepeating:%b isNull[row]:%b isNull[0]:%b"","
117490,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/mapjoin/hashtable/VectorMapJoinNonMatchedIterator.java,42,,"    throw new RuntimeException(""Not implemented"");"
117491,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/wrapper/VectorHashKeyWrapperBase.java,67,,"    throw new RuntimeException(""Not implemented"");"
117492,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/wrapper/VectorHashKeyWrapperGeneral.java,507,,"          sb.append(""null"");"
117493,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/hooks/PostExecTezSummaryPrinter.java,73,,"                console.printInfo(""   "" + counter.getDisplayName() + "": "" + counter.getValue(), false);"
117494,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java,466,,"        .getProperty(COMPACTOR_TABLE_PROPERTY).equalsIgnoreCase(""true"")) {"
117495,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/AcidUtils.java,692,,"    public static final String INSERT_ONLY_STRING = ""insert_only"";"
117496,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/NullScanFileSystem.java,71,,"    throw new UnsupportedOperationException(""Not supported"");"
117497,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/RCFile.java,420,,"    @SuppressWarnings(""unused"")"
117498,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java,964,,"        return ETLSplitStrategy.class.getSimpleName() + "" strategy for "" + dirs.get(0).dir;"
117499,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java,418,,"              + streamKind + "" at "" + offset + "", "" + length);"
117500,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java,1630,,"          .append(ranges.prev).append(""]; prev.next = ["").append(ranges.prev.next).append(""]; "");"
117501,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedTreeReaderFactory.java,2648,,"      throw new IOException(""Should never be called"");"
117502,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/LeafFilterFactory.java,63,,"          throw new RuntimeException(""Unknown PredicateLeaf Operator type: "" + op);"
117503,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DbTxnManager.java,508,,"      LOG.error(""Metastore could not find "" + JavaUtils.txnIdToString(rqst.getTxnid()));"
117504,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/log/LogDivertAppender.java,189,,"    nullEntry.setName(""appender"");"
117505,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/log/LogDivertAppender.java,197,,"    defaultEntry.setName(""Route"");"
117506,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/log/syslog/SyslogParser.java,208,,"        throw new IOException(""Unexpected syslog character: "" + (char) c);"
117507,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,1043,,"      throw new HiveException(""Unable to alter partition. "" + e.getMessage(), e);"
117508,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,1773,,"      perfLogger.perfLogEnd(CLASS_NAME, PerfLogger.HIVE_GET_TABLE, ""HS2-cache"");"
117509,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,1818,,"            LOG.debug(""Materialized view "" + materializedViewTable.getFullyQualifiedName() +"
117510,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,2355,,"    perfLogger.perfLogBegin(""MoveTask"", PerfLogger.LOAD_PARTITION);"
117511,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,2495,,"          Utilities.FILE_OP_LOGGER.trace(""not moving "" + loadPath + "" to "" + newPartPath + "" (MM = "" + isMmTableWrite"
117512,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,4387,,"        final String msg = ""Unable to move source "" + srcP + "" to destination "" + destf;"
117513,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,4387,,"        final String msg = ""Unable to move source "" + srcP + "" to destination "" + destf;"
117514,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,4401,,"            throw getHiveException(e, msg, ""Failed to move: {}"");"
117515,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java,6088,,"          + resourcePlan.getNs() + "", configured "" + ns);"
117516,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveMaterializedViewsRegistry.java,223,,"      LOG.warn(""Materialized view "" + materializedViewTable.getCompleteName() +"
117517,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/JarUtils.java,171,,"        if (toReturn.startsWith(""file:"")) {"
117518,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java,62,,"  @SuppressWarnings(""nls"")"
117519,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java,316,,"    tablePattern = tablePattern.replaceAll(""\\*"", "".*"");"
117520,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java,1404,,"      throw new IllegalStateException(""TempTable not found for "" + getCatalogQualifiedTableName(table));"
117521,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/metadata/formatting/TextMetaDataFormatter.java,49,,"      out.write(errorMessage.getBytes(""UTF-8""));"
117522,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/CountDistinctRewriteProc.java,159,,"          if (indexOfDist != -1 || !aggr.getGenericUDAFName().equalsIgnoreCase(""count"")) {"
117523,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/DynamicPartitionPruningOptimization.java,669,,"      AggregationDesc min = new AggregationDesc(""min"","
117524,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/DynamicPartitionPruningOptimization.java,672,,"      AggregationDesc max = new AggregationDesc(""max"","
117525,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/DynamicPartitionPruningOptimization.java,675,,"      AggregationDesc bloomFilter = new AggregationDesc(""bloom_filter"","
117526,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/DynamicPartitionPruningOptimization.java,694,,"      LOG.error(""Error creating min/max aggregations on key"", e);"
117527,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java,387,,"        LOG.debug(""Skip {} as it has already been removed"", discardableTsOp);"
117528,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java,413,,"            LOG.debug(""{} and {} cannot be merged"", retainableTsOp, discardableTsOp);"
117529,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/SharedWorkOptimizer.java,420,,"            LOG.debug(""{} and {} do not meet preconditions"", retainableTsOp, discardableTsOp);"
117530,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,467,,"                  Logger.debug(""Stats for table : "" + tbl.getTableName() + "" are not up to date."");"
117531,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,467,,"                  Logger.debug(""Stats for table : "" + tbl.getTableName() + "" are not up to date."");"
117532,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,472,,"                  Logger.debug(""Stats for table : "" + tbl.getTableName() + "" column "" + colName"
117533,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,488,,"                  Logger.debug(""Unsupported type: "" + desc.getTypeString() + "" encountered in """
117534,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,488,,"                  Logger.debug(""Unsupported type: "" + desc.getTypeString() + "" encountered in """
117535,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/StatsOptimizer.java,489,,"                      + ""metadata optimizer for column : "" + colName);"
117536,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/rules/views/HiveMaterializedViewUtils.java,103,,"      LOG.debug(""Materialized view "" + materializedViewTable.getFullyQualifiedName() +"
117537,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/ASTBuilder.java,90,,"      propList.add(ASTBuilder.construct(HiveParser.TOK_TABLEPROPERTY, ""TOK_TABLEPROPERTY"")"
117538,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/ASTConverter.java,336,,"        nullDirectionAST = ASTBuilder.createAST(HiveParser.TOK_NULLS_FIRST, ""TOK_NULLS_FIRST"");"
117539,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/ASTConverter.java,339,,"        nullDirectionAST = ASTBuilder.createAST(HiveParser.TOK_NULLS_LAST, ""TOK_NULLS_LAST"");"
117540,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/correlation/CorrelationUtilities.java,109,,"        throw new SemanticException(""Operator "" + operator.getName() + "" (ID: "" +"
117541,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/correlation/CorrelationUtilities.java,109,,"        throw new SemanticException(""Operator "" + operator.getName() + "" (ID: "" +"
117542,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/lineage/OpProcFactory.java,80,,"  @SuppressWarnings(""unchecked"")"
117543,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java,987,,"      String issue = ""exception: "" + VectorizationContext.getStackTraceAsSingleLine(e);"
117544,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java,2564,,"      setNodeIssue(""Operator "" + op.getType() + "" not supported"");"
117545,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java,164,,"          LOG.debug(""[0] STATS-"" + tsop.toString() + "" ("" + table.getTableName() + ""): "" +"
117546,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java,231,,"            LOG.debug(""[1] STATS-"" + sop.toString() + "": "" + parentStats.extendedToString());"
117547,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java,1436,,"        LOG.debug(""STATS-"" + gop.toString() + "": inputSize: "" + inputSize + "" maxSplitSize: "" +"
117548,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/stats/annotation/StatsRulesProcFactory.java,1481,,"                LOG.debug(""[Case 4] STATS-"" + gop.toString() + "": cardinality: "" + cardinality);"
117549,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/optimizer/topnkey/TopNKeyPushdownProcessor.java,167,,"      LOG.debug(""Removing {} above {}"", topNKey.getName(), groupBy.getName());"
117550,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java,2703,,"            LOG.warn(""Duplicates detected when adding columns to RR: see previous message"");"
117551,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/ColumnStatsSemanticAnalyzer.java,253,,"        rewrittenQueryBuilder.append("" , "");"
117552,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/MergeSemanticAnalyzer.java,359,,"    rewrittenQueryStr.append(""INSERT INTO "").append(tableName)"
117553,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/MergeSemanticAnalyzer.java,456,,"      rewrittenQueryStr.append("" AND "").append(extraPredicate);"
117554,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,629,,"  @SuppressWarnings(""nls"")"
117555,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,1213,,"    String inputFormat = conf.getVar(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(""tez"") ?"
117556,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,2110,,"              "" detected (cycle: "" + StringUtils.join(ctesExpanded, "" -> "") +"
117557,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,2731,,"  @SuppressWarnings(""rawtypes"")"
117558,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,3767,,"                  + tmp[1] + "" => "" + oColInfo + "" due to duplication, see previous warnings"","
117559,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,7286,,"            + "" from "" + destinationPath);"
117560,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java,8370,,"    conf.set(AcidUtils.CONF_ACID_KEY, ""true"");"
117561,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java,374,,"            + OperatorUtils.getOpNamePretty(victimRS) + "" - "" + OperatorUtils.getOpNamePretty(victimTS));"
117562,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/events/AlterTableHandler.java,104,,"      LOG.info(""Table "" + newName + "" is added for bootstrap "" + "" during rename from "" + oldName);"
117563,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/log/state/RangerDumpEnd.java,30,,"  @SuppressFBWarnings(""URF_UNREAD_FIELD"")"
117564,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/log/state/AtlasLoadEnd.java,28,,"  @SuppressFBWarnings(""URF_UNREAD_FIELD"")"
117565,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/log/state/RangerLoadBegin.java,30,,"  @SuppressFBWarnings(""URF_UNREAD_FIELD"")"
117566,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/log/state/RangerLoadEnd.java,31,,"  @SuppressFBWarnings(""URF_UNREAD_FIELD"")"
117567,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/plan/JoinCondDesc.java,167,,"        join.put(""type"", ""Inner"");"
117568,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/plan/VectorPTFDesc.java,224,,"        throw new RuntimeException(""Unexpected column vector type "" + columnVectorType + "" for "" + functionType);"
117569,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/plan/VectorPTFDesc.java,224,,"        throw new RuntimeException(""Unexpected column vector type "" + columnVectorType + "" for "" + functionType);"
117570,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/ppd/OpProcFactory.java,169,,"      LOG.debug(""Processing for {}"", nd.toString());"
117571,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/CryptoProcessor.java,56,,"    CREATE_KEY_OPTIONS.addOption(OptionBuilder.hasArg().withLongOpt(""keyName"").isRequired().create());"
117572,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/ErasureProcessor.java,173,,"      writeTestOutput(""Error parsing options for "" + command + "" "" + pe.getMessage());"
117573,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/ErasureProcessor.java,175,,"      writeTestOutput(""Caught exception running "" + command + "": "" + e.getMessage());"
117574,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/ErasureProcessor.java,176,,"      throw new Exception(""Cannot run "" + command + "": "" + e.getMessage(), e);"
117575,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/ErasureProcessor.java,205,,"      String policyOptionName = ""policy"";"
117576,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/LlapClusterResourceProcessor.java,116,,"    sch.addToFieldSchemas(new FieldSchema(""applicationId"", ""string"", """"));"
117577,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/SetProcessor.java,93,,"    sortedMap.put(""silent"", (ss.getIsSilent() ? ""on"" : ""off""));"
117578,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/processors/SetProcessor.java,146,,"      ss.out.println(s + "" is a hidden config"");"
117579,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/BitSetCheckedAuthorizationProvider.java,120,,"    if (table.getParameters().get(""PARTITION_LEVEL_PRIVILEGE"") == null || (""FALSE"""
117580,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java,114,,"    LOG.info(""Current user : "" + currentUserName + "", Current Roles : "" + currentRoles);"
117581,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java,257,,"      throw new HiveAccessControlException(""Current user : "" + currentUserName+ "" is not"""
117582,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/stats/BasicStatsTask.java,282,,"          console.printInfo(""Table "" + tableFullName + "" stats: ["" + toString(p.getPartParameters()) + ']');"
117583,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/MinorQueryCompactor.java,79,,"    Util.cleanupEmptyDir(conf, AcidUtils.DELTA_PREFIX + tmpTableName + ""_result"");"
117584,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/QueryCompactor.java,111,,"              compactionInfo.isMajorCompaction() ? ""major"" : ""minor"", query);"
117585,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/QueryCompactor.java,111,,"              compactionInfo.isMajorCompaction() ? ""major"" : ""minor"", query);"
117586,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFBinarySetFunctions.java,69,,"  @Description(name = ""regr_sxx"", value = ""_FUNC_(y,x) - auxiliary analytic function"", extended = ""The function takes as arguments any pair of numeric types and returns a double.\n"""
117587,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFBinarySetFunctions.java,70,,"      + ""Any pair with a NULL is ignored.\n"""
117588,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFBinarySetFunctions.java,71,,"      + ""If applied to an empty set: NULL is returned.\n"""
117589,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFBinarySetFunctions.java,72,,"      + ""Otherwise, it computes the following:\n"""
117590,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFBinarySetFunctions.java,417,,"          + parameters[0].getTypeName() + "" is passed."");"
117591,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,166,,"        countNullsField = soi.getStructFieldRef(""countnulls"");"
117592,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,178,,"      fname.add(""columntype"");"
117593,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,365,,"        ndvField = soi.getStructFieldRef(""bitvector"");"
117594,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,760,,"        maxLengthField = soi.getStructFieldRef(""maxlength"");"
117595,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,763,,"        sumLengthField = soi.getStructFieldRef(""sumlength"");"
117596,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFComputeStats.java,766,,"        countField = soi.getStructFieldRef(""count"");"
117597,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFContextNGrams.java,117,,"      throw new UDFArgumentTypeException(2, ""Only integers are accepted but """
117598,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFCorrelation.java,88,,"          + parameters[0].getTypeName() + "" is passed."");"
117599,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFCovariance.java,75,,"          + parameters[0].getTypeName() + "" is passed."");"
117600,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFCovarianceSample.java,56,,"          + parameters[0].getTypeName() + "" is passed."");"
117601,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFPercentileApprox.java,80,,"          + pc + "" was passed instead."");"
117602,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFSum.java,168,,"        throw new HiveException(""Distinct windowing UDAF doesn't support merge and terminatePartial"");"
117603,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFnGrams.java,102,,"      throw new UDFArgumentTypeException(1, ""Only integers are accepted but """
117604,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java,304,,"          + getArgOrder(i) + "" argument, got "" + oiCat);"
117605,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java,85,,"          + "" of function FORMAT_NUMBER must be \"""""
117606,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java,87,,"          + "" or \"""" + serdeConstants.SMALLINT_TYPE_NAME + ""\"""""
117607,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java,92,,"          + "" or \"""" + serdeConstants.DECIMAL_TYPE_NAME + ""\"", but \"""""
117608,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java,93,,"          + arguments[0].getTypeName() + ""\"" was found."");"
117609,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTrunc.java,76,,"        + "" > SELECT _FUNC_('2009-02-12', 'MM');\n"" + ""OK\n"" + "" '2009-02-01'"" + ""\n"""
117610,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWidthBucket.java,142,,"    Preconditions.checkArgument(numBuckets > 0, ""numBuckets in width_bucket function must be above 0"");"
117611,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFWidthBucket.java,143,,"    Preconditions.checkArgument(maxValue != minValue, ""maxValue cannot be equal to minValue in width_bucket function"");"
117612,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NGramEstimator.java,172,,"            + "", which usually is caused by a non-constant expression. Found '""+n+""' and '"""
117613,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NGramEstimator.java,172,,"            + "", which usually is caused by a non-constant expression. Found '""+n+""' and '"""
117614,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/DependencyResolver.java,119,,"      if (mapPair[0].equals(""exclude"")) {"
117615,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/DirectionUtils.java,38,,"      ""code"", ASCENDING_CODE,"
117616,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/DirectionUtils.java,39,,"      ""sign"", '+',"
117617,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/HiveStrictManagedMigration.java,325,,"      .withLongOpt(""shouldMoveExternal"")"
117618,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/HiveStrictManagedMigration.java,655,,"              + "" Disabling shouldModifyManagedTableLocation and shouldMoveExternal"","
117619,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/UpgradeTool.java,530,,"        convertToAcid.add(""ALTER TABLE "" + Warehouse.getQualifiedName(t) + "" SET TBLPROPERTIES ("" +"
117620,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/util/UpgradeTool.java,530,,"        convertToAcid.add(""ALTER TABLE "" + Warehouse.getQualifiedName(t) + "" SET TBLPROPERTIES ("" +"
117621,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/wm/ExpressionFactory.java,77,,"            throw new IllegalArgumentException(""Illegal value for counter limit. Expected a positive long value."");"
117622,./TargetProjects/hive/ql/src/java/org/apache/hadoop/hive/ql/wm/ExpressionFactory.java,80,,"          throw new IllegalArgumentException(""Invalid counter value: "" + counterValueStr);"
117623,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/TestMetastoreExpr.java,153,,"    addPartition(client, tbl, Lists.newArrayList(""__HIVE_DEFAULT_PARTITION__"", ""36""), ""part5"");"
117624,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,90,,"    CompactionRequest rqst = new CompactionRequest(""foo"", ""bar"", CompactionType.MINOR);"
117625,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,90,,"    CompactionRequest rqst = new CompactionRequest(""foo"", ""bar"", CompactionType.MINOR);"
117626,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,91,,"    rqst.setPartitionname(""ds=today"");"
117627,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,94,,"    CompactionInfo ci = txnHandler.findNextToCompact(""fred"", WORKER_VERSION);"
117628,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,113,,"    assertEquals(""working"", c.getState());"
117629,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,126,,"    rqst.setPartitionname(""ds=yesterday"");"
117630,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,267,,"    final String errorMessage = ""Dummy error"";"
117631,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,520,,"    addFailedCompaction(dbName, tableName, CompactionType.MAJOR, part1, ""message"");"
117632,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,668,,"        ""mydb"");"
117633,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,669,,"    comp.setTablename(""mytable"");"
117634,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestCompactionTxnHandler.java,679,,"    LockRequest req = new LockRequest(components, ""me"", ""localhost"");"
117635,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,143,,"    assertEquals(""localhost"", txnsInfo.getOpen_txns().get(1).getHostname());"
117636,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,168,,"    AllocateTableWriteIdsRequest rqst = new AllocateTableWriteIdsRequest(""default"", ""T"");"
117637,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,320,,"    LockComponent comp = new LockComponent(LockType.EXCLUSIVE, LockLevel.DB, ""mydb"");"
117638,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,328,,"    comp = new LockComponent(LockType.EXCLUSIVE, LockLevel.DB, ""yourdb"");"
117639,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,370,,"    comp.setTablename(""mytable"");"
117640,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,413,,"    comp.setTablename(""yourtable"");"
117641,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,457,,"    comp.setPartitionname(""mypartition=myvalue"");"
117642,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,1299,,"    CompactionRequest rqst = new CompactionRequest(""foo"", ""bar"", CompactionType.MAJOR);"
117643,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,1299,,"    CompactionRequest rqst = new CompactionRequest(""foo"", ""bar"", CompactionType.MAJOR);"
117644,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,1300,,"    rqst.setPartitionname(""ds=today"");"
117645,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,1496,,"                        "" msg is <"" + e.getMessage() + "">"");"
117646,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandler.java,1746,,"    List<Long> targetTxnList = replOpenTxnForTest(startTxnId, numTxn, ""destdb.*"");"
117647,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,86,,"    runStatementOnDriver(""drop table if exists T"");"
117648,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,87,,"    runStatementOnDriver(""drop table if exists Tstage"");"
117649,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,94,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117650,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,94,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117651,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,98,,"        "" PARTITION (p=0) location '"" + getWarehouseDir() + ""/1/data'"" +"
117652,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,106,,"            ""warehouse/t/p=0/delta_0000001_0000001_0000/000000_0""},"
117653,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,110,,"            ""warehouse/t/p=1/delta_0000001_0000001_0000/000000_0""},"
117654,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,118,,"        runStatementOnDriverNegative(""ALTER TABLE T ADD PARTITION (p=0) location '"" + getWarehouseDir() + ""/3/data'"");"
117655,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,118,,"        runStatementOnDriverNegative(""ALTER TABLE T ADD PARTITION (p=0) location '"" + getWarehouseDir() + ""/3/data'"");"
117656,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,138,,"            ""warehouse/t/p=3/delta_0000003_0000003_0000/000000_0""},"
117657,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnAddPartition.java,230,,"            ""warehouse/t/p=0/delta_0000001_0000001_0000/000001_0""},"
117658,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,121,,"    runStatementOnDriver(""create table "" + Table.NONACIDORCTBL2 + ""3(a int, b int) clustered by (a) into "" + BUCKET_COUNT + "" buckets stored as orc TBLPROPERTIES ('transactional'='false')"");"
117659,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,122,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + "" values(1,2)"");"
117660,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,139,,"    runStatementOnDriver(""insert into "" + Table.NONACIDORCTBL + ""(a,b) values(1,2)"");"
117661,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,140,,"    List<String> rs = runStatementOnDriver(""select a,b from "" + Table.NONACIDORCTBL);"
117662,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,173,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + ""(a,b) "" + makeValuesClause(rows1));"
117663,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,176,,"    runStatementOnDriver(""START TRANSACTION"");"
117664,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,181,,"    List<String> rs0 = runStatementOnDriver(""select a,b from "" + Table.ACIDTBL + "" order by a,b"");"
117665,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,188,,"    Assert.assertEquals(""Error didn't match: "" + e,"
117666,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,196,,"    String tableName = ""mm_table"", importName = tableName + ""_import"";"
117667,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,197,,"    runStatementOnDriver(""drop table if exists "" + tableName);"
117668,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,199,,"        ""TBLPROPERTIES ('transactional'='true', 'transactional_properties'='insert_only')"","
117669,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,209,,"    org.apache.hadoop.hive.metastore.api.Table table = msClient.getTable(""default"", tableName);"
117670,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,316,,"      queries[i] = String.format(""insert into %s (a) values ("" + i + "")"", tableName);"
117671,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,336,,"    runStatementOnDriver(String.format(""analyze table %s compute statistics for columns"", tableName));"
117672,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,396,,"    String validWriteIds = msClient.getValidWriteIds(""default."" + tableName).toString();"
117673,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,591,,"    runStatementOnDriver(""start transaction"");"
117674,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,595,,"    CommandProcessorException e2 = runStatementOnDriverNegative(""update "" + Table.ACIDTBL + "" set a = 1 where b != 1"");"
117675,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,601,,"    CommandProcessorException e3 = runStatementOnDriverNegative(""commit""); //not allowed in w/o tx"
117676,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,614,,"    Assert.assertEquals(""Can't see my own write"", 1, rs0.size());"
117677,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,623,,"    List<String> rs = runStatementOnDriver(""select * from "" + Table.ACIDTBL);"
117678,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,685,,"    runStatementOnDriver(""delete from "" + Table.ACIDTBL + "" where b = 2"");"
117679,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,697,,"    Assert.assertEquals(""Content didn't match rs0"", stringifyValues(rows1), rs0);"
117680,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,702,,"    Assert.assertEquals(""Wrong data after delete"", stringifyValues(updatedData2), rs3);"
117681,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,705,,"    Assert.assertEquals(""Wrong data after commit"", stringifyValues(updatedData2), rs4);"
117682,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,929,,"    runStatementOnDriver(""merge into "" + target + "" as `d/8` using "" + src + "" as `a/b` on i=gh "" +"
117683,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,929,,"    runStatementOnDriver(""merge into "" + target + "" as `d/8` using "" + src + "" as `a/b` on i=gh "" +"
117684,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,929,,"    runStatementOnDriver(""merge into "" + target + "" as `d/8` using "" + src + "" as `a/b` on i=gh "" +"
117685,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,930,,"        ""\nwhen matched and i > 5 then delete "" +"
117686,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1046,,"        "" as t using "" + Table.NONACIDORCTBL + "" s ON t.a = s.a "" +"
117687,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1046,,"        "" as t using "" + Table.NONACIDORCTBL + "" s ON t.a = s.a "" +"
117688,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1049,,"        ""WHEN NOT MATCHED THEN INSERT VALUES(s.a, s.b) "";"
117689,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1074,,"        Assert.assertTrue(""At i+1="" + (i+1) + explain.get(i + 1),"
117690,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1098,,"        ""WHEN MATCHED AND s.a < 3 THEN update set b = 0 "" + //updates (2,1) -> (2,0)"
117691,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1265,,"        {""{\""writeid\"":0,\""bucketid\"":536936448,\""rowid\"":0}\t1\t2"", ""nonacidorctbl/base_10000001_v0000019/bucket_00001""},"
117692,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java,1395,,"      Assert.fail(""Expecting 1 base and found "" + stat.length + "" files "" + Arrays.toString(stat));"
117693,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,126,,"    setUpWithTableProperties(""'transactional'='true'"");"
117694,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,134,,"        + File.separator + ""mapred"" + File.separator + ""local"");"
117695,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,171,,"    runStatementOnDriver(""create table "" + Table.ACIDTBL + ""(a int, b int) clustered by (a) into "" + BUCKET_COUNT + "" buckets stored as orc TBLPROPERTIES ("" + tableProperties + "")"");"
117696,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,185,,"      runStatementOnDriver(""drop table if exists "" + t);"
117697,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,222,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + ""(a,b) "" + makeValuesClause(new int[][]{{1, 2}, {3, 4}}));"
117698,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,222,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + ""(a,b) "" + makeValuesClause(new int[][]{{1, 2}, {3, 4}}));"
117699,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,224,,"    String query = ""update "" + Table.ACIDTBL + "" set b = 5 where a = 3"";"
117700,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,239,,"      assertExplainHasString(""filterExpr: (a = 3)"", explain, ""PPD wasn't pushed"");"
117701,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,243,,"    query = ""select a,b from "" + Table.ACIDTBL + "" where b = 4 order by a,b"";"
117702,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,254,,"    runStatementOnDriver(""alter table "" + Table.ACIDTBL + "" compact 'MAJOR'"");"
117703,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,254,,"    runStatementOnDriver(""alter table "" + Table.ACIDTBL + "" compact 'MAJOR'"");"
117704,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,264,,"    runStatementOnDriver(""delete from "" + Table.ACIDTBL + "" where a=7 and b=8"");"
117705,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,308,,"    runStatementOnDriver(""insert into "" + Table.NONACIDORCTBL + ""(a,b) values(1,2)"");"
117706,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,324,,"    List<String> rs = runStatementOnDriver(""select a,b from "" + Table.NONACIDORCTBL + "" order by a,b"");"
117707,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,379,,"        {""{\""writeid\"":0,\""bucketid\"":536936448,\""rowid\"":2}\t0\t13"",  ""bucket_00001""},"
117708,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,443,,"      Assert.assertTrue(status[i].getPath().getName().matches(""00000[01]_0""));"
117709,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,448,,"    rs = runStatementOnDriver(""select count(*) from "" + Table.NONACIDORCTBL);"
117710,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,469,,"    runStatementOnDriver(""insert into "" + Table.NONACIDORCTBL + ""(a,b) values(3,4)"");"
117711,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,477,,"      if (status[i].getPath().getName().matches(""delta_.*"")) {"
117712,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,504,,"      if (status[i].getPath().getName().matches(""base_.*"")) {"
117713,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,878,,"    runStatementOnDriver(""select * from "" + Table.NONACIDORCTBL);"
117714,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,935,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p=1) (a,b) "" + makeValuesClause(tableData));"
117715,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,937,,"    CompactionRequest request = new CompactionRequest(""default"", Table.ACIDTBLPART.name(), CompactionType.MAJOR);"
117716,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,946,,"    List<String> rs = runStatementOnDriver(""select p,a,b from "" + Table.ACIDTBLPART + "" order by p, a, b"");"
117717,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,946,,"    List<String> rs = runStatementOnDriver(""select p,a,b from "" + Table.ACIDTBLPART + "" order by p, a, b"");"
117718,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,989,,"    runStatementOnDriver(""insert overwrite table "" + Table.NONACIDORCTBL + "" select 2, 9 from "" + Table.NONACIDORCTBL + "" T inner join "" + Table.NONACIDORCTBL + "" S on T.a=S.a"");"
117719,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1025,,"    runStatementOnDriver(""CREATE TABLE "" + tblName + ""(a INT, b STRING) "" +"
117720,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1025,,"    runStatementOnDriver(""CREATE TABLE "" + tblName + ""(a INT, b STRING) "" +"
117721,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1238,,"      runStatementOnDriver(""select a,b from "" + tblName + "" order by a""));"
117722,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1323,,"    runStatementOnDriver(""alter table ""+ Table.ACIDTBL + "" compact 'MINOR'"");"
117723,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1439,,"    runStatementOnDriver(""INSERT INTO "" + tblName + "" VALUES (1, 'foo'), (2, 'bar')"");"
117724,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1442,,"    runStatementOnDriver(""ALTER TABLE "" + tblName + "" COMPACT 'MAJOR'"");"
117725,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1461,,"    runStatementOnDriver(""insert into "" + Table.NONACIDPART2 + "" PARTITION(p2='odd') "" + makeValuesClause(sourceValsOdd));"
117726,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1525,,"    String query = ""merge into "" + Table.ACIDTBL +"
117727,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,1526,,"      "" using "" + Table.NONACIDPART2 + "" source ON "" + Table.ACIDTBL + "".a = a2 and b + 1 = source.b2 + 1 "" +"
117728,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2063,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(hiveConf, ""select * from TXN_TO_WRITE_ID"" + acidTblWhereClause),"
117729,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2064,,"            3, TestTxnDbUtil.countQueryAgent(hiveConf, ""select count(*) from TXN_TO_WRITE_ID"" + acidTblWhereClause));"
117730,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2162,,"    runStatementOnDriver(""insert into "" + Table.MMTBL + ""(a,b) values(5,6)"");"
117731,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2269,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(1,1,'p1'),(2,2,'p1')"");"
117732,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2270,,"    verifyDeltaDirAndResult(1, Table.ACIDTBLPART.toString(), ""p=p1"", resultData);"
117733,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2274,,"    runStatementOnDriverWithAbort(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(3,3,'p1'),(4,4,'p1')"");"
117734,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2281,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(hiveConf, ""select * from TXN_COMPONENTS""), 1, count);"
117735,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2286,,"    count = TestTxnDbUtil.countQueryAgent(hiveConf, ""select count(*) from COMPACTION_QUEUE"");"
117736,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2289,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(hiveConf, ""select * from COMPACTION_QUEUE""), 1, count);"
117737,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2303,,"    verifyDeltaDirAndResult(1, Table.ACIDTBLPART.toString(), ""p=p2"", resultData);"
117738,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2356,,"        .countQueryAgent(hiveConf, ""select count(*) from TXN_COMPONENTS where TC_OPERATION_TYPE='u'"");"
117739,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2649,,"    verifyDeltaDirAndResult(2, Table.ACIDTBLPART.toString(), ""p=p3"", resultData1);"
117740,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2665,,"    Assert.assertEquals(TestTxnDbUtil.countQueryAgent(hiveConf, ""select count(*) from TXN_COMPONENTS""), 6);"
117741,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2748,,"    runStatementOnDriver(""DROP TABLE IF EXISTS "" + tableName);"
117742,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java,2749,,"    runStatementOnDriver(""CREATE TABLE "" + tableName + "" (a INT, b STRING) CLUSTERED BY (a) INTO "" + BUCKET_COUNT + "" BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')"");"
117743,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,184,,"    Assert.assertEquals(""Unexpected number of compactions in history"","
117744,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,207,,"    runStatementOnDriver(""create table T (a int, b int) stored as orc"");"
117745,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,216,,"    List<String> rs = runStatementOnDriver(""select a, b from T order by a, b"");"
117746,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,311,,"    runStatementOnDriver(""insert into T values(0,2)"");//makes delta_1_1 in T1"
117747,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,312,,"    runStatementOnDriver(""insert into T values(1,4)"");//makes delta_2_2 in T2"
117748,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,340,,"    runStatementOnDriver(""alter table T compact 'minor'"");//T4"
117749,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands3.java,574,,"    assertTableIsEmpty(""TXN_COMPONENTS"");"
117750,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,100,,"    runStatementOnDriver(""create table "" + TableExtended.NONACIDPART + ""(a int, b int) partitioned by (p string) stored as orc TBLPROPERTIES ('transactional'='false')"");"
117751,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,130,,"    runStatementOnDriver(""insert into "" + TableExtended.MMTBL + ""(a,b) values(1,2)"");"
117752,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,130,,"    runStatementOnDriver(""insert into "" + TableExtended.MMTBL + ""(a,b) values(1,2)"");"
117753,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,131,,"    runStatementOnDriver(""insert into "" + TableExtended.MMTBL + ""(a,b) values(3,4)"");"
117754,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,137,,"      Assert.assertTrue(status[i].getPath().getName().matches(""delta_.*""));"
117755,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,144,,"    runStatementOnDriver(""insert overwrite table "" + TableExtended.MMTBL + "" select a,b from "" + Table.NONACIDORCTBL);"
117756,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,144,,"    runStatementOnDriver(""insert overwrite table "" + TableExtended.MMTBL + "" select a,b from "" + Table.NONACIDORCTBL);"
117757,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,164,,"    List<String> rs = runStatementOnDriver(""select a,b from "" + TableExtended.MMTBL + "" order by a,b"");"
117758,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,164,,"    List<String> rs = runStatementOnDriver(""select a,b from "" + TableExtended.MMTBL + "" order by a,b"");"
117759,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,182,,"    runStatementOnDriver(""insert into "" + TableExtended.MMTBLPART + "" PARTITION(p='odd') "" + makeValuesClause(valuesOdd));"
117760,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,183,,"    runStatementOnDriver(""insert into "" + TableExtended.MMTBLPART + "" PARTITION(p='even') "" + makeValuesClause(valuesEven));"
117761,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,232,,"          Assert.assertTrue(baseDirs[h].matches(""base_.*""));"
117762,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,253,,"    runStatementOnDriver(""alter table ""+ TableExtended.MMTBLPART + "" PARTITION(p='odd') "" + "" compact 'MAJOR'"" );"
117763,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,253,,"    runStatementOnDriver(""alter table ""+ TableExtended.MMTBLPART + "" PARTITION(p='odd') "" + "" compact 'MAJOR'"" );"
117764,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommandsForMmTable.java,607,,"      Assert.fail(""Expecting 1 base and found "" + stat.length + "" files "" + Arrays.toString(stat));"
117765,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnConcatenate.java,52,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + "" values(1,2),(4,5)"");"
117766,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnConcatenate.java,57,,"        {""{\""writeid\"":2,\""bucketid\"":536936448,\""rowid\"":0}\t1\t4"","
117767,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnConcatenate.java,61,,"        {""{\""writeid\"":3,\""bucketid\"":536936448,\""rowid\"":0}\t5\t6"","
117768,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnConcatenate.java,82,,"            ""acidtbl/base_0000003_v0000019/bucket_00001""},"
117769,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnConcatenate.java,163,,"        {""1\t2"", ""t/base_0000002_v0000020/000000_0""},"
117770,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,66,,"    runStatementOnDriver(""drop table if exists TImport "");"
117771,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,75,,"    Assert.assertEquals(""Content didn't match rs"", stringifyValues(rows1), rs);"
117772,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,77,,"    String exportStmt = ""export table "" + tblName + "" to '"" + getTestDataDir() + ""/export'"";"
117773,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,87,,"    runStatementOnDriver(""import table TImport from '"" + getTestDataDir() + ""/export'"");"
117774,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,88,,"    List<String> rs1 = runStatementOnDriver(""select * from TImport order by a, b"");"
117775,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,98,,"    runStatementOnDriver(""drop table if exists T"");"
117776,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,309,,"    runStatementOnDriver(""drop table if exists Tstage"");"
117777,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,318,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117778,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,318,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117779,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,322,,"    runStatementOnDriver(""import table T from '"" + getWarehouseDir() + ""/1'"");"
117780,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,328,,"            ""t/delta_0000001_0000001_0000/000000_0""},"
117781,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,365,,"    runStatementOnDriver(""create table Tstage (a int, b int) partitioned by (p int) stored"" +"
117782,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,455,,"    runStatementOnDriver(""insert into Tstage"" + TestTxnCommands2.makeValuesClause(data));"
117783,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnExIm.java,473,,"    Assert.assertEquals(""reading imported data"","
117784,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,97,,"    runStatementOnDriver(""drop table if exists T"");"
117785,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,98,,"    runStatementOnDriver(""drop table if exists Tstage"");"
117786,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,100,,"      ""create table T (a int, b int) stored as orc tblproperties('transactional'='true')"");"
117787,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,102,,"    runStatementOnDriver(""create table Tstage (a int, b int) stored as orc tblproperties('transactional'='false')"");"
117788,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,103,,"    runStatementOnDriver(""insert into Tstage values(1,2),(3,4)"");"
117789,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,105,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117790,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,105,,"    runStatementOnDriver(""export table Tstage to '"" + getWarehouseDir() + ""/1'"");"
117791,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,107,,"    runStatementOnDriver(""truncate table Tstage"");"
117792,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,110,,"    runStatementOnDriver(""load data local inpath '"" + getWarehouseDir() + ""/1/data' into table T"");"
117793,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,110,,"    runStatementOnDriver(""load data local inpath '"" + getWarehouseDir() + ""/1/data' into table T"");"
117794,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,112,,"    String testQuery = isVectorized ? ""select ROW__ID, a, b from T order by ROW__ID"" :"
117795,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,113,,"      ""select ROW__ID, a, b, INPUT__FILE__NAME from T order by ROW__ID"";"
117796,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,115,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2"", ""t/delta_0000001_0000001_0000/000000_0""},"
117797,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,115,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2"", ""t/delta_0000001_0000001_0000/000000_0""},"
117798,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,116,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":1}\t3\t4"", ""t/delta_0000001_0000001_0000/000000_0""}};"
117799,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,117,,"    checkResult(expected, testQuery, isVectorized, ""load data inpath"");"
117800,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,121,,"        {""{\""writeid\"":2,\""bucketid\"":536870912,\""rowid\"":0}\t1\t17"", ""t/delta_0000002_0000002_0000/bucket_00000_0""}"
117801,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,129,,"        {""{\""writeid\"":3,\""bucketid\"":536870912,\""rowid\"":0}\t2\t2"", ""t/delta_0000003_0000003_0000/bucket_00000_0""}"
117802,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,149,,"        {""{\""writeid\"":5,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2"", ""t/base_0000005/000000_0""},"
117803,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,173,,"    runStatementOnDriver(""alter table T compact 'major'"");"
117804,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,202,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t0\t2"", ""t/delta_0000001_0000001_0000/bucket_00000_0""},"
117805,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,213,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t0\t2"", ""t/delta_0000001_0000002_v0000024/bucket_00000""},"
117806,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,225,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t0\t2"", ""t/base_0000003_v0000028/bucket_00000""},"
117807,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,365,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t0\t0\t2"", ""t/p=0/delta_0000001_0000001_0000/000000_0""},"
117808,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnLoadData.java,457,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2"", ""t/base_0000001_v0000022/bucket_00000""},"
117809,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,82,,"    runStatementOnDriver(""insert into tmp "" + makeValuesClause(sourceVals1));"
117810,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,100,,"    Assert.assertTrue(rs.get(0), rs.get(0).endsWith(NO_BUCKETS_TBL_NAME + ""/delta_0000001_0000001_0000/bucket_00000_0""));"
117811,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,104,,"    Assert.assertTrue(rs.get(2), rs.get(2).endsWith(NO_BUCKETS_TBL_NAME + ""/delta_0000001_0000001_0000/bucket_00001_0""));"
117812,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,171,,"        {""{\""writeid\"":2,\""bucketid\"":536870912,\""rowid\"":0}\t0\t0\t17"", NO_BUCKETS_TBL_NAME + ""/base_0000002_v0000024/bucket_00000""},"
117813,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,172,,"        {""{\""writeid\"":2,\""bucketid\"":536936448,\""rowid\"":0}\t1\t1\t17"", NO_BUCKETS_TBL_NAME + ""/base_0000002_v0000024/bucket_00001""},"
117814,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,252,,"    runStatementOnDriver(""insert into "" + Table.NONACIDORCTBL +  makeValuesClause(values));"
117815,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,254,,"      ""'='true', 'transactional_properties'='default') as select a, b from "" + Table.NONACIDORCTBL);"
117816,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,268,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2"", ""warehouse/myctas2/delta_0000001_0000001_0000/bucket_00000""},"
117817,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,313,,"    hiveConf.setVar(HiveConf.ConfVars.HIVEFETCHTASKCONVERSION, ""none"");"
117818,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,318,,"    runStatementOnDriver(""drop table if exists T"");"
117819,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,336,,"    runStatementOnDriver(""insert into T(a,b) select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 1 and 3 group by a, b union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 5 and 7 union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a >= 9"");"
117820,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,336,,"    runStatementOnDriver(""insert into T(a,b) select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 1 and 3 group by a, b union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 5 and 7 union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a >= 9"");"
117821,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,336,,"    runStatementOnDriver(""insert into T(a,b) select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 1 and 3 group by a, b union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a between 5 and 7 union all select a, b from "" + TxnCommandsBaseForTests.Table.ACIDTBL + "" where a >= 9"");"
117822,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,395,,"        {""1\t2"",  ""warehouse/t/000002_0""},"
117823,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,397,,"        {""5\t6"",  ""warehouse/t/000000_0""},"
117824,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,400,,"        {""12\t12"", ""warehouse/t/000000_0_copy_1""}"
117825,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,419,,"        {""10\t20"", ""warehouse/t/HIVE_UNION_SUBDIR_15/000000_0""},"
117826,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,430,,"    rs = runStatementOnDriver(""select ROW__ID, a, b, INPUT__FILE__NAME from T order by a, b, INPUT__FILE__NAME"");"
117827,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,474,,"    runStatementOnDriver(""alter table T compact 'major'"");"
117828,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,485,,"            ""warehouse/t/base_10000002_v0000028/bucket_00000""},"
117829,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,570,,"            ""bucket_00000"", ""000000_0_copy_1""},"
117830,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,572,,"            ""bucket_00000"", ""bucket_00000_0""},"
117831,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,744,,"    Assert.assertEquals(""Unexpected number of compactions in history"", 1, resp.getCompactsSize());"
117832,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,745,,"    Assert.assertEquals(""Unexpected 0 compaction state"", TxnStore.CLEANING_RESPONSE, resp.getCompacts().get(0).getState());"
117833,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,746,,"    Assert.assertTrue(resp.getCompacts().get(0).getHadoopJobId().startsWith(""job_local""));"
117834,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,753,,"            ""warehouse/t/base_10000001_v0000028/bucket_00000""},"
117835,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,801,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t1\t4\t1"", ""t/p=1/q=1/delta_0000001_0000001_0000/bucket_00000_0""},"
117836,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,803,,"        {""{\""writeid\"":3,\""bucketid\"":536870912,\""rowid\"":0}\t1\t1\t5\t1"", ""t/p=1/q=1/delta_0000003_0000003_0000/bucket_00000_0""},"
117837,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java,823,,"        {""{\""writeid\"":1,\""bucketid\"":536870912,\""rowid\"":0}\t1\t2\t4\t2"", ""t/p=1/q=2/base_0000003_v0000019/bucket_00000""},"
117838,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TxnCommandsBaseForTests.java,109,,"        + File.separator + ""mapred"" + File.separator + ""local"");"
117839,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/TxnCommandsBaseForTests.java,142,,"    runStatementOnDriver(""create table "" + Table.ACIDTBL + ""(a int, b int) clustered by (a) into "" + BUCKET_COUNT + "" buckets stored as orc TBLPROPERTIES ('transactional'='true')"");"
117840,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/ddl/table/partition/show/TestShowPartitionAnalyzer.java,76,,"    rwsch.put(""tableBar"", ""ds"", new ColumnInfo(""ds"","
117841,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,140,,"      String[] srctables = {""src"", ""src2""};"
117842,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,142,,"      cols.add(""key"");"
117843,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,143,,"      cols.add(""value"");"
117844,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,217,,"  @SuppressWarnings(""unchecked"")"
117845,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,250,,"      outputColumns.add(""_col"" + i);"
117846,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,305,,"    cols.add(getStringColumn(Utilities.ReduceField.KEY + "".reducesinkkey"" + 0));"
117847,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExecDriver.java,366,,"        .getReduceSinkDesc(Utilities.makeList(getStringColumn(""tkey"")),"
117848,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExplainTask.java,98,,"    explainMap1.put(""/k1"", ""v"");"
117849,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExpressionEvaluator.java,86,,"      names.add(""col1"");"
117850,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExpressionEvaluator.java,87,,"      names.add(""cola"");"
117851,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestExpressionEvaluator.java,154,,"          .getFuncExprNodeDesc(""concat"", col11desc, cola0desc);"
117852,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestFunctionRegistry.java,168,,"    typeAffinity(""typeaffinity1"", TypeInfoFactory.shortTypeInfo, 1, DoubleWritable.class);"
117853,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestFunctionRegistry.java,211,,"    verify(TestUDF.class, ""same"", TypeInfoFactory.intTypeInfo, TypeInfoFactory.intTypeInfo,"
117854,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestGetInputSummary.java,102,,"    final Collection<Path> testPaths = Arrays.asList(new Path(""p1/test.txt""),"
117855,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestGetInputSummary.java,103,,"        new Path(""p2/test.txt""), new Path(""p3/test.txt""),"
117856,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestGetInputSummary.java,103,,"        new Path(""p2/test.txt""), new Path(""p3/test.txt""),"
117857,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestGetInputSummary.java,104,,"        new Path(""p4/test.txt""), new Path(""p5/test.txt""));"
117858,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestGetInputSummary.java,104,,"        new Path(""p4/test.txt""), new Path(""p5/test.txt""));"
117859,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestMsckCreatePartitionsInBatches.java,167,,"    Assert.assertEquals(String.format(""Unexpected batch size in retry attempt %d "", retryAttempt++),"
117860,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,97,,"    names.add(""col0"");"
117861,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,98,,"    names.add(""col1"");"
117862,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,151,,"          }, ""000005_0"", ""000005"");"
117863,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,187,,"      assertEquals(""value"", scriptOperator.safeEnvVarValue(""value"", ""name"", false));"
117864,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,187,,"      assertEquals(""value"", scriptOperator.safeEnvVarValue(""value"", ""name"", false));"
117865,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java,226,,"    HiveConf.setVar(hconf, HiveConf.ConfVars.HIVESCRIPT_ENV_BLACKLIST, ""foobar"");"
117866,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/TestUtilities.java,729,,"    FileStatus[] manifestFiles = generateTestNotEmptyFileStatuses(""000000_0.manifest"", ""000001_0.manifest"","
117867,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/errors/TestTaskLogProcessor.java,101,,"    HiveConf.setQueryString(jobConf, ""select * from foo group by moo;"");"
117868,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/persistence/TestPTFRowContainer.java,84,,"      row.add(new Text(""abc "" + i));"
117869,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestAtlasDumpTask.java,134,,"    AtlasRestClientBuilder atlasRestCleintBuilder = new AtlasRestClientBuilder(""http://localhost:31000"");"
117870,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestAtlasDumpTask.java,146,,"    when(exportRequest.toString()).thenReturn(""dummyExportRequest"");"
117871,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestAtlasDumpTask.java,194,,"    AtlasServer atlasServerRet = atlasClient.getServer(""src"", conf);"
117872,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerDumpTask.java,82,,"    Mockito.when(work.getDbName()).thenReturn(""testdb"");"
117873,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerDumpTask.java,83,,"    Mockito.when(work.getCurrentDumpPath()).thenReturn(new Path(""/tmp""));"
117874,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerDumpTask.java,84,,"    Mockito.when(work.getRangerConfigResource()).thenReturn(new URL(""file://ranger.xml""));"
117875,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,92,,"    Mockito.when(conf.get(RANGER_REST_URL)).thenReturn(""rangerEndpoint"");"
117876,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,93,,"    Mockito.when(work.getSourceDbName()).thenReturn(""srcdb"");"
117877,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,94,,"    Mockito.when(work.getTargetDbName()).thenReturn(""tgtdb"");"
117878,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,95,,"    Mockito.when(work.getRangerConfigResource()).thenReturn(new URL(""file://ranger.xml""));"
117879,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,176,,"    Mockito.when(conf.get(RANGER_HIVE_SERVICE_NAME)).thenReturn(""hive"");"
117880,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,235,,"      ""hive"", ""dbname"").equals(""http://ranger.apache.org:6080/service/plugins/"""
117881,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestRangerLoadTask.java,298,,"        .getResources().get(""database"");"
117882,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/TestReplDumpTask.java,113,,"    ReplScope replScope = new ReplScope(""default"");"
117883,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/ranger/TestRangerRestClient.java,81,,"    mockClient.checkConnection(""http://localhost:6080/ranger"", conf);"
117884,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/repl/util/TestFileList.java,68,,"          fileList.add(""someEntry"");"
117885,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/spark/TestSparkPlan.java,99,,"      Assert.assertTrue(reducerRdd.name().contains(""Reducer 2""));"
117886,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/spark/TestSparkPlan.java,120,,"      Assert.assertTrue(mapRdd.name().contains(""Map 1""));"
117887,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/spark/TestSparkUtilities.java,112,,"    Path mrPath = new Path(""hdfs:/tmp/.staging/"" + executionId + ""/-mr-10001"");"
117888,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestDynamicPartitionPruner.java,89,,"          InputInitializerEvent.create(""FakeTarget"", ""TargetInput"", ByteBuffer.allocate(0));"
117889,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestDynamicPartitionPruner.java,89,,"          InputInitializerEvent.create(""FakeTarget"", ""TargetInput"", ByteBuffer.allocate(0));"
117890,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestHostAffinitySplitLocationProvider.java,79,,"    InputSplit os1 = createMockFileSplit(true, ""path1"", 0, 1000, new String[] {locations.get(0), locations.get(1)});"
117891,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java,75,,"      conf.set(""tez.queue.name"", ""nondefault"");"
117892,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java,188,,"      Mockito.when(session.getQueueName()).thenReturn(""default"");"
117893,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java,201,,"      conf.set(""tez.queue.name"", ""tezq1"");"
117894,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTask.java,315,,"    assertEquals(""Unexpected maximum heap size"", -1, heapSize);"
117895,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTotalOrderPartitioner.java,84,,"    testStrings.add(new Check<HiveKey>(new HiveKey(""aaaaa"".getBytes()), 0));"
117896,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,270,,"    WorkloadManager wm = new WorkloadManagerForTest(""test"", conf, 1, qam);"
117897,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,275,,"    TezSessionState session = wm.getSession(nonPool, mappingInput(""user""), conf);"
117898,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,403,,"    verifyMapping(wm, conf, mappingInput(""u0"", groups(""zzz"")), ""u0"");"
117899,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,828,,"      fail(""Expected an error but got "" + r);"
117900,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,1005,,"      pool(""A"", 1, 0.4f), pool(""B"", 1, 0.4f), pool(""B.x"", 1, 0.2f),"
117901,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestWorkloadManager.java,1006,,"      pool(""B.y"", 1, 0.8f), pool(""C"", 1, 0.2f)));"
117902,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/util/rowobjects/RowTestObjectsMultiSet.java,127,,"      System.out.println(""*BENCHMARK* "" + left + "" count "" + thisSize + "" doesn't match "" + right + "" "" + otherSize);"
117903,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/util/rowobjects/RowTestObjectsMultiSet.java,127,,"      System.out.println(""*BENCHMARK* "" + left + "" count "" + thisSize + "" doesn't match "" + right + "" "" + otherSize);"
117904,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,134,,"      case ""count"":"
117905,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,137,,"      case ""min"":"
117906,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,140,,"      case ""max"":"
117907,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,143,,"      case ""sum"":"
117908,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,146,,"      case ""avg"":"
117909,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,149,,"      case ""variance"":"
117910,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,151,,"      case ""var_pop"":"
117911,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,154,,"      case ""var_samp"":"
117912,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,157,,"      case ""std"":"
117913,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,158,,"      case ""stddev"":"
117914,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,162,,"      case ""stddev_samp"":"
117915,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,273,,"    mapColumnNames.add(""Key"");"
117916,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,274,,"    mapColumnNames.add(""Value"");"
117917,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,275,,"    VectorizationContext ctx = new VectorizationContext(""name"", mapColumnNames);"
117918,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,336,,"        new String[] {""long"", ""long""},"
117919,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,900,,"            new String[] {""int"", ""string"", ""int"", ""double""},"
117920,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,900,,"            new String[] {""int"", ""string"", ""int"", ""double""},"
117921,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,900,,"            new String[] {""int"", ""string"", ""int"", ""double""},"
117922,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,918,,"            new String[] {""string"", ""tinyint"", ""string"", ""double""},"
117923,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,1151,,"            new String[] {""tinyint"", ""bigint""},"
117924,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,1276,,"        ""Decimal"","
117925,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,1841,,"  @SuppressWarnings(""unchecked"")"
117926,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorGroupByOperator.java,2961,,"    validator.validate(""_total"", expected, result);"
117927,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,227,,"    ExprNodeColumnDesc col1Expr = new  ExprNodeColumnDesc(Long.class, ""col1"", ""table"", false);"
117928,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,227,,"    ExprNodeColumnDesc col1Expr = new  ExprNodeColumnDesc(Long.class, ""col1"", ""table"", false);"
117929,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,228,,"    ExprNodeColumnDesc col2Expr = new  ExprNodeColumnDesc(Long.class, ""col2"", ""table"", false);"
117930,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,229,,"    ExprNodeColumnDesc col3Expr = new  ExprNodeColumnDesc(Long.class, ""col3"", ""table"", false);"
117931,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,260,,"    VectorizationContext vc = new VectorizationContext(""name"");"
117932,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,301,,"    ExprNodeConstantDesc constDesc = new ExprNodeConstantDesc(""Alpha"");"
117933,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,312,,"    columns.add(""col0"");"
117934,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/TestVectorizationContext.java,1109,,"    ExprNodeConstantDesc constDesc2 = new ExprNodeConstantDesc(""Bravo"");"
117935,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/VectorRandomRowSource.java,579,,"      throw new RuntimeException(""Unexpected category "" + typeInfo.getCategory());"
117936,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/VectorVerifyFast.java,101,,"          TestCase.fail(""Boolean field mismatch (expected "" + expected + "" found "" + value + "")"");"
117937,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,65,,"    doIntegerTests(""avg"", random);"
117938,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,102,,"        random, ""count"", TypeInfoFactory.shortTypeInfo);"
117939,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,133,,"    doIntegerTests(""max"", random);"
117940,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,150,,"    doIntegerTests(""min"", random);"
117941,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,168,,"        random, ""sum"", TypeInfoFactory.shortTypeInfo);"
117942,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/aggregation/TestVectorAggregation.java,186,,"    doIntegerTests(""bloom_filter"", random);"
117943,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestDecimalUtil.java,36,,"    HiveDecimal d1 = HiveDecimal.create(""19.56778"");"
117944,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestDecimalUtil.java,48,,"    HiveDecimal d3 = HiveDecimal.create(""-25.34567"");"
117945,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestMurmurHashExpression.java,44,,"        TypeInfoFactory.getPrimitiveTypeInfo(""string""), false, false, SIZE, rand);"
117946,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestMurmurHashExpression.java,46,,"        TypeInfoFactory.getPrimitiveTypeInfo(""int""), false, false, SIZE, rand);"
117947,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorArithmeticExpressions.java,83,,"      expr.setOutputTypeInfo(TypeInfoFactory.getPrimitiveTypeInfo(""bigint""));"
117948,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorArithmeticExpressions.java,444,,"    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create(""2.20"")));"
117949,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorArithmeticExpressions.java,446,,"    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create(""1.00"")));"
117950,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorArithmeticExpressions.java,464,,"    c0.vector[0].set(HiveDecimal.create(""9999999999999999.99"")); // set to max possible value"
117951,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorArithmeticExpressions.java,493,,"    c1.vector[0].set(HiveDecimal.create(""2.00""));"
117952,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,130,,"    setString(v, 2, ""arg2_2"");"
117953,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,131,,"    setString(v, 3, ""arg2_3"");"
117954,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,138,,"    setString(v, 0, ""arg3_0"");"
117955,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,139,,"    setString(v, 1, ""arg3_1"");"
117956,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,472,,"    byte[] scalar = getUTF8Bytes(""scalar"");"
117957,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorConditionalExpressions.java,521,,"    byte[] scalar2 = getUTF8Bytes(""scalar2"");"
117958,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateAddSub.java,70,,"    doDateAddSubTests(random, ""date"", ""smallint"", true);"
117959,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateAddSub.java,70,,"    doDateAddSubTests(random, ""date"", ""smallint"", true);"
117960,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateAddSub.java,72,,"    doDateAddSubTests(random, ""date"", ""int"", true);"
117961,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateAddSub.java,80,,"    doDateAddSubTests(random, ""timestamp"", ""smallint"", true);"
117962,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateAddSub.java,90,,"    doDateAddSubTests(random, ""string"", ""smallint"", true);"
117963,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateDiff.java,73,,"    doDateDiffTests(random, ""date"", ""date"");"
117964,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateDiff.java,80,,"    doDateDiffTests(random, ""date"", ""timestamp"");"
117965,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorDateDiff.java,87,,"    doDateDiffTests(random, ""date"", ""string"");"
117966,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorFilterExpressions.java,841,,"    HiveDecimal scalar = HiveDecimal.create(""-3.30"");"
117967,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorGenericDateExpressions.java,202,,"    byte[] bytes = ""error"".getBytes(utf8);"
117968,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorIfStatement.java,158,,"    doIfTests(random, ""decimal(10,4)"");"
117969,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorNull.java,261,,"                "" isFilter "" + isFilter +"
117970,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorStringConcat.java,80,,"    doStringConcatTests(random, ""string"", ""string"");"
117971,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorTypeCasts.java,368,,"    dv.vector[0].set(HiveDecimal.create(""1.1""));"
117972,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorTypeCasts.java,369,,"    dv.vector[1].set(HiveDecimal.create(""-2.2""));"
117973,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/expressions/TestVectorTypeCasts.java,370,,"    dv.vector[2].set(HiveDecimal.create(""9999999999999999.00""));"
117974,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/MapJoinTestConfig.java,320,,"      throw new RuntimeException(""unknown operator variation "" + testDesc.vectorMapJoinVariation);"
117975,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/CheckFastHashTable.java,220,,"        TestCase.fail(""map.size() does not match expected count"");"
117976,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/TestVectorMapJoinFastRowHashMap.java,169,,"        new String[] { ""bigint"" },"
117977,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/TestVectorMapJoinFastRowHashMap.java,196,,"        new String[] { ""int"" },"
117978,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/TestVectorMapJoinFastRowHashMap.java,223,,"        new String[] { ""string"" },"
117979,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/mapjoin/fast/VerifyFastRow.java,105,,"              TestCase.fail(""Boolean field mismatch (expected "" + expected + "" found "" + value + "")"");"
117980,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/ptf/TestVectorPTFGroupBatches.java,575,,"    TypeInfo[] outputTypeInfos = new TypeInfo[] { getTypeInfo(""bigint""), getTypeInfo(""bigint""),"
117981,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/ptf/TestVectorPTFGroupBatches.java,576,,"        getTypeInfo(""string""), getTypeInfo(""string""), getTypeInfo(""int"") };"
117982,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/udf/TestVectorUDFAdaptor.java,56,,"      blue = ""blue"".getBytes(""UTF-8"");"
117983,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/exec/vector/udf/TestVectorUDFAdaptor.java,73,,"       = new ExprNodeColumnDesc(typeInfo, ""col0"", ""tablename"", false);"
117984,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHiveProtoLoggingHook.java,85,,"    queryPlan.setQueryId(""test_queryId"");"
117985,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHiveProtoLoggingHook.java,93,,"    context = new HookContext(queryPlan, state, null, ""test_user"", ""192.168.10.10"","
117986,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHiveProtoLoggingHook.java,94,,"        ""hive_addr"", ""test_op_id"", ""test_session_id"", ""test_thread_id"", true, perf, null);"
117987,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/PerformTestRCFileAndSeqFile.java,210,,"        + "" random string columns and "" + rowCount + "" rows cost "" + cost"
117988,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/PerformTestRCFileAndSeqFile.java,210,,"        + "" random string columns and "" + rowCount + "" rows cost "" + cost"
117989,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/PerformTestRCFileAndSeqFile.java,229,,"        + "" milliseconds."");"
117990,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidInputFormat.java,119,,"    Object fileId = fileMetaData.getFileId(new Path(""deleteDelta""), 1, new HiveConf());"
117991,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,164,,"        new MockFile(""mock:/tbl/part1/000000_0"", 500, new byte[0]),"
117992,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,169,,"        new MockFile(""mock:/tbl/part1/000001_1"", 500, new byte[0]),"
117993,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,170,,"        new MockFile(""mock:/tbl/part1/000002_0"", 500, new byte[0]),"
117994,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,171,,"        new MockFile(""mock:/tbl/part1/random"", 500, new byte[0]),"
117995,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,173,,"        new MockFile(""mock:/tbl/part1/subdir/000000_0"", 0, new byte[0]));"
117996,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,175,,"        new ValidReaderWriteIdList(""tbl:100:"" + Long.MAX_VALUE + "":""), null, false);"
117997,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,210,,"    AcidDirectory dir = AcidUtils.getAcidState(fs, new MockPath(fs, ""mock:/tbl/part1""), conf,"
117998,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,320,,"        new MockFile(""mock:/tbl/part1/delta_40_60/bucket_0"", 500, new byte[0]),"
117999,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,336,,"    assertEquals(""mock:/tbl/part1/delta_40_60"", delts.get(0).getPath().toString());"
