Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,private void setup() {,"class Work implements Runnable {
  int action;
  Throwable t;
  CntAction a;
  CntAction b;
  public void run(){
switch (action) {
case 0:
      setup();
    break;
case 1:
  check1();
break;
default :
fail();
}
}
private void setup(){
try {
FileObject fo=FileUtil.getConfigFile(""Servers/Actions"");
assertNotNull(""Folder for actions precreated"",fo);
a=new CntAction();
FileObject afo=fo.createData(""A2.instance"");
afo.setAttribute(""instanceCreate"",a);
afo.setAttribute(""position"",99);
afo.setAttribute(""config-Kuk/Buk/Huk.instance"",""true"");
b=new CntAction();
FileObject bfo=fo.createData(""A3.instance"");
bfo.setAttribute(""instanceCreate"",b);
bfo.setAttribute(""position"",98);
}
 catch (IOException ex) {
this.t=ex;
}
}
private void check1(){
try {
RootNode.enableActionsOnExpand(ServerRegistry.getInstance());
assertEquals(""No action called"",0,a.cnt);
assertEquals(""No action called2"",0,b.cnt);
FileObject huk=FileUtil.createData(FileUtil.getConfigRoot(),""Kuk/Buk/Huk.instance"");
RootNode.enableActionsOnExpand(ServerRegistry.getInstance());
assertEquals(""CntAction called"",1,a.cnt);
assertEquals(""No Myaction"",0,b.cnt);
}
 catch (Throwable ex) {
this.t=ex;
}
}
}
",1,1,3,2,"Modifier(MethodDeclaration-modifiers, ),
PrimitiveType(MethodDeclaration-returnType2, ),
SimpleName(MethodDeclaration-name, ),
"
