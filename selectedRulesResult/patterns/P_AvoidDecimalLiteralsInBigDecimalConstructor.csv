Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"(new BigDecimal(percentGain)).setScale(2, BigDecimal.ROUND_HALF_UP);","BigDecimal percentGainBD=(new BigDecimal(percentGain)).setScale(2,BigDecimal.ROUND_HALF_UP);
",0,0,5,148,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NumberLiteral(MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-arguments, ),
"
2,"Assertions.assertEquals(0, clip(MIN.negate().divide(new BigDecimal(2.1), MathContext.DECIMAL64)).doubleValue());","Assertions.assertEquals(0,clip(MIN.negate().divide(new BigDecimal(2.1),MathContext.DECIMAL64)).doubleValue());
",0,4,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
3,"QuotaCreditsVO credits = new QuotaCreditsVO(accountId, domainId, new BigDecimal(amount), updatedBy);","QuotaCreditsVO credits=new QuotaCreditsVO(accountId,domainId,new BigDecimal(amount),updatedBy);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
4,return new BigDecimal(123.45);,"return new BigDecimal(123.45);
",0,0,2,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
5,final BigDecimal b = new BigDecimal(values[(2 * i) + 1]);,"final BigDecimal b=new BigDecimal(values[(2 * i) + 1]);
",0,2,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ArrayAccess-index, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ArrayAccess-index, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
6,return new BigDecimal(a).equals(new BigDecimal((BigInteger) b));,"return new BigDecimal(a).equals(new BigDecimal((BigInteger)b));
",0,5,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
7,"assertEquals(""4503599627370497"", new BigDecimal(x).toString());","assertEquals(""4503599627370497"",new BigDecimal(x).toString());
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
8,final double rounded = (new BigDecimal(Double.toString(x)),"final double rounded=(new BigDecimal(Double.toString(x)).setScale(scale,roundingMethod)).doubleValue();
",0,0,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
9,"sum = sum.add(new BigDecimal(value), MathContext.UNLIMITED);","sum=sum.add(new BigDecimal(value),MathContext.UNLIMITED);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
10,n = Double.isFinite(v[i]) ? new BigDecimal(v[i]) : BigDecimal.ZERO;,"n=Double.isFinite(v[i]) ? new BigDecimal(v[i]) : BigDecimal.ZERO;
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ClassInstanceCreation-arguments, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
11,"Assertions.assertEquals(Double.MIN_VALUE * 2, clip(MIN.multiply(new BigDecimal(1.6))).doubleValue());","Assertions.assertEquals(Double.MIN_VALUE * 2,clip(MIN.multiply(new BigDecimal(1.6))).doubleValue());
",0,1,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
12,"Assertions.assertEquals(new BigDecimal(0.5), BigFraction.of(1, 2).bigDecimalValue());","Assertions.assertEquals(new BigDecimal(0.5),BigFraction.of(1,2).bigDecimalValue());
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
13,"{ SIMPLE, ""bigDecValue"", new BigDecimal( 34.55 ), null, null },","private static final Object[][] TESTS={{SIMPLE,""floatValue"",0f,10f,10f},{SIMPLE,""floatValue"",10f,""x10x"",OgnlException.class},{SIMPLE,""intValue"",0,34,34},{SIMPLE,""intValue"",34,""foobar"",OgnlException.class},{SIMPLE,""intValue"",34,"""",OgnlException.class},{SIMPLE,""intValue"",34,""       \t"",OgnlException.class},{SIMPLE,""intValue"",34,""       \t1234\t\t"",1234},{SIMPLE,""bigIntValue"",BigInteger.valueOf(0),BigInteger.valueOf(34),BigInteger.valueOf(34)},{SIMPLE,""bigIntValue"",BigInteger.valueOf(34),null,null},{SIMPLE,""bigIntValue"",null,"""",OgnlException.class},{SIMPLE,""bigIntValue"",null,""foobar"",OgnlException.class},{SIMPLE,""bigDecValue"",new BigDecimal(0.0),new BigDecimal(34.55),new BigDecimal(34.55)},{SIMPLE,""bigDecValue"",new BigDecimal(34.55),null,null},{SIMPLE,""bigDecValue"",null,"""",OgnlException.class},{SIMPLE,""bigDecValue"",null,""foobar"",OgnlException.class}};
",0,0,6,,"SimpleName(ArrayInitializer-expressions, ),
StringLiteral(ArrayInitializer-expressions, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ),
NullLiteral(ArrayInitializer-expressions, ),
NullLiteral(ArrayInitializer-expressions, ),
"
14,"Assertions.assertEquals(new BigDecimal(Double.toString(d), ctx).doubleValue(),","Assertions.assertEquals(new BigDecimal(Double.toString(d),ctx).doubleValue(),Double.parseDouble(dec.toScientificString(opts)));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
15,"return new BigDecimal(value).setScale(2, RoundingMode.HALF_UP).doubleValue();","return new BigDecimal(value).setScale(2,RoundingMode.HALF_UP).doubleValue();
",0,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
16,qvs.add(qvFactory.create(new BigDecimal(Double.MIN_VALUE)));,"qvs.add(qvFactory.create(new BigDecimal(Double.MIN_VALUE)));
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
17,"Assert.assertEquals(new BigDecimal(1234567.89), jsonObject.getJsonNumber(""bigDecimalVal"").bigDecimalValue());","Assert.assertEquals(new BigDecimal(1234567.89),jsonObject.getJsonNumber(""bigDecimalVal"").bigDecimalValue());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
18,"new Object[]{value,new BigDecimal(4815.16).toString(),","throw new ConverterException(MessageUtils.getErrorMessage(facesContext,DECIMAL_ID,new Object[]{value,new BigDecimal(4815.16).toString(),MessageUtils.getLabel(facesContext,uiComponent)}),e);
",0,0,6,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
19,"assertEquals(isJson() ? 42.875 : new BigDecimal(42.875),","assertEquals(isJson() ? 42.875 : new BigDecimal(42.875),property2.getPrimitiveValue().toValue());
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
20,if (result.isInfinite() || bigDecimalValue.compareTo(new BigDecimal(result.toString())) != 0) {,"if (result.isInfinite() || bigDecimalValue.compareTo(new BigDecimal(result.toString())) != 0) {
  throw new EdmPrimitiveTypeException(""The literal '"" + value + ""' has illegal content."");
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
21,trnRec1.getBankAcctTrnRec().getCurAmt().setAmt(new java.math.BigDecimal(2000.35));,"trnRec1.getBankAcctTrnRec().getCurAmt().setAmt(new java.math.BigDecimal(2000.35));
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
22,"qu = quotaManager.updateQuotaDiskUsage(usageVO, new BigDecimal(0.5), UsageTypes.VOLUME);","qu=quotaManager.updateQuotaDiskUsage(usageVO,new BigDecimal(0.5),UsageTypes.VOLUME);
",1,15,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
23,"sum = sum.add(new BigDecimal(d).pow(2), ctx);","sum=sum.add(new BigDecimal(d).pow(2),ctx);
",1,3,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
24,final double result = Math.sqrt(new BigDecimal(x).pow(2).add(new BigDecimal(y).pow(2)).doubleValue());,"final double result=Math.sqrt(new BigDecimal(x).pow(2).add(new BigDecimal(y).pow(2)).doubleValue());
",1,1,15,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
25,final BigDecimal bx = new BigDecimal(x);,"final BigDecimal bx=new BigDecimal(x);
",1,1,5,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
26,private static final BigDecimal BD_MAX_VALUE = new BigDecimal(Double.MAX_VALUE);,"private static final BigDecimal BD_MAX_VALUE=new BigDecimal(Double.MAX_VALUE);
",1,1,7,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
27,sum = clip(sum.add(clip(new BigDecimal(a[i]).multiply(new BigDecimal(b[i])))));,"sum=clip(sum.add(clip(new BigDecimal(a[i]).multiply(new BigDecimal(b[i])))));
",1,2,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
28,BigDecimal sum = new BigDecimal(a[0]).multiply(new BigDecimal(b[0]));,"BigDecimal sum=new BigDecimal(a[0]).multiply(new BigDecimal(b[0]));
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
29,public final static BigDecimal ZERO = (new BigDecimal(0.00)).setScale(SCALE);,"public final static BigDecimal ZERO=(new BigDecimal(0.00)).setScale(SCALE);
",2,9,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
30,rec.field1 = new BigDecimal(123.45);,"rec.field1=new BigDecimal(123.45);
",2,2,3,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
31,"{ SIMPLE, ""bigDecValue"", new BigDecimal( 0.0 ), new BigDecimal( 34.55 ), new BigDecimal( 34.55 ) },","private static final Object[][] TESTS={{SIMPLE,""floatValue"",0f,10f,10f},{SIMPLE,""floatValue"",10f,""x10x"",OgnlException.class},{SIMPLE,""intValue"",0,34,34},{SIMPLE,""intValue"",34,""foobar"",OgnlException.class},{SIMPLE,""intValue"",34,"""",OgnlException.class},{SIMPLE,""intValue"",34,""       \t"",OgnlException.class},{SIMPLE,""intValue"",34,""       \t1234\t\t"",1234},{SIMPLE,""bigIntValue"",BigInteger.valueOf(0),BigInteger.valueOf(34),BigInteger.valueOf(34)},{SIMPLE,""bigIntValue"",BigInteger.valueOf(34),null,null},{SIMPLE,""bigIntValue"",null,"""",OgnlException.class},{SIMPLE,""bigIntValue"",null,""foobar"",OgnlException.class},{SIMPLE,""bigDecValue"",new BigDecimal(0.0),new BigDecimal(34.55),new BigDecimal(34.55)},{SIMPLE,""bigDecValue"",new BigDecimal(34.55),null,null},{SIMPLE,""bigDecValue"",null,"""",OgnlException.class},{SIMPLE,""bigDecValue"",null,""foobar"",OgnlException.class}};
",2,2,8,,"SimpleName(ArrayInitializer-expressions, ),
StringLiteral(ArrayInitializer-expressions, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ),
NumberLiteral(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ),
"
32,"hm2.put(""KEY2"", new BigDecimal(2.00));","hm2.put(""KEY2"",new BigDecimal(2.00));
",3,13,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
33,"Expression between = new ASTBetween(new ASTObjPath(""estimatedPrice""), new BigDecimal(10d), new BigDecimal(20d));","Expression between=new ASTBetween(new ASTObjPath(""estimatedPrice""),new BigDecimal(10d),new BigDecimal(20d));
",3,17,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
34,BigDecimal bd2 = new BigDecimal(Double.MIN_VALUE);,"BigDecimal bd2=new BigDecimal(Double.MIN_VALUE);
",3,3,4,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
35,total = (new BigDecimal(quantity).multiply(price)).add(orderFee);,"total=(new BigDecimal(quantity).multiply(price)).add(orderFee);
",5,9,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
36,assertThat(new MinValidator(new BigDecimal(Double.MIN_VALUE).toString()),"assertThat(new MinValidator(new BigDecimal(Double.MIN_VALUE).toString()).validateInternal(bigDecimalValue),is(true));
",9,9,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
