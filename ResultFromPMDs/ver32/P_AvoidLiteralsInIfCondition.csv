Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"if (ts.output.get().split(""\n"").length == 3)","if (ts.output.get().split(""\n"").length == 3) break;
",0,53499,6,94070,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
2,"if( result.charAt( result.length()-1 ) != ';' ) result.append("";"");","if (result.charAt(result.length() - 1) != ';') result.append("";"");
",0,10266,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
3,"if (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {","if (!multiValue && enums == null && !""path"".equals(row.getKind()) && ""object"".equals(row.getType())) {
  if (!value.startsWith(""#"") || value.length() <= 1) {
    result.addInvalidReference(name,value);
  }
}
",0,8504,11,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
4,"if (Math.abs(Math.max(d1, d2)) - Math.abs(Math.min(d1, d2)) > 179)","if (Math.abs(Math.max(d1,d2)) - Math.abs(Math.min(d1,d2)) > 179) throw new RuntimeException(""Values are greater than 179 degrees"");
",0,430,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
5,"if (session != null && session.getXXPortalUser() != null && session.getXXPortalUser().getLoginId() != null &&  ""rangerusersync"".equals(session.getXXPortalUser().getLoginId())","if (session != null && session.getXXPortalUser() != null && session.getXXPortalUser().getLoginId() != null && ""rangerusersync"".equals(session.getXXPortalUser().getLoginId()) && reqRoleList != null && !reqRoleList.isEmpty() && existingRoleList != null && !existingRoleList.isEmpty()) {
  if (!reqRoleList.equals(existingRoleList)) {
    userProfileRes.setUserRoleList(reqRoleList);
    userProfileRes.setUserSource(RangerCommonEnums.USER_EXTERNAL);
    List<XXUserPermission> xuserPermissionList=daoManager.getXXUserPermission().findByUserPermissionId(userProfileRes.getId());
    if (xuserPermissionList != null && xuserPermissionList.size() > 0) {
      for (      XXUserPermission xXUserPermission : xuserPermissionList) {
        if (xXUserPermission != null) {
          try {
            xUserPermissionService.deleteResource(xXUserPermission.getId());
          }
 catch (          Exception e) {
            logger.error(e.getMessage());
          }
        }
      }
    }
    updateUser(userProfileRes);
  }
}
 else {
  if (logger.isDebugEnabled()) {
    logger.debug(""Permission"" + "" denied. LoggedInUser="" + (session != null ? session.getXXPortalUser().getId() : """") + "" isn't permitted to perform the action."");
  }
}
",0,310,14,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
6,if (this.getSingleFactor() + this.getMultiFactor() + this.getMemoryFactor() != 1) {,"if (this.getSingleFactor() + this.getMultiFactor() + this.getMemoryFactor() != 1) {
  throw new IllegalArgumentException(""Single, multi, and memory factors "" + "" should total 1.0"");
}
",0,8,7,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
7,if (executors.stream().filter(e -> e.getMaxSize() == null).count() > 1) {,"if (executors.stream().filter(e -> e.getMaxSize() == null).count() > 1) {
  throw new IllegalArgumentException(""Can only have one executor w/o a maxSize. "" + params.getOptions().get(""executors""));
}
",0,1467,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
8,if (Math.abs(Math.ceil(i / 2.0) - i / 2.0) < .001) {,"if (Math.abs(Math.ceil(i / 2.0) - i / 2.0) < .001) {
  colf=colf1;
  colq=colq1;
}
 else {
  colf=colf2;
  colq=colq2;
}
",0,60,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
9,if (Character.toUpperCase((char) c) == 'Q') {,"if (Character.toUpperCase((char)c) == 'Q') {
  writer.println();
  return;
}
",0,10,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
10,if ((min / ((double) max)) < 0.5) {,"if ((min / ((double)max)) < 0.5) {
  log.debug(""ratio of min to max tablets per server should be roughly even. sleeping for {}ms"",currentWait);
  continue;
}
",0,40,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
11,"if (!""pk"".equals(((Element)rows.get(0)).attribute(0).getName()))","if (!""pk"".equals(((Element)rows.get(0)).attribute(0).getName())) {
  pkColumnName=pkColumnName.toUpperCase();
}
",0,56,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
12,"} else if (""Ljava/util/Map$Entry"".equals(sigs[index]) && sufficientGenerics(index++ + 5, sigLength, sig)) {","if (""Ljava/util/Map$Entry"".equals(sigs[index]) && sufficientGenerics(index++ + 5,sigLength,sig)) {
  if (""Ljava/util/Map"".equals(sigs[index++]) && ""Ljava/lang/String"".equals(sigs[index++])) {
    if (""Ljava/lang/Object"".equals(sigs[index]) || ""+Ljava/lang/Object"".equals(sigs[index])) {
      fieldCollectionType=FieldCollectionType.tuple;
      index+=3;
    }
 else     if (""*"".equals(sigs[index])) {
      fieldCollectionType=FieldCollectionType.tuple;
      index+=2;
    }
 else {
      index=sigLength;
    }
  }
}
 else {
  fieldCollectionType=FieldCollectionType.service;
}
",0,270,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
13,"if (vmSpec.getDetails().containsKey(ApiConstants.BootType.UEFI.toString()) && ""secure"".equalsIgnoreCase(vmSpec.getDetails().get(ApiConstants.BootType.UEFI.toString()))) {","if (vmSpec.getDetails().containsKey(ApiConstants.BootType.UEFI.toString()) && ""secure"".equalsIgnoreCase(vmSpec.getDetails().get(ApiConstants.BootType.UEFI.toString()))) {
  if (bootOptions == null) {
    bootOptions=new VirtualMachineBootOptions();
  }
  bootOptions.setEfiSecureBootEnabled(true);
}
",0,102,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
14,"if (data.getComponents().length == 1 && ""broker"".equals(data.getComponents()[0].getScheme())) {","if (data.getComponents().length == 1 && ""broker"".equals(data.getComponents()[0].getScheme())) {
  brokerURI=data.getComponents()[0];
  CompositeData brokerData=URISupport.parseComposite(brokerURI);
  host=brokerData.getParameters().get(""brokerName"");
  if (host == null) {
    host=""localhost"";
  }
  if (brokerData.getPath() != null) {
    host=brokerData.getPath();
  }
  options=data.getParameters();
  location=new URI(""vm://"" + host);
}
 else {
  try {
    host=extractHost(location);
    options=URISupport.parseParameters(location);
    String config=options.remove(""brokerConfig"");
    if (config != null) {
      brokerURI=new URI(config);
    }
 else {
      Map<String,Object> brokerOptions=IntrospectionSupport.extractProperties(options,""broker."");
      brokerURI=new URI(""broker://()/"" + host + ""?""+ URISupport.createQueryString(brokerOptions));
    }
    if (""false"".equals(options.remove(""create""))) {
      create=false;
    }
    String waitForStartString=options.remove(""waitForStart"");
    if (waitForStartString != null) {
      waitForStart=Integer.parseInt(waitForStartString);
    }
  }
 catch (  URISyntaxException e1) {
    throw IOExceptionSupport.create(e1);
  }
  location=new URI(""vm://"" + host);
}
",0,193,10,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
15,"if (!""XPMEXT"".equals(tokens[tokens.length - 1])) {","if (!""XPMEXT"".equals(tokens[tokens.length - 1])) {
  throw new ImageReadException(""Parsing XPM file failed, "" + ""can't parse <Values> section XPMEXT"");
}
",0,43,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
16,"if (!""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.connector."" + id + "".skip-default"", ""false""))) {","if (!""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.connector."" + id + "".skip-default"",""false""))) {
  connectorModules.add(connectorModule);
}
",0,9,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
17,"if ((conf.get(SHUFFLE_MAPS) != null) && ""true"".equals(conf.get(SHUFFLE_MAPS).toLowerCase(Locale.ROOT))) {","if ((conf.get(SHUFFLE_MAPS) != null) && ""true"".equals(conf.get(SHUFFLE_MAPS).toLowerCase(Locale.ROOT))) {
  Collections.shuffle(splits);
}
",0,77,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
18,"if (""ivy.instance"".equals(id) && !getProject().getReferences().containsKey(id)) {","if (""ivy.instance"".equals(id) && !getProject().getReferences().containsKey(id)) {
  getProject().addReference(""ivy.instance"",this);
  autoRegistered=true;
}
",0,7,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
19,"if (""nt:file"".equals(base.getResourceType()) || base.adaptTo(Servlet.class) != null) {","if (""nt:file"".equals(base.getResourceType()) || base.adaptTo(Servlet.class) != null) {
  internalBase=base.getParent();
}
 else {
  internalBase=base;
}
",0,20,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
20,"if (""java.util.Optional"".equals(fieldType.getName()) && fieldType.getGenericsTypes() != null && fieldType.getGenericsTypes().length == 1) {","if (""java.util.Optional"".equals(fieldType.getName()) && fieldType.getGenericsTypes() != null && fieldType.getGenericsTypes().length == 1) {
  GenericsType optionalType=fieldType.getGenericsTypes()[0];
  if (optionalType.isResolved() && !optionalType.isPlaceholder() && !optionalType.isWildcard()) {
    ClassNode valueType=optionalType.getType();
    if (builtinOrDeemedType(valueType,knownImmutableClasses))     return true;
    if (valueType.isEnum())     return true;
  }
}
",0,50,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
21,if(userPass.length > 1) this.ftpPass = userPass[1];,"if (userPass.length > 1) this.ftpPass=userPass[1];
",0,15,6,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
22,"if (indexNode.getProperty(""type"") != null && ""disabled"".equals(indexNode.getProperty(""type"").getValue(Type.STRING))) {","if (indexNode.getProperty(""type"") != null && ""disabled"".equals(indexNode.getProperty(""type"").getValue(Type.STRING))) {
  indexNameObjectList.remove(i);
}
",0,172,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
23,"} else if (""0"".equals(ipAddress[i]) && (""0"".equals(mask[i]) || ""00"".equals(mask[i]) || ""000"".equals(mask[i]) || ""0000"".equals(mask[i]))) {","if (""0"".equals(ipAddress[i]) && (""0"".equals(mask[i]) || ""00"".equals(mask[i]) || ""000"".equals(mask[i])|| ""0000"".equals(mask[i]))) {
  continue;
}
 else if (!mask[i].equals(ipAddress[i])) {
  return false;
}
",0,78,20,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
24,if ((now - timeReceived.getAndSet(now)) >= 1000) {,"if ((now - timeReceived.getAndSet(now)) >= 1000) {
  failed.set(true);
}
",0,9,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
25,if (zipped.length*100/buf.length < 99) {,"if (zipped.length * 100 / buf.length < 99) {
  buf=zipped;
}
",0,71,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
26,"if (""R"".equals(durableConduitBridge.getRemoteBrokerName()) && durableConduitBridge.bridgeFailed.get() == false) {","if (""R"".equals(durableConduitBridge.getRemoteBrokerName()) && durableConduitBridge.bridgeFailed.get() == false) {
  bridge.set(durableConduitBridge);
}
",0,20,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
27,"if (instances>10) System.out.println(getName()+"" cannot contain itself ""+instances);","if (instances > 10) System.out.println(getName() + "" cannot contain itself "" + instances);
",0,14,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
28,if (++this.returned == 1) return getFirst();,"if (++this.returned == 1) return getFirst();
 else if (this.returned == 2) return getSecond();
 else throw new IllegalAccessError(""this.returned="" + this.returned);
",0,355,4,,"ThisExpression(FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
29,if (Math.abs(gamma - (1 / 2.2f)) > 0.00001),"if (Math.abs(gamma - (1 / 2.2f)) > 0.00001) {
  LOG.debug(String.format(""We can't handle gamma of %f yet."",gamma));
  return null;
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
30,if (server.getActiveMQServerControl().getQueueNames().length - baselineQueueCount == 1) {,"if (server.getActiveMQServerControl().getQueueNames().length - baselineQueueCount == 1) {
  return true;
}
 else {
  return false;
}
",0,13,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
31,if (System.currentTimeMillis() - start > 120000) break;,"if (System.currentTimeMillis() - start > 120000) break;
",0,21,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
32,if (buf[0] == ' ') break;,"if (buf[0] == ' ') break;
",0,18,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
33,"if (""set"".equals(prefix) && (currentMethodDoc.parameters().length >= 1 && !currentMethodDoc.parameters()[0].typeName().equals(""boolean""))) {","if (""set"".equals(prefix) && (currentMethodDoc.parameters().length >= 1 && !currentMethodDoc.parameters()[0].typeName().equals(""boolean""))) {
  expectedMethodName=""get"" + propName;
}
 else if (""get"".equals(prefix) && !currentMethodDoc.returnType().typeName().equals(""boolean"")) {
  expectedMethodName=""set"" + propName;
}
 else if (""is"".equals(prefix)) {
  expectedMethodName=""set"" + propName;
}
 else {
  expectedMethodName=""is"" + propName;
}
",0,76,13,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
34,if (Math.abs(((Calendar)obj1).getTime().getTime() - ((Calendar)obj2).getTime().getTime()) < 1000) {,"if (Math.abs(((Calendar)obj1).getTime().getTime() - ((Calendar)obj2).getTime().getTime()) < 1000) {
  return true;
}
",0,87,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
35,"if (""PARCEL"".equals(serviceCode.toUpperCase(Locale.getDefault())) && (weightPounds.compareTo(BigDecimal.ONE) < 0)) {","if (""PARCEL"".equals(serviceCode.toUpperCase(Locale.getDefault())) && (weightPounds.compareTo(BigDecimal.ONE) < 0)) {
  weightPounds=BigDecimal.ONE;
  packageWeight=BigDecimal.ZERO;
}
",0,22,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
36,"&& replica.getProperties().get(""leader"") != null && ""true"".equals(replica.getProperties().get(""leader""))) {","if (Replica.State.ACTIVE.equals(state) && replica.getProperties().get(""leader"") != null && ""true"".equals(replica.getProperties().get(""leader""))) {
  String coreName=replica.getCoreName();
  String hostName=getHostFromNodeName(replica.getNodeName());
  if (leaderHostCoreMap.containsKey(hostName)) {
    List<String> coresList=leaderHostCoreMap.get(hostName);
    coresList.add(coreName);
  }
 else {
    List<String> coreList=new ArrayList<>();
    coreList.add(coreName);
    leaderHostCoreMap.put(hostName,coreList);
  }
  Map<String,String> properties=new HashMap<>();
  properties.put(""name"",coreName);
  properties.put(""coreNodeName"",replica.getName());
  properties.put(""shard"",slice.getName());
  properties.put(""collection"",collection);
  properties.put(""numShards"",numShards.toString());
  properties.put(""replicaType"",replica.getType().name());
  SolrCoreData solrCoreData=new SolrCoreData(replica.getName(),hostName,properties);
  leaderCoreDataMap.put(coreName,solrCoreData);
  leaderShardCoreMap.get(slice.getName()).add(coreName);
  leaderCoreHostMap.put(coreName,hostName);
}
",0,6,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
37,"if (getServerConnector(connector).getHost() == null || ""0.0.0.0"".equals(getServerConnector(connector).getHost()))","if (getServerConnector(connector).getHost() == null || ""0.0.0.0"".equals(getServerConnector(connector).getHost())) {
  try {
    final List<NetworkInterface> interfaces=new ArrayList<>();
    final List<NetworkInterface> loopBackInterfaces=new ArrayList<>();
    final Enumeration<NetworkInterface> nis=NetworkInterface.getNetworkInterfaces();
    while (nis.hasMoreElements()) {
      final NetworkInterface ni=nis.nextElement();
      if (ni.isLoopback()) {
        loopBackInterfaces.add(ni);
      }
 else {
        interfaces.add(ni);
      }
    }
    if (!interfaces.isEmpty()) {
      endpoints.addAll(getEndpoints(connector,interfaces));
    }
 else {
      endpoints.addAll(getEndpoints(connector,loopBackInterfaces));
    }
  }
 catch (  final SocketException se) {
  }
}
 else {
  final String endpoint=this.getEndpoint(connector,getServerConnector(connector).getHost());
  if (endpoint != null) {
    endpoints.add(endpoint);
  }
}
",0,2,9,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
38,"if (type.getName().equals(AnnotationCollector.class.getName()) || ""java.lang.annotation"".equals(type.getPackageName())) continue;","if (type.getName().equals(AnnotationCollector.class.getName()) || ""java.lang.annotation"".equals(type.getPackageName())) continue;
",0,12,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
39,"if (isContainer() && args.length == 1 && ""addTask"".equals(name)","if (isContainer() && args.length == 1 && ""addTask"".equals(name) && Task.class.equals(args[0])) {
  continue;
}
",0,28,6,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
40,"if (""addText"".equals(name) && Void.TYPE.equals(returnType)","if (""addText"".equals(name) && Void.TYPE.equals(returnType) && args.length == 1 && String.class.equals(args[0])) {
  addTextMethod=m;
}
 else if (name.startsWith(""set"") && Void.TYPE.equals(returnType) && args.length == 1 && !args[0].isArray()) {
  final String propName=getPropertyName(name,""set"");
  AttributeSetter as=attributeSetters.get(propName);
  if (as != null) {
    if (String.class.equals(args[0])) {
      continue;
    }
    if (File.class.equals(args[0])) {
      if (Resource.class.equals(as.type) || FileProvider.class.equals(as.type)) {
        continue;
      }
    }
  }
  as=createAttributeSetter(m,args[0],propName);
  if (as != null) {
    attributeTypes.put(propName,args[0]);
    attributeSetters.put(propName,as);
  }
}
 else if (name.startsWith(""create"") && !returnType.isArray() && !returnType.isPrimitive()&& args.length == 0) {
  final String propName=getPropertyName(name,""create"");
  if (nestedCreators.get(propName) == null) {
    nestedTypes.put(propName,returnType);
    nestedCreators.put(propName,new CreateNestedCreator(m));
  }
}
 else if (name.startsWith(""addConfigured"") && Void.TYPE.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
  try {
    Constructor<?> constructor=null;
    try {
      constructor=args[0].getConstructor();
    }
 catch (    final NoSuchMethodException ex) {
      constructor=args[0].getConstructor(Project.class);
    }
    final String propName=getPropertyName(name,""addConfigured"");
    nestedTypes.put(propName,args[0]);
    nestedCreators.put(propName,new AddNestedCreator(m,constructor,AddNestedCreator.ADD_CONFIGURED));
  }
 catch (  final NoSuchMethodException nse) {
  }
}
 else if (name.startsWith(""add"") && Void.TYPE.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
  try {
    Constructor<?> constructor=null;
    try {
      constructor=args[0].getConstructor();
    }
 catch (    final NoSuchMethodException ex) {
      constructor=args[0].getConstructor(Project.class);
    }
    final String propName=getPropertyName(name,""add"");
    if (nestedTypes.get(propName) != null) {
      continue;
    }
    nestedTypes.put(propName,args[0]);
    nestedCreators.put(propName,new AddNestedCreator(m,constructor,AddNestedCreator.ADD));
  }
 catch (  final NoSuchMethodException nse) {
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
41,"if (method.equals(HttpConstants.METHOD_POST) && ""application/x-www-form-urlencoded"".equals(headers.get(""content-type""))","if (method.equals(HttpConstants.METHOD_POST) && ""application/x-www-form-urlencoded"".equals(headers.get(""content-type"")) && (headers.get(""content-length"") != null)) {
  if (""chunked"".equals(headers.get(""transfer-encoding""))) {
    throw new HttpException(HttpConstants.STATUS_BAD_REQUEST,""Sorry I don't understand chunked requests"");
  }
  StringBuffer buffer=new StringBuffer();
  int size=Integer.parseInt((String)headers.get(""content-length""));
  mark(size);
  for (int i=0; i < size; i++) {
    int j=read();
    if (j >= 0) {
      buffer.append((char)j);
    }
 else {
      throw new HttpException(HttpConstants.STATUS_BAD_REQUEST,""Request not understood"");
    }
  }
  variableHolder=buffer.toString();
  reset();
}
 else if (method.equals(HttpConstants.METHOD_GET)) {
  variableHolder=getQueryString();
}
 else {
  throw new HttpException(HttpConstants.STATUS_BAD_REQUEST,""Request not understood"");
}
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
42,"if (!isAutocommit() && getConnection() != null && ""abort"".equals(onError)) {","if (!isAutocommit() && getConnection() != null && ""abort"".equals(onError)) {
  try {
    getConnection().rollback();
  }
 catch (  SQLException ex) {
  }
}
",0,0,6,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
43,"""yes"".equalsIgnoreCase(vmEntityVO.getDetails().get(VirtualMachineProfile.Param.UefiFlag.getName())))","if (MapUtils.isNotEmpty(vmEntityVO.getDetails()) && vmEntityVO.getDetails().containsKey(VirtualMachineProfile.Param.UefiFlag.getName()) && ""yes"".equalsIgnoreCase(vmEntityVO.getDetails().get(VirtualMachineProfile.Param.UefiFlag.getName()))) {
  Map<String,String> details=vmEntityVO.getDetails();
  vmProfile.getParameters().put(VirtualMachineProfile.Param.BootType,details.get(VirtualMachineProfile.Param.BootType.getName()));
  vmProfile.getParameters().put(VirtualMachineProfile.Param.BootMode,details.get(VirtualMachineProfile.Param.BootMode.getName()));
  vmProfile.getParameters().put(VirtualMachineProfile.Param.UefiFlag,details.get(VirtualMachineProfile.Param.UefiFlag.getName()));
}
",0,1,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
44,"} else if (""zipped"".equals(child.key) && buffer.length() != 0) {","if (""zipped"".equals(child.key) && buffer.length() != 0) {
  zipped=Boolean.valueOf(buffer);
}
",0,3,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
45,"if (headerAssign && parentNode != null && ""message"".equals(parentNode.getNodeName()) && rvalue.getNodeType()==Node.ELEMENT_NODE ) {","if (headerAssign && parentNode != null && ""message"".equals(parentNode.getNodeName()) && rvalue.getNodeType() == Node.ELEMENT_NODE) {
  lvalue=copyInto((Element)lvalue,(Element)lvaluePtr,(Element)rvalue);
}
 else if (rvalue.getNodeType() == Node.ELEMENT_NODE && lvaluePtr.getNodeType() == Node.ELEMENT_NODE) {
  lvalue=replaceElement((Element)lvalue,(Element)lvaluePtr,(Element)rvalue,ocopy.isKeepSrcElementName());
}
 else {
  lvalue=replaceContent(lvalue,lvaluePtr,rvalue.getTextContent());
}
",0,5,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
46,"if (tokens.size() == 2 + dimensions.size() + dimensions.size() - 1 && ""["".equals(tokens.get(0))","if (tokens.size() == 2 + dimensions.size() + dimensions.size() - 1 && ""["".equals(tokens.get(0)) && ""]"".equals(tokens.get(tokens.size() - 1))) {
  tokens=tokens.subList(1,tokens.size() - 1);
  int[] index=new int[dimensions.size()];
  for (int i=0; i < index.length; i++) {
    int tokenId=i * 2;
    index[i]=Integer.parseInt(tokens.get(tokenId));
    if (tokenId + 1 < tokens.size() && !"","".equals(tokens.get(tokenId + 1))) {
      throw new IllegalStateException(""Expected a comma but got "" + tokens.get(tokenId + 1));
    }
  }
  int valuePosition=0;
  int multiplier=1;
  for (int i=index.length - 1; i >= 0; i--) {
    int position=index[i];
    valuePosition+=position * multiplier;
    multiplier*=dimensions.get(i);
  }
  return valuePosition;
}
",0,38,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
47,"if (""hbase"".equals(config.getStorageUrl().getScheme()) && !"""".equals(config.getMetadataUrl().getScheme())) {","if (""hbase"".equals(config.getStorageUrl().getScheme()) && !"""".equals(config.getMetadataUrl().getScheme())) {
  final int deleteTimeoutMin=2;
  try {
    Class hbaseCleanUpUtil=Class.forName(""org.apache.kylin.rest.job.StorageCleanJobHbaseUtil"");
    Method cleanUnusedHBaseTables=hbaseCleanUpUtil.getDeclaredMethod(""cleanUnusedHBaseTables"",boolean.class,int.class,int.class);
    hbaseGarbageTables=(List<String>)cleanUnusedHBaseTables.invoke(hbaseCleanUpUtil,delete,deleteTimeoutMin,threadsNum);
  }
 catch (  Throwable e) {
    logger.error(""Error during HBase clean up"",e);
  }
}
",0,43,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
48,"if (!""e"".equals(((Element)rows.get(0)).getName()))","if (!""e"".equals(((Element)rows.get(0)).getName())) {
  assertEquals(""E"",((Element)rows.get(0)).getName());
  uppercase=true;
}
",0,2,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
49,"if ( items.size() == 1 && ""project-info"".equals( items.get( 0 ).get( ""ref"" ) ) )","if (items.size() == 1 && ""project-info"".equals(items.get(0).get(""ref""))) {
  items=(List)items.get(0).get(""items"");
}
",0,6,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
50,"if (""XMLHttpRequest"".equals(request.getHeader(""X-Requested-With"")) && !""GET"".equals(request.getMethod())) {","if (""XMLHttpRequest"".equals(request.getHeader(""X-Requested-With"")) && !""GET"".equals(request.getMethod())) {
  String csrfToken=request.getHeader(""X-CSRF-Token"");
  HttpSession session=request.getSession();
  if ((UtilValidate.isEmpty(csrfToken) || !csrfToken.equals(CsrfUtil.getTokenForAjax(session))) && !""/SetTimeZoneFromBrowser"".equals(request.getPathInfo())) {
    throw new RequestHandlerException(""Invalid or missing CSRF token for AJAX call to path '"" + request.getPathInfo() + ""'"");
  }
}
 else {
  Map<String,String> tokenMap=CsrfUtil.getTokenMap(request,request.getContextPath());
  String csrfToken=request.getParameter(CsrfUtil.getTokenNameNonAjax());
  String limitPath=getRequestUriWithSubFolderLimit(csrfUtilPath);
  if (UtilValidate.isNotEmpty(csrfToken) && tokenMap.containsKey(limitPath) && csrfToken.equals(tokenMap.get(limitPath))) {
    if (!CsrfUtil.getStrategy().keepTokenAfterUse(csrfUtilPath,request.getMethod())) {
      tokenMap.remove(limitPath);
    }
  }
 else {
    CsrfUtil.getStrategy().invalidTokenResponse(csrfUtilPath,request);
  }
}
",0,9,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
51,"if (Modifier.isStatic(m.getModifiers()) && ""getInstance"".equals(m.getName()) && m.getParameterTypes().length == 0) {","if (Modifier.isStatic(m.getModifiers()) && ""getInstance"".equals(m.getName()) && m.getParameterTypes().length == 0) {
  _b=(FacadingPredicateBuilder)m.invoke(null);
  break;
}
",0,1,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
52,"if (""Mac OS X"".equals(System.getProperties().getProperty(""os.name"")) && !JavaUtils.isJava11Compatible()) {","if (""Mac OS X"".equals(System.getProperties().getProperty(""os.name"")) && !JavaUtils.isJava11Compatible()) {
  System.out.println(""Skipping failure test for OSX"");
  return;
}
",0,28,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
53,"if (convertor == null && node instanceof Element && FormsConstants.DEFINITION_NS.equals(node.getNamespaceURI()) && ""convertor"".equals(node.getLocalName())) {","if (convertor == null && node instanceof Element && FormsConstants.DEFINITION_NS.equals(node.getNamespaceURI()) && ""convertor"".equals(node.getLocalName())) {
  Element convertorConfigElement=(Element)node;
  try {
    convertor=datatype.getBuilder().buildConvertor(convertorConfigElement);
  }
 catch (  Exception e) {
    throw new SAXException(""Error building convertor from convertor configuration embedded in selection list XML."",e);
  }
}
 else if (node instanceof Element && FormsConstants.DEFINITION_NS.equals(node.getNamespaceURI()) && ""item"".equals(node.getLocalName())) {
  if (convertor == null) {
    convertor=datatype.getConvertor();
  }
  Element element=(Element)node;
  String stringValue=element.getAttribute(""value"");
  Object value;
  if ("""".equals(stringValue)) {
    value=null;
  }
 else {
    ConversionResult conversionResult=convertor.convertFromString(stringValue,Locale.US,formatCache);
    if (!conversionResult.isSuccessful()) {
      throw new Exception(""Could not convert the value \"""" + stringValue + ""\"" to the type ""+ datatype.getDescriptiveName()+ "", defined at ""+ DomHelper.getLocation(element));
    }
    value=conversionResult.getResult();
  }
  XMLizable label=null;
  Element labelEl=DomHelper.getChildElement(element,FormsConstants.DEFINITION_NS,""label"");
  if (labelEl != null) {
    label=DomHelper.compileElementContent(labelEl);
  }
  selectionList.addItem(value,label);
}
",0,52,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
54,"if (file.length() == 1) file = new StringBuffer(file).append("":"").append(tokens.nextToken()).toString();","if (file.length() == 1) file=new StringBuffer(file).append("":"").append(tokens.nextToken()).toString();
",0,92,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
55,"if (""serialVersionUID"".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access) && Type.LONG_TYPE.equals(Type.getType(desc))) {","if (""serialVersionUID"".equals(name) && Modifier.isFinal(access) && Modifier.isStatic(access)&& Type.LONG_TYPE.equals(Type.getType(desc))) {
  computeSVUID=false;
  hasSVUID=true;
}
",0,1,14,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
56,if (newPrice.compareTo(high) == 1) high = newPrice;,"if (newPrice.compareTo(high) == 1) high=newPrice;
 else if (newPrice.compareTo(low) == -1) low=newPrice;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
57,if (promoDescBuf.charAt(promoDescBuf.length() - 1) == ' ') promoDescBuf.deleteCharAt(promoDescBuf.length() - 1);,"if (promoDescBuf.charAt(promoDescBuf.length() - 1) == ' ') promoDescBuf.deleteCharAt(promoDescBuf.length() - 1);
",0,3,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
58,"if (Thread.class.getName().equals(callStack[1].getClassName()) && ""join"".equals(callStack[1].getMethodName())) {","if (Thread.class.getName().equals(callStack[1].getClassName()) && ""join"".equals(callStack[1].getMethodName())) {
  ObjectVariable[] ownedMonitorsWithThread=Arrays.copyOf(ownedMonitors,ownedMonitors.length + 1);
  ownedMonitorsWithThread[ownedMonitors.length]=(ObjectVariable)((JPDAThreadImpl)thread).getDebugger().getVariable(((JPDAThreadImpl)thread).getThreadReference());
  return ownedMonitorsWithThread;
}
 else {
  return ownedMonitors;
}
",0,8,11,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
59,"if(f.exists() || ""Entities.jar"".equals(name)) return f.toURL();","if (f.exists() || ""Entities.jar"".equals(name)) return f.toURL();
 else return null;
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
60,if (s.charAt(i - 1) != ']') return false;,"if (s.charAt(i - 1) != ']') return false;
",0,1970,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
61,"if (""xa"".equals(transaction) && !(dataSource instanceof XADataSource)) {","if (""xa"".equals(transaction) && !(dataSource instanceof XADataSource)) {
  throw new IllegalArgumentException(""xa transactions specified, but DataSource does not implement javax.sql.XADataSource"");
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
62,"if (""xa"".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {","if (""xa"".equals(transaction) || (transactionManager != null && dataSource instanceof XADataSource)) {
  mcf=new XADataSourceMCFFactory();
  if (transaction == null) {
    transaction=""xa"";
  }
}
 else if (dataSource instanceof DataSource) {
  mcf=new DataSourceMCFFactory();
  if (transaction == null) {
    transaction=transactionManager != null ? ""local"" : ""none"";
  }
}
 else {
  throw new IllegalArgumentException(""dataSource must be of type javax.sql.DataSource/XADataSource"");
}
",0,22,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
63,"if (""PARSING"".equals(err.getKey()) && err.getDescription() != null && err.getDescription().contains(""too large"")) {","if (""PARSING"".equals(err.getKey()) && err.getDescription() != null && err.getDescription().contains(""too large"")) {
  errorTooLargeForParser=true;
}
",0,12,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
64,if (explanation.getStrategyTraversals().stream().map(Pair::getValue0).filter(s -> s instanceof IdentityRemovalStrategy || s instanceof IncidentToAdjacentStrategy).count() == 2) {,"if (explanation.getStrategyTraversals().stream().map(Pair::getValue0).filter(s -> s instanceof IdentityRemovalStrategy || s instanceof IncidentToAdjacentStrategy).count() == 2) {
  printTraversalForm(explanation.getOriginalTraversal());
  boolean beforeIncident=true;
  boolean beforeIdentity=true;
  for (  final Pair<TraversalStrategy,Traversal.Admin<?,?>> pair : explanation.getStrategyTraversals()) {
    if (pair.getValue0().getClass().equals(IncidentToAdjacentStrategy.class))     beforeIncident=false;
    if (pair.getValue0().getClass().equals(IdentityRemovalStrategy.class))     beforeIdentity=false;
    if (beforeIdentity)     assertEquals(1,TraversalHelper.getStepsOfClass(IdentityStep.class,pair.getValue1()).size());
    if (beforeIncident)     assertEquals(1,TraversalHelper.getStepsOfClass(EdgeVertexStep.class,pair.getValue1()).size());
    if (!beforeIdentity)     assertEquals(0,TraversalHelper.getStepsOfClass(IdentityStep.class,pair.getValue1()).size());
    if (!beforeIncident)     assertEquals(0,TraversalHelper.getStepsOfClass(EdgeVertexStep.class,pair.getValue1()).size());
  }
  assertFalse(beforeIncident);
}
",0,1,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ExpressionMethodReference-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
65,"if (Schema.instance.getKeyspaceMetadata(ksName).functions.get(new FunctionName(ksName, functionName)).size() > 1)","if (Schema.instance.getKeyspaceMetadata(ksName).functions.get(new FunctionName(ksName,functionName)).size() > 1) removeInvalidPreparedStatementsForFunction(ksName,functionName);
",0,4,10,,"QualifiedName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
66,if (name.charAt(name.length() - ext.length() - 1) != '.') {,"if (name.charAt(name.length() - ext.length() - 1) != '.') {
  return false;
}
",0,13,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
67,"if (abortTxns(dbConn, Collections.singletonList(writeSet.get(0).txnId), false, false) != 1) {","if (abortTxns(dbConn,Collections.singletonList(writeSet.get(0).txnId),false,false) != 1) {
  throw new IllegalStateException(msg + "" FAILED!"");
}
",0,5,11,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
68,"if (!""FAILED"".equals(job.job.getStatus().getState())) {","if (!""FAILED"".equals(job.job.getStatus().getState())) {
  if (numFailures < numFailuresExpected) {
    ++numFailures;
    throw new Exception(""Failure number "" + numFailures);
  }
  if (job.getJobCount == GET_JOBS_TRANSITION_INTERVAL + 1) {
    job.job.getStatus().setState(""RUNNING"");
  }
 else   if (job.getJobCount == 2 * GET_JOBS_TRANSITION_INTERVAL + 1) {
    job.job.setStatus(runJob(job.job));
  }
}
",0,4,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
69,if (Integer.bitCount(access & (Opcodes.ACC_FINAL | Opcodes.ACC_ABSTRACT)) > 1) {,"if (Integer.bitCount(access & (Opcodes.ACC_FINAL | Opcodes.ACC_ABSTRACT)) > 1) {
  throw new IllegalArgumentException(""final and abstract are mutually exclusive: "" + access);
}
",0,54,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
70,if (input.getLeft() * input.getLeft() + input.getRight() * input.getRight() < 1) {,"if (input.getLeft() * input.getLeft() + input.getRight() * input.getRight() < 1) {
  accumulatedValue.getLeft().increment();
}
",0,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
71,if (AccurateMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {,"if (AccurateMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {
  if (!Double.isNaN(expectedStepStart)) {
    double stepError=AccurateMath.max(maxTimeError,AccurateMath.abs(start - expectedStepStart));
    for (    double eventTime : problem.getTheoreticalEventsTimes()) {
      stepError=AccurateMath.min(stepError,AccurateMath.abs(start - eventTime));
    }
    maxTimeError=AccurateMath.max(maxTimeError,stepError);
  }
  expectedStepStart=start + integrator.getCurrentSignedStepsize();
}
",0,4,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
72,if (elmts.size() != 1) throw new WrappedFaultException.JaxenFunctionException(,"if (elmts.size() != 1) throw new WrappedFaultException.JaxenFunctionException(new FaultException(_oxpath.getOwner().getConstants().getQnXsltInvalidSource(),""Second parameter of the bpws:doXslTransform function MUST point to a single "" + ""element node.""));
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
"
73,"if (nil != null && ""true"".equalsIgnoreCase(nil) && (val == null || val.trim().length() == 0)) {","if (nil != null && ""true"".equalsIgnoreCase(nil) && (val == null || val.trim().length() == 0)) {
  if (__log.isDebugEnabled())   __log.debug(""Extvar key: "" + key + "" is null (xsi:nil)"");
  ret.put(key,null);
}
 else {
  ret.put(key,column.fromText(val));
}
",0,8,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
74,"if (names.length != 1) throw new IllegalStateException(""Expected a single column name instead of ""+names.length);","if (names.length != 1) throw new IllegalStateException(""Expected a single column name instead of "" + names.length);
",0,5,5,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
75,"if ( annoBy.annotatedWith() == Mock.NoAnnotation.class && """".equals( annoBy.namedWith() ) )","if (annoBy.annotatedWith() == Mock.NoAnnotation.class && """".equals(annoBy.namedWith())) {
  numOfSimpleType++;
}
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
76,"else if (NumberUtils.isNumber(array[0]) && ""*"".equals(array[1])) {","if (NumberUtils.isNumber(array[0]) && ""*"".equals(array[1])) {
  valid=true;
}
",0,6,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
77,"if ((rex instanceof RexCall) && ""ITEM"".equals(((RexCall)rex).getOperator().getName())) {","if ((rex instanceof RexCall) && ""ITEM"".equals(((RexCall)rex).getOperator().getName())) {
  return true;
}
",0,19,8,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
78,"if (""aws-ec2"".equals(spec.getProvider()) && spec.getTemplate().getImageId() != null) {","if (""aws-ec2"".equals(spec.getProvider()) && spec.getTemplate().getImageId() != null) {
  enableAWSEC2LazyImageFetching(spec);
}
",0,2,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
79,if (chars[segments[toDelete]] != '.') {,"if (chars[segments[toDelete]] != '.') {
  segments[toDelete]=DELETED;
  segments[segment]=DELETED;
  wasNormalized=false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
80,"if (""wsdl"".equals(a.getType()) && classifier != null && classifier.equals(a.getClassifier())) {","if (""wsdl"".equals(a.getType()) && classifier != null && classifier.equals(a.getClassifier())) {
  hasWsdlAttached=true;
}
",0,3,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
81,"if (description.charAt(0) == '0') description = description.substring(Math.min(2, description.length()));","if (description.charAt(0) == '0') description=description.substring(Math.min(2,description.length()));
",0,49,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
82,if (m.maxLen + 2 + t.getShortDescription().length() > 80) {,"if (m.maxLen + 2 + t.getShortDescription().length() > 80) {
  fail(""Tool description too long: "" + t.getName());
}
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
83,if ((char) (decoded[i] & 0x7f) == ':') {,"if ((char)(decoded[i] & 0x7f) == ':') {
  authBuf=pwBuf;
  continue;
}
",0,2,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
84,if (confusionMatrix[line][confusionMatrix[0].length - 1] == 1) {,"if (confusionMatrix[line][confusionMatrix[0].length - 1] == 1) {
  printStream.append(label).append("" ("").append(Integer.toString((int)confusionMatrix[line][line])).append("") "");
}
",0,1,7,,"SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, FieldAccess-expression, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
85,"if (delegates.length == 1) return subjectInvoke(proxy, method, args, delegates[0]);","if (delegates.length == 1) return subjectInvoke(proxy,method,args,delegates[0]);
",0,13,8,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
86,if ( arg.charAt(0) != '-' ) continue ;,"if (arg.charAt(0) != '-') continue;
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
87,if (method.getParameterTypes().length != 1) continue;,"if (method.getParameterTypes().length != 1) continue;
",0,16,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
88,"if (equals (phone, expectedPhone) && ""outManyInoutManyIn1"".equals (name.value) && equals (address.value, expectedAddress) && otherName.value == null)","if (equals(phone,expectedPhone) && ""outManyInoutManyIn1"".equals(name.value) && equals(address.value,expectedAddress)&& otherName.value == null) {
  name.value=name.value + "" yo ho ho!"";
  address.value=returnAddress;
  number.value=returnNumber;
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInoutManyIn1"");
  System.err.println(""expected phone = "" + printPhone(expectedPhone));
  System.err.println(""actual phone = "" + printPhone(phone));
  System.err.println(""expected name = out1InoutManyInMany"");
  System.err.println(""actual name = "" + name.value);
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address.value));
  throw new TestFailed();
}
",0,3,11,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
89,"if (""outManyInout1InMany"".equals (name) && equals (address, expectedAddress) && equals (phone.value, expectedPhone) && otherName.value == null)","if (""outManyInout1InMany"".equals(name) && equals(address,expectedAddress) && equals(phone.value,expectedPhone)&& otherName.value == null) {
  phone.value=returnPhone;
  number.value=returnNumber;
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInout1InMany"");
  System.err.println(""expected name = outManyInout1InMany"");
  System.err.println(""actual name = "" + name);
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address));
  System.err.println(""expected phone = "" + printPhone(expectedPhone));
  System.err.println(""actual phone = "" + printPhone(phone.value));
  throw new TestFailed();
}
",0,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
90,"if (equals (phone, expectedPhone) && expectedNumber == otherNumber && ""outManyInoutManyInMany"".equals (name.value) && equals (address.value, expectedAddress) && otherName.value == null)","if (equals(phone,expectedPhone) && expectedNumber == otherNumber && ""outManyInoutManyInMany"".equals(name.value) && equals(address.value,expectedAddress) && otherName.value == null) {
  name.value=name.value + "" yo ho ho!"";
  address.value=returnAddress;
  number.value=returnNumber;
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInoutManyInMany"");
  System.err.println(""expected phone = "" + printPhone(expectedPhone));
  System.err.println(""actual phone = "" + printPhone(phone));
  System.err.println(""expected number = "" + expectedNumber);
  System.err.println(""actual number = "" + otherNumber);
  System.err.println(""expected name = outManyInoutManyInMany"");
  System.err.println(""actual name = "" + name.value);
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address.value));
  throw new TestFailed();
}
",0,4,13,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
91,"if (equals (address, expectedAddress) && equals (phone, expectedPhone) && ""out1Inout1InMany"".equals (name.value))","if (equals(address,expectedAddress) && equals(phone,expectedPhone) && ""out1Inout1InMany"".equals(name.value)) {
  name.value=name.value + "" yo ho ho!"";
  return ""out1Inout1InMany arghhh!"";
}
 else {
  System.err.println(""Test failure:  out1Inout1InMany"");
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address));
  System.err.println(""expected phone = "" + printPhone(expectedPhone));
  System.err.println(""actual phone = "" + printPhone(phone));
  System.err.println(""expected name = out1Inout1InMany"");
  System.err.println(""actual name = "" + name.value);
  throw new TestFailed();
}
",0,0,9,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
92,"if (""file"".equals(protocol) && path != null && ue.path != null) {","if (""file"".equals(protocol) && path != null && ue.path != null) {
  try {
    File fThis=new File(path);
    File fObj=new File(ue.path);
    if (fThis.getCanonicalPath().equals(fObj.getCanonicalPath())) {
      return true;
    }
  }
 catch (  IOException ex) {
  }
}
",0,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
93,"if (""outManyInout0InMany"".equals (name) && equals (address, expectedAddress) && otherName.value == null)","if (""outManyInout0InMany"".equals(name) && equals(address,expectedAddress) && otherName.value == null) {
  number.value=returnNumber;
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInout0InMany"");
  System.err.println(""expected name = outManyInout0InMany"");
  System.err.println(""actual name = "" + name);
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address));
  throw new TestFailed();
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
94,"if (""have name"".equals(name.value) && attachinfo.value.getName() != null) {","if (""have name"".equals(name.value) && attachinfo.value.getName() != null) {
  name.value=""return detail + "" + attachinfo.value.getName();
}
 else if (""break schema"".equals(name.value)) {
  name.value=""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"" + ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"";
}
 else {
  name.value=""return detail + "" + name.value;
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
95,"if (equals (address, expectedAddress) && ""outManyInout1In1"".equals (name.value) && otherName.value == null)","if (equals(address,expectedAddress) && ""outManyInout1In1"".equals(name.value) && otherName.value == null) {
  number.value=returnNumber;
  name.value=name.value + "" yo ho ho!"";
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInout1In1"");
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address));
  System.err.println(""expected name = out1InoutManyInMany"");
  System.err.println(""actual name = "" + name.value);
  System.err.println(""expected otherName = null"");
  System.err.println(""actual otherName = "" + otherName.value);
  throw new TestFailed();
}
",0,0,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
96,"if (""outManyInoutManyIn0"".equals (name.value) && equals (address.value, expectedAddress) && otherName.value == null)","if (""outManyInoutManyIn0"".equals(name.value) && equals(address.value,expectedAddress) && otherName.value == null) {
  name.value=name.value + "" yo ho ho!"";
  address.value=returnAddress;
  number.value=returnNumber;
  otherName.value="" yo ho ho!"";
}
 else {
  System.err.println(""Test failure:  outManyInoutManyIn0"");
  System.err.println(""expected name = outManyInoutManyIn0"");
  System.err.println(""actual name = "" + name.value);
  System.err.println(""expected address =\n"" + printAddress(expectedAddress));
  System.err.println(""actual address =\n"" + printAddress(address.value));
  throw new TestFailed();
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
97,"if ( name == null || """".equals(name) ) return ;","if (name == null || """".equals(name)) return;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
98,"if (i != 1) stringArray[i] = ""Some Text "" + i;","if (i != 1) stringArray[i]=""Some Text "" + i;
",0,6,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
99,"if (""http"".equals(org.apache.axis2.util.Utils.getURIScheme(url))","if (""http"".equals(org.apache.axis2.util.Utils.getURIScheme(url)) || ""https"".equals(org.apache.axis2.util.Utils.getURIScheme(url))) {
  Utils.addHttpEndpoint(axisService,url);
}
",0,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
100,"|| ""1"".equals(getParameter(request, Param.NO_CACHE.getKey(), null))) {","if (results.isStrictNoCache() || ""1"".equals(getParameter(request,Param.NO_CACHE.getKey(),null))) {
  refreshInterval=0;
}
 else if (getParameter(request,Param.REFRESH.getKey(),null) != null) {
  try {
    refreshInterval=Integer.valueOf(getParameter(request,Param.REFRESH.getKey(),null));
  }
 catch (  NumberFormatException nfe) {
    throw new GadgetException(GadgetException.Code.INVALID_PARAMETER,""refresh parameter is not a number"",HttpResponse.SC_BAD_REQUEST);
  }
}
 else {
  refreshInterval=Math.max(60 * 60,(int)(results.getCacheTtl() / 1000L));
}
",0,1,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
101,"} else if (depth == 2 && XSI_URI.equals(uri)  && ""xsi"".equals(prefix)) {","if (depth == 2 && XSI_URI.equals(uri) && ""xsi"".equals(prefix)) {
  if (DEBUG_ENABLED) {
    log.debug(""  Supressing xsi namespace declaration on array item"");
  }
}
 else if (depth >= 2) {
  writer.writeNamespace(prefix,uri);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
102,"if (message == null || """".equals(message)) message = ""unknown"";","if (message == null || """".equals(message)) message=""unknown"";
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
103,"if (en.getElementHandle() != null && en.getElementHandle().getKind() == ElementKind.CLASS && ""java.lang.Object"".equals(en.getElementHandle().getBinaryName())) {","if (en.getElementHandle() != null && en.getElementHandle().getKind() == ElementKind.CLASS && ""java.lang.Object"".equals(en.getElementHandle().getBinaryName())) {
  continue;
}
",0,14,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
104,"} else if (args != null && ""as"".equals(method.getName()) && args[0] instanceof Class) {","if (args != null && ""as"".equals(method.getName()) && args[0] instanceof Class) {
  @SuppressWarnings(""unchecked"") Class<? extends PipelineOptions> clazz=(Class<? extends PipelineOptions>)args[0];
  return as(clazz);
}
 else if (args != null && ""populateDisplayData"".equals(method.getName()) && args[0] instanceof DisplayData.Builder) {
  @SuppressWarnings(""unchecked"") DisplayData.Builder builder=(DisplayData.Builder)args[0];
  builder.delegate(new PipelineOptionsDisplayData());
  return Void.TYPE;
}
",0,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
105,"if ("""".equals(name) || name.startsWith(""_field_"") || usedName.contains(name)) {","if ("""".equals(name) || name.startsWith(""_field_"") || usedName.contains(name)) {
  name=""_field_"" + (i + 1);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
106,"if (ua.getOperatingSystem() != null && ""Windows"".equals(ua.getOperatingSystem().getName()) && (ua.getOperatingSystem().getMajorVersion() == 98 || ua.getOperatingSystem().getMajorVersion() == 2000))","if (ua.getOperatingSystem() != null && ""Windows"".equals(ua.getOperatingSystem().getName()) && (ua.getOperatingSystem().getMajorVersion() == 98 || ua.getOperatingSystem().getMajorVersion() == 2000)) {
  if (ua.getOperatingSystem().getMajorVersion() == 98) {
    ua.setOperatingSystem(""Windows 98"",""4"",""90"");
  }
 else   if (ua.getOperatingSystem().getMajorVersion() == 2000) {
    ua.setOperatingSystem(""Windows 2000"",""5"",""0"");
  }
}
",0,2,16,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
107,if (((AtomicLong) _unrecognizedTypeCache.get(type)).get() % 2000L == 0L),"if (((AtomicLong)_unrecognizedTypeCache.get(type)).get() % 2000L == 0L) ((AtomicLong)_unrecognizedTypeCache.get(type)).getAndSet(1L);
",0,12,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
108,"if (ctx.element().key > 26) ctx.emit(Pair.of(ctx.element().key, ctx.element().name)); }, tableOf(ints(), strings()));","if (ctx.element().key > 26) ctx.emit(Pair.of(ctx.element().key,ctx.element().name));
",0,1,14,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
109,"if (result.length == 1 && """".equals(result[0].trim())) return Collections.emptyList();","if (result.length == 1 && """".equals(result[0].trim())) return Collections.emptyList();
",0,2,9,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
110,"if (size() >= 2) throw new IllegalStateException(""Range must be of size 2; cannot add '""+o+""' when currently ""+this);","if (size() >= 2) throw new IllegalStateException(""Range must be of size 2; cannot add '"" + o + ""' when currently ""+ this);
",0,1,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
111,"if (((Map<?,?>)o).size()!=1) {","if (((Map<?,?>)o).size() != 1) {
  throw new IllegalArgumentException(""Unsupported constraint; map input should have a single key: "" + o);
}
",0,0,6,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
112,if (m.size()==1) return m.values().iterator().next();,"if (m.size() == 1) return m.values().iterator().next();
",0,7,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
113,if (value.charAt(idx) == '}') return newInstance(0);,"if (value.charAt(idx) == '}') return newInstance(0);
",0,18,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
114,"} else if (!isManaged() || ""false"".equalsIgnoreCase(getConfig(JcloudsLocation.WAIT_FOR_SSHABLE))) {","if (!isManaged() || ""false"".equalsIgnoreCase(getConfig(JcloudsLocation.WAIT_FOR_SSHABLE))) {
  if (LOG.isTraceEnabled()) {
    LOG.trace(""Machine details for {} missing from Jclouds, but skipping SSH test because {}. name={}, version={}, "" + ""arch={}, ram={}, #cpus={}"",new Object[]{this,(isManaged() ? ""waitForSshable=false"" : ""unmanaged""),name,version,architecture,ram,cpus});
  }
  OsDetails osD=new BasicOsDetails(name.orNull(),architecture.orNull(),version.orNull());
  HardwareDetails hwD=new BasicHardwareDetails(cpus.orNull(),ram.orNull());
  return new BasicMachineDetails(hwD,osD);
}
 else {
  if (LOG.isTraceEnabled()) {
    LOG.trace(""Machine details for {} missing from Jclouds, using SSH test instead. name={}, version={}, "" + ""arch={}, ram={}, #cpus={}"",new Object[]{this,name,version,architecture,ram,cpus});
  }
  return super.detectMachineDetails();
}
",0,0,5,,"SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
115,"if(values.length == 1 && """".equals(values[0].getValue().trim())) return;","if (values.length == 1 && """".equals(values[0].getValue().trim())) return;
",0,3,9,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
116,if (StrictMath.abs(source[1]) >= 89.9) tolerance = 0.1;,"if (StrictMath.abs(source[1]) >= 89.9) tolerance=0.1;
 else if (longitude <= 60) tolerance=Formulas.LINEAR_TOLERANCE;
 else if (longitude <= 66) tolerance=0.1;
 else if (longitude <= 70) tolerance=1;
 else if (longitude <= 72) tolerance=2;
 else if (longitude <= 74) tolerance=10;
 else if (longitude <= 76) tolerance=30;
 else tolerance=1000;
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
117,"if (""\\{}$"".indexOf(s.charAt(pos + 1)) >= 0) {","if (""\\{}$"".indexOf(s.charAt(pos + 1)) >= 0) {
  result.append(s,prev,pos);
  prev=pos + 1;
}
",0,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
118,if (Keyspace.open(keyspaceName).getReplicationStrategy().getReplicationFactor().allReplicas == 1),"if (Keyspace.open(keyspaceName).getReplicationStrategy().getReplicationFactor().allReplicas == 1) continue;
",0,8,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
119,if (Character.toUpperCase(s.charAt(0)) == 'N') {,"if (Character.toUpperCase(s.charAt(0)) == 'N') {
  return CalciteSystemProperty.DEFAULT_NATIONAL_CHARSET.value();
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
120,if (inputs.stream().filter(input -> input.getDataType() == dt && pname.equals(input.getName())).count() != 1) {,"if (inputs.stream().filter(input -> input.getDataType() == dt && pname.equals(input.getName())).count() != 1) {
  throw new DMLRuntimeException(String.format(""The '%s' function should provide "" + ""an input of '%s' type named '%s'."",_updFunc,dt,pname));
}
",0,1,13,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
121,"if (10 > mbs.queryNames(name, null).size()) {","if (10 > mbs.queryNames(name,null).size()) {
  Thread.sleep(100);
}
 else {
  break;
}
",0,1,6,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
122,if (pigGroup.getInputs((LogicalPlan) pigGroup.getPlan()).size() == 1) {,"if (pigGroup.getInputs((LogicalPlan)pigGroup.getPlan()).size() == 1) {
  final Operator input=pigGroup.getInputs((LogicalPlan)pigGroup.getPlan()).get(0);
  if (input instanceof LOForEach) {
    final LOForEach foreach=(LOForEach)input;
    if (foreach.getInnerPlan().getSinks().size() == 1) {
      final LOGenerate generate=(LOGenerate)foreach.getInnerPlan().getSinks().get(0);
      final List<LogicalExpressionPlan> projectList=generate.getOutputPlans();
      if (projectList.size() > 1) {
        final LogicalExpressionPlan exPlan=projectList.get(0);
        if (exPlan.getSources().size() == 1 && exPlan.getSources().get(0) instanceof UserFuncExpression) {
          final UserFuncExpression func=(UserFuncExpression)exPlan.getSources().get(0);
          if (func.getFuncSpec().getClassName().equals(CubeDimensions.class.getName())) {
            return GroupType.CUBE;
          }
          if (func.getFuncSpec().getClassName().equals(RollupDimensions.class.getName())) {
            return GroupType.ROLLUP;
          }
        }
      }
    }
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
123,"if (productInfo.get(""inShippingBox"") != null && ""Y"".equalsIgnoreCase((String) productInfo.get(""inShippingBox""))","if (productInfo.get(""inShippingBox"") != null && ""Y"".equalsIgnoreCase((String)productInfo.get(""inShippingBox"")) && productInfo.get(""shippingDepth"") != null && productInfo.get(""shippingWidth"") != null && productInfo.get(""shippingHeight"") != null) {
  Element dimensionsElement=UtilXml.addChildElement(packageElement,""Dimensions"",requestDoc);
  UtilXml.addChildElementValue(dimensionsElement,""Length"",productInfo.get(""shippingDepth"").toString(),requestDoc);
  UtilXml.addChildElementValue(dimensionsElement,""Width"",productInfo.get(""shippingWidth"").toString(),requestDoc);
  UtilXml.addChildElementValue(dimensionsElement,""Height"",productInfo.get(""shippingHeight"").toString(),requestDoc);
}
",0,4,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
124,"if (""properties"".equals(name) && findByTypeWithName(PropertiesComponent.class).containsKey(""properties"")) {","if (""properties"".equals(name) && findByTypeWithName(PropertiesComponent.class).containsKey(""properties"")) {
  return getReferenceByName(manager,name,PropertiesComponent.class).orElse(null);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
125,if (Math.abs(v.get(0) - v.get(1)) < 0.01),"if (Math.abs(v.get(0) - v.get(1)) < 0.01) return 0.;
 else return 1.;
",0,2,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
126,"} else if (""OPTIONS"".equals(method) || CamelWebSocketHandler.class == this.handler.getClass()","if (""OPTIONS"".equals(method) || CamelWebSocketHandler.class == this.handler.getClass() && CamelWebSocketHandler.class == handler.getClass()) {
  refCount++;
  return this.handler;
}
 else {
  throw new IllegalArgumentException(String.format(""Duplicate handler for %s method: '%s', '%s'"",method,this.handler,handler));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
127,"if (""j2se"".equals(spec.getName()) && Util.JDK9.compareTo(spec.getVersion()) <= 0) {","if (""j2se"".equals(spec.getName()) && Util.JDK9.compareTo(spec.getVersion()) <= 0) {
  java9=jp;
  break;
}
",0,12,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
128,"if (!optionPlaceholder && !lookup && javaType != null && ""array"".equals(row.getType())) {","if (!optionPlaceholder && !lookup && javaType != null && ""array"".equals(row.getType())) {
  if (suffix == null || suffix.isEmpty() || suffix.equals(""."")) {
    result.addInvalidArray(longKey,value);
  }
 else   if (!suffix.startsWith(""["") && !suffix.contains(""]"")) {
    result.addInvalidArray(longKey,value);
  }
 else {
    String index=CatalogHelper.before(suffix.substring(1),""]"");
    boolean valid=validateInteger(index);
    if (!valid) {
      result.addInvalidInteger(longKey,index);
    }
  }
}
",0,0,8,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
129,"if (StringHelper.countChar(path, '@', idxPath) > 1) {","if (StringHelper.countChar(path,'@',idxPath) > 1) {
  String userInfoPath=idxPath > 0 ? path.substring(0,idxPath) : path;
  int max=userInfoPath.lastIndexOf('@');
  String before=userInfoPath.substring(0,max);
  String after=path.substring(max);
  before=StringHelper.replaceAll(before,""@"",""%40"");
  path=before + after;
}
",0,5,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
130,"if (""org.apache.camel"".equals(groupId) && artifactId.startsWith(""camel-"") && !""test-jar"".equals(type)) {","if (""org.apache.camel"".equals(groupId) && artifactId.startsWith(""camel-"") && !""test-jar"".equals(type)) {
  String starterArtifact=artifactId + ""-starter"";
  File starterFile=new File(""../../components-starter/"" + starterArtifact);
  if (starterFile.exists()) {
    dependencyXml=dependencyXml.replace(artifactId,starterArtifact);
  }
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
131,if (str.charAt(idx) != '(') throw new IllegalStateException();,"if (str.charAt(idx) != '(') throw new IllegalStateException();
",0,6,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
"
132,"if(s.charAt(i) == '\n') encoded.append(""\\n""); else encoded.append(s.charAt(i));","if (s.charAt(i) == '\n') encoded.append(""\\n"");
 else encoded.append(s.charAt(i));
",0,1,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-elseStatement, ),
"
133,if (fieldNames.stream().filter(isEqual(name)).count() > 1),"if (fieldNames.stream().filter(isEqual(name)).count() > 1) throw ire(""Duplicate field name %s in type %s"",name,keyspaceName,userType.getCqlTypeName());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
134,if (validated.size() - validated.get(localRack).size() >= 2),"if (validated.size() - validated.get(localRack).size() >= 2) {
  validated.removeAll(localRack);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
135,if (1 >= this.shared.refCount.incrementAndGet()),"if (1 >= this.shared.refCount.incrementAndGet()) throw new IllegalStateException();
",0,9,5,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
136,if (start.subtract(problem.getInitialState().getTime()).divide(integrator.getCurrentSignedStepsize()).abs().getReal() > 0.001) {,"if (start.subtract(problem.getInitialState().getTime()).divide(integrator.getCurrentSignedStepsize()).abs().getReal() > 0.001) {
  if (expectedStepStart != null) {
    T stepError=RealFieldElement.max(maxTimeError,start.subtract(expectedStepStart).abs());
    for (    T eventTime : problem.getTheoreticalEventsTimes()) {
      stepError=RealFieldElement.min(stepError,start.subtract(eventTime).abs());
    }
    maxTimeError=RealFieldElement.max(maxTimeError,stepError);
  }
  expectedStepStart=start.add(integrator.getCurrentSignedStepsize());
}
",0,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
137,if (theUnsafe.arrayIndexScale(byte[].class) != 1) { throw new AssertionError(); },"if (theUnsafe.arrayIndexScale(byte[].class) != 1) {
  throw new AssertionError();
}
",0,5,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(ArrayType-elementType, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
138,else if (Math.random() > 0.98) timeout = Long.MAX_VALUE;,"if (Math.random() > 0.98) timeout=Long.MAX_VALUE;
 else if (pending.size() == executorCount) timeout=pending.first().timeout;
 else timeout=(long)(Math.random() * pending.last().timeout);
",0,5,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
139,if (Math.random() > 0.5) baseTime = 2 * (long) (workTime.sample() * multiplier);,"if (Math.random() > 0.5) baseTime=2 * (long)(workTime.sample() * multiplier);
 else baseTime=0;
",0,7,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
140,"if (((int) get(""num_tokens"")) > 1)","if (((int)get(""num_tokens"")) > 1) throw new IllegalArgumentException(""In-JVM dtests do not support vnodes as of now."");
",0,0,4,,"PrimitiveType(CastExpression-type, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
141,if (0x50 == (signature[0] & 0xF0)) {,"if (0x50 == (signature[0] & 0xF0)) {
  for (int i=0; i < SKIPPABLE_FRAME_MAGIC.length; ++i) {
    if (signature[i + 1] != SKIPPABLE_FRAME_MAGIC[i]) {
      return false;
    }
  }
  return true;
}
",0,1,4,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
142,"if (in.read(buf,0, 128) != 128) return;","if (in.read(buf,0,128) != 128) return;
",0,100,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
143,if (AccurateMath.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {,"if (AccurateMath.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {
  Assert.fail(""Failed cross products... i = "" + i + "" j = ""+ j);
}
",0,12,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
144,else if (c<='F') c = (c -'A') + 10;,"if (c <= 'F') c=(c - 'A') + 10;
 else c=(c - 'a') + 10;
",0,6,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
145,"if(( ch = s.charAt( index )) == '\""' ) {","if ((ch=s.charAt(index)) == '\""') {
  sb.append(""\\\"""");
}
 else if (ch == '\\') {
  sb.append(""\\\\"");
}
 else if (ch == '\'') {
  sb.append(""\\'"");
}
 else {
  sb.append(ch);
}
",0,34,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
146,"if (""resources"".equals(currentRoot) && attributes.getIndex(""type"") == -1 && attributes.getIndex(""class-name"") == -1 && attributes.getIndex(""provider"") == -1) {","if (""resources"".equals(currentRoot) && attributes.getIndex(""type"") == -1 && attributes.getIndex(""class-name"") == -1 && attributes.getIndex(""provider"") == -1) {
  attributes.addAttribute(null,""type"",""type"",null,""DataSource"");
}
",0,1,15,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
147,"if(json.get(""type"").toString().intern()==""custom"".intern()) {","if (json.get(""type"").toString().intern() == ""custom"".intern()) {
  control=(String)json.get(""control"");
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
148,"if(doc.getText(0, doc.getLength()).charAt(doc.getLength()-1) == '>'){","if (doc.getText(0,doc.getLength()).charAt(doc.getLength() - 1) == '>') {
  removeEndIndex=origLen;
}
 else removeEndIndex=origLen - 1;
",0,61,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
149,"if (_nicDao.listByNetworkIdTypeAndGatewayAndBroadcastUri(nic.getNetworkId(), VirtualMachine.Type.User, nic.getIPv4Gateway(), nic.getBroadcastUri()).size() > 1) {","if (_nicDao.listByNetworkIdTypeAndGatewayAndBroadcastUri(nic.getNetworkId(),VirtualMachine.Type.User,nic.getIPv4Gateway(),nic.getBroadcastUri()).size() > 1) {
  return false;
}
",0,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
150,"if (""cifs"".equalsIgnoreCase((String) params.get(""protocol"")) && details != null) {","if (""cifs"".equalsIgnoreCase((String)params.get(""protocol"")) && details != null) {
  String user=details.get(""user"");
  String password=details.get(""password"");
  String domain=details.get(""domain"");
  String updatedPath=(String)params.get(""url"");
  if (user == null || password == null) {
    String errMsg=""Missing cifs user and password details. Add them as details parameter."";
    throw new InvalidParameterValueException(errMsg);
  }
 else {
    try {
      password=DBEncryptionUtil.encrypt(URLEncoder.encode(password,""UTF-8""));
      details.put(""password"",password);
      updatedPath+=""?user="" + user + ""&password=""+ password+ ""&domain=""+ domain;
    }
 catch (    UnsupportedEncodingException e) {
      throw new CloudRuntimeException(""Error while generating the cifs url. "" + e.getMessage());
    }
    store.setUrl(updatedPath);
  }
}
",0,2,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
151,"} else if (""text"".equals(type.getType()) && !MediaType.TEXT_PLAIN.equals(type)) {","if (""text"".equals(type.getType()) && !MediaType.TEXT_PLAIN.equals(type)) {
  return MediaType.TEXT_PLAIN;
}
 else if (type.getType().contains(""empty"") && !MediaType.EMPTY.equals(type)) {
  return MediaType.EMPTY;
}
 else if (!MediaType.OCTET_STREAM.equals(type)) {
  return MediaType.OCTET_STREAM;
}
 else {
  return null;
}
",0,3,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
152,"if (MapUtils.isNotEmpty(host.getDetails()) && host.getDetails().containsKey(Host.HOST_UEFI_ENABLE) && ""false"".equalsIgnoreCase(host.getDetails().get(Host.HOST_UEFI_ENABLE))) {","if (MapUtils.isNotEmpty(host.getDetails()) && host.getDetails().containsKey(Host.HOST_UEFI_ENABLE) && ""false"".equalsIgnoreCase(host.getDetails().get(Host.HOST_UEFI_ENABLE))) {
  s_logger.debug(""Cannot deploy to specified host as host does n't support uefi vm deployment, returning."");
  return null;
}
",0,0,14,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
153,if (Integer.parseInt(vnetList.get(i + 1)) - Integer.parseInt(vnetList.get(i)) > 1) {,"if (Integer.parseInt(vnetList.get(i + 1)) - Integer.parseInt(vnetList.get(i)) > 1) {
  endvnet=vnetList.get(i);
  vnetRange=vnetRange + startvnet + ""-""+ endvnet+ "","";
  startvnet=vnetList.get(i + 1);
}
",0,2,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
154,if (AccurateMath.abs(pc[i+off2] - yxcorr[ i] / (AccurateMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {,"if (AccurateMath.abs(pc[i + off2] - yxcorr[i] / (AccurateMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {
  Assert.fail(""Assert.failed cross product i = "" + i + "" y"");
}
",0,7,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
155,"if (tableName != """") columnName = tableName + ""."" + columnName;","if (tableName != """") columnName=tableName + ""."" + columnName;
",0,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
156,"} else if (node instanceof Element && FormsConstants.DEFINITION_NS.equals(node.getNamespaceURI()) && ""item"".equals(node.getLocalName())) {","if (node instanceof Element && FormsConstants.DEFINITION_NS.equals(node.getNamespaceURI()) && ""item"".equals(node.getLocalName())) {
  if (convertor == null) {
    convertor=datatype.getConvertor();
  }
  Element element=(Element)node;
  String stringValue=element.getAttribute(""value"");
  Object value;
  if ("""".equals(stringValue)) {
    value=null;
  }
 else {
    ConversionResult conversionResult=convertor.convertFromString(stringValue,Locale.US,formatCache);
    if (!conversionResult.isSuccessful()) {
      throw new Exception(""Could not convert the value \"""" + stringValue + ""\"" to the type ""+ datatype.getDescriptiveName()+ "", defined at ""+ DomHelper.getLocation(element));
    }
    value=conversionResult.getResult();
  }
  XMLizable label=null;
  Element labelEl=DomHelper.getChildElement(element,FormsConstants.DEFINITION_NS,""label"");
  if (labelEl != null) {
    label=DomHelper.compileElementContent(labelEl);
  }
  selectionList.addItem(value,label);
}
",0,0,10,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
157,"} else if (q > 0.0 && ""*"".equals(this.type.getSubtype()) && type.getType().equals(this.type.getType())) {","if (q > 0.0 && ""*"".equals(this.type.getSubtype()) && type.getType().equals(this.type.getType())) {
  return q - CORRECTIONFORSUBTYPEMATCH;
}
 else {
  return 0.0;
}
",0,1,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
158,if (configurations.length < 1) return (list);,"if (configurations.length < 1) return (list);
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ParenthesizedExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
"
159,"if (bufs[currentRevIndex].toString().split(""."").length>4)","if (bufs[currentRevIndex].toString().split(""."").length > 4) bufs[currentRevIndex].append(""\n"");
",0,17,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
160,"if (""create"".equals(operation) && this.key != null && this.key.endsWith(""/"")) {","if (""create"".equals(operation) && this.key != null && this.key.endsWith(""/"")) {
}
 else if (!""delete"".equals(operation)) {
  queryWriter=new StringWriter(256);
  try {
    this.queryHandler=getTransformerFactory().newTransformerHandler();
    this.queryHandler.setResult(new StreamResult(queryWriter));
    this.queryHandler.getTransformer().setOutputProperties(format);
  }
 catch (  TransformerConfigurationException e) {
    throw new SAXException(""Failed to get transformer handler"",e);
  }
  this.queryHandler.startDocument();
  Iterator i=prefixMap.entrySet().iterator();
  while (i.hasNext()) {
    Map.Entry entry=(Map.Entry)i.next();
    this.queryHandler.startPrefixMapping((String)entry.getKey(),(String)entry.getValue());
  }
}
",0,2,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
161,if (x <= 9) return (char)(x + '0');,"if (x <= 9) return (char)(x + '0');
 else return (char)(x - 10 + 'A');
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
"
162,if (iter.next().toString().charAt(0) == '2') return;,"if (iter.next().toString().charAt(0) == '2') return;
",0,4,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
163,"if (relativePath.charAt(0) == '/') return getWebappRelativeFile(relativePath, true, env);","if (relativePath.charAt(0) == '/') return getWebappRelativeFile(relativePath,true,env);
",0,22,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
164,if ((ch = this.read()) == 1) valid++;,"if ((ch=this.read()) == 1) valid++;
 else throw new SAXException(""Unrecognized file format (."" + valid + "",""+ ch+ "")"");
",0,9,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
165,if ((matchLength = match.length) < 2) {,"if ((matchLength=match.length) < 2) {
  instruction=new TABLESWITCH(match,targets,target);
}
 else {
  sort(0,matchLength - 1);
  if (matchIsOrdered(max_gap)) {
    fillup(max_gap,target);
    instruction=new TABLESWITCH(this.match,this.targets,target);
  }
 else {
    instruction=new LOOKUPSWITCH(this.match,this.targets,target);
  }
}
",0,0,3,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
166,"if (new File(System.getProperty(""user.dir"")).listFiles(new PatternFilenameFilter(""gradlew"")).length == 1) {","if (new File(System.getProperty(""user.dir"")).listFiles(new PatternFilenameFilter(""gradlew"")).length == 1) {
  gradlewFile=new File(System.getProperty(""user.dir"") + File.separator + ""gradlew"");
}
 else {
  if (new File(System.getProperty(""user.dir"")).getParentFile().getParentFile().listFiles(new PatternFilenameFilter(""gradlew"")).length == 1) {
    gradlewFile=new File(new File(System.getProperty(""user.dir"")).getParentFile().getParentFile().getAbsolutePath() + File.separator + ""gradlew"");
  }
 else {
    Assert.fail(""Cannot find gradlew executable in ["" + System.getProperty(""user.dir"") + ""] or [""+ new File(System.getProperty(""user.dir"")).getParentFile().getAbsolutePath()+ ""]"");
  }
}
",0,5,9,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
167,if (householderVectors[m][m - 1] != 0.0) {,"if (householderVectors[m][m - 1] != 0.0) {
  for (int i=m + 1; i <= high; i++) {
    ort[i]=householderVectors[i][m - 1];
  }
  for (int j=m; j <= high; j++) {
    double g=0.0;
    for (int i=m; i <= high; i++) {
      g+=ort[i] * pa[i][j];
    }
    g=(g / ort[m]) / householderVectors[m][m - 1];
    for (int i=m; i <= high; i++) {
      pa[i][j]+=g * ort[i];
    }
  }
}
",0,11,5,,"SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
168,"if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {","if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {
  return true;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
169,"if (""use"".equals(name) && args != null && args.length == 2 && args[1].equals(CLOSURE_TYPE)) {","if (""use"".equals(name) && args != null && args.length == 2 && args[1].equals(CLOSURE_TYPE)) {
  category=true;
  for (  MethodNode method : foundMethods) {
    if (!(method instanceof ExtensionMethodNode) || !((ExtensionMethodNode)method).getExtensionMethodNode().getDeclaringClass().equals(DGM_CLASSNODE)) {
      category=false;
      break;
    }
  }
}
",0,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
170,} else if (AccurateMath.abs(res.vals[res.nVals - 1]) < 1e-100) {,"if (AccurateMath.abs(res.vals[res.nVals - 1]) < 1e-100) {
  return res.vals[n];
}
",0,23,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
171,"if(reply.charAt(0) != ' ') { reply = "" "" + reply; }","if (reply.charAt(0) != ' ') {
  reply="" "" + reply;
}
",0,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
172,if ( ( calendar.get( Calendar.MONTH ) + 1 ) < 10 ),"if ((calendar.get(Calendar.MONTH) + 1) < 10) szDate+=""0"" + (calendar.get(Calendar.MONTH) + 1);
 else szDate+="""" + (calendar.get(Calendar.MONTH) + 1);
",0,7,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
173,if (logLevel >= 4) { factory.setDebug(true); },"if (logLevel >= 4) {
  factory.setDebug(true);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
174,"if (args.size() < 1) throw _MessageUtil.newArgCntError(""?"" + key, args.size(), 1);","if (args.size() < 1) throw _MessageUtil.newArgCntError(""?"" + key,args.size(),1);
",0,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
175,"if (closeButtonCaption != """") footer.setPadding(this.dpToPixels(8), this.dpToPixels(8), this.dpToPixels(8), this.dpToPixels(8));","if (closeButtonCaption != """") footer.setPadding(this.dpToPixels(8),this.dpToPixels(8),this.dpToPixels(8),this.dpToPixels(8));
",0,0,16,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
176,"LCollection<String> result = lc().parallelDo(ctx -> { if (ctx.element().key > 26) ctx.emit(ctx.element().name); }, strings());","LCollection<String> result=lc().parallelDo(ctx -> {
  if (ctx.element().key > 26)   ctx.emit(ctx.element().name);
}
,strings());
",0,12,16,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
177,if(line.charAt(line.length()-i) == ' '){,"if (line.charAt(line.length() - i) == ' ') {
  charNum++;
  if (i > 1) {
    System.err.println(fn + ""contains some weird lines."");
  }
}
 else {
  break;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
178,if (s.length==1) return new Span();,"if (s.length == 1) return new Span();
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
"
179,"if (this.featureSelectionThreshold > 0 && ""org.apache.ctakes.temporal.ae.TimeAnnotator"".equals(this.annotatorClass.getName()) ) {","if (this.featureSelectionThreshold > 0 && ""org.apache.ctakes.temporal.ae.TimeAnnotator"".equals(this.annotatorClass.getName())) {
  Iterable<Instance<String>> instances=InstanceStream.loadFromDirectory(this.getModelDirectory(directory));
  FeatureSelection<String> featureSelection=TimeAnnotator.createFeatureSelection(this.featureSelectionThreshold);
  featureSelection.train(instances);
  featureSelection.save(TimeAnnotator.createFeatureSelectionURI(this.getModelDirectory(directory)));
  LibLinearStringOutcomeDataWriter dataWriter=new LibLinearStringOutcomeDataWriter(this.getModelDirectory(directory));
  for (  Instance<String> instance : instances) {
    dataWriter.write(featureSelection.transform(instance));
  }
  dataWriter.finish();
}
",0,4,8,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
180,"if ( (event.getType() == PathChildrenCacheEvent.Type.CHILD_UPDATED) && ""/test"".equals(event.getData().getPath()) )","if ((event.getType() == PathChildrenCacheEvent.Type.CHILD_UPDATED) && ""/test"".equals(event.getData().getPath())) {
  changes.release();
}
",0,3,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
181,"if (""setResource3"".equals(m.getName()) && types[i].equals(String.class)) {","if (""setResource3"".equals(m.getName()) && types[i].equals(String.class)) {
  types[i]=CharSequence.class;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
182,"if (""true"".equals(val) || Boolean.TRUE.equals(val) || mtomEnabled) {","if (""true"".equals(val) || Boolean.TRUE.equals(val) || mtomEnabled) {
  setMtomEnabled(true);
  aegisContext.setMtomEnabled(true);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, IfStatement-expression, ),
"
183,"if (!""HTTP"".equals(statusLine.substring(at, at += 4))) {","if (!""HTTP"".equals(statusLine.substring(at,at+=4))) {
  log.warn(""Status-Line '"" + statusLine + ""' does not start with HTTP"");
}
",0,10,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(Assignment-rightHandSide, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
184,"if (su.length() > 4 && "".jar"".equals(su.substring(su.length()-4).toLowerCase(Locale.ENGLISH))) {","if (su.length() > 4 && "".jar"".equals(su.substring(su.length() - 4).toLowerCase(Locale.ENGLISH))) {
  u=FileUtil.getArchiveRoot(u);
}
 else if (!su.endsWith(""/"")) {
  u=new URL(su + '/');
}
",0,10,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
185,"&& ""getField"".equals(((Record) records.get(rec.exp","if (isStaticConstantsSupported && ""getField"".equals(((Record)records.get(rec.exp.getTarget())).exp.getMethodName())) {
  records.remove(obj);
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
"
186,"if (TraversalHelper.getStepsOfAssignableClassRecursively(Scope.global, Barrier.class, traversal).size() != 1)","if (TraversalHelper.getStepsOfAssignableClassRecursively(Scope.global,Barrier.class,traversal).size() != 1) return false;
",0,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
187,"if (""target"".equals(parser.getLocalName()) && targetName.equals(parser.getAttributeValue(null,""name""))) {","if (""target"".equals(parser.getLocalName()) && targetName.equals(parser.getAttributeValue(null,""name""))) {
  found=true;
  break;
}
",0,1,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
188,"if (depth == 1 && ""main"".equals(methodName) && !""java.lang.Thread"".equals(this.className) &&","if (depth == 1 && ""main"".equals(methodName) && !""java.lang.Thread"".equals(this.className) && ""java.lang.Thread"".equals(className) && ""exit"".equals(getDebuggerImpl().getThread(tr).getMethodName())) {
  return true;
}
",0,15,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
189,"if (realClass == SecureBookStore.class && ""getThatBook"".equals(m.getName())","if (realClass == SecureBookStore.class && ""getThatBook"".equals(m.getName()) && ""baddy"".equals(p.getName())) {
  return new MessageContentsList(Response.status(Response.Status.FORBIDDEN).build());
}
",0,5,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
190,"if (TreeUtilities.CLASS_TREE_KINDS.contains(parent.getKind()) && mth.getReturnType() == null && ""<init>"".contentEquals(mth.getName()) &&","if (TreeUtilities.CLASS_TREE_KINDS.contains(parent.getKind()) && mth.getReturnType() == null && ""<init>"".contentEquals(mth.getName()) && mth.getModifiers().getFlags().contains(Modifier.PUBLIC) && !((ClassTree)parent).getModifiers().getFlags().contains(Modifier.PUBLIC)) {
  return ErrorDescriptionFactory.forName(context,mth,NbBundle.getMessage(ClassStructure.class,""MSG_PublicConstructorInNonPublicClass"",mth.getName()),FixFactory.removeModifiersFix(context.getInfo(),TreePath.getPath(context.getPath(),mth.getModifiers()),EnumSet.of(Modifier.PUBLIC),NbBundle.getMessage(ClassStructure.class,""FIX_RemovePublicFromConstructor"")));
}
",0,6,11,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
191,"if ((principal == null) || """".equals(principal) || (credentials == null)","if ((principal == null) || """".equals(principal) || (credentials == null)|| """".equals(credentials)|| (authorities == null)|| (userDetails == null)|| (response == null)) {
  throw new IllegalArgumentException(""Cannot pass null or empty values to constructor"");
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
192,"|| """".equals(credentials) || (authorities == null) || (userDetails == null) || (response == null)) {","if ((principal == null) || """".equals(principal) || (credentials == null)|| """".equals(credentials)|| (authorities == null)|| (userDetails == null)|| (response == null)) {
  throw new IllegalArgumentException(""Cannot pass null or empty values to constructor"");
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
193,if ((buffer_[pos_++] & 0xFF) != 0xd0) {,"if ((buffer_[pos_++] & 0xFF) != 0xd0) {
  doSyntaxrmSemantics(CodePoint.SYNERRCD_CBYTE_NOT_D0);
}
",0,4,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
194,"if (!ASTERISK.equals(keyValue[1]) && """".equals(configuredValue))","if (!ASTERISK.equals(keyValue[1]) && """".equals(configuredValue)) {
  continue;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
195,"if (arity.size() == 1) { return Range.valueOf(arity.min * index.size() + """"); }","if (arity.size() == 1) {
  return Range.valueOf(arity.min * index.size() + """");
}
",0,11,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
196,if (iterators.size() == 1) { return iterators.get(0); },"if (iterators.size() == 1) {
  return iterators.get(0);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
197,if ((this.byteBufferRead.position() - this.processPosition) >= 8) {,"if ((this.byteBufferRead.position() - this.processPosition) >= 8) {
  int pos=this.byteBufferRead.position() - (this.byteBufferRead.position() % 8);
  long readOffset=this.byteBufferRead.getLong(pos - 8);
  this.processPosition=pos;
  HAConnection.this.slaveAckOffset=readOffset;
  if (HAConnection.this.slaveRequestOffset < 0) {
    HAConnection.this.slaveRequestOffset=readOffset;
    log.info(""slave["" + HAConnection.this.clientAddr + ""] request offset ""+ readOffset);
  }
  HAConnection.this.haService.notifyTransferSome(HAConnection.this.slaveAckOffset);
}
",0,2,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
198,"if (c != '""') throw StandardException.newException(SQLState.ID_PARSE_ERROR);","if (c != '""') throw StandardException.newException(SQLState.ID_PARSE_ERROR);
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
199,if (createCount > 1) throw newSQLException(SQLState.CONFLICTING_CREATE_ATTRIBUTES);,"if (createCount > 1) throw newSQLException(SQLState.CONFLICTING_CREATE_ATTRIBUTES);
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
200,if ( expirationThreshold <= 0L ) { return null; },"if (expirationThreshold <= 0L) {
  return null;
}
 else {
  return expirationThreshold;
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
201,"if ( sqlTypeName.charAt( 0 ) != '""' ) { return sqlTypeName; }","if (sqlTypeName.charAt(0) != '""') {
  return sqlTypeName;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
202,if ( spaceLeft < 0L ) { spaceLeft = Long.MAX_VALUE; },"if (spaceLeft < 0L) {
  spaceLeft=Long.MAX_VALUE;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
203,if ( step < 0.0 ) { step = -step; },"if (step < 0.0) {
  step=-step;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
204,if ( remainderLength <= 1 ) { list.add( newStart ); },"if (remainderLength <= 1) {
  list.add(newStart);
}
 else {
  int[] newRemainder=new int[remainderLength - 1];
  int index=0;
  for (int i=0; i < remainderLength; i++) {
    if (i != idx) {
      newRemainder[index++]=remainder[i];
    }
  }
  permute(list,newStart,newRemainder);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
205,if(ia3++>100){RuntimeAdditionalTest0.killCat();return;},"if (ia3++ > 100) {
  RuntimeAdditionalTest0.killCat();
  return;
}
",0,1,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
ReturnStatement(Block-statements, IfStatement-thenStatement, ),
"
206,"if (rmd.getColumnCount() != 1) new Exception(""bad column count"");","if (rmd.getColumnCount() != 1) new Exception(""bad column count"");
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
207,if (tkns[i].charAt(tkns[i].length()-1) != '\\') {,"if (tkns[i].charAt(tkns[i].length() - 1) != '\\') {
  sb.append(""\\\\"");
}
",0,9,8,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
208,"if ( ""<clinit>"".equals( name ) && ( access & Opcodes.ACC_STATIC ) != 0 )","if (""<clinit>"".equals(name) && (access & Opcodes.ACC_STATIC) != 0) {
  staticInitializerFound=true;
}
",0,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
209,if ( filter.toString().length() - aep.length == 2 ),"if (filter.toString().length() - aep.length == 2) {
  aep.offset-=1;
  aep.length+=2;
  aep.caretOffset=aep.offset;
  aep.shiftsCaret=false;
}
",0,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
210,"&& ""Dn"".equalsIgnoreCase( cursor.getRow().getParent().getColumns()[0].getText() ) )","if (cursor.getColumn() == 0 && ""Dn"".equalsIgnoreCase(cursor.getRow().getParent().getColumns()[0].getText())) {
  checkDnLink(item);
}
",0,1,8,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
211,if (sharedFormulaRecords.length + firstCells.length + arrayRecords.length + tableRecords.length < 1) {,"if (sharedFormulaRecords.length + firstCells.length + arrayRecords.length+ tableRecords.length < 1) {
  return createEmpty();
}
",0,1,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
212,"if (nameEl != null && requiredEl != null && editableEl != null && ""true"".equals(XMLUtil.findText(editableEl))) {","if (nameEl != null && requiredEl != null && editableEl != null && ""true"".equals(XMLUtil.findText(editableEl))) {
  String r=XMLUtil.findText(requiredEl);
  Param par=new Param(XMLUtil.findText(nameEl),""true"".equals(r));
  params.add(par);
}
",0,1,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
213,if (fieldEntry.getValue().entrySet().stream().mapToInt(Multiset.Entry::getCount).sum() > 1) {,"if (fieldEntry.getValue().entrySet().stream().mapToInt(Multiset.Entry::getCount).sum() > 1) {
  errors.add(StringUtils.format(""[%s] seen in %s"",fieldEntry.getKey(),fieldEntry.getValue().entrySet().stream().map(entry -> StringUtils.format(""%s%s"",entry.getElement(),entry.getCount() == 1 ? """" : StringUtils.format("" (%d occurrences)"",entry.getCount()))).collect(Collectors.joining("", ""))));
}
",0,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ExpressionMethodReference-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
214,"if (latch != null && ""segment/count"".equals(event.toMap().get(""metric""))) {","if (latch != null && ""segment/count"".equals(event.toMap().get(""metric""))) {
  latch.countDown();
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
215,"if (""*"".equals(mask[i]) || mask[i].equals(ipAddress[i])) {","if (""*"".equals(mask[i]) || mask[i].equals(ipAddress[i])) {
  continue;
}
 else if (mask[i].contains(""-"")) {
  String[] rangeNumStrs=StringUtils.split(mask[i],'-');
  if (rangeNumStrs.length != 2) {
    throw new IllegalArgumentException(""There is wrong format of ip Address: "" + mask[i]);
  }
  Integer min=getNumOfIpSegment(rangeNumStrs[0],isIpv4);
  Integer max=getNumOfIpSegment(rangeNumStrs[1],isIpv4);
  Integer ip=getNumOfIpSegment(ipAddress[i],isIpv4);
  if (ip < min || ip > max) {
    return false;
  }
}
 else if (""0"".equals(ipAddress[i]) && (""0"".equals(mask[i]) || ""00"".equals(mask[i]) || ""000"".equals(mask[i])|| ""0000"".equals(mask[i]))) {
  continue;
}
 else if (!mask[i].equals(ipAddress[i])) {
  return false;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
216,"if ((COMMA_SPLIT_PATTERN.split(group)).length > 1 || ""*"".equals(group)) {","if ((COMMA_SPLIT_PATTERN.split(group)).length > 1 || ""*"".equals(group)) {
  return doRefer(Cluster.getCluster(MergeableCluster.NAME),registry,type,url,qs);
}
",0,0,8,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
217,"if (webappUrl.substring(1).split(""/"").length < 3) {","if (webappUrl.substring(1).split(""/"").length < 3) {
  return null;
}
",0,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
218,"if (BLAS.getInstance().dnrm2(gradient.length, gradient, 1) < 1e-4)","if (BLAS.getInstance().dnrm2(gradient.length,gradient,1) < 1e-4) break;
",0,1,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
219,"if (""sayHello"".equals(invocation.getMethodName())","if (""sayHello"".equals(invocation.getMethodName()) && invocation.getParameterTypes().length == 1 && String.class.equals(invocation.getParameterTypes()[0]) && invocation.getArguments().length == 1 && ""dubbo"".equals(invocation.getArguments()[0]) && DemoService.class.getName().equals(invocation.getAttachment(""path"")) && DemoService.class.getName().equals(invocation.getAttachment(""interface"")) && ""0.0.0"".equals(invocation.getAttachment(""version""))) {
  return true;
}
",0,0,4,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
220,if (field.getSpecification().streamAssociations(MixedIn.INCLUDED).limit(1).count() == 0L) {,"if (field.getSpecification().streamAssociations(MixedIn.INCLUDED).limit(1).count() == 0L) {
  if (log.isDebugEnabled()) {
    log.debug(""includeField(Pl, Vec, Str): field is value; done"");
  }
  return false;
}
",0,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
221,"if (TimeUnit.SECONDS.convert(System.nanoTime() - this.lastLogTimeNanos, TimeUnit.NANOSECONDS) > 60) {","if (TimeUnit.SECONDS.convert(System.nanoTime() - this.lastLogTimeNanos,TimeUnit.NANOSECONDS) > 60) {
  logAggregatedRequests(prefix);
}
",0,5,8,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
222,"if (""true"".equals(this.required) && readOnly == false)","if (""true"".equals(this.required) && readOnly == false) {
  HtmlTag required=writer.startTag(dic.InputRequiredTag());
  required.addAttribute(""class"",dic.InputRequiredClass());
  required.beginBody(""*"");
  required.endTag();
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
223,{   if (s.charAt(i)>='A'),"if (s.charAt(i) >= 'A') return error(FieldErrors.InputNoNumberFormat,null,s);
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
"
224,"} else if (Arrays.asList(VendorsDBNameProp).contains(vName) || ""Unknown"".equals(vName)) {","if (Arrays.asList(VendorsDBNameProp).contains(vName) || ""Unknown"".equals(vName)) {
  url=url + ""/"" + dbVal;
}
",0,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
225,reqResource.m_resource.length() - 1) == '/'),"if (reqResource.m_resource.charAt(reqResource.m_resource.length() - 1) == '/') {
  it.remove();
}
",0,0,4,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
CharacterLiteral(),
"
226,"if (!""true"".equalsIgnoreCase(Felix.m_secureAction.getSystemProperty(FelixConstants.FELIX_EXTENSIONS_DISABLE, ""false"")))","if (!""true"".equalsIgnoreCase(Felix.m_secureAction.getSystemProperty(FelixConstants.FELIX_EXTENSIONS_DISABLE,""false""))) {
  ServiceLoader<ClassPathExtenderFactory> loader=ServiceLoader.load(ClassPathExtenderFactory.class,ExtensionManager.class.getClassLoader());
  for (Iterator<ClassPathExtenderFactory> iter=loader.iterator(); iter.hasNext() && (extenderFramework == null || extenderBoot == null); ) {
    try {
      ClassPathExtenderFactory factory=iter.next();
      if (extenderFramework == null) {
        try {
          extenderFramework=factory.getExtender(ExtensionManager.class.getClassLoader());
        }
 catch (        Throwable t) {
        }
      }
      if (extenderBoot == null) {
        try {
          extenderBoot=factory.getExtender(null);
        }
 catch (        Throwable t) {
        }
      }
    }
 catch (    Throwable t) {
    }
  }
  try {
    if (extenderFramework == null) {
      extenderFramework=new ClassPathExtenderFactory.DefaultClassLoaderExtender().getExtender(ExtensionManager.class.getClassLoader());
    }
  }
 catch (  Throwable t) {
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
227,if (calendar.get(Calendar.YEAR) - yearOfInputDate > 4) {,"if (calendar.get(Calendar.YEAR) - yearOfInputDate > 4) {
  throw new IllegalArgumentException(""Invalid cron expression \"""" + expression + ""\"" led to runaway search for next trigger"");
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
228,"if (raw == null || """".equals(((String) raw).trim()))","if (raw == null || """".equals(((String)raw).trim())) {
  return null;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
229,if (';' != this.snippetCode.charAt((int) lsEnd)) {,"if (';' != this.snippetCode.charAt((int)lsEnd)) {
  this.snippetCode=new StringBuilder(this.snippetCode).insert((int)lsEnd + 1,"";"").toString();
}
",0,5,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
230,"if (column == 1) { return ""Status""; }","if (column == 1) {
  return ""Status"";
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
231,"if (((Set) m.get (""&"")).size () < 2) return false;","if (((Set)m.get(""&"")).size() < 2) return false;
",0,1,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
232,if ((double) this.f <= 0.5D) {,"if ((double)this.f <= 0.5D) {
  this.ensureCapacity(m.size());
}
 else {
  this.tryCapacity((long)(this.size() + m.size()));
}
",0,0,4,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
233,"if (tomEEMojo.settings.getLocalRepository() == null || """".equals(tomEEMojo.settings.getLocalRepository())) {","if (tomEEMojo.settings.getLocalRepository() == null || """".equals(tomEEMojo.settings.getLocalRepository())) {
  tomEEMojo.settings.setLocalRepository(System.getProperty(""openejb.m2.home"",System.getProperty(""user.home"") + ""/.m2/repository""));
}
",0,1,7,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
234,"if ( ""file"".equals( resource.getScheme() ) && !new File( resource ).exists() )","if (""file"".equals(resource.getScheme()) && !new File(resource).exists()) {
  getLog().info(""The bundle "" + n.getAttribute(""presentationname"") + "" - ""+ n.getAttribute(""version"")+ "" will be removed"");
  toRemove.add(n);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
235,if (((String) value).length()<4) return this;,"if (((String)value).length() < 4) return this;
",0,2,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(ReturnStatement-expression, IfStatement-thenStatement, ),
"
236,"if (patternMap.get(""start"").get(0).getId() == 7) {","if (patternMap.get(""start"").get(0).getId() == 7) {
  verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
  verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);
}
 else {
  verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);
  verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
}
",0,5,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
237,if (newKey[pos = (int) MurmurHashUtil.fmix(key[i]) & mask] != 0L) {,"if (newKey[pos=(int)MurmurHashUtil.fmix(key[i]) & mask] != 0L) {
  while (newKey[pos=pos + 1 & mask] != 0L) {
  }
}
",0,1,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
238,"if (at >= 0 && vmArgsValue.size() > at + 1 && ""%classpath"".equals(vmArgsValue.get(at + 1))) {","if (at >= 0 && vmArgsValue.size() > at + 1 && ""%classpath"".equals(vmArgsValue.get(at + 1))) {
  List<String> toMove=vmArgsValue.subList(at,at + 2);
  joinedArgs.subList(0,0).addAll(toMove);
  toMove.clear();
}
",0,4,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
239,else if (i.intValue() == 1) return MiscUtil.C_TRUE;,"if (i.intValue() == 1) return MiscUtil.C_TRUE;
 else return i.toString();
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
240,"if (uri.charAt(""tuscany:"".length()+1) != '/') {","if (uri.charAt(""tuscany:"".length() + 1) != '/') {
  uri=uri.replaceFirst("":/"",""://"");
}
",0,8,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
241,"if (list.size() == 1) return new NodeListModel(list.get(0), namespaces);","if (list.size() == 1) return new NodeListModel(list.get(0),namespaces);
",0,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
242,if (((MapIndexable) helper.modifiedIndexExpr).getIndexingKeys().size() == 1) {,"if (((MapIndexable)helper.modifiedIndexExpr).getIndexingKeys().size() == 1) {
}
 else {
  return false;
}
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
243,if ((this.maxQueueSizeHitCount % logFrequency) == 1) {,"if ((this.maxQueueSizeHitCount % logFrequency) == 1) {
  logger.info(""Resuming with processing puts ..."");
}
",0,0,4,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
244,"if (((Set) m.get (""&"")).size () < 2) return;","if (((Set)m.get(""&"")).size() < 2) return;
",0,1,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
245,"if (pushbackInputStream.read(streamHeader) != 2) throw new AssertionError(""Cound not read stream header"");","if (pushbackInputStream.read(streamHeader) != 2) throw new AssertionError(""Cound not read stream header"");
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
246,} else if ((int) ((timeFrame / (snapshotDurationMS / ONE_MINUTE_MS))) <= 12),"if ((int)((timeFrame / (snapshotDurationMS / ONE_MINUTE_MS))) <= 12) snapCount=(int)((timeFrame / (snapshotDurationMS / ONE_MINUTE_MS)));
 else snapCount=12;
",0,0,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, ParenthesizedExpression-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
247,"} else if (""number"".equals(this.type) || (this.type != null && this.type.endsWith(""-number""))) {","if (""number"".equals(this.type) || (this.type != null && this.type.endsWith(""-number""))) {
  Locale locale=(Locale)context.get(""locale"");
  if (locale == null) {
    locale=Locale.getDefault();
  }
  String formatVal;
  if (!this.format.isEmpty()) {
    formatVal=this.format.expandString(context);
  }
 else {
    formatVal=this.type.endsWith(""-number"") ? this.type.replaceFirst(""-number"","""") : ""default"";
  }
  Delegator delegator=(Delegator)context.get(""delegator"");
  try {
    Double parsedRetVal=(Double)ObjectType.simpleTypeOrObjectConvert(retVal,""Double"",null,locale,false);
    retVal=UtilFormatOut.formatNumber(parsedRetVal,formatVal,delegator,locale);
  }
 catch (  GeneralException e) {
    String errMsg=""Error formatting number ["" + retVal + ""]: ""+ e.toString();
    Debug.logError(e,errMsg,MODULE);
    throw new IllegalArgumentException(errMsg);
  }
}
",0,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
248,"if (1 == checkForGBean(localConfiguration, persistenceUnitNameQuery, false, true, new HashSet<AbstractName>())) {","if (1 == checkForGBean(localConfiguration,persistenceUnitNameQuery,false,true,new HashSet<AbstractName>())) {
  return persistenceUnitNameQuery;
}
",0,0,8,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
249,"if (receiver instanceof InnerClassNode && ((InnerClassNode) receiver).isAnonymous() && methods.size() == 1 && args != null && ""<init>"".equals(name)) {","if (receiver instanceof InnerClassNode && ((InnerClassNode)receiver).isAnonymous() && methods.size() == 1 && args != null && ""<init>"".equals(name)) {
  MethodNode constructor=methods.get(0);
  if (constructor.getParameters().length == args.length) {
    return methods;
  }
}
",0,1,13,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
250,if (archives.size() == 1) return archives.get(0).iterator();,"if (archives.size() == 1) return archives.get(0).iterator();
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
251,if (Math.abs((value[i] - firstValue) / firstValue) > 0.01) {,"if (Math.abs((value[i] - firstValue) / firstValue) > 0.01) {
  allEqual=false;
  break;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
252,if (openBalance.doubleValue() == 0.0) return (new BigDecimal(0.00)).setScale(2);,"if (openBalance.doubleValue() == 0.0) return (new BigDecimal(0.00)).setScale(2);
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ClassInstanceCreation-arguments, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
253,"if (""clone"".equals(methodName) && 0 == originalArguments.length) {","if (""clone"".equals(methodName) && 0 == originalArguments.length) {
  try {
    Object[] array=(Object[])object;
    Object[] result=(Object[])MethodHandleHolder.CLONE_ARRAY_METHOD_HANDLE.invokeExact(array);
    return result;
  }
 catch (  Throwable t) {
    throw new GroovyRuntimeException(t);
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
254,if (leftExpr.<Number>getNodeMetaData(INSIDE_PARENTHESES_LEVEL).intValue() > 1) {,"if (leftExpr.<Number>getNodeMetaData(INSIDE_PARENTHESES_LEVEL).intValue() > 1) {
  throw createParsingFailedException(""Nested parenthesis is not allowed in multiple assignment, e.g. ((a)) = b"",ctx);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
255,if (1 == candidates.size()) return candidates.get(0);,"if (1 == candidates.size()) return candidates.get(0);
",0,1,6,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
256,"if (currentScope != null && !currentScope.isInStaticContext() && Traits.isTrait(type) && ""super"".equals(prop) && directlyImplementsTrait(type)) {","if (currentScope != null && !currentScope.isInStaticContext() && Traits.isTrait(type) && ""super"".equals(prop) && directlyImplementsTrait(type)) {
  return;
}
",0,0,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
257,"if (""main"".equals(method.getName()) || ""run"".equals(method.getName()) && owner.isScriptBody()) continue;","if (""main"".equals(method.getName()) || ""run"".equals(method.getName()) && owner.isScriptBody()) continue;
",0,0,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
258,if (argumentClass.getName().charAt(0) != '[') return argument;,"if (argumentClass.getName().charAt(0) != '[') return argument;
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
259,"if (fo.getNameExt().equals(""settings.xml"") && fo.getParent() != null && "".m2"".equalsIgnoreCase(fo.getParent().getNameExt())) {","if (fo.getNameExt().equals(""settings.xml"") && fo.getParent() != null && "".m2"".equalsIgnoreCase(fo.getParent().getNameExt())) {
  return new MavenSettingsGrammar(env);
}
",0,4,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
260,"if (""args"".equals(ve.getName()) && ve.getAccessedVariable() instanceof DynamicVariable) {","if (""args"".equals(ve.getName()) && ve.getAccessedVariable() instanceof DynamicVariable) {
  VariableExpression newVe=varX(param(MAP_TYPE,""args""));
  newVe.setSourcePosition(ve);
  return newVe;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
261,"if (methodTarget instanceof ExtensionMethodNode && ""is"".equals(methodTarget.getName()) && methodTarget.getParameters().length==1) {","if (methodTarget instanceof ExtensionMethodNode && ""is"".equals(methodTarget.getName()) && methodTarget.getParameters().length == 1) {
  methodTarget=((ExtensionMethodNode)methodTarget).getExtensionMethodNode();
  ClassNode owner=methodTarget.getDeclaringClass();
  if (DGM_CLASSNODE.equals(owner)) {
    Expression args=call.getArguments();
    if (args instanceof ArgumentListExpression) {
      ArgumentListExpression arguments=(ArgumentListExpression)args;
      List<Expression> exprs=arguments.getExpressions();
      if (exprs.size() == 1) {
        CompareIdentityExpression cid=new CompareIdentityExpression(call.getObjectExpression(),exprs.get(0));
        cid.setSourcePosition(call);
        return cid;
      }
    }
  }
}
",0,0,10,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
262,"if (((PropertyExpression) exp).isImplicitThis() || ""this"".equals(((PropertyExpression) exp).getObjectExpression().getText())) {","if (((PropertyExpression)exp).isImplicitThis() || ""this"".equals(((PropertyExpression)exp).getObjectExpression().getText())) {
  return knownFields.contains(((PropertyExpression)exp).getProperty().getText());
}
",0,0,9,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
263,"classDoc.isPackagePrivate() && ""true"".equals(properties.getProperty(""packageScope"")) || ""true"".equals(properties.getProperty(""privateScope""))) {","if (classDoc.isPublic() || classDoc.isProtected() && ""true"".equals(properties.getProperty(""protectedScope"")) || classDoc.isPackagePrivate() && ""true"".equals(properties.getProperty(""packageScope"")) || ""true"".equals(properties.getProperty(""privateScope""))) {
  String destFileName=destdir + FS + classDoc.getFullPathName()+ "".html"";
  log.debug(""Generating "" + destFileName);
  String renderedSrc=templateEngine.applyClassTemplates(classDoc);
  output.writeToOutput(destFileName,renderedSrc,properties.getProperty(""fileEncoding""));
}
",0,0,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
264,"if (pieces.length > 1) type += ""#"" + pieces[1];","if (pieces.length > 1) type+=""#"" + pieces[1];
",0,3,6,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
265,if (((10 - modValue) + threadRatio) > 100) {,"if (((10 - modValue) + threadRatio) > 100) {
  return 100;
}
 else {
  return (10 - modValue) + threadRatio;
}
",0,0,4,,"NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
266,if (locatedBlocks.get(0).getLocations().length == 1) {,"if (locatedBlocks.get(0).getLocations().length == 1) {
  break;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
267,if ((expectedNMCounts[0] + expectedNMCounts[1]) < 2) {,"if ((expectedNMCounts[0] + expectedNMCounts[1]) < 2) {
  expectedNMCounts[0]=distShellTest.getNodeManager(0).getNMContext().getContainers().size();
  expectedNMCounts[1]=distShellTest.getNodeManager(1).getNMContext().getContainers().size();
  return false;
}
",0,0,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
268,"if (!""cn=127.0.0.1"".equals((String) matchingAttributes.get(""uniqueMember"")","if (!""cn=127.0.0.1"".equals((String)matchingAttributes.get(""uniqueMember"").get())) {
  System.out.println(""Ip address mismatch"");
  return new ResultEnum<SearchResult>();
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
269,if (Math.abs(entry.getValue() - otherVec.get(entry.getKey())) > 0.000001) {,"if (Math.abs(entry.getValue() - otherVec.get(entry.getKey())) > 0.000001) {
  return false;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
270,if (Math.abs(this.get(i) - otherVec.get(i)) > 0.000001) {,"if (Math.abs(this.get(i) - otherVec.get(i)) > 0.000001) {
  return false;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
271,if (1 != ((StringListArgument) argument).getList().size()),"if (1 != ((StringListArgument)argument).getList().size()) throw context.getCoordinate().syntaxException(""Expecting exactly one argument"");
",0,1,5,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
272,"if ((ex.getErrorCode() == 2627 || ex.getErrorCode() == 2601) && ""23000"".equals(ex.getSQLState())) {","if ((ex.getErrorCode() == 2627 || ex.getErrorCode() == 2601) && ""23000"".equals(ex.getSQLState())) {
  return true;
}
",0,6,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
273,if (offsets[i * 2 + 1] - offsets[i * 2] > 1) {,"if (offsets[i * 2 + 1] - offsets[i * 2] > 1) {
  return true;
}
",0,1,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
274,if ( (a > 10 ? 20 : 30) == 30 ) {,"if ((a > 10 ? 20 : 30) == 30) {
  b=true;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
275,"} else if (params.length == 1 && params[0] == Object.class && ""equals"".equals(name)){","if (params.length == 1 && params[0] == Object.class && ""equals"".equals(name)) {
  return Boolean.valueOf(equals(args[0]));
}
",0,0,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
276,"if((cp = codePointAt(ca, i)) <= '\u007F') {","if ((cp=codePointAt(ca,i)) <= '\u007F') {
  sb.append(Character.toString((char)cp));
  i++;
}
 else if (cp <= '\u07FF') {
  sb.append(""\\0"");
  dgt=0xC0 + ((cp & 0x7C0) >> 6);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0"");
  dgt=0x80 + (cp & 0x3F);
  sb.append(Integer.toString(dgt,16));
  i++;
}
 else if (cp <= '\uFFFF') {
  sb.append(""\\0"");
  dgt=0xE0 + ((cp & 0xF000) >> 12);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0"");
  dgt=0x80 + ((cp & 0xFC0) >> 6);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0"");
  dgt=0x80 + (cp & 0x3F);
  sb.append(Integer.toString(dgt,16));
  i++;
}
 else {
  sb.append(""\\0ED"");
  sb.append(""\\0"");
  dgt=0xA0 + (((cp & 0xF0000) >> 16) - 1);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0"");
  dgt=0x80 + ((cp & 0xFC00) >> 10);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0ED"");
  sb.append(""\\0"");
  dgt=0xB0 + ((cp & 0x3C0) >> 6);
  sb.append(Integer.toString(dgt,16));
  sb.append(""\\0"");
  dgt=0x80 + (cp & 0x3F);
  sb.append(Integer.toString(dgt,16));
  i+=2;
}
",0,0,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
277,if (loopCount++ == 2) modifiedName[lengthSoFar++] = RegionInfo.REPLICA_ID_DELIMITER;,"if (loopCount++ == 2) modifiedName[lengthSoFar++]=RegionInfo.REPLICA_ID_DELIMITER;
 else modifiedName[lengthSoFar++]=HConstants.DELIMITER;
",0,0,5,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
278,else if (this.returned == 2) return getSecond();,"if (this.returned == 2) return getSecond();
 else throw new IllegalAccessError(""this.returned="" + this.returned);
",0,0,4,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
279,"if (TimeUnit.SECONDS.convert(time, TimeUnit.NANOSECONDS) >= 1) {","if (TimeUnit.SECONDS.convert(time,TimeUnit.NANOSECONDS) >= 1) {
  traces.add(span.getSpanContext().getTraceId());
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
280,"if (Integer.parseInt(System.getProperty(""java.version"").split(""\\."")[1]) <= 6) {","if (Integer.parseInt(System.getProperty(""java.version"").split(""\\."")[1]) <= 6) {
  pattern=Pattern.compile(""\\[wrote ([^\\]]*)\\]"");
}
 else {
  pattern=Pattern.compile(""\\[wrote RegularFileObject\\[([^\\]]*)\\]\\]"");
}
",0,9,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
281,"if (1 == context.getCounter(""CF"", currentFamilyName).getValue()) {","if (1 == context.getCounter(""CF"",currentFamilyName).getValue()) {
  context.write(new Text(""Total Families Across all Rows""),new IntWritable(1));
  context.write(new Text(currentFamily),new IntWritable(1));
}
",0,0,6,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
282,if (columns.length - (rowkeysFound + tskeysFound + attrKeysFound) < 1) {,"if (columns.length - (rowkeysFound + tskeysFound + attrKeysFound) < 1) {
  usage(""One or more columns in addition to the row key and timestamp(optional) are required"");
  return -1;
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
283,"if (opts.cycles > 1) LOG.info(""Cycle="" + ii + "" of "" + opts.cycles);","if (opts.cycles > 1) LOG.info(""Cycle="" + ii + "" of ""+ opts.cycles);
",0,0,8,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
284,"if (serverNameAndFile.indexOf('/') < ""a,0,0"".length()) {","if (serverNameAndFile.indexOf('/') < ""a,0,0"".length()) {
  return null;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
285,"if (member.getKind() == Tree.Kind.METHOD && ""<init>"".contentEquals(((MethodTree)member).getName()) && ctorTree.getLeaf() != member) {","if (member.getKind() == Tree.Kind.METHOD && ""<init>"".contentEquals(((MethodTree)member).getName()) && ctorTree.getLeaf() != member) {
  BlockTree body=((MethodTree)member).getBody();
  Iterator<? extends StatementTree> stats=body != null ? body.getStatements().iterator() : Collections.<StatementTree>emptyList().iterator();
  if (stats.hasNext()) {
    StatementTree stat=stats.next();
    if (stat.getKind() == Tree.Kind.EXPRESSION_STATEMENT) {
      ExpressionTree exp=((ExpressionStatementTree)stat).getExpression();
      if (exp.getKind() == Tree.Kind.METHOD_INVOCATION) {
        ExpressionTree meth=((MethodInvocationTree)exp).getMethodSelect();
        if (meth.getKind() == Tree.Kind.IDENTIFIER && ""this"".contentEquals(((IdentifierTree)meth).getName())) {
          continue;
        }
      }
    }
  }
  hasOtherConstructors=true;
  break;
}
",0,10,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
286,if (String.valueOf(nextEventId).length() - srcPath.getName().length() >= 2) {,"if (String.valueOf(nextEventId).length() - srcPath.getName().length() >= 2) {
  nextEventId++;
}
 else {
  nextEventId=(long)Math.pow(10.0,(double)String.valueOf(nextEventId).length());
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
287,"if(!""hdfs"".equals(new URI(hdfsLoc).getScheme())) {","if (!""hdfs"".equals(new URI(hdfsLoc).getScheme())) {
  throw new IllegalArgumentException(""Kafka stores must be located in HDFS, but received: "" + hdfsLoc);
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
288,"if ((header & 1) != 1) failWithLog(""Victim header not in use"");","if ((header & 1) != 1) failWithLog(""Victim header not in use"");
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
289,"if (mrJobCount > 0 && ""mr"".equals(HiveConf.getVar(driverContext.getConf(), ConfVars.HIVE_EXECUTION_ENGINE))) {","if (mrJobCount > 0 && ""mr"".equals(HiveConf.getVar(driverContext.getConf(),ConfVars.HIVE_EXECUTION_ENGINE))) {
  LOG.warn(HiveConf.generateMrDeprecationWarning());
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
290,"if (HiveConf.getLongVar(conf, HiveConf.ConfVars.MAPREDMINSPLITSIZE, 1) <= 1) {","if (HiveConf.getLongVar(conf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,1) <= 1) {
  final long blockSize=conf.getLongBytes(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT);
  final long minGrouping=conf.getLong(TezMapReduceSplitsGrouper.TEZ_GROUPING_SPLIT_MIN_SIZE,TezMapReduceSplitsGrouper.TEZ_GROUPING_SPLIT_MIN_SIZE_DEFAULT);
  final long preferredSplitSize=Math.min(blockSize / 2,minGrouping);
  HiveConf.setLongVar(jobConf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize);
  LOG.info(""The preferred split size is "" + preferredSplitSize);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
291,if (node.getRightAliases().length + target.getRightAliases().length + 1 > 16) {,"if (node.getRightAliases().length + target.getRightAliases().length + 1 > 16) {
  LOG.info(ErrorMsg.JOINNODE_OUTERJOIN_MORETHAN_16.getErrorCodedMsg());
  continueScanning=continueJoinMerge();
  continue;
}
",0,2,8,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
292,"if (catName == null || """".equals(catName)) catName = Warehouse.DEFAULT_CATALOG_NAME;","if (catName == null || """".equals(catName)) catName=Warehouse.DEFAULT_CATALOG_NAME;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
293,} else if (Math.abs(1.0 - poolData.totalChildrenAllocFraction) > 0.00001) {,"if (Math.abs(1.0 - poolData.totalChildrenAllocFraction) > 0.00001) {
  response.addToErrors(""Sum of root children pools' alloc fraction should be 1.0 got: "" + poolData.totalChildrenAllocFraction + "" for pool: ""+ entry.getKey());
}
",0,0,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
294,"if (abortTxns(dbConn, Collections.singletonList(txnid), false, isReplayedReplTxn) != 1) {","if (abortTxns(dbConn,Collections.singletonList(txnid),false,isReplayedReplTxn) != 1) {
  throw new IllegalStateException(msg + "" FAILED!"");
}
",0,0,8,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
295,"if(metadata == null || """".equals(metadata) || metadata.split("","").length == 0) {","if (metadata == null || """".equals(metadata) || metadata.split("","").length == 0) {
  ResourceMetadata resourceMetadata=new ResourceMetadata();
  resourceMetadata.setModificationTime(System.currentTimeMillis());
  resourceMetadata.setResolutionPath(resourcePath);
  return resourceMetadata;
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
296,"if (i + j + Math.min(k, 1) <= 1) {","if (i + j + Math.min(k,1) <= 1) {
  CacheConfiguration<Object,Object> cfg=cacheConfig(""evict"" + i + j+ k,null,CACHE_MODES[i],ATOMICITY_MODES[j],WRITE_MODES[k]);
  createCacheAndTestEviction(cfg);
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
297,if (getWalPos(grid) - offsets[gCnt++] > 100),"if (getWalPos(grid) - offsets[gCnt++] > 100) return true;
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
298,if (grid(0).affinity(cacheName).partition(k) != 12),"if (grid(0).affinity(cacheName).partition(k) != 12) cache0.put(k,new IndexedObject(k));
",0,0,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
299,"if (""conn-tester-1"".equals(Thread.currentThread().getName()) && i % 10 == 0 && i > 0)","if (""conn-tester-1"".equals(Thread.currentThread().getName()) && i % 10 == 0 && i > 0) info(""Run "" + i + "" iterations."");
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
300,"if (prevChar == '/') return normalize(pathname, n, n - 1);","if (prevChar == '/') return normalize(pathname,n,n - 1);
",0,1,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
301,if (responseCode == 200) { return true; } else {return false;},"if (responseCode == 200) {
  return true;
}
 else {
  return false;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
BooleanLiteral(ReturnStatement-expression, Block-statements, IfStatement-elseStatement, ),
"
302,if ((double) firstBatch.getPermits() / firstBatch.getInitialPermits() > 0.2) {,"if ((double)firstBatch.getPermits() / firstBatch.getInitialPermits() > 0.2) {
  return candidatePermits;
}
",0,0,6,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
303,if (Arrays.stream(batchInfos).filter(x -> x.getState() == BatchStateEnum.NotProcessed).count() != 1) {,"if (Arrays.stream(batchInfos).filter(x -> x.getState() == BatchStateEnum.NotProcessed).count() != 1) {
  throw new Exception(""PK-Chunking query should have 1 and only 1 batch with state=NotProcessed."");
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
304,if (vertices.stream().map(v -> v instanceof SamplingVertex).collect(Collectors.toSet()).size() != 1) {,"if (vertices.stream().map(v -> v instanceof SamplingVertex).collect(Collectors.toSet()).size() != 1) {
  throw new IllegalArgumentException(""Must be either all sampling vertices, or none: "" + vertices.toString());
}
",0,0,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
305,"if (!node.containsKey(""dir"") || ""false"".equals(node.get(""dir"").toString())) {","if (!node.containsKey(""dir"") || ""false"".equals(node.get(""dir"").toString())) {
  final String key=node.getString(""key"").substring(1);
  result.put(key,node.getString(""value""));
  if (node.containsKey(""createdIndex"")) {
    result.put(""_"" + key + "".createdIndex"",String.valueOf(node.getInt(""createdIndex"")));
  }
  if (node.containsKey(""modifiedIndex"")) {
    result.put(""_"" + key + "".modifiedIndex"",String.valueOf(node.getInt(""modifiedIndex"")));
  }
  if (node.containsKey(""expiration"")) {
    result.put(""_"" + key + "".expiration"",String.valueOf(node.getString(""expiration"")));
  }
  if (node.containsKey(""ttl"")) {
    result.put(""_"" + key + "".ttl"",String.valueOf(node.getInt(""ttl"")));
  }
  result.put(""_"" + key + "".source"",""[etcd]"" + serverURL);
}
 else {
  final JsonArray nodes=node.getJsonArray(""nodes"");
  if (nodes != null) {
    for (int i=0; i < nodes.size(); i++) {
      addNodes(result,nodes.getJsonObject(i));
    }
  }
}
",0,4,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
306,values = values.modify(tuple -> {if (tuple == 18.4),"if (tuple == 18.4) try {
  Thread.sleep(5000);
}
 catch (Exception e) {
  throw new RuntimeException(e);
}
",0,0,2,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
307,"s.sink((tuple) -> { if (8 == n.get()) throw new RuntimeException(""MTPWE Expected Test Exception # ""+excCnt.incrementAndGet());});","s.sink((tuple) -> {
  if (8 == n.get())   throw new RuntimeException(""MTPWE Expected Test Exception # "" + excCnt.incrementAndGet());
}
);
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
308,"if (other.viewPart(column + 1, other.size() - column - 1).norm(1) > 1.0e-14) {","if (other.viewPart(column + 1,other.size() - column - 1).norm(1) > 1.0e-14) {
  throw new IllegalArgumentException(""Cannot set lower portion of triangular matrix to non-zero"");
}
",0,1,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
309,"if (((VariableLeaf)n.children.head).value!=""_any_"")","if (((VariableLeaf)n.children.head).value != ""_any_"") p=p + "" && ((Node)"" + v+ "").name==""+ name(encrypt(((VariableLeaf)n.children.head).value));
",0,0,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
310,"if (cap.getNamespace().equals(""ding.dong"") && ""yeah!"".equals(cap.getAttributes().get(""ding.dong"")))","if (cap.getNamespace().equals(""ding.dong"") && ""yeah!"".equals(cap.getAttributes().get(""ding.dong""))) foundDingDong=true;
",0,5,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
311,if (clustering.get(c).getInclusionProbability(points.get(p)) > 0.8) {,"if (clustering.get(c).getInclusionProbability(points.get(p)) > 0.8) {
  pointsInClusters[c].add(p);
  numDistances++;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
312,"if ( ""java"".equals ( request.getLanguage() ) || null == request.getLanguage() )","if (""java"".equals(request.getLanguage()) || null == request.getLanguage()) {
  cpdLanguage=new JavaLanguage(request.getLanguageProperties());
}
 else if (""javascript"".equals(request.getLanguage())) {
  cpdLanguage=new EcmascriptLanguage();
}
 else if (""jsp"".equals(request.getLanguage())) {
  cpdLanguage=new JSPLanguage();
}
 else {
  cpdLanguage=LanguageFactory.createLanguage(request.getLanguage(),request.getLanguageProperties());
}
",0,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
313,if (value.charAt(end - separator.length()) != '\\') {,"if (value.charAt(end - separator.length()) != '\\') {
  String finalValue=value.substring(start,end);
  result.add(finalValue.replace(""\\"" + separator,separator));
  start=end + separator.length();
  end=value.indexOf(separator,start);
}
 else {
  end=value.indexOf(separator,end + separator.length());
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
314,"if (!""delete"".equalsIgnoreCase(tmpStrs[0].trim())) {","if (!""delete"".equalsIgnoreCase(tmpStrs[0].trim())) {
  throw new Exception(new StringBuilder(512).append(""Illegal value: only support delete method now!"").toString());
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
315,"if ("".*"".equals(type) || type.equals(getFileExtName(file.getPath()))) {","if ("".*"".equals(type) || type.equals(getFileExtName(file.getPath()))) {
  fileList.add(file);
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
316,"if (fieldsAnnotatedWith(cls, PivotRow.class).size()>1){","if (fieldsAnnotatedWith(cls,PivotRow.class).size() > 1) {
  throw new IllegalArgumentException(""Only one annotation for row allowed"");
}
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
317,"if (!"".content.xml"".equals(Text.getName(a.getPlatformPath()))) {","if (!"".content.xml"".equals(Text.getName(a.getPlatformPath()))) {
  artifacts.remove(a);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
318,".peek((p) -> { if(p.length != 2) { throw new IllegalArgumentException(""Could not parse value""); } })","if (p.length != 2) {
  throw new IllegalArgumentException(""Could not parse value"");
}
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
"
319,".collect(Collectors.toMap(a -> Dependency.fromString(a[0]), a -> { if (a[1].equalsIgnoreCase(IGNORE_GAV)) { return IGNORE_ARTIFACT; } String[] mavenGA = a[1].split("":"", 2); if(mavenGA.length != 2) { throw new IllegalArgumentException(""Could not parse Maven group Id and artifact Id (must be separated by ':')""); } return new DefaultArtifact(mavenGA[0], mavenGA[1], """", """", """", """", null);} ));","if (a[1].equalsIgnoreCase(IGNORE_GAV)) {
  return IGNORE_ARTIFACT;
}
",0,0,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, IfStatement-expression, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ),
SimpleName(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, MethodInvocation-arguments, ),
"
320,"if (""22001"".equals(state) || (""72000"".equals(state) && 1489 == ex.getErrorCode())","if (""22001"".equals(state) || (""72000"".equals(state) && 1489 == ex.getErrorCode()) || (""S0001"".equals(state) && 2628 == ex.getErrorCode())) {
}
 else {
  throw (ex);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
321,"if (size(Iterables.filter(getCausalChain(e), KeyNotFoundException.class)) >= 1)","if (size(Iterables.filter(getCausalChain(e),KeyNotFoundException.class)) >= 1) return null;
",0,0,7,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
322,"if (Iterables.size(Splitter.on(""."").split(rawVersion)) == 3) {","if (Iterables.size(Splitter.on(""."").split(rawVersion)) == 3) {
  return rawVersion.substring(0,rawVersion.lastIndexOf("".""));
}
 else {
  return rawVersion;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
323,"String lang = stripChars(t.image, 1) ; {if ("""" != null) return lang ;}","String lang=stripChars(t.image,1);
",0,0,5,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
324,if ( relPath.length() - relPath.lastIndexOf('.') > 5 ) {,"if (relPath.length() - relPath.lastIndexOf('.') > 5) {
  relPath=relPath + "".rdf"";
  relative=iriFactory.create(relPath);
}
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
325,"if ( en.size() != 1 ) Log.warn(RequestLog.class, ""Multiple response header values"");","if (en.size() != 1) Log.warn(RequestLog.class,""Multiple response header values"");
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
326,"{if ("""" != null) return true;}","if ("""" != null) return true;
",0,0,3,,"StringLiteral(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
327,"if (propertyAsLong == 0 && """".equals(getProperty(END).getStringValue())) {","if (propertyAsLong == 0 && """".equals(getProperty(END).getStringValue())) {
  propertyAsLong=Long.MAX_VALUE;
}
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
328,"if (firstNonSpace(reader, '#') != '}') {","if (firstNonSpace(reader,'#') != '}') {
  reader.reset();
  char[] cb=new char[100];
  int nbRead=reader.read(cb);
  throw new InvalidVariableException(""Expected } after "" + funcName + "" function call in ""+ new String(cb,0,nbRead));
}
",0,0,4,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
329,"if (""GET"".equalsIgnoreCase(method) && (PROCESS_GROUP_URI_PATTERN.matcher(uri.getPath()).matches() || CONTROLLER_ARCHIVE_URI_PATTERN.matcher(uri.getPath()).matches())) {","if (""GET"".equalsIgnoreCase(method) && (PROCESS_GROUP_URI_PATTERN.matcher(uri.getPath()).matches() || CONTROLLER_ARCHIVE_URI_PATTERN.matcher(uri.getPath()).matches())) {
  return true;
}
 else if (""PUT"".equalsIgnoreCase(method) && PROCESS_GROUP_URI_PATTERN.matcher(uri.getPath()).matches()) {
  return true;
}
",0,22,13,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
330,"if (type.getValueType().equals(ValueType.STRING) && ""integer"".equals(JsonString.class.cast(type).getString())) {","if (type.getValueType().equals(ValueType.STRING) && ""integer"".equals(JsonString.class.cast(type).getString())) {
  return Optional.of(new MultipleOfValidation.Impl(model.toPointer(),model.getValueProvider(),1));
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
331,if (A[2] == 1) break;,"if (A[2] == 1) break;
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
332,"if(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()) != null && ""locallogin"".equals(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()).toString())){","if (httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()) != null && ""locallogin"".equals(httpRequest.getServletContext().getAttribute(httpRequest.getRequestedSessionId()).toString())) {
  httpRequest.getSession().setAttribute(""locallogin"",""true"");
  httpRequest.getServletContext().removeAttribute(httpRequest.getRequestedSessionId());
}
",0,1,14,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
333,"if (""*"".equals(bpName) && pt.get(0).is(String.class)) {","if (""*"".equals(bpName) && pt.get(0).is(String.class)) {
  if (n.startsWith(""set"") && (rt.isParentOf(c) || rt.is(Void.TYPE))) {
    methodType=SETTER;
  }
 else {
    methodType=GETTER;
  }
  n=bpName;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
334,if (topicBasedRlmm().receivedOffsetForPartition(leaderMetadataPartition).orElse(-1L) >= 1) {,"if (topicBasedRlmm().receivedOffsetForPartition(leaderMetadataPartition).orElse(-1L) >= 1) {
  break;
}
",0,2,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
335,"if(""creator"".equals(relation) && (person.getUri() != null || person.getEmail() != null)) {","if (""creator"".equals(relation) && (person.getUri() != null || person.getEmail() != null)) {
  String personUri=person.getUri() != null ? person.getUri() : ""mailto:"" + person.getEmail();
  Resource r_person=createURI(personUri);
  createStringProperty(r_person,NS_FOAF + ""name"",person.getName());
  if (person.getEmail() != null) {
    createUrlProperty(r_person,NS_FOAF + ""mbox"",""mailto:"" + person.getEmail());
  }
  createUrlProperty(r_person,NS_FOAF + ""homepage"",person.getUri());
  rdfHandler.handleStatement(createStatement(r_entry,createURI(NS_FOAF + ""maker""),r_person));
  rdfHandler.handleStatement(createStatement(r_person,createURI(NS_FOAF + ""made""),r_entry));
}
",0,7,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
336,"if (""ShiroProvider"".equalsIgnoreCase(name) && params != null && !params.isEmpty()) {","if (""ShiroProvider"".equalsIgnoreCase(name) && params != null && !params.isEmpty()) {
  params.sort(Comparator.comparing((  Param p) -> SHIRO_PROVIDER_PARAM_ORDER.getOrDefault(p.getName(),Integer.MAX_VALUE)).thenComparing((  Param p) -> SHIRO_PROVIDER_PARAM_ORDER.getOrDefault(p.getName(),Integer.MAX_VALUE)));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
337,"if (""T"".equals(matcher.group(2)) == false) {","if (""T"".equals(matcher.group(2)) == false) {
  final String dayMatch=matcher.group(1);
  final String hourMatch=matcher.group(3);
  final String minuteMatch=matcher.group(4);
  final String secondMatch=matcher.group(5);
  if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {
    final long daysAsSecs=parseNumber(text,dayMatch,SECONDS_PER_DAY,""days"");
    final long hoursAsSecs=parseNumber(text,hourMatch,SECONDS_PER_HOUR,""hours"");
    final long minsAsSecs=parseNumber(text,minuteMatch,SECONDS_PER_MINUTE,""minutes"");
    final long seconds=parseNumber(text,secondMatch,1,""seconds"");
    try {
      return create(daysAsSecs,hoursAsSecs,minsAsSecs,seconds);
    }
 catch (    final ArithmeticException ex) {
      throw new IllegalArgumentException(""Text cannot be parsed to a Duration (overflow) "" + text,ex);
    }
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
338,"if (classes.length < 2) { throw new ParameterException(CommandLine.this, ""Field "" + field + "" needs two types (one for the map key, one for the value) but only has "" + classes.length + "" types configured.""); }","if (classes.length < 2) {
  throw new ParameterException(CommandLine.this,""Field "" + field + "" needs two types (one for the map key, one for the value) but only has ""+ classes.length+ "" types configured."");
}
",0,1,9,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ThisExpression-qualifier, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
339,if (wpvList.get(0).getVector().get(0) <= 2.0) {,"if (wpvList.get(0).getVector().get(0) <= 2.0) {
  for (  WeightedPropertyVectorWritable wv : wpvList) {
    Vector v=wv.getVector();
    int idx=v.maxValueIndex();
    assertTrue(""bad cluster!"",v.get(idx) <= 2.0);
  }
  assertEquals(""Wrong size cluster"",4,wpvList.size());
}
 else {
  for (  WeightedPropertyVectorWritable wv : wpvList) {
    Vector v=wv.getVector();
    int idx=v.minValueIndex();
    assertTrue(""bad cluster!"",v.get(idx) > 2.0);
  }
  assertEquals(""Wrong size cluster"",5,wpvList.size());
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
340,"if (type == NbModuleType.NETBEANS_ORG && ""true"".equals(projectProperties.getProperties().get(""requires.nb.javac""))) {","if (type == NbModuleType.NETBEANS_ORG && ""true"".equals(projectProperties.getProperties().get(""requires.nb.javac""))) {
  ModuleEntry javacapi=ml.getEntry(""org.netbeans.libs.javacapi"");
  if (javacapi != null) {
    buildDefaults.put(ClassPathProviderImpl.BOOTCLASSPATH_PREPEND,javacapi.getClassPathExtensions());
  }
}
",0,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
341,"if (args[0].size() != 1) { throw new IllegalArgumentException(""a test can only be applied to a single node""); }","if (args[0].size() != 1) {
  throw new IllegalArgumentException(""a test can only be applied to a single node"");
}
",0,1,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
342,"if (args.length != 2) { throw new IllegalArgumentException(getLocalName() + "" is a binary function and therefor requires exactly two arguments""); }","if (args.length != 2) {
  throw new IllegalArgumentException(getLocalName() + "" is a binary function and therefor requires exactly two arguments"");
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
343,if ( ( 0xff & bb.get() ) != ':' ),"if ((0xff & bb.get()) != ':') {
  throw new MalformedFrameException(memento.getLine().getPositionByteBuffer(),((Buffer)bb).position());
}
",0,0,4,,"NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
344,"if ( delimiter != -1 && ""sessionId"".equals( token.substring( 0, delimiter ) ) )","if (delimiter != -1 && ""sessionId"".equals(token.substring(0,delimiter))) {
  return token.substring(delimiter + 1);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
345,"if (!""customId"".equals(facesContext.getApplication().getFlowHandler().getCurrentFlowScope().get(""someId"")))","if (!""customId"".equals(facesContext.getApplication().getFlowHandler().getCurrentFlowScope().get(""someId""))) {
  throw new IllegalArgumentException(""someId should be equals to 'customId'"");
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
346,"if (mt != member && member.getKind() == Kind.METHOD && ""<init>"".contentEquals(((MethodTree)member).getName())","if (mt != member && member.getKind() == Kind.METHOD && ""<init>"".contentEquals(((MethodTree)member).getName()) && !tu.isSynthetic(memberPath) && types.isSameType(types.erasure(trees.getTypeMirror(memberPath)),type)) {
  return null;
}
",0,1,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
347,"if(!""*"".equals(keyValue[1]) && """".equals(configuredValue))","if (!""*"".equals(keyValue[1]) && """".equals(configuredValue)) {
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
348,"if(""*"".equals(keyValue[1]) && !"""".equals(configuredValue))","if (""*"".equals(keyValue[1]) && !"""".equals(configuredValue)) {
  result=true;
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
349,"if (""/"".endsWith(this.basePath) && this.simpleClassNameToPathMapping.size() == 1)","if (""/"".endsWith(this.basePath) && this.simpleClassNameToPathMapping.size() == 1) {
  className=""/"" + this.simpleClassNameToPathMapping.get(this.viewDefinitionClass.getSimpleName()) + ""/"";
}
 else {
  className=className.substring(className.lastIndexOf('.') + 1);
  className=convertToPathSyntax(className,this.simpleClassNameToPathMapping);
  className=createPageName(className);
  className=className.substring(0,className.lastIndexOf('/') + 1);
}
",0,4,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
350,"if(className.contains(""$"") && ""."".equals(this.basePath))","if (className.contains(""$"") && ""."".equals(this.basePath)) {
  className=className.substring(className.lastIndexOf('.') + 1);
  className=convertToPathSyntax(className,this.simpleClassNameToPathMapping);
}
 else if (className.contains(""$"")) {
  className=className.substring(className.lastIndexOf('$') + 1);
}
 else {
  className=className.substring(className.lastIndexOf('.') + 1);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
351,"if(!"""".equals(view.inline()[0]))","if (!"""".equals(view.inline()[0])) {
  throw new IllegalStateException(""Definition error at: "" + annotatedType.getJavaClass().getName() + "" it isn't allowed to define a class level @""+ View.class.getName()+ "" without a typesafe view config. Please don't use @View(inline=\""...\"") for this use-case!"");
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
352,"if ((_state.enteringPPR != null) && ""id"".equals(name))","if ((_state.enteringPPR != null) && ""id"".equals(name)) {
  if (_LOG.isFine()) {
    _LOG.fine(""Using id {1} for element of {0}"",new Object[]{_state.enteringPPR,value});
  }
  _state.pprContext.addRenderedPartialTarget(value.toString());
  _state.enteringPPR=null;
}
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
353,if (srcs.getSourceGroups(Sources.TYPE_GENERIC).length > 1) {,"if (srcs.getSourceGroups(Sources.TYPE_GENERIC).length > 1) {
  setError(getMessage(""MSG_NoExternalRoots""));
  return;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
354,"if (""publicPackage"".equals(el.getQName().getLocalPart()) && el.getElementText() != null && el.getElementText().equals(exp)) {","if (""publicPackage"".equals(el.getQName().getLocalPart()) && el.getElementText() != null && el.getElementText().equals(exp)) {
  toRemove.add(el);
  continue LBL;
}
",0,2,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
355,"if ("""".equals(prefix) && !matcher.group(1).equals(context.getPrefix())) {","if ("""".equals(prefix) && !matcher.group(1).equals(context.getPrefix())) {
  addQueryEntries(result,context,matcher.group(1),name.substring(matcher.group(1).length()),paramCount,false);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
356,"if (!domFile.exists() && jbossVersion != null && ""7"".equals(jbossVersion.getMajorNumber())) {","if (!domFile.exists() && jbossVersion != null && ""7"".equals(jbossVersion.getMajorNumber())) {
  domFile=new File(serverRoot,JBPluginUtils.getModulesBase(serverRoot) + ""org"" + sep+ ""dom4j""+ sep+ ""main""+ sep+ ""dom4j-1.6.1.jar"");
}
",0,0,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
357,"if (""InitParam"".equals(beanName) && parent instanceof WebApp) return ""ContextParam"";","if (""InitParam"".equals(beanName) && parent instanceof WebApp) return ""ContextParam"";
 else if (""ServiceRefHandler"".equals(beanName)) return ""Handler"";
 else {
  return beanName;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
358,"if (resourceName != null && ""java"".equals(fo.getExt()) && getWebApp() != null) {","if (resourceName != null && ""java"".equals(fo.getExt()) && getWebApp() != null) {
  boolean foundElement=false;
  Servlet[] servlets=getWebApp().getServlet();
  for (int i=0; i < servlets.length; i++) {
    if (resourceName.equals(servlets[i].getServletClass())) {
      DDChangeEvent ddEvent=new DDChangeEvent(DDDataObject.this,DDDataObject.this,null,resourceName,DDChangeEvent.SERVLET_DELETED);
      deploymentChange(ddEvent);
      foundElement=true;
      break;
    }
  }
  if (foundElement) {
    return;
  }
  Filter[] filters=getWebApp().getFilter();
  for (int i=0; i < filters.length; i++) {
    if (resourceName.equals(filters[i].getFilterClass())) {
      DDChangeEvent ddEvent=new DDChangeEvent(DDDataObject.this,DDDataObject.this,null,resourceName,DDChangeEvent.FILTER_DELETED);
      deploymentChange(ddEvent);
      foundElement=true;
      break;
    }
  }
  if (foundElement) {
    return;
  }
  Listener[] listeners=getWebApp().getListener();
  for (int i=0; i < listeners.length; i++) {
    if (resourceName.equals(listeners[i].getListenerClass())) {
      DDChangeEvent ddEvent=new DDChangeEvent(DDDataObject.this,DDDataObject.this,null,resourceName,DDChangeEvent.LISTENER_DELETED);
      deploymentChange(ddEvent);
      break;
    }
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
359,"} else if (""JBoss4"".equals(shortName) && !(gfv3ee6Found || gfv3Found || sjasFound)) {","if (""JBoss4"".equals(shortName) && !(gfv3ee6Found || gfv3Found || sjasFound)) {
  selectedItem=serverWrapper;
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
360,"&& ""attrs"".equals(path.get(i + 1).getImage())) {","if ((i + 2) < root.jjtGetNumChildren() && ""attrs"".equals(path.get(i + 1).getImage())) {
  return path.get(i + 2).getImage();
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
361,"&& ""persistence.xml"".equals(fe.getName() + ""."" + fe.getExt())) {","if (persistenceXmlDir != null && FileUtil.isParentOf(persistenceXmlDir,fo) && ""persistence.xml"".equals(fe.getName() + ""."" + fe.getExt())) {
  String path=""WEB-INF/classes/META-INF/"" + FileUtil.getRelativePath(persistenceXmlDir,fo.getParent()) + ""/""+ fe.getName()+ "".""+ fe.getExt();
  if (!isSynchronizationAppropriate(path)) {
    return;
  }
  handleDeleteFileInDestDir(path);
  return;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ),
"
362,"if (!""localhost"".equals(localHosts)) localHosts=""\""""+localHosts+""|localhost\"""";","if (!""localhost"".equals(localHosts)) localHosts=""\"""" + localHosts + ""|localhost\"""";
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
363,"if (!pathSegments.isEmpty() && """".equals(pathSegments.get(pathSegments.size() - 1))) {","if (!pathSegments.isEmpty() && """".equals(pathSegments.get(pathSegments.size() - 1))) {
  pathSegments.remove(pathSegments.size() - 1);
}
",0,1,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
364,"if ((split.length > 1) && ""include"".equals(split[0])) {","if ((split.length > 1) && ""include"".equals(split[0])) {
  for (int i=1; i < split.length; i++) {
    String s=split[i];
    projectPaths.put(s,rootDir + ""/"" + s.replace(':','/'));
  }
}
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
365,"} else if (field == IssueField.DUPLICATE_ID && ""RESOLVED"".equals(statusCombo.getSelectedItem())","if (field == IssueField.DUPLICATE_ID && ""RESOLVED"".equals(statusCombo.getSelectedItem()) && ""DUPLICATE"".equals(resolutionCombo.getSelectedItem())) {
  issue.duplicate(value);
  addUnsavedField(field.getKey());
}
 else if ((field == IssueField.ASSIGNED_TO) && !issue.isNew()) {
  issue.reassign(value);
  addUnsavedField(field.getKey());
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
366,"if (""INNODB"".equals(rs.getString(1).toUpperCase()) &&","if (""INNODB"".equals(rs.getString(1).toUpperCase()) && (""YES"".equals(rs.getString(2).toUpperCase()) || ""DEFAULT"".equals(rs.getString(2).toUpperCase()))) {
  return true;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
367,"if (i>109) desc[i].setDisplayName(NbBundle.getBundle(""org.netbeans.lib.ddl.resources.Bundle"").getString(name));","if (i > 109) desc[i].setDisplayName(NbBundle.getBundle(""org.netbeans.lib.ddl.resources.Bundle"").getString(name));
",0,1,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
368,if (i<65) desc[i].setPropertyEditorClass(BooleanEditor.class);,"if (i < 65) desc[i].setPropertyEditorClass(BooleanEditor.class);
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
369,if (i<110) desc[i].setExpert(true);,"if (i < 110) desc[i].setExpert(true);
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
370,"if (!""*"".equals(ms.getIdentifier().toString())) return null;","if (!""*"".equals(ms.getIdentifier().toString())) return null;
",0,1,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
371,"if (file.getName().endsWith("".jar"") && file.getParentFile().getName().equals(""lib"") && ""WEB-INF"".equals(file.getParentFile().getParentFile().getName())) {","if (file.getName().endsWith("".jar"") && file.getParentFile().getName().equals(""lib"") && ""WEB-INF"".equals(file.getParentFile().getParentFile().getName())) {
  final File pXml=new File(file.getParentFile().getParentFile(),pXmlName);
  if (pXml.exists()) {
    urls.add(pXml.toURI().toURL());
  }
  break;
}
",0,1,15,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
372,"if (realUrl != null && ""https"".equals(realUrl.getProtocol()) && certPath == null) {","if (realUrl != null && ""https"".equals(realUrl.getProtocol()) && certPath == null) {
  wizard.putProperty(WizardDescriptor.PROP_WARNING_MESSAGE,Bundle.MSG_NoCertificatesForSecure());
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
373,"if (evt.getSource() == this.pane && ""document"".equals(evt.getPropertyName())) {","if (evt.getSource() == this.pane && ""document"".equals(evt.getPropertyName())) {
  updateForNewDocument();
  return;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
374,"if (items != null && items.size() > 1 && ""text/javascript"".equals(docMimeType())) {","if (items != null && items.size() > 1 && ""text/javascript"".equals(docMimeType())) {
  List<MimeItem> newItems=new ArrayList<MimeItem>(items.size());
  MimeItem jsItem=null;
  for (  MimeItem item : items) {
    if (item.mimePath().getPath().endsWith(""text/javascript"")) {
      jsItem=item;
    }
 else {
      newItems.add(item);
    }
  }
  if (jsItem != null) {
    newItems.add(jsItem);
  }
  items=newItems;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
375,"if (doc.getChars(dotPos - 1, 1)[0] == ',') {","if (doc.getChars(dotPos - 1,1)[0] == ',') {
  selectStartPos=dotPos;
}
",0,0,7,,"SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
376,if ('\t' == docText.charAt(firstNonWhite + getStartOffset())) {,"if ('\t' == docText.charAt(firstNonWhite + getStartOffset())) {
  prefixlength+=docView.op.getTabSize();
}
 else {
  prefixlength++;
}
",0,0,5,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
377,"if (replaceString == null || findReplaceResult == null || findReplaceResult.getFoundPositions()[0] == -1 || """".equals(replaceString)) {","if (replaceString == null || findReplaceResult == null || findReplaceResult.getFoundPositions()[0] == -1 || """".equals(replaceString)) {
  return findReplaceResult;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
378,if( type == '*' ) return this;,"if (type == '*') return this;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(ReturnStatement-expression, IfStatement-thenStatement, ),
"
379,"if (""N"".equals(successfulLogin) && !""false"".equals(EntityUtilProperties.getPropertyValue(""security"", ""store.login.history.incorrect.password"", delegator))) {","if (""N"".equals(successfulLogin) && !""false"".equals(EntityUtilProperties.getPropertyValue(""security"",""store.login.history.incorrect.password"",delegator))) {
  ulhCreateMap.put(""passwordUsed"",password);
}
",0,13,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
380,if (eln - sln < 1) return;,"if (eln - sln < 1) return;
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
381,"if (""text/x-simple-plain"".equals(languagePath.mimePath()) && token.id().name().equals(""WORD"")) {","if (""text/x-simple-plain"".equals(languagePath.mimePath()) && token.id().name().equals(""WORD"")) {
  return LanguageEmbedding.create(TestCharTokenId.language(),0,0);
}
 else {
  return null;
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
382,"if (Boolean.TRUE.equals(Boolean.valueOf(prop)) || ""oneshot"".equals(prop)) {","if (Boolean.TRUE.equals(Boolean.valueOf(prop)) || ""oneshot"".equals(prop)) {
  delay=0;
}
",0,0,8,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
383,"if (""CVS"".equalsIgnoreCase(f.getName()) && new File(f, ""Entries"").exists()) {","if (""CVS"".equalsIgnoreCase(f.getName()) && new File(f,""Entries"").exists()) {
  return false;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
384,"if (ch[x] == null || ""HistoryNode"".equals(ch[x].getClass().getSimpleName())) {","if (ch[x] == null || ""HistoryNode"".equals(ch[x].getClass().getSimpleName())) {
  if (ch[x] == null) {
    Exceptions.printStackTrace(new NullPointerException(""Null child at index "" + x + "", parent: ""+ parent+ "", model: ""+ original));
  }
  Object[] nch=new Object[ch.length - 1];
  System.arraycopy(ch,0,nch,0,x);
  if ((x + 1) < ch.length) {
    System.arraycopy(ch,x + 1,nch,x,ch.length - x - 1);
  }
  ch=nch;
}
",0,0,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
385,"if (""getValueAt"".equals(methodName) && params[0] instanceof javax.swing.JToolTip) {","if (""getValueAt"".equals(methodName) && params[0] instanceof javax.swing.JToolTip) {
  methodName=""getShortDescription (called on property values)"";
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
386,"if (fi.isDirectory() && ""true"".equals(System.getProperty(""org.netbeans.modules.subversion.FileStatusCache.recursiveScan"", ""false""))","if (fi.isDirectory() && ""true"".equals(System.getProperty(""org.netbeans.modules.subversion.FileStatusCache.recursiveScan"",""false"")) && (fi.getStatus() & (FileInformation.STATUS_NOTVERSIONED_NOTMANAGED | FileInformation.STATUS_NOTVERSIONED_EXCLUDED)) == 0 && turbo.readEntry(file,FILE_STATUS_MAP) == null) {
  refreshAsync(file.listFiles());
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
387,"if( source.charAt(0) != '$' ) throw new IllegalArgumentException(""Source value does not start with '$'"");","if (source.charAt(0) != '$') throw new IllegalArgumentException(""Source value does not start with '$'"");
",0,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
388,if (SectionContainerNode.this.getChildren().getNodes().length==1) {,"if (SectionContainerNode.this.getChildren().getNodes().length == 1) {
  firePropertyChange(org.openide.nodes.Node.PROP_LEAF,Boolean.TRUE,Boolean.FALSE);
}
",0,0,5,,"SimpleName(ThisExpression-qualifier, MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
389,"if (qname != null && enclosingType != null && enclosingType.getKind() == TypeKind.NONE && ""Array"".equals(qname.toString())) {","if (qname != null && enclosingType != null && enclosingType.getKind() == TypeKind.NONE && ""Array"".equals(qname.toString())) {
  return ""["";
}
 else {
  return encodeClassName(td);
}
",0,1,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
390,"if (s[0] > 1) paramTypes.append(',');","if (s[0] > 1) paramTypes.append(',');
",0,0,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
391,"if (""Y"".equals(toAdd.getString(""isManual"")) && ((""PROMOTION_ADJUSTMENT"".equals(toAdd.get(""orderAdjustmentTypeId"")))","if (""Y"".equals(toAdd.getString(""isManual"")) && ((""PROMOTION_ADJUSTMENT"".equals(toAdd.get(""orderAdjustmentTypeId""))) || (""SHIPPING_CHARGES"".equals(toAdd.get(""orderAdjustmentTypeId""))) || (""SALES_TAX"".equals(toAdd.get(""orderAdjustmentTypeId""))))) {
  toStore.add(toAdd);
}
",0,1,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
392,"if (!""Evaluating..."".equals(property.getValue())) break;","if (!""Evaluating..."".equals(property.getValue())) break;
",0,0,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
393,if (flags[index] == 2) return;,"if (flags[index] == 2) return;
",0,0,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
394,"if (""toString()"".equals(expression) && String.class.getName().equals(getType())) {","if (""toString()"".equals(expression) && String.class.getName().equals(getType())) {
  return this;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
395,if (c != 0x0A) sb.append((char)0x0D);,"if (c != 0x0A) sb.append((char)0x0D);
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
396,"if ("""".equals(txt) && (this.getValue() == null)) {","if ("""".equals(txt) && (this.getValue() == null)) {
  invalidValueTried=true;
  IllegalArgumentException iae=new IllegalArgumentException();
  String emptyStringTxt=FormUtils.getBundleString(""FMT_MSG_EmptyString"");
  String annotation=FormUtils.getFormattedBundleString(""FMT_MSG_InvalidJavaIdentifier"",new Object[]{emptyStringTxt});
  ErrorManager.getDefault().annotate(iae,ErrorManager.ERROR,""Not a java identifier"",annotation,null,null);
  throw iae;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
397,"if (""action"".equals(pd.getName()) && (listToAdd == prefProps) && javax.swing.Action.class.isAssignableFrom(pd.getPropertyType())) {","if (""action"".equals(pd.getName()) && (listToAdd == prefProps) && javax.swing.Action.class.isAssignableFrom(pd.getPropertyType())) {
  action=true;
  prop.setValue(""actionName"",FormUtils.getBundleString(""CTL_SetAction""));
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
398,"if (""contentType"".equals(getName()) && (beanInstance instanceof javax.swing.JTextPane)) {","if (""contentType"".equals(getName()) && (beanInstance instanceof javax.swing.JTextPane)) {
  return;
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
399,layouts[i].gridy + layouts[i].gridheight - 1) >= 512) {,"if (Math.max(layouts[i].gridx + layouts[i].gridwidth - 1,layouts[i].gridy + layouts[i].gridheight - 1) >= 512) {
  for (int j=0; j < i; j++) {
    currentConstraints[j]=null;
  }
  org.openide.DialogDisplayer.getDefault().notify(new org.openide.NotifyDescriptor.Message(NbBundle.getMessage(AbstractLayoutSupport.class,""MSG_ERR_MoreThan512"")));
  return;
}
",0,0,8,,"SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ),
NumberLiteral(),
"
400,"if(ret == null && """".equals(name))ret = (Catalog)catalogs.get(null);","if (ret == null && """".equals(name)) ret=(Catalog)catalogs.get(null);
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
401,"if (""getClass"".contentEquals(el.getSimpleName()) && et.getParameterTypes().isEmpty()","if (""getClass"".contentEquals(el.getSimpleName()) && et.getParameterTypes().isEmpty() && type.getKind() == TypeKind.DECLARED && JAVA_LANG_CLASS.contentEquals(((TypeElement)((DeclaredType)type).asElement()).getQualifiedName()) && ((TypeElement)((DeclaredType)type).asElement()).getTypeParameters().size() == 1) {
  Types types=env.getController().getTypes();
  type=types.getDeclaredType((TypeElement)((DeclaredType)type).asElement(),types.getWildcardType(site,null));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
402,"if (!(datum instanceof GenericRecord) && ""json"".equals(schema.getName())) {","if (!(datum instanceof GenericRecord) && ""json"".equals(schema.getName())) {
  return select(schema.getField(""value"").schema(),datum,tokens);
}
",0,1,6,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
403,if (ts.token().text().charAt(ts.token().length() - 1) == '\n') {,"if (ts.token().text().charAt(ts.token().length() - 1) == '\n') {
  CharSequence text=ts.token().text().subSequence(0,ts.token().length() - 1);
  int newOffset=ts.offset() + ts.token().length() - 1;
  if (text.length() > 0) {
    tokens.add(new FormatToken(FormatToken.Kind.LINE_COMMENT,ts.offset(),text.toString()));
  }
  if (ts.moveNext()) {
    if (ts.token().id() == PHPTokenId.WHITESPACE) {
      if (countOfNewLines(ts.token().text()) > 0) {
        resetAndCreateGroupAlignment();
      }
      tokens.add(new FormatToken(FormatToken.Kind.WHITESPACE_INDENT,newOffset,""\n"" + ts.token().text().toString()));
      if (ts.moveNext() && ts.token().id() == PHPTokenId.PHP_LINE_COMMENT) {
        tokens.add(new FormatToken(FormatToken.Kind.WHITESPACE_BETWEEN_LINE_COMMENTS,ts.offset()));
      }
      ts.movePrevious();
    }
 else {
      tokens.add(new FormatToken(FormatToken.Kind.WHITESPACE_INDENT,newOffset,""\n""));
      ts.movePrevious();
    }
  }
 else {
    tokens.add(new FormatToken(FormatToken.Kind.WHITESPACE_INDENT,newOffset,""\n""));
  }
}
 else {
  tokens.add(new FormatToken(FormatToken.Kind.LINE_COMMENT,ts.offset(),ts.token().text().toString()));
}
",0,1,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
404,if(c1==2) continue OUTER;,"if (c1 == 2) continue OUTER;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ContinueStatement-label, IfStatement-thenStatement, ),
"
405,if (block.getStatements().size() != 1) return null;,"if (block.getStatements().size() != 1) return null;
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
406,if ((exitsFromAllBranches ? 0 : i) + usedAfterSelection.size() > 1) {,"if ((exitsFromAllBranches ? 0 : i) + usedAfterSelection.size() > 1) {
  return ""ERR_Too_Many_Return_Values"";
}
",0,0,6,,"SimpleName(ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
407,"if (!context.checkForEditorModifications() && ""file"".equals(indexable.getURL().getProtocol()) && (root = FileUtil.toFile(context.getRoot())) != null) {","if (!context.checkForEditorModifications() && ""file"".equals(indexable.getURL().getProtocol()) && (root=FileUtil.toFile(context.getRoot())) != null) {
  try {
    return new CompileTuple(FileObjects.fileFileObject(indexable,root,javaContext.getJavaFileFilter(),javaContext.getEncoding()),indexable);
  }
 catch (  Exception ex) {
  }
}
",0,0,13,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
408,else if (line.body.charAt(line.startPos) == '*'),"if (line.body.charAt(line.startPos) == '*') print(' ');
",0,0,4,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
409,"if (param.getKind() == TypeKind.DECLARED && ""java.lang.String"".equals(((TypeElement) ((DeclaredType) param).asElement()).getQualifiedName().toString())) {","if (param.getKind() == TypeKind.DECLARED && ""java.lang.String"".equals(((TypeElement)((DeclaredType)param).asElement()).getQualifiedName().toString())) {
  return null;
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
410,"if (""execute"".equals(method.getName()) && returns != null","if (""execute"".equals(method.getName()) && returns != null && ""void"".equals(returns.getFullyQualifiedName()) && method.isPublic() && !method.isStatic() && !method.isAbstract() && !method.isConstructor()) {
  JavaParameter[] params=method.getParameters();
  if (params.length > 0) {
    JavaParameter param=params[params.length - 1];
    if (requestClass.equals(param.getType().getFullyQualifiedName())) {
      return true;
    }
  }
  if (params.length >= 2) {
    JavaParameter param1=params[params.length - 2];
    JavaParameter param2=params[params.length - 1];
    if (requestClass.equals(param1.getType().getFullyQualifiedName()) && ModelBody.class.getName().equals(param2.getType().getFullyQualifiedName())) {
      return true;
    }
  }
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
411,"el.getParentElement().getParentElement() != null && ""mojo"".equals(el.getParentElement().getParentElement().getName())) {","if (""parameter"".equals(el.getName()) && el.getParentElement() != null && ""parameters"".equals(el.getParentElement().getName()) && el.getParentElement().getParentElement() != null && ""mojo"".equals(el.getParentElement().getParentElement().getName())) {
  return true;
}
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
412,"if (config.getProject() != null && resultCode == 0 && ""debug.fix"".equals(config.getActionName())) {","if (config.getProject() != null && resultCode == 0 && ""debug.fix"".equals(config.getActionName())) {
  String cname=config.getProperties().get(""jpda.stopclass"");
  if (cname != null) {
    reload(config.getProject(),res.getInputOutput().getOut(),cname);
  }
 else {
    res.getInputOutput().getErr().println(""Missing jpda.stopclass property in action mapping definition. Cannot reload class."");
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
413,"if (""bin"".equals(fileOrDir.getParentFile().getName()) && !fileOrDir.getName().endsWith("".conf"")) {","if (""bin"".equals(fileOrDir.getParentFile().getName()) && !fileOrDir.getName().endsWith("".conf"")) {
  fileOrDir.setExecutable(true);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
414,"if (""help"".equals(goalString) && !preferences.getBoolean(PROP_SHOW_HELP_GOALS, false)) {","if (""help"".equals(goalString) && !preferences.getBoolean(PROP_SHOW_HELP_GOALS,false)) {
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
415,"if(handles.isEmpty() && selectedElements.length > 0 && ""package-info"".equals(selectedElements[0].getName())) {","if (handles.isEmpty() && selectedElements.length > 0 && ""package-info"".equals(selectedElements[0].getName())) {
  ui=factory.create(null,new TreePathHandle[]{},selectedElements,new NonRecursiveFolder[0]);
}
 else {
  ui=factory.create(null,handles.toArray(new TreePathHandle[handles.size()]),selectedElements,pkg.toArray(new NonRecursiveFolder[pkg.size()]));
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
416,"if (""text/x-java"".equals(doc.getProperty(""mimeType"")) && doc instanceof BaseDocument) {","if (""text/x-java"".equals(doc.getProperty(""mimeType"")) && doc instanceof BaseDocument) {
  lists.add(new JavaTokenList((BaseDocument)doc));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
417,"if (stringValue.contentEquals(""java"") || ""lang"".equals(stringValue)) return false;","if (stringValue.contentEquals(""java"") || ""lang"".equals(stringValue)) return false;
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
418,"if (""test"".equals(qName) && attributes != null && suite.equals(attributes.getValue(""name""))) {","if (""test"".equals(qName) && attributes != null && suite.equals(attributes.getValue(""name""))) {
  line=loc.getLineNumber();
  column=loc.getColumnNumber() - suite.length() - 3;
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
419,if (t.text().charAt(t.text().length() - 1) == '>') {,"if (t.text().charAt(t.text().length() - 1) == '>') {
  start=seq.offset();
  break;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
420,if (series.getData().size() > 54) series.getData().remove(0);,"if (series.getData().size() > 54) series.getData().remove(0);
",0,2,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
421,"if( ""link"".equals(localName) && null != currentItem && null != atts.getValue(""href"") )","if (""link"".equals(localName) && null != currentItem && null != atts.getValue(""href"")) currentItem.link=fixFeedItemUrl(atts.getValue(""href""));
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
422,"""none"".equals(defaultAnswer.getAttributes().getNamedItem(""generate"").getNodeValue())","if (defaultAnswer != null && ""none"".equals(defaultAnswer.getAttributes().getNamedItem(""generate"").getNodeValue())) {
  log(""Skipping answer as there is <defaultanswer generate='none'"",Project.MSG_VERBOSE);
  continue;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
423,"&& ""$this"".equals(CodeUtils.extractVariableName((Variable) node.getDispatcher()))) {","if (node.getDispatcher() instanceof Variable && ""$this"".equals(CodeUtils.extractVariableName((Variable)node.getDispatcher()))) {
  String name=null;
  String fqn=null;
  for (  TypeScope typeScope : ModelUtils.resolveType(actionParseResult.getModel(),assignment)) {
    name=typeScope.getName();
    fqn=typeScope.getFullyQualifiedName().toString();
    break;
  }
  Variable field=node.getField();
synchronized (fields) {
    final PhpVariable phpVariable=new PhpVariable(""$"" + CodeUtils.extractVariableName(field),name != null ? new PhpClass(name,fqn) : null,action,ASTNodeInfo.toOffsetRangeVar(field).getStart());
    phpVariable.setFile(action);
    fields.add(phpVariable);
  }
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
424,"if(index==1)list.set(0,connectionWidget.getSourceAnchor().compute(connectionWidget.getSourceAnchorEntry()).getAnchorSceneLocation());","if (index == 1) list.set(0,connectionWidget.getSourceAnchor().compute(connectionWidget.getSourceAnchorEntry()).getAnchorSceneLocation());
",0,0,11,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
425,if (lastLine.charAt(lastLine.length() - 1 - i) == '\t') {,"if (lastLine.charAt(lastLine.length() - 1 - i) == '\t') {
  tabs+=removeLastTab();
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
426,"if (!""1.0"".equals(meta.getValue(""version""))) throw new SAXException(""Unsupported DTD"");","if (!""1.0"".equals(meta.getValue(""version""))) throw new SAXException(""Unsupported DTD"");
",0,0,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
427,if (value.trim().length() != 1) break;,"if (value.trim().length() != 1) break;
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
428,"if (read < 1) throw new IOException(""Premature EOF on "" + file.ref.toExternalForm());","if (read < 1) throw new IOException(""Premature EOF on "" + file.ref.toExternalForm());
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
429,"""isDirectory"".equals(stack[i + 1].getMethodName()) &&","if (""isDirectory"".equals(stack[i + 1].getMethodName()) && ""File.java"".equals(stack[i + 1].getFileName())) {
  cnt++;
  sb.append('\n').append(""touch "").append(file);
  break;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ),
"
430,"""File.java"".equals(stack[i + 1].getFileName())","if (""isDirectory"".equals(stack[i + 1].getMethodName()) && ""File.java"".equals(stack[i + 1].getFileName())) {
  cnt++;
  sb.append('\n').append(""touch "").append(file);
  break;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
431,"if (""request_for_refreshing_files_be_aware_this_is_not_public_api"".equals(attrName) && (value instanceof File[])) {","if (""request_for_refreshing_files_be_aware_this_is_not_public_api"".equals(attrName) && (value instanceof File[])) {
  invokeRefreshFor(null,(File[])value);
  return;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
432,"if (value.charAt(value.length() - 1) != '""') value += '""';","if (value.charAt(value.length() - 1) != '""') value+='""';
",0,3,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
433,if (new HashSet<Object>(entry2.getValue().values()).size() > 1) {,"if (new HashSet<Object>(entry2.getValue().values()).size() > 1) {
  sb.append(""Some modules conflict on the definition of "").append(entry2.getKey()).append("" for "").append(entry1.getKey()).append("": "").append(entry2.getValue()).append(""\n"");
}
",0,1,7,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
434,"if ((bOffset == -0.34509805f) && ""nimbusBlueGrey"".equals(uiDefaultParentName)) {","if ((bOffset == -0.34509805f) && ""nimbusBlueGrey"".equals(uiDefaultParentName)) {
  brightness=-bOffset;
}
",0,7,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
435,if (startTime - entries[i].timestamp > 240000) {,"if (startTime - entries[i].timestamp > 240000) {
  newCache.remove(entries[i]);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
436,if( maxRight - dispInsets.left / size < 5 ) {,"if (maxRight - dispInsets.left / size < 5) {
  makeEqualSized(tabsXCoord,dispInsets.left,maxRight);
  return tabsXCoord;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
437,"if( ""font-size"".equals( key.toString() ) && null != value && value.endsWith( ""%"" ) ) {","if (""font-size"".equals(key.toString()) && null != value && value.endsWith(""%"")) {
  String strPercentage=value.replace(""%"","""");
  int percentage=Integer.parseInt(strPercentage);
  if (percentage < 100) {
    value=""100%"";
  }
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
438,"if (urls.length != 1) throw new IllegalStateException(""Weird URLs: "" + Arrays.asList(urls));","if (urls.length != 1) throw new IllegalStateException(""Weird URLs: "" + Arrays.asList(urls));
",0,0,7,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
439,"""Fixed"".equals(((JComponent) obj).getClientProperty(""Toolbar""))) {","if ((obj instanceof JComponent) && ""Fixed"".equals(((JComponent)obj).getClientProperty(""Toolbar""))) {
  org.openide.awt.Toolbar.this.removeAll();
  setBorder(null);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
440,"if (uri.getAuthority() == null && ""file"".equals(uri.getScheme()) && uri.getPath().startsWith(""","if (uri.getAuthority() == null && ""file"".equals(uri.getScheme()) && uri.getPath().startsWith(""//"")) {
  try {
    normalized=new URI(normalized.getScheme(),null,""///"" + normalized.getPath(),normalized.getQuery(),normalized.getFragment());
  }
 catch (  URISyntaxException ex) {
    throw new IllegalStateException(ex);
  }
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
441,"if (""com.aliyun.openservices.ons.api.impl.notify.ConsumerImpl"".equals(this.consumer.getClass().getCanonicalName())","if (""com.aliyun.openservices.ons.api.impl.notify.ConsumerImpl"".equals(this.consumer.getClass().getCanonicalName()) && (next.getKey() instanceof SubscriptionExt)) {
  SubscriptionExt subscription=(SubscriptionExt)next.getKey();
  for (  Method method : this.consumer.getClass().getMethods()) {
    if (""subscribeNotify"".equals(method.getName())) {
      try {
        method.invoke(consumer,subscription.getTopic(),subscription.getExpression(),subscription.isPersistence(),next.getValue());
      }
 catch (      Exception e) {
        throw new ONSClientException(""subscribeNotify invoke exception"",e);
      }
      break;
    }
  }
}
 else {
  Subscription subscription=next.getKey();
  if (subscription.getType() == null || ExpressionType.TAG.name().equals(subscription.getType())) {
    this.subscribe(subscription.getTopic(),subscription.getExpression(),next.getValue());
  }
 else   if (ExpressionType.SQL92.name().equals(subscription.getType())) {
    this.subscribe(subscription.getTopic(),MessageSelector.bySql(subscription.getExpression()),next.getValue());
  }
 else {
    throw new ONSClientException(String.format(""Expression type %s is unknown!"",subscription.getType()));
  }
}
",0,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
442,"""org.netbeans.core.multiview.MultiViewCloneableTopComponent"".equals(this.getClass().getName())) {","if (""org.netbeans.core.multiview.MultiViewTopComponent"".equals(this.getClass().getName()) || ""org.netbeans.core.multiview.MultiViewCloneableTopComponent"".equals(this.getClass().getName())) {
  LOG.info(""Warning: You should not call setActivatedNodes()"" + "" on the multiview topcomponents. Instead please manipulate the lookup of the embedded MultiViewElements."" + "" For details, please see http://www.netbeans.org/issues/show_bug.cgi?id=67257"");
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
443,"if (modelIndex != 2) return super.computeColumnPreferredWidth(modelIndex, viewIndex, firstRow, lastRow);","if (modelIndex != 2) return super.computeColumnPreferredWidth(modelIndex,viewIndex,firstRow,lastRow);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
444,if ('/' == string.charAt(i)) return false;,"if ('/' == string.charAt(i)) return false;
",0,0,5,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
445,"else if (threads.size() == 1) return getFlatProfile(threads.iterator().next(), view);","if (threads.size() == 1) return getFlatProfile(threads.iterator().next(),view);
 else return createContainerForThreads(threads,view).getFlatProfile();
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
446,"if ("""".equals(mname) && !this.className.contains(""*"")) {","if ("""".equals(mname) && !this.className.contains(""*"")) {
  this.methodName=""<init>"";
}
 else {
  this.methodName=mname;
}
",0,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
447,else if (instrScheme == 1) pSettings.setInstrScheme(CommonConstants.INSTRSCHEME_EAGER);,"if (instrScheme == 1) pSettings.setInstrScheme(CommonConstants.INSTRSCHEME_EAGER);
 else pSettings.setInstrScheme(CommonConstants.INSTRSCHEME_TOTAL);
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
448,if (currentPosition - lastPosition > 1) _items.add(null);,"if (currentPosition - lastPosition > 1) _items.add(null);
",0,0,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
449,if (++progressDots > 3) progressDots = 0;,"if (++progressDots > 3) progressDots=0;
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
450,"if (browserImpl == null && (u != null) && ""file"".equals(u.getProtocol())","if (browserImpl == null && (u != null) && ""file"".equals(u.getProtocol()) && ""localhost"".equals(u.getHost())) {
  try {
    u=new URL(u.getProtocol(),"""",u.getPort(),u.getFile());
    pair=awaitingBrowserResponse.remove(urlToString(u));
  }
 catch (  MalformedURLException ex) {
    LOG.log(Level.WARNING,""cannot parse URL: {0}"",url);
  }
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
451,"if(columns.length > 5)library.setKeywords(columns[5].split("" ""));","if (columns.length > 5) library.setKeywords(columns[5].split("" ""));
",0,0,8,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
452,"if (""arguments"".equals(object.getName()) || object.getJSKind() == JsElement.Kind.ANONYMOUS_OBJECT","if (""arguments"".equals(object.getName()) || object.getJSKind() == JsElement.Kind.ANONYMOUS_OBJECT || object.getModifiers().contains(Modifier.PRIVATE)) {
  result=false;
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
453,{ if (zzInput == ')') parenBalance--;,"if (zzInput == ')') parenBalance--;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
454,"if (!""Jirka"".equals(p1.getFirstName())) {","if (!""Jirka"".equals(p1.getFirstName())) {
  throw new InterruptedException();
}
",0,0,0,,
455,"if (!""Ondra"".equals(p2.getFirstName())) {","if (!""Ondra"".equals(p2.getFirstName())) {
  throw new InterruptedException();
}
",0,0,0,,
456,"if (""boolean"".equals(type) && !array) {","if (""boolean"".equals(type) && !array) {
  pref=""is"";
}
",0,0,0,,
457,if (e.getParameters().size() < 2) {,"if (e.getParameters().size() < 2) {
  error(""@OnReceive method needs at least two parameters"",e);
}
",0,0,0,,
458,} else if (expectsList == 2) {,"if (expectsList == 2) {
  args.add(""net.java.html.json.Models.asList(arr)"");
}
 else {
  args.add(""arr[0]"");
}
",0,0,0,,
459,if (params.size() != 2) {,"String firstType=params.get(0).asType().toString();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
460,"if (!""j2se"".equals(platform.getSpecification().getName())) continue;","if (!""j2se"".equals(platform.getSpecification().getName())) continue;
",0,1,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
461,"if (!IndexAccessor.getCurrent().isAcceptable(indexable.getURL()) || ""text/x-java"".equals(indexable.getMimeType())) return;","if (!IndexAccessor.getCurrent().isAcceptable(indexable.getURL()) || ""text/x-java"".equals(indexable.getMimeType())) return;
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
462,"if ( ( groupIdPrefix + "".modules"" ).equals( a.getGroupId() ) && ""org-netbeans-bootstrap"".equals( a.","if ((groupIdPrefix + "".modules"").equals(a.getGroupId()) && ""org-netbeans-bootstrap"".equals(a.getArtifactId())) {
  version=a.getBaseVersion();
  break;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
463,"if (i < args.length - 1 && ""-sort"".equals(args[i + 1])) {","if (i < args.length - 1 && ""-sort"".equals(args[i + 1])) {
  toSort=true;
  i++;
}
",0,2,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
464,"if (""true"".equals(job.get(""pig.usercomparator"")) || t.size() > 1) {","if (""true"".equals(job.get(""pig.usercomparator"")) || t.size() > 1) {
  return new NullableTuple(t);
}
 else {
  Object o=t.get(0);
  String kts=job.get(""pig.reduce.key.type"");
  if (kts == null) {
    throw new RuntimeException(""Didn't get reduce key type "" + ""from config file."");
  }
  return HDataType.getWritableComparableTypes(o,Byte.valueOf(kts));
}
",0,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
465,"if (rel != null && ""license"".equals(rel) && this.relLicense == null) {","if (rel != null && ""license"".equals(rel) && this.relLicense == null) {
  this.relLicense=url;
}
 else if (this.anchorLicense == null) {
  this.anchorLicense=url;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
466,"if (productPrice != null && ""Y"".equals(productPrice.getString(""taxInPrice"")) && itemQuantity != BigDecimal.ZERO) {","if (productPrice != null && ""Y"".equals(productPrice.getString(""taxInPrice"")) && itemQuantity != BigDecimal.ZERO) {
  taxAdjValue.set(""orderAdjustmentTypeId"",""VAT_TAX"");
  BigDecimal taxAmountIncludedInFullPrice=itemPrice.subtract(itemPrice.divide(BigDecimal.ONE.add(taxRate.divide(PERCENT_SCALE,4,BigDecimal.ROUND_HALF_UP)),2,BigDecimal.ROUND_HALF_UP)).multiply(itemQuantity);
  BigDecimal netItemPrice=itemAmount.divide(itemQuantity,BigDecimal.ROUND_HALF_UP);
  BigDecimal netTax=netItemPrice.subtract(netItemPrice.divide(BigDecimal.ONE.add(taxRate.divide(PERCENT_SCALE,4,BigDecimal.ROUND_HALF_UP)),2,BigDecimal.ROUND_HALF_UP)).multiply(itemQuantity);
  discountedSalesTax=netTax.subtract(taxAmountIncludedInFullPrice);
  taxAdjValue.set(""amountAlreadyIncluded"",taxAmountIncludedInFullPrice);
  taxAdjValue.set(""amount"",BigDecimal.ZERO);
}
 else {
  taxAdjValue.set(""amount"",taxAmount);
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
467,"if (""URL_RESOURCE"".equals(dataResource.getString(""dataResourceTypeId"")) && UtilValidate.isNotEmpty(combinedName) && combinedName.startsWith(""component:","if (""URL_RESOURCE"".equals(dataResource.getString(""dataResourceTypeId"")) && UtilValidate.isNotEmpty(combinedName) && combinedName.startsWith(""component://"")) {
  modelScreen=ScreenFactory.getScreenFromLocation(combinedName);
}
 else {
  Document screenXml=UtilXml.readXmlDocument(getDataResourceText(dataResource,targetMimeTypeId,locale,templateContext,delegator,cache),true,true);
  Map<String,ModelScreen> modelScreenMap=ScreenFactory.readScreenDocument(screenXml,""DataResourceId: "" + dataResource.getString(""dataResourceId""));
  if (UtilValidate.isNotEmpty(modelScreenMap)) {
    Map.Entry<String,ModelScreen> entry=modelScreenMap.entrySet().iterator().next();
    modelScreen=entry.getValue();
  }
}
",0,0,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
468,"if (""error"".equals(CheckOutEvents.cartNotEmpty(request, response)) == true) {","if (""error"".equals(CheckOutEvents.cartNotEmpty(request,response)) == true) {
  return ""error"";
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
469,"if (itemIndex != null && ""multi"".equals(this.modelForm.getType())) {","if (itemIndex != null && ""multi"".equals(this.modelForm.getType())) {
  return baseName + this.modelForm.getItemIndexSeparator() + itemIndex.intValue();
}
 else {
  return baseName;
}
",0,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
470,"} else if (""PPIP_ORDER_SHIPTOTAL"".equals(inputParamEnumId) && shippingMethod.equals(cart.getShipmentMethodTypeId()) && carrierPartyId.equals(cart.getCarrierPartyId())) {","if (""PPIP_ORDER_SHIPTOTAL"".equals(inputParamEnumId) && shippingMethod.equals(cart.getShipmentMethodTypeId()) && carrierPartyId.equals(cart.getCarrierPartyId())) {
  if (UtilValidate.isNotEmpty(condValue)) {
    BigDecimal orderTotalShipping=cart.getTotalShipping();
    if (Debug.verboseOn()) {
      Debug.logVerbose(""Doing order total Shipping compare: ordertotalShipping="" + orderTotalShipping,module);
    }
    compareBase=orderTotalShipping.compareTo(new BigDecimal(condValue));
  }
}
 else if (""PPIP_LPMUP_AMT"".equals(inputParamEnumId)) {
  return true;
}
 else if (""PPIP_LPMUP_PER"".equals(inputParamEnumId)) {
  return true;
}
 else {
  Debug.logWarning(UtilProperties.getMessage(resource_error,""OrderAnUnSupportedProductPromoCondInputParameterLhs"",UtilMisc.toMap(""inputParamEnumId"",productPromoCond.getString(""inputParamEnumId"")),cart.getLocale()),module);
  return false;
}
",0,0,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
471,"if (contactMech != null && ""POSTAL_ADDRESS"".equals(contactMech.getString(""contactMechTypeId"")) && !contactMech.getString(""contactMechId"").equals(curContactMechId)) {","if (contactMech != null && ""POSTAL_ADDRESS"".equals(contactMech.getString(""contactMechTypeId"")) && !contactMech.getString(""contactMechId"").equals(curContactMechId)) {
  Map<String,Object> postalAddressInfo=new HashMap<String,Object>();
  postalAddressInfos.add(postalAddressInfo);
  postalAddressInfo.put(""contactMech"",contactMech);
  postalAddressInfo.put(""partyContactMech"",partyContactMech);
  try {
    GenericValue postalAddress=contactMech.getRelatedOne(""PostalAddress"",false);
    postalAddressInfo.put(""postalAddress"",postalAddress);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
  try {
    List<GenericValue> partyContactMechPurposes=EntityUtil.filterByDate(partyContactMech.getRelated(""PartyContactMechPurpose"",null,null,false),true);
    postalAddressInfo.put(""partyContactMechPurposes"",partyContactMechPurposes);
  }
 catch (  GenericEntityException e) {
    Debug.logWarning(e,module);
  }
}
",0,1,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
472,"if (""PARCEL"".equals(serviceCode.toUpperCase(Locale.getDefault())) && (weightPoundsOunces[0] < 1)) {","if (""PARCEL"".equals(serviceCode.toUpperCase(Locale.getDefault())) && (weightPoundsOunces[0] < 1)) {
  weightPoundsOunces[0]=1;
  weightPoundsOunces[1]=0;
}
",0,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
473,"if (""function"".equals(this.scope) && this.resultToFieldList != null) {","if (""function"".equals(this.scope) && this.resultToFieldList != null) {
  Map<String,Object> results=localContext.getResults();
  if (results != null) {
    for (    ResultToField resultToField : this.resultToFieldList) {
      resultToField.exec(methodContext.getEnvMap(),results);
    }
  }
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
474,"if (""OUT"".equals(modelParam.mode) || modelParam.internal) continue;","if (""OUT"".equals(modelParam.mode) || modelParam.internal) continue;
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
475,"if ((eventReturn == null || ""success"".equals(eventReturn)) && successResponse != null && ""request"".equals(successResponse.type)) {","if ((eventReturn == null || ""success"".equals(eventReturn)) && successResponse != null && ""request"".equals(successResponse.type)) {
  if (UtilValidate.isNotEmpty(overrideViewUri)) {
    request.setAttribute(""_POST_CHAIN_VIEW_"",overrideViewUri);
  }
  nextRequestResponse=successResponse;
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
476,"if (supplierProducts.isEmpty() && product.getString(""isVariant"") != null && ""Y"".equals(product.getString(""isVariant""))) {","if (supplierProducts.isEmpty() && product.getString(""isVariant"") != null && ""Y"".equals(product.getString(""isVariant""))) {
  String virtualProductId=ProductWorker.getVariantVirtualId(product);
  GenericValue virtualProduct=EntityQuery.use(delegator).from(""Product"").where(""productId"",virtualProductId).cache().queryOne();
  if (virtualProduct != null) {
    supplierProducts=virtualProduct.getRelated(""SupplierProduct"",null,null,true);
  }
}
",0,0,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
477,"if (!platformSpecificPath.contains(File.separator) && ""\\"".equals(File.separator)) {","if (!platformSpecificPath.contains(File.separator) && ""\\"".equals(File.separator)) {
  platformSpecificPath=platformSpecificPath.replaceAll(""/"",""\\\\"");
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
478,"if ((eventReturn == null || ""success"".equals(eventReturn)) && successResponse != null && ""request"".equals(successResponse.getType())) {","if ((eventReturn == null || ""success"".equals(eventReturn)) && successResponse != null && ""request"".equals(successResponse.getType())) {
  if (UtilValidate.isNotEmpty(overrideViewUri)) {
    request.setAttribute(""_POST_CHAIN_VIEW_"",overrideViewUri);
  }
  nextRequestResponse=successResponse;
}
",0,0,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
479,"if (isIdTag && isKeyAutoGenerated && """".equals(keyValue) && keyValue.length() == 0) {","if (isIdTag && isKeyAutoGenerated && """".equals(keyValue)&& keyValue.length() == 0) {
  sb.append(extension == null ? """" : (""/"" + extension));
}
 else {
  sb.append(""("").append(keyValue).append("")"").append(extension == null ? """" : (""/"" + extension));
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
480,"if (attrValue.length == 2 && ""boundary"".equals(attrValue[0].trim().toLowerCase(Locale.ENGLISH))) {","if (attrValue.length == 2 && ""boundary"".equals(attrValue[0].trim().toLowerCase(Locale.ENGLISH))) {
  if (PATTERN_BOUNDARY.matcher(attrValue[1]).matches()) {
    return trimQuota(attrValue[1].trim());
  }
 else {
    throw new BatchException(BatchException.INVALID_BOUNDARY.addContent(line));
  }
}
",0,0,9,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
481,"if (isolation != null && ""snapshot"".equals(isolation) && !this.handler.supportsDataIsolation()) {","if (isolation != null && ""snapshot"".equals(isolation) && !this.handler.supportsDataIsolation()) {
  odResponse.setStatusCode(HttpStatusCode.PRECONDITION_FAILED.getStatusCode());
  return;
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
482,"if (new QName(""uri:another:HelloWorld"", ""HelloWorldService"").equals(endpoint.getServiceName()) && ""HelloWorldPort"".equals(endpoint.getEndpointName())) {","if (new QName(""uri:another:HelloWorld"",""HelloWorldService"").equals(endpoint.getServiceName()) && ""HelloWorldPort"".equals(endpoint.getEndpointName())) {
  return DomUtil.parse(getClass().getResourceAsStream(""HelloWorld-DOC.wsdl""));
}
 else {
  return null;
}
",0,1,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
483,"if (""urn:a:y"".equals(p.getName()) && context.getClass().getName().equals(p.getClassName()))","if (""urn:a:y"".equals(p.getName()) && context.getClass().getName().equals(p.getClassName())) sawA=true;
 else if (""urn:b:x"".equals(p.getName()) && ""java.lang.Class"".equals(p.getClassName())) sawB=true;
 else fail(""Unexpected binding \"""" + p.getName() + ""\"" to ""+ p.getClassName());
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
484,"if (name.size() == 1 && ""inject"".equals(name.get(0))) inject(obj);","if (name.size() == 1 && ""inject"".equals(name.get(0))) inject(obj);
 else super.bind(name,obj);
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
485,"if (name != null && ""inject"".equals(name)) inject(obj);","if (name != null && ""inject"".equals(name)) inject(obj);
 else super.bind(name,obj);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
486,if (b == '\n') super.write('#');,"if (b == '\n') super.write('#');
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(SuperMethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
487,"if (!""localhost"".equals(d.serverName())) dataSource.setServerName(d.serverName());","if (!""localhost"".equals(d.serverName())) dataSource.setServerName(d.serverName());
",0,0,8,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
488,"if (isWindows && ""start"".equals(cmd) && options.get(""server.windows.fork"", false)) {","if (isWindows && ""start"".equals(cmd) && options.get(""server.windows.fork"",false)) {
  java=new File(System.getProperty(""java.home""),""bin/javaw"").getAbsolutePath();
}
 else {
  java=new File(System.getProperty(""java.home""),""bin/java"").getAbsolutePath();
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
489,+ testClassFinder.findAnnotatedMethods(MockInjector.class).size() > 1) {,"if (testClassFinder.findAnnotatedMethods(org.apache.openejb.junit.MockInjector.class).size() + testClassFinder.findAnnotatedMethods(MockInjector.class).size() > 1) {
  errors.add(new Exception(""Test class should have no more than one @MockInjector method""));
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NumberLiteral(),
"
490,"if (MulticastPulseAgent.this.group.equals(s) || ""*"".equals(s)) {","if (MulticastPulseAgent.this.group.equals(s) || ""*"".equals(s)) {
  if (MulticastPulseAgent.this.loopbackOnly) {
    if (!MulticastPulseAgent.isLocalAddress(client,false)) {
      log.debug(String.format(""Ignoring remote client %1$s pulse request for group: %2$s - No remote services available"",client,s));
      continue;
    }
  }
  log.debug(String.format(""Answering client %1$s pulse request for group: %2$s"",client,s));
  socket.send(MulticastPulseAgent.this.response);
}
 else {
  log.debug(String.format(""Ignoring client %1$s pulse request for group: %2$s"",client,s));
}
",0,0,7,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
491,"&& ""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.force-unit-type"", unit.getProperty(""openejb.force-unit-type"", ""true"")))) {","if (unit.getJtaDataSource() == null && unit.getNonJtaDataSource() == null && ""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.force-unit-type"",unit.getProperty(""openejb.force-unit-type"",""true"")))) {
  unit.setTransactionType(TransactionType.JTA);
}
",0,1,10,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
492,if (getIndependentElementMappings(true).length > 1),"if (getIndependentElementMappings(true).length > 1) return 0;
",0,0,4,,"SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
493,"if (col == null && val != null && ""java.util.Date"".equals(val.getClass().getName())) {","if (col == null && val != null && ""java.util.Date"".equals(val.getClass().getName())) {
  setDate(stmnt,idx,new java.sql.Date(val.getTime()),null,col);
  return;
}
",0,0,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
494,"if (subtype == StoreException.LOCK && errorCode == 14529 && ""HY000"".equals(errorState))","if (subtype == StoreException.LOCK && errorCode == 14529 && ""HY000"".equals(errorState)) return false;
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
495,"if (s.replace('.','&').split(""&"").length>3)","if (s.replace('.','&').split(""&"").length > 3) continue;
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
496,{  if (j < 1) return false;,"if (j < 1) return false;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
497,{  if (b[k] == 's'),"if (b[k] == 's') {
  if (ends(""sses""))   k-=2;
 else   if (ends(""ies""))   setto(""i"");
 else   if (b[k - 1] != 's')   k--;
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
"
498,if (k > 1) { step1(); step2(); step3(); step4(); step5(); step6(); },"if (k > 1) {
  step1();
  step2();
  step3();
  step4();
  step5();
  step6();
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
499,"&& ""PS"".equals(this.xobject.getNameAsString(""Subtype2"")))","if (this.xobject.getItem(COSName.getPDFName(""Subtype2"")) != null && ""PS"".equals(this.xobject.getNameAsString(""Subtype2""))) {
  context.addValidationError(new ValidationError(ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY,""Unexpected 'PS' value for 'Subtype2' Key""));
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
500,"else if(""cov"".equals(instruction.getOpcode()) && (ec.getMatrixObject(instruction.input1).isFederated(FType.ROW) ||","if (""cov"".equals(instruction.getOpcode()) && (ec.getMatrixObject(instruction.input1).isFederated(FType.ROW) || ec.getMatrixObject(instruction.input2).isFederated(FType.ROW))) fedinst=CovarianceFEDInstruction.parseInstruction(inst.getInstructionString());
 else fedinst=BinaryFEDInstruction.parseInstruction(InstructionUtils.concatOperands(inst.getInstructionString(),FederatedOutput.NONE.name()));
",0,4,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
501,"if (statements.size() == 1) return select(statements.get(0), orderBy, limit, offset, bindCount, isAggregate);","if (statements.size() == 1) return select(statements.get(0),orderBy,limit,offset,bindCount,isAggregate);
",0,0,12,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
502,if (m > 1) ((PigSplit) split).setMultiInputs(true);,"if (m > 1) ((PigSplit)split).setMultiInputs(true);
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
503,if (((DataBag)bags[i]).size() < 2) {,"if (((DataBag)bags[i]).size() < 2) {
  break;
}
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
504,if((bytes[bytes.length - i - 1] & 0x0ff) != 255) {,"if ((bytes[bytes.length - i - 1] & 0x0ff) != 255) {
  allAtMax=false;
  break;
}
",0,0,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
505,if (t.size() == 1) b = DataType.toBytes(t.get(0));,"if (t.size() == 1) b=DataType.toBytes(t.get(0));
 else b=DataType.toBytes(t,DataType.TUPLE);
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
506,"if ("""".equals(codec) && conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) != null) {","if ("""".equals(codec) && conf.get(MRConfiguration.OUTPUT_COMPRESSION_CODEC) != null) {
  conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS,true);
}
 else if (TEMPFILE_STORAGE.SEQFILE.ensureCodecSupported(codec)) {
  conf.setBoolean(MRConfiguration.OUTPUT_COMPRESS,true);
  conf.set(MRConfiguration.OUTPUT_COMPRESSION_CODEC,TEMPFILE_CODEC.valueOf(codec.toUpperCase()).getHadoopCodecClassName());
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
507,if( plan.getSuccessors(this).size() < 1 ) {,"if (plan.getSuccessors(this).size() < 1) {
  throw new FrontendException(""Could not find a related project Expression for Dereference"",2228);
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
508,if (Integer.valueOf(iter.next().toString()) < 43200) morning++;,"if (Integer.valueOf(iter.next().toString()) < 43200) morning++;
 else afternoon++;
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
509,"if((vl.getChild() != null) && ""encoding"".equals(vl.getChild().getName()) && (field instanceof TypedField) && (((TypedField) field).getType() instanceof StringTypeReference)) {","if ((vl.getChild() != null) && ""encoding"".equals(vl.getChild().getName()) && (field instanceof TypedField)&& (((TypedField)field).getType() instanceof StringTypeReference)) {
  TypedField typedField=(TypedField)field;
  StringTypeReference stringTypeReference=(StringTypeReference)typedField.getType();
  return ""\"""" + stringTypeReference.getEncoding().substring(1,stringTypeReference.getEncoding().length() - 1) + ""\"""";
}
 else {
  throw new FreemarkerException(""_type is currently pretty much hard-coded for some usecases, please check CLanguageTemplateHelper.toVariableParseExpression"");
}
",0,0,14,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
510,.forEach(f -> { if (idx[0]++ == 2) { assertNull(f); } else { assertNotNull(f); }} );,"if (idx[0]++ == 2) {
  assertNull(f);
}
 else {
  assertNotNull(f);
}
",0,0,7,,"SimpleName(ArrayAccess-array, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-elseStatement, Block-statements, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-elseStatement, Block-statements, LambdaExpression-body, ),
"
511,if(children.length < 5) { upTo = children.length; },"if (children.length < 5) {
  upTo=children.length;
}
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
QualifiedName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
512,"""___PPT9"".equals(((CString)ch[0]).getText())","if (ch != null && ch.length == 2 && ch[0] instanceof CString && ch[1] instanceof BinaryTagDataBlob && ""___PPT9"".equals(((CString)ch[0]).getText())) {
  BinaryTagDataBlob blob=(BinaryTagDataBlob)ch[1];
  StyleTextProp9Atom prop9=(StyleTextProp9Atom)blob.findFirstOfType(RecordTypes.StyleTextProp9Atom.typeID);
  if (prop9 != null) {
    return Stream.of(prop9);
  }
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
513,"if (""\'"".equals(ch) && type.isSpecial('\'')) {","if (""\'"".equals(ch) && type.isSpecial('\'')) {
  sb.append('\u0000');
  continue;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
514,if (type==1) ipmt /= (1 + r);,"if (type == 1) ipmt/=(1 + r);
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
515,"if ((values != null) && (values.length > 0) && ""PORTLET_SCOPE"".equals(values[0])) {","if ((values != null) && (values.length > 0) && ""PORTLET_SCOPE"".equals(values[0])) {
  String portletWindowId=getPortletWindow().getId().getStringId();
  sess=ServletPortletSessionProxy.createProxy(getServletRequest(),portletWindowId);
}
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
516,"if (keyValue.length == 2 && ""CN"".equals(keyValue[0]) && !keyValue[1].isEmpty()) {","if (keyValue.length == 2 && ""CN"".equals(keyValue[0]) && !keyValue[1].isEmpty()) {
  commonName=keyValue[1];
  break;
}
",0,0,9,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
517,if (this.resourceGroupTenantRefs.size() + this.resourceGroupNamespaceRefs.size() == 1) {,"if (this.resourceGroupTenantRefs.size() + this.resourceGroupNamespaceRefs.size() == 1) {
  log.debug(""registerUsage for RG={}: registering with transport-mgr"",this.resourceGroupName);
  transportManager.registerResourceUsagePublisher(this.ruPublisher);
  transportManager.registerResourceUsageConsumer(this.ruConsumer);
}
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
518,"if (CONTEXT.equals(name) && ""HTTP"".equals(super.getAttribute(TYPE)))","if (CONTEXT.equals(name) && ""HTTP"".equals(super.getAttribute(TYPE))) {
  Map<String,String> context=(Map<String,String>)super.getActualAttribute(CONTEXT);
  return convertContextIfRequired(context);
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
519,"if (""PRODUCER_FLOW_CONTROL"".equals(String.valueOf(overflowPolicy)) && maximumQueueDepthBytes != null)","if (""PRODUCER_FLOW_CONTROL"".equals(String.valueOf(overflowPolicy)) && maximumQueueDepthBytes != null) {
  final long queueFlowControlSizeBytesValue=ConverterHelper.toLong(maximumQueueDepthBytes);
  if (queueFlowControlSizeBytesValue > 0) {
    int queueFlowResumeLimit=80;
    @SuppressWarnings(""unchecked"") Map<String,String> context=(Map<String,String>)super.getAttribute(CONTEXT);
    if (context != null) {
      queueFlowResumeLimit=ConverterHelper.toInt(context.get(""queue.queueFlowResumeLimit""));
      if (queueFlowResumeLimit == 0) {
        queueFlowResumeLimit=80;
      }
    }
    return Math.round(queueFlowControlSizeBytesValue * ((double)queueFlowResumeLimit) / 100.0);
  }
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
520,"if (""System.gc()"".equals(gcCause) && String.valueOf(gcAction).contains(""end of major GC""))","if (""System.gc()"".equals(gcCause) && String.valueOf(gcAction).contains(""end of major GC"")) {
  try {
    collectMemoryStatistics(memoryStatistics,mBeanServerConnection,memoryMBean);
  }
  finally {
    notificationReceived.countDown();
  }
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
521,"if(!StringUtils.isEmpty(sessionUserName) && ""keyadmin"".equalsIgnoreCase(sessionUserName) && !StringUtils.isEmpty(pathInfo) && pathInfo.contains(""public/v2/api/service"")){","if (!StringUtils.isEmpty(sessionUserName) && ""keyadmin"".equalsIgnoreCase(sessionUserName) && !StringUtils.isEmpty(pathInfo)&& pathInfo.contains(""public/v2/api/service"")) {
  LOG.info(""Session will be created by : "" + sessionUserName);
  userName=sessionUserName;
}
",0,0,12,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
522,if (++TaskResubmitDriver.this.failuresSeen <= 1) {,"if (++TaskResubmitDriver.this.failuresSeen <= 1) {
  activeContext.submitTask(getTaskConfiguration());
}
 else {
  activeContext.close();
}
",0,0,3,,"SimpleName(ThisExpression-qualifier, FieldAccess-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
523,"if (""ESRI"".equalsIgnoreCase(Citations.toCodeSpace(authority)) && !name.startsWith(Simplifier.ESRI_DATUM_PREFIX)) {","if (""ESRI"".equalsIgnoreCase(Citations.toCodeSpace(authority)) && !name.startsWith(Simplifier.ESRI_DATUM_PREFIX)) {
  name=Simplifier.ESRI_DATUM_PREFIX + name;
}
",0,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
524,"if (!""1"".equals(getParameter(request, MULTI_PART_FORM_POST, null))) {","if (!""1"".equals(getParameter(request,MULTI_PART_FORM_POST,null))) {
  response.setHeader(""Content-Disposition"",""attachment;filename=p.txt"");
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
525,"if (""licence"".equals(value.codeListValue) && !accept2014()) {","if (""licence"".equals(value.codeListValue) && !accept2014()) {
  value.codeListValue=""license"";
}
 else if (""license"".equals(value.codeListValue) && accept2014()) {
  value.codeListValue=""licence"";
}
",0,0,4,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
526,"if (start >= 0 && ""jdbc"".equalsIgnoreCase((String) CharSequences.trimWhitespaces(url, 0, start))) {","if (start >= 0 && ""jdbc"".equalsIgnoreCase((String)CharSequences.trimWhitespaces(url,0,start))) {
  final int end=url.indexOf(':',++start);
  if (end >= 0) {
    final String protocol=(String)CharSequences.trimWhitespaces(url,start,end);
    for (    final Dialect candidate : values()) {
      if (protocol.equalsIgnoreCase(candidate.protocol)) {
        return candidate;
      }
    }
  }
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
527,"if (location != 1) startTime = DefaultTemporalExtent.getTime(p, true);","if (location != 1) startTime=DefaultTemporalExtent.getTime(p,true);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
528,"if (method.getDeclaringClass() == ResponsibleParty.class && ""getRole"".equals(method.getName())) {","if (method.getDeclaringClass() == ResponsibleParty.class && ""getRole"".equals(method.getName())) {
  method=DefaultResponsibility.class.getMethod(""getRole"");
}
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
529,if (c < '1') continue searchValidRecord;,"if (c < '1') continue searchValidRecord;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ContinueStatement-label, IfStatement-thenStatement, ),
"
530,if (c > '9') break searchValidRecord;,"if (c > '9') break searchValidRecord;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, ),
"
531,if (elements[--i] == 1) {,"if (elements[--i] == 1) {
  final int base=(numRow - 1) * numCol;
  while (--i >= base) {
    if (elements[i] != 0) {
      return false;
    }
  }
  return true;
}
",0,0,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
532,if (term.length != 1) b.append('(');,"if (term.length != 1) b.append('(');
",0,0,5,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
533,if (i == 2) switch (j) {,"if (i == 2) switch (j) {
case 0:
  expected=-146.414;
break;
case 1:
expected=507.337;
break;
case 2:
expected=680.507;
break;
}
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SwitchStatement-expression, IfStatement-thenStatement, ),
"
534,if (i <= 1) source[i ^ 1] = value;,"if (i <= 1) source[i ^ 1]=value;
 else target[i - 2]=value;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
535,if (i == 1) e = -e;,"if (i == 1) e=-e;
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
536,"if (length <= 4) return ArraysExt.range(0, length - 1);","if (length <= 4) return ArraysExt.range(0,length - 1);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
537,if ((keyword[--pos] &= ~0x20) == 'R') {,"if ((keyword[--pos]&=~0x20) == 'R') {
  keyword[--pos]&=~0x20;
  version=2;
}
",0,0,4,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
538,"if (""path"".equals(column.getName()) && CassandraResourceProviderUtil.isAnImmediateChild(resourcePath, column.getValue().toString())) {","if (""path"".equals(column.getName()) && CassandraResourceProviderUtil.isAnImmediateChild(resourcePath,column.getValue().toString())) {
  children.add(new CassandraResource(resourceProvider,resourceResolver,column.getValue().toString(),valueMap));
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
539,if (701 == transitionToExecute.transition.getId()) {,"if (701 == transitionToExecute.transition.getId()) {
  ex.sendResponseHeaders(204,-1);
}
 else {
  ex.sendResponseHeaders(400,-1);
}
",0,0,3,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
540,"if (""br"".equals(localName) && (""clear"".equals(atts.getLocalName(i)))) {","if (""br"".equals(localName) && (""clear"".equals(atts.getLocalName(i)))) {
  return true;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
541,if (disData.suggestionMap.get(s.getEntityAnnotation()).size() > 1) {,"if (disData.suggestionMap.get(s.getEntityAnnotation()).size() > 1) {
  log.info(""clone {} suggesting {} for {}[{},{}]({})"",new Object[]{s.getEntityAnnotation(),s.getEntityUri(),savedEntity.getName(),savedEntity.getStart(),savedEntity.getEnd(),savedEntity.getUri()});
  s.setEntityAnnotation(cloneTextAnnotation(graph,s.getEntityAnnotation(),savedEntity.getUri()));
  log.info(""  - cloned {}"",s.getEntityAnnotation());
}
",0,0,6,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
542,"if (matchedClass.split(""\\s"").length > 1) return true;","if (matchedClass.split(""\\s"").length > 1) return true;
",0,0,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
543,"if(langs[i].length()<1 || ""null"".equals(langs[i])){","if (langs[i].length() < 1 || ""null"".equals(langs[i])) {
  langs[i]=null;
}
",0,0,8,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
544,if(((Collection<Object>)values).size()==1){,"if (((Collection<Object>)values).size() == 1) {
  representation.put(field,((Collection<Object>)values).iterator().next());
}
 else {
  representation.remove(field);
}
",0,0,5,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
545,if(((String[])values).length<1){,"if (((String[])values).length < 1) {
  return null;
}
 else {
  return (String[])values;
}
",0,0,5,,"SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
546,"if (format == null || """".equals(format.trim())) formats = OntologyUtils.getPreferredFormats();","if (format == null || """".equals(format.trim())) formats=OntologyUtils.getPreferredFormats();
 else formats=Collections.singleton(format);
",0,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
547,"} else if (""CPU"".equals(dp.name) && dp.value instanceof Map) {","if (""CPU"".equals(dp.name) && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object sys=m.get(""sys-ms"");
  if (sys instanceof Number) {
    systemCpu.getAndAdd(((Number)sys).longValue());
  }
  Object user=m.get(""user-ms"");
  if (user instanceof Number) {
    userCpu.getAndAdd(((Number)user).longValue());
  }
}
 else if (dp.name.startsWith(""GC/"") && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object count=m.get(""count"");
  if (count instanceof Number) {
    gcCount.getAndAdd(((Number)count).longValue());
  }
  Object time=m.get(""timeMs"");
  if (time instanceof Number) {
    gcMs.getAndAdd(((Number)time).longValue());
  }
}
 else if (dp.name.startsWith(""memory/"") && dp.value instanceof Map) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object val=m.get(""usedBytes"");
  if (val instanceof Number) {
    MemMeasure mm=memoryBytes.get(worker);
    if (mm == null) {
      mm=new MemMeasure();
      MemMeasure tmp=memoryBytes.putIfAbsent(worker,mm);
      mm=tmp == null ? mm : tmp;
    }
    mm.update(((Number)val).longValue());
  }
}
 else if (dp.name.equals(""__receive"")) {
  Map<Object,Object> m=(Map<Object,Object>)dp.value;
  Object pop=m.get(""population"");
  Object cap=m.get(""capacity"");
  if (pop instanceof Number && cap instanceof Number) {
    double full=((Number)pop).doubleValue() / ((Number)cap).doubleValue();
    if (full >= 0.8) {
      congested.get().put(topologyId + "":"" + taskInfo.srcComponentId+ "":""+ taskInfo.srcTaskId,""receive "" + pop + ""/""+ cap);
    }
  }
}
 else if (dp.name.equals(""__skipped-max-spout-ms"")) {
  if (dp.value instanceof Number) {
    skippedMaxSpoutMs.getAndAdd(((Number)dp.value).longValue());
    double full=((Number)dp.value).doubleValue() / 10_000.0;
    if (full >= 0.8) {
      congested.get().put(topologyId + "":"" + taskInfo.srcComponentId+ "":""+ taskInfo.srcTaskId,""max.spout.pending "" + (int)(full * 100) + ""%"");
    }
  }
}
",0,0,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
548,if (768.0 == (double) readConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) {,"if (768.0 == (double)readConf.get(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB)) {
  topologyUpdated=true;
  break;
}
",0,0,5,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
549,if (c == '\n') indentBuffer = new StringBuffer();,"if (c == '\n') indentBuffer=new StringBuffer();
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
550,"if (value.charAt(0) != '""') value = '""' + value;","if (value.charAt(0) != '""') value='""' + value;
",0,0,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
551,if (tok.ttype == '}') break;,"if (tok.ttype == '}') break;
",0,0,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
552,"if (messageCtx.getProperty(NhttpConstants.HTTP_202_RECEIVED) != null && ""true"".equals(","if (messageCtx.getProperty(NhttpConstants.HTTP_202_RECEIVED) != null && ""true"".equals(messageCtx.getProperty(NhttpConstants.HTTP_202_RECEIVED))) {
  if (callbackStore.containsKey(messageCtx.getMessageID())) {
    callbackStore.remove(messageCtx.getMessageID());
    if (log.isDebugEnabled()) {
      log.debug(""CallBack registered with Message id : "" + messageCtx.getMessageID() + "" removed from the ""+ ""callback store since we got an accepted Notification"");
    }
  }
  return;
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
553,"if (anyCR instanceof UserCR && ""test2"".equals(UserCR.class.cast(anyCR).getUsername())) {","if (anyCR instanceof UserCR && ""test2"".equals(UserCR.class.cast(anyCR).getUsername())) {
  throw new IgnoreProvisionException();
}
",0,0,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
554,if( cNnz[j] <= 1 ) rNnz1e[i]++;,"if (cNnz[j] <= 1) rNnz1e[i]++;
",0,0,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
555,else if((float) nRows / indexes.length < 256),"if ((float)nRows / indexes.length < 256) return new OffsetByte(indexes);
 else return new OffsetChar(indexes);
",0,0,4,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
556,"if(op.fn.execute(0.0, x) != 0.0) {","if (op.fn.execute(0.0,x) != 0.0) {
  sparseSafe=false;
  break;
}
",0,0,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
557,if(countTrue / (double)dmlfileC.size() > 0.98),"if (countTrue / (double)dmlfileC.size() > 0.98) Assert.assertTrue(true);
 else Assert.fail(""categorical test fails, the true value count is less than 98%"");
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
558,"if(DerbyStore.NAME.equals(schemeSpecificPart[0]) && ""memory"".equals(schemeSpecificPart[1])) {","if (DerbyStore.NAME.equals(schemeSpecificPart[0]) && ""memory"".equals(schemeSpecificPart[1])) {
  Connection conn=null;
  try {
    String removingUri=catalogUri.split("";"")[0] + "";drop=true"";
    Class.forName(DerbyStore.CATALOG_DRIVER).newInstance();
    conn=DriverManager.getConnection(removingUri);
  }
  finally {
    CatalogUtil.closeQuietly(conn);
  }
}
",0,0,8,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
559,if (i == 1)   minute = Integer.parseInt(timeTokens[i]);,"if (i == 1) minute=Integer.parseInt(timeTokens[i]);
",0,0,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
560,if (_count == 1) return new String[] { (String) _value };,"if (_count == 1) return new String[]{(String)_value};
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, CastExpression-type, ArrayInitializer-expressions, ArrayCreation-initializer, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ReturnStatement-expression, IfStatement-thenStatement, ),
"
561,"} else if (""sf:p"".equals(qName) && (pageCount + slPageCount) > 0) {","if (""sf:p"".equals(qName) && (pageCount + slPageCount) > 0) {
  inPart=null;
  xhtml.endElement(""p"");
}
 else if (""sf:attachment"".equals(qName)) {
  activeTableId=null;
}
 else if (""sf:annotation"".equals(qName) && inPart == DocumentPart.ANNOTATIONS) {
  annotations.end();
}
 else if (""sf:annotation-field"".equals(qName) && inPart == DocumentPart.PARSABLE_TEXT) {
  xhtml.endElement(""div"");
}
 else if (""sf:ghost-text"".equals(qName)) {
  ghostText=false;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
562,"if (""BODY"".equals(name) || (""FRAMESET"".equals(name)) || bodyLevel > 0) {","if (""BODY"".equals(name) || (""FRAMESET"".equals(name)) || bodyLevel > 0) {
  bodyLevel++;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
563,if (cr.text().getBytes(UTF_8)[0] == 0x13) {,"if (cr.text().getBytes(UTF_8)[0] == 0x13) {
  Field field=document.getFields().getFieldByStartOffset(docPart,cr.getStartOffset());
  if (field != null && (field.getType() == 58 || field.getType() == 56)) {
    String id=""_unknown_id"";
    CharacterRun mscr=field.getMarkSeparatorCharacterRun(r);
    if (mscr != null) {
      id=""_"" + mscr.getPicOffset();
    }
    AttributesImpl attributes=new AttributesImpl();
    attributes.addAttribute("""",""class"",""class"",""CDATA"",""embedded"");
    attributes.addAttribute("""",""id"",""id"",""CDATA"",id);
    xhtml.startElement(""div"",attributes);
    xhtml.endElement(""div"");
  }
}
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
564,if (Math.abs(glyphRun.originY - row.get(0).originY) < 0.5) {,"if (Math.abs(glyphRun.originY - row.get(0).originY) < 0.5) {
  row.add(glyphRun);
}
 else {
  row=new ArrayList<>();
  row.add(glyphRun);
  rows.add(row);
  addedNewRow=true;
}
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
565,if (((String) newValue).charAt(4) == '?') {,"if (((String)newValue).charAt(4) == '?') {
  int hh=Integer.parseInt(((String)newValue).substring(0,2));
  int mm=Integer.parseInt(((String)newValue).substring(2,4));
  if (getAmbiguousValues() != null) {
    getAmbiguousValues().clear();
  }
 else {
    setAmbiguousValues(new LinkedHashMap());
  }
  getAmbiguousValues().put(((String)newValue).substring(0,4) + ""am"",hh + (mm > 0 ? "" "" + mm : """") + "" a.m."");
  getAmbiguousValues().put(((String)newValue).substring(0,4) + ""pm"",hh + (mm > 0 ? "" "" + mm : """") + "" p.m."");
  return Boolean.TRUE;
}
 else {
  return Boolean.FALSE;
}
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
566,if ( ((interval*1000) / lastaccdist)< 3 ) {,"if (((interval * 1000) / lastaccdist) < 3) {
  SessionMessage accmsg=new SessionMessageImpl(name,SessionMessage.EVT_SESSION_ACCESSED,null,sessionId,sessionId);
  session.setLastAccessWasDistributed(System.currentTimeMillis());
  return accmsg;
}
",0,0,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
567,if ( access.get() == 1 ) access.addAndGet(-1);,"if (access.get() == 1) access.addAndGet(-1);
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(PrefixExpression-operand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
568,"if (!""true"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.cdi.activated"", ""true""))) {","if (!""true"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.cdi.activated"",""true""))) {
  return false;
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
569,"if (""false"".equalsIgnoreCase(serviceInfo.properties.getProperty(""SkipImplicitAttributes"", ""false"")) && !properties) {","if (""false"".equalsIgnoreCase(serviceInfo.properties.getProperty(""SkipImplicitAttributes"",""false"")) && !properties) {
  serviceRecipe.setProperty(""transactionManager"",transactionManager);
  serviceRecipe.setProperty(""ServiceId"",serviceInfo.id);
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
570,"if (""destination"".equalsIgnoreCase(property) && info.id.equals(unsetProperties.get(""destination""))) {","if (""destination"".equalsIgnoreCase(property) && info.id.equals(unsetProperties.get(""destination""))) {
  continue;
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
571,"&& ""org.apache.webbeans.jsf.DefaultConversationService"".equals(webBeansContext.getOpenWebBeansConfiguration().getProperty(ConversationService.class.getName()))) {","if (webBeansContext.getOpenWebBeansConfiguration().supportsConversation() && ""org.apache.webbeans.jsf.DefaultConversationService"".equals(webBeansContext.getOpenWebBeansConfiguration().getProperty(ConversationService.class.getName()))) {
  webBeansContext.registerService(ConversationService.class,ConversationService.class.cast(webBeansContext.getService(ContextsService.class)));
}
",0,0,7,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ),
"
572,"if (""file"".equals(url.getProtocol()) && copy.contains(new URL(""jar:"" + url.toExternalForm() + ""!/""))) {","if (""file"".equals(url.getProtocol()) && copy.contains(new URL(""jar:"" + url.toExternalForm() + ""!/""))) {
  copy.remove(url);
}
",0,0,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
573,"if (systemProperties.size() == 1 && ""log4j.configurationFile"".equals(systemProperties.stringPropertyNames().iterator().next())) {","if (systemProperties.size() == 1 && ""log4j.configurationFile"".equals(systemProperties.stringPropertyNames().iterator().next())) {
  return;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
574,"if (destroyed.is(Base.class) && destroyed.is(Child.class) && ""base"".equals(destroyed.getName())) {","if (destroyed.is(Base.class) && destroyed.is(Child.class) && ""base"".equals(destroyed.getName())) {
  final Object parent=Child.class.cast(destroyed.getResource()).parent;
  try {
    destroyed.replaceBy(new Assembler.ResourceInstance(""base"",parent,singleton(Base.class.getMethod(""stop"")),null));
  }
 catch (  final NoSuchMethodException e) {
    fail(e.getMessage());
  }
}
",0,0,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
575,"if (! ""comp/env/jms/myqueue"".equals(resourceEnvRef.referenceName)) continue;","if (!""comp/env/jms/myqueue"".equals(resourceEnvRef.referenceName)) continue;
",0,0,4,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
576,"if (ic.getMethod().getName().equals(""bar"") && ""/app/foo"".equals(request.getRequestURI())) {","if (ic.getMethod().getName().equals(""bar"") && ""/app/foo"".equals(request.getRequestURI())) {
  return ""perfect"";
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
577,"if (""getExtension"".equals(method.getName()) && args != null && args.length == 1 && ClassLoader.class.equals(args[0])) {","if (""getExtension"".equals(method.getName()) && args != null && args.length == 1 && ClassLoader.class.equals(args[0])) {
  final ClassLoader extensionLoader=ClassLoader.class.cast(method.invoke(bus,args));
  if (CxfContainerClassLoader.class.isInstance(extensionLoader) && !CxfContainerClassLoader.class.cast(extensionLoader).hasTccl()) {
    return null;
  }
  return extensionLoader;
}
",0,0,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
578,"if (name.equals(s.servletClass) || name.equals(s.servletName) || ""javax.ws.rs.core.Application "".equals(s.servletName)) {","if (name.equals(s.servletClass) || name.equals(s.servletName) || ""javax.ws.rs.core.Application "".equals(s.servletName)) {
  mapping=s.mappings.iterator().next();
}
 else {
  for (  final ParamValueInfo pvi : s.initParams) {
    if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {
      mapping=s.mappings.iterator().next();
      break;
    }
  }
}
",0,0,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
579,"if (!"""".equals(lang)) processor = this::findEndDashes;","if (!"""".equals(lang)) processor=this::findEndDashes;
",0,0,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ExpressionMethodReference-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ExpressionMethodReference-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
580,"if (""SimpleAnyType"".equals(eClass.getName()) && XMLTypePackage.eNS_URI.equals(eClass.getEPackage().getNsURI()))","if (""SimpleAnyType"".equals(eClass.getName()) && XMLTypePackage.eNS_URI.equals(eClass.getEPackage().getNsURI())) {
  eStructuralFeature=createFeature(eClass,""instanceType"",ecorePackage.getEDataType(),null,1,1);
  ((EReference)eStructuralFeature).setResolveProxies(false);
}
",0,0,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
581,if (++i == 2) sf = sofa;,"if (++i == 2) sf=sofa;
",0,0,4,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
582,"if ( f.getPropertyName().equals( propertyName ) && f.getValue().equals( value ) && ""*""","if (f.getPropertyName().equals(propertyName) && f.getValue().equals(value) && ""*"".equals(value)) {
  logger.error(""Attempted to set wildcard wilder for {} more than once, discarding..."",f.getPropertyName());
  return this;
}
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
583,"if ( ""connections"".equals( name ) && ( parameters.size() > 1 ) && parameters.get( 1 ).isName() ) {","if (""connections"".equals(name) && (parameters.size() > 1) && parameters.get(1).isName()) {
  parameters=dequeueCopy(parameters);
  name=parameters.get(0).toString();
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
"
584,"if (""Edge"".equals(entity) && renderingEngine == null) { renderingEngine = new UAEntity(""EdgeHTML"", major, minor); }","if (""Edge"".equals(entity) && renderingEngine == null) {
  renderingEngine=new UAEntity(""EdgeHTML"",major,minor);
}
",0,0,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
585,"if (""blur"".equals(getEvent().toLowerCase(Locale.ROOT)) && disableFocusOnBlur())","if (""blur"".equals(getEvent().toLowerCase(Locale.ROOT)) && disableFocusOnBlur()) {
  target.focusComponent(null);
}
",0,0,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
586,"else if ((i + 1) < segments.size() && "".."".equals(segments.get(i + 1)))","if ((i + 1) < segments.size() && "".."".equals(segments.get(i + 1))) {
  i++;
}
 else {
  url.segments.add(segment);
}
",0,0,10,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
587,if (policy.allows(uri) == 1) allowed = true;,"if (policy.allows(uri) == 1) allowed=true;
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
588,if (pages.length < 2) return super.normalizePage(page);,"if (pages.length < 2) return super.normalizePage(page);
",0,0,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SuperMethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(SuperMethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
589,if (((double)time/(count*1000))>1),"if (((double)time / (count * 1000)) > 1) res+=printDouble((double)(time / (1000 * count))) + "" s/case (count: "" + count+ "" in ""+ time+ "" ms)"";
 else if (((double)time / count) > 1) res+=printDouble((double)time / count) + "" ms/case (count: "" + count+ "" in ""+ time+ "" ms)"";
 else res+=printDouble((double)(time * 1000) / count) + "" ns/case (count: "" + count+ "" in ""+ time+ "" ms)"";
",0,0,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
590,if (k<3) splits[l++] = sr;,"if (k < 3) splits[l++]=sr;
",0,0,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PostfixExpression-operand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
591,if (getDecimalValue(token [ token.length - 1 ]) != 1) {,"if (getDecimalValue(token[token.length - 1]) != 1) {
  return false;
}
 else {
  for (int i=0, n=token.length - 1; i < n; i++) {
    if (getDecimalValue(token[i]) != 0) {
      return false;
    }
  }
  return true;
}
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
592,if (singleFont.getEncoding().mapChar('A') == 'A') {,"if (singleFont.getEncoding().mapChar('A') == 'A') {
  flags|=32;
}
 else {
  flags|=4;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
593,if (word.length - breakPoints.get(breakPoints.size() - 1) - 1 > 1) {,"if (word.length - breakPoints.get(breakPoints.size() - 1) - 1 > 1) {
  char[] newWord=getWordFromCharArray(word,breakPoints.get(breakPoints.size() - 1),word.length);
  words.add(newWord);
}
",0,0,8,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
594,"if (""super"".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) {","if (""super"".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) {
  pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());
}
 else if (credentials.containsKey(userName)) {
  pc.setPassword(credentials.get(userName).toCharArray());
}
 else {
  LOG.warn(""No password found for user: {}"",userName);
}
",0,0,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
595,if (this.initBuffer.buffer.remaining() < 8) {,"if (this.initBuffer.buffer.remaining() < 8) {
  throw new IOException(""Protocol type could not be determined."");
}
",1,288,5,,"ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
596,if (argPtr0.getByteArray()[startOffset + timeOffset] != 'T') {,"if (argPtr0.getByteArray()[startOffset + timeOffset] != 'T') {
  throw new InvalidDataFormatException(sourceLoc,getIdentifier(),ATypeTag.SERIALIZED_INTERVAL_TYPE_TAG);
}
",1,573,5,,"SimpleName(MethodInvocation-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
597,if ( args[loop+1].charAt(0) != '-' ) {,"if (args[loop + 1].charAt(0) != '-') {
  value=args[loop + 1];
  args[loop + 1]=null;
}
",1,174,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
598,if (chars[pos - 1 + length] == '<') {,"if (chars[pos - 1 + length] == '<') {
  length--;
}
",1,7,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
599,"if (indexedTerms.get(fName + "":"" + fValue).size() > 1) {","if (indexedTerms.get(fName + "":"" + fValue).size() > 1) {
  node.setType(ParserTreeConstants.JJTORNODE);
  boolean neg=node.isNegated();
  node.setNegated(false);
  node.setFieldName(null);
  node.setFieldValue(null);
  Collection<String> values=indexedTerms.get(fName + "":"" + fValue);
  for (  String value : values) {
    RewriterTreeNode n=new RewriterTreeNode(ParserTreeConstants.JJTEQNODE,fName,value,neg);
    node.add(n);
  }
}
 else if (indexedTerms.get(fName + "":"" + fValue).size() == 1) {
  Collection<String> values=indexedTerms.get(fName + "":"" + fValue);
  for (  String val : values) {
    node.setFieldValue(val);
  }
}
",1,62,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
600,if (((clearedByte[2] & 0xff) << 8) + ((clearedByte[3] & 0xff) << 0) == 0x146c) {,"if (((clearedByte[2] & 0xff) << 8) + ((clearedByte[3] & 0xff) << 0) == 0x146c) {
  boolean flag=false;
  if (gdsFormatter == 0x54) {
    flag=true;
  }
  if (flag) {
    int firstLobLength=((clearedByte[0] & 0xFF) << 8) + ((clearedByte[1] & 0xFF) << 0);
    if (oldCount - oldDssLength < 6) {
      int totalBytesRead=fill(6);
      if (totalBytesRead > 0) {
        longBufferForDecryption_=new byte[totalBytesRead];
        longPosForDecryption_=0;
        System.arraycopy(buffer_,pos_ + firstLobLength,longBufferForDecryption_,0,totalBytesRead);
      }
    }
 else {
      longBufferForDecryption_=new byte[count_ - pos_ - firstLobLength];
      longPosForDecryption_=0;
      System.arraycopy(buffer_,pos_ + firstLobLength,longBufferForDecryption_,0,longBufferForDecryption_.length);
    }
  }
  int lobLength=((clearedByte[0] & 0xFF) << 8) + ((clearedByte[1] & 0xFF) << 0) - 4;
  longValueForDecryption_=new byte[lobLength];
  System.arraycopy(clearedByte,4,longValueForDecryption_,0,clearedByte.length - 4);
}
 else if (((clearedByte[2] & 0xff) << 8) + ((clearedByte[3] & 0xff) << 0) == 0x241B) {
  int length=((clearedByte[0] & 0xFF) << 8) + ((clearedByte[1] & 0xFF) << 0);
  boolean noData=false;
  if (clearedByte[4] == -1 && clearedByte[5] == -1) {
    noData=true;
  }
  if (!noData) {
    if (length == 32776) {
      length=((clearedByte[4] & 0xFF) << 24) + ((clearedByte[5] & 0xFF) << 16) + ((clearedByte[6] & 0xFF) << 8)+ ((clearedByte[7] & 0xFF) << 0);
      longValueForDecryption_=new byte[length];
      System.arraycopy(clearedByte,8,longValueForDecryption_,0,clearedByte.length - 8);
      longCountForDecryption_=count_ - (pos_ + length + 8);
      longBufferForDecryption_=new byte[buffer_.length - pos_ - length- 8];
      System.arraycopy(buffer_,pos_ + length + 8,longBufferForDecryption_,0,longBufferForDecryption_.length);
    }
 else {
      longPosForDecryption_=0;
      longCountForDecryption_=count_ - (pos_ + length);
      longBufferForDecryption_=new byte[buffer_.length - pos_ - length];
      System.arraycopy(buffer_,pos_ + length,longBufferForDecryption_,0,longBufferForDecryption_.length);
      longValueForDecryption_=new byte[length - 4];
      System.arraycopy(clearedByte,4,longValueForDecryption_,0,clearedByte.length - 4);
    }
  }
}
",1,6,9,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
601,"if (event == START_ELEMENT && ""div"".equals(r.getLocalName()) && ""data"".equals(r.getAttributeValue(null, ""id""))) {","if (event == START_ELEMENT && ""div"".equals(r.getLocalName()) && ""data"".equals(r.getAttributeValue(null,""id""))) {
  r.nextTag();
  event=r.getEventType();
  boolean isEmpty=(event == END_ELEMENT);
  if (!isEmpty)   event=skipWs(r);
  if (event == END_DOCUMENT)   throw new ParseException(this,""Unexpected end of stream looking for data."");
  return (event == CHARACTERS ? null : HtmlTag.forString(r.getName().getLocalPart(),false));
}
",1,32,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
602,"} else if (""true"".equals(arr[i].toLowerCase()) || ""false"".equals(arr[i].toLowerCase())) {","if (""true"".equals(arr[i].toLowerCase()) || ""false"".equals(arr[i].toLowerCase())) {
  map.put(keyValues[i],Boolean.parseBoolean(arr[i]));
}
 else {
  try {
    Double doubleValue=Double.parseDouble(arr[i]);
    map.put(keyValues[i],doubleValue);
  }
 catch (  NumberFormatException e) {
    map.put(keyValues[i],arr[i]);
  }
}
",1,9,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
603,"if (""true"".equals(project.evaluator().getProperty(EarProjectProperties.DISPLAY_BROWSER)) &&","if (""true"".equals(project.evaluator().getProperty(EarProjectProperties.DISPLAY_BROWSER)) && project.evaluator().getProperty(EarProjectProperties.APPLICATION_CLIENT) == null) {
  setLookups(base,Lookups.singleton(webProvider));
}
 else {
  setLookups(base);
}
",1,8,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
604,if ((Precision.EPSILON * t) * t > 1) {,"if ((Precision.EPSILON * t) * t > 1) {
  for (int j=i; j <= idx; j++) {
    matrixT[j][idx]/=t;
  }
}
",1,47,4,,"QualifiedName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
605,"if (""ASSET_USAGE"".equals(ProductWorker.getProductTypeId(delegator, productId)) || ""ASSET_USAGE_OUT_IN"".equals(ProductWorker.getProductTypeId(delegator, productId))) {","if (""ASSET_USAGE"".equals(ProductWorker.getProductTypeId(delegator,productId)) || ""ASSET_USAGE_OUT_IN"".equals(ProductWorker.getProductTypeId(delegator,productId))) {
  if (paramMap.containsKey(""reservStart"")) {
    reservStartStr=(String)paramMap.remove(""reservStart"");
    if (reservStartStr.length() == 10)     reservStartStr+="" 00:00:00.000000000"";
    if (reservStartStr.length() > 0) {
      try {
        reservStart=java.sql.Timestamp.valueOf(reservStartStr);
      }
 catch (      Exception e) {
        Debug.logWarning(e,""Problems parsing Reservation start string: "" + reservStartStr,module);
        reservStart=null;
        request.setAttribute(""_ERROR_MESSAGE_"",UtilProperties.getMessage(resource_error,""cart.addToCart.rental.startDate"",locale));
        return ""error"";
      }
    }
 else     reservStart=null;
  }
  if (paramMap.containsKey(""reservEnd"")) {
    reservEndStr=(String)paramMap.remove(""reservEnd"");
    if (reservEndStr.length() == 10)     reservEndStr+="" 00:00:00.000000000"";
    if (reservEndStr.length() > 0) {
      try {
        reservEnd=java.sql.Timestamp.valueOf(reservEndStr);
      }
 catch (      Exception e) {
        Debug.logWarning(e,""Problems parsing Reservation end string: "" + reservEndStr,module);
        reservEnd=null;
        request.setAttribute(""_ERROR_MESSAGE_"",UtilProperties.getMessage(resource_error,""cart.addToCart.rental.endDate"",locale));
        return ""error"";
      }
    }
 else     reservEnd=null;
  }
  if (reservStart != null && reservEnd != null) {
    reservLength=new BigDecimal(UtilDateTime.getInterval(reservStart,reservEnd)).divide(new BigDecimal(""86400000""),generalRounding);
  }
  if (reservStart != null && paramMap.containsKey(""reservLength"")) {
    reservLengthStr=(String)paramMap.remove(""reservLength"");
    try {
      reservLength=(BigDecimal)ObjectType.simpleTypeConvert(reservLengthStr,""BigDecimal"",null,locale);
    }
 catch (    Exception e) {
      Debug.logWarning(e,""Problems parsing reservation length string: "" + reservLengthStr,module);
      reservLength=BigDecimal.ONE;
      request.setAttribute(""_ERROR_MESSAGE_"",UtilProperties.getMessage(resource_error,""OrderReservationLengthShouldBeAPositiveNumber"",locale));
      return ""error"";
    }
  }
  if (reservStart != null && paramMap.containsKey(""reservPersons"")) {
    reservPersonsStr=(String)paramMap.remove(""reservPersons"");
    try {
      reservPersons=(BigDecimal)ObjectType.simpleTypeConvert(reservPersonsStr,""BigDecimal"",null,locale);
    }
 catch (    Exception e) {
      Debug.logWarning(e,""Problems parsing reservation number of persons string: "" + reservPersonsStr,module);
      reservPersons=BigDecimal.ONE;
      request.setAttribute(""_ERROR_MESSAGE_"",UtilProperties.getMessage(resource_error,""OrderNumberOfPersonsShouldBeOneOrLarger"",locale));
      return ""error"";
    }
  }
  if (UtilValidate.isEmpty(reservStart) && UtilValidate.isEmpty(reservLength) && UtilValidate.isEmpty(reservPersons)) {
    request.setAttribute(""product_id"",productId);
    request.setAttribute(""_EVENT_MESSAGE_"",UtilProperties.getMessage(resource_error,""cart.addToCart.enterBookingInforamtionBeforeAddingToCart"",locale));
    return ""product"";
  }
  if ((paramMap.containsKey(""accommodationMapId"")) && (paramMap.containsKey(""accommodationSpotId""))) {
    accommodationMapId=(String)paramMap.remove(""accommodationMapId"");
    accommodationSpotId=(String)paramMap.remove(""accommodationSpotId"");
  }
}
",1,12,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
606,"if (args.length == 2 && ""-t"".equals(args[0]) && StringUtils.isInteger(args[1])) {","if (args.length == 2 && ""-t"".equals(args[0]) && StringUtils.isInteger(args[1])) {
  sleepMilliseconds=Integer.parseInt(args[1]);
}
 else {
  return ""Invalid parameter,please input like shutdown -t 10000"";
}
",1,57,10,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
607,"if (port == -1 && ""http"".equalsIgnoreCase(uri.getScheme())) port = 80;","if (port == -1 && ""http"".equalsIgnoreCase(uri.getScheme())) port=80;
",1,122,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
608,"if (mr != null && !mr.isEmpty() && ""true"".equals(mr.get(0))) {","if (mr != null && !mr.isEmpty() && ""true"".equals(mr.get(0))) {
  jmsFault=JMSFaultFactory.createMalformedRequestURIFault(requestURI);
}
",1,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
609,"if (!""file"".equals(containerUrl.getProtocol())) throw new IllegalStateException(""Resource (""+resourceInThatDir+"") not on file system (at ""+containerUrl+"")"");","if (!""file"".equals(containerUrl.getProtocol())) throw new IllegalStateException(""Resource ("" + resourceInThatDir + "") not on file system (at ""+ containerUrl+ "")"");
",1,6,10,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
610,"if (violators.size()==1) return violators.get(0)+"" is not up"";","if (violators.size() == 1) return violators.get(0) + "" is not up"";
",1,150,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
611,"if(startDate == null || """".equals(startDate)) throw new IllegalArgumentException(""A valid start date must be supplied"");","if (startDate == null || """".equals(startDate)) throw new IllegalArgumentException(""A valid start date must be supplied"");
",1,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
612,if ((curr = key[pos = (int) MurmurHashUtil.fmix(k) & this.mask]) != 0L) {,"if ((curr=key[pos=(int)MurmurHashUtil.fmix(k) & this.mask]) != 0L) {
  if (curr == k) {
    return false;
  }
  while ((curr=key[pos=pos + 1 & this.mask]) != 0L) {
    if (curr == k) {
      return false;
    }
  }
}
",1,85,10,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
613,if (((Element)_rootNode).getElementsByTagName(insertElementName).getLength() != 1) {,"if (((Element)_rootNode).getElementsByTagName(insertElementName).getLength() != 1) {
  fail(""Missing '"" + insertElementName + ""' element has not been inserted"");
}
",1,2,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
614,if (fn.desc.charAt(0) == 'L') {,"if (fn.desc.charAt(0) == 'L') {
  result.add(fn);
}
",1,1,4,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
615,if(parts[parts.length-1].length() < 1){,"if (parts[parts.length - 1].length() < 1) {
  filename=""unknown.wgt"";
}
 else {
  filename=parts[parts.length - 1];
}
",1,5,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
616,"if (path == null || path.length() == 0 || ""."".equals(path) || ""./"".equals(path)) {","if (path == null || path.length() == 0 || ""."".equals(path) || ""./"".equals(path)) {
  return this;
}
",1,9,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
617,"if (""fromDate"".equals(this.name) || (this.entryAcsr != null && ""fromDate"".equals(this.entryAcsr.getOriginalName()))) {","if (""fromDate"".equals(this.name) || (this.entryAcsr != null && ""fromDate"".equals(this.entryAcsr.getOriginalName()))) {
  redCondition=""after-now"";
}
 else if (""thruDate"".equals(this.name) || (this.entryAcsr != null && ""thruDate"".equals(this.entryAcsr.getOriginalName()))) {
  redCondition=""before-now"";
}
 else {
  return false;
}
",1,42,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
618,"if ((accessor.getByte(value, 6) & 0xf0) != 0x10)","if ((accessor.getByte(value,6) & 0xf0) != 0x10) throw new MarshalException(""Invalid version for TimeUUID type."");
",1,16,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
619,"if (""true"".equals(mt.tags.get(""success"")) && ""1.0"".equals(mt.tags.get(""quantile""))) {","if (""true"".equals(mt.tags.get(""success"")) && ""1.0"".equals(mt.tags.get(""quantile""))) {
  assertEquals(10.0,mt.value,0.0);
  found=true;
}
",1,33,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
620,"if (schedulers.size()>1) log.warn(""multiple schedulers detected, using only the first, for ""+task+"": ""+schedulers);","if (schedulers.size() > 1) log.warn(""multiple schedulers detected, using only the first, for "" + task + "": ""+ schedulers);
",1,7,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
621,"else if ("".:"".indexOf(c)>=0) ;","if ("".:"".indexOf(c) >= 0) ;
 else break;
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
EmptyStatement(IfStatement-thenStatement, ),
"
622,"else if (possibleArgs.length<2) args.append(""args are ""+Arrays.asList(possibleArgs[0]));","if (possibleArgs.length < 2) args.append(""args are "" + Arrays.asList(possibleArgs[0]));
 else {
  args.append(""args are "" + Arrays.asList(possibleArgs[0]));
  for (int i=1; i < possibleArgs.length; i++) {
    args.append("" or "");
    args.append(Arrays.asList(possibleArgs[i]));
  }
}
",1,35,9,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
623,"if (verbosity == 1) rv += "": ""+abbreviate(errorMessage);","if (verbosity == 1) rv+="": "" + abbreviate(errorMessage);
",1,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
624,"if (verbosity >= 2) rv += "" (""+ti.getThreadState()+"")"";","if (verbosity >= 2) rv+="" ("" + ti.getThreadState() + "")"";
",1,2,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
625,if (r.charAt(i)=='\\') escaped = true;,"if (r.charAt(i) == '\\') escaped=true;
",1,10,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
626,"if (call.getMethod() instanceof ConstantExpression && ""buildFromCode"".equals(((ConstantExpression) call.getMethod()).getValue())) {","if (call.getMethod() instanceof ConstantExpression && ""buildFromCode"".equals(((ConstantExpression)call.getMethod()).getValue())) {
  if (call.getObjectExpression() != null && call.getObjectExpression().getType() != null) {
    String name=call.getObjectExpression().getType().getName();
    if (name != null && !name.isEmpty() && factoryTargets.contains(name)) {
      if (call.getArguments() != null && call.getArguments() instanceof TupleExpression) {
        if (((TupleExpression)call.getArguments()).getExpressions() != null) {
          for (          ASTNode node : ((TupleExpression)call.getArguments()).getExpressions()) {
            if (node instanceof ClosureExpression) {
              return true;
            }
          }
        }
      }
    }
  }
}
",1,3,9,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
627,if (i==5) used0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();,"if (i == 5) used0=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
",1,3,9,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
628,"if (!""Bob"".equalsIgnoreCase(e.getAttribute(TestEntity.NAME))) return false;","if (!""Bob"".equalsIgnoreCase(e.getAttribute(TestEntity.NAME))) return false;
",1,25,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
629,if (i.get() >= 4) submitter.period = null;,"if (i.get() >= 4) submitter.period=null;
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
630,"if (newLen>32) throw new IllegalStateException(""further subnet for ""+Arrays.toString(extraUnsignedBytes)+"" not possible on CIDR ""+this);","if (newLen > 32) throw new IllegalStateException(""further subnet for "" + Arrays.toString(extraUnsignedBytes) + "" not possible on CIDR ""+ this);
",1,1,9,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
631,"if (path == null || ""."".equals(path) || org.apache.camel.util.ObjectHelper.isEmpty(path)) {","if (path == null || ""."".equals(path) || org.apache.camel.util.ObjectHelper.isEmpty(path)) {
  return;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
632,"if (opt.argObjects().size() > 0 && ""do"".equals(opt.argObjects().get(0))) {","if (opt.argObjects().size() > 0 && ""do"".equals(opt.argObjects().get(0))) {
  opt.argObjects().remove(0);
}
",1,3,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
633,"if ("""".equals(uri) && ""objectsToAttach"".equals(name) && text != null && text.length() == 0)","if ("""".equals(uri) && ""objectsToAttach"".equals(name) && text != null && text.length() == 0) {
  text=null;
}
",1,2,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-extendedOperands, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
634,"if (!filesLocal[i].isFolder() && ""settings"".equals(filesLocal[i].getExt())) {","if (!filesLocal[i].isFolder() && ""settings"".equals(filesLocal[i].getExt())) {
  localSet.add(filesLocal[i].getName());
}
",1,4,8,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
635,"if (ch == '""') return Optional.of(""&quot;"");","if (ch == '""') return Optional.of(""&quot;"");
 else return Optional.empty();
",1,2,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
636,if (signature.charAt(pos[0]++) == '<') {,"if (signature.charAt(pos[0]++) == '<') {
  result.append('<');
  while (signature.charAt(pos[0]) != '>') {
    if (result.charAt(result.length() - 1) != '<') {
      result.append("", "");
    }
    result.append(decodeSignatureType(signature,pos));
  }
  result.append('>');
  pos[0]+=2;
}
",1,14,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
637,"if (""features"".equals(name) && (uri == null || """".equals(uri) || uri.startsWith(""http:","if (""features"".equals(name) && (uri == null || """".equals(uri) || uri.startsWith(""http://karaf.apache.org/xmlns/features/v""))) {
  return true;
}
",1,6,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
638,"if (argv.length > index + 1 && ""-outfile"".equals(argv[index])) {","if (argv.length > index + 1 && ""-outfile"".equals(argv[index])) {
  index++;
  historyOutFile=argv[index++];
}
",1,5,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
639,"if (""withTraits"".equals(emn.getName()) && ""DefaultGroovyMethods"".equals(emn.getExtensionMethodNode().getDeclaringClass().getNameWithoutPackage())) {","if (""withTraits"".equals(emn.getName()) && ""DefaultGroovyMethods"".equals(emn.getExtensionMethodNode().getDeclaringClass().getNameWithoutPackage())) {
  List<ClassNode> nodes=new LinkedList<>();
  Collections.addAll(nodes,receiver.getInterfaces());
  for (  ClassNode arg : args) {
    if (isClassClassNodeWrappingConcreteType(arg)) {
      nodes.add(arg.getGenericsTypes()[0].getType());
    }
 else {
      nodes.add(arg);
    }
  }
  return new WideningCategories.LowestUpperBoundClassNode(returnType.getName() + ""Composed"",OBJECT_TYPE,nodes.toArray(ClassNode.EMPTY_ARRAY));
}
",1,6,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
640,"if (""mac"".equals(macpart[0]) && macpart[1].equals(mac)) {","if (""mac"".equals(macpart[0]) && macpart[1].equals(mac)) {
  return c;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
641,"if (entry.getValue() != null && ""on"".equalsIgnoreCase(request.getParameter(key)) && !""_CLEAR_PREVIOUS_PARAMS_"".equals(key)) {","if (entry.getValue() != null && ""on"".equalsIgnoreCase(request.getParameter(key)) && !""_CLEAR_PREVIOUS_PARAMS_"".equals(key)) {
  String[] servicePath=key.split(""\\|\\|"");
  String partialKey=servicePath[servicePath.length - 1];
  savedFields.put(partialKey,getObjectFromServicePath(key,syncServiceResult));
}
",1,2,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
642,"if (""CN"".equalsIgnoreCase(rdn.getType()) && (rdn.getValue() instanceof String)) {","if (""CN"".equalsIgnoreCase(rdn.getType()) && (rdn.getValue() instanceof String)) {
  subjectName=(String)rdn.getValue();
  break;
}
",1,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
643,"if ('\""' == c.text.charAt(0) && c.offset > 0 && ""\"""".equals(d.get(c.offset - 1, 1)))","if ('\""' == c.text.charAt(0) && c.offset > 0 && ""\"""".equals(d.get(c.offset - 1,1))) return;
",1,14,13,,"CharacterLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
644,if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L),"if (((active0&=old0) | (active1&=old1) | (active2&=old2)| (active3&=old3)) == 0L) return jjMoveNfa_0(0,1);
",1,23,9,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
645,"if (this.comparator.compare(element1, element2) < 1) {","if (this.comparator.compare(element1,element2) < 1) {
  this.minimum=element1;
  this.maximum=element2;
}
 else {
  this.minimum=element2;
  this.maximum=element1;
}
",1,1,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
646,if (method[0].getMethodArguments().length != 1) {,"if (method[0].getMethodArguments().length != 1) {
  throw new ConfigurationException(""Malformed property :  The method "" + methodName + "" does not have one argument"");
}
",1,3,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
647,if (((r | g | b) & 0x100) == 0x100),"if (((r | g | b) & 0x100) == 0x100) {
  int scalemin;
  int scalemax;
  int min;
  int max;
  min=Math.min(r,Math.min(g,b));
  max=Math.max(r,Math.max(g,b));
  if (min < 0) {
    scalemin=(y << 16) / (y - min);
  }
 else {
    scalemin=0x10000;
  }
  if (max > 255) {
    scalemax=((255 - y) << 16) / (max - y);
  }
 else {
    scalemax=0x10000;
  }
  scale=Math.min(scalemin,scalemax);
  r=y + (((r - y) * scale + 0x8000) >> 16);
  g=y + (((g - y) * scale + 0x8000) >> 16);
  b=y + (((b - y) * scale + 0x8000) >> 16);
}
",1,6,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
648,if (AccurateMath.abs(beta[i] - betar[i]) > 1.0e-8) {,"if (AccurateMath.abs(beta[i] - betar[i]) > 1.0e-8) {
  Assert.fail(""Parameters not correctly estimated"");
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
649,if ((number = rs.getInt(1)) != 300),"if ((number=rs.getInt(1)) != 300) {
  failure=true;
  reportFailure(""Wrong row returned, expected num=300, got "" + number);
}
",1,12,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
650,if (((xInt ^ yInt) & SGN_MASK) == 0L) {,"if (((xInt ^ yInt) & SGN_MASK) == 0L) {
  isEqual=Math.abs(xInt - yInt) <= maxUlps;
}
 else {
  final long deltaPlus;
  final long deltaMinus;
  if (xInt < yInt) {
    deltaPlus=yInt - POSITIVE_ZERO_DOUBLE_BITS;
    deltaMinus=xInt - NEGATIVE_ZERO_DOUBLE_BITS;
  }
 else {
    deltaPlus=xInt - POSITIVE_ZERO_DOUBLE_BITS;
    deltaMinus=yInt - NEGATIVE_ZERO_DOUBLE_BITS;
  }
  if (deltaPlus > maxUlps) {
    isEqual=false;
  }
 else {
    isEqual=deltaMinus <= (maxUlps - deltaPlus);
  }
}
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
651,if(batchNum % 5 < 3) return Subcorpus.TRAIN;,"if (batchNum % 5 < 3) return Subcorpus.TRAIN;
 else if (batchNum % 5 == 3) return Subcorpus.DEV;
 else return Subcorpus.TEST;
",1,9,4,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
652,if (length[0]==0L) { length[1]++; length[0]=0L; },"if (length[0] == 0L) {
  length[1]++;
  length[0]=0L;
}
",1,10,8,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, PostfixExpression-operand, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, PostfixExpression-operand, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
653,if (i==1) { toPrint = f1_uniq; f = f1; },"if (i == 1) {
  toPrint=f1_uniq;
  f=f1;
}
 else if (i == 2) {
  toPrint=f2_uniq;
  f=f2;
}
 else {
  System.err.println(""Not a legal file number: "" + i);
  return;
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
654,"if ("""".equals(action) || (ais != null && !ais.isEmpty())) {","if ("""".equals(action) || (ais != null && !ais.isEmpty())) {
  action=checkDefaultBinding(action,message,data);
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
655,"if (t.moveNext() && t.token() != null && ""groovy-delimiter"".equals(t.token().id().primaryCategory())) {","if (t.moveNext() && t.token() != null && ""groovy-delimiter"".equals(t.token().id().primaryCategory())) {
  if (t.moveNext() && t.token() != null && ""groovy"".equals(t.token().id().primaryCategory())) {
    TokenSequence<?> ets=t.embedded();
    if (ets != null) {
      return (TokenSequence<GroovyTokenId>)ets;
    }
  }
}
",1,2,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
656,if ((protocolTypesAndLengths[i][0] % 2) == 1) {,"if ((protocolTypesAndLengths[i][0] % 2) == 1) {
  write1Byte(FdocaConstants.NULL_DATA);
}
 else {
}
",1,1,5,,"SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
657,"if ((liveReplicas = countReplicas(namesystem, blk).liveReplicas()) < 2) {","if ((liveReplicas=countReplicas(namesystem,blk).liveReplicas()) < 2) {
  LOG.info(""Live Replicas after corruption: "" + liveReplicas);
  break;
}
",1,2,6,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
658,if ( currentChar == ':' ) { continue; },"if (currentChar == ':') {
  continue;
}
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(Block-statements, IfStatement-thenStatement, ),
"
659,if (attr.getProperty().id == 0xe28) hasE28 = true;,"if (attr.getProperty().id == 0xe28) hasE28=true;
",1,8,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
660,"if ( i > 0L ) { buffer.append( "", "" ); }","if (i > 0L) {
  buffer.append("", "");
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
661,if (echo1.doneIds.size() + echo2.doneIds.size() == 100) {,"if (echo1.doneIds.size() + echo2.doneIds.size() == 100) {
  break;
}
",1,2,5,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
662,if ( ( getSelectedValues().length + getSelectedAttributes().length ) + getSelectedAttributeHierarchies().length == 1 ),"if ((getSelectedValues().length + getSelectedAttributes().length) + getSelectedAttributeHierarchies().length == 1) {
  AttributeType atd=null;
  if (getSelectedValues().length == 1) {
    atd=getSelectedValues()[0].getAttribute().getAttributeTypeDescription();
  }
 else   if (getSelectedAttributes().length == 1) {
    atd=getSelectedAttributes()[0].getAttributeTypeDescription();
  }
 else   if (getSelectedAttributeHierarchies().length == 1 && getSelectedAttributeHierarchies()[0].size() == 1) {
    atd=getSelectedAttributeHierarchies()[0].getAttribute().getAttributeTypeDescription();
  }
  return atd;
}
",1,4,7,,"SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
663,"} else if (""provider"".equals(property) || ""registry"".equals(property) || (""protocol"".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {","if (""provider"".equals(property) || ""registry"".equals(property) || (""protocol"".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {
  beanDefinition.getPropertyValues().addPropertyValue(beanProperty + ""Ids"",value);
}
 else {
  Object reference;
  if (isPrimitive(type)) {
    value=getCompatibleDefaultValue(property,value);
    reference=value;
  }
 else   if (ONRETURN.equals(property) || ONTHROW.equals(property) || ONINVOKE.equals(property)) {
    int index=value.lastIndexOf(""."");
    String ref=value.substring(0,index);
    String method=value.substring(index + 1);
    reference=new RuntimeBeanReference(ref);
    beanDefinition.getPropertyValues().addPropertyValue(property + METHOD,method);
  }
 else {
    if (""ref"".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {
      BeanDefinition refBean=parserContext.getRegistry().getBeanDefinition(value);
      if (!refBean.isSingleton()) {
        throw new IllegalStateException(""The exported service ref "" + value + "" must be singleton! Please set the ""+ value+ "" bean scope to singleton, eg: <bean id=\""""+ value+ ""\"" scope=\""singleton\"" ...>"");
      }
    }
    reference=new RuntimeBeanReference(value);
  }
  if (reference != null) {
    beanDefinition.getPropertyValues().addPropertyValue(beanProperty,reference);
  }
}
",1,3,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
664,"if (driver.executeSQL(cmd.getUpdate(), cmd.getParamValues(), conn, null) < 1)","if (driver.executeSQL(cmd.getUpdate(),cmd.getParamValues(),conn,null) < 1) seqValue=0;
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
665,if ((Runtime.getRuntime().maxMemory() >>> 20) < 5000) {,"if ((Runtime.getRuntime().maxMemory() >>> 20) < 5000) {
  throw new RuntimeException(""This test program needs to run with at least 5GB of heap space."");
}
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
666,if ((this.minPrimaryImprovement + 1.0) < .0000001) {,"if ((this.minPrimaryImprovement + 1.0) < .0000001) {
  float largestWeight=0;
  float smallestBucket=0;
  for (  Member member : this.members.values()) {
    if (member.getWeight() > largestWeight) {
      largestWeight=member.getWeight();
    }
    for (    Bucket bucket : member.getPrimaryBuckets()) {
      if (bucket.getPrimaryLoad() < smallestBucket || smallestBucket == 0) {
        smallestBucket=bucket.getPrimaryLoad();
      }
    }
  }
  double before=variance(getPrimaryAverage() * largestWeight + smallestBucket,largestWeight,getPrimaryAverage());
  double after=variance(getPrimaryAverage() * largestWeight,largestWeight,getPrimaryAverage());
  this.minPrimaryImprovement=(before - after) / smallestBucket;
}
",1,1,4,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
667,} else if (2 < commandLine.getArgs().length) {,"if (2 < commandLine.getArgs().length) {
  throw new CLParserException(""Too many arguments"");
}
",1,1,4,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
668,"if (""lookup"".equals(method.getName()) && String.class.isInstance(args[0]) && String.class.cast(args[0]).startsWith(""jdbc"")) {","if (""lookup"".equals(method.getName()) && String.class.isInstance(args[0]) && String.class.cast(args[0]).startsWith(""jdbc"")) {
  return method.invoke(delegate,""openejb:Resource/"" + args[0]);
}
",1,2,14,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
669,"if("""".equals(authzid) && !(username+""\0""+username+""\0""+password).equals(authline) && !(""\0""+username+""\0""+password).equals(authline)) {","if ("""".equals(authzid) && !(username + ""\0"" + username+ ""\0""+ password).equals(authline) && !(""\0"" + username + ""\0""+ password).equals(authline)) {
  pw.write(tag + "" BAD username password invalid.\r\n"");
  pw.flush();
  return;
}
",1,2,16,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ParenthesizedExpression-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
670,if ((c = chars[++i]) == '/') {,"if ((c=chars[++i]) == '/') {
  buffer.append('\\');
}
 else {
  buffer.append(c);
}
",1,7,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
671,if ((in.buf_.data_[in.buf_.pos_] & 0xc0) != 0x80) {,"if ((in.buf_.data_[in.buf_.pos_] & 0xc0) != 0x80) {
  throw new org.omg.CORBA.DATA_CONVERSION(org.apache.yoko.orb.OB.MinorCodes.describeDataConversion(org.apache.yoko.orb.OB.MinorCodes.MinorUTF8Encoding),org.apache.yoko.orb.OB.MinorCodes.MinorUTF8Encoding,org.omg.CORBA.CompletionStatus.COMPLETED_NO);
}
",1,1,4,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
672,"if (""IDL:omg.org/CORBA/WStringValue:1.0"".equals(repid) && """".equals(suffix)) return String.class.getName();","if (""IDL:omg.org/CORBA/WStringValue:1.0"".equals(repid) && """".equals(suffix)) return String.class.getName();
",1,4,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
673,if (bb == '\n') bb = buf[++begin];,"if (bb == '\n') bb=buf[++begin];
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PrefixExpression-operand, ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
674,if (times == 1) return andThen(this);,"if (times == 1) return andThen(this);
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
675,"if (""super"".equals(name) || ""this"".equals(name)) return null;","if (""super"".equals(name) || ""this"".equals(name)) return null;
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
676,if (ae.getExpressions().size() != 1) return false;,"if (ae.getExpressions().size() != 1) return false;
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
677,"if(""methodMissing"".equals(methodName) && nativeParamTypes.length == 2 && nativeParamTypes[0] != String.class) {","if (""methodMissing"".equals(methodName) && nativeParamTypes.length == 2 && nativeParamTypes[0] != String.class) {
  nativeParamTypes[0]=String.class;
}
",1,10,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
678,"if (!filename.endsWith("".class"") || ""module-info.class"".equals(filename) || ""package-info.class"".equals(filename)) {","if (!filename.endsWith("".class"") || ""module-info.class"".equals(filename) || ""package-info.class"".equals(filename)) {
  return FileVisitResult.CONTINUE;
}
",1,1,9,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
679,if (ret == 1) return oneByte[0] & 0xff;,"if (ret == 1) return oneByte[0] & 0xff;
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
680,if ((path != null ? 1 : 0) + (ostream != null ? 1 : 0) != 1) {,"if ((path != null ? 1 : 0) + (ostream != null ? 1 : 0) != 1) {
  throw new AssertionError(""Please specify exactly one of "" + ""filesystem/path or path"");
}
",1,4,9,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
681,if (Math.abs(maxAMShare - -1.0f) < 0.0001) {,"if (Math.abs(maxAMShare - -1.0f) < 0.0001) {
  return true;
}
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
682,"if (types[cntr].getName().startsWith(""testAnnotation"") && ""xml"".equals(types[cntr].getExt())) {","if (types[cntr].getName().startsWith(""testAnnotation"") && ""xml"".equals(types[cntr].getExt())) {
  proc.attachTo(types[cntr]);
  AnnotationType type=(AnnotationType)proc.instanceCreate();
  typesInstances.put(type.getName(),type);
}
",1,2,10,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
683,if (this.bits[3] == 1) {,"if (this.bits[3] == 1) {
  transparency=Transparency.BITMASK;
}
",1,1,4,,"ThisExpression(FieldAccess-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
684,"if(srca == 0.0f) setFunction(display, gc, X11Defs.GXclear);","if (srca == 0.0f) setFunction(display,gc,X11Defs.GXclear);
 else setFunction(display,gc,X11Defs.GXcopy);
",1,1,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
685,"if(arg0.getID()==""1.3.6.1.4.1.1466.20037"") return new MockStartTlsResponse();","if (arg0.getID() == ""1.3.6.1.4.1.1466.20037"") return new MockStartTlsResponse();
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
"
686,"if (""0"".equals(info.s) || (info.e + info.s.length() - 1 < DOUBLE_MIN_EXP)) {","if (""0"".equals(info.s) || (info.e + info.s.length() - 1 < DOUBLE_MIN_EXP)) {
  return info.negative ? -0.0 : 0.0;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
687,if ((Character)upperCaseGermanTriple[i][pattern] == 'N') {,"if ((Character)upperCaseGermanTriple[i][pattern] == 'N') {
  continue;
}
",1,1,5,,"SimpleName(SimpleType-name, CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
688,if(this.bitLength + multiplicand.bitLength < 64) {,"if (this.bitLength + multiplicand.bitLength < 64) {
  return valueOf(this.smallValue * multiplicand.smallValue,toIntScale(newScale));
}
",1,1,4,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
689,if (Integer.numberOfLeadingZeros((int) (longR >>> 32)) < 32) {,"if (Integer.numberOfLeadingZeros((int)(longR >>> 32)) < 32) {
  rOverflowed=true;
}
 else {
  rem=(int)longR;
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
690,if(res[3]==1) return CoderResult.OVERFLOW;,"if (res[3] == 1) return CoderResult.OVERFLOW;
",1,1,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
691,if (super.length > 3) {,"if (super.length > 3) {
  int n=3;
  while ((n <= super.length) && (super.data[n - 1] < 0)) {
    n++;
  }
  dsp=n;
}
",1,1,2,,"SimpleName(SuperFieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
692,"if (rs.getInt(1) > 2 || ""hermit"".equals(rs.getString(2))) {","if (rs.getInt(1) > 2 || ""hermit"".equals(rs.getString(2))) {
  return true;
}
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
693,"if (""hermit"".equals(name) || name.indexOf(""2"") != -1","if (""hermit"".equals(name) || name.indexOf(""2"") != -1 || name.indexOf(""4"") != -1 || name.indexOf(""6"") != -1 || name.indexOf(""8"") != -1 || name.indexOf(""0"") != -1) {
  return true;
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
694,"if (jtfActions[i].getValue(Action.NAME) == ""notify-field-accept"") {","if (jtfActions[i].getValue(Action.NAME) == ""notify-field-accept"") {
  wasEqual=true;
}
",1,1,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
695,"if (randomizer.nextInt(1000) == 1) for (Tuple t : outputBag) log.debug(""outputting ""+t.toDelimitedString(""\t""));","if (randomizer.nextInt(1000) == 1) for (Tuple t : outputBag) log.debug(""outputting "" + t.toDelimitedString(""\t""));
",1,5,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, IfStatement-thenStatement, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, IfStatement-thenStatement, ),
SimpleName(EnhancedForStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, EnhancedForStatement-body, IfStatement-thenStatement, ),
"
696,"if (""true"".equals(configuration.getProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE, ""false""))","if (""true"".equals(configuration.getProperty(OpenEjbContainer.OPENEJB_EMBEDDED_REMOTABLE,""false"")) || (annotation != null || annotationOld != null)) {
  try {
    if (annotation != null) {
      initFilteredServiceManager(annotation.value());
    }
    if (annotationOld != null) {
      initFilteredServiceManager(annotationOld.value());
    }
    serviceManager=new ServiceManagerProxy(false);
    serviceManager.start();
  }
 catch (  ServiceManagerProxy.AlreadyStartedException e) {
    throw new OpenEJBRuntimeException(e);
  }
}
",1,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
697,if ((ai.get() - readerThreadCount) % 2 == 1),"if ((ai.get() - readerThreadCount) % 2 == 1) throw new Exception(""Was able to read when write lock in place"");
",1,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
698,.filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {,"if (currentStateOutput.getCurrentStateMap(resourceName,partition).values().stream().filter(state -> state.equals(stateModelDef.getTopState())).count() > 1) {
  return false;
}
",1,1,8,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, ),
SimpleName(),
NumberLiteral(),
"
699,if ((sb.length() - lineStart + accText.length()) > 200) {,"if ((sb.length() - lineStart + accText.length()) > 200) {
  sb.append(PSGenerator.LF);
  lineStart=sb.length();
}
",1,2,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
700,if ((isEmpty(nameMatcher.group(1)) ? 0 : 1) + (isEmpty(nameMatcher.group(2)) ? 0 : 1) > 1) {,"if ((isEmpty(nameMatcher.group(1)) ? 0 : 1) + (isEmpty(nameMatcher.group(2)) ? 0 : 1) > 1) {
  return tokenFactory.createToken(OQLTokenId.CLAZZ_E);
}
",1,2,13,,"SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
701,if (this.<Integer>argument(0) == 1) {,"if (this.<Integer>argument(0) == 1) {
  IgniteUuid jobId=jobCtx.getJobId();
  if (log.isInfoEnabled())   log.info(""Job one is proceeding [jobId="" + jobId + ']');
  assert jobId != null;
  Collection<ComputeJobSibling> jobSiblings=taskSes.getJobSiblings();
  for (  ComputeJobSibling jobSibling : jobSiblings) {
    if (!jobId.equals(jobSibling.getJobId()))     jobSibling.cancel();
  }
}
 else Thread.sleep(WAIT_TIME);
",1,1,5,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
702,"if (sources == null || sources.length == 0 || ""yarn-default.xml"".equals(sources[sources.length - 1])) {","if (sources == null || sources.length == 0 || ""yarn-default.xml"".equals(sources[sources.length - 1])) {
  conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS,schedulerAddress);
}
",1,2,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
703,"if (""K"".equals(m.group(3)) && ""2"".equals(m.group(1))) {","if (""K"".equals(m.group(3)) && ""2"".equals(m.group(1))) {
  clearLine();
  continue;
}
 else if (!""m"".equals(m.group(3))) {
  continue;
}
",1,2,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
704,if ((b&1)==1) result++;,"if ((b & 1) == 1) result++;
",1,1,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
705,if (edgesToGetStatisticsOf.stream().map(edge -> edge.getDst().getId()).collect(Collectors.toSet()).size() != 1) {,"if (edgesToGetStatisticsOf.stream().map(edge -> edge.getDst().getId()).collect(Collectors.toSet()).size() != 1) {
  throw new IllegalArgumentException(""Not destined to the same vertex: "" + edgesToOptimize.toString());
}
",1,1,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
706,if (1 != nonStreamVertexEdge.stream().map(e -> e.getPropertyValue(EncoderProperty.class).get().getClass()),"if (1 != nonStreamVertexEdge.stream().map(e -> e.getPropertyValue(EncoderProperty.class).get().getClass()).distinct().count()) {
  if (!encoderProperties.contains(EncoderFactory.DummyEncoderFactory.class) || encoderProperties.size() != 2) {
    return failure(""Incompatible encoders in "" + Util.stringifyIREdgeIds(nonStreamVertexEdge));
  }
}
",1,1,10,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
707,if ((char)fsin.read() == ':'),"if ((char)fsin.read() == ':') return start + first_quote;
",1,1,4,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
708,{   if (b[i]<45),"if (b[i] < 45) b[i]=(byte)(b[i] + 78);
 else b[i]=(byte)(b[i] - 13);
",1,1,3,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
"
709,if ( ((Character)getValue()).charValue() == '\'' ),"if (((Character)getValue()).charValue() == '\'') return ""'\\''"";
 else return ""'"" + getAsText() + ""'"";
",1,2,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
710,"if (""git"".equals(fieldValue.get(""repository"").textValue())","if (""git"".equals(fieldValue.get(""repository"").textValue()) && fieldValue.has(""project"") && !""tag"".equals(fieldValue.get(""type"").textValue())&& fieldValue.get(""ref"").asText().startsWith(Constants.R_HEADS)) {
  SCMEvent.Type type;
  String typeStr=fieldValue.get(""action"").textValue();
  if (""created"".equals(typeStr)) {
    type=CREATED;
  }
 else   if (""updated"".equals(typeStr)) {
    type=UPDATED;
  }
 else   if (""deleted"".equals(typeStr)) {
    type=REMOVED;
  }
 else {
    continue;
  }
  SCMHeadEvent.fireNow(new Push(type,fieldValue,GITPUBSUB_URL));
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
711,"if (""nt:folder"".equals(aggregate.getNode().getPrimaryNodeType().getName())","if (""nt:folder"".equals(aggregate.getNode().getPrimaryNodeType().getName()) && aggregate.getNode().getMixinNodeTypes().length == 0) {
  return artifacts;
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
712,if (data[M] <= 9) buff.append('0');,"if (data[M] <= 9) buff.append('0');
",1,1,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
713,if ((i & 1) == 1) bitCount += 1;,"if ((i & 1) == 1) bitCount+=1;
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
714,if (c == '(') c = content.codePointAt(++i);,"if (c == '(') c=content.codePointAt(++i);
",1,2,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
715,"if (this.currRow != 1) throw new SQLException(""Not currently at a row"");","if (this.currRow != 1) throw new SQLException(""Not currently at a row"");
",1,1,5,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
716,if ('\'' == this.filterCondition.charAt(i)) {,"if ('\'' == this.filterCondition.charAt(i)) {
  if (quotationType > 0) {
    if (1 == quotationType) {
      quotationType=0;
      continue;
    }
  }
 else {
    if (0 == quotationType) {
      quotationType=1;
      continue;
    }
  }
}
",1,2,5,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
717,if (((int) buf[i] & 0xff) < 0x10) {,"if (((int)buf[i] & 0xff) < 0x10) {
  strbuf.append(""0"");
}
",1,1,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
718,"if (publisher==null || ""uddi"".equalsIgnoreCase(publisher.getAuthorizedName())) return domain;","if (publisher == null || ""uddi"".equalsIgnoreCase(publisher.getAuthorizedName())) return domain;
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
719,"if (c == 'c' && line.length() >= (i+""class"".length()) && ""lass"".equals(line.substring(i+1, i+5))) {","if (c == 'c' && line.length() >= (i + ""class"".length()) && ""lass"".equals(line.substring(i + 1,i + 5))) {
  classDecl=true;
  if (line.indexOf('{',i + 5) > 0) {
    return l + 1;
  }
}
",1,2,15,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
720,if (ca[i] == '\'') inSingleQuote = ! inSingleQuote;,"if (ca[i] == '\'') inSingleQuote=!inSingleQuote;
 else if (ca[i] == '""') inDoubleQuote=!inDoubleQuote;
 else if (ca[i] == '+' && (inSingleQuote || inDoubleQuote)) ca[i]='\u9999';
 else if (ca[i] == '-' && (inSingleQuote || inDoubleQuote)) ca[i]='\u9998';
",1,1,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
721,"if ( !""pom"".equals( getProject().getExecutionProject().getPackaging().toLowerCase( Locale.US ) ) )","if (!""pom"".equals(getProject().getExecutionProject().getPackaging().toLowerCase(Locale.US))) {
  l.addAll(getProject().getExecutionProject().getCompileSourceRoots());
}
",1,5,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
722,"if (args.length < 1 || args[0] == null || ""-h"".equals(args[0]) || ""--help"".equals(args[0])) {","if (args.length < 1 || args[0] == null || ""-h"".equals(args[0]) || ""--help"".equals(args[0])) {
  programDriver.driver(args);
  return;
}
",1,2,13,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
723,if (data.get(i).get(0) == 0.0d) {,"if (data.get(i).get(0) == 0.0d) {
  instances[0].add(data.get(i));
}
 else {
  instances[1].add(data.get(i));
}
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
724,if ((V = f2 + f2 - W) < 1.0) {,"if ((V=f2 + f2 - W) < 1.0) {
  Y=k2 + Dk;
  if (V <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {
    return Y;
  }
  if (V <= f(Y,lMy,cPm)) {
    return Y;
  }
}
",1,1,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
725,"if (""."".equals(ret) || ""./"".equals(ret)) ret = """";","if (""."".equals(ret) || ""./"".equals(ret)) ret="""";
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
726,"if (args.length != 2) { throw new IllegalArgumentException(""LdPath function "" + getLocalName() + "" requires 2 arguments""); }","if (args.length != 2) {
  throw new IllegalArgumentException(""LdPath function "" + getLocalName() + "" requires 2 arguments"");
}
",1,1,6,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
727,"if ( c != null && ""User-Agent"".equals( c.getValue( null ) ) )","if (c != null && ""User-Agent"".equals(c.getValue(null))) {
  found=true;
  break;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
728,"if ( result.containsKey( Record.CLASSIFIER ) || ""pom"".equals( packaging ) || ""war"".equals( packaging )","if (result.containsKey(Record.CLASSIFIER) || ""pom"".equals(packaging) || ""war"".equals(packaging)|| ""ear"".equals(packaging)) {
  result.put(Record.FILE_EXTENSION,packaging);
}
 else {
  result.put(Record.FILE_EXTENSION,""jar"");
}
",1,1,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
729,"if ( ""."".equals( path ) || subpath.equals( path ) || subpath.startsWith( path + File.separator ) )","if (""."".equals(path) || subpath.equals(path) || subpath.startsWith(path + File.separator)) {
  return true;
}
",1,1,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
730,"if ( !""pom"".equals( project.getExecutionProject().getPackaging().toLowerCase( Locale.US ) ) )","if (!""pom"".equals(project.getExecutionProject().getPackaging().toLowerCase(Locale.US))) {
  l.addAll(project.getExecutionProject().getCompileSourceRoots());
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
731,"if ( ""package"".equals( stok.sval ) && stok.ttype != '\""' )","if (""package"".equals(stok.sval) && stok.ttype != '\""') {
  stok.nextToken();
  this.setPackageType(new PackageType(stok.sval));
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
732,if ( 'y' != inputHandler.readLine().toLowerCase().charAt( 0 ) ),"if ('y' != inputHandler.readLine().toLowerCase().charAt(0)) {
  disableMaterialization=false;
}
",1,4,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
733,"if (!""true"".equalsIgnoreCase(getProperties().getProperty(PROPERTY_LONGRUNNINGTESTS))) {","if (!""true"".equalsIgnoreCase(getProperties().getProperty(PROPERTY_LONGRUNNINGTESTS))) {
  return;
}
",1,1,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
734,"if (""FNACT_ACTIVE"".equals(statusId) && balance.compareTo(FinAccountHelper.ZERO) < 1) {","if (""FNACT_ACTIVE"".equals(statusId) && balance.compareTo(FinAccountHelper.ZERO) < 1) {
  finAccount.set(""statusId"",""FNACT_MANFROZEN"");
  Debug.logInfo(""Financial account ["" + finAccountId + ""] has passed its threshold [""+ balance+ ""] (Frozen)"",module);
}
 else if (""FNACT_MANFROZEN"".equals(statusId) && balance.compareTo(FinAccountHelper.ZERO) > 0) {
  finAccount.set(""statusId"",""FNACT_ACTIVE"");
  Debug.logInfo(""Financial account ["" + finAccountId + ""] has been made current [""+ balance+ ""] (Un-Frozen)"",module);
}
",1,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
735,"if (""lookup"".equals(method.getName()) && method.getParameterTypes().length == 1 && String.class.equals(method.getParameterTypes()[0])) {","if (""lookup"".equals(method.getName()) && method.getParameterTypes().length == 1 && String.class.equals(method.getParameterTypes()[0])) {
  final Object lookedUp=bindings.get(normalize((String)args[0]));
  if (lookedUp != null) {
    if (lookedUp instanceof Reference) {
      return ((Reference)lookedUp).getObject();
    }
 else     if (lookedUp instanceof LinkRef) {
      return ((Context)proxy).lookup(((LinkRef)lookedUp).getLinkName());
    }
  }
}
",1,2,13,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
736,"if ((image.getRGB(x, y) & 0x00ffffff) != 0x00ffffff)","if ((image.getRGB(x,y) & 0x00ffffff) != 0x00ffffff) return false;
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
737,"if (tree.getMethodSelect().getKind() == Kind.IDENTIFIER && ""super"".equals(((IdentifierTree) tree.getMethodSelect()).getName().toString())) {","if (tree.getMethodSelect().getKind() == Kind.IDENTIFIER && ""super"".equals(((IdentifierTree)tree.getMethodSelect()).getName().toString())) {
  return getCurrentPath();
}
",1,3,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
738,"if (HostInfoUtils.LOCALHOST.equals(externalForm) || ""127.0.0.1"".equals(externalForm) || ""::1"".contains(externalForm)) {","if (HostInfoUtils.LOCALHOST.equals(externalForm) || ""127.0.0.1"".equals(externalForm) || ""::1"".contains(externalForm)) {
  return LOCAL;
}
",1,1,9,,"QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
739,if (ch[pos + c.length] == ';') {,"if (ch[pos + c.length] == ';') {
  ch[pos + c.length]=entitySubstitutions[i];
  return pos + c.length;
}
",1,1,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
740,if (ctx.textArray[stopIndex] == '\t') {,"if (ctx.textArray[stopIndex] == '\t') {
  ctx.tabsFragment=true;
  int ntInd=Analyzer.findFirstNonTab(ctx.textArray,ctx.fragmentStartIndex,ctx.fragmentLength);
  if (ntInd != -1) {
    ctx.fragmentLength=ntInd - ctx.fragmentStartIndex;
  }
}
 else {
  ctx.eol=true;
  ctx.fragmentLength=1;
}
",1,1,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
741,"if ((i+""throws"".length()) < line.length() && ""throws"".equals(line.substring(i, i+""throws"".length()))) {","if ((i + ""throws"".length()) < line.length() && ""throws"".equals(line.substring(i,i + ""throws"".length()))) {
  isThrows=true;
}
",1,3,13,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
742,"if(s instanceof DelegatingVCS && ""TestVCSDisplay"".equals((String)((DelegatingVCS) s).getDisplayName())) {","if (s instanceof DelegatingVCS && ""TestVCSDisplay"".equals((String)((DelegatingVCS)s).getDisplayName())) {
  return (DelegatingVCS)s;
}
",1,1,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
743,"""java.lang.Thread"".equals(className) && ""exit"".equals(getDebuggerImpl ().getThread (tr).getMethodName())) {","if (depth == 1 && ""main"".equals(methodName) && !""java.lang.Thread"".equals(this.className) && ""java.lang.Thread"".equals(className) && ""exit"".equals(getDebuggerImpl().getThread(tr).getMethodName())) {
  return true;
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
744,if (regexp.charAt(numberNode1.end + 1) == '}') {,"if (regexp.charAt(numberNode1.end + 1) == '}') {
  result=new TreeNode(TreeNode.QUANTIFIER,start,numberNode1.end + 2,""{n,}"");
  result.add(numberNode1);
  return result;
}
",1,1,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
745,"if(11111==111111) System.out.println(""yes"");","if (11111 == 111111) System.out.println(""yes"");
",1,1,5,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
746,"if (""<init>"".equals(mt.getName().toString()) && mt.getParameters().size() == 0) {","if (""<init>"".equals(mt.getName().toString()) && mt.getParameters().size() == 0) {
  targetTree=make.removeClassMember(targetTree,mt);
  break;
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
747,"if (state[0] == CLASS_DATA_START && ""Deprecated."".equals(new String(data))) {","if (state[0] == CLASS_DATA_START && ""Deprecated."".equals(new String(data))) {
  offset[0]=lastHRPos + 4;
}
 else if (state[0] == INSIDE_DIV && ""Deprecated."".equals(new String(data))) {
  offset[0]=offset[2];
  offset[2]=-1;
}
 else if (state[0] == TEXT_START && offset[2] < 0) {
  offset[2]=pos;
}
",1,1,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
748,"if (""java"".equals(file.getExt()) || ""text/x-java"".equals(FileUtil.getMIMEType(file, ""text/x-java""))) {","if (""java"".equals(file.getExt()) || ""text/x-java"".equals(FileUtil.getMIMEType(file,""text/x-java""))) {
  collected.add(file);
}
",1,2,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
749,"if (q1 instanceof PrefixQuery && ""u"".equals(((PrefixQuery)q1).getPrefix().field())) {","if (q1 instanceof PrefixQuery && ""u"".equals(((PrefixQuery)q1).getPrefix().field())) {
  MAX_MAX_CLAUSE=1 << 16;
}
 else if (q1 instanceof TermQuery && ""p"".equals(((TermQuery)q1).getTerm().field())) {
  MAX_MAX_CLAUSE=1 << 16;
}
",1,1,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
750,"if (""javax.swing.JButton"".equals(className) && ""Proxy Settings"".equals(((JButton)c).getText())) {","if (""javax.swing.JButton"".equals(className) && ""Proxy Settings"".equals(((JButton)c).getText())) {
  return false;
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
751,"if (children[x].getName().equals(fileName) && ""java"".equals(children[x].getExt()) && !children[x].equals(f) && !children[x].isVirtual()) {","if (children[x].getName().equals(fileName) && ""java"".equals(children[x].getExt()) && !children[x].equals(f)&& !children[x].isVirtual()) {
  return new Problem(true,new MessageFormat(NbBundle.getMessage(MoveFileRefactoringPlugin.class,""ERR_ClassToMoveClashes"")).format(new Object[]{fileName}));
}
",1,1,17,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
752,"if (""org.netbeans.modules.php.editor.index.GsfUtilities"".equals(e.getClassName()) && ""getBaseDocument"".equals(e.getMethodName()) && t instanceof ClassNotFoundException) {","if (""org.netbeans.modules.php.editor.index.GsfUtilities"".equals(e.getClassName()) && ""getBaseDocument"".equals(e.getMethodName()) && t instanceof ClassNotFoundException) {
  return false;
}
",1,1,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
753,"if (""text"".equals(dataFlavor.getPrimaryType()) && ""uri-list"".equals(dataFlavor.getSubType()) && dataFlavor.getRepresentationClass() == String.class) {","if (""text"".equals(dataFlavor.getPrimaryType()) && ""uri-list"".equals(dataFlavor.getSubType()) && dataFlavor.getRepresentationClass() == String.class) {
  accept=dataFlavor;
  value=(String)obj;
  break;
}
",1,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
754,"else if (""NO_OPTION"".equals(onHeapDump) && onHeapDumpCombo.getSelectedIndex() != 0) return false;","if (""NO_OPTION"".equals(onHeapDump) && onHeapDumpCombo.getSelectedIndex() != 0) return false;
 else if (""YES_OPTION"".equals(onHeapDump) && onHeapDumpCombo.getSelectedIndex() != 1) return false;
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
755,"if (""application"".equals(path) || path.length() == 0 || ""resources"".equals(path)) {","if (""application"".equals(path) || path.length() == 0 || ""resources"".equals(path)) {
}
 else if (path.startsWith(""resource["")) {
  int i=getIndex(path);
  if (i > -1) {
    List<Resource> resources=getCurrentResources(app,current);
    if (i < resources.size()) {
      current=resources.get(i);
      continue;
    }
  }
  return null;
}
 else if (path.startsWith(""method["")) {
  int iTarget=getIndex(path);
  if (iTarget > -1) {
    int i=0;
    for (    Object o : current.getMethodOrResource()) {
      if (o instanceof Method) {
        if (i == iTarget) {
          if (pathIndex == (paths.length - 1)) {
            return (Method)o;
          }
 else {
            return null;
          }
        }
        if (i < iTarget) {
          i++;
        }
 else {
          return null;
        }
      }
    }
  }
  return null;
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
756,"if (!authUser.isEmpty() && ""true"".equalsIgnoreCase(context.getProperty(PROP_DIGEST_AUTH).getValue())) {","if (!authUser.isEmpty() && ""true"".equalsIgnoreCase(context.getProperty(PROP_DIGEST_AUTH).getValue())) {
  final String authPass=trimToEmpty(context.getProperty(PROP_BASIC_AUTH_PASSWORD).getValue());
  final Map<String,CachingAuthenticator> authCache=new ConcurrentHashMap<>();
  com.burgstaller.okhttp.digest.Credentials credentials=new com.burgstaller.okhttp.digest.Credentials(authUser,authPass);
  final DigestAuthenticator digestAuthenticator=new DigestAuthenticator(credentials);
  okHttpClientBuilder.interceptors().add(new AuthenticationCacheInterceptor(authCache));
  okHttpClientBuilder.authenticator(new CachingAuthenticatorDecorator(digestAuthenticator,authCache));
}
",1,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
757,"if (product == null || ""N"".equals(product.getString(""includeInPromotions"")) || !productIds.contains(cartItem.getProductId())) {","if (product == null || ""N"".equals(product.getString(""includeInPromotions"")) || !productIds.contains(cartItem.getProductId())) {
  continue;
}
",1,4,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
758,"if (minDate.length() < 14) minDate = minDate + "" "" + ""00:00:00.000"";","if (minDate.length() < 14) minDate=minDate + "" "" + ""00:00:00.000"";
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
759,"if ((height == null || width == null || depth == null) && ""Y"".equals(isVariant)) {","if ((height == null || width == null || depth == null) && ""Y"".equals(isVariant)) {
  try {
    String virtualId=ProductWorker.getVariantVirtualId(product);
    if (UtilValidate.isNotEmpty(virtualId)) {
      GenericValue virtual=EntityQuery.use(delegator).from(""Product"").where(""productId"",virtualId).cache().queryOne();
      if (virtual != null) {
        if (height == null)         height=virtual.getBigDecimal(""shippingHeight"");
        if (width == null)         width=virtual.getBigDecimal(""shippingWidth"");
        if (depth == null)         depth=virtual.getBigDecimal(""shippingDepth"");
      }
    }
  }
 catch (  GenericEntityException e) {
    Debug.logError(e,""Problem getting virtual product"");
  }
}
",1,1,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
760,"if (! ""PRODUCT_ORDER_ITEM"".equals(orderItem.getString(""orderItemTypeId""))) continue;","if (!""PRODUCT_ORDER_ITEM"".equals(orderItem.getString(""orderItemTypeId""))) continue;
",1,1,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
761,"if (!""true"".equals(UtilProperties.getPropertyValue(""serverstats"", ""stats.enable."" + typeIds[type]))) return;","if (!""true"".equals(UtilProperties.getPropertyValue(""serverstats"",""stats.enable."" + typeIds[type]))) return;
",1,3,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
762,"if (!includePromoItems && item.get(""isPromo"") != null && ""Y"".equals(item.getString(""isPromo""))) {","if (!includePromoItems && item.get(""isPromo"") != null && ""Y"".equals(item.getString(""isPromo""))) {
  continue;
}
",1,1,10,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
763,"if (""Y"".equals(product.getString(""isVariant"")) && ""true"".equals(EntityUtilProperties.getPropertyValue(""prodsearch"", ""index.ignore.variants"", delegator))) {","if (""Y"".equals(product.getString(""isVariant"")) && ""true"".equals(EntityUtilProperties.getPropertyValue(""prodsearch"",""index.ignore.variants"",delegator))) {
  return;
}
",1,1,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
764,"if (""SERVICE"".equals(productTypeId) || ""SERVICE_PRODUCT"".equals(productTypeId) || (ProductWorker.isDigital(product) && !ProductWorker.isPhysical(product))) {","if (""SERVICE"".equals(productTypeId) || ""SERVICE_PRODUCT"".equals(productTypeId) || (ProductWorker.isDigital(product) && !ProductWorker.isPhysical(product))) {
  return false;
}
",1,3,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
"
765,"if ((! UtilValidate.isEmpty(shipment)) && ""PURCH_SHIP_CREATED"".equals(shipment.getString(""statusId""))) {","if ((!UtilValidate.isEmpty(shipment)) && ""PURCH_SHIP_CREATED"".equals(shipment.getString(""statusId""))) {
  Map<String,Object> updateShipmentMap=dispatcher.runSync(""updateShipment"",UtilMisc.<String,Object>toMap(""shipmentId"",shipmentId,""statusId"",""PURCH_SHIP_SHIPPED"",""userLogin"",userLogin));
  if (ServiceUtil.isError(updateShipmentMap)) {
    return updateShipmentMap;
  }
}
",1,1,8,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
766,"if (""screen"".equals(this.viewInfoMap.type) || ""screenfop"".equals(this.viewInfoMap.type) ||","if (""screen"".equals(this.viewInfoMap.type) || ""screenfop"".equals(this.viewInfoMap.type) || ""screentext"".equals(this.viewInfoMap.type)|| ""screenxml"".equals(this.viewInfoMap.type)) {
  String fullScreenName=this.viewInfoMap.page;
  if (UtilValidate.isNotEmpty(fullScreenName)) {
    int poundIndex=fullScreenName.indexOf('#');
    this.screenCalledByThisView=this.aif.getScreenWidgetArtifactInfo(fullScreenName.substring(poundIndex + 1),fullScreenName.substring(0,poundIndex));
    if (this.screenCalledByThisView != null) {
      UtilMisc.addToSortedSetInMap(this,aif.allViewInfosReferringToScreen,this.screenCalledByThisView.getUniqueId());
    }
  }
}
",1,2,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
767,"if (""contains"".equals(operator) && value1 instanceof Collection<?>) {","if (""contains"".equals(operator) && value1 instanceof Collection<?>) {
  Collection<?> col1=(Collection<?>)value1;
  return col1.contains(convertedValue2) ? Boolean.TRUE : Boolean.FALSE;
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
768,"if (UtilValidate.isNotEmpty(this.delegatorTenantId) && ""org.apache.ofbiz.tenant"".equals(entityGroupName)) {","if (UtilValidate.isNotEmpty(this.delegatorTenantId) && ""org.apache.ofbiz.tenant"".equals(entityGroupName)) {
  Debug.logInfo(""Can't access entity of entityGroup = "" + entityGroupName + "" using tenant delegator ""+ this.getDelegatorName()+ "", use base delegator instead"",module);
  return null;
}
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
769,"""screentext"".equals(this.viewInfoMap.type) || ""screenxml"".equals(this.viewInfoMap.type)) {","if (""screen"".equals(this.viewInfoMap.type) || ""screenfop"".equals(this.viewInfoMap.type) || ""screentext"".equals(this.viewInfoMap.type)|| ""screenxml"".equals(this.viewInfoMap.type)) {
  String fullScreenName=this.viewInfoMap.page;
  if (UtilValidate.isNotEmpty(fullScreenName)) {
    int poundIndex=fullScreenName.indexOf('#');
    this.screenCalledByThisView=this.aif.getScreenWidgetArtifactInfo(fullScreenName.substring(poundIndex + 1),fullScreenName.substring(0,poundIndex));
    if (this.screenCalledByThisView != null) {
      UtilMisc.addToSortedSetInMap(this,aif.allViewInfosReferringToScreen,this.screenCalledByThisView.getUniqueId());
    }
  }
}
",1,1,10,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ),
"
770,"if (itemIndex != null && ""multi"".equals(getModelFormField().modelForm.getType())) {","if (itemIndex != null && ""multi"".equals(getModelFormField().modelForm.getType())) {
  return baseName + getModelFormField().modelForm.getItemIndexSeparator() + itemIndex.intValue();
}
 else {
  return baseName;
}
",1,1,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
771,"if (""FNACT_ACTIVE"".equals(statusId) && balance.compareTo(FinAccountHelper.getZero()) < 1) {","if (""FNACT_ACTIVE"".equals(statusId) && balance.compareTo(FinAccountHelper.getZero()) < 1) {
  finAccount.set(""statusId"",""FNACT_MANFROZEN"");
  Debug.logInfo(""Financial account ["" + finAccountId + ""] has passed its threshold [""+ balance+ ""] (Frozen)"",MODULE);
}
 else if (""FNACT_MANFROZEN"".equals(statusId) && balance.compareTo(FinAccountHelper.getZero()) > 0) {
  finAccount.set(""statusId"",""FNACT_ACTIVE"");
  Debug.logInfo(""Financial account ["" + finAccountId + ""] has been made current [""+ balance+ ""] (Un-Frozen)"",MODULE);
}
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
772,"if (""SALES_ORDER"".equals(orderTypeId) && orderItem != null && productStore != null && ""Y"".equals(productStore.getString(","if (""SALES_ORDER"".equals(orderTypeId) && orderItem != null && productStore != null && ""Y"".equals(productStore.getString(""allocateInventory""))) {
  String autoReserve=OrderReadHelper.getOrderItemAttribute(orderItem,""autoReserve"");
  if (autoReserve == null || !""true"".equals(autoReserve)) {
    continue;
  }
}
",1,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
773,"if (""screen"".equals(this.viewInfoMap.getType()) || ""screenfop"".equals(this.viewInfoMap.getType())","if (""screen"".equals(this.viewInfoMap.getType()) || ""screenfop"".equals(this.viewInfoMap.getType()) || ""screentext"".equals(this.viewInfoMap.getType())|| ""screenxml"".equals(this.viewInfoMap.getType())) {
  String fullScreenName=this.viewInfoMap.getPage();
  if (UtilValidate.isNotEmpty(fullScreenName)) {
    int poundIndex=fullScreenName.indexOf('#');
    this.screenCalledByThisView=this.getAif().getScreenWidgetArtifactInfo(fullScreenName.substring(poundIndex + 1),fullScreenName.substring(0,poundIndex));
    if (this.screenCalledByThisView != null) {
      UtilMisc.addToSortedSetInMap(this,aif.getAllViewInfosReferringToScreen(),this.screenCalledByThisView.getUniqueId());
    }
  }
}
",1,5,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
774,"|| ""screentext"".equals(this.viewInfoMap.getType()) || ""screenxml"".equals(this.viewInfoMap.getType())) {","if (""screen"".equals(this.viewInfoMap.getType()) || ""screenfop"".equals(this.viewInfoMap.getType()) || ""screentext"".equals(this.viewInfoMap.getType())|| ""screenxml"".equals(this.viewInfoMap.getType())) {
  String fullScreenName=this.viewInfoMap.getPage();
  if (UtilValidate.isNotEmpty(fullScreenName)) {
    int poundIndex=fullScreenName.indexOf('#');
    this.screenCalledByThisView=this.getAif().getScreenWidgetArtifactInfo(fullScreenName.substring(poundIndex + 1),fullScreenName.substring(0,poundIndex));
    if (this.screenCalledByThisView != null) {
      UtilMisc.addToSortedSetInMap(this,aif.getAllViewInfosReferringToScreen(),this.screenCalledByThisView.getUniqueId());
    }
  }
}
",1,1,10,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
775,"if (eagerInit != null && eagerInit instanceof String && ""true"".equalsIgnoreCase((String) eagerInit)","if (eagerInit != null && eagerInit instanceof String && ""true"".equalsIgnoreCase((String)eagerInit) && connectionManager instanceof AbstractConnectionManager) {
  try {
    ((AbstractConnectionManager)connectionManager).doStart();
    try {
      final Object cf=managedConnectionFactory.createConnectionFactory(connectionManager);
      if (cf instanceof ConnectionFactory) {
        final Connection connection=((ConnectionFactory)cf).getConnection();
        connection.getMetaData();
        connection.close();
      }
    }
 catch (    Exception e) {
    }
  }
 catch (  Exception e) {
    logger.warning(""Can't start connection manager"",e);
  }
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
776,"if (serviceProperties == null || ""false"".equals(serviceProperties.getProperty(IGNORE_DEFAULT_VALUES_PROP, ""false""))) {","if (serviceProperties == null || ""false"".equals(serviceProperties.getProperty(IGNORE_DEFAULT_VALUES_PROP,""false""))) {
  props.putAll(provider.getProperties());
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
777,"if (""beforeDelivery"".equals(methodName) && Arrays.deepEquals(new Class[] {Method.class}, parameterTypes)) {","if (""beforeDelivery"".equals(methodName) && Arrays.deepEquals(new Class[]{Method.class},parameterTypes)) {
  beforeDelivery((Method)args[0]);
  return null;
}
 else if (""afterDelivery"".equals(methodName) && parameterTypes.length == 0) {
  afterDelivery();
  return null;
}
 else if (""release"".equals(methodName) && parameterTypes.length == 0) {
  release();
  return null;
}
 else {
  Object value=deliverMessage(method,args);
  return value;
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
778,"if (!"""".equals(name.toString())) name.insert(0, ""."");","if (!"""".equals(name.toString())) name.insert(0,""."");
",1,1,8,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
779,if (ch <= 'F')  return ch-'A'+10;,"if (ch <= 'F') return ch - 'A' + 10;
",1,4,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
780,"if ((""userA"".equals(username)||""userB"".equals(username)) && ""test"".equals(password)) {","if ((""userA"".equals(username) || ""userB"".equals(username)) && ""test"".equals(password)) {
  return new Principal(){
    @Override public String getName(){
      return username;
    }
    @Override public String toString(){
      return username;
    }
  }
;
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
781,"if (line == null || ""[RI Server] Ready!"".equals(line)) break;","if (line == null || ""[RI Server] Ready!"".equals(line)) break;
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
782,"if (""classes"".equals(current.getName()) && parent != null && ""WEB-INF"".equals(parent.getName())) {","if (""classes"".equals(current.getName()) && parent != null && ""WEB-INF"".equals(parent.getName())) {
  if (webInfClassesAnnotationsProcessed) {
    return false;
  }
  webInfClassesAnnotationsProcessed=true;
  return true;
}
",1,1,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
783,"if (doFinal && ""IBMJCE"".equals(cipher.getProvider().getName()) && ""RC4"".equals(cipher.getAlgorithm())) {","if (doFinal && ""IBMJCE"".equals(cipher.getProvider().getName()) && ""RC4"".equals(cipher.getAlgorithm())) {
  int index=(int)(pos >> chunkBits);
  boolean lastChunk;
  if (posInChunk == 0) {
    index--;
    posInChunk=chunk.length;
    lastChunk=false;
  }
 else {
    lastChunk=true;
  }
  cipher=initCipherForBlockNoFlush(cipher,index,lastChunk);
}
",1,1,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
784,"if (s != """") s = s + ASEmitterTokens.MEMBER_ACCESS.getToken() + name.getBaseName();","if (s != """") s=s + ASEmitterTokens.MEMBER_ACCESS.getToken() + name.getBaseName();
 else s=name.getBaseName();
",1,1,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
785,@Override public PropertyTypeBuilder setMinimumOccurs(int occurs) {if (occurs == 1) return this; throw readOnly();},"if (occurs == 1) return this;
",1,1,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
ThisExpression(ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
786,"if (""cd"".equals(s) || ""Hz"".equals(s)) existed &= ~(1    );","if (""cd"".equals(s) || ""Hz"".equals(s)) existed&=~(1);
",1,1,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ParenthesizedExpression-expression, PrefixExpression-operand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
787,if      (c <= '⁹') c -= ('⁰' - '0');,"if (c <= '⁹') c-=('⁰' - '0');
 else if (c >= '₀') c-=('₀' - '0');
",1,1,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
788,"if(""|"".equals(parts[i]) && parts.length > i+1){","if (""|"".equals(parts[i]) && parts.length > i + 1) {
  filter=parseConstraint(parts[i + 1]);
}
",1,1,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
789,"if (StringUtils.isEmpty(key) || "".."".equals(key) || ""."".equals(key) || !BLOB_KEY_PATTERN.matcher(key).matches()) {","if (StringUtils.isEmpty(key) || "".."".equals(key) || ""."".equals(key)|| !BLOB_KEY_PATTERN.matcher(key).matches()) {
  LOG.error(""'{}' does not appear to be valid. It must match {}. And it can't be \"".\"", \""..\"", null or empty string."",key,BLOB_KEY_PATTERN);
  return false;
}
",1,1,13,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
790,"if (""L[T"".indexOf(getChar(signature, pos)) != -1) {","if (""L[T"".indexOf(getChar(signature,pos)) != -1) {
  pos=checkFieldTypeSignature(signature,pos);
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
791,if (x.nextClean() != '[') { throw x,"if (x.nextClean() != '[') {
  throw x.syntaxError(""A JSONArray must start with '['"");
}
",1,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
792,if ('x' == s) return 'x';,"if ('x' == s) return 'x';
",1,1,3,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
CharacterLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
793,if (1 == providedKeys.length) return key.equals(providedKeys[0]);,"if (1 == providedKeys.length) return key.equals(providedKeys[0]);
 else {
  for (  final String temp : providedKeys) {
    if (temp.equals(key))     return true;
  }
  return false;
}
",1,1,6,,"NumberLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
794,"if ( (!getParent().getState().isAvailable()) || ""org.apache.jasper.runtime.JspApplicationContextImpl"".equals(name) ){","if ((!getParent().getState().isAvailable()) || ""org.apache.jasper.runtime.JspApplicationContextImpl"".equals(name)) {
  tomcatAttributes.put(name,value);
}
 else {
  super.setAttribute(name,value);
}
",1,1,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
795,if ((systime - currentMillisLocal.get().value) > 1000) {,"if ((systime - currentMillisLocal.get().value) > 1000) {
  currentDateLocal.set(new Date(systime));
  currentMillisLocal.get().value=systime;
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
796,"if ( ""war"".equals( artifact.getType() ) && !artifact.isOptional() && filter.include( artifact ) )","if (""war"".equals(artifact.getType()) && !artifact.isOptional() && filter.include(artifact)) {
  addContextFromArtifact(container,contexts,artifact,""/"" + artifact.getArtifactId(),null,false);
}
",1,1,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
797,"&& ""boolean"".equalsIgnoreCase(m[i].getParameterTypes()[0]","if (m[i].getName().startsWith(""set"") && m[i].getParameterTypes().length == 1 && ""boolean"".equalsIgnoreCase(m[i].getParameterTypes()[0].getName())) {
  String arg=m[i].getName().substring(3);
  v.addElement(unCapitalize(arg));
}
",1,1,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ),
"
798,if ( access.addAndGet(1) == 1 ) txStart = System.currentTimeMillis();,"if (access.addAndGet(1) == 1) txStart=System.currentTimeMillis();
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
799,if( libs[i].length() <5 ) continue;,"if (libs[i].length() < 5) continue;
",1,1,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
800,"if (this.configuration.isUnsafeEjbd() && ""-"".equals(System.getProperty(""tomee.serialization.class.blacklist""))) {","if (this.configuration.isUnsafeEjbd() && ""-"".equals(System.getProperty(""tomee.serialization.class.blacklist""))) {
  System.clearProperty(""tomee.serialization.class.blacklist"");
  Setup.reloadClientSerializationConfig();
}
",1,1,8,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
801,if( fileMode.charAt( i * 3 + 1 ) == 'w' ) {,"if (fileMode.charAt(i * 3 + 1) == 'w') {
  permissions[i]+=2;
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
802,"} else if (""Safari"".equals(entity) && ua.getBrowser() != null && ""Safari"".equals(ua.getBrowser().getName()))","if (""Safari"".equals(entity) && ua.getBrowser() != null && ""Safari"".equals(ua.getBrowser().getName())) {
  entity=null;
}
",1,1,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
803,if (attachment[0].getHeaders().size() == 6) {,"if (attachment[0].getHeaders().size() == 6) {
  attachment[0].addHeader(AttachmentUtils.MIME_HEADER_CONTENT_DESCRIPTION,""Kaputt"");
}
",1,1,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
804,if (args.length - i < 2) printUsage();,"if (args.length - i < 2) printUsage();
",1,1,4,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
805,"if(arg+1<args.length && ""!"".equals(args[arg+1]))","if (arg + 1 < args.length && ""!"".equals(args[arg + 1])) {
  ++arg;
  more=false;
}
",1,1,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
806,"if (this.regex.charAt(this.offset) != ')')  throw ex(""parser.factor.1"", this.offset);","if (this.regex.charAt(this.offset) != ')') throw ex(""parser.factor.1"",this.offset);
",1,5,10,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
807,if (ch == '?')  this.offset --;,"if (ch == '?') this.offset--;
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
808,"if (yesPattern.size() != 2)  throw ex(""parser.factor.6"", this.offset);","if (yesPattern.size() != 2) throw ex(""parser.factor.6"",this.offset);
",1,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
809,"if (this.chardata != '}')  throw ex(""parser.descape.3"", this.offset-1);","if (this.chardata != '}') throw ex(""parser.descape.3"",this.offset - 1);
",1,1,8,,"ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
810,if (this.size() == 1)  return FC_CONTINUE;,"if (this.size() == 1) return FC_CONTINUE;
",1,1,4,,"ThisExpression(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
811,if (n.charAt(ci) != ' ')  buffer.append((char)n.charAt(ci));,"if (n.charAt(ci) != ' ') buffer.append((char)n.charAt(ci));
",1,1,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
PrimitiveType(CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
812,if (index == 1)  return this.no;,"if (index == 1) return this.no;
",1,1,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
813,"if (!""Dreams"".equals(data.get(""id-name"").get(0))) {","if (!""Dreams"".equals(data.get(""id-name"").get(0))) {
  throw new Exception(""Map entry 0 does not match"");
}
",2,560,7,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
814,"if (username == null || """".equals(username) || password == null || """".equals(password) || groupname == null || """".equals(groupname)) {","if (username == null || """".equals(username) || password == null || """".equals(password) || groupname == null || """".equals(groupname)) {
  throw new IllegalArgumentException(""Username, password and groupname cannot be null or \""\"""");
}
",2,114,15,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
815,"if (args != null && args.length == 1 && ""equals"".equals(method.getName())) {","if (args != null && args.length == 1 && ""equals"".equals(method.getName())) {
  Object arg=args[0];
  if (arg == null) {
    return false;
  }
  if (proxy == arg) {
    return true;
  }
}
",2,3,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
816,if (textLowerCased.length() == 1) return -1;,"if (textLowerCased.length() == 1) return -1;
",2,13,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
817,"if (separator!='/') relativePath = relativePath.replace('/',separator);","if (separator != '/') relativePath=relativePath.replace('/',separator);
",2,21,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
818,if (((SQLInteger) row.getCol(0)).getInt() == 22),"if (((SQLInteger)row.getCol(0)).getInt() == 22) {
  if (!scan4.delete()) {
    throw T_Fail.testFailMsg(""(scanExample delete errors) Delete failed."");
  }
  break;
}
",2,6,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
819,if (++counter.count == 3) {,"if (++counter.count == 3) {
  return lineIterator(fn,""a"",""b"",""ERROR match"",""d"");
}
 else {
  return lineIterator(fn,""a"",""b"",""c"",""d"");
}
",2,2,2,,"QualifiedName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
820,if (percent.compareTo(new BigDecimal(1)) == 1) {,"if (percent.compareTo(new BigDecimal(1)) == 1) {
  s_logger.debug(""VM "" + vm.getUuid() + "" CPU MHz exceeded host ""+ host.getUuid()+ "" CPU MHz, limiting VM CPU to the host maximum"");
  percent=new BigDecimal(1);
}
",2,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
821,if (this.offsetColor[i] != 0.0f) {,"if (this.offsetColor[i] != 0.0f) {
  filterColor=true;
}
",2,2,4,,"ThisExpression(FieldAccess-expression, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
822,if (super.getLength() > 10) {,"if (super.getLength() > 10) {
  final byte[] tmp=new byte[10];
  System.arraycopy(bytes,0,tmp,0,10);
  hex=Utility.toHexString(tmp) + ""... (truncated)"";
}
 else {
  hex=Utility.toHexString(bytes);
}
",2,2,2,,"SimpleName(SuperMethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
823,"if (name.indexOf(""arg0"") >= 0 && ""11"".equalsIgnoreCase(value)) {","if (name.indexOf(""arg0"") >= 0 && ""11"".equalsIgnoreCase(value)) {
  value=""12"";
  ((SOAPElement)elem2).setValue(value);
}
",2,2,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
824,if (chars[i] > 0xff) chars[i] = '?';,"if (chars[i] > 0xff) chars[i]='?';
",2,2,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
825,"if (args[1].size() != 1) { throw new IllegalArgumentException(""len argument must be a single literal for function "" + getLocalName()); }","if (args[1].size() != 1) {
  throw new IllegalArgumentException(""len argument must be a single literal for function "" + getLocalName());
}
",2,3,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
826,if (editorCookie.getOpenedPanes ().length < 1) return null;,"if (editorCookie.getOpenedPanes().length < 1) return null;
",2,40,5,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
827,if (values[i].toString().length() != 1),"if (values[i].toString().length() != 1) {
  throw new IllegalArgumentException(""Property \"""" + name + ""\"" in class ""+ m_componentClassName+ "" does not contain a valid Character value (""+ values[i]+ "")"");
}
",2,2,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
828,"""string2"".equals(props.get(""string.value2"")) && new Double(456).equals(props.get(""double.value2""))) {","if (""CM"".equals(props.get(""string.value"")) && new Double(123).equals(props.get(""double.value"")) && ""string2"".equals(props.get(""string.value2""))&& new Double(456).equals(props.get(""double.value2""))) {
  m_ensure.step(1);
  Hashtable<String,Object> newprops=new Hashtable<>();
  newprops.put(""string.value"",""CM modified"");
  m_conf.update(newprops);
}
",2,2,11,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
829,"if ( null == remoteOBR || remoteOBR.trim().length() == 0 || ""true"".equalsIgnoreCase( remoteOBR ) )","if (null == remoteOBR || remoteOBR.trim().length() == 0 || ""true"".equalsIgnoreCase(remoteOBR)) {
  remoteOBR=obrRepository;
}
",2,2,9,,"NullLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
830,"if ("""".equals(tmp[0]) || tmp[1] == null) {","if ("""".equals(tmp[0]) || tmp[1] == null) {
  tmp[1]=colInfo.getInternalName();
}
",2,2,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
831,if (source.peek(true).getType() == '(') {,"if (source.peek(true).getType() == '(') {
  source.checkLeftParen();
  disposition.setDisposition(source.readString());
  disposition.setParameterList(source.readParameterList());
  source.checkRightParen();
}
 else if (source.peek(true) == IMAPResponseTokenizer.NIL) {
  source.next();
}
 else {
  throw new ResponseFormatException(""Expecting NIL or '(' in response"");
}
",2,2,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
832,public void decLevel() { if(depth >= 1) depth--; },"if (depth >= 1) depth--;
",2,2,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, Block-statements, MethodDeclaration-body, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, MethodDeclaration-body, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, Block-statements, MethodDeclaration-body, ),
"
833,if ((((int)z) & 1) == 1) {,"if ((((int)z) & 1) == 1) {
  r+=s;
  if (r >= n)   r-=n;
}
",2,2,4,,"PrimitiveType(CastExpression-type, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
834,if ((x * x + y * y) <= 1.0) {,"if ((x * x + y * y) <= 1.0) {
  in++;
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
835,if(ia3++>1000) break;,"if (ia3++ > 1000) break;
",2,2,3,,"SimpleName(PostfixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
836,"if (Version.parseVersion(System.getProperty(""java.specification.version"")).getMajor() > 1){","if (Version.parseVersion(System.getProperty(""java.specification.version"")).getMajor() > 1) {
  if (java.nio.file.Files.exists(java.nio.file.FileSystems.getFileSystem(URI.create(""jrt:/"")).getPath(""modules"",""java.se.ee""))) {
    composite.add(vmOption(""--add-modules=java.se.ee""));
  }
  composite.add(vmOption(""--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.lang=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.lang.invoke=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.io=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.net=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.nio=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.jar=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.regex=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/java.util.zip=ALL-UNNAMED""));
  composite.add(vmOption(""--add-opens=java.base/sun.nio.ch=ALL-UNNAMED""));
}
",2,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
837,if (DNS.size() > 1) this.dns2 = DNS.get(1);,"if (DNS.size() > 1) this.dns2=DNS.get(1);
",2,2,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
838,"if(data[h]<10) buff.append(""0"");","if (data[h] < 10) buff.append(""0"");
",2,2,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
839,"{if ("""" != null) return PathFactory.pathZeroOrOne(p) ;}","if ("""" != null) return PathFactory.pathZeroOrOne(p);
",2,2,5,,"StringLiteral(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
840,else if (b[k-1] != 's') k--;,"if (b[k - 1] != 's') k--;
",2,3,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
841,"if (""of times"".equals(v[1]) || ""of"".equals(v[1]) || ""times"".equals(v[1])","if (""of times"".equals(v[1]) || ""of"".equals(v[1]) || ""times"".equals(v[1])|| ""the"".equals(v[1])) {
  frequency=2;
}
",2,2,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
842,"if (copy[i]=='\'') copy[i] ='""';","if (copy[i] == '\'') copy[i]='""';
",2,2,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
843,"if( i != '!' ) throw new WrongDTDException( ""Unexpected char '"" + (char)i + ""' after '<'"" );","if (i != '!') throw new WrongDTDException(""Unexpected char '"" + (char)i + ""' after '<'"");
",2,8,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
844,if (name.length () < 1) return ((File) node).getAbsolutePath ();,"if (name.length() < 1) return ((File)node).getAbsolutePath();
",2,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
845,if (s.charAt(i) == '>') openings++;,"if (s.charAt(i) == '>') openings++;
 else if (s.charAt(i) == '<') openings--;
 else if (openings == 0) break;
",2,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
846,"if(byUser == null || """".equals(byUser)) return true;","if (byUser == null || """".equals(byUser)) return true;
",2,3,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
847,if (signature.charAt(s[0]) == ')') {,"if (signature.charAt(s[0]) == ')') {
  break;
}
",2,2,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
848,"if (!child.isVirtual() && child.getName().equalsIgnoreCase(newName) && ""java"".equalsIgnoreCase(child.getExt())) {","if (!child.isVirtual() && child.getName().equalsIgnoreCase(newName) && ""java"".equalsIgnoreCase(child.getExt())) {
  result=createProblem(result,true,NbBundle.getMessage(ExtractInterfaceRefactoringPlugin.class,""ERR_ClassClash"",newName,pkgName));
  return result;
}
",2,2,10,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
849,"if (o instanceof SerParser.NameValue && ""value"".equals(((SerParser.NameValue)o).name.name)) {","if (o instanceof SerParser.NameValue && ""value"".equals(((SerParser.NameValue)o).name.name)) {
  addProperty(propertyName,((SerParser.NameValue)o).value.toString());
}
",2,2,8,,"SimpleName(InstanceofExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, FieldAccess-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
850,"if (r > 255) r = f.getRed() - 70; else r = Math.min(r, 70);","if (r > 255) r=f.getRed() - 70;
 else r=Math.min(r,70);
",2,2,11,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
NumberLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-elseStatement, ),
"
851,"if (Integer.parseInt(runtimeJavaVersion.substring(0, runtimeJavaVersion.indexOf('.'))) >= 11) {","if (Integer.parseInt(runtimeJavaVersion.substring(0,runtimeJavaVersion.indexOf('.'))) >= 11) {
  final File libJava11Dir=new File(nifi_home + ""/lib/java11"");
  if (libJava11Dir.exists()) {
    for (    final File file : Objects.requireNonNull(libJava11Dir.listFiles((dir,filename) -> filename.toLowerCase().endsWith("".jar"")))) {
      cpURLs.add(file.toURI().toURL());
    }
  }
}
",2,2,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
852,"if (""FixedAsset"".equals(currentValue.getEntityName()) && currentValue.getString(""fixedAssetId"").equals(workEffort.getString(""fixedAssetId""))) {","if (""FixedAsset"".equals(currentValue.getEntityName()) && currentValue.getString(""fixedAssetId"").equals(workEffort.getString(""fixedAssetId""))) {
  fixedAsset=currentValue;
  break;
}
",2,4,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
853,"if (webAppInfo == null || appInfo == null || ""false"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.jaxrs.on"", ""true""))) {","if (webAppInfo == null || appInfo == null || ""false"".equalsIgnoreCase(appInfo.properties.getProperty(""openejb.jaxrs.on"",""true""))) {
  return;
}
",2,3,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
854,if (synonyms.length == 1) f1++;,"if (synonyms.length == 1) f1++;
",2,2,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
855,"if (i % 6 != 1) d.setOptionalString(""Good Will Hunting "" + i);","if (i % 6 != 1) d.setOptionalString(""Good Will Hunting "" + i);
",2,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
856,"if (count < 10) assertEquals(new Integer(count++), to.get(0));","if (count < 10) assertEquals(new Integer(count++),to.get(0));
 else assertNull(to.get(0));
",2,2,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(PostfixExpression-operand, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
857,"if (count < 3) assertEquals(1, to.get(0));","if (count < 3) assertEquals(1,to.get(0));
 else if (count < 5) assertEquals(2,to.get(0));
 else if (count < 8) assertEquals(3,to.get(0));
 else assertEquals(4,to.get(0));
",2,2,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
858,"if ( t.get(1).toString() != """" ) {","if (t.get(1).toString() != """") {
  Integer.parseInt(t.get(1).toString());
}
",2,2,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
859,"if (!""foo"".equals(OAuthUtil.getParameter(info.message, ""oauth_magic""))) {","if (!""foo"".equals(OAuthUtil.getParameter(info.message,""oauth_magic""))) {
  throw new RuntimeException(""no oauth_trusted=foo parameter"");
}
",2,2,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
860,if (index <  3) {key=DEGREES;    value=45 ; start= 0; limit= 3;},"if (index < 3) {
  key=DEGREES;
  value=45;
  start=0;
  limit=3;
}
 else if (index < 6) {
  key=MINUTES;
  value=30;
  start=3;
  limit=6;
}
 else if (index < 11) {
  key=SECONDS;
  value=15f;
  start=6;
  limit=11;
}
 else {
  key=HEMISPHERE;
  value='N';
  start=11;
  limit=12;
}
",2,2,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
861,if (x.nextClean() == ']') { return; },"if (x.nextClean() == ']') {
  return;
}
",2,2,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ReturnStatement(Block-statements, IfStatement-thenStatement, ),
"
862,"if (Object.class == method.getDeclaringClass() && ""toString"".equals(method.getName())) {","if (Object.class == method.getDeclaringClass() && ""toString"".equals(method.getName())) {
  return ""Resettable["" + getDelegate().toString() + ""]"";
}
",2,4,7,,"SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
863,"if (""-metadata"".startsWith(buffer) && !TShellCompletor.allArgs.contains(""-metadata"")) {","if (""-metadata"".startsWith(buffer) && !TShellCompletor.allArgs.contains(""-metadata"")) {
  candidates.add(""-metadata"" + (matches == 1 ? "" "" : """"));
}
",2,2,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
864,else if (clauses.get(0).m_paths.size() > 1),"if (clauses.get(0).m_paths.size() > 1) {
  throw new BundleException(""Cannot have multiple symbolic names: "" + headerMap.get(Constants.BUNDLE_SYMBOLICNAME));
}
",3,19,6,,"SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
865,"if (""toString"".equals(method.getName()) && (args == null || args.length == 0)) {","if (""toString"".equals(method.getName()) && (args == null || args.length == 0)) {
  return NullProxy.this.toString();
}
 else {
  return returns.get(method.getReturnType());
}
",3,70,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
866,"if (!""_NA_"".equals(productPromoProduct.getString(""productPromoCondSeqId"")) || ""_NA_"".equals(productPromoProduct.getString(""productPromoRuleId""))) {","if (!""_NA_"".equals(productPromoProduct.getString(""productPromoCondSeqId"")) || ""_NA_"".equals(productPromoProduct.getString(""productPromoRuleId""))) {
  productPromoProductsCond.add(productPromoProduct);
}
",3,51,10,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
867,"if (entityCoveredText.length()<1) throw new RuntimeException(""Error parsing entityCoveredText from line '"" + lineWithAnnotation + ""'"");","if (entityCoveredText.length() < 1) throw new RuntimeException(""Error parsing entityCoveredText from line '"" + lineWithAnnotation + ""'"");
",3,67,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
868,if ((ch = this.read()) == 'C') valid++;,"if ((ch=this.read()) == 'C') valid++;
 else throw new SAXException(""Unrecognized file format (."" + valid + "",""+ ch+ "")"");
",3,37,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
869,if (gby.getNestedPlans().get(0).getRoots().size() != 1) {,"if (gby.getNestedPlans().get(0).getRoots().size() != 1) {
  return false;
}
",3,35,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
870,if (dateString[start + offset + 4] == '-') {,"if (dateString[start + offset + 4] == '-') {
  isExtendedForm=true;
}
",3,3,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-extendedOperands, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
871,"if (""up"".equals(pd.getName()) && com.datatorrent.api.Context.class.isAssignableFrom(pd.getPropertyType())) {","if (""up"".equals(pd.getName()) && com.datatorrent.api.Context.class.isAssignableFrom(pd.getPropertyType())) {
  continue;
}
",3,49,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
872,"if (name==null || name.startsWith(""","if (name == null || name.startsWith(""//"") || symbolicName == null || ""classpath"".equals(symbolicName) || ""http"".equals(symbolicName) || ""https"".equals(symbolicName) || ""file"".equals(symbolicName)) {
  if (log.isTraceEnabled()) {
    log.trace(""Request for bundle '"" + symbolicName + ""' ""+ (Strings.isNonBlank(version) ? ""("" + version + "") "" : """")+ (originalSymbolicName.equals(symbolicName) ? """" : "". Original symbolic name: "" + originalSymbolicName)+ ""was ignored as no framework available; and failed to find '""+ name+ ""' in plain old classpath"");
  }
}
 else {
  log.warn(""Request for bundle '"" + symbolicName + ""' ""+ (Strings.isNonBlank(version) ? ""("" + version + "") "" : """")+ (originalSymbolicName.equals(symbolicName) ? """" : "". Original symbolic name: "" + originalSymbolicName)+ ""was ignored as no framework available; and failed to find '""+ name+ ""' in plain old classpath"");
}
",3,20,19,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
873,if ( args[loop].charAt(0) != '-' ) continue ;,"if (args[loop].charAt(0) != '-') continue;
",3,12,6,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
874,if (++counter[0] > 8) {,"if (++counter[0] > 8) {
  return false;
}
",3,3,3,,"SimpleName(ArrayAccess-array, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
875,"if (""/apps"".equals(root) || root.startsWith(""/apps/"") || ""/libs"".equals(root) || root.startsWith(""/libs/"")) {","if (""/apps"".equals(root) || root.startsWith(""/apps/"") || ""/libs"".equals(root)|| root.startsWith(""/libs/"")) {
  hasApps=true;
}
 else {
  hasOther=true;
}
",3,6,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
876,"if (!multiValue && !valuePlaceholder && !lookup && ""boolean"".equals(row.getType())) {","if (!multiValue && !valuePlaceholder && !lookup&& ""boolean"".equals(row.getType())) {
  boolean bool=""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);
  if (!bool) {
    result.addInvalidBoolean(name,value);
  }
}
",3,8,7,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
877,if (this.redirectURI.charAt(pos+1) == '/') {,"if (this.redirectURI.charAt(pos + 1) == '/') {
  this.redirectURI=this.redirectURI.substring(pos + 2).trim();
  this.redirectURI=request.getContextPath() + ""/"" + this.redirectURI;
}
 else {
  this.redirectURI=this.redirectURI.substring(pos + 1).trim();
}
",3,41,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
878,"|| ""headerName"".equals(option.getName()) || ""regex"".equals(option.getName()) || ""xml"".equals(option.getName()) || ""includeTokens"".equals(option.getName())","if (""token"".equals(option.getName()) || ""endToken"".equals(option.getName()) || ""inheritNamespaceTagName"".equals(option.getName())|| ""headerName"".equals(option.getName())|| ""regex"".equals(option.getName())|| ""xml"".equals(option.getName())|| ""includeTokens"".equals(option.getName())|| ""group"".equals(option.getName())|| ""skipFirst"".equals(option.getName())) {
  continue;
}
",3,3,16,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
879,if ((buffer[offset + length - 1] & 0x0F) == 0x0D) {,"if ((buffer[offset + length - 1] & 0x0F) == 0x0D) {
  signum=-1;
}
 else {
  signum=1;
}
",3,4,6,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
880,"if (closeButtonColor != """") close.setTextColor(android.graphics.Color.parseColor(closeButtonColor));","if (closeButtonColor != """") close.setTextColor(android.graphics.Color.parseColor(closeButtonColor));
",3,3,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
881,"if (""wresult"".equals(result.getAttributeNS(null, ""name""))","if (""wresult"".equals(result.getAttributeNS(null,""name"")) || ""wa"".equals(result.getAttributeNS(null,""name"")) || ""wctx"".equals(result.getAttributeNS(null,""name""))) {
  String value=result.getAttributeNS(null,""value"");
  request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null,""name""),value));
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
882,if (sink.collected[mySource].get() != 0L) {,"if (sink.collected[mySource].get() != 0L) {
  results[mySource]=""Someone else collected my metric!"";
  return;
}
",3,8,4,,"QualifiedName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
883,if (gridX > 1)  {gridX = 1; skipX = true;},"if (gridX > 1) {
  gridX=1;
  skipX=true;
}
",3,6,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
BooleanLiteral(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
884,"if (rnd.nextInt(2) == 1) n = ""main2"";","if (rnd.nextInt(2) == 1) n=""main2"";
",3,3,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
885,"if ( Strings.byteAt( filterBytes, pos.start ) == ':' )","if (Strings.byteAt(filterBytes,pos.start) == ':') {
  pos.start++;
  if (Strings.byteAt(filterBytes,pos.start) == '=') {
    pos.start++;
    node.setValue(parseAssertionValue(schemaManager,filterBytes,pos));
    return node;
  }
 else {
    String matchingRuleId=AttributeUtils.parseAttribute(filterBytes,pos,false,relaxed);
    node.setMatchingRuleId(matchingRuleId);
    if (Strings.isCharASCII(filterBytes,pos.start,':') && Strings.isCharASCII(filterBytes,pos.start + 1,'=')) {
      pos.start+=2;
      node.setValue(parseAssertionValue(schemaManager,filterBytes,pos));
      return node;
    }
 else {
      throw new ParseException(I18n.err(I18n.ERR_13305_ASSERTION_VALUE_EXPECTED),pos.start);
    }
  }
}
 else {
  throw new ParseException(I18n.err(I18n.ERR_13306_MR_OR_ASSERTION_VALUE_EXPECTED),pos.start);
}
",3,7,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
886,"if (""ITEM_REJECTED"".equals(item.getString(""statusId"")) || ""ITEM_CANCELLED"".equals(item.getString(""statusId""))) continue;","if (""ITEM_REJECTED"".equals(item.getString(""statusId"")) || ""ITEM_CANCELLED"".equals(item.getString(""statusId""))) continue;
",3,37,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
887,else if (col == 1) return related[row];,"if (col == 1) return related[row];
 else if (col == 2) return types[row];
 else if (col == 3) return values[row];
",3,3,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, ReturnStatement-expression, IfStatement-thenStatement, ),
"
888,"if (args == null || args.length == 0 || ""--help"".equalsIgnoreCase(args[0]) || ""-h"".equalsIgnoreCase(args[0]))","if (args == null || args.length == 0 || ""--help"".equalsIgnoreCase(args[0]) || ""-h"".equalsIgnoreCase(args[0])) printHelp();
",3,14,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
889,"if (Math.max(this.bitLength, augend.bitLength) + 1 < 64) {","if (Math.max(this.bitLength,augend.bitLength) + 1 < 64) {
  return valueOf(this.smallValue + augend.smallValue,this.scale);
}
",3,4,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
890,if (line.charAt(++start) != ' '),"if (line.charAt(++start) != ' ') {
  if (line.charAt(++start) != ' ') {
    if (line.charAt(++start) != ' ') {
      start=0;
    }
  }
}
",3,4,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PrefixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
891,if (c.getId().getContainerId() == 1) continue;,"if (c.getId().getContainerId() == 1) continue;
",3,3,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
892,"if (""-dumpConfiguration"".equals(argv[0]) && argv.length == 1) {","if (""-dumpConfiguration"".equals(argv[0]) && argv.length == 1) {
  dumpConfiguration(new PrintWriter(System.out));
  System.out.println();
  Configuration conf=new Configuration();
  QueueManager.dumpConfiguration(new PrintWriter(System.out),conf);
}
 else {
  System.out.println(""usage: JobTracker [-dumpConfiguration]"");
  System.exit(-1);
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
893,if (++calls > 1) return null;,"if (++calls > 1) return null;
",3,3,3,,"SimpleName(PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
894,if (((char) next.getType()) == '+') {,"if (((char)next.getType()) == '+') {
  cur.setNext(((LeafQuantifierSet)next).getInnerSet());
}
 else {
  cur.setNext(next);
}
",3,3,4,,"PrimitiveType(CastExpression-type, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
895,"if (!""tez"".equals(HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_EXECUTION_ENGINE))) {","if (!""tez"".equals(HiveConf.getVar(conf,HiveConf.ConfVars.HIVE_EXECUTION_ENGINE))) {
  return;
}
",3,4,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
896,if ((b & 0x80) != 0x80) break;,"if ((b & 0x80) != 0x80) break;
",3,3,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
897,"{if ("""" != null) return createLiteral(lex, lang, uri, token.beginLine, token.beginColumn) ;}","if ("""" != null) return createLiteral(lex,lang,uri,token.beginLine,token.beginColumn);
",3,84,8,,"StringLiteral(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
898,"{if ("""" != null) return langStringLiteral(1, t.image, t.beginLine, t.beginColumn);}","if ("""" != null) return langStringLiteral(1,t.image,t.beginLine,t.beginColumn);
",3,4,7,,"StringLiteral(InfixExpression-leftOperand, IfStatement-expression, Block-statements, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
899,"if (""file"".equals(url.getProtocol()) && new File(url.toURI()).isDirectory()) {","if (""file"".equals(url.getProtocol()) && new File(url.toURI()).isDirectory()) {
  System.err.println(""Location \"""" + urlResolved + ""\"" is not accessible"");
  return result;
}
",3,3,8,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
900,"if(""PROMOTION_ADJUSTMENT"".equals(adj.getString(""orderAdjustmentTypeId"")) && adj.get(""productPromoId"") != null) {","if (""PROMOTION_ADJUSTMENT"".equals(adj.getString(""orderAdjustmentTypeId"")) && adj.get(""productPromoId"") != null) {
  List<EntityExpr> exprs=UtilMisc.toList(EntityCondition.makeCondition(""orderId"",EntityOperator.EQUALS,orderItem.getString(""orderId"")),EntityCondition.makeCondition(""orderItemSeqId"",EntityOperator.EQUALS,orderItem.getString(""orderItemSeqId"")),EntityCondition.makeCondition(""orderAdjustmentTypeId"",EntityOperator.EQUALS,""VAT_TAX""),EntityCondition.makeCondition(""amountAlreadyIncluded"",EntityOperator.LESS_THAN,BigDecimal.ZERO));
  EntityCondition andCondition=EntityCondition.makeCondition(exprs,EntityOperator.AND);
  GenericValue orderAdjustment=EntityUtil.getFirst(delegator.findList(""OrderAdjustment"",andCondition,null,null,null,false));
  if (UtilValidate.isNotEmpty(orderAdjustment)) {
    amount=adj.getBigDecimal(""amount"").subtract(orderAdjustment.getBigDecimal(""amountAlreadyIncluded"")).setScale(100,ROUNDING);
  }
 else {
    amount=adj.getBigDecimal(""amount"");
  }
}
 else {
  if (isTaxIncludedInPrice) {
    BigDecimal priceWithTax=originalOrderItem.getBigDecimal(""unitPrice"");
    amount=priceWithTax.subtract(billingAmount);
    amount=amount.multiply(billingQuantity);
    BigDecimal otherInvoiceTaxAmount=BigDecimal.ZERO;
    GenericValue orderAdjBilling=EntityUtil.getFirst(delegator.findByAnd(""OrderAdjustmentBilling"",UtilMisc.toMap(""orderAdjustmentId"",adj.getString(""orderAdjustmentId"")),null,false));
    if (UtilValidate.isNotEmpty(orderAdjBilling)) {
      List<GenericValue> invoiceItems=delegator.findByAnd(""InvoiceItem"",UtilMisc.toMap(""invoiceId"",orderAdjBilling.getString(""invoiceId""),""invoiceItemTypeId"",""ITM_SALES_TAX"",""productId"",originalOrderItem.getString(""productId"")),null,isTaxIncludedInPrice);
      for (      GenericValue invoiceItem : invoiceItems) {
        otherInvoiceTaxAmount=otherInvoiceTaxAmount.add(invoiceItem.getBigDecimal(""amount""));
      }
      if (otherInvoiceTaxAmount.compareTo(BigDecimal.ZERO) > 0) {
        BigDecimal remainingAmount=adj.getBigDecimal(""amountAlreadyIncluded"").subtract(otherInvoiceTaxAmount);
        amount=amount.min(remainingAmount);
      }
    }
    amount=amount.min(adj.getBigDecimal(""amountAlreadyIncluded"")).setScale(100,ROUNDING);
  }
 else {
    amount=adj.getBigDecimal(""amount"").divide(originalOrderItemQuantity,100,ROUNDING);
    amount=amount.multiply(billingQuantity);
  }
}
",3,12,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
901,"descs[0].equals(desc) && names[0].equals(resRefName) && ""javax.sql.DataSource"".equals(types[0])) {","if (descs.length > 0 && names.length > 0 && types.length > 0 && descs[0].equals(desc) && names[0].equals(resRefName) && ""javax.sql.DataSource"".equals(types[0])) {
  beanNames.add(bean.getChildBean(""ejb-name"")[0].getText());
  break;
}
",3,11,12,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ),
"
902,"if (doc.getText(start, 1).charAt(0) != ' ') {","if (doc.getText(start,1).charAt(0) != ' ') {
  break;
}
",3,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
903,if (chars[i] == '=') break;,"if (chars[i] == '=') break;
",3,3,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
904,"if (rv.length() > 4) rv = rv.substring(rv.length() - 4, rv.length());","if (rv.length() > 4) rv=rv.substring(rv.length() - 4,rv.length());
",3,8,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
905,"} else if (""langtools"".equals(ShortcutUtils.getDefault().inferLegacyRepository(prj)) &&","if (""langtools"".equals(ShortcutUtils.getDefault().inferLegacyRepository(prj)) && ShortcutUtils.getDefault().shouldUseCustomTest(repo.getNameExt(),FileUtil.getRelativePath(repo,testFile))) {
  buildDir=new File(FileUtil.toFile(prj.getProjectDirectory()),""../../build/langtools"");
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
906,"if (""Y"".equals(checkIncludeVat) && productStore != null && ""Y"".equals(productStore.getString(""showPricesWithVatTax""))) {","if (""Y"".equals(checkIncludeVat) && productStore != null && ""Y"".equals(productStore.getString(""showPricesWithVatTax""))) {
  Map<String,Object> calcTaxForDisplayContext=UtilMisc.toMap(""productStoreId"",productStore.get(""productStoreId""),""productId"",productId,""quantity"",quantity,""basePrice"",(BigDecimal)result.get(""price""));
  if (UtilValidate.isNotEmpty(partyId)) {
    calcTaxForDisplayContext.put(""billToPartyId"",partyId);
  }
  try {
    Map<String,Object> calcTaxForDisplayResult=dispatcher.runSync(""calcTaxForDisplay"",calcTaxForDisplayContext);
    if (ServiceUtil.isError(calcTaxForDisplayResult)) {
      return ServiceUtil.returnError(UtilProperties.getMessage(resource,""ProductPriceCannotCalculateVatTax"",locale),null,null,calcTaxForDisplayResult);
    }
    result.put(""price"",calcTaxForDisplayResult.get(""priceWithTax""));
    BigDecimal taxPercentage=(BigDecimal)calcTaxForDisplayResult.get(""taxPercentage"");
    BigDecimal taxMultiplier=ONE_BASE.add(taxPercentage.divide(PERCENT_SCALE,taxCalcScale));
    if (result.get(""listPrice"") != null) {
      result.put(""listPrice"",((BigDecimal)result.get(""listPrice"")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
    }
    if (result.get(""defaultPrice"") != null) {
      result.put(""defaultPrice"",((BigDecimal)result.get(""defaultPrice"")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
    }
    if (result.get(""averageCost"") != null) {
      result.put(""averageCost"",((BigDecimal)result.get(""averageCost"")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
    }
    if (result.get(""promoPrice"") != null) {
      result.put(""promoPrice"",((BigDecimal)result.get(""promoPrice"")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
    }
    if (result.get(""competitivePrice"") != null) {
      result.put(""competitivePrice"",((BigDecimal)result.get(""competitivePrice"")).multiply(taxMultiplier).setScale(taxFinalScale,taxRounding));
    }
  }
 catch (  GenericServiceException e) {
    Debug.logError(e,""Error calculating VAT tax (with calcTaxForDisplay service): "" + e.toString(),module);
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,""ProductPriceCannotCalculateVatTax"",locale));
  }
}
",3,3,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
907,"if (""TASK"".equals(workEffortTypeId) || (typeValue != null && ""TASK"".equals(typeValue.get(""parentTypeId"")))) {","if (""TASK"".equals(workEffortTypeId) || (typeValue != null && ""TASK"".equals(typeValue.get(""parentTypeId"")))) {
  isTask=true;
  resultList=components.getComponents(""VTODO"");
}
 else if (""EVENT"".equals(workEffortTypeId) || (typeValue != null && ""EVENT"".equals(typeValue.get(""parentTypeId"")))) {
  resultList=components.getComponents(""VEVENT"");
}
 else {
  return null;
}
",3,3,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
908,"if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {","if (""javax.ws.rs.Application"".equals(pvi.name) || Application.class.getName().equals(pvi.name)) {
  skip=true;
}
",3,4,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
909,if (i % 9 != 1) d.getOptionalMessageBuilder().setSomeId(1984 * i);,"if (i % 9 != 1) d.getOptionalMessageBuilder().setSomeId(1984 * i);
",3,3,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
910,if (b[off + len - 1] == '\r'),"if (b[off + len - 1] == '\r') {
  hasCR=true;
  --len;
}
 else if (b[off + len - 1] == '\n') {
  hasLF=true;
  --len;
  if (len > 0 && b[off + len - 1] == '\r') {
    hasCR=true;
    --len;
  }
}
",3,3,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
911,"if (!""org.apache.struts2.jasper.runtime"".equalsIgnoreCase(name.substring(0,dot))){","if (!""org.apache.struts2.jasper.runtime"".equalsIgnoreCase(name.substring(0,dot))) {
  securityManager.checkPackageAccess(name.substring(0,dot));
}
",3,3,6,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
912,"if (!this.isXhtml() && ""true"".equals(htmlComment)) {","if (!this.isXhtml() && ""true"".equals(htmlComment)) {
  sb.append(htmlBeginComment);
}
",3,3,5,,"ThisExpression(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
913,"if(dummy_coding_maps != "" "") cell = new CellIndex(3,3);","if (dummy_coding_maps != "" "") cell=new CellIndex(3,3);
 else cell=new CellIndex(3,2);
",3,3,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
914,if(X[i][j] < 0.2) X[i][j] = 1;,"if (X[i][j] < 0.2) X[i][j]=1;
 else if (X[i][j] < 0.4) X[i][j]=2;
 else if (X[i][j] < 0.6) X[i][j]=3;
 else if (X[i][j] < 0.8) X[i][j]=4;
 else X[i][j]=5;
",3,3,8,,"SimpleName(ArrayAccess-array, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
915,if ((systime - currentMillisLocal.get().longValue()) > 1000) {,"if ((systime - currentMillisLocal.get().longValue()) > 1000) {
  currentDateLocal.set(new Date(systime));
  currentMillisLocal.set(Long.valueOf(systime));
}
",3,3,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
916,if (recSize > 1) for (int i = 1; i < recSize; i++) readShort( is );,"if (recSize > 1) for (int i=1; i < recSize; i++) readShort(is);
",3,3,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
PrimitiveType(VariableDeclarationExpression-type, ForStatement-initializers, IfStatement-thenStatement, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, IfStatement-thenStatement, ),
NumberLiteral(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ForStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ForStatement-expression, IfStatement-thenStatement, ),
SimpleName(PostfixExpression-operand, ForStatement-updaters, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ForStatement-body, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ForStatement-body, IfStatement-thenStatement, ),
"
917,"if (productStore != null && productStore.getString(""storeCreditAccountEnumId"") != null && ""BILLING_ACCOUNT"".equals(productStore.getString(""storeCreditAccountEnumId""))) {","if (productStore != null && productStore.getString(""storeCreditAccountEnumId"") != null && ""BILLING_ACCOUNT"".equals(productStore.getString(""storeCreditAccountEnumId""))) {
  if (UtilValidate.isNotEmpty(billingAccounts)) {
    billingAccountId=EntityUtil.getFirst(billingAccounts).getString(""billingAccountId"");
  }
 else {
    Map<String,Object> results=createBillingAccountFromReturn(returnHeader,returnItems,dctx,context);
    if (ServiceUtil.isError(results)) {
      Debug.logError(""Error creating BillingAccount: "" + results.get(ModelService.ERROR_MESSAGE),module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,""OrderErrorWithCreateBillingAccount"",locale) + results.get(ModelService.ERROR_MESSAGE));
    }
    billingAccountId=(String)results.get(""billingAccountId"");
    if (billingAccountId == null) {
      Debug.logError(""No available billing account, none was created"",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,""OrderNoAvailableBillingAccount"",locale));
    }
  }
}
 else {
  GenericValue finAccount=null;
  try {
    finAccount=EntityQuery.use(delegator).from(""FinAccountAndRole"").where(""partyId"",fromPartyId,""finAccountTypeId"",""STORE_CREDIT_ACCT"",""roleTypeId"",""OWNER"",""statusId"",""FNACT_ACTIVE"").filterByDate().orderBy(""-fromDate"").queryFirst();
  }
 catch (  GenericEntityException e) {
    return ServiceUtil.returnError(e.getMessage());
  }
  if (finAccount != null) {
    finAccountId=finAccount.getString(""finAccountId"");
  }
  if (finAccountId == null) {
    Map<String,Object> createAccountCtx=new HashMap<String,Object>();
    createAccountCtx.put(""ownerPartyId"",fromPartyId);
    createAccountCtx.put(""finAccountTypeId"",""STORE_CREDIT_ACCT"");
    createAccountCtx.put(""productStoreId"",productStore.getString(""productStoreId""));
    createAccountCtx.put(""currencyUomId"",returnHeader.getString(""currencyUomId""));
    createAccountCtx.put(""finAccountName"",""Store Credit Account for party ["" + fromPartyId + ""]"");
    createAccountCtx.put(""userLogin"",userLogin);
    Map<String,Object> createAccountResult=null;
    try {
      createAccountResult=dispatcher.runSync(""createFinAccountForStore"",createAccountCtx);
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,""Problems running the createFinAccountForStore service"",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,""OrderProblemsCreatingFinAccountForStore"",locale));
    }
    if (ServiceUtil.isError(createAccountResult)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(createAccountResult));
    }
    finAccountId=(String)createAccountResult.get(""finAccountId"");
    if (finAccountId == null) {
      Debug.logError(""No available fin account, none was created"",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,""OrderNoAvailableFinAccount"",locale));
    }
    Map<String,Object> finAccountRoleResult=null;
    try {
      finAccountRoleResult=dispatcher.runSync(""createFinAccountRole"",UtilMisc.toMap(""finAccountId"",finAccountId,""partyId"",fromPartyId,""roleTypeId"",""OWNER"",""userLogin"",userLogin));
    }
 catch (    GenericServiceException e) {
      Debug.logError(e,""Problem running the createFinAccountRole service"",module);
      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,""OrderProblemCreatingFinAccountRoleRecord"",locale));
    }
    if (ServiceUtil.isError(finAccountRoleResult)) {
      return ServiceUtil.returnError(ServiceUtil.getErrorMessage(finAccountRoleResult));
    }
  }
}
",4,25,11,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
918,"if (""junit"".equals(a.getGroupId()) && (""junit"".equals(a.getArtifactId()) || ""junit-dep"".equals(a.getArtifactId()))) {","if (""junit"".equals(a.getGroupId()) && (""junit"".equals(a.getArtifactId()) || ""junit-dep"".equals(a.getArtifactId()))) {
  String version=a.getVersion();
  if (version != null && new ComparableVersion(version).compareTo(new ComparableVersion(""4.8"")) >= 0) {
    return ""JUNIT4"";
  }
  if (version != null && new ComparableVersion(version).compareTo(new ComparableVersion(""3.8"")) >= 0) {
    return ""JUNIT3"";
  }
}
",4,16,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
919,if (s.getStageId() == 1) { stage2 = s; },"if (s.getStageId() == 1) {
  stage2=s;
}
",4,12,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
SimpleName(Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
920,"if (""CM"".equals(props.get(""string.value"")) && new Double(123).equals(props.get(""double.value"")) &&","if (""CM"".equals(props.get(""string.value"")) && new Double(123).equals(props.get(""double.value"")) && ""string2"".equals(props.get(""string.value2""))&& new Double(456).equals(props.get(""double.value2""))) {
  m_ensure.step(1);
  Hashtable<String,Object> newprops=new Hashtable<>();
  newprops.put(""string.value"",""CM modified"");
  m_conf.update(newprops);
}
",4,17,11,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
921,"if (!"""".equals(schemaNames[i].trim())) {","if (!"""".equals(schemaNames[i].trim())) {
  InputStream schemaStream=this.getClass().getResourceAsStream(SCHEMA_PATH + schemaNames[i]);
  Document doc=documentBuilder.parse(schemaStream);
  additionalSchemaElements.add(doc.getDocumentElement());
}
",4,15,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
922,if (datanodes.length <= 1) break;,"if (datanodes.length <= 1) break;
",4,4,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BreakStatement(IfStatement-thenStatement, ),
"
923,if (sArray[i] != '\\') escapeCount = 0;,"if (sArray[i] != '\\') escapeCount=0;
",4,4,5,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
924,if (c[i]=='\\') return false;,"if (c[i] == '\\') return false;
",4,4,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
925,if ((entry.getType() & ElementDeclarations.Entry.DATA) == 1),"if ((entry.getType() & ElementDeclarations.Entry.DATA) == 1) list.add(DATA_HANDLING);
",4,4,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
926,"if (""magic-mask.xml"".equals(s) == false) fail = ""magic-mask rule failure: "" + fo + "" => "" + s;","if (""magic-mask.xml"".equals(s) == false) fail=""magic-mask rule failure: "" + fo + "" => ""+ s;
",4,4,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
BooleanLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
927,if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {,"if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {
  fCurrentEntity.position--;
}
",4,4,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(PostfixExpression-operand, ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
928,if ((systime - struct.currentDate.getTime()) > 1000) {,"if ((systime - struct.currentDate.getTime()) > 1000) {
  struct.currentDate.setTime(systime);
  struct.currentDateString=null;
}
",4,4,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
929,if ( p[p.length - 1].charAt( artifactIdVersion.length() ) == '-' ),"if (p[p.length - 1].charAt(artifactIdVersion.length()) == '-') {
  classifier=p[p.length - 1].substring(artifactIdVersion.length() + 1,p[p.length - 1].lastIndexOf('.'));
}
 else {
  classifier=null;
}
",5,178,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
930,"if (project != null && ""only"".equals(project.getProperty(MagicNames.BUILD_SYSCLASSPATH))) {","if (project != null && ""only"".equals(project.getProperty(MagicNames.BUILD_SYSCLASSPATH))) {
  loader=this.getClass().getClassLoader();
}
",5,9,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
931,"if (""virtualdisk"".equalsIgnoreCase(info.getGroupInfo().getKey()) && ""average"".equalsIgnoreCase(info.getRollupType().value())) {","if (""virtualdisk"".equalsIgnoreCase(info.getGroupInfo().getKey()) && ""average"".equalsIgnoreCase(info.getRollupType().value())) {
  if (""numberReadAveraged"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskReadIOPerfCounterInfo=info;
  }
  if (""numberWriteAveraged"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskWriteIOPerfCounterInfo=info;
  }
  if (""read"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskReadKbsPerfCounterInfo=info;
  }
  if (""write"".equalsIgnoreCase(info.getNameInfo().getKey())) {
    diskWriteKbsPerfCounterInfo=info;
  }
}
",5,8,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
932,"if (s.length()>255) s = s.substring(0, 252)+ ""..."";","if (s.length() > 255) s=s.substring(0,252) + ""..."";
",5,12,9,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
933,"|| ""wa"".equals(result.getAttributeNS(null, ""name""))","if (""wresult"".equals(result.getAttributeNS(null,""name"")) || ""wa"".equals(result.getAttributeNS(null,""name"")) || ""wctx"".equals(result.getAttributeNS(null,""name""))) {
  String value=result.getAttributeNS(null,""value"");
  request.getRequestParameters().add(new NameValuePair(result.getAttributeNS(null,""name""),value));
}
",5,5,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
934,if (w == 1) return u > 0? u: u + y;,"if (w == 1) return u > 0 ? u : u + y;
",5,5,7,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, ConditionalExpression-elseExpression, ReturnStatement-expression, IfStatement-thenStatement, ),
"
935,"if (s.length() > 65536) s = ""abc"" + i;","if (s.length() > 65536) s=""abc"" + i;
",5,5,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
936,"if ( ""txz"".equals( format ) || ""tgz"".equals( format ) || ""tbz2"".equals( format ) || format.startsWith( ""tar"" ) )","if (""txz"".equals(format) || ""tgz"".equals(format) || ""tbz2"".equals(format)|| format.startsWith(""tar"")) {
  archiver=createTarArchiver(format,TarLongFileMode.valueOf(configSource.getTarLongFileMode()));
}
 else if (""war"".equals(format)) {
  archiver=createWarArchiver();
}
 else {
  archiver=archiverManager.getArchiver(format);
}
",5,6,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
937,if ('{' == ca[i + 1]),"if ('{' == ca[i + 1]) {
  if (buff != null && buff.length() > 0) {
    if (text == null) {
      text=new ArrayList<>();
    }
    text.add(new ELText(buff.toString()));
    buff.setLength(0);
  }
  vlen=findVarLength(ca,i);
  if (ctx != null && fact != null) {
    ve=fact.createValueExpression(ctx,new String(ca,i,vlen),String.class);
    if (location != null) {
      ve=new ContextAwareTagValueExpression(location,""expression"",ve);
    }
    t=new ELCacheableTextVariable(ve);
  }
 else {
    ve=new LiteralValueExpression(new String(ca,i,vlen));
    if (location != null) {
      ve=new ContextAwareTagValueExpression(location,""expression"",ve);
    }
    t=new ELCacheableTextVariable(ve);
  }
  if (text == null) {
    text=new ArrayList<>();
  }
  text.add(t);
  i+=vlen;
  continue;
}
",5,5,4,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-rightOperand, IfStatement-expression, ),
"
938,if ((time /= duration / 2f) < 1f) {,"if ((time/=duration / 2f) < 1f) {
  return -change / 2f * ((float)Math.sqrt(1f - time * time) - 1f) + begin;
}
",5,5,4,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
939,if ('\'' == read) return next(this::inSingleQuotes);,"if ('\'' == read) return next(this::inSingleQuotes);
",5,5,5,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
ThisExpression(ExpressionMethodReference-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
940,else if (((a = out[s]) & 0xe0) == 0xc0) {,"if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  if ((b & 0xC0) != 0x80)   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  int c=buf[offset + count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80))   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",6,2409,5,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
941,if ('-' == args[i].charAt(0)) {,"if ('-' == args[i].charAt(0)) {
switch (args[i].charAt(1)) {
case '?':
    printUsage(null);
  System.exit(0);
break;
case 'h':
case 'H':
urlHost=args[++i];
break;
case 'p':
case 'P':
urlPort=args[++i];
break;
case 'f':
case 'F':
urlSuffix=args[++i];
break;
case 'm':
case 'M':
message=args[++i];
break;
case 's':
case 'S':
servtype=args[++i];
if ((!servtype.equalsIgnoreCase(""async"")) && (!servtype.equalsIgnoreCase(""echo"")) && (!servtype.equalsIgnoreCase(""ping""))) {
System.out.println(""ERROR: Attempt to invoke a service that is not supported"");
printUsage(null);
System.exit(0);
}
break;
case 't':
case 'T':
timeout=new Integer(args[++i]).intValue();
break;
case 'c':
case 'C':
count=new Integer(args[++i]).intValue();
break;
case 'w':
case 'W':
String parm=args[++i];
if (parm.equalsIgnoreCase(""y"")) {
wireasync=true;
}
 else {
wireasync=false;
}
break;
case '1':
soap12=false;
break;
case '2':
soap12=true;
break;
default :
printUsage(args[i]);
System.exit(0);
break;
}
}
",6,220,5,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
942,if ((out[s] = (char) buf[offset + count++]) < '\u0080'),"if ((out[s]=(char)buf[offset + count++]) < '\u0080') s++;
 else if (((a=out[s]) & 0xe0) == 0xc0) {
  if (count >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  if ((b & 0xC0) != 0x80)   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
}
 else if ((a & 0xf0) == 0xe0) {
  if (count + 1 >= utfSize)   throw new UTFDataFormatException();
  int b=buf[offset + count++];
  int c=buf[offset + count++];
  if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80))   throw new UTFDataFormatException();
  out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
}
 else {
  throw new UTFDataFormatException();
}
",6,37,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, InfixExpression-rightOperand, ArrayAccess-index, CastExpression-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
943,if ('+' == path0.charAt(path0.length() - 1)) {,"if ('+' == path0.charAt(path0.length() - 1)) {
  path0=path0.substring(0,path0.length() - 1);
}
",6,25,6,,"CharacterLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
944,"if (""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-"".indexOf(qualifier.charAt(i)) == -1) {","if (""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-"".indexOf(qualifier.charAt(i)) == -1) {
  throw new IllegalArgumentException(""invalid qualifier"");
}
",6,7,6,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
945,"if (""-h"".equals(args[i].toLowerCase())","if (""-h"".equals(args[i].toLowerCase()) || ""-help"".equals(args[i].toLowerCase())) {
  usage();
  return 0;
}
",6,6,5,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
"
946,"if (""logout"".equals(previousRequest) || ""/logout"".equals(previousRequest) || ""login"".equals(previousRequest) || ""/login"".equals(previousRequest) || ""checkLogin"".equals(previousRequest) || ""/checkLogin"".equals(previousRequest) || ""/checkLogin/login"".equals(previousRequest)) {","if (""logout"".equals(previousRequest) || ""/logout"".equals(previousRequest) || ""login"".equals(previousRequest)|| ""/login"".equals(previousRequest)|| ""checkLogin"".equals(previousRequest)|| ""/checkLogin"".equals(previousRequest)|| ""/checkLogin/login"".equals(previousRequest)) {
  Debug.logWarning(""Found special _PREVIOUS_REQUEST_ of ["" + previousRequest + ""], setting to null to avoid problems, not running request again"",module);
}
 else {
  if (Debug.infoOn())   Debug.logInfo(""[Doing Previous Request]: "" + previousRequest + showSessionId(request),module);
  Map<String,Object> previousParamMap=UtilGenerics.checkMap(request.getSession().getAttribute(""_PREVIOUS_PARAM_MAP_URL_""),String.class,Object.class);
  String queryString=UtilHttp.urlEncodeArgs(previousParamMap,false);
  String redirectTarget=previousRequest;
  if (UtilValidate.isNotEmpty(queryString)) {
    redirectTarget+=""?"" + queryString;
  }
  callRedirect(makeLink(request,response,redirectTarget),response,request,statusCodeString);
  return;
}
",6,13,21,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
947,if (columnIndex == 1) return DetailsPanel.class;,"if (columnIndex == 1) return DetailsPanel.class;
",6,6,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ReturnStatement-expression, IfStatement-thenStatement, ),
"
948,if (contentType.charAt(i++) != 'h') continue;,"if (contentType.charAt(i++) != 'h') continue;
",6,6,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(PostfixExpression-operand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
949,if (result[i].findCollections()[0].findMethods().length == 1) {,"if (result[i].findCollections()[0].findMethods().length == 1) {
  Assert.assertEquals(""GET"",result[i].findCollections()[0].findMethods()[0]);
  Assert.assertFalse(result[i].getAuthConstraint());
}
 else if (result[i].findCollections()[0].findOmittedMethods().length == 1) {
  Assert.assertEquals(""GET"",result[i].findCollections()[0].findOmittedMethods()[0]);
  Assert.assertTrue(result[i].getAuthConstraint());
  Assert.assertEquals(1,result[i].findAuthRoles().length);
  Assert.assertEquals(ROLE1,result[i].findAuthRoles()[0]);
}
 else {
  Assert.fail(""Unexpected number of methods defined"");
}
",7,367,7,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
950,if (sb.length() != 1) sb.append('|');,"if (sb.length() != 1) sb.append('|');
",7,51,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
CharacterLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
951,if (this.axisService.getEndpoints().size() > 1) {,"if (this.axisService.getEndpoints().size() > 1) {
  localPart=makeJavaClassName(axisService.getName() + axisService.getEndpointName());
}
 else {
  localPart=makeJavaClassName(axisService.getName());
}
",7,12,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
952,if (AccurateMath.abs(beta[0] - betar[0]) > 1.0e-8) {,"if (AccurateMath.abs(beta[0] - betar[0]) > 1.0e-8) {
  Assert.fail(""Parameters not correct after reorder (0,3)"");
}
",7,7,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
953,"if (""wretched"".equals(line.first()) && 19 == line.second()) {","if (""wretched"".equals(line.first()) && 19 == line.second()) {
  passed1=true;
}
",7,7,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
954,"} else if (!"""".equals(bindingStyle) && """".equals(style) && """".equals(previousOpStyle)) {","if (!"""".equals(bindingStyle) && """".equals(style) && """".equals(previousOpStyle)) {
  continue;
}
 else {
  return true;
}
",7,9,9,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
955,"if(""""==name)name=null;","if ("""" == name) name=null;
",7,7,4,,"StringLiteral(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NullLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
956,"if (""value"".equals(name) && String.class.isInstance(value) && !String.class.cast(value).isEmpty()) {","if (""value"".equals(name) && String.class.isInstance(value) && !String.class.cast(value).isEmpty()) {
  configName=value.toString();
}
",7,8,10,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-extendedOperands, IfStatement-expression, ),
"
957,"if (!""error_list"".equals(this.errorListFma.getOriginalName())) {","if (!""error_list"".equals(this.errorListFma.getOriginalName())) {
  sb.append(""error-list-name=\"""").append(this.errorListFma).append(""\"""");
}
",7,9,5,,"StringLiteral(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
958,if (r.x < 1) r.x = 1;,"if (r.x < 1) r.x=1;
",7,7,4,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
959,if(((EntityTupleSet)q).getStarQuery().getNodes().size() == 2) {,"if (((EntityTupleSet)q).getStarQuery().getNodes().size() == 2) {
  Assert.assertEquals(""h"",((EntityTupleSet)q).getStarQuery().getCommonVarName());
}
 else if (((EntityTupleSet)q).getStarQuery().getNodes().size() == 3) {
  Assert.assertEquals(""m"",((EntityTupleSet)q).getStarQuery().getCommonVarName());
}
 else {
  Assert.assertTrue(false);
}
",7,7,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
960,if (ch < '0')  return -1;,"if (ch < '0') return -1;
",7,7,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(PrefixExpression-operand, ReturnStatement-expression, IfStatement-thenStatement, ),
"
961,"if (""activemq"".equals(model.getScheme()) || ""amqp"".equals(model.getScheme()) || ""stomp"".equals(model.getScheme())) {","if (""activemq"".equals(model.getScheme()) || ""amqp"".equals(model.getScheme()) || ""stomp"".equals(model.getScheme())) {
  model.getComponentOptions().stream().filter(o -> ""brokerURL"".equals(o.getName())).findFirst().ifPresent(o -> o.setName(""brokerUrl""));
  model.getComponentOptions().stream().filter(o -> ""useMessageIDAsCorrelationID"".equals(o.getName())).findFirst().ifPresent(o -> o.setName(""useMessageIdAsCorrelationId""));
  model.getComponentOptions().stream().filter(o -> ""includeAllJMSXProperties"".equals(o.getName())).findFirst().ifPresent(o -> o.setName(""includeAllJmsxProperties""));
  model.getComponentOptions().stream().filter(o -> ""includeSentJMSMessageID"".equals(o.getName())).findFirst().ifPresent(o -> o.setName(""includeSentJmsMessageId""));
}
",8,9,12,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
962,"if (c == '[')  throw this.ex(""parser.cc.6"", this.offset-2);","if (c == '[') throw this.ex(""parser.cc.6"",this.offset - 2);
",8,8,8,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ThrowStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ThrowStatement-expression, IfStatement-thenStatement, ),
"
963,"tc, (DataValueDescriptor[]) null, cid5252t, 5252)) != 1)","if ((r=checkAConglom(tc,(DataValueDescriptor[])null,cid5252t,5252)) != 1) {
  throw T_Fail.testFailMsg(""(tempTest) after create checkAConglom(cid5252t) == "" + r);
}
",9,9,7,,"SimpleName(),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, ),
Dimension(ArrayType-dimensions, CastExpression-type, ),
NullLiteral(CastExpression-expression, ),
SimpleName(),
NumberLiteral(),
NumberLiteral(),
"
964,"if (UtilValidate.isNotEmpty(orderItem.getString(""productId"")) && ""RENTAL_ORDER_ITEM"".equals(orderItem.getString(""orderItemTypeId""))) {","if (UtilValidate.isNotEmpty(orderItem.getString(""productId"")) && ""RENTAL_ORDER_ITEM"".equals(orderItem.getString(""orderItemTypeId""))) {
  try {
    GenericValue product=orderItem.getRelatedOne(""Product"",false);
    if (product == null) {
      Debug.logError(""Error when looking up product in reserveInventory service"",module);
      resErrorMessages.add(""Error when looking up product in reserveInventory service"");
      continue;
    }
    String productType=(String)product.get(""productTypeId"");
    if (""ASSET_USAGE_OUT_IN"".equals(productType)) {
      if (reserveInventory) {
        if (EntityTypeUtil.hasParentType(delegator,""ProductType"",""productTypeId"",product.getString(""productTypeId""),""parentTypeId"",""MARKETING_PKG_PICK"")) {
          Map<String,Object> componentsRes=dispatcher.runSync(""getAssociatedProducts"",UtilMisc.toMap(""productId"",orderItem.getString(""productId""),""type"",""PRODUCT_COMPONENT""));
          if (ServiceUtil.isError(componentsRes)) {
            resErrorMessages.add((String)componentsRes.get(ModelService.ERROR_MESSAGE));
            continue;
          }
 else {
            List<GenericValue> assocProducts=UtilGenerics.checkList(componentsRes.get(""assocProducts""));
            for (            GenericValue productAssoc : assocProducts) {
              BigDecimal quantityOrd=productAssoc.getBigDecimal(""quantity"");
              BigDecimal quantityKit=orderItemShipGroupAssoc.getBigDecimal(""quantity"");
              BigDecimal quantity=quantityOrd.multiply(quantityKit);
              Map<String,Object> reserveInput=new HashMap<String,Object>();
              reserveInput.put(""productStoreId"",productStoreId);
              reserveInput.put(""productId"",productAssoc.getString(""productIdTo""));
              reserveInput.put(""orderId"",orderItem.getString(""orderId""));
              reserveInput.put(""orderItemSeqId"",orderItem.getString(""orderItemSeqId""));
              reserveInput.put(""shipGroupSeqId"",orderItemShipGroupAssoc.getString(""shipGroupSeqId""));
              reserveInput.put(""quantity"",quantity);
              reserveInput.put(""userLogin"",userLogin);
              reserveInput.put(""facilityId"",shipGroupFacilityId);
              Map<String,Object> reserveResult=dispatcher.runSync(""reserveStoreInventory"",reserveInput);
              if (ServiceUtil.isError(reserveResult)) {
                String invErrMsg=""The product "";
                if (product != null) {
                  invErrMsg+=getProductName(product,orderItem);
                }
                invErrMsg+="" with ID "" + orderItem.getString(""productId"") + "" is no longer in stock. Please try reducing the quantity or removing the product from this order."";
                resErrorMessages.add(invErrMsg);
              }
            }
          }
        }
 else {
          Map<String,Object> reserveInput=new HashMap<String,Object>();
          reserveInput.put(""productStoreId"",productStoreId);
          reserveInput.put(""productId"",orderItem.getString(""productId""));
          reserveInput.put(""orderId"",orderItem.getString(""orderId""));
          reserveInput.put(""orderItemSeqId"",orderItem.getString(""orderItemSeqId""));
          reserveInput.put(""shipGroupSeqId"",orderItemShipGroupAssoc.getString(""shipGroupSeqId""));
          reserveInput.put(""facilityId"",shipGroupFacilityId);
          reserveInput.put(""quantity"",orderItemShipGroupAssoc.getBigDecimal(""quantity""));
          reserveInput.put(""userLogin"",userLogin);
          Map<String,Object> reserveResult=dispatcher.runSync(""reserveStoreInventory"",reserveInput);
          if (ServiceUtil.isError(reserveResult)) {
            String invErrMsg=""The product "";
            if (product != null) {
              invErrMsg+=getProductName(product,orderItem);
            }
            invErrMsg+="" with ID "" + orderItem.getString(""productId"") + "" is no longer in stock. Please try reducing the quantity or removing the product from this order."";
            resErrorMessages.add(invErrMsg);
          }
        }
      }
      if (EntityTypeUtil.hasParentType(delegator,""ProductType"",""productTypeId"",product.getString(""productTypeId""),""parentTypeId"",""MARKETING_PKG_AUTO"")) {
        GenericValue permUserLogin=EntityQuery.use(delegator).from(""UserLogin"").where(""userLoginId"",""system"").cache().queryOne();
        Map<String,Object> inputMap=new HashMap<String,Object>();
        if (UtilValidate.isNotEmpty(shipGroupFacilityId)) {
          inputMap.put(""facilityId"",shipGroupFacilityId);
        }
 else {
          inputMap.put(""facilityId"",productStore.getString(""inventoryFacilityId""));
        }
        inputMap.put(""orderId"",orderItem.getString(""orderId""));
        inputMap.put(""orderItemSeqId"",orderItem.getString(""orderItemSeqId""));
        inputMap.put(""userLogin"",permUserLogin);
        Map<String,Object> prunResult=dispatcher.runSync(""createProductionRunForMktgPkg"",inputMap);
        if (ServiceUtil.isError(prunResult)) {
          Debug.logError(ServiceUtil.getErrorMessage(prunResult) + "" for input:"" + inputMap,module);
        }
      }
    }
  }
 catch (  GenericServiceException e) {
    String errMsg=""Fatal error calling reserveStoreInventory service: "" + e.toString();
    Debug.logError(e,errMsg,module);
    resErrorMessages.add(errMsg);
  }
}
",9,13,10,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
965,if (parts.length < 3) return null;,"if (parts.length < 3) return null;
",9,9,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
966,"if (""bean"".equals(option.getName()) || ""ref"".equals(option.getName()) || ""method"".equals(option.getName()) || ""beanType"".equals(option.getName())) {","if (""bean"".equals(option.getName()) || ""ref"".equals(option.getName()) || ""method"".equals(option.getName())|| ""beanType"".equals(option.getName())) {
  continue;
}
",11,666,16,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
967,if (args.length != 1) return false;,"if (args.length != 1) return false;
",11,11,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
968,case 0: if (cnt == 1) {,"case 0:
",11,11,1,,"NumberLiteral(SwitchCase-expression, ),
"
969,"if (""userLogin"".equals(modelParam.name) || ""locale"".equals(modelParam.name) || ""timeZone"".equals(modelParam.name)) {","if (""userLogin"".equals(modelParam.name) || ""locale"".equals(modelParam.name) || ""timeZone"".equals(modelParam.name)) {
  continue;
}
",11,11,9,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-expression, InfixExpression-extendedOperands, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-extendedOperands, IfStatement-expression, ),
"
970,if (i % 3 != 1) d.setOptionalSFixed64(1000 * i * 1000 * 6);,"if (i % 3 != 1) d.setOptionalSFixed64(1000 * i * 1000* 6);
",11,20,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
971,"&& ""false"".equals(portletReq.getParameterValues(""renderParamTr31"")[0])","if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_actionURL20"") && portletReq.getParameterValues(""renderParamTr31"") != null && portletReq.getParameterValues(""renderParamTr31"").length == 2 && ""false"".equals(portletReq.getParameterValues(""renderParamTr31"")[0]) && ""true"".equals(portletReq.getParameterValues(""renderParamTr31"")[1])) {
  portletResp.setRenderParameter(""tr31"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_actionURL21"") && portletReq.getParameterValues(""renderParamTr32"") == null) {
  portletResp.setRenderParameter(""tr32"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_actionURL27"")) {
  try {
    super.processAction(portletReq,portletResp);
  }
 catch (  Exception e) {
    portletResp.setRenderParameter(""tr37_error"",e.getMessage());
  }
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_actionURL28"") && portletReq.getParameter(""javax.portlet.action"") != null && ""actionNameTr28"".equals(portletReq.getParameter(""javax.portlet.action""))) {
  portletResp.setRenderParameter(""tr38"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_renderURL12"") && portletReq.getParameter(""renderURLTr52"") != null && """".equals(portletReq.getParameter(""renderURLTr52""))) {
  portletResp.setRenderParameter(""tr52"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_renderURL13"") && portletReq.getParameter(""renderURLTr53"") != null && !"""".equals(portletReq.getParameter(""renderURLTr53""))) {
  portletResp.setRenderParameter(""tr53"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_resourceURL6"") && portletReq.getParameter(""resourceURLTr70"") != null && """".equals(portletReq.getParameter(""resourceURLTr70""))) {
  portletResp.setRenderParameter(""tr70"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_resourceURL7"") && portletReq.getParameter(""resourceURLTr71"") != null && !"""".equals(portletReq.getParameter(""resourceURLTr71""))) {
  portletResp.setRenderParameter(""tr71"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_paramAction1"") && portletReq.getParameter(""tr90_value"") != null && ""true"".equals(portletReq.getParameter(""tr90_value""))) {
  portletResp.setRenderParameter(""tr90"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_paramAction2"") && portletReq.getParameter(""tr91_value"") != null) {
  portletResp.setRenderParameter(""tr91"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_paramAction3"") && (portletReq.getParameterValues(""tr92_value"")).length == 2) {
  portletResp.setRenderParameter(""tr92"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_paramAction5"") && portletReq.getParameter(""tr94_value"") != null && ""true"".equals(portletReq.getParameter(""tr94_value""))) {
  portletResp.setRenderParameter(""tr94"",""true"");
}
 else if (action.equals(""V2PortletTagLibraryTests2_SPEC2_26_IncludeJSPRender_paramAction6"") && portletReq.getParameter(""tr95_value"") == null) {
  portletResp.setRenderParameter(""tr95"",""true"");
}
 else {
  portletResp.setRenderParameters(portletReq.getParameterMap());
}
",11,11,6,,"StringLiteral(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, ArrayAccess-array, MethodInvocation-arguments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ),
"
972,if (((ELNode.Root) node).getType() == '$') {,"if (((ELNode.Root)node).getType() == '$') {
  elExpression=true;
}
 else if (checkDeferred && ((ELNode.Root)node).getType() == '#') {
  elExpression=true;
  deferred=true;
  if (pageInfo.isELIgnored()) {
    deferredValueIsLiteral=true;
  }
}
",11,11,4,,"QualifiedName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
973,"if (c == '""') sb.append( ""\\\"""" );","if (c == '""') sb.append(""\\\"""");
 else if (c == '\\') sb.append(""\\\\"");
 else if (c == '\t') sb.append(""\\t"");
 else if (c == '\r') sb.append(""\\r"");
 else if (c == '\n') sb.append(""\\n"");
 else sb.append((char)c);
",12,12,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
974,if ((float) commas.length / (float) spaces.length > 0.7) {,"if ((float)commas.length / (float)spaces.length > 0.7) {
  System.out.println(""Rejection: too many commas"");
  return null;
}
",12,12,5,,"PrimitiveType(CastExpression-type, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(CastExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
PrimitiveType(CastExpression-type, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(CastExpression-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
975,if ((buffer[bufpos] = c = ReadByte()) == '\\') {,"if ((buffer[bufpos]=c=ReadByte()) == '\\') {
  UpdateLineColumn(c);
  int backSlashCnt=1;
  for (; ; ) {
    if (++bufpos == available)     AdjustBuffSize();
    try {
      if ((buffer[bufpos]=c=ReadByte()) != '\\') {
        UpdateLineColumn(c);
        if ((c == 'u') && ((backSlashCnt & 1) == 1)) {
          if (--bufpos < 0)           bufpos=bufsize - 1;
          break;
        }
        backup(backSlashCnt);
        return '\\';
      }
    }
 catch (    java.io.IOException e) {
      if (backSlashCnt > 1)       backup(backSlashCnt - 1);
      return '\\';
    }
    UpdateLineColumn(c);
    backSlashCnt++;
  }
  try {
    while ((c=ReadByte()) == 'u')     ++column;
    buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));
    column+=4;
  }
 catch (  java.io.IOException e) {
    throw new Error(""Invalid escape character at line "" + line + "" column ""+ column+ ""."");
  }
  if (backSlashCnt == 1)   return c;
 else {
    backup(backSlashCnt - 1);
    return '\\';
  }
}
 else {
  UpdateLineColumn(c);
  return c;
}
",13,13,5,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
976,if(keyVal.length != 2) continue;,"if (keyVal.length != 2) continue;
",13,13,3,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
977,"if (""enabled"".equals(evt.getPropertyName()) && (evt.getNewValue() != null)) {","if (""enabled"".equals(evt.getPropertyName()) && (evt.getNewValue() != null)) {
  assertTrue(evt.getNewValue().equals(Boolean.FALSE));
  assertTrue(evt.getOldValue().equals(Boolean.TRUE));
  isChanged=true;
}
",13,14,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
978,"if ( _cnt329>=1 ) { break _loop329; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}","if (_cnt329 >= 1) {
  break _loop329;
}
 else {
  throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
",14,50,10,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, Block-statements, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
PrimitiveType(CastExpression-type, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, Block-statements, IfStatement-elseStatement, ),
"
979,"if ( """".equals( entryAbbreviateMaxLengthText.getText() ) && e.text.matches( ""[0]"" ) )","if ("""".equals(entryAbbreviateMaxLengthText.getText()) && e.text.matches(""[0]"")) {
  e.doit=false;
}
",15,15,7,,"StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, IfStatement-expression, ),
"
980,if (w1.jacobi()!=1) { zero(); return false; },"if (w1.jacobi() != 1) {
  zero();
  return false;
}
",17,17,5,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, Block-statements, IfStatement-thenStatement, ),
BooleanLiteral(ReturnStatement-expression, Block-statements, IfStatement-thenStatement, ),
"
981,if ((nInts - 1) * 32 + dstPos >= 64) {,"if ((nInts - 1) * 32 + dstPos >= 64) {
  throw new IllegalArgumentException(""(nInts-1)*32+dstPos is greater or equal to than 64"");
}
",19,19,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
982,else if (column == 1) param.setEjbRefType((String)value);,"if (column == 1) param.setEjbRefType((String)value);
 else if (column == 3) param.setHome((String)value);
 else if (column == 4) param.setRemote((String)value);
 else if (column == 5) param.setEjbLink((String)value);
 else if (column == 6) param.setDescription((String)value);
",19,19,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
983,if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {,"if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {
  fCurrentEntity.position++;
  offset++;
}
 else {
  newlines++;
}
",21,21,3,,"QualifiedName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
CharacterLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
984,if ( (zzAttributes & 8) == 8 ) break zzForAction;,"if ((zzAttributes & 8) == 8) break zzForAction;
",22,22,4,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(BreakStatement-label, IfStatement-thenStatement, ),
"
985,if (y.redc().parity()==1) b[0]=0x03;,"if (y.redc().parity() == 1) b[0]=0x03;
",25,25,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
986,if (MC==1) m=d.w[i];,"if (MC == 1) m=d.w[i];
 else m=(MC * d.w[i]) & BMASK;
",28,28,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-index, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
987,if (k%2==1) m+=(n8*n8-1)/8;,"if (k % 2 == 1) m+=(n8 * n8 - 1) / 8;
",28,31,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
988,if (w[0]!=1) return false;,"if (w[0] != 1) return false;
",42,42,4,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
989,if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L),"if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
  matchedToken=jjFillToken();
  TokenLexicalActions(matchedToken);
  if (jjnewLexState[jjmatchedKind] != -1)   curLexState=jjnewLexState[jjmatchedKind];
  return matchedToken;
}
 else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
  if (jjnewLexState[jjmatchedKind] != -1)   curLexState=jjnewLexState[jjmatchedKind];
  continue EOFLoop;
}
",46,3830,7,,"SimpleName(ArrayAccess-array, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
990,"if(ap.length!=1) fail(""test_2, case 001 FAILED: ""+ap.length);","if (ap.length != 1) fail(""test_2, case 001 FAILED: "" + ap.length);
",147,147,5,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, IfStatement-thenStatement, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
