116000,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatLoaderTest.java,252,,"    server.registerQuery(""X = load '"" + BASIC_TABLE + ""' using org.apache.hive.hcatalog.pig.HCatLoader();"");"
116001,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatLoaderTest.java,252,,"    server.registerQuery(""X = load '"" + BASIC_TABLE + ""' using org.apache.hive.hcatalog.pig.HCatLoader();"");"
116002,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatLoaderTest.java,781,,"            assertTrue(""rowNum="" + numTuplesRead + "" colNum="" + colPos"
116003,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatLoaderTest.java,781,,"            assertTrue(""rowNum="" + numTuplesRead + "" colNum="" + colPos"
116004,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,66,,"    pigValueRangeTest(""junitTypeTest1"", ""tinyint"", ""int"", null, Integer.toString(1),"
116005,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,66,,"    pigValueRangeTest(""junitTypeTest1"", ""tinyint"", ""int"", null, Integer.toString(1),"
116006,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,66,,"    pigValueRangeTest(""junitTypeTest1"", ""tinyint"", ""int"", null, Integer.toString(1),"
116007,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,69,,"    pigValueRangeTestOverflow(""junitTypeTest2"", ""tinyint"", ""int"","
116008,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,71,,"    pigValueRangeTestOverflow(""junitTypeTest3"", ""tinyint"", ""int"","
116009,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,87,,"    pigValueRangeTest(""junitTypeTest1"", ""char(5)"", ""chararray"", null, ""xxx"", ""xxx  "");"
116010,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,87,,"    pigValueRangeTest(""junitTypeTest1"", ""char(5)"", ""chararray"", null, ""xxx"", ""xxx  "");"
116011,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,88,,"    pigValueRangeTestOverflow(""junitTypeTest1"", ""char(5)"", ""chararray"", null, ""too_long"");"
116012,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,97,,"    pigValueRangeTest(""junitTypeTest1"", ""varchar(5)"", ""chararray"", null, ""xxx"", ""xxx"");"
116013,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,107,,"    pigValueRangeTest(""junitTypeTest1"", ""decimal(5,2)"", ""bigdecimal"", null, BigDecimal.valueOf(1.2)"
116014,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,107,,"    pigValueRangeTest(""junitTypeTest1"", ""decimal(5,2)"", ""bigdecimal"", null, BigDecimal.valueOf(1.2)"
116015,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,147,,"    pigValueRangeTest(""junitTypeTest1"", ""date"", ""datetime"", null, d.toString(),"
116016,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,147,,"    pigValueRangeTest(""junitTypeTest1"", ""date"", ""datetime"", null, d.toString(),"
116017,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,275,,"        ""A = load '"" + INPUT_FILE_NAME + ""' as ("" + field + "":"" + pigType + "");"", queryNumber++);"
116018,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,277,,"      logAndRegister(server, ""store A into '"" + tblName + ""' using "" + HCatStorer.class.getName()"
116019,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,278,,"          + ""();"", queryNumber++);"
116020,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,416,,"    AbstractHCatLoaderTest.dropTable(""junit_unparted"", driver);"
116021,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,427,,"    server.registerQuery(""A = load '"" + INPUT_FILE_NAME + ""' as (a:int, b:chararray);"");"
116022,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,428,,"    server.registerQuery(""store A into 'default.junit_unparted' using """
116023,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,451,,"    AbstractHCatLoaderTest.dropTable(""employee"", driver);"
116024,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,453,,"        ""emp_id INT, emp_name STRING, emp_start_date STRING , emp_gender STRING"","
116025,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,454,,"        ""emp_country STRING , emp_state STRING"", driver, storageFormat);"
116026,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,457,,"        { ""111237\tKrishna\t01/01/1990\tM\tIN\tTN"", ""111238\tKalpana\t01/01/2000\tF\tIN\tKA"","
116027,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,463,,"    pig.registerQuery(""A = LOAD '"" + INPUT_FILE_NAME"
116028,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,464,,"        + ""' USING PigStorage() AS (emp_id:int,emp_name:chararray,emp_start_date:chararray,"""
116029,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,465,,"        + ""emp_gender:chararray,emp_country:chararray,emp_state:chararray);"");"
116030,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,479,,"    driver.run(""select * from employee"");"
116031,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,496,,"    driver.run(""drop table employee"");"
116032,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,541,,"    AbstractHCatLoaderTest.createTableDefaultDB(""junit_parted"", ""a int, b string"", ""ds "" +"
116033,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,614,,"    driver.run(""select * from junit_unparted"");"
116034,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,622,,"    driver.run(""drop table junit_unparted"");"
116035,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/AbstractHCatStorerTest.java,897,,"    pig.registerQuery(""STORE IN INTO 'employee' USING "" + HCatStorer.class.getName()"
116036,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestAvroHCatStorer.java,37,,"  @Ignore(""Temporarily disable until fixed"")"
116037,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestE2EScenarios.java,102,,"      dropTable(""inpy"");"
116038,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestE2EScenarios.java,103,,"      dropTable(""rc5318"");"
116039,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestE2EScenarios.java,104,,"      dropTable(""orc5318"");"
116040,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderComplexSchema.java,111,,"    hiveConf.set(""mapred.local.dir"", workDir + File.separator + ""TestHCatLoaderComplexSchema"""
116041,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderComplexSchema.java,112,,"        + File.separator + ""mapred"" + File.separator + ""local"");"
116042,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderComplexSchema.java,200,,"              put(""ac test1"", ""test 1"");"
116043,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderComplexSchema.java,201,,"              put(""ac test2"", ""test 2"");"
116044,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderComplexSchema.java,214,,"    verifyWriteRead(""testSyntheticComplexSchema"", pigSchema, tableSchema, data, true);"
116045,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatLoaderStorer.java,117,,"      String.format(""%d\t%d"", Short.MIN_VALUE, Byte.MIN_VALUE),"
116046,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatStorerMulti.java,121,,"    createTable(BASIC_TABLE, ""a int, b string"");"
116047,./TargetProjects/hive/hcatalog/hcatalog-pig-adapter/src/test/java/org/apache/hive/hcatalog/pig/TestHCatStorerMulti.java,132,,"    driver.run(""select * from "" + BASIC_TABLE);"
116048,./TargetProjects/hive/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java,626,,"      throw new MetaException(""Unable to execute direct SQL "" + StringUtils.stringifyException(e));"
116049,./TargetProjects/hive/hcatalog/src/test/e2e/hcatalog/tools/generate/java/org/apache/hadoop/hive/tools/generate/RCFileGenerator.java,102,,"    return buf.toString().getBytes(""UTF-8"");"
116050,./TargetProjects/hive/hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatClient.java,241,,"  @InterfaceAudience.LimitedPrivate({""Hive""})"
116051,./TargetProjects/hive/hcatalog/webhcat/java-client/src/main/java/org/apache/hive/hcatalog/api/HCatClientHMSImpl.java,482,,"        throw new HCatException(""The table "" + partInfo.getTableName()"
116052,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,190,,"    cols.add(new HCatFieldSchema(""value"", Type.STRING, ""value comment""));"
116053,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,192,,"      .create(db, tableOne, cols).fileFormat(""rcfile"").build();"
116054,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,224,,"    assertEquals(""checking "" + serdeConstants.FIELD_DELIM, Character.toString('\001'),"
116055,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,240,,"      tableThree, cols).fileFormat(""orcfile"").build();"
116056,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,321,,"    cols.add(new HCatFieldSchema(""userid"", Type.INT, ""id columns""));"
116057,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,330,,"    ptnCols.add(new HCatFieldSchema(""country"", Type.STRING,"
116058,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,497,,"      client.getTable(""foo"", tableName);"
116059,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,544,,"          new HCatFieldSchema(""bar"", Type.STRING, """"));"
116060,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,576,,"        LOG.info(""Got exception: "", exception);"
116061,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,633,,"      LOG.error(""Unexpected exception!"", t);"
116062,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,634,,"      assertTrue(""Unexpected exception! "" + t.getMessage(), false);"
116063,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,665,,"      final String dbName = ""myDb"";"
116064,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,666,,"      final String tableName = ""myTable"";"
116065,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,675,,"          new HCatFieldSchema(""grid"", Type.STRING, """"));"
116066,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,717,,"      partitionSpec.put(""dt"", ""2011_12_31"");"
116067,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,721,,"      partitionSpec.put(""dt"", ""2012_01_01"");"
116068,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,738,,"      assertArrayEquals(""Mismatched partition."", new String[]{""2012_01_01"", ""AB""}, partitions.get(0).getValues().toArray());"
116069,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,771,,"      assertNotNull(""Table couldn't be queried for. "", table);"
116070,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,1144,,"      assertEquals(""Column schema doesn't match."", sourceTable.getCols(), addedPartition_1.getColumns());"
116071,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,1145,,"      assertEquals(""InputFormat doesn't match."", sourceTable.getInputFileFormat(), addedPartition_1.getInputFormat());"
116072,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,1146,,"      assertEquals(""OutputFormat doesn't match."", sourceTable.getOutputFileFormat(), addedPartition_1.getOutputFormat());"
116073,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,1147,,"      assertEquals(""SerDe doesn't match."", sourceTable.getSerdeLib(), addedPartition_1.getSerDe());"
116074,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/TestHCatClient.java,1148,,"      assertEquals(""SerDe params don't match."", sourceTable.getSerdeParams(), addedPartition_1.getSerdeParams());"
116075,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/repl/commands/TestCommands.java,118,,"    LOG.info(""About to run :""+testCmd.get().get(0));"
116076,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/repl/commands/TestCommands.java,161,,"    driver.run(""SELECT * from "" + dbName + ""."" + tableName);"
116077,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/repl/exim/TestEximReplicationTasks.java,104,,"    db.setName(""testdb"");"
116078,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/repl/exim/TestEximReplicationTasks.java,174,,"    t.setTableName(""testtable"");"
116079,./TargetProjects/hive/hcatalog/webhcat/java-client/src/test/java/org/apache/hive/hcatalog/api/repl/exim/TestEximReplicationTasks.java,319,,"        HCatSchemaUtils.getHCatSchema(""a:int,b:string"").getFields());"
116080,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/HcatDelegator.java,168,,"      exec += String.format("" comment '%s'"", desc.comment);"
116081,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/HcatDelegator.java,170,,"      exec += String.format("" location '%s'"", desc.location);"
116082,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/HcatDelegator.java,178,,"      .put(""database"", desc.database)"
116083,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/HcatDelegator.java,217,,"        .put(""table"", desc.table)"
116084,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/HcatDelegator.java,655,,"        .put(""partition"", partition)"
116085,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,211,,"            @FormParam(""group"") String group,"
116086,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,212,,"            @FormParam(""permissions"") String permissions)"
116087,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,233,,"    verifyDdlParam(db, "":db"");"
116088,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,246,,"  @Path(""ddl/database/{db}/table/{table}"")"
116089,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,249,,"                @PathParam(""table"") String table,"
116090,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,255,,"    verifyDdlParam(table, "":table"");"
116091,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,645,,"                      @FormParam(""file"") List<String> fileList,"
116092,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,646,,"                      @FormParam(""files"") String files,"
116093,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,647,,"                      @FormParam(""define"") List<String> defines,"
116094,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,649,,"                      @FormParam(""arg"") List<String> args,"
116095,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,650,,"                      @FormParam(""statusdir"") String statusdir,"
116096,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,651,,"                      @FormParam(""callback"") String callback,"
116097,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,652,,"                      @FormParam(""enablelog"") boolean enablelog,"
116098,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,653,,"                      @FormParam(""enablejobreconnect"") Boolean enablejobreconnect)"
116099,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,662,,"    userArgs.put(""user.name"", getDoAsUser());"
116100,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,749,,"  public EnqueueBean pig(@FormParam(""execute"") String execute,"
116101,./TargetProjects/hive/hcatalog/webhcat/svr/src/main/java/org/apache/hive/hcatalog/templeton/Server.java,895,,"  public QueueStatusBean showJobId(@PathParam(""jobid"") String jobid)"
116102,./TargetProjects/hive/hcatalog/webhcat/svr/src/test/java/org/apache/hive/hcatalog/templeton/TestConcurrentJobRequestsThreadsAndTimeout.java,61,,"    statusBean = new QueueStatusBean(""job_1000"", ""Job not found"");"
116103,./TargetProjects/hive/hcatalog/webhcat/svr/src/test/java/org/apache/hive/hcatalog/templeton/TestWebHCatE2e.java,144,,"  @Ignore(""not ready due to HIVE-4824"")"
116104,./TargetProjects/hive/hcatalog/webhcat/svr/src/test/java/org/apache/hive/hcatalog/templeton/tool/TestTempletonUtils.java,145,,"      Assert.fail(""Should not have found /scoobydoo/teddybear"");"
116105,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Cmp.java,266,,"        sql.append("",\n"");"
116106,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Cmp.java,271,,"          sql.append(""COUNT("" + name + "") AS "" + name + ""_COUNT_NOT_NULL"");"
116107,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Cmp.java,274,,"            sql.append(""SUM(LENGTH("" + name + "")) AS "" + name + ""_SUM_LENGTH,\n"");"
116108,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Exec.java,646,,"      sql.add(""ADD FILE "" + conf.getLocation());"
116109,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Exec.java,1262,,"	          trace(ctx, ""DECLARE "" + name + "" "" + type + "" = "" + var.toSqlString());"
116110,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Exec.java,1613,,"      trace(ctx, ""SET "" + name + "" = "" + var.toSqlString());      "
116111,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Stmt.java,1304,,"      sql.append(""PERCENTILE_APPROX(CAST("" + col + "" AS DOUBLE),0.05),"");"
116112,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Stmt.java,1326,,"      sql.append("") t"");"
116113,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Stmt.java,1349,,"          String avg = String.format(""%.2f"", query.column(3 + i*cc, Double.class));"
116114,./TargetProjects/hive/hplsql/src/main/java/org/apache/hive/hplsql/Utils.java,267,,"      out = String.format(""%.1f"", ((float)bytes)/1024) + "" KB"";"
116115,./TargetProjects/hive/iceberg/iceberg-catalog/src/main/java/org/apache/iceberg/hive/HiveCatalog.java,130,,"      throw new NoSuchNamespaceException(""Namespace does not exist: %s"", namespace);"
116116,./TargetProjects/hive/iceberg/iceberg-catalog/src/main/java/org/apache/iceberg/hive/HiveCatalog.java,253,,"      throw new RuntimeException(""Failed to create namespace "" + namespace + "" in Hive MataStore"", e);"
116117,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,77,,"    Assert.assertFalse(""Table should not exist"", catalog.tableExists(TABLE_IDENTIFIER));"
116118,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,82,,"        .set(""prop"", ""value"")"
116119,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,82,,"        .set(""prop"", ""value"")"
116120,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,91,,"    Assert.assertEquals(""Table props should match"", ""value"", table.properties().get(""prop""));"
116121,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,103,,"    Assert.assertTrue(""Table should be created"", catalog.tableExists(TABLE_IDENTIFIER));"
116122,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveCreateReplaceTableTest.java,152,,"    Assert.assertTrue(""Table should exist"", catalog.tableExists(TABLE_IDENTIFIER));"
116123,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,137,,"    GenericRecordBuilder recordBuilder = new GenericRecordBuilder(AvroSchemaUtil.convert(schema, ""test""));"
116124,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,144,,"    String fileLocation = table.location().replace(""file:"", """") + ""/data/file.avro"";"
116125,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/HiveTableTest.java,250,,"    icebergTable.updateSchema().addColumn(""data"", Types.LongType.get()).commit();"
116126,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,57,,"      ""owner"", ""apache"","
116127,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,57,,"      ""owner"", ""apache"","
116128,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,58,,"      ""group"", ""iceberg"","
116129,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,58,,"      ""group"", ""iceberg"","
116130,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,59,,"      ""comment"", ""iceberg  hiveCatalog test"");"
116131,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,67,,"        required(1, ""id"", Types.IntegerType.get(), ""unique ID""),"
116132,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,68,,"        required(2, ""data"", Types.StringType.get())"
116133,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,73,,"    TableIdentifier tableIdent = TableIdentifier.of(DB_NAME, ""tbl"");"
116134,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,80,,"          .withProperty(""key1"", ""value1"")"
116135,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,80,,"          .withProperty(""key1"", ""value1"")"
116136,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,81,,"          .withProperty(""key2"", ""value2"")"
116137,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,81,,"          .withProperty(""key2"", ""value2"")"
116138,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,303,,"        !catalog.namespaceExists(Namespace.of(""db2"", ""db2"", ""ns2"")));"
116139,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCatalog.java,314,,"            ""test"", ""test"","
116140,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCommitLocks.java,153,,"    AssertHelpers.assertThrows(""Expected an exception"","
116141,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCommits.java,143,,"    Assert.assertTrue(""Current metadata file should still exist"", metadataFileExists(ops.current()));"
116142,./TargetProjects/hive/iceberg/iceberg-catalog/src/test/java/org/apache/iceberg/hive/TestHiveCommits.java,175,,"        CommitStateUnknownException.class, ""Datacenter on fire"","
116143,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/TestHelpers.java,49,,"  @SuppressWarnings(""unchecked"")"
116144,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/data/DeleteReadTests.java,50,,"      Types.NestedField.required(2, ""data"", Types.StringType.get())"
116145,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/data/DeleteReadTests.java,124,,"    Assert.assertEquals(""Table should contain expected rows"", expected, actual);"
116146,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,100,,"    missingSchema.put(""location"", temp.newFolder(""hadoop_tables"").toString());"
116147,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,116,,"    properties.put(""dummy"", ""test"");"
116148,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestCatalogs.java,116,,"    properties.put(""dummy"", ""test"");"
116149,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,85,,"          required(3, ""date"", Types.StringType.get()));"
116150,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,150,,"    expectedRecords.get(0).set(2, ""2020-03-20"");"
116151,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,245,,"          Types.NestedField.optional(3, ""level"", Types.StringType.get()),"
116152,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java,246,,"          Types.NestedField.optional(4, ""message"", Types.StringType.get())"
116153,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestDeserializer.java,75,,"    expected.set(1, ""Bob"");"
116154,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java,48,,"    SearchArgument arg = builder.startAnd().equals(""salary"", PredicateLeaf.Type.LONG, 3000L).end().build();"
116155,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergFilterFactory.java,59,,"    SearchArgument arg = builder.startAnd().equals(""float"", PredicateLeaf.Type.FLOAT, Double.NaN).end().build();"
116156,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,128,,"    testTables.createTable(shell, ""customers"", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat,"
116157,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,135,,"    Assert.assertArrayEquals(new Object[] {0L, ""Alice"", ""Brown""}, rows.get(0));"
116158,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,135,,"    Assert.assertArrayEquals(new Object[] {0L, ""Alice"", ""Brown""}, rows.get(0));"
116159,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,136,,"    Assert.assertArrayEquals(new Object[] {1L, ""Bob"", ""Green""}, rows.get(1));"
116160,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,136,,"    Assert.assertArrayEquals(new Object[] {1L, ""Bob"", ""Green""}, rows.get(1));"
116161,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,137,,"    Assert.assertArrayEquals(new Object[] {2L, ""Trudy"", ""Pink""}, rows.get(2));"
116162,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,137,,"    Assert.assertArrayEquals(new Object[] {2L, ""Trudy"", ""Pink""}, rows.get(2));"
116163,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,190,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""customers"");"
116164,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,193,,"    String createSql = ""CREATE EXTERNAL TABLE "" + identifier +"
116165,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,262,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""arraytable"", schema, fileFormat, 1);"
116166,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,323,,"                            .of(required(3, ""something"", Types.DoubleType.get()), required(4, ""someone"","
116167,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,323,,"                            .of(required(3, ""something"", Types.DoubleType.get()), required(4, ""someone"","
116168,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,324,,"                                    Types.LongType.get()), required(5, ""somewhere"", Types.StringType.get())))));"
116169,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerLocalScan.java,346,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""maptable"", schema, fileFormat, 1);"
116170,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,169,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""part_test"");"
116171,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,170,,"    shell.executeStatement(""CREATE EXTERNAL TABLE "" + identifier +"
116172,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,171,,"        "" STORED BY ICEBERG "" +"
116173,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,173,,"        "" TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
116174,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,174,,"        SchemaParser.toJson(schema) + ""', "" +"
116175,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,202,,"        optional(2, ""year_field"", Types.DateType.get()),"
116176,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,203,,"        optional(3, ""month_field"", Types.TimestampType.withZone()),"
116177,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,204,,"        optional(4, ""day_field"", Types.TimestampType.withoutZone()),"
116178,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,205,,"        optional(5, ""hour_field"", Types.TimestampType.withoutZone()),"
116179,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,206,,"        optional(6, ""truncate_field"", Types.StringType.get()),"
116180,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,207,,"        optional(7, ""bucket_field"", Types.StringType.get()),"
116181,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,208,,"        optional(8, ""identity_field"", Types.StringType.get())"
116182,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,217,,"        ""TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
116183,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,287,,"    TableIdentifier identifier = TableIdentifier.of(""default"", ""customers"");"
116184,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,289,,"    shell.executeStatement(""CREATE EXTERNAL TABLE customers "" +"
116185,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,290,,"        ""STORED BY ICEBERG "" +"
116186,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,311,,"      shell.executeStatement(""DROP TABLE customers"");"
116187,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,314,,"      AssertHelpers.assertThrows(""should throw exception"", NoSuchTableException.class,"
116188,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,315,,"          ""Table does not exist"", () -> {"
116189,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,543,,"        PartitionSpec.builderFor(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA).identity(""last_name"").build();"
116190,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,639,,"    shell.setHiveSessionValue(InputFormatConfig.SCHEMA_AUTO_CONVERSION, ""true"");"
116191,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,690,,"          ""from deserializer""}, rows.get(i));"
116192,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,735,,"        ""custom_property"", ""initial_val"","
116193,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,744,,"    expectedIcebergProperties.put(""EXTERNAL"", ""TRUE"");"
116194,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,792,,"        .set(""new_prop_1"", ""true"")"
116195,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,793,,"        .set(""new_prop_2"", ""false"")"
116196,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,955,,"        optional(1, ""customer_id"", Types.IntegerType.get()),"
116197,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,957,,"        optional(3, ""last_name"", Types.StringType.get(), ""This is last name""),"
116198,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerNoScan.java,980,,"        new FieldSchema(""last_name"", ""string"", ""This is last name""),"
116199,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,99,,"          required(2, ""customer_id"", Types.LongType.get()),"
116200,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,216,,"    testTables.createTable(shell, ""customers"", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat,"
116201,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,224,,"    Assert.assertArrayEquals(new Object[] {""Trudy"", 2L}, descRows.get(0));"
116202,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,225,,"    Assert.assertArrayEquals(new Object[] {""Bob"", 1L}, descRows.get(1));"
116203,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,226,,"    Assert.assertArrayEquals(new Object[] {""Alice"", 0L}, descRows.get(2));"
116204,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,233,,"    String createQuery = ""CREATE EXTERNAL TABLE "" +  tableName + "" (a int) STORED AS "" + fileFormat.name() + "" "" +"
116205,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,234,,"        testTables.locationForCreateTableSQL(TableIdentifier.of(""default"", tableName));"
116206,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,236,,"    shell.executeStatement(""INSERT INTO "" + tableName + "" VALUES (1), (2), (3)"");"
116207,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,246,,"    shell.executeStatement(""INSERT INTO "" + tableName + "" PARTITION (b='aaa') VALUES (1), (2), (3)"");"
116208,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,247,,"    shell.executeStatement(""INSERT INTO "" + tableName + "" PARTITION (b='bbb') VALUES (4), (5)"");"
116209,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,248,,"    shell.executeStatement(""INSERT INTO "" + tableName + "" PARTITION (b='ccc') VALUES (6)"");"
116210,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,249,,"    shell.executeStatement(""INSERT INTO "" + tableName + "" PARTITION (b='ddd') VALUES (7), (8), (9), (10)"");"
116211,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,332,,"    String tableName = ""orders"";"
116212,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,595,,"    Assert.assertArrayEquals(new Object[]{0L, ""Brown"", ""Alice""}, result.get(0));"
116213,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,596,,"    Assert.assertArrayEquals(new Object[]{1L, ""Green"", ""Bob""}, result.get(1));"
116214,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,597,,"    Assert.assertArrayEquals(new Object[]{2L, ""Pink"", ""Trudy""}, result.get(2));"
116215,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,616,,"    TableIdentifier target = TableIdentifier.of(""default"", ""target"");"
116216,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,621,,"    testTables.createTable(shell, ""source"", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,"
116217,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,666,,"        .identity(""last_name"").build();"
116218,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,682,,"        .add(3L, ""Bill"", ""Purple"") // appended (new partition)"
116219,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,819,,"      copy.setField(""first_name"", ""Sam"");"
116220,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,927,,"            Types.StructType.of(required(3, ""key"", Types.StringType.get()), required(4, ""value"","
116221,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,927,,"            Types.StructType.of(required(3, ""key"", Types.StringType.get()), required(4, ""value"","
116222,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1013,,"        optional(2, ""part_field"", Types.DateType.get()));"
116223,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1020,,"    Table table = testTables.createTable(shell, ""part_test"", schema, spec, fileFormat, records);"
116224,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1209,,"        .add(new BigDecimal(""100.57""))"
116225,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1244,,"    List<Record> records = testTables.createTableWithGeneratedRecords(shell, ""structtable"", schema, fileFormat, 1);"
116226,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1332,,"    List<Object[]> rows = shell.executeStatement(""SELECT * FROM default.customers"");"
116227,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1354,,"    icebergTable.updateSchema().addColumn(""age"", Types.LongType.get()).commit();"
116228,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1357,,"        optional(2, ""first_name"", Types.StringType.get(), ""This is first name""),"
116229,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1358,,"        optional(3, ""last_name"", Types.StringType.get(), ""This is last name""),"
116230,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1364,,"        .add(3L, ""James"", ""Red"", 34L).add(4L, ""Lily"", ""Blue"", null).build();"
116231,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1364,,"        .add(3L, ""James"", ""Red"", 34L).add(4L, ""Lily"", ""Blue"", null).build();"
116232,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1364,,"        .add(3L, ""James"", ""Red"", 34L).add(4L, ""Lily"", ""Blue"", null).build();"
116233,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1394,,"    customersWithAgeBuilder.add(5L, ""Lily"", ""Magenta"", null).add(6L, ""Roni"", ""Purple"", 23L);"
116234,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1394,,"    customersWithAgeBuilder.add(5L, ""Lily"", ""Magenta"", null).add(6L, ""Roni"", ""Purple"", 23L);"
116235,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1443,,"    Schema schema = new Schema(required(1, ""id"", Types.LongType.get()), required(2, ""person"", Types.StructType"
116236,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1797,,"        optional(2, ""int_col"", Types.IntegerType.get(), ""This is an integer type""),"
116237,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1798,,"        optional(3, ""float_col"", Types.FloatType.get(), ""This is a float type""),"
116238,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1799,,"        optional(4, ""decimal_col"", Types.DecimalType.of(2, 1), ""This is a decimal type""));"
116239,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1957,,"    List<Object[]> originalResult = shell.executeStatement(""SELECT * FROM "" + tableName + "" ORDER BY a"");"
116240,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandlerWithEngine.java,1957,,"    List<Object[]> originalResult = shell.executeStatement(""SELECT * FROM "" + tableName + "" ORDER BY a"");"
116241,./TargetProjects/hive/iceberg/iceberg-handler/src/test/java/org/apache/iceberg/mr/hive/TestTables.java,191,,"        ""TBLPROPERTIES ('"" + InputFormatConfig.TABLE_SCHEMA + ""'='"" +"
116242,./TargetProjects/hive/itests/custom-udfs/udf-classloader-udf1/src/main/java/hive/it/custom/udfs/UDF1.java,32,,"        ""constructor: "" + getClass().getSimpleName() + "" classloader: "" + getClass().getClassLoader() + "", "" + util + "" classloader: """
116243,./TargetProjects/hive/itests/custom-udfs/udf-classloader-udf2/src/main/java/hive/it/custom/udfs/UDF2.java,31,,"        ""constructor: "" + getClass().getSimpleName() + "" classloader: "" + getClass().getClassLoader() + "", "" + util"
116244,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/api/TestHCatClientNotification.java,123,,"    String dbName = ""default"";"
116245,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/api/TestHCatClientNotification.java,126,,"    table.cols(Arrays.asList(new HCatFieldSchema(""onecol"", TypeInfoFactory.stringTypeInfo, """")));"
116246,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/hbase/TestPigHBaseStorageHandler.java,65,,"  private final byte[] FAMILY     = Bytes.toBytes(""testFamily"");"
116247,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/hbase/TestPigHBaseStorageHandler.java,66,,"  private final byte[] QUALIFIER1 = Bytes.toBytes(""testQualifier1"");"
116248,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/hbase/TestPigHBaseStorageHandler.java,67,,"  private final byte[] QUALIFIER2 = Bytes.toBytes(""testQualifier2"");"
116249,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/hbase/TestPigHBaseStorageHandler.java,116,,"      put.addColumn(FAMILY, QUALIFIER2, 1, Bytes.toBytes(""textB-"" + i));"
116250,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java,217,,"      throw new RuntimeException(""Event failed."");"
116251,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java,1465,,"    throw new RuntimeException(""unimplemented"");"
116252,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,333,,"    String dbDescription = ""no description"";"
116253,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,462,,"    String defaultDbName = ""default"";"
116254,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,467,,"    FieldSchema col1 = new FieldSchema(""col1"", ""int"", ""no comment"");"
116255,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,467,,"    FieldSchema col1 = new FieldSchema(""col1"", ""int"", ""no comment"");"
116256,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,467,,"    FieldSchema col1 = new FieldSchema(""col1"", ""int"", ""no comment"");"
116257,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,470,,"    SerDeInfo serde = new SerDeInfo(""serde"", ""seriallib"", null);"
116258,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,470,,"    SerDeInfo serde = new SerDeInfo(""serde"", ""seriallib"", null);"
116259,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,472,,"        new StorageDescriptor(cols, serdeLocation, ""input"", ""output"", false, 0, serde, null, null,"
116260,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,472,,"        new StorageDescriptor(cols, serdeLocation, ""input"", ""output"", false, 0, serde, null, null,"
116261,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,656,,"    FieldSchema partCol1 = new FieldSchema(""ds"", ""string"", ""no comment"");"
116262,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,658,,"    List<String> partCol1Vals = Arrays.asList(""today"");"
116263,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,698,,"        new Partition(Arrays.asList(""tomorrow""), defaultDbName, tblName2, startTime, startTime, sd,"
116264,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,1420,,"    driver.run(""create table "" + tblName + "" (c int)"");"
116265,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,1422,,"    driver.run(""insert into table "" + tblName + "" values (1)"");"
116266,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java,1661,,"    Database db = new Database(""cleanup1"", ""no description"", testTempDir, emptyParameters);"
116267,./TargetProjects/hive/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/mapreduce/TestHCatHiveCompatibility.java,59,,"    Table table = client.getTable(""default"", ""junit_unparted_noisd"");"
116268,./TargetProjects/hive/itests/hive-unit/src/main/java/org/hadoop/hive/jdbc/SSLTestUtils.java,51,,"    confOverlay.put(HiveConf.ConfVars.HIVE_SERVER2_USE_SSL.varname, ""true"");"
116269,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/hooks/TestHs2Hooks.java,189,,"    connProp.setProperty(""user"", System.getProperty(""user.name""));"
116270,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestAcidTableSetup.java,79,,"    params.put(""transactional"", """");"
116271,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestAcidTableSetup.java,92,,"      fail(""Expected exception"");"
116272,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestAcidTableSetup.java,118,,"      params.put(""transactional"", ""true"");"
116273,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestDisallowColChangesExceptionList.java,62,,"        .getConnection(miniHS2.getJdbcURL(), ""hive"", ""hive"");"
116274,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreAlterColumnPar.java,62,,"    Connection hs2Conn = DriverManager.getConnection(miniHS2.getJdbcURL(), ""hive"", ""hive"");"
116275,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,127,,"      final String dbName = ""db1"";"
116276,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,133,,"      tProps.put(""DBNAME"", dbName);"
116277,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,134,,"      tProps.put(""TBLNAME"", tblName);"
116278,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,135,,"      tProps.put(""TBLTYPE"", TableType.EXTERNAL_TABLE);"
116279,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,136,,"      tProps.put(""BUCKETS"", buckets);"
116280,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,138,,"      properties.append(""EXTERNAL"").append(""="").append(""TRUE"");"
116281,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,138,,"      properties.append(""EXTERNAL"").append(""="").append(""TRUE"");"
116282,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,140,,"      tProps.put(""PROPERTIES"", properties.toString());"
116283,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,143,,"      setHMSClient(""testTranformerWithOldTables"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116284,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,143,,"      setHMSClient(""testTranformerWithOldTables"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116285,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,143,,"      setHMSClient(""testTranformerWithOldTables"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116286,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,184,,"      LOG.info(""Table="" + tblName + "",Access="" + tbl2.getAccessType());"
116287,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,187,,"      assertEquals(""TableType mismatch"", TableType.EXTERNAL_TABLE.name(), tbl2.getTableType());"
116288,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,189,,"      assertEquals(""Table access type does not match expected value:"" + tblName,"
116289,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,223,,"      assertEquals(""Table access type does not match the expected value:"" + tblName,"
116290,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,235,,"      assertNotNull(""Required write capabilities is null"","
116291,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,264,,"      assertNull(""Required read capabilities are not null"", tbl2.getRequiredReadCapabilities());"
116292,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,279,,"      setHMSClient(""testTransformerExternalTableSpark"", (new String[] { ""HIVEFULLACIDREAD"", ""CONNECTORREAD""}));"
116293,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,279,,"      setHMSClient(""testTransformerExternalTableSpark"", (new String[] { ""HIVEFULLACIDREAD"", ""CONNECTORREAD""}));"
116294,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,348,,"      properties.append(""transactional=true"");"
116295,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,350,,"      properties.append(""transactional_properties=insert_only"");"
116296,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,353,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116297,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,353,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116298,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,353,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116299,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,361,,"      setHMSClient(""testMGDwithConnectorRead"", new String[] {""CONNECTORREAD""});"
116300,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,367,,"              tbl2.getRequiredWriteCapabilities().contains(""CONNECTORWRITE""));"
116301,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,400,,"                .append(""HIVEMANAGEDSTATS,CONNECTORREAD,CONNECTORWRITE"");"
116302,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,413,,"      setHMSClient(""testMGDwithAllWrites"", new String[] { ""HIVEMANAGEDINSERTWRITE"", ""HIVECACHEINVALIDATE"","
116303,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,414,,"          ""HIVEMANAGEDSTATS"" , ""CONNECTORWRITE"" });"
116304,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,615,,"      properties.append(CAPABILITIES_KEY).append(""="").append(""HIVESQL"");"
116305,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,624,,"      setHMSClient(""testTransformerVirtualView"", (new String[] { ""HIVESQL"" }));"
116306,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,700,,"          ""HIVEMANAGESTATS"", ""HIVEMQT"", ""CONNECTORREAD"" }));"
116307,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,758,,"      String tblName = ""test_get_tables_ext"";"
116308,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,776,,"      tProps.put(""TABLECOUNT"", count);"
116309,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,784,,"      LOG.debug(""Return list size="" + extTables.size() + "",bitValue="" + requestedFields);"
116310,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,784,,"      LOG.debug(""Return list size="" + extTables.size() + "",bitValue="" + requestedFields);"
116311,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,787,,"        assertNull(""Return object should not have read capabilities"", tableInfo.getRequiredReadCapabilities());"
116312,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,788,,"        assertNull(""Return object should not have write capabilities"", tableInfo.getRequiredWriteCapabilities());"
116313,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,789,,"        assertEquals(""AccessType not expected to be set"", 0, tableInfo.getAccessType());"
116314,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,795,,"      assertEquals(""Return list size does not match expected size"", count, extTables.size());"
116315,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,827,,"      extTables = client.getTablesExt(null, dbName, ""test_limit*"", requestedFields, count);"
116316,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,828,,"      assertEquals(""Unexpected number of tables returned"", count, extTables.size());"
116317,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,962,,"      table_params.append(""key1=val1"");"
116318,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,975,,"      assertEquals(""Table type expected to be EXTERNAL"", ""EXTERNAL_TABLE"", tbl2.getTableType());"
116319,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,996,,"      assertNotNull(""external.table.purge is expected to be non-null"", tbl2.getParameters().get(""external.table.purge""));"
116320,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1060,,"        assertTrue(""Table params expected to contain ACID properties"","
116321,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1061,,"            tbl2.getParameters().get(""transactional"").equals(""true""));"
116322,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1061,,"            tbl2.getParameters().get(""transactional"").equals(""true""));"
116323,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1063,,"            ((tbl2.getParameters().get(""transactional_properties"") == null) ||"
116324,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1289,,"      assertEquals(""Table type expected to be MANAGED"", ""MANAGED_TABLE"", tbl2.getTableType());"
116325,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1289,,"      assertEquals(""Table type expected to be MANAGED"", ""MANAGED_TABLE"", tbl2.getTableType());"
116326,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1313,,"        fail(""alter_table expected to succeed but failed with new location:"" + newLocation);"
116327,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1509,,"      tProps.put(""DROPDB"", Boolean.FALSE);"
116328,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1540,,"      assertEquals(""AccessType does not match"", ACCESSTYPE_NONE, tbl.getAccessType());"
116329,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetastoreTransformer.java,1590,,"      tProps.put(""CATALOG"", catalog);"
116330,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,82,,"    conf.set(""dfs.namenode.acls.enabled"", ""true"");"
116331,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,84,,"    DFSTestUtil.createKey(""test_key_cm"", miniDFSCluster, conf);"
116332,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,85,,"    DFSTestUtil.createKey(""test_key_db"", miniDFSCluster, conf);"
116333,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,90,,"            ""hdfs://"" + miniDFSCluster.getNameNode().getHostAndPort()"
116334,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,133,,"    String tblName1 = ""encrtbl1"";"
116335,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,134,,"    String tblName2 = ""encrtbl2"";"
116336,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,135,,"    String typeName = ""Person"";"
116337,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,141,,"            .addParam(""repl.source.for"", ""1, 2, 3"")"
116338,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,141,,"            .addParam(""repl.source.for"", ""1, 2, 3"")"
116339,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,154,,"            new FieldSchema(""name"", ColumnType.STRING_TYPE_NAME, """"));"
116340,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,156,,"            new FieldSchema(""income"", ColumnType.INT_TYPE_NAME, """"));"
116341,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,159,,"    Path dirDb1 = new Path(warehouse.getWhRoot(), dbName1 +"".db"");"
116342,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,165,,"    Path part11 = new Path(dirTbl1, ""part1"");"
116343,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,166,,"    createFile(part11, ""testClearer11"");"
116344,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,175,,"    createFile(part12, ""testClearer12"");"
116345,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,183,,"            .addStorageDescriptorParam(""test_param_1"", ""Use this for comments etc"")"
116346,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,183,,"            .addStorageDescriptorParam(""test_param_1"", ""Use this for comments etc"")"
116347,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,203,,"      assertTrue(e.getMessage().contains(""can't be moved from encryption zone""));"
116348,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,598,,"            .addTableParam(""EXTERNAL"", ""true"")"
116349,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,599,,"            .addTableParam(""external.table.purge"", ""true"")"
116350,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,1237,,"    Path dirTbl1 = new Path(dirDb, ""tbl1"");"
116351,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,1279,,"    Path part12 = new Path(dirTbl1, ""part2"");"
116352,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,1412,,"            UserGroupInformation.createUserForTesting(""impala"", new String[] {""testgroup""});"
116353,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetaStoreMultipleEncryptionZones.java,1414,,"    fsWarehouse.setOwner(dirDb, ""impala"", ""default"");"
116354,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetastoreVersion.java,63,,"    System.setProperty(HiveConf.ConfVars.METASTORE_SCHEMA_VERIFICATION.toString(), ""false"");"
116355,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetastoreVersion.java,64,,"    System.setProperty(HiveConf.ConfVars.METASTORE_AUTO_CREATE_ALL.toString(), ""true"");"
116356,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestMetastoreVersion.java,136,,"      driver.run(""show tables"");"
116357,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,101,,"      ""hdfs://"" + permDdfs.getNameNode().getHostAndPort() + HiveConf.ConfVars.METASTOREWAREHOUSE.defaultStrVal);"
116358,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,168,,"    columns.add(new FieldSchema(""foo"", ""string"", """"));"
116359,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,270,,"    Path filePath1 = new Path(warehouse.getDefaultTablePath(db, tblName), ""part1"");"
116360,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,274,,"    Path filePath2 = new Path(warehouse.getDefaultTablePath(db, tblName), ""part2"");"
116361,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,312,,"    Path dirDb = new Path(warehouse.getWhRoot(), ""db3"");"
116362,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,368,,"        Assert.fail(""timeout, cmroot has not been cleared"");"
116363,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,397,,"      UserGroupInformation.createRemoteUser(""impala"");"
116364,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,401,,"    fs.setOwner(dirTbl1, ""impala"", ""default"");"
116365,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestReplChangeManager.java,456,,"            UserGroupInformation.createUserForTesting(""impala2"", new String[] {""supergroup""});"
116366,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestServerSpecificConfig.java,60,,"        conf.get(""hive.dummyparam.test.server.specific.config.override""));"
116367,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestServerSpecificConfig.java,63,,"        conf.get(""hive.dummyparam.test.server.specific.config.metastoresite""));"
116368,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestServerSpecificConfig.java,65,,"    assertEquals(""from.hive-site.xml"","
116369,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,86,,"    wh = new File(System.getProperty(""java.io.tmpdir"") + File.separator +"
116370,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,87,,"        ""hive"" + File.separator + ""warehouse"" + File.separator + ""hive"" + File.separator);"
116371,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,87,,"        ""hive"" + File.separator + ""warehouse"" + File.separator + ""hive"" + File.separator);"
116372,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,148,,"      assertNotNull(""Database's locationUri is expected to be not null:actual="" + db2.getLocationUri());"
116373,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,151,,"      tProps.put(""DBNAME"", dbName);"
116374,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,152,,"      tProps.put(""TBLNAME"", tblName);"
116375,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,153,,"      tProps.put(""TBLTYPE"", TableType.EXTERNAL_TABLE);"
116376,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,155,,"      properties.append(""EXTERNAL"").append(""="").append(""TRUE"");"
116377,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,155,,"      properties.append(""EXTERNAL"").append(""="").append(""TRUE"");"
116378,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,157,,"      tProps.put(""PROPERTIES"", properties.toString());"
116379,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,160,,"      setHMSClient(""testCreateDatabaseOldSyntax"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116380,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,160,,"      setHMSClient(""testCreateDatabaseOldSyntax"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116381,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,160,,"      setHMSClient(""testCreateDatabaseOldSyntax"", (new String[] { ""HIVEBUCKET2"", ""EXTREAD"", ""EXTWRITE""}));"
116382,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,162,,"      assertEquals(""Created and retrieved tables do not match:"" + tbl2.getTableName() + "":"" + tblName,"
116383,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,168,,"      tblName = ""mgd_"" + basetblName;"
116384,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,173,,"      properties.append(""transactional=true"");"
116385,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,175,,"      properties.append(""transactional_properties=insert_only"");"
116386,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,178,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116387,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,178,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116388,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,178,,"      setHMSClient(""createTable"", new String[] {""HIVEMANAGEDINSERTWRITE"", ""HIVEFULLACIDWRITE""});"
116389,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestTenantBasedStorageHierarchy.java,198,,"      final String dbName = ""dbx"";"
116390,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,52,,"  private String[] colType = new String[] {""double"", ""string""};"
116391,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,154,,"    String dbOwner = ""user1"";"
116392,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,241,,"    FieldSchema col1 = new FieldSchema(""col1"", ""int"", ""integer column"");"
116393,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,241,,"    FieldSchema col1 = new FieldSchema(""col1"", ""int"", ""integer column"");"
116394,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,242,,"    FieldSchema col2 = new FieldSchema(""col2"", ""string"", ""string column"");"
116395,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,875,,"    String[] colName = new String[]{""income"", ""name""};"
116396,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,875,,"    String[] colName = new String[]{""income"", ""name""};"
116397,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/cache/TestCachedStoreUpdateUsingEvents.java,885,,"    tblName = ""tbl_part"";"
116398,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/metatool/TestHiveMetaTool.java,106,,"              + File.separator + ""mapred"" + File.separator + ""local"");"
116399,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/metatool/TestHiveMetaTool.java,233,,"            ""location '"" + getTestDataDir() + ""/ext/tblLoc'"");"
116400,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/metatool/TestHiveMetaTool.java,234,,"    runStatementOnDriver(""alter table db3.ext add partition(p = 0) location '"" + getTestDataDir() + ""/part'"" );"
116401,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/schematool/TestSchemaToolCatalogOps.java,109,,"    String argsCreate = String.format(""-createCatalog %s -catalogLocation \""%s\"" -catalogDescription \""%s\"""","
116402,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/schematool/TestSchemaToolCatalogOps.java,210,,"        .setLocation(""file:///tmp"")"
116403,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/tools/schematool/TestSchemaToolCatalogOps.java,227,,"        .addCol(""a"", ""int"")"
116404,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,133,,"    runStatementOnDriver(""create table "" + Table.ACIDTBL + ""(a int, b int) clustered by (a) into "" + BUCKET_COUNT"
116405,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,142,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBL + ""(a,b) values(1,2)"");"
116406,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,180,,"    testJoin(""mr"", ""MergeJoin"");"
116407,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,190,,"    testJoin(""tez"", ""MergeJoin"");"
116408,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,213,,"      {""1\t2"", AbstractFileMergeOperator.UNION_SUDBIR_PREFIX + ""1/000000_0""},"
116409,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,215,,"      {""5\t6"", AbstractFileMergeOperator.UNION_SUDBIR_PREFIX + ""1/000000_0""},"
116410,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,216,,"      {""5\t6"", AbstractFileMergeOperator.UNION_SUDBIR_PREFIX + ""2/000000_0""},"
116411,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,220,,"    Assert.assertEquals(""Unexpected row count after ctas"", expected0.length, rs.size());"
116412,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,223,,"      Assert.assertTrue(""Actual line "" + i + "" bc: "" + rs.get(i), rs.get(i).startsWith(expected0[i][0]));"
116413,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,223,,"      Assert.assertTrue(""Actual line "" + i + "" bc: "" + rs.get(i), rs.get(i).startsWith(expected0[i][0]));"
116414,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,224,,"      Assert.assertTrue(""Actual line(file) "" + i + "" bc: "" + rs.get(i), rs.get(i).endsWith(expected0[i][1]));"
116415,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,227,,"    runStatementOnDriver(""alter table "" + Table.NONACIDNONBUCKET + "" SET TBLPROPERTIES ('transactional'='true')"", confForTez);"
116416,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,229,,"    rs = runStatementOnDriver(""select ROW__ID, a, b, INPUT__FILE__NAME from "" + Table.NONACIDNONBUCKET + "" order by ROW__ID"", confForTez);"
116417,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,229,,"    rs = runStatementOnDriver(""select ROW__ID, a, b, INPUT__FILE__NAME from "" + Table.NONACIDNONBUCKET + "" order by ROW__ID"", confForTez);"
116418,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,253,,"    runStatementOnDriver(""delete from "" + Table.NONACIDNONBUCKET + "" where a = 5"", confForTez);"
116419,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,265,,"    Assert.assertEquals(""Unexpected row count after update"", expected2.length, rs.size());"
116420,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,275,,"    String[] expectedDelDelta = {""delete_delta_0000001_0000001_0000"", ""delete_delta_0000002_0000002_0000""};"
116421,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,284,,"      Assert.assertNull(""at "" + i + "" "" + expectedDelDelta[i] + "" not found on disk"", expectedDelDelta[i]);"
116422,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,284,,"      Assert.assertNull(""at "" + i + "" "" + expectedDelDelta[i] + "" not found on disk"", expectedDelDelta[i]);"
116423,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,411,,"      {""{\""writeid\"":0,\""bucketid\"":536870912,\""rowid\"":1}\t1\t2\t1"", ""nonacidpart/p=1/"" + AbstractFileMergeOperator.UNION_SUDBIR_PREFIX + ""1/000000_0""},"
116424,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,434,,"      Assert.assertTrue(""Actual line "" + i + "" ac: "" + rs.get(i), rs.get(i).startsWith(expected[i][0]));"
116425,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,476,,"      {""{\""writeid\"":1,\""bucketid\"":536870913,\""rowid\"":0}\t5\t6"", ""/delta_0000001_0000001_0001/bucket_00000""},"
116426,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,479,,"      {""{\""writeid\"":1,\""bucketid\"":536870914,\""rowid\"":0}\t9\t10"", ""/delta_0000001_0000001_0002/bucket_00000""},"
116427,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,603,,"      {""1\t2"",""warehouse/t/"" + AbstractFileMergeOperator.UNION_SUDBIR_PREFIX + ""1/000000_0""},"
116428,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,629,,"           ""warehouse/t/base_-9223372036854775808_v0000023/bucket_00000""},"
116429,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,767,,"          ""default"", Table.ACIDTBL.name, null, slr.getLocks());"
116430,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAcidOnTez.java,979,,"          TestTxnCommands2.assertExplainHasString(""Merge Join Operator"", explain, ""Didn't find "" + joinType);"
116431,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAutoPurgeTables.java,189,,"    LOG.info(""Running "" + name.getMethodName());"
116432,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAutoPurgeTables.java,190,,"    testUtil(""true"", false, false, false, name.getMethodName());"
116433,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestAutoPurgeTables.java,262,,"    testUtil(""false"", false, false, false, name.getMethodName());"
116434,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestMetaStoreLimitPartitionRequest.java,149,,"    executeQuery(queryString, ""value2"", ""value6"", ""value9"");"
116435,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/TestWarehouseDnsPath.java,34,,"    conf.set(""fs.defaultFS"", ""hdfs://localhost"");"
116436,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/log/syslog/TestSysLogSerDe.java,51,,"    Assert.assertEquals(""INFO"", results.get(1));"
116437,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationAcrossInstances.java,57,,"    conf.set(""dfs.client.use.datanode.hostname"", ""true"");"
116438,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationScenariosAcidTables.java,85,,"    conf.set(""dfs.client.use.datanode.hostname"", ""true"");"
116439,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationScenariosAcidTables.java,93,,"      put(""hive.metastore.client.capability.check"", ""false"");"
116440,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationScenariosAcidTables.java,145,,"    primary.run(""drop database if exists "" + primaryDbName + "" cascade"");"
116441,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationScenariosAcidTables.java,152,,"    primary.run(""use "" + primaryDbName)"
116442,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/BaseReplicationScenariosAcidTables.java,344,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(primaryConf, ""select * from TXNS""),"
116443,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,54,,"    selectStmtList.add(""select key from "" + tableName + "" order by key"");"
116444,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,54,,"    selectStmtList.add(""select key from "" + tableName + "" order by key"");"
116445,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,70,,"    selectStmtList.add(""select count(*) from "" + tableName);"
116446,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,72,,"    selectStmtList.add(""select count(*) from "" + tableName + ""_nopart"");"
116447,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,91,,"    primary.run(""use "" + primaryDbName)"
116448,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,92,,"            .run(""alter table "" + tableName + "" change value value1 int "")"
116449,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,93,,"            .run(""select value1 from "" + tableName)"
116450,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,142,,"    expectedValues.add(new String[] {""creation"", ""creation"", ""creation"", ""creation"", ""creation"","
116451,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,143,,"            ""creation"", ""creation"", ""merge_update"", ""merge_insert"", ""merge_insert""});"
116452,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,301,,"    primary.run(""CREATE TABLE "" + tableName + "" (key int, value int) PARTITIONED BY (load_date date) "" +"
116453,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,301,,"    primary.run(""CREATE TABLE "" + tableName + "" (key int, value int) PARTITIONED BY (load_date date) "" +"
116454,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,302,,"            ""CLUSTERED BY(key) INTO 3 BUCKETS "" + storageType + "" TBLPROPERTIES ( "" + tableProperty + "")"")"
116455,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,302,,"            ""CLUSTERED BY(key) INTO 3 BUCKETS "" + storageType + "" TBLPROPERTIES ( "" + tableProperty + "")"")"
116456,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,303,,"            .run(""SHOW TABLES LIKE '"" + tableName + ""'"")"
116457,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,305,,"            .run(""CREATE TABLE "" + tableName + ""_nopart (key int, value int) "" +"
116458,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,310,,"            .run(""INSERT INTO "" + tableName + "" partition (load_date='2016-03-01') VALUES (1, 1)"")"
116459,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/ReplicationTestUtils.java,377,,"        .run(""insert overwrite table "" + tableNameOp + "" select * from "" + tableName)"
116460,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,91,,"    String path = ""hdfs:///tmp/"" + dbName + ""/"";"
116461,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,95,,"        .run(""use "" + dbName)"
116462,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,108,,"    String exportMDPath = ""'"" + path + ""1/'"";"
116463,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,110,,"    srcHiveWarehouse.run(""create table "" + dbName + "".t1 (i int)"")"
116464,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,111,,"        .run(""insert into table "" + dbName + "".t1 values (1),(2)"")"
116465,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,111,,"        .run(""insert into table "" + dbName + "".t1 values (1),(2)"")"
116466,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,112,,"        .run(""export table "" + dbName + "".t1 to "" + exportMDPath + "" for metadata replication('1')"")"
116467,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,112,,"        .run(""export table "" + dbName + "".t1 to "" + exportMDPath + "" for metadata replication('1')"")"
116468,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,112,,"        .run(""export table "" + dbName + "".t1 to "" + exportMDPath + "" for metadata replication('1')"")"
116469,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,115,,"    destHiveWarehouse.run(""import table "" + replDbName + "".t1 from "" + exportMDPath)"
116470,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,115,,"    destHiveWarehouse.run(""import table "" + replDbName + "".t1 from "" + exportMDPath)"
116471,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestExportImport.java,117,,"        .run(""select * from "" + replDbName + "".t1"")"
116472,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestMetaStoreEventListenerInRepl.java,66,,"    TestMetaStoreEventListenerInRepl.conf.set(""dfs.client.use.datanode.hostname"", ""true"");"
116473,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestMetaStoreEventListenerInRepl.java,112,,"    primary.run(""use "" + primaryDbName)"
116474,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,112,,"        .run(""use "" + primaryDbName)"
116475,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,113,,"        .run(""create "" + tableType + "" table t1 (id int)"")"
116476,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,113,,"        .run(""create "" + tableType + "" table t1 (id int)"")"
116477,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,118,,"        .run(""show tables like 't1'"")"
116478,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,120,,"        .run(""repl status "" + replicatedDbName)"
116479,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,127,,"        .run(""drop table t1"")"
116480,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,138,,"        .run(""alter database ""+ replicatedDbName + "" set DBPROPERTIES('repl.last.id'='"" + replId + ""')"");"
116481,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,138,,"        .run(""alter database ""+ replicatedDbName + "" set DBPROPERTIES('repl.last.id'='"" + replId + ""')"");"
116482,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,422,,"        .run(""show tables like 't1_renamed'"")"
116483,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,423,,"        .verifyResults(new String[] {""t1_renamed""})"
116484,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,505,,"        .run(""show partitions t1"")"
116485,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationIncrementalCheckpointing.java,506,,"        .verifyResults(new String[] {""country=india""})"
116486,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,97,,"    WarehouseInstance.Tuple tuple = primary.run(""use "" + primaryDbName).run(""create external table table1 (id int)"")"
116487,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,138,,"    fs.mkdirs(externalTableLocation, new FsPermission(""777""));"
116488,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,142,,"      outputStream.write(""1,2\n"".getBytes());"
116489,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,143,,"      outputStream.write(""13,21\n"".getBytes());"
116490,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,147,,"        .run(""create external table tablea (i int, j int) row format delimited fields terminated by ',' "" + ""location '"""
116491,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,251,,"        new String[] { ""-dumpFilePath"", tuple.dumpLocation, ""-fileLevelCheck"", ""-verifyOpenFiles"" });"
116492,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,251,,"        new String[] { ""-dumpFilePath"", tuple.dumpLocation, ""-fileLevelCheck"", ""-verifyOpenFiles"" });"
116493,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,258,,"    assertFalse(out.toString(), out.toString().contains(""Completed verification. Source & Target are in Sync.""));"
116494,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationMigrationTool.java,259,,"    assertTrue(out.toString(), out.toString().contains(""Completed verification. Source & Target are not in Sync.""));"
116495,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,73,,"    conf.set(""dfs.client.use.datanode.hostname"", ""true"");"
116496,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,125,,"    primary.run(""use "" + primaryDbName)"
116497,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,155,,"            .run(""select msg from "" + tblName + "" order by msg"")"
116498,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,155,,"            .run(""select msg from "" + tblName + "" order by msg"")"
116499,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,156,,"            .verifyResults((new String[] {""val1"", ""val2""}));"
116500,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,156,,"            .verifyResults((new String[] {""val1"", ""val2""}));"
116501,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,177,,"            .verifyResults((new String[] {""val1"", ""val2"", ""val3"", ""val4""}));"
116502,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,177,,"            .verifyResults((new String[] {""val1"", ""val2"", ""val3"", ""val4""}));"
116503,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,240,,"            .run(""select msg from "" + tblName + "" where continent='Asia' and country='India' order by msg"")"
116504,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOfHiveStreaming.java,325,,"            .verifyResults((new String[] {""val12""}));"
116505,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOnHDFSEncryptedZones.java,74,,"      put(HiveConf.ConfVars.HIVE_IN_TEST.varname, ""false"");"
116506,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationOnHDFSEncryptedZones.java,116,,"        primary.run(""use "" + primaryDbName)"
116507,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,162,,"      System.getProperty(""test.warehouse.dir"", ""/tmp"") + Path.SEPARATOR + tid;"
116508,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,331,,"    String dumpCmd = ""REPL DUMP "" + dbName + withClause;"
116509,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,364,,"    run(""REPL LOAD "" + sourceDbNameOrPattern + "" INTO "" + replDbName + withClause, driverMirror);"
116510,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,364,,"    run(""REPL LOAD "" + sourceDbNameOrPattern + "" INTO "" + replDbName + withClause, driverMirror);"
116511,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,365,,"    verifyRun(""REPL STATUS "" + replDbName, lastReplId, driverMirror);"
116512,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,379,,"    run(""CREATE TABLE "" + dbName + "".unptned(a string) STORED AS TEXTFILE"", driver);"
116513,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,379,,"    run(""CREATE TABLE "" + dbName + "".unptned(a string) STORED AS TEXTFILE"", driver);"
116514,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,380,,"    run(""CREATE TABLE "" + dbName + "".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"", driver);"
116515,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,381,,"    run(""CREATE TABLE "" + dbName + "".unptned_empty(a string) STORED AS TEXTFILE"", driver);"
116516,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,382,,"    run(""CREATE TABLE "" + dbName + "".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"", driver);"
116517,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,384,,"    String[] unptn_data = new String[]{ ""eleven"" , ""twelve"" };"
116518,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,384,,"    String[] unptn_data = new String[]{ ""eleven"" , ""twelve"" };"
116519,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,385,,"    String[] ptn_data_1 = new String[]{ ""thirteen"", ""fourteen"", ""fifteen""};"
116520,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,385,,"    String[] ptn_data_1 = new String[]{ ""thirteen"", ""fourteen"", ""fifteen""};"
116521,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,385,,"    String[] ptn_data_1 = new String[]{ ""thirteen"", ""fourteen"", ""fifteen""};"
116522,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,386,,"    String[] ptn_data_2 = new String[]{ ""fifteen"", ""sixteen"", ""seventeen""};"
116523,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,386,,"    String[] ptn_data_2 = new String[]{ ""fifteen"", ""sixteen"", ""seventeen""};"
116524,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,389,,"    String unptn_locn = new Path(TEST_PATH, name + ""_unptn"").toUri().getPath();"
116525,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,390,,"    String ptn_locn_1 = new Path(TEST_PATH, name + ""_ptn1"").toUri().getPath();"
116526,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,391,,"    String ptn_locn_2 = new Path(TEST_PATH, name + ""_ptn2"").toUri().getPath();"
116527,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,397,,"    run(""LOAD DATA LOCAL INPATH '"" + unptn_locn + ""' OVERWRITE INTO TABLE "" + dbName + "".unptned"", driver);"
116528,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,397,,"    run(""LOAD DATA LOCAL INPATH '"" + unptn_locn + ""' OVERWRITE INTO TABLE "" + dbName + "".unptned"", driver);"
116529,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,397,,"    run(""LOAD DATA LOCAL INPATH '"" + unptn_locn + ""' OVERWRITE INTO TABLE "" + dbName + "".unptned"", driver);"
116530,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,398,,"    verifySetup(""SELECT * from "" + dbName + "".unptned"", unptn_data, driver);"
116531,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,399,,"    run(""LOAD DATA LOCAL INPATH '"" + ptn_locn_1 + ""' OVERWRITE INTO TABLE "" + dbName + "".ptned PARTITION(b=1)"", driver);"
116532,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,400,,"    verifySetup(""SELECT a from "" + dbName + "".ptned WHERE b=1"", ptn_data_1, driver);"
116533,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,400,,"    verifySetup(""SELECT a from "" + dbName + "".ptned WHERE b=1"", ptn_data_1, driver);"
116534,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,401,,"    run(""LOAD DATA LOCAL INPATH '"" + ptn_locn_2 + ""' OVERWRITE INTO TABLE "" + dbName + "".ptned PARTITION(b=2)"", driver);"
116535,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,402,,"    verifySetup(""SELECT a from "" + dbName + "".ptned WHERE b=2"", ptn_data_2, driver);"
116536,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,403,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_empty"", empty, driver);"
116537,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,404,,"    verifySetup(""SELECT * from "" + dbName + "".unptned_empty"", empty, driver);"
116538,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,406,,"    String replicatedDbName = dbName + ""_dupe"";"
116539,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,550,,"    run(""insert into table "" + dbName + "".t2 partition(country='india') values ('bangalore')"", driver);"
116540,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,625,,"    run(""DROP TABLE "" + dbName + "".unptned"", driver);"
116541,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,628,,"    run(""ALTER TABLE "" + dbName + "".ptned "" + ""DROP PARTITION(b=1)"", driver);"
116542,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,706,,"    verifySetup(""SELECT * from "" + dbName + "".unptned ORDER BY a"", unptn_data, driver);"
116543,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,730,,"    run(""CREATE VIEW "" + dbName + ""_withview.view AS SELECT * FROM "" + dbName + ""_withview.unptned"", driverMirror);"
116544,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,772,,"        if (table.getTableName().equalsIgnoreCase(""ptned"")){"
116545,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,801,,"    run(""DROP TABLE "" + dbName + "".ptned"", driver);"
116546,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,915,,"                driver2.run(""ALTER TABLE "" + dbName + "".ptned RENAME TO "" + dbName + "".ptned_renamed"");"
116547,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,915,,"                driver2.run(""ALTER TABLE "" + dbName + "".ptned RENAME TO "" + dbName + "".ptned_renamed"");"
116548,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1049,,"    verifySetup(""SELECT * from "" + dbName + "".unptned_late"", unptn_data, driver);"
116549,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1056,,"    run(""CREATE TABLE "" + dbName + "".ptned_late(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"", driver);"
116550,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1058,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_late WHERE b=1"",ptn_data_1, driver);"
116551,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1060,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_late WHERE b=2"", ptn_data_2, driver);"
116552,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1095,,"    run(""CREATE DATABASE "" + bootstrapDb, driver);"
116553,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1202,,"    run(""INSERT INTO TABLE "" + dbName + "".unptned values('ten')"", driver);"
116554,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1202,,"    run(""INSERT INTO TABLE "" + dbName + "".unptned values('ten')"", driver);"
116555,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1211,,"    run(""TRUNCATE TABLE "" + dbName + "".unptned"", driver);"
116556,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1212,,"    run(""INSERT INTO TABLE "" + dbName + "".unptned values('"" + unptn_data[0] + ""')"", driver);"
116557,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1338,,"    verifySetup(""SELECT a from "" + dbName + "".ptned WHERE b='1'"", ptn_data_1, driver);"
116558,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1340,,"    verifySetup(""SELECT a from "" + dbName + "".ptned WHERE b='2'"", ptn_data_2, driver);"
116559,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1342,,"    verifySetup(""SELECT a from "" + dbName + "".ptned2 WHERE b='1'"", ptn_data_1, driver);"
116560,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1344,,"    verifySetup(""SELECT a from "" + dbName + "".ptned2 WHERE b='2'"", ptn_data_2, driver);"
116561,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1379,,"    verifyIfTableNotExist(replDbName, ""unptned"", metaStoreClientMirror);"
116562,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1431,,"    run(""CREATE TABLE "" + dbName + "".unptned_copy"" + "" AS SELECT a FROM "" + dbName + "".unptned"", driver);"
116563,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1432,,"    run(""CREATE TABLE "" + dbName + "".ptned_copy"" + "" LIKE "" + dbName + "".ptned"", driver);"
116564,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1499,,"    run(""LOAD DATA LOCAL INPATH '"" + unptn_locn + ""' OVERWRITE INTO TABLE "" + dbName + "".unptned2"", driver);"
116565,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1525,,"    run(""ALTER TABLE "" + dbName + "".unptned RENAME TO "" + dbName + "".unptned_rn"", driver);"
116566,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1531,,"    run(""ALTER TABLE "" + dbName + "".unptned2 SET TBLPROPERTIES ('"" + testKey + ""' = '"" + testVal + ""')"", driver);"
116567,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1629,,"    run(""ALTER DATABASE "" + dbName + "" SET OWNER USER "" + ownerName, driver);"
116568,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1714,,"    String tableRelativeSrcPath = dbName.toLowerCase()+"".db"" + File.separator + ""unptned"";"
116569,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1724,,"    String partitionRelativeSrcPath = dbName.toLowerCase()+"".db"" + File.separator + ""ptned"" + File.separator + ""b=1"";"
116570,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1734,,"    partitionRelativeSrcPath = dbName.toLowerCase()+"".db"" + File.separator + ""ptned"" + File.separator + ""b=2"";"
116571,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1775,,"    run(""CREATE TABLE "" + dbName + "".unptned_late LIKE "" + dbName + "".unptned"", driver);"
116572,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1776,,"    run(""INSERT INTO TABLE "" + dbName + "".unptned_late SELECT * FROM "" + dbName + "".unptned"", driver);"
116573,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1790,,"    run(""ALTER TABLE "" + dbName + "".ptned ADD PARTITION (b=1)"", driver);"
116574,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1800,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned_late PARTITION(b=1) SELECT a FROM "" + dbName"
116575,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1804,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned_late PARTITION(b=2) SELECT a FROM "" + dbName"
116576,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1908,,"    verifySetup(""SELECT * from "" + dbName + "".unptned_late ORDER BY a"", unptn_data, driver);"
116577,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1916,,"    String[] data_after_ovwrite = new String[] { ""hundred"" };"
116578,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1919,,"    run(""INSERT OVERWRITE TABLE "" + dbName + "".unptned values('"" + data_after_ovwrite[0] + ""')"", driver);"
116579,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1935,,"    String[] ptn_data = new String[]{ ""ten""};"
116580,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,1936,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned partition(b=1) values('"" + ptn_data[0] + ""')"", driver);"
116581,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2428,,"      LOG.warn(""Sleep unsuccesful"", e);"
116582,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2539,,"    run(""ALTER TABLE "" + dbName + "".ptned ADD PARTITION (b=2)"", driver);"
116583,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2540,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned partition(b=2) values('"" + ptn_data_2[0] + ""')"", driver);"
116584,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2543,,"    verifySetup(""SELECT a from "" + dbName + "".ptned where (b=1) ORDER BY a"", ptn_data_1, driver);"
116585,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2544,,"    verifySetup(""SELECT a from "" + dbName + "".ptned where (b=2) ORDER BY a"", ptn_data_2, driver);"
116586,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2572,,"    run(""USE "" + dbName, driver);"
116587,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2574,,"    String[] ptn_data_1 = new String[] { ""abraham"", ""bob"", ""carter"" };"
116588,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2574,,"    String[] ptn_data_1 = new String[] { ""abraham"", ""bob"", ""carter"" };"
116589,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2574,,"    String[] ptn_data_1 = new String[] { ""abraham"", ""bob"", ""carter"" };"
116590,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2584,,"    verifySetup(""SELECT name from "" + dbName + "".namelist where (year=1980) ORDER BY name"", ptn_year_1980, driver);"
116591,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2584,,"    verifySetup(""SELECT name from "" + dbName + "".namelist where (year=1980) ORDER BY name"", ptn_year_1980, driver);"
116592,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2585,,"    verifySetup(""SELECT name from "" + dbName + "".namelist where (day=1) ORDER BY name"", ptn_day_1, driver);"
116593,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2586,,"    verifySetup(""SELECT name from "" + dbName + "".namelist where (year=1984 and month=4 and day=1) ORDER BY name"","
116594,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2588,,"    verifySetup(""SELECT name from "" + dbName + "".namelist ORDER BY name"", ptn_data_1, driver);"
116595,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2589,,"    verifySetup(""SHOW PARTITIONS "" + dbName + "".namelist"", ptn_list_1, driver);"
116596,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2589,,"    verifySetup(""SHOW PARTITIONS "" + dbName + "".namelist"", ptn_list_1, driver);"
116597,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2591,,"                              ""location"", ""namelist/year=1980/month=4/day=1"", driver);"
116598,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2607,,"    String[] ptn_data_2 = new String[] { ""abraham"", ""bob"", ""carter"", ""david"", ""eugene"" };"
116599,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2675,,"    verifyFail(""SELECT * FROM "" + dbName + "".unptned"", driver);"
116600,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2696,,"    run(""CREATE TABLE "" + dbName + "".ptned(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"", driver);"
116601,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2723,,"    run(""DROP TABLE "" + dbName + "".ptned_tmp"", driver);"
116602,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2820,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned PARTITION(b=\"""" + ptnVal +""\"") values('"" + ptn_data[0] + ""')"", driver);"
116603,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,2954,,"    LOG.info(""Testing "" + testName);"
116604,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3050,,"    verifySetup(""SELECT * from "" + dbName + "".virtual_view"", empty, driver);"
116605,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3094,,"    verifyRun(""SELECT a from "" + replDbName + "".ptned where b=1"", ptn_data_1, driverMirror);"
116606,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3104,,"    run(""ALTER VIEW "" + dbName + "".virtual_view RENAME TO "" + dbName + "".virtual_view_rename"", driver);"
116607,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3170,,"    run(""CREATE MATERIALIZED VIEW "" + dbName + "".mat_view_boot disable rewrite  stored as textfile AS SELECT a FROM "" + dbName + "".ptned where b=1"", driver);"
116608,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3183,,"    verifyIfTableNotExist(replDbName, ""mat_view_boot2"", metaStoreClientMirror);"
116609,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3190,,"    verifyIfTableExist(dbName, ""mat_view_rename"", metaStoreClient);"
116610,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3256,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_src where (b=2 and c=2) ORDER BY a"", ptn_data_2, driver);"
116611,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3257,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_src where (b=2 and c=3) ORDER BY a"", ptn_data_2, driver);"
116612,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3269,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_src where (b=1 and c=1)"", empty, driver);"
116613,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3272,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_dest where (b=1 and c=1) ORDER BY a"", ptn_data_1, driver);"
116614,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3360,,"    verifySetup(""SELECT a from "" + dbName + "".ptned_1 where (b=1) ORDER BY a"", ptn_data_1, driver);"
116615,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3460,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned PARTITION(b=1) values('"" + ptn_data_1[0] + ""')"", driver);"
116616,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3475,,"    run(""INSERT INTO TABLE "" + dbName + "".ptned PARTITION(b=2) values('"" + ptn_data_2[0] + ""')"", driver);"
116617,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3829,,"      List<SQLDefaultConstraint> dks = metaStoreClientMirror.getDefaultConstraints(new DefaultConstraintsRequest(DEFAULT_CATALOG_NAME, replDbName, ""tbl10""));"
116618,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3910,,"    run(""ANALYZE TABLE "" + dbName + "".unptned COMPUTE STATISTICS FOR COLUMNS"", driver);"
116619,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3917,,"    verifySetup(""SELECT count(*) from "" + dbName + "".unptned"", new String[]{""2""}, driver);"
116620,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,3919,,"    verifySetup(""SELECT max(a) from "" + dbName + "".unptned"", new String[]{""2""}, driver);"
116621,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4044,,"    assertFalse(dbTblFilter.accept(createDummyEvent(dbname, tblname + ""extra"",0)));"
116622,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4153,,"    run(""CREATE TABLE "" + dbName + "".normal(a int)"", driver);"
116623,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4154,,"    run(""INSERT INTO "" + dbName + "".normal values (1)"", driver);"
116624,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4154,,"    run(""INSERT INTO "" + dbName + "".normal values (1)"", driver);"
116625,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4155,,"    run(""DROP TABLE "" + dbName + "".normal"", driver);"
116626,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4298,,"      logger = LogManager.getLogger(""hive.ql.metadata.Hive"");"
116627,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4388,,"    run(""insert into "" + tableNameNoPart + "" values (1) "", driver);"
116628,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java,4390,,"    verifyRun(""SELECT fld from "" + tableNameNoPart , new String[]{ ""1"" , ""2"" }, driver);"
116629,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,97,,"    conf.set(""dfs.client.use.datanode.hostname"", ""true"");"
116630,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,106,,"        put(""hive.metastore.client.capability.check"", ""false"");"
116631,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,143,,"    primary.run(""drop database if exists "" + primaryDbName + "" cascade"");"
116632,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,143,,"    primary.run(""drop database if exists "" + primaryDbName + "" cascade"");"
116633,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,163,,"    primary.run(""use "" + primaryDbName)"
116634,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,164,,"            .run(""CREATE TABLE t1(a string) STORED AS TEXTFILE"")"
116635,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,207,,"    replica.run(""REPL LOAD "" + primaryDbName + "" INTO "" + replicatedDbName);"
116636,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,207,,"    replica.run(""REPL LOAD "" + primaryDbName + "" INTO "" + replicatedDbName);"
116637,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,246,,"      primary.run(""CREATE DATABASE "" + dbName + "" WITH DBPROPERTIES ( '"" +"
116638,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,247,,"              SOURCE_OF_REPLICATION + ""' = '1,2,3')"");"
116639,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,249,,"      primary.run(""CREATE TABLE "" + dbName + "".t1 (id int)"");"
116640,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,261,,"      primary.run(""INSERT INTO "" + dbName + "".t1 VALUES(1)"");"
116641,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,265,,"      primary.run(""DESCRIBE ""+ dbName + "".t1"");"
116642,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,321,,"    WarehouseInstance.Tuple incrementalDump1 = primary.run(""insert into t1 values (1)"")"
116643,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,365,,"        .run(""select id from t1 order by id"")"
116644,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,385,,"            .run(""create table t1 (id int) clustered by(id) into 3 buckets stored as orc "" +"
116645,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,386,,"                    ""tblproperties (\""transactional\""=\""true\"")"")"
116646,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,387,,"            .run(""insert into t1 values(1)"")"
116647,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,388,,"            .run(""create table t2 (rank int) partitioned by (name string) tblproperties(\""transactional\""=\""true\"", "" +"
116648,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,389,,"                    ""\""transactional_properties\""=\""insert_only\"")"")"
116649,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,390,,"            .run(""insert into t2 partition(name='Bob') values(11)"")"
116650,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,391,,"            .run(""insert into t2 partition(name='Carl') values(10)"");"
116651,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,402,,"      ""'""+ HiveConf.ConfVars.REPL_BOOTSTRAP_DUMP_OPEN_TXN_TIMEOUT+""'='1s'"");"
116652,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,417,,"            .run(""show tables"")"
116653,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,419,,"            .run(""repl status "" + replicatedDbName)"
116654,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,421,,"            .run(""select id from t1"")"
116655,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,423,,"            .run(""select rank from t2 order by rank"")"
116656,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,517,,"    List<Long> lockIds = allocateWriteIdsForTablesAndAquireLocks(primaryDbName + ""_extra"","
116657,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,592,,"      ""'"" + HiveConf.ConfVars.REPL_BOOTSTRAP_DUMP_ABORT_WRITE_TXN_AFTER_TIMEOUT + ""'='false'"");"
116658,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,606,,"      ""'"" + HiveConf.ConfVars.REPL_BOOTSTRAP_DUMP_ABORT_WRITE_TXN_AFTER_TIMEOUT + ""'='true'"");"
116659,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,806,,"                driver.run(""insert into "" + primaryDbName + "".t1 values(2)"");"
116660,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,928,,"            .verifyResult(""100"");"
116661,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,936,,"            .run(""REPL STATUS "" + replicatedDbName)"
116662,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,941,,"            "" (key int, value int) PARTITIONED BY (load_date date) "" +"
116663,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,943,,"            .run(""SHOW TABLES LIKE '"" + tableName + ""'"")"
116664,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,945,,"            .run(""INSERT INTO "" + tableName + "" partition (load_date='2016-03-01') VALUES (1, 1)"")"
116665,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,946,,"            .run(""select key from "" + tableName)"
116666,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1120,,"    primary.run(""drop database "" + dbName);"
116667,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1210,,"            .run(""CREATE TABLE t2(a string) STORED AS TEXTFILE"")"
116668,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1214,,"            .run(""select * from "" + replicatedDbName + "".t1"")"
116669,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1216,,"            .run(""select * from "" + replicatedDbName + "".t2"")"
116670,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1226,,"            .run(""insert into t2 values (2)"")"
116671,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1273,,"            .run(""insert into t1 values (3)"")"
116672,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1359,,"    Path dumpMetaData = new Path(hiveDumpDir, ""_dumpmetadata"");"
116673,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1438,,"            .run(""insert into t1 values (2)"")"
116674,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1603,,"            ""'"" + HiveConf.ConfVars.HIVE_EXEC_COPYFILE_MAXSIZE.varname + ""'='1'"","
116675,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1605,,"            ""'"" + HiveConf.ConfVars.HIVE_EXEC_COPYFILE_MAXNUMFILES.varname + ""'='0'"","
116676,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1606,,"            ""'"" + HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname + ""'='"""
116677,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1611,,"                    "" stored as orc TBLPROPERTIES ('transactional'='true')"")"
116678,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1806,,"            .run(""insert into t2 values (11)"")"
116679,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1807,,"            .run(""insert into t2 values (21)"")"
116680,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1894,,"            .run(""CREATE TABLE t2(a string) clustered by (a) into 2 buckets"" +"
116681,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,1933,,"            .run(""show tables "")"
116682,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2039,,"            .run(""select * from t1"")"
116683,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2041,,"            .run(""select * from t2"")"
116684,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2360,,"            .verifyResults(new String[]{""t1"", ""t2"", ""t3"", ""tpart1"", ""tpart2"", ""text1""})"
116685,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2360,,"            .verifyResults(new String[]{""t1"", ""t2"", ""t3"", ""tpart1"", ""tpart2"", ""text1""})"
116686,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2360,,"            .verifyResults(new String[]{""t1"", ""t2"", ""t3"", ""tpart1"", ""tpart2"", ""text1""})"
116687,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2365,,"            .run(""select a from "" + replicatedDbName + "".tpart1"")"
116688,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2365,,"            .run(""select a from "" + replicatedDbName + "".tpart1"")"
116689,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2366,,"            .verifyResults(new String[]{""100"", ""101""})"
116690,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2367,,"            .run(""show partitions "" + replicatedDbName + "".tpart1"")"
116691,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2368,,"            .verifyResults(new String[]{""name=Tom"", ""name=Jerry""})"
116692,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2368,,"            .verifyResults(new String[]{""name=Tom"", ""name=Jerry""})"
116693,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2369,,"            .run(""select a from "" + replicatedDbName + "".tpart2"")"
116694,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2370,,"            .verifyResults(new String[]{""200"", ""201""})"
116695,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2370,,"            .verifyResults(new String[]{""200"", ""201""})"
116696,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2372,,"            .verifyResults(new String[]{""name=Bob"", ""name=Carl""})"
116697,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2372,,"            .verifyResults(new String[]{""name=Bob"", ""name=Carl""})"
116698,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2373,,"            .run(""select a from "" + replicatedDbName + "".text1"")"
116699,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2374,,"            .verifyResults(new String[]{""ricky""});"
116700,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2400,,"            .verifyResults(new String[]{""t1"", ""t2"", ""t4"", ""tpart1"", ""tpart2"", ""tpart3"", ""tpart4"", ""text1""})"
116701,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2400,,"            .verifyResults(new String[]{""t1"", ""t2"", ""t4"", ""tpart1"", ""tpart2"", ""tpart3"", ""tpart4"", ""text1""})"
116702,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2404,,"            .verifyResults(new String[]{""2"", ""22"", ""222""})"
116703,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2408,,"            .verifyResults(new String[]{""100"", ""101"", ""102"", ""103""})"
116704,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2415,,"            .run(""select a from "" + replicatedDbName + "".tpart3"")"
116705,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java,2419,,"            .run(""select a from "" + replicatedDbName + "".tpart4"")"
116706,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTablesBootstrap.java,74,,"    LOG.info(testName.getMethodName() + "": loading dump without acid tables."");"
116707,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTablesBootstrap.java,82,,"    WarehouseInstance.Tuple incrementalDump = primary.run(""use "" + primaryDbName)"
116708,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,95,,"        ""true"");"
116709,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,103,,"        .run(""REPL STATUS "" + replicatedDbName)"
116710,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,106,,"    primary.run(""CREATE FUNCTION "" + primaryDbName"
116711,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,108,,"        + ""using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"")"
116712,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,118,,"        .run(""SHOW FUNCTIONS LIKE '"" + replicatedDbName + ""%'"")"
116713,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,119,,"        .verifyResults(new String[] { replicatedDbName + "".testFunctionOne""});"
116714,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,132,,"    Path identityUdf1HdfsPath = new Path(primary.functionsRoot, ""idFunc1"" + File.separator + ""identity_udf1.jar"");"
116715,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,132,,"    Path identityUdf1HdfsPath = new Path(primary.functionsRoot, ""idFunc1"" + File.separator + ""identity_udf1.jar"");"
116716,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,133,,"    Path identityUdf2HdfsPath = new Path(primary.functionsRoot, ""idFunc2"" + File.separator + ""identity_udf2.jar"");"
116717,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,133,,"    Path identityUdf2HdfsPath = new Path(primary.functionsRoot, ""idFunc2"" + File.separator + ""identity_udf2.jar"");"
116718,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,134,,"    List<String> withClause = Arrays.asList(""'"" + HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET.varname + ""'='false'"");"
116719,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,140,,"            + ""using jar  '"" + identityUdf1HdfsPath.toString() + ""'"");"
116720,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,146,,"            .verifyResults(new String[] { replicatedDbName + "".idFunc1""})"
116721,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,147,,"            .run(""SELECT "" + replicatedDbName + "".idFunc1('MyName')"")"
116722,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,177,,"    List<String> withClause = Arrays.asList(""'"" + HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET.varname + ""'='true'"");"
116723,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,216,,"    WarehouseInstance.Tuple tuple = primary.run(""use "" + primaryDbName)"
116724,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,232,,"                  LOG.warn(""Verifier - DB: "" + String.valueOf(args.dbName));"
116725,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,256,,"            .run(""repl status "" + replicatedDbName)"
116726,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,257,,"            .verifyResult(""null"")"
116727,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,258,,"            .run(""show functions like '"" + replicatedDbName + ""%'"")"
116728,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,443,,"        .run(""create table t1 (id int)"")"
116729,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,445,,"        .run(""create table t2 (place string) partitioned by (country string)"")"
116730,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,446,,"        .run(""insert into table t2 partition(country='india') values ('bangalore')"")"
116731,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,458,,"        .run(""show tables"")"
116732,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,462,,"        .run(""select country from t2 order by country"")"
116733,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,463,,"        .verifyResults(new String[] { ""france"", ""india"", ""us"" });"
116734,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,527,,"        .run(""create table  acid_table (key int, value int) partitioned by (load_date date) "" +"
116735,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,528,,"            ""clustered by(key) into 2 buckets stored as orc tblproperties ('transactional'='true')"")"
116736,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,531,,"        .dump(primaryDbName, Collections.singletonList(""'hive.repl.dump.metadata.only'='true'""));"
116737,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,536,,"        .verifyResults(new String[] { ""acid_table"", ""table1"" })"
116738,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,536,,"        .verifyResults(new String[] { ""acid_table"", ""table1"" })"
116739,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,537,,"        .run(""select * from table1"")"
116740,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,555,,"        .verifyResults(new String[] { ""table1"", ""table2"", ""table3"" })"
116741,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,555,,"        .verifyResults(new String[] { ""table1"", ""table2"", ""table3"" })"
116742,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,573,,"        .verifyResults(new String[] { ""renamed_table1"", ""table2"", ""table3"", ""table4"" })"
116743,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,576,,"        .run(""select * from table2"")"
116744,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,601,,"            ""country             \tstring              \t                    "","
116745,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,610,,"            ""custom.property\tcustom.value"""
116746,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,618,,"            .run(""create database "" + dbName)"
116747,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,664,,"                SOURCE_OF_REPLICATION + ""' = '1,2,3')"")"
116748,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,682,,"    primary.run(""drop database "" + primaryDbName + "" cascade"");"
116749,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,713,,"            .run(""create table table1 (i int)"")"
116750,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,714,,"            .run(""create table table2 (id int) partitioned by (country string)"")"
116751,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,715,,"            .run(""insert into table1 values (1)"")"
116752,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,753,,"            .run(""select id from table2 order by id"")"
116753,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,840,,"            .run(""insert into table1 values (2)"")"
116754,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1082,,"            .run(""alter database "" + replicatedDbName"
116755,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1512,,"    replica.run(""alter database "" + replicatedDbName + "" set DBPROPERTIES ('"" + SOURCE_OF_REPLICATION + ""' = '1,2,3')"")"
116756,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1682,,"        .run(""create table table1 (i String)"")"
116757,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1708,,"                    ""load_time=2012-02-21 07%3A08%3A09.123"","
116758,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1709,,"                    ""load_time=2012-02-21 07%3A08%3A09.124"","
116759,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1715,,"            .run(""create external table ext_table1 (id int)"")"
116760,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1716,,"            .run(""insert into ext_table1 values (3)"")"
116761,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1717,,"            .run(""insert into ext_table1 values (4)"")"
116762,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1722,,"      Assert.fail(""Expected the UnknownHostException to be thrown."");"
116763,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1724,,"      assertTrue(ex.getMessage().contains(""java.net.UnknownHostException: nsRemote""));"
116764,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1736,,"            .run(""create external table  ext_table2 (key int, value int) partitioned by (load_time timestamp)"")"
116765,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1737,,"            .run(""insert into ext_table2 partition(load_time = '2012-02-21 07:08:09.123') values(1,2)"")"
116766,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1738,,"            .run(""insert into ext_table2 partition(load_time = '2012-02-21 07:08:09.124') values(1,3)"")"
116767,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1739,,"            .run(""show partitions ext_table2"")"
116768,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1745,,"    ReplicationTestUtils.assertExternalFileList(Arrays.asList(""ext_table1"", ""ext_table2""), tuple.dumpLocation, primary);"
116769,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java,1745,,"    ReplicationTestUtils.assertExternalFileList(Arrays.asList(""ext_table1"", ""ext_table2""), tuple.dumpLocation, primary);"
116770,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,80,,"    withClauseOptions.add(""'"" + HiveConf.ConfVars.HIVE_IN_TEST_REPL.varname + ""'='"" + false + ""'"");"
116771,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,82,,"        .run(""use "" + primaryDbName)"
116772,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,83,,"        .run(""create external table t1 (id int)"")"
116773,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,85,,"        .run(""create table t2 (id int)"")"
116774,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,94,,"        .run(""show tables like 't1'"")"
116775,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,96,,"        .run(""select id from t1"")"
116776,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,97,,"        .verifyResult(""100"")"
116777,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,98,,"        .run(""show tables like 't2'"")"
116778,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,100,,"        .run(""select id from t2"")"
116779,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,101,,"        .verifyResult(""200"");"
116780,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,104,,"        .run(""create external table t3 (id int)"")"
116781,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,106,,"        .run(""create table t4 (id int)"")"
116782,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,119,,"        .run(""show tables like 't3'"")"
116783,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,121,,"        .run(""show tables like 't4'"")"
116784,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,127,,"        .run(""select id from t3"")"
116785,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,129,,"        .run(""select id from t4"")"
116786,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,211,,"            .run(""insert into table t1 values (500)"")"
116787,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,213,,"            .run(""insert into table t2 values (600)"")"
116788,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,224,,"            .verifyResult(""500"")"
116789,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,228,,"            .verifyResult(""600"");"
116790,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,232,,"            .run(""insert into table t3 values (700)"")"
116791,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,234,,"            .run(""insert into table t4 values (800)"")"
116792,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,255,,"            .verifyResult(""700"")"
116793,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,257,,"            .verifyResult(""800"");"
116794,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,506,,"    Path dbDataLocPrimary = new Path(primary.externalTableWarehouseRoot, primaryDb + "".db"");"
116795,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,512,,"    primary.run(""show databases like '"" + primaryDb + ""'"")"
116796,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,556,,"            .verifyResult(""1000"")"
116797,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,558,,"            .verifyResult(""tp1"")"
116798,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,579,,"            .verifyResults(new String[]{""1000"", ""2000""})"
116799,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExclusiveReplica.java,606,,"            .verifyResults(new String[]{""1000"", ""2000"", ""3000""})"
116800,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,126,,"        .run(""use "" + primaryDbName)"
116801,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,127,,"        .run(""create external table t1 (id int)"")"
116802,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,128,,"        .run(""insert into table t1 values (1)"")"
116803,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,129,,"        .run(""insert into table t1 values (2)"")"
116804,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,130,,"        .run(""create external table t2 (place string) partitioned by (country string)"")"
116805,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,131,,"        .run(""insert into table t2 partition(country='india') values ('bangalore')"")"
116806,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,132,,"        .run(""insert into table t2 partition(country='us') values ('austin')"")"
116807,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,133,,"        .run(""insert into table t2 partition(country='france') values ('paris')"")"
116808,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,142,,"        .run(""repl status "" + replicatedDbName)"
116809,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,145,,"        .run(""show tables like 't1'"")"
116810,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,147,,"        .run(""show tables like 't2'"")"
116811,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,152,,"        .run(""create external table t3 (id int)"")"
116812,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,153,,"        .run(""insert into table t3 values (10)"")"
116813,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,164,,"        .run(""show tables like 't3'"")"
116814,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,200,,"        .run(""show partitions t2"").verifyResults(new String[] {""country=france"", ""country=india"", ""country=us""});"
116815,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,200,,"        .run(""show partitions t2"").verifyResults(new String[] {""country=france"", ""country=india"", ""country=us""});"
116816,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,200,,"        .run(""show partitions t2"").verifyResults(new String[] {""country=france"", ""country=india"", ""country=us""});"
116817,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,206,,"    assertTablePartitionLocation(primaryDbName + "".t1"", replicatedDbName + "".t1"");"
116818,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,207,,"    assertTablePartitionLocation(primaryDbName + "".t2"", replicatedDbName + "".t2"");"
116819,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,224,,"        .run(""select id from t4"")"
116820,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,230,,"        .run(""drop table t1"")"
116821,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,239,,"    List<String> lazyCopyClause = Arrays.asList(""'"" + HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET.varname + ""'='true'"");"
116822,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,302,,"    fs.mkdirs(externalTableLocation, new FsPermission(""777""));"
116823,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,305,,"            ""'distcp.options.update'=''"","
116824,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,310,,"            .run(""create external table a (i int, j int) """
116825,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,311,,"                    + ""row format delimited fields terminated by ',' """
116826,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,312,,"                    + ""location '"" + externalTableLocation.toUri() + ""'"")"
116827,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,325,,"                 fs.create(new Path(externalTableLocation, ""file1.txt""))) {"
116828,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,333,,"            .run(""select i From a"")"
116829,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,528,,"        .verifyResults(new String[] { ""bangalore"" })"
116830,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,535,,"    try (FSDataOutputStream outputStream = fs.create(new Path(partitionDir, ""file.txt""))) {"
116831,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,565,,"      outputStream.write(""paris"".getBytes());"
116832,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,621,,"    withClause.add(""'"" + HiveConf.ConfVars.REPL_LOAD_PARTITIONS_BATCH_SIZE.varname + ""'='"" + 1 + ""'"");"
116833,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1316,,"    catalog.setName(""spark"");"
116834,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1422,,"            .run(""insert into table c partition(country='india') values """
116835,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1461,,"        .run(""select id from b"")"
116836,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1463,,"        .run(""select place from c where country='india'"")"
116837,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1465,,"        .run(""select place from c where country='france'"")"
116838,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1472,,"        .assertExternalFileList(Arrays.asList(""dbPath:"" + new Path(primaryDb.getLocationUri()).getName(), ""a"", ""c""),"
116839,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java,1745,,"        .run(""select id from table1 "")"
116840,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,96,,"        .run(""use "" + primaryDbName)"
116841,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,97,,"        .run(""create external table t1 (id int)"")"
116842,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,98,,"        .run(""insert into table t1 values (1)"")"
116843,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,99,,"        .run(""insert into table t1 values (2)"")"
116844,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,113,,"        .run(""show tables like 't1'"")"
116845,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,115,,"        .run(""show tables like 't2'"")"
116846,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,149,,"        .dumpWithCommand(""repl dump "" + primaryDbName);"
116847,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,168,,"        .run(""show partitions t2"").verifyResults(new String[] {""country=france"", ""country=india"", ""country=us""});"
116848,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,168,,"        .run(""show partitions t2"").verifyResults(new String[] {""country=france"", ""country=india"", ""country=us""});"
116849,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,205,,"    fs.mkdirs(externalTableLocation, new FsPermission(""777""));"
116850,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,227,,"        fs.create(new Path(externalTableLocation, ""file1.txt""))) {"
116851,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTablesMetaDataOnly.java,284,,"    try (FSDataOutputStream outputStream = fs.create(new Path(partitionDir, ""file.txt""))) {"
116852,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosIncrementalLoadAcidTables.java,78,,"        put(""hive.metastore.client.capability.check"", ""false"");"
116853,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosIncrementalLoadAcidTables.java,126,,"    primary.run(""drop database if exists "" + primaryDbName + "" cascade"");"
116854,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosIncrementalLoadAcidTables.java,136,,"            .run(""REPL STATUS "" + replicatedDbName)"
116855,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosIncrementalLoadAcidTables.java,176,,"    selectStmtList.add(""select count(*) from "" + tableName);"
116856,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosIncrementalLoadAcidTables.java,187,,"    expectedValues.add(new String[] {""1"", ""100"", ""100"", ""100"", ""100""});"
116857,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,122,,"        .run(""use "" + primaryDbName)"
116858,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,140,,"        .run(""show tables like 'table1'"")"
116859,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,141,,"        .verifyResult(""table1"")"
116860,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,143,,"        .verifyResult(""table2"")"
116861,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,152,,"            + ""=france"", ""country=india"", ""country=us""})"
116862,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,176,,"        .verifyResult(""table3"")"
116863,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,177,,"        .run(""select id from table3"")"
116864,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,217,,"        .run(""show tables like 't1'"")"
116865,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,222,,"        .verifyResults(new String[] {""delhi""})"
116866,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,260,,"        .run(""show tables like 't2'"")"
116867,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,265,,"        .verifyResults(new String[] {""new york""})"
116868,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,279,,"        new Path(""/"" + testName.getMethodName() + ""/t2/"");"
116869,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,281,,"    fs.mkdirs(externalTableLocation, new FsPermission(""777""));"
116870,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,287,,"            + ""delimited fields terminated by ',' location '"" + externalTableLocation.toString()"
116871,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,298,,"        .verifyResults(new String[] { ""bangalore"" })"
116872,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,321,,"        .verifyResults(new String[] { ""sydney"" })"
116873,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,399,,"        new Path(externalDatabaseLocation, "".snapshot/"" + secondSnapshot(primaryDbName.toLowerCase()))));"
116874,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,477,,"    withClause.add(""'hive.repl.external.warehouse.single.copy.task.paths'='"" + externalTableLocationSource"
116875,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,549,,"            .verifyResults(new String[] {""bangalore"", ""chennai""});"
116876,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,598,,"    Path externalTableLocation1 = new Path(""/"" + testName.getMethodName() + ""/t1/"");"
116877,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,647,,"        .verifyResults(new String[] {""kathmandu""})"
116878,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,649,,"        .verifyResults(new String[] {""beejing""})"
116879,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,689,,"        .verifyResults(new String[] {""kathmandu"", ""pokhra""}) // Old and new entry both should be there"
116880,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1091,,"    Path externalTableLocation4 = new Path(externalCustomDb1Path, ""table4"");"
116881,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1097,,"    Path externalTableLocation6 = new Path(externalCustomDb2Path, ""table6"");"
116882,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1100,,"    Path externalTableLocation7 = new Path(externalCustomDb2Path, ""table7"");"
116883,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1139,,"        .run(""select place from table4 where country='usa'"")"
116884,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1142,,"        .verifyResults(new String[] {""tokyo""})"
116885,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1143,,"        .run(""select place from table6 where country='nepal'"")"
116886,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1145,,"        .run(""select place from table7 where country='australia'"")"
116887,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosUsingSnapshots.java,1163,,"        .verifyResults(new String[] {""new york"", ""washington""})"
116888,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestScheduledReplicationScenarios.java,76,,"    overrides.put(HiveConf.ConfVars.REPL_INCLUDE_EXTERNAL_TABLES.varname, ""true"");"
116889,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestScheduledReplicationScenarios.java,125,,"    primary.run(""use "" + primaryDbName)"
116890,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,272,,"    String simpleTableName = ""sTable"";"
116891,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,274,,"    String partTableName = ""pTable"";"
116892,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,276,,"    String ndTableName = ""ndTable"";"
116893,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,281,,"    primary.run(""use "" + primaryDbName)"
116894,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,282,,"            .run(""create table "" + simpleTableName + "" (id int)"" + tblCreateExtra)"
116895,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,283,,"            .run(""insert into "" + simpleTableName + "" values (1), (2)"")"
116896,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,301,,"                .run(""analyze table "" + name + "" compute statistics for columns"");"
116897,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,301,,"                .run(""analyze table "" + name + "" compute statistics for columns"");"
116898,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,487,,"    String incTableName = ""iTable""; // New table"
116899,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,640,,"            .run(""alter table "" + simpleTableName + "" add columns (val int)"")"
116900,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestStatsReplicationScenarios.java,681,,"    LOG.info(""Testing "" + testName.getClass().getName() + ""."" + testName.getMethodName());"
116901,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,115,,"      primary.run(""use "" + primaryDbName)"
116902,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,181,,"            .run(""show tables"")"
116903,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,330,,"    String[] originalTables = new String[] {""t1"", ""t11"", ""t2"", ""t3"", ""t100""};"
116904,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,365,,"    String[] originalTables = new String[] {""t1"", ""t11"", ""t2"", ""t3"", ""t111""};"
116905,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,369,,"    String replPolicy = primaryDbName + "".'(t1+)|(t2)'.'t11|t3'"";"
116906,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,482,,"            ""'"" + ReplUtils.REPL_DUMP_INCLUDE_ACID_TABLES + ""'='false'"");"
116907,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,489,,"            ""'"" + ReplUtils.REPL_DUMP_INCLUDE_ACID_TABLES + ""'='true'"","
116908,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,717,,"    String replPolicy = primaryDbName + "".'in[0-9]+'.'out[0-9]+'"";"
116909,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116910,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116911,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116912,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116913,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116914,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,721,,"    String[] originalNonAcidTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out5"", ""out6""};"
116915,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,733,,"            .run(""alter table out4 rename to in4"")"
116916,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,734,,"            .run(""alter table out5 rename to in5"");"
116917,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,736,,"    replicatedTables = new String[] {""in1"", ""in2"", ""in3"", ""in4"", ""in5""};"
116918,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,736,,"    replicatedTables = new String[] {""in1"", ""in2"", ""in3"", ""in4"", ""in5""};"
116919,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,736,,"    replicatedTables = new String[] {""in1"", ""in2"", ""in3"", ""in4"", ""in5""};"
116920,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,748,,"    replicatedTables = new String[] {""in1"", ""in2"", ""in8"", ""in11""};"
116921,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,748,,"    replicatedTables = new String[] {""in1"", ""in2"", ""in8"", ""in11""};"
116922,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,763,,"    replicatedTables = new String[] {""in200"", ""in12"", ""in11"", ""in14""};"
116923,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,776,,"    String[] originalNonAcidTables = new String[] {""in100""};"
116924,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,795,,"    replicatedTables = new String[] {""in4"", ""in400""};"
116925,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,874,,"            ""'distcp.options.pugpb'=''"""
116926,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,892,,"    replicatedTables = new String[] {""in2"", ""in3"", ""in4"", ""in11"", ""in6"", ""in7""};"
116927,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,892,,"    replicatedTables = new String[] {""in2"", ""in3"", ""in4"", ""in11"", ""in6"", ""in7""};"
116928,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,906,,"    String[] originalExternalTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out10"", ""out11"", ""out1500""};"
116929,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,906,,"    String[] originalExternalTables = new String[] {""in1"", ""in2"", ""out3"", ""out4"", ""out10"", ""out11"", ""out1500""};"
116930,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,942,,"        ""in100"", ""in200"", ""in300"", ""out3000"", ""out4000"", ""out4001""};"
116931,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1004,,"    replicatedTables = new String[] {""in12"", ""in400"", ""in1"", ""in300"", ""out12"", ""in500"", ""in3000"", ""in2"","
116932,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1035,,"    originalAcidTables = new String[] {""in9"", ""out12""};"
116933,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1092,,"      .run(""CREATE TABLE t1(a string) STORED AS TEXTFILE"")"
116934,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1093,,"      .run(""CREATE TABLE t2(a string) STORED AS TEXTFILE"")"
116935,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1096,,"      .run(""insert into t1 values (3)"")"
116936,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1184,,"      .run(""select * from "" + replicatedDbName + "".t1"")"
116937,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1184,,"      .run(""select * from "" + replicatedDbName + "".t1"")"
116938,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestTableLevelReplicationScenarios.java,1186,,"      .run(""select * from "" + replicatedDbName + "".t2"")"
116939,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java,300,,"    StringBuilder replCommand = new StringBuilder(""REPL LOAD "" + primaryDbName);"
116940,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java,302,,"      replCommand.append("" INTO "" + replicatedDbName);"
116941,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java,323,,"      replLoadCmd += "" WITH ("" + StringUtils.join(withClauseOptions, "","") + "")"";"
116942,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestClientSideAuthorizationProvider.java,194,,"    driver.run(""grant create on table ""+tableName+"" to user ""+userName);"
116943,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,70,,"      client.dropTable(""default"", ""tbl1"");"
116944,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,70,,"      client.dropTable(""default"", ""tbl1"");"
116945,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,78,,"      client.dropTable(""db1"", ""tbl1"");"
116946,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,124,,"    fs.setOwner(new Path(defaultTbl1Loc), ""user1"", ""group1"");"
116947,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,124,,"    fs.setOwner(new Path(defaultTbl1Loc), ""user1"", ""group1"");"
116948,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestHDFSPermissionPolicyProvider.java,135,,"    assertTrue(acls.getGroupPermissions().keySet().contains(""public""));"
116949,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestMetastoreAuthorizationProvider.java,187,,"    driver.run(""use "" + dbName);"
116950,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestMetastoreAuthorizationProvider.java,364,,"    driver.run(""grant create on table ""+tableName+"" to user ""+userName);"
116951,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestStorageBasedClientSideAuthorizationProvider.java,48,,"    setPermissions(location,""-rwxr--r--"");"
116952,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,110,,"    runCmd(""create table "" + tableName"
116953,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,115,,"    runCmd(""create table "" + fullInTableName + ""(i int)"");"
116954,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,128,,"    runCmd(""drop table if exists "" + acidTableName);"
116955,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,147,,"    assertEquals(""no of columns used"", 3, tableObj.getColumns().size());"
116956,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,148,,"    assertEquals(""Columns used"", Arrays.asList(""city"", ""i"", ""k""),"
116957,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,148,,"    assertEquals(""Columns used"", Arrays.asList(""city"", ""i"", ""k""),"
116958,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,213,,"    int status = driver.compile(""select * from "" + tableName + "" order by i"", true);"
116959,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,269,,"        assertEqualsIgnoreCase(""table name"", output.getObjectName(), newTable);"
116960,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,316,,"    assertEquals(""input type"", HivePrivilegeObjectType.FUNCTION, funcObj.getType());"
116961,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,317,,"    assertTrue(""function name"", funcName.equalsIgnoreCase(funcObj.getObjectName()));"
116962,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,318,,"    assertTrue(""db name"", dbName.equalsIgnoreCase(funcObj.getDbname()));"
116963,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,434,,"      assertEquals(""input count"", 1, inputs.size());"
116964,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/authorization/plugin/TestHiveAuthorizerCheckInvocation.java,438,,"      assertEquals(""output count"", 1, outputs.size());"
116965,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorOnTezTest.java,225,,"      executeStatementOnDriver(""insert into "" + tblName"
116966,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorOnTezTest.java,231,,"      executeStatementOnDriver(""delete from "" + tblName + "" where b = 2"", driver);"
116967,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,181,,"    executeStatementOnDriver(""drop table if exists "" + tblName, driver);"
116968,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,182,,"    executeStatementOnDriver(""CREATE TABLE "" + tblName + ""(a INT, b STRING) "" +"
116969,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,182,,"    executeStatementOnDriver(""CREATE TABLE "" + tblName + ""(a INT, b STRING) "" +"
116970,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,183,,"      "" PARTITIONED BY(ds string)"" +"
116971,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,184,,"      "" CLUSTERED BY(a) INTO 2 BUCKETS"" + //currently ACID requires table to be bucketed"
116972,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,185,,"      "" STORED AS ORC TBLPROPERTIES ('transactional'='true')"", driver);"
116973,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,188,,"    executeStatementOnDriver(""insert into "" + tblName + "" partition (ds) values (1, 'fred', "" +"
116974,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,188,,"    executeStatementOnDriver(""insert into "" + tblName + "" partition (ds) values (1, 'fred', "" +"
116975,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,189,,"      ""'today'), (2, 'wilma', 'yesterday')"", driver);"
116976,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,192,,"    executeStatementOnDriver(""ALTER TABLE "" + tblName + "" ADD COLUMNS(c int)"", driver);"
116977,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,195,,"    executeStatementOnDriver(""SELECT * FROM "" + tblName + "" ORDER BY a"", driver);"
116978,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,195,,"    executeStatementOnDriver(""SELECT * FROM "" + tblName + "" ORDER BY a"", driver);"
116979,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,230,,"    Assert.assertEquals(""ds=today"", names.get(2));"
116980,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,231,,"    Assert.assertEquals(""ds=yesterday"", names.get(3));"
116981,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,257,,"    executeStatementOnDriver(""update "" + tblName + "" set b = 'barney'"", driver);"
116982,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,361,,"      "" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"", driver);"
116983,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,381,,"    CompactionInfo ci = new CompactionInfo(""default"", tblName, ""bkt=0"", CompactionType.MAJOR);"
116984,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,426,,"      .withAgentInfo(""UT_"" + Thread.currentThread().getName())"
116985,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,452,,"      Assert.fail(""Expecting 1 file and found "" + compacts.size() + "" files "" + compacts.toString());"
116986,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,569,,"    String tblName = ""cws"";"
116987,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,570,,"    String columnNamesProperty = ""a,b"";"
116988,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,571,,"    String columnTypesProperty = ""int:string"";"
116989,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,574,,"      "" CLUSTERED BY(a) INTO 1 BUCKETS"" + //currently ACID requires table to be bucketed"
116990,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,602,,"        if (names[i].equals(""delta_0000001_0000004_v0000009"")) {"
116991,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,610,,"        Assert.fail(""Expected: "" + Arrays.toString(expected) + "", found: "" + Arrays.toString(names) + "",stat="""
116992,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,610,,"        Assert.fail(""Expected: "" + Arrays.toString(expected) + "", found: "" + Arrays.toString(names) + "",stat="""
116993,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,655,,"        Assert.fail(""Expecting 1 file \""base_0000004\"" and found "" + stat.length + "" files "" + Arrays.toString(stat));"
116994,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,713,,"      connection1.write(""1,1"".getBytes());"
116995,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,868,,"    connection.write(""2,2"".getBytes());"
116996,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,873,,"    connection.write(""3,3"".getBytes());"
116997,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,969,,"    int count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from TXN_COMPONENTS where TC_OPERATION_TYPE='i'"");"
116998,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,971,,"    Assert.assertEquals(TestTxnDbUtil.queryToString(conf, ""select * from TXN_COMPONENTS""), partialAbort ? 1 : 2, count);"
116999,./TargetProjects/hive/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java,974,,"    count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from COMPACTION_QUEUE"");"
