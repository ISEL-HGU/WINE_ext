Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,"{if (true) return compiler.expressionPath(ex, ps.toArray(), steps.toArray());}","if (true) return compiler.expressionPath(ex,ps.toArray(),steps.toArray());
",0,1,8,128,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
2,if (true) return;,"if (true) return;
",0,0,2,,"BooleanLiteral(IfStatement-expression, ),
ReturnStatement(IfStatement-thenStatement, ),
"
3,if (true) return new CombiningEnvSupplier(dynamicEnvironmentSupplier);,"if (true) return new CombiningEnvSupplier(dynamicEnvironmentSupplier);
",0,0,3,,"BooleanLiteral(IfStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, IfStatement-thenStatement, ),
"
4,{if (true) return output + token.image;},"if (true) return output + token.image;
",0,0,3,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(InfixExpression-rightOperand, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
5,{if (true) return token.image.trim();},"if (true) return token.image.trim();
",0,0,3,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
QualifiedName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
6,{if (true) return Integer.valueOf(token.image);},"if (true) return Integer.valueOf(token.image);
",1,89,4,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
7,"{if (true) return compiler.qname(null, nc1);}","if (true) return compiler.qname(null,nc1);
",1,6,5,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
8,"{if (true) return compiler.locationPath(true, steps.toArray());}","if (true) return compiler.locationPath(true,steps.toArray());
",1,3,6,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
9,"{if (true) return compiler.function(name, null);}","if (true) return compiler.function(name,null);
",1,1,5,,"BooleanLiteral(IfStatement-expression, Block-statements, ),
SimpleName(MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, IfStatement-thenStatement, Block-statements, ),
"
