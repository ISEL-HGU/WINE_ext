Pattern ID,Pattern,Context,"# of Eq list","# of Frq",complexity,Num of Warnings in Method,NCL
1,c = (Class<T>)Discover.class.getClassLoader().loadClass(spec);,"c=(Class<T>)Discover.class.getClassLoader().loadClass(spec);
",0,1892,7,16176,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
2,"this.xmlWriter = (XMLStreamWriter) Proxy.newProxyInstance(XMLStreamWriter.class.getClassLoader(), new Class[]{XMLStreamWriter.class}, handler);","this.xmlWriter=(XMLStreamWriter)Proxy.newProxyInstance(XMLStreamWriter.class.getClassLoader(),new Class[]{XMLStreamWriter.class},handler);
",0,594,11,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
3,"pollerExecutor = Executors.newCachedThreadPool(new ActiveMQThreadFactory(""ActiveMQ-AIO-poller-pool"" + System.identityHashCode(this), false, this.getClass().getClassLoader()));","pollerExecutor=Executors.newCachedThreadPool(new ActiveMQThreadFactory(""ActiveMQ-AIO-poller-pool"" + System.identityHashCode(this),false,this.getClass().getClassLoader()));
",0,934,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
4,return ReflectionUtil.class.getClassLoader().loadClass(name).asSubclass(type).getDeclaredConstructor(),"return ReflectionUtil.class.getClassLoader().loadClass(name).asSubclass(type).getDeclaredConstructor().newInstance();
",0,699,7,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
"
5,getClass().getClassLoader().loadClass(className).asSubclass(CountingSummarizer.class);,"getClass().getClassLoader().loadClass(className).asSubclass(CountingSummarizer.class);
",0,9,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
6,"Iterator<MethodOperation.Factory<MethodOperation>> it = UtilGenerics.cast(ServiceLoader.load(MethodOperation.Factory.class, SimpleMethod.class.getClassLoader()).iterator());","Iterator<MethodOperation.Factory<MethodOperation>> it=UtilGenerics.cast(ServiceLoader.load(MethodOperation.Factory.class,SimpleMethod.class.getClassLoader()).iterator());
",0,161,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
QualifiedName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
7,clazz = Writer.class.getClassLoader().loadClass(classname).asSubclass(KeyFunctor.class);,"clazz=Writer.class.getClassLoader().loadClass(classname).asSubclass(KeyFunctor.class);
",0,64,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
8,"(Class<? extends BiFunction<Key,Value,String>>) this.getClass().getClassLoader()","@SuppressWarnings(""unchecked"") Class<? extends BiFunction<Key,Value,String>> clazz=(Class<? extends BiFunction<Key,Value,String>>)this.getClass().getClassLoader().loadClass(formatterClazz).asSubclass(BiFunction.class);
",0,848,8,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
"
9,"StreamingContainerUmbilicalProtocol recoverableProxy = (StreamingContainerUmbilicalProtocol)Proxy.newProxyInstance(umbilical.getClass().getClassLoader(), umbilical.getClass().getInterfaces(), this);","StreamingContainerUmbilicalProtocol recoverableProxy=(StreamingContainerUmbilicalProtocol)Proxy.newProxyInstance(umbilical.getClass().getClassLoader(),umbilical.getClass().getInterfaces(),this);
",0,89,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
10,"final Class<?> clazz = EjbTimerServiceImpl.class.getClassLoader().loadClass(properties.getProperty(""org.apache.openejb.quartz.jobStore.class""));","final Class<?> clazz=EjbTimerServiceImpl.class.getClassLoader().loadClass(properties.getProperty(""org.apache.openejb.quartz.jobStore.class""));
",0,290,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
11,"value1X = ClassloadingUtil.loadProperty(ActiveMQJMSClient.class.getClassLoader(), ActiveMQJMSClient.class.getName() + "".properties"", ""enable1xPrefixes"");","value1X=ClassloadingUtil.loadProperty(ActiveMQJMSClient.class.getClassLoader(),ActiveMQJMSClient.class.getName() + "".properties"",""enable1xPrefixes"");
",0,17,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
12,final ClassLoader appLoader = Context.class.cast(meecrowave.getTomcat().getHost().findChildren()[0]).getLoader().getClassLoader();,"final ClassLoader appLoader=Context.class.cast(meecrowave.getTomcat().getHost().findChildren()[0]).getLoader().getClassLoader();
",0,76,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
13,Exporter exporter = getClass().getClassLoader().loadClass(opts.fluentCfg.exporterType),"@SuppressWarnings(""rawtypes"") Exporter exporter=getClass().getClassLoader().loadClass(opts.fluentCfg.exporterType).asSubclass(Exporter.class).newInstance();
",0,2,6,,"SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, ),
"
14,encoder = (Encoder) getClass().getClassLoader().loadClass(mapping.encoder).getDeclaredConstructor().newInstance();,"encoder=(Encoder)getClass().getClassLoader().loadClass(mapping.encoder).getDeclaredConstructor().newInstance();
",0,10,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
15,"tFactory = new ActiveMQThreadFactory(""ActiveMQ-ReplicationTest"", false, this.getClass().getClassLoader());","tFactory=new ActiveMQThreadFactory(""ActiveMQ-ReplicationTest"",false,this.getClass().getClassLoader());
",0,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
16,if (this.getClass().getClassLoader() != Thread.currentThread().getContextClassLoader()) {,"if (this.getClass().getClassLoader() != Thread.currentThread().getContextClassLoader()) {
  resolveProtocols(Thread.currentThread().getContextClassLoader());
}
",0,48,6,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
17,final URL[] urls = ((URLClassLoader) bundle.getClassLoader()).getURLs();,"final URL[] urls=((URLClassLoader)bundle.getClassLoader()).getURLs();
",0,8,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
18,"for (Entry<String,KeywordExecutable> entry : Main.getExecutables(getClass().getClassLoader())","for (Entry<String,KeywordExecutable> entry : Main.getExecutables(getClass().getClassLoader()).entrySet()) {
  assertEquals(entry.getKey(),entry.getValue().keyword());
}
",0,1,8,,"SimpleName(SimpleType-name, ParameterizedType-type, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, EnhancedForStatement-expression, ),
"
19,new TreeMap<>(Main.getExecutables(getClass().getClassLoader()));,"TreeMap<String,KeywordExecutable> actualSet=new TreeMap<>(Main.getExecutables(getClass().getClassLoader()));
",0,0,5,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
"
20,"Iterator<ConditionalFactory<?>> it = UtilGenerics.cast(ServiceLoader.load(ConditionalFactory.class, ConditionalFactory.class.getClassLoader()).iterator());","Iterator<ConditionalFactory<?>> it=UtilGenerics.cast(ServiceLoader.load(ConditionalFactory.class,ConditionalFactory.class.getClassLoader()).iterator());
",0,26,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
21,this.tempDataStore = (PListStore) getClass().getClassLoader().loadClass(clazz).getDeclaredConstructor().newInstance();,"this.tempDataStore=(PListStore)getClass().getClassLoader().loadClass(clazz).getDeclaredConstructor().newInstance();
",0,24,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
22,"return (Class<T>) Class.forName(className, true, DefaultImplementation.class.getClassLoader());","return (Class<T>)Class.forName(className,true,DefaultImplementation.class.getClassLoader());
",0,73,8,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
23,"temp = (SPI) TransportLoggerSupport.class.getClassLoader().loadClass(""org.apache.activemq.transport.TransportLoggerFactorySPI"").getConstructor().newInstance();","temp=(SPI)TransportLoggerSupport.class.getClassLoader().loadClass(""org.apache.activemq.transport.TransportLoggerFactorySPI"").getConstructor().newInstance();
",0,153,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
24,"Class clazz = Class.forName(className.toString(), false, BaseDataStreamMarshaller.class.getClassLoader());","Class clazz=Class.forName(className.toString(),false,BaseDataStreamMarshaller.class.getClassLoader());
",0,17,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
25,"Files.copy(Paths.get(ArtemisTest.class.getClassLoader().getResource(""broker-with-password-codec.xml"").toURI()),","Files.copy(Paths.get(ArtemisTest.class.getClassLoader().getResource(""broker-with-password-codec.xml"").toURI()),Paths.get(instanceWithPasswordCodec.getAbsolutePath(),""etc"",""broker.xml""));
",0,260,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
26,"List proxy = (List) java.lang.reflect.Proxy.newProxyInstance(this.getClass().getClassLoader(), TEST_CLASSES, this);","List proxy=(List)java.lang.reflect.Proxy.newProxyInstance(this.getClass().getClassLoader(),TEST_CLASSES,this);
",0,7,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
27,File file = new File(AbstractCachedLDAPAuthorizationMapLegacyTest.class.getClassLoader().getResource(ldifResourcePath).toURI());,"File file=new File(AbstractCachedLDAPAuthorizationMapLegacyTest.class.getClassLoader().getResource(ldifResourcePath).toURI());
",0,177,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
28,"return IOUtils.toString(getClass().getClassLoader().getResourceAsStream(""test-input-config/input.config-smartsense.json.j2""), Charset.defaultCharset());","return IOUtils.toString(getClass().getClassLoader().getResourceAsStream(""test-input-config/input.config-smartsense.json.j2""),Charset.defaultCharset());
",0,89,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
29,"defaultLookup = Class.forName(""org.openide.nodes.NodeLookup"", false, Node.class.getClassLoader());","defaultLookup=Class.forName(""org.openide.nodes.NodeLookup"",false,Node.class.getClassLoader());
",0,47,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
30,static final ClassLoader bootClassLoader = new ClassLoader(Object.class.getClassLoader()) { };,"static final ClassLoader bootClassLoader=new ClassLoader(Object.class.getClassLoader()){
}
;
",0,49,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
AnonymousClassDeclaration(ClassInstanceCreation-anonymousClassDeclaration, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
31,"ExecutorService executorService = Executors.newFixedThreadPool(3, new ActiveMQThreadFactory(""test"", false, JournalFileRepositoryOrderTest.class.getClassLoader()));","ExecutorService executorService=Executors.newFixedThreadPool(3,new ActiveMQThreadFactory(""test"",false,JournalFileRepositoryOrderTest.class.getClassLoader()));
",0,30,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
32,return ImplementsExtendsTest.this.getClass().getClassLoader().loadClass(className);,"return ImplementsExtendsTest.this.getClass().getClassLoader().loadClass(className);
",0,1,5,,"SimpleName(ThisExpression-qualifier, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
33,"Class<T> answer = CastUtils.cast(loadClass(name, DefaultClassResolver.class.getClassLoader()));","Class<T> answer=CastUtils.cast(loadClass(name,DefaultClassResolver.class.getClassLoader()));
",0,1,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
34,return (SensitiveDataCodec<String>) PasswordMaskingUtil.class.getClassLoader().loadClass(codecClassName).newInstance();,"return (SensitiveDataCodec<String>)PasswordMaskingUtil.class.getClassLoader().loadClass(codecClassName).newInstance();
",0,12,7,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
"
35,"return new ActiveMQThreadFactory(""DiscoveryGroup-"" + System.identityHashCode(this), ""activemq-discovery-group-thread-"" + name, true, DiscoveryGroup.class.getClassLoader());","return new ActiveMQThreadFactory(""DiscoveryGroup-"" + System.identityHashCode(this),""activemq-discovery-group-thread-"" + name,true,DiscoveryGroup.class.getClassLoader());
",0,25,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
36,final InputStream in = VersionImpl.class.getClassLoader().getResourceAsStream(VersionLoader.PROP_FILE_NAME);,"final InputStream in=VersionImpl.class.getClassLoader().getResourceAsStream(VersionLoader.PROP_FILE_NAME);
",0,4,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
37,"Enumeration<URL> urls = this.getClass().getClassLoader().getResources(this.getClass().getPackage().getName().replace('.','/')+""/statements.properties"");","Enumeration<URL> urls=this.getClass().getClassLoader().getResources(this.getClass().getPackage().getName().replace('.','/') + ""/statements.properties"");
",0,129,15,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
38,Mockito.when(context.getBundle()).thenReturn(new MockBundle(this.getClass().getClassLoader()));,"Mockito.when(context.getBundle()).thenReturn(new MockBundle(this.getClass().getClassLoader()));
",0,15,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
39,"ZipFile zip = new ZipFile(new File(this.getClass().getClassLoader().getResource(""druid.sample.tsv.zip"").toURI()));","ZipFile zip=new ZipFile(new File(this.getClass().getClassLoader().getResource(""druid.sample.tsv.zip"").toURI()));
",0,89,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
40,"ThreadFactory tFactory = new ActiveMQThreadFactory(""SoakTest"" + System.identityHashCode(this), false, JournalCleanupCompactStressTest.class.getClassLoader());","ThreadFactory tFactory=new ActiveMQThreadFactory(""SoakTest"" + System.identityHashCode(this),false,JournalCleanupCompactStressTest.class.getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
41,"final Class<?> clazz = Class.forName(name, false, MainTest.class.getClassLoader());","final Class<?> clazz=Class.forName(name,false,MainTest.class.getClassLoader());
",0,11,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
42,"this.proxyContext = ServletContext.class.cast(Proxy.newProxyInstance(ServletContext.class.getClassLoader(),","this.proxyContext=ServletContext.class.cast(Proxy.newProxyInstance(ServletContext.class.getClassLoader(),new Class<?>[]{ServletContext.class},contextHandler));
",0,3,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
43,"this.basePath = new Path(this.getClass().getClassLoader().getResource(""pullFileLoaderTest"").getFile());","this.basePath=new Path(this.getClass().getClassLoader().getResource(""pullFileLoaderTest"").getFile());
",0,63,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
44,"final File ambariPropertiesFile = new File(Configuration.class.getClassLoader().getResource(""ambari.properties"").getPath());","final File ambariPropertiesFile=new File(Configuration.class.getClassLoader().getResource(""ambari.properties"").getPath());
",0,74,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
45,"final URLClassLoader afterLoader = URLClassLoader.class.cast(SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(""test"").getClassLoader());","final URLClassLoader afterLoader=URLClassLoader.class.cast(SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(""test"").getClassLoader());
",0,26,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
46,fileName = this.getClass().getClassLoader().getResource(fileName).getFile();,"fileName=this.getClass().getClassLoader().getResource(fileName).getFile();
",0,38,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
47,try (BufferedInputStream fis = (BufferedInputStream) this.getClass().getClassLoader().getResourceAsStream(configFileName)) {,"try (BufferedInputStream fis=(BufferedInputStream)this.getClass().getClassLoader().getResourceAsStream(configFileName)){
  ClassPathResource configFile=new ClassPathResource(configFileName);
  if (!configFile.exists()) {
    throw new FileNotFoundException(configFileName);
  }
  String configData=IOUtils.toString(fis,Charset.defaultCharset());
  loadConfigs(configData);
}
 ",0,13,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
48,".newAntClassLoader(getClass().getClassLoader(), this, path, true);","return AntClassLoader.newAntClassLoader(getClass().getClassLoader(),this,path,true);
",0,5,6,,"SimpleName(),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(),
SimpleName(),
BooleanLiteral(),
"
49,ClassLoader cL = (classpath == null) ? this.getClass().getClassLoader(),"ClassLoader cL=(classpath == null) ? this.getClass().getClassLoader() : getProject().createClassLoader(classpath);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
50,if (getClass().getClassLoader() != null,"if (getClass().getClassLoader() != null && getClass().getClassLoader() != Project.class.getClassLoader()) {
  classLoader.setParent(getClass().getClassLoader());
}
",0,0,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
51,Thread.currentThread().setContextClassLoader(this.launchDefinition.getClassLoader());,"Thread.currentThread().setContextClassLoader(this.launchDefinition.getClassLoader());
",0,2,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
52,"testExecutionListeners.addAll(getListeners(testRequest, this.launchDefinition.getClassLoader()));","testExecutionListeners.addAll(getListeners(testRequest,this.launchDefinition.getClassLoader()));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
53,"return Proxy.newProxyInstance(this.getClass().getClassLoader(), classes, new InvocationHandler()","return Proxy.newProxyInstance(this.getClass().getClassLoader(),classes,new InvocationHandler(){
  public Object invoke(  Object mock,  Method method,  Object[] arguments) throws Throwable {
    return method.invoke(target.call(),arguments);
  }
}
);
",0,33,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
"
54,if ( loader != null && !loader.equals( Utils.class.getClassLoader() ) ),"if (loader != null && !loader.equals(Utils.class.getClassLoader())) {
  buffer.append("" from "").append(loader);
}
",0,12,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
55,"return new AntClassLoader(JUnitLauncherTask.class.getClassLoader(), getProject(), taskConfiguredClassPath, true);","return new AntClassLoader(JUnitLauncherTask.class.getClassLoader(),getProject(),taskConfiguredClassPath,true);
",0,4,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
56,"return clazz.getName() + ""@"" + clazz.getClassLoader() + "":"" + loc;","return clazz.getName() + ""@"" + clazz.getClassLoader()+ "":""+ loc;
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
57,"register(Lists.newArrayList(new JarScan(BUILT_IN, classpathScan, this.getClass().getClassLoader())), DataChangeVersion.UNDEFINED);","register(Lists.newArrayList(new JarScan(BUILT_IN,classpathScan,this.getClass().getClassLoader())),DataChangeVersion.UNDEFINED);
",0,10,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
58,"loader = new AntClassLoader(this.getClass().getClassLoader(), true);","loader=new AntClassLoader(this.getClass().getClassLoader(),true);
",0,2,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
59,"LOG.info(""Loaded config file from {}"", MudrodEngine.class.getClassLoader().getResource(""config.properties"").getPath());","LOG.info(""Loaded config file from {}"",MudrodEngine.class.getClassLoader().getResource(""config.properties"").getPath());
",0,15,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
60,"new ClassLoader(service.getClass().getClassLoader()){},","toReturn=(T)Proxy.newProxyInstance(new ClassLoader(service.getClass().getClassLoader()){
}
,new Class[]{iface},handler);
",0,1,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
AnonymousClassDeclaration(ClassInstanceCreation-anonymousClassDeclaration, ),
"
61,return (Lock) Lock.class.getClassLoader().loadClass(config.lockClass).getConstructor(Properties.class).newInstance(config.props);,"return (Lock)Lock.class.getClassLoader().loadClass(config.lockClass).getConstructor(Properties.class).newInstance(config.props);
",0,6,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
62,"obj = service.convert(org, GenericType.parse(""java.util.Dictionary<java.lang.String,java.lang.Integer>"", getClass().getClassLoader()));","obj=service.convert(org,GenericType.parse(""java.util.Dictionary<java.lang.String,java.lang.Integer>"",getClass().getClassLoader()));
",0,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
63,"final AnnotationFinder finder = new AnnotationFinder(ClasspathArchive.archive(Main.class.getClassLoader(), file.toURI().toURL()));","final AnnotationFinder finder=new AnnotationFinder(ClasspathArchive.archive(Main.class.getClassLoader(),file.toURI().toURL()));
",0,1,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
64,"final ClassLoader beforeLoader = SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(""test"").getClassLoader();","final ClassLoader beforeLoader=SystemInstance.get().getComponent(ContainerSystem.class).getWebContext(""test"").getClassLoader();
",0,3,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
65,"LoginModuleGBean module = new LoginModuleGBean(MockLoginModule.class.getName(), ""foo"", true, new HashMap<String, Object>(), ""domain"", getClass().getClassLoader());","LoginModuleGBean module=new LoginModuleGBean(MockLoginModule.class.getName(),""foo"",true,new HashMap<String,Object>(),""domain"",getClass().getClassLoader());
",0,4,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
66,Thread.currentThread().setContextClassLoader(new ClassLoader(OpenEjbVersion.class.getClassLoader()) {,"Thread.currentThread().setContextClassLoader(new ClassLoader(OpenEjbVersion.class.getClassLoader()){
  protected Class<?> findClass(  String name) throws ClassNotFoundException {
    for (    Bundle b : bundle.getBundleContext().getBundles()) {
      if (b.getSymbolicName().contains(""jaxb-impl""))       return b.loadClass(name);
    }
    throw new ClassNotFoundException(name);
  }
}
);
",0,3,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
67,Class<?> elf = new ClassLoader(getClass().getClassLoader()) {,"Class<?> elf=new ClassLoader(getClass().getClassLoader()){
  @Override public Class<?> loadClass(  String className) throws ClassNotFoundException {
    if (className.startsWith(""org.apache.openejb""))     throw new ClassNotFoundException(className);
    if (className.equals(EJBLocatorFactory.class.getName())) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      try {
        IOUtils.copy(getResourceAsStream(className.replace('.','/') + "".class""),baos);
      }
 catch (      IOException e) {
        throw new ClassNotFoundException(className,e);
      }
      return defineClass(className,baos.toByteArray(),0,baos.size());
    }
    return super.loadClass(className);
  }
}
.loadClass(EJBLocatorFactory.class.getName());
",0,0,6,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
68,new OpenEJBLocator().findEJBs(new BundleManifest(getClass().getClassLoader().,"new OpenEJBLocator().findEJBs(new BundleManifest(getClass().getClassLoader().getResourceAsStream(manifest)),icd,registry);
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
69,"node = new CollectionNode(child, contextPath, f, nodes, (Class)getClass().getClassLoader().loadClass(child.collectionType));","node=new CollectionNode(child,contextPath,f,nodes,(Class)getClass().getClassLoader().loadClass(child.collectionType));
",0,11,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
70,"genericInterfaces[i] = (Type) c.getClass().getClassLoader().loadClass(AuxiliaryFinder.transform(((InterimClassType)superInterfaces[i]).classTypeName.substring(1).replace('/', '.')));","genericInterfaces[i]=(Type)c.getClass().getClassLoader().loadClass(AuxiliaryFinder.transform(((InterimClassType)superInterfaces[i]).classTypeName.substring(1).replace('/','.')));
",0,48,18,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, ParenthesizedExpression-expression, FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
71,if (classes.size() == 1) cl = classes.iterator().next().getClassLoader();,"if (classes.size() == 1) cl=classes.iterator().next().getClassLoader();
",0,0,8,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
72,if (bundle == null) return ProxyClassLoader.class.getClassLoader();,"if (bundle == null) return ProxyClassLoader.class.getClassLoader();
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, IfStatement-thenStatement, ),
"
73,return this.getClass().getClassLoader().getResource(XSD_PATH + fragment);,"return this.getClass().getClassLoader().getResource(XSD_PATH + fragment);
",0,13,6,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
74,"b.append(""\n  parameter type="").append(aType.getName()).append("" in classloader: "").append(aType.getClassLoader());","b.append(""\n  parameter type="").append(aType.getName()).append("" in classloader: "").append(aType.getClassLoader());
",0,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
75,"ClassLoader loader = new URLClassLoader(securityJar.exists() ? new URL[]{weblogicJar.toURI().toURL(), securityJar.toURI().toURL()} : new URL[]{weblogicJar.toURI().toURL()}, Weblogic81Utils.class.getClassLoader());","ClassLoader loader=new URLClassLoader(securityJar.exists() ? new URL[]{weblogicJar.toURI().toURL(),securityJar.toURI().toURL()} : new URL[]{weblogicJar.toURI().toURL()},Weblogic81Utils.class.getClassLoader());
",0,19,20,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
76,"TEST_FILE_FOLDER = PerformanceIT.class.getClassLoader().getResource("""").toURI().getPath() + System.getProperty(""testresourcefolder"") + File.separatorChar;","TEST_FILE_FOLDER=PerformanceIT.class.getClassLoader().getResource("""").toURI().getPath() + System.getProperty(""testresourcefolder"") + File.separatorChar;
",0,5,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-extendedOperands, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
77,"final Class<?> myfacesInitializer = Class.forName(MYFACES_TOMEEM_CONTAINER_INITIALIZER, true, context.getLoader().getClassLoader());","final Class<?> myfacesInitializer=Class.forName(MYFACES_TOMEEM_CONTAINER_INITIALIZER,true,context.getLoader().getClassLoader());
",0,18,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
78,"return new BundleClassLoader(new URL[0], this.getClass().getClassLoader());","return new BundleClassLoader(new URL[0],this.getClass().getClassLoader());
",0,2,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
79,return LockFactory.class.cast(StatefulContainerFactory.class.getClassLoader().loadClass(lockFactory.toString().trim()).newInstance());,"return LockFactory.class.cast(StatefulContainerFactory.class.getClassLoader().loadClass(lockFactory.toString().trim()).newInstance());
",0,16,9,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
80,if (interfaceClasses.length > 0) cl = interfaceClasses[0].getClassLoader();,"if (interfaceClasses.length > 0) cl=interfaceClasses[0].getClassLoader();
 else cl=Thread.currentThread().getContextClassLoader();
",0,0,6,,"QualifiedName(InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
81,"return interfaceClass.cast(Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class[] {interfaceClass}, this));","return interfaceClass.cast(Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class[]{interfaceClass},this));
",0,4,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
82,return this.bundle.adapt(BundleWiring.class).getClassLoader();,"return this.bundle.adapt(BundleWiring.class).getClassLoader();
",0,3,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
83,"return DataSource.class.cast(Proxy.newProxyInstance(ds.getClass().getClassLoader(), new Class<?>[]{DataSource.class}, new CommonDataSourceAdapter(ds)));","return DataSource.class.cast(Proxy.newProxyInstance(ds.getClass().getClassLoader(),new Class<?>[]{DataSource.class},new CommonDataSourceAdapter(ds)));
",0,9,13,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
84,try (BufferedReader reader = new BufferedReader(new InputStreamReader(testBundle.adapt(BundleWiring.class).getClassLoader().getResource(name).openStream()))),"try (BufferedReader reader=new BufferedReader(new InputStreamReader(testBundle.adapt(BundleWiring.class).getClassLoader().getResource(name).openStream()))){
  assertEquals(""This is a Test"",reader.readLine());
}
 ",0,19,11,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
85,"return (WebAccessLog) kernel.getProxyManager().createProxy((AbstractName) names.iterator().next(), JettyLogManager.class.getClassLoader());","return (WebAccessLog)kernel.getProxyManager().createProxy((AbstractName)names.iterator().next(),JettyLogManager.class.getClassLoader());
",0,19,10,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
86,"URL url = getClass().getClassLoader().getResource(getClass().getName().replace('.', '/') + "".class"");","URL url=getClass().getClassLoader().getResource(getClass().getName().replace('.','/') + "".class"");
",0,6,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
87,ClassLoader loader = holder==null ? getClass().getClassLoader() : holder.loader;,"ClassLoader loader=holder == null ? getClass().getClassLoader() : holder.loader;
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
88,"return Class.forName(next.replace(""/"", "".""), false, getClass().getClassLoader());","return Class.forName(next.replace(""/"","".""),false,getClass().getClassLoader());
",0,16,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
89,final ScriptEngineManager manager = new ScriptEngineManager(bundle.adapt(BundleWiring.class).getClassLoader());,"final ScriptEngineManager manager=new ScriptEngineManager(bundle.adapt(BundleWiring.class).getClassLoader());
",0,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
90,return this.getClass().getClassLoader().getResource(resource).toURI().getPath();,"return this.getClass().getClassLoader().getResource(resource).toURI().getPath();
",0,6,7,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
91,try (InputStream resourceStream = values[0].getClass().getClassLoader().getResourceAsStream(resourcePath)) {,"try (InputStream resourceStream=values[0].getClass().getClassLoader().getResourceAsStream(resourcePath)){
  Map<Integer,String> errorMessageMap=loadErrorMap(resourceStream);
  for (  IError error : values) {
    enumMessages[((Enum)error).ordinal()]=errorMessageMap.computeIfAbsent(error.intValue(),intValue -> {
      throw new IllegalStateException(""error message missing for "" + error + "" (""+ intValue+ "")"");
    }
);
  }
}
 catch (Exception e) {
  throw new IllegalStateException(e);
}
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
92,Constructor<?> jobQueueConstructor = this.getClass().getClassLoader().loadClass(ccConfig.getJobQueueClass()),"Constructor<?> jobQueueConstructor=this.getClass().getClassLoader().loadClass(ccConfig.getJobQueueClass()).getConstructor(IJobManager.class,IJobCapacityController.class);
",0,11,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
93,for (Class clazz = beanClass; clazz != null && clazz.getClassLoader() != null,"for (Class clazz=beanClass; clazz != null && clazz.getClassLoader() != null && clazz.getClassLoader().getParent() != null; clazz=clazz.getSuperclass()) {
  for (  Field f : clazz.getDeclaredFields()) {
    if (predicate.test(f)) {
      fields.add(f);
    }
  }
}
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, ForStatement-expression, ),
"
94,&& clazz.getClassLoader().getParent() != null; clazz = clazz.getSuperclass()) {,"for (Class clazz=beanClass; clazz != null && clazz.getClassLoader() != null && clazz.getClassLoader().getParent() != null; clazz=clazz.getSuperclass()) {
  for (  Field f : clazz.getDeclaredFields()) {
    if (predicate.test(f)) {
      fields.add(f);
    }
  }
}
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
SimpleName(Assignment-leftHandSide, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ),
"
95,"Enumeration<URL> resources = classInJar.getClassLoader().getResources(""META-INF/maven/"" + groupId + ""/"" + artifactId + ""/pom.properties"");","Enumeration<URL> resources=classInJar.getClassLoader().getResources(""META-INF/maven/"" + groupId + ""/""+ artifactId+ ""/pom.properties"");
",0,3,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
96,reader = new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(this.scriptFilePath)));,"reader=new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(this.scriptFilePath)));
",0,7,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
97,"classBytes = IOUtils.toByteArray(classT.getClassLoader().getResourceAsStream(className.replace('.', '/') + "".class""));","classBytes=IOUtils.toByteArray(classT.getClassLoader().getResourceAsStream(className.replace('.','/') + "".class""));
",0,26,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
98,this.config = ConfigUtil.loadConfig(this.getClass().getClassLoader().getResourceAsStream(configFile));,"this.config=ConfigUtil.loadConfig(this.getClass().getClassLoader().getResourceAsStream(configFile));
",0,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
99,String axis2ConfAbsolutePath = axis2ConfLocation == null ? null : getClass().getClassLoader().getResource(axis2ConfLocation).getFile();,"String axis2ConfAbsolutePath=axis2ConfLocation == null ? null : getClass().getClassLoader().getResource(axis2ConfLocation).getFile();
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
100,"config = getClass().getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-derby"";","config=getClass().getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-derby"";
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
101,private String clientRepo = getClass().getClassLoader().getResource(testDir).getFile();,"private String clientRepo=getClass().getClassLoader().getResource(testDir).getFile();
",0,0,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
102,"_javaEnumClass = (Class<? extends StringEnumAbstractBase>) Class.forName(getBaseEnumType().getFullJavaName() + ""$Enum"", false, getTypeSystem().getClassLoader());","_javaEnumClass=(Class<? extends StringEnumAbstractBase>)Class.forName(getBaseEnumType().getFullJavaName() + ""$Enum"",false,getTypeSystem().getClassLoader());
",0,1,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
103,"answer.bind(""p"", Proxy.newProxyInstance(I1.class.getClassLoader(), new Class[] { I1.class }, new InvocationHandler() {","answer.bind(""p"",Proxy.newProxyInstance(I1.class.getClassLoader(),new Class[]{I1.class},new InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    if (method.getName().equals(""m1"")) {
      return args[0].toString() + args[1].toString();
    }
 else {
      return null;
    }
  }
}
));
",0,4,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
104,"return (T) Proxy.newProxyInstance(rreq.getReflectData().getClassLoader(), new Class[] { iface }, rreq);","return (T)Proxy.newProxyInstance(rreq.getReflectData().getClassLoader(),new Class[]{iface},rreq);
",0,2,10,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
105,"Class<?> proxyClass = Proxy.getProxyClass(clazz.getClassLoader(), new Class[] {clazz});","Class<?> proxyClass=Proxy.getProxyClass(clazz.getClassLoader(),new Class[]{clazz});
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
106,"Iterator<Class<? extends S>> servicesIterator = load( serviceType, serviceInfo.getClassLoader() )","Iterator<Class<? extends S>> servicesIterator=load(serviceType,serviceInfo.getClassLoader()).iterator();
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
107,proxyClass = new TransientClassLoader( getClass().getClassLoader() ).loadFragmentClass( mainType );,"proxyClass=new TransientClassLoader(getClass().getClassLoader()).loadFragmentClass(mainType);
",0,2,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
108,"return type.cast(Proxy.newProxyInstance(handler.getClass().getClassLoader(), new Class<?>[] {type}, handler));","return type.cast(Proxy.newProxyInstance(handler.getClass().getClassLoader(),new Class<?>[]{type},handler));
",0,4,12,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
109,try( BufferedReader reader = new BufferedReader( new InputStreamReader( getClass().getClassLoader().getResourceAsStream( scriptName ) ) ) ),"try (BufferedReader reader=new BufferedReader(new InputStreamReader(getClass().getClassLoader().getResourceAsStream(scriptName)))){
  engine.eval(reader);
}
 catch (IOException e) {
  throw new ScriptException(""Unable to load "" + scriptName + "" for ""+ descriptor,e);
}
catch (javax.script.ScriptException e) {
  throw new ScriptException(""Unable to parse "" + scriptName + ""."",e);
}
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
110,"return (T)Proxy.newProxyInstance(MongoDbActivityStreamsEntryConverterTest.class.getClassLoader(), new Class[]{clazz}, getInvocationHandler(createId));","return (T)Proxy.newProxyInstance(MongoDbActivityStreamsEntryConverterTest.class.getClassLoader(),new Class[]{clazz},getInvocationHandler(createId));
",0,1,10,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
111,Class testClass = projects[i].getClass().getClassLoader().loadClass(markerClass);,"Class testClass=projects[i].getClass().getClassLoader().loadClass(markerClass);
",0,2,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
112,"return (IgniteInternalCache<Object, Object>)Proxy.newProxyInstance(getClass().getClassLoader(),","return (IgniteInternalCache<Object,Object>)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{IgniteInternalCache.class},new InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method mtd,  Object[] args) throws Throwable {
    if (failMtd.equals(mtd.getName())) {
      IgniteInternalFuture<Object> fut=new GridFinishedFuture<>(new IgniteCheckedException(""Operation failed""));
      return fut;
    }
    if (""setSkipStore"".equals(mtd.getName()))     return proxy;
    if (""forSubjectId"".equals(mtd.getName()))     return proxy;
    if (""keepBinary"".equals(mtd.getName()))     return proxy;
    return mtd.invoke(cache,args);
  }
}
);
",0,1,7,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
113,BeanManager result = beanManager.get(ClassUtils.getClassLoader(null));,"BeanManager result=beanManager.get(ClassUtils.getClassLoader(null));
",0,22,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
114,"Transformer trans = transFact.newTransformer(new StreamSource(this.getClass().getClassLoader().getResourceAsStream(""xsl/testDecryptionReferenceListOutsideEncryptedKey.xsl"")));","Transformer trans=transFact.newTransformer(new StreamSource(this.getClass().getClassLoader().getResourceAsStream(""xsl/testDecryptionReferenceListOutsideEncryptedKey.xsl"")));
",0,95,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
115,this.classLoader = (classLoader != null) ? classLoader : getClass().getClassLoader();,"this.classLoader=(classLoader != null) ? classLoader : getClass().getClassLoader();
",0,3,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
116,"return Reflections.invokeConstructorFromArgs(new Reflections(clazz.getClassLoader()), clazz, argsArray, true);","return Reflections.invokeConstructorFromArgs(new Reflections(clazz.getClassLoader()),clazz,argsArray,true);
",0,1,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
117,"return (T) Proxy.newProxyInstance(requestor.data.getClassLoader(), new Class[] { iface }, requestor);","return (T)Proxy.newProxyInstance(requestor.data.getClassLoader(),new Class[]{iface},requestor);
",0,0,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
118,"try (final InputStream asStream = GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(""org.codehaus.groovy.runtime.callsite.AbstractCallSite""))) {","try (final InputStream asStream=GroovySunClassLoader.class.getClassLoader().getResourceAsStream(resName(""org.codehaus.groovy.runtime.callsite.AbstractCallSite""))){
  ClassReader reader=new ClassReader(asStream);
  final ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  final ClassVisitor cv=new ClassVisitor(CompilerConfiguration.ASM_API_VERSION,cw){
    @Override public void visit(    int version,    int access,    String name,    String signature,    String superName,    String[] interfaces){
      super.visit(version,access,name,signature,""sun/reflect/GroovyMagic"",interfaces);
    }
  }
;
  reader.accept(cv,parsingOptions);
  define(cw.toByteArray(),""org.codehaus.groovy.runtime.callsite.AbstractCallSite"");
}
 ",0,13,8,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
119,"Java2WSDLBuilder builder = new Java2WSDLBuilder(out, CalculatorService.class.getName(), CalculatorService.class.getClassLoader(), new HashMap());","Java2WSDLBuilder builder=new Java2WSDLBuilder(out,CalculatorService.class.getName(),CalculatorService.class.getClassLoader(),new HashMap());
",0,2,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
120,"faultBeanClass = MethodMarshallerUtils.loadClass(faultBeanName, fd.getOperationDescription().getEndpointInterfaceDescription().getEndpointDescription().getAxisService().getClassLoader());","faultBeanClass=MethodMarshallerUtils.loadClass(faultBeanName,fd.getOperationDescription().getEndpointInterfaceDescription().getEndpointDescription().getAxisService().getClassLoader());
",0,7,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
121,return super.getClassLoader();,"return super.getClassLoader();
",0,0,1,,"SimpleName(SuperMethodInvocation-name, ReturnStatement-expression, ),
"
122,"oc = (OMElementConvertor) Class.forName((String) convertorParam.getValue(), true, axisService.getClassLoader()).newInstance();","oc=(OMElementConvertor)Class.forName((String)convertorParam.getValue(),true,axisService.getClassLoader()).newInstance();
",0,10,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
123,"oc = (OMElementConvertor) Class.forName(fqConvertorClassName, true, ConvertorFactory.class.getClassLoader()).newInstance();","oc=(OMElementConvertor)Class.forName(fqConvertorClassName,true,ConvertorFactory.class.getClassLoader()).newInstance();
",0,8,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
124,"return new AvroCoder<>(clazz, new ReflectData(clazz.getClassLoader()).getSchema(clazz));","return new AvroCoder<>(clazz,new ReflectData(clazz.getClassLoader()).getSchema(clazz));
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
125,"assertSame(testClassLoader, optionType.getInterfaces()[0].getClassLoader());","assertSame(testClassLoader,optionType.getInterfaces()[0].getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
126,"assertEquals(ReflectHelpers.class.getClassLoader(), classLoader[0]);","assertEquals(ReflectHelpers.class.getClassLoader(),classLoader[0]);
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
127,Class<?> clazz = (Class<?>) ByteBufAllocatorBuilderTest.class.getClassLoader(),"Class<?> clazz=(Class<?>)ByteBufAllocatorBuilderTest.class.getClassLoader().loadClass(""io.netty.util.internal.OutOfDirectMemoryError"");
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
128,"Class<? extends Location> locationClazz = (Class<? extends Location>) new ClassLoaderUtils(reflections.getClassLoader(), mgmt()).loadClass(locationTypeWithBundlePrefix);","Class<? extends Location> locationClazz=(Class<? extends Location>)new ClassLoaderUtils(reflections.getClassLoader(),mgmt()).loadClass(locationTypeWithBundlePrefix);
",0,0,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
129,return (cl != null) ? cl : getClass().getClassLoader();,"return (cl != null) ? cl : getClass().getClassLoader();
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
130,"ManagementContext mgmt = RebindTestUtils.managementContextBuilder(mementoDir, getClass().getClassLoader())","ManagementContext mgmt=RebindTestUtils.managementContextBuilder(mementoDir,getClass().getClassLoader()).persistPeriodMillis(1).forLive(false).emptyCatalog(true).haMode(mode).buildStarted();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
131,"final Path base = new File(getClass().getClassLoader().getResource(""foo"").getPath()).toPath().getParent().resolve(""test-karaf-home"");","final Path base=new File(getClass().getClassLoader().getResource(""foo"").getPath()).toPath().getParent().resolve(""test-karaf-home"");
",0,6,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
132,return clientClsLdr == null ? this.getClass().getClassLoader() : clientClsLdr;,"return clientClsLdr == null ? this.getClass().getClassLoader() : clientClsLdr;
",0,3,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
133,.orElseGet(() -> Validate.notNull(fallbackClass).getClassLoader());,"return Optional.of(Thread.currentThread()).map(Thread::getContextClassLoader).orElseGet(() -> Validate.notNull(fallbackClass).getClassLoader());
",0,2,5,,"SimpleName(),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
"
134,constructor = compiler.getClassLoader().loadClass(className),"constructor=compiler.getClassLoader().loadClass(className).getDeclaredConstructors()[0];
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ArrayAccess-array, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
135,"return (ConnectionManager) pm.createProxy(kernel.getAbstractNameFor(unproxied), unproxied.getClass().getClassLoader());","return (ConnectionManager)pm.createProxy(kernel.getAbstractNameFor(unproxied),unproxied.getClass().getClassLoader());
",0,1,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
136,"Class<?> type = getCamelContext().getClassResolver().resolveClass(path, JpaComponent.class.getClassLoader());","Class<?> type=getCamelContext().getClassResolver().resolveClass(path,JpaComponent.class.getClassLoader());
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
137,"c = resolver.resolveClass(name, type, org.apache.kafka.clients.producer.KafkaProducer.class.getClassLoader());","c=resolver.resolveClass(name,type,org.apache.kafka.clients.producer.KafkaProducer.class.getClassLoader());
",0,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
138,"ModelType model = (ModelType) Proxy.newProxyInstance(modelClass.getType().getClassLoader(), new Class<?>[] { modelClass.getType() }, handlerResult.getValue());","ModelType model=(ModelType)Proxy.newProxyInstance(modelClass.getType().getClassLoader(),new Class<?>[]{modelClass.getType()},handlerResult.getValue());
",0,1,15,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
139,"private ClassLoader isolatedCl = new URLClassLoader(new URL[0], this.getClass().getClassLoader());","private ClassLoader isolatedCl=new URLClassLoader(new URL[0],this.getClass().getClassLoader());
",0,21,10,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
140,url = Script.class.getClassLoader().getResource(path + File.separator + script);,"url=Script.class.getClassLoader().getResource(path + File.separator + script);
",0,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
141,if (WebSpherePackageScanClassResolver.isWebSphereClassLoader(this.getClass().getClassLoader())) {,"if (WebSpherePackageScanClassResolver.isWebSphereClassLoader(this.getClass().getClassLoader())) {
  LOG.info(""Using WebSphere specific PackageScanClassResolver"");
  packageScanClassResolver=new WebSpherePackageScanClassResolver(""META-INF/services/org/apache/camel/TypeConverter"");
}
 else {
  packageScanClassResolver=new DefaultPackageScanClassResolver();
}
",0,0,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
142,"return new URLClassLoader(urls, tccl != null ? tccl : getClass().getClassLoader());","return new URLClassLoader(urls,tccl != null ? tccl : getClass().getClassLoader());
",0,1,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
143,"URL url = getClass().getClassLoader().getResource(baseUrl + ""/cayenne-"" + testConfigName + "".xml"");","URL url=getClass().getClassLoader().getResource(baseUrl + ""/cayenne-"" + testConfigName+ "".xml"");
",0,6,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
144,"try (Reader r = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(""graphql/schema.graphql""),","try (Reader r=new InputStreamReader(getClass().getClassLoader().getResourceAsStream(""graphql/schema.graphql""),StandardCharsets.UTF_8)){
  typeDefinitionRegistry=schemaParser.parse(r);
}
 catch (IOException e) {
  throw new RuntimeException(e);
}
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
145,List<URL> parentUrls = Arrays.asList(urlsFromClassLoader(this.getClassLoader()));,"List<URL> parentUrls=Arrays.asList(urlsFromClassLoader(this.getClassLoader()));
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
146,"throw new IllegalStateException(onInstance + "" seemingly from wrong class loader: "" + onInstance.getClass().getClassLoader() + "", but expected "" + classLoader);","throw new IllegalStateException(onInstance + "" seemingly from wrong class loader: "" + onInstance.getClass().getClassLoader()+ "", but expected ""+ classLoader);
",0,0,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
147,return clazz.getClassLoader().getClass().getName().equals(InstanceClassLoader.class.getName());,"return clazz.getClassLoader().getClass().getName().equals(InstanceClassLoader.class.getName());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
148,"return new ModuleLoader().load(CayenneToolsModuleProvider.class, getClass().getClassLoader());","return new ModuleLoader().load(CayenneToolsModuleProvider.class,getClass().getClassLoader());
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
149,URL mapURL = getClass().getClassLoader().getResource(MAPS_REQUIRING_SCHEMA_SETUP[i]);,"URL mapURL=getClass().getClassLoader().getResource(MAPS_REQUIRING_SCHEMA_SETUP[i]);
",0,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
150,"return Proxy.newProxyInstance(OSXApplicationWrapper.class.getClassLoader(), new Class<?>[]{handlerClass}, handler);","return Proxy.newProxyInstance(OSXApplicationWrapper.class.getClassLoader(),new Class<?>[]{handlerClass},handler);
",0,0,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
151,"Module fixed  = mgr.createFixed(mani, null, this.getClass().getClassLoader());","Module fixed=mgr.createFixed(mani,null,this.getClass().getClassLoader());
",0,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
152,url = Script.class.getClassLoader().getResource(path + script);,"url=Script.class.getClassLoader().getResource(path + script);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
153,"beanDef.getConstructorArgumentValues().addIndexedArgumentValue(0, ClassUtils.forName(this.baseClass, getClass().getClassLoader()));","beanDef.getConstructorArgumentValues().addIndexedArgumentValue(0,ClassUtils.forName(this.baseClass,getClass().getClassLoader()));
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
154,"super(new URL[]{}, ClassUtils.getClassLoader());","super(new URL[]{},ClassUtils.getClassLoader());
",0,0,5,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
ArrayInitializer(ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
155,type = (TypeToken<T>) TypeToken.get(type.getRawType().getClassLoader().loadClass(autoClassName));,"type=(TypeToken<T>)TypeToken.get(type.getRawType().getClassLoader().loadClass(autoClassName));
",0,1,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
156,return this.classLoaderWriter.getClassLoader().loadClass(className);,"return this.classLoaderWriter.getClassLoader().loadClass(className);
",0,1,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
157,inputStream = getClass().getClassLoader().getResourceAsStream(name + suffix);,"inputStream=getClass().getClassLoader().getResourceAsStream(name + suffix);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
158,final Class<?> clazz = (loader == null ? Bootstrap.class.getClassLoader() : loader).loadClass(OPENEJB_CLI_MAIN_CLASS_NAME);,"final Class<?> clazz=(loader == null ? Bootstrap.class.getClassLoader() : loader).loadClass(OPENEJB_CLI_MAIN_CLASS_NAME);
",0,2,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
159,"final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader()","final EntityResolver resolver=(publicId,systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
",0,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
160,"dBuilder.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader()","dBuilder.setEntityResolver((publicId,systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
161,CLASSLOADER = (threadClassLoader != null) ? threadClassLoader : CryptoCipher.class.getClassLoader();,"CLASSLOADER=(threadClassLoader != null) ? threadClassLoader : CryptoCipher.class.getClassLoader();
",0,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
162,paramTypes[0] = getDigester().getClassLoader().loadClass( paramTypeName );,"paramTypes[0]=getDigester().getClassLoader().loadClass(paramTypeName);
",0,0,6,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
163,this.paramTypes[i] = digester.getClassLoader().loadClass( this.paramClassNames[i] );,"this.paramTypes[i]=digester.getClassLoader().loadClass(this.paramClassNames[i]);
",0,3,9,,"ThisExpression(FieldAccess-expression, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
164,"Class.forName( stackTrace[stackIndex].getClassName(), false, this.getClass().getClassLoader() );","moduleClass=Class.forName(stackTrace[stackIndex].getClassName(),false,this.getClass().getClassLoader());
",0,0,9,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
BooleanLiteral(MethodInvocation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
165,"SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI ).newSchema( this.getClass().getClassLoader().getResource( ""org/apache/commons/digester3/Test13.xsd"" ) );","final Schema test13schema=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(this.getClass().getClassLoader().getResource(""org/apache/commons/digester3/Test13.xsd""));
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
"
166,"return """" + this + ""["" + this.getClass().getClassLoader() + ""]"";","return """" + this + ""[""+ this.getClass().getClassLoader()+ ""]"";
",0,0,7,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
ThisExpression(InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
167,"final SimpleKey<K> simpleKey = new SimpleKey<>(storeByValue ? serializations.copy(manager.getClassLoader(), key) : key);","final SimpleKey<K> simpleKey=new SimpleKey<>(storeByValue ? serializations.copy(manager.getClassLoader(),key) : key);
",0,2,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
168,value = (Subsitutor) Subsitutor.class.getClassLoader().loadClass(name).getDeclaredConstructor().newInstance();,"value=(Subsitutor)Subsitutor.class.getClassLoader().loadClass(name).getDeclaredConstructor().newInstance();
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
169,"filename = getClass().getClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + ""/"" + filename).toString();","filename=getClass().getClassLoader().getResource(getClass().getPackage().getName().replace('.','/') + ""/"" + filename).toString();
",0,30,13,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
170,"ClassLoader loader = ClassLoaderUtils.getClassLoader(null, true, getClass());","ClassLoader loader=ClassLoaderUtils.getClassLoader(null,true,getClass());
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
171,loader = new SoftReference<ClassLoader>(getClass().getClassLoader());,"loader=new SoftReference<ClassLoader>(getClass().getClassLoader());
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
172,"classLoader = new SystemClassLoader(classLoaderPatches, new ClassLoader[] {installer.getClass ().getClassLoader()}, Collections.<Module>emptySet());","classLoader=new SystemClassLoader(classLoaderPatches,new ClassLoader[]{installer.getClass().getClassLoader()},Collections.<Module>emptySet());
",0,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
173,final ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;,"final ClassLoader loader=contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
174,"final L listener = listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(),","final L listener=listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class[]{listenerType},new EventBindingInvocationHandler(target,methodName,eventTypes)));
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
175,"assertTrue( ""app isolated"" ,testObjCls.getClassLoader() == appLoader );","assertTrue(""app isolated"",testObjCls.getClassLoader() == appLoader);
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
176,"super(((URLClassLoader)ApeClassLoader.class.getClassLoader()).getURLs(),","super(((URLClassLoader)ApeClassLoader.class.getClassLoader()).getURLs(),ApeClassLoader.class.getClassLoader().getParent());
",0,3,4,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
177,"assertContainsInOrder(Utils.parseTypes("" java.lang.Number "", getClass().getClassLoader()), Number.class);","assertContainsInOrder(Utils.parseTypes("" java.lang.Number "",getClass().getClassLoader()),Number.class);
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
178,"final ClassLoader proxyClassLoader = Validate.notNull(annotationType, ""annotationType"").getClassLoader();","final ClassLoader proxyClassLoader=Validate.notNull(annotationType,""annotationType"").getClassLoader();
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
179,? this.getClass().getClassLoader().getResource(DEFAULT_MODEL_FILE_NAME).toURI().toURL(),"URL parserModelURL=(this.posModelUri == null) ? this.getClass().getClassLoader().getResource(DEFAULT_MODEL_FILE_NAME).toURI().toURL() : this.posModelUri.toURL();
",0,0,7,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
180,"input = new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(""data/unit-test-2lines-training-data.txt""));","input=new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(""data/unit-test-2lines-training-data.txt""));
",0,7,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
181,"super(new DataFlavor(PACKAGE_FLAVOR.format(new Object[] {new Integer(operation)}), null, PackageNode.class.getClassLoader()));","super(new DataFlavor(PACKAGE_FLAVOR.format(new Object[]{new Integer(operation)}),null,PackageNode.class.getClassLoader()));
",0,2,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, SuperConstructorInvocation-arguments, ),
"
182,Enumeration<URL> urls = (classLoader != null ? classLoader : PropertiesLoaderUtils.class.getClassLoader()),"Enumeration<URL> urls=(classLoader != null ? classLoader : PropertiesLoaderUtils.class.getClassLoader()).getResources(resourceName);
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
183,"this(transactionManager, null, null, null, null, OpenEjbSystemGBean.class.getClassLoader(), new Properties());","this(transactionManager,null,null,null,null,OpenEjbSystemGBean.class.getClassLoader(),new Properties());
",0,21,8,,"SimpleName(ConstructorInvocation-arguments, ),
NullLiteral(ConstructorInvocation-arguments, ),
NullLiteral(ConstructorInvocation-arguments, ),
NullLiteral(ConstructorInvocation-arguments, ),
NullLiteral(ConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConstructorInvocation-arguments, ),
"
184,&& !((BundleReference) Felix.m_secureAction.getClassLoader(m_factory.getClass())).getBundle().equals(m_bundle)),"if ((m_factory != null) && (Felix.m_secureAction.getClassLoader(m_factory.getClass()) instanceof BundleReference) && !((BundleReference)Felix.m_secureAction.getClassLoader(m_factory.getClass())).getBundle().equals(m_bundle)) {
  try {
    Class providedClazz=m_bundle.loadClass(clazz.getName());
    if (providedClazz != null) {
      return providedClazz == clazz;
    }
  }
 catch (  ClassNotFoundException ex) {
  }
  return true;
}
",0,3,8,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
SimpleName(MethodInvocation-arguments, PrefixExpression-operand, ),
"
185,handlers[i] = getClass().getClassLoader().loadClass(handlerClasses[i]);,"handlers[i]=getClass().getClassLoader().loadClass(handlerClasses[i]);
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
186,"ClassLoader c = new FireWallClassLoader(getClass().getClassLoader(), new String[] {""java.""});","ClassLoader c=new FireWallClassLoader(getClass().getClassLoader(),new String[]{""java.""});
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
187,"Object dodgyHandle = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] {Foo.class}, ih);","Object dodgyHandle=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{Foo.class},ih);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
188,"return (T)Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[] { getInnerClass(), java.io.Serializable.class }, h);","return (T)Proxy.newProxyInstance(this.getClass().getClassLoader(),new Class[]{getInnerClass(),java.io.Serializable.class},h);
",0,4,11,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
189,"super(new URL[0], FakeClassLoader.class.getClassLoader());","super(new URL[0],FakeClassLoader.class.getClassLoader());
",0,0,5,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
NumberLiteral(ArrayCreation-dimensions, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
190,"CryptoFactory.getInstance(cryptoProperties, this.getClass().getClassLoader(), null);","Crypto crypto=CryptoFactory.getInstance(cryptoProperties,this.getClass().getClassLoader(),null);
",0,0,7,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
NullLiteral(MethodInvocation-arguments, ),
"
191,if ( ITextSink.class.getClassLoader().getResource( name ) != null ),"if (ITextSink.class.getClassLoader().getResource(name) != null) {
  urlName=ITextSink.class.getClassLoader().getResource(name).toString();
}
",0,24,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
192,"JDOHelper.getPersistenceManagerFactory((String)null, getInitialContext(), this.getClass().getClassLoader());","JDOHelper.getPersistenceManagerFactory((String)null,getInitialContext(),this.getClass().getClassLoader());
",0,4,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
193,"BinaryReaderExImpl reader = new BinaryReaderExImpl(marsh.context(), stream, ctx.config().getClassLoader(), true);","BinaryReaderExImpl reader=new BinaryReaderExImpl(marsh.context(),stream,ctx.config().getClassLoader(),true);
",0,3,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
194,return bmpSingleton != null && bmpSingleton.bmInfos.containsKey(ClassUtils.getClassLoader(null));,"return bmpSingleton != null && bmpSingleton.bmInfos.containsKey(ClassUtils.getClassLoader(null));
",0,0,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-rightOperand, ReturnStatement-expression, ),
"
195,bmpSingleton.bmInfos.remove(ClassUtils.getClassLoader(null));,"bmpSingleton.bmInfos.remove(ClassUtils.getClassLoader(null));
",0,1,5,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
196,Enumeration<URL> urls = ClassUtils.getClassLoader(null).getResources(name);,"Enumeration<URL> urls=ClassUtils.getClassLoader(null).getResources(name);
",0,4,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
197,ConfigResolver.getConfigProvider().releaseConfig(ClassUtils.getClassLoader(null));,"ConfigResolver.getConfigProvider().releaseConfig(ClassUtils.getClassLoader(null));
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
198,byte[] configContent = Files.readAllBytes(FileUtils.getFileForURL(ExcludeWarFileTest.class.getClassLoader(),"byte[] configContent=Files.readAllBytes(FileUtils.getFileForURL(ExcludeWarFileTest.class.getClassLoader().getResource(""META-INF/apache-deltaspike.properties"").toString()).toPath());
",0,3,9,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
199,"inputStream = ClassUtils.getClassLoader(null).getResourceAsStream(""org/quartz/quartz.properties"");","inputStream=ClassUtils.getClassLoader(null).getResourceAsStream(""org/quartz/quartz.properties"");
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
200,return (clazz.getClassLoader() instanceof ThrowAwayClassloader),"return (clazz.getClassLoader() instanceof ThrowAwayClassloader);
",0,1,3,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
201,"Class cuCla = java.lang.reflect.Proxy.newProxyInstance(java.io.Serializable.class.getClassLoader(),","Class cuCla=java.lang.reflect.Proxy.newProxyInstance(java.io.Serializable.class.getClassLoader(),new Class[]{java.io.Serializable.class},new LIH()).getClass();
",0,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
202,"new DataFlavor(MIME_TOP_COMPONENT_CLONEABLE, null, TopComponent.Cloneable.class.getClassLoader())};","return new DataFlavor[]{new DataFlavor(MIME_TOP_COMPONENT,null,TopComponent.class.getClassLoader()),new DataFlavor(MIME_TOP_COMPONENT_CLONEABLE,null,TopComponent.Cloneable.class.getClassLoader())};
",0,1,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
"
203,"for (URL u : NbCollections.iterable(NbCollections.class.getClassLoader().getResources(NbCollections.class.getName().replace('.', '/') + "".class""))) {","for (URL u : NbCollections.iterable(NbCollections.class.getClassLoader().getResources(NbCollections.class.getName().replace('.','/') + "".class""))) {
  assertNotNull(u);
  l2.add(u);
}
",0,7,13,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
204,"private static final URL EXT_LIB = AddContainerCdiBeansExtension.class.getClassLoader().getResource(Translator.class.getName().replace(""."", ""/"") + "".class"");","private static final URL EXT_LIB=AddContainerCdiBeansExtension.class.getClassLoader().getResource(Translator.class.getName().replace(""."",""/"") + "".class"");
",0,3,14,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
205,"loader = new TrackingClassLoader(classPath.toArray(new URL[classPath.size()]), this.getClass().getClassLoader());","loader=new TrackingClassLoader(classPath.toArray(new URL[classPath.size()]),this.getClass().getClassLoader());
",0,2,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
206,Collection<Class<?>> classes = new ArrayList<Class<?>>((Collection<Class<?>>) classesF.get(NbTestCase.class.getClassLoader()));,"@SuppressWarnings(""unchecked"") Collection<Class<?>> classes=new ArrayList<Class<?>>((Collection<Class<?>>)classesF.get(NbTestCase.class.getClassLoader()));
",0,1,14,,"SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, CastExpression-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, ),
"
207,"JBClassLoader loader = new JBClassLoader(urlList.toArray(new URL[] {}), JBDeploymentFactory.class.getClassLoader());","JBClassLoader loader=new JBClassLoader(urlList.toArray(new URL[]{}),JBDeploymentFactory.class.getClassLoader());
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ArrayInitializer(ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
208,|| ((BundleClassLoader) bundle.adapt(BundleWiring.class).getClassLoader()),"if (!bundle.isDeclaredActivationPolicyUsed() || (((BundleRevisionImpl)bundle.adapt(BundleRevision.class)).getDeclaredActivationPolicy() != BundleRevisionImpl.LAZY_ACTIVATION) || ((BundleClassLoader)bundle.adapt(BundleWiring.class).getClassLoader()).isActivationTriggered()) {
  eventType=BundleEvent.STARTED;
  try {
    activateBundle(bundle,false);
  }
 catch (  BundleException ex) {
    rethrow=ex;
  }
}
 else {
  eventType=BundleEvent.LAZY_ACTIVATION;
}
",0,2,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
"
209,"return (T) Proxy.newProxyInstance(base.getClassLoader(), _Arrays.combine(base, (Class<?>[]) new Class[]{WrappingObject.class}) , handler);","return (T)Proxy.newProxyInstance(base.getClassLoader(),_Arrays.combine(base,(Class<?>[])new Class[]{WrappingObject.class}),handler);
",0,2,15,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, CastExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
210,Enumeration<java.net.URL> urls = ClassUtils.getClassLoader().getResources(fileName);,"Enumeration<java.net.URL> urls=ClassUtils.getClassLoader().getResources(fileName);
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
QualifiedName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
211,"final Class<?>[] sig3 = new Class<?>[] { project.getClassLoader().loadClass(ref.getInterfaceName()), Map.class };","final Class<?>[] sig3=new Class<?>[]{project.getClassLoader().loadClass(ref.getInterfaceName()),Map.class};
",0,4,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
212,"return MethodHandles.insertArguments(CLASS_FOR_NAME, 1, true, sender.getClassLoader());","return MethodHandles.insertArguments(CLASS_FOR_NAME,1,true,sender.getClassLoader());
",0,1,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
213,"byte[] md5 = Bytes.getMD5(new File(getClass().getClassLoader().getResource(""md5.testfile.txt"").getFile()));","byte[] md5=Bytes.getMD5(new File(getClass().getClassLoader().getResource(""md5.testfile.txt"").getFile()));
",0,2,11,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
214,"return execute(serviceType.getClassLoader(), classLoader -> {","return execute(serviceType.getClassLoader(),classLoader -> {
  String serviceInterface=serviceRestMetadata.getServiceInterface();
  return forName(serviceInterface,classLoader);
}
);
",0,0,4,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ReturnStatement-expression, ),
"
215,"Class<?> cls = invokerInterface != null ? ReflectUtils.forName(invokerInterface.getClassLoader(), service)","Class<?> cls=invokerInterface != null ? ReflectUtils.forName(invokerInterface.getClassLoader(),service) : ReflectUtils.forName(service);
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
216,"if (AppFinder.findAppContextOrWeb(context.getLoader().getClassLoader(), AppFinder.WebBeansContextTransformer.INSTANCE) != null) {","if (AppFinder.findAppContextOrWeb(context.getLoader().getClassLoader(),AppFinder.WebBeansContextTransformer.INSTANCE) != null) {
  final FilterDef asyncOwbFilter=new FilterDef();
  asyncOwbFilter.setAsyncSupported(""true"");
  asyncOwbFilter.setDescription(""OpenEJB CDI Filter - to propagate @RequestScoped in async tasks"");
  asyncOwbFilter.setDisplayName(""OpenEJB CDI"");
  asyncOwbFilter.setFilterClass(EEFilter.class.getName());
  asyncOwbFilter.setFilterName(EEFilter.class.getName());
  context.addFilterDef(asyncOwbFilter);
  final FilterMap asyncOwbMapping=new FilterMap();
  asyncOwbMapping.setFilterName(asyncOwbFilter.getFilterName());
  asyncOwbMapping.addURLPattern(""/*"");
  context.addFilterMap(asyncOwbMapping);
}
",0,1,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
217,layers[cntr] = UnitTestUtils.class.getClassLoader().getResource(stringLayers[cntr]);,"layers[cntr]=UnitTestUtils.class.getClassLoader().getResource(stringLayers[cntr]);
",0,1,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
218,"return Proxy.newProxyInstance(resourceConsumer.getClass().getClassLoader(), resourceConsumer.getClass().getInterfaces(), new DynamicProxyHandler(resourceConsumer, m_ensure));","return Proxy.newProxyInstance(resourceConsumer.getClass().getClassLoader(),resourceConsumer.getClass().getInterfaces(),new DynamicProxyHandler(resourceConsumer,m_ensure));
",0,3,11,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
219,"return (T)Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class[] { interfaceClass }, new PojoMergeInvocationHandler(callAllNonGetters, pojos));","return (T)Proxy.newProxyInstance(interfaceClass.getClassLoader(),new Class[]{interfaceClass},new PojoMergeInvocationHandler(callAllNonGetters,pojos));
",0,1,11,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
220,clazz = lambda.getClass().getClassLoader().loadClass(lambdaParams[genericParamIndex]);,"clazz=lambda.getClass().getClassLoader().loadClass(lambdaParams[genericParamIndex]);
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
221,"m_nullObject = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { Bundle.class }, new DefaultNullObject());","m_nullObject=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{Bundle.class},new DefaultNullObject());
",0,3,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
222,"p = Proxy.newProxyInstance(c.getClassLoader(), new Class<?>[] { c }, this);","p=Proxy.newProxyInstance(c.getClassLoader(),new Class<?>[]{c},this);
",0,2,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
223,if (classes.length < 3 || ((Felix.m_secureAction.getClassLoader(classes[3]) != m_classloader) ||,"if (classes.length < 3 || ((Felix.m_secureAction.getClassLoader(classes[3]) != m_classloader) || !classes[3].getName().startsWith(""org.apache.felix.framework.""))) {
  ((SecurityManager)sm).checkPermission(new AdaptPermission(type.getName(),this,AdaptPermission.ADAPT));
}
",0,0,7,,"QualifiedName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
224,"url=((ModuleClassLoader)m.getClassLoader()).getResource2(name, null, false);","url=((ModuleClassLoader)m.getClassLoader()).getResource2(name,null,false);
",0,2,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
225,"for (Iterator<AdapterFactory> it = ServiceLoader.load(AdapterFactory.class, Multiton.class.getClassLoader()).iterator(); it.hasNext(); ) {","for (Iterator<AdapterFactory> it=ServiceLoader.load(AdapterFactory.class,Multiton.class.getClassLoader()).iterator(); it.hasNext(); ) {
  AdapterFactory adapterFactory=it.next();
  Class clazz=((Class<?>)((ParameterizedType)adapterFactory.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0]).asSubclass(Multiton.class);
  List<AdapterFactory> adapterFactories=adapterFactoryMap.get(clazz);
  if (adapterFactories == null) {
    adapterFactories=new ArrayList<>();
    adapterFactoryMap.put(clazz,adapterFactories);
  }
  adapterFactories.add(adapterFactory);
}
",0,2,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, ForStatement-expression, ),
"
226,"java.nio.file.Files.walkFileTree(path, (java.nio.file.FileVisitor) Felix.class.getClassLoader().loadClass(""org.apache.felix.framework.util.ClassFileVisitor"")","java.nio.file.Files.walkFileTree(path,(java.nio.file.FileVisitor)Felix.class.getClassLoader().loadClass(""org.apache.felix.framework.util.ClassFileVisitor"").getConstructor(Set.class,Set.class,ClassParser.class,SortedMap.class).newInstance(imports,exports.get(moduleKey),classParser,referred));
",0,6,8,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
227,return (getClass().getClassLoader().getResource(urlPath) != null);,"return (getClass().getClassLoader().getResource(urlPath) != null);
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
228,((BundleWiringImpl) bundle.adapt(BundleWiring.class)).getClassLoader());,"return Class.forName(name,false,((BundleWiringImpl)bundle.adapt(BundleWiring.class)).getClassLoader());
",0,0,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
229,&& (Felix.m_secureAction.getClassLoader(m_factory.getClass()) instanceof BundleReference),"if ((m_factory != null) && (Felix.m_secureAction.getClassLoader(m_factory.getClass()) instanceof BundleReference) && !((BundleReference)Felix.m_secureAction.getClassLoader(m_factory.getClass())).getBundle().equals(m_bundle)) {
  try {
    Class providedClazz=m_bundle.loadClass(clazz.getName());
    if (providedClazz != null) {
      return providedClazz == clazz;
    }
  }
 catch (  ClassNotFoundException ex) {
  }
  return true;
}
",0,8,5,,"QualifiedName(MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, ),
"
230,if ((frameworks == null) && (index == URLHANDLERS_CLASS.getClassLoader())),"if ((frameworks == null) && (index == URLHANDLERS_CLASS.getClassLoader())) {
  frameworks=m_frameworks;
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
231,ClassLoader cl = (wiring != null) ? wiring.getClassLoader() : null;,"ClassLoader cl=(wiring != null) ? wiring.getClassLoader() : null;
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
232,return m_content.getClassLoader().orElse(null);,"return m_content.getClassLoader().orElse(null);
",0,0,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
233,Assume.assumeTrue(requirerActivtor.getClass().getClassLoader().loadClass(TestClass.class.getName()),"Assume.assumeTrue(requirerActivtor.getClass().getClassLoader().loadClass(TestClass.class.getName()) == TestClass.class);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
234,if (!(service.getClass().getClassLoader() instanceof BundleReference)),"if (!(service.getClass().getClassLoader() instanceof BundleReference)) {
  throw new IllegalStateException(""Expected service to be loaded from bundle"");
}
",0,7,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
235,"ClassLoader delegate = l4.loadClass(B.class.getName()).getMethod(""a"").invoke(null).getClass().getClassLoader();","ClassLoader delegate=l4.loadClass(B.class.getName()).getMethod(""a"").invoke(null).getClass().getClassLoader();
",0,2,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
236,"return new URLClassLoader(classPath.toArray(new URL[classPath.size()]), this.getClass().getClassLoader().getParent());","return new URLClassLoader(classPath.toArray(new URL[classPath.size()]),this.getClass().getClassLoader().getParent());
",0,2,11,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
237,"WebAppBundleContext context = new WebAppBundleContext(deployment.getContextPath(), deployment.getBundle(), this.getClass().getClassLoader());","WebAppBundleContext context=new WebAppBundleContext(deployment.getContextPath(),deployment.getBundle(),this.getClass().getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
238,"AppContext mockAppContext = new AppContext(""appId"", SystemInstance.get(),  this.getClass().getClassLoader(), context, context, false);","AppContext mockAppContext=new AppContext(""appId"",SystemInstance.get(),this.getClass().getClassLoader(),context,context,false);
",0,1,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
239,"final LoggerContext ctx = ( LoggerContext ) LogManager.getContext( this.getClass().getClassLoader(), false );","final LoggerContext ctx=(LoggerContext)LogManager.getContext(this.getClass().getClassLoader(),false);
",0,3,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
240,new Class[]{clazz.getClassLoader().loadClass(Dependency.class.getName())});,"Constructor constructor=clazz.getConstructor(new Class[]{clazz.getClassLoader().loadClass(Dependency.class.getName())});
",0,1,7,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
241,return metadata.mbean.getClass().getClassLoader();,"return metadata.mbean.getClass().getClassLoader();
",0,0,3,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
242,"return instantiateImpl(className, cls.getClassLoader(), null, parameters, args).mbean;","return instantiateImpl(className,cls.getClassLoader(),null,parameters,args).mbean;
",0,0,8,,"SimpleName(MethodInvocation-name, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, FieldAccess-expression, ReturnStatement-expression, ),
SimpleName(FieldAccess-name, ReturnStatement-expression, ),
"
243,data.cachedClassLoader =new ExtendedClassLoader( new Empty().getClass().getClassLoader());,"data.cachedClassLoader=new ExtendedClassLoader(new Empty().getClass().getClassLoader());
",0,2,5,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
244,"Object[] args = (Object[])RMIMarshaller.unmarshal(params, server.getClassLoader(loaderName), defaultLoader);","Object[] args=(Object[])RMIMarshaller.unmarshal(params,server.getClassLoader(loaderName),defaultLoader);
",0,0,12,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
245,"URLClassLoader loader = new URLClassLoader(new URL[] {url}, RMIMarshaller.class.getClassLoader().getParent());","URLClassLoader loader=new URLClassLoader(new URL[]{url},RMIMarshaller.class.getClassLoader().getParent());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
246,"final List<ClassDescription> list = ComponentDescriptorIO.read( file, this.project.getClassLoader(), iLog, location );","final List<ClassDescription> list=ComponentDescriptorIO.read(file,this.project.getClassLoader(),iLog,location);
",0,0,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
247,this.project.getClassLoader().loadClass(ref.getInterfaceName());,"this.project.getClassLoader().loadClass(ref.getInterfaceName());
",0,1,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
248,final Class<?>[] sig = new Class<?>[] { project.getClassLoader().loadClass(TYPE_SERVICE_REFERENCE) };,"final Class<?>[] sig=new Class<?>[]{project.getClassLoader().loadClass(TYPE_SERVICE_REFERENCE)};
",0,0,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
249,OsgiManager.this.getClass().getClassLoader(),"OsgiManager.this.getClass().getClassLoader().loadClass(""org.osgi.service.metatype.MetaTypeProvider"");
",0,0,3,,"SimpleName(ThisExpression-qualifier, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
"
250,FlexContext.getMessageBroker() == null ? this.getClass().getClassLoader() :,"javaClass=ClassUtil.createClass(getSource(),FlexContext.getMessageBroker() == null ? this.getClass().getClassLoader() : FlexContext.getMessageBroker().getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
"
251,"getFlinkKafkaPartitioner(tableOptions, context.getClassLoader()).orElse(null),","return createKafkaTableSink(physicalDataType,keyEncodingFormat.orElse(null),valueEncodingFormat,keyProjection,valueProjection,keyPrefix,tableOptions.get(TOPIC).get(0),getKafkaProperties(context.getCatalogTable().getOptions()),getFlinkKafkaPartitioner(tableOptions,context.getClassLoader()).orElse(null),getSinkSemantic(tableOptions),parallelism);
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NullLiteral(MethodInvocation-arguments, ),
"
252,new SerializedValue<>(config).deserializeValue(getClass().getClassLoader());,"final ExecutionConfig copy2=new SerializedValue<>(config).deserializeValue(getClass().getClassLoader());
",0,0,5,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
253,.filter(klass -> klass.getClassLoader() != null),"return renaming.getDefinedClassesUnderRoot().stream().filter(klass -> klass.getClassLoader() != null).collect(Collectors.toMap(renaming::newNameFor,classToTransform -> {
  ClassReader providerClassReader=classReaderFor(classToTransform);
  ClassWriter transformedProvider=remap(renames,providerClassReader);
  return transformedProvider.toByteArray();
}
));
",0,0,5,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, LambdaExpression-body, ),
NullLiteral(InfixExpression-rightOperand, LambdaExpression-body, ),
"
254,ClassLoader cl = ((Class<?>) clazz).getClassLoader();,"ClassLoader cl=((Class<?>)clazz).getClassLoader();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
255,"classLoader = new URLClassLoader(urls.toArray(new URL[0]), DecompiledTab.class.getClassLoader());","classLoader=new URLClassLoader(urls.toArray(new URL[0]),DecompiledTab.class.getClassLoader());
",0,3,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
256,this.valType = (Class<V>) getClass().getClassLoader().loadClass(opts.valueType);,"this.valType=(Class<V>)getClass().getClassLoader().loadClass(opts.valueType);
",0,1,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
257,"(Combiner<K, V>) getClass().getClassLoader().loadClass(opts.combinerType).newInstance();","this.combiner=(Combiner<K,V>)getClass().getClassLoader().loadClass(opts.combinerType).newInstance();
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ),
"
258,this.updateObserver = getClass().getClassLoader().loadClass(opts.updateObserverType),"this.updateObserver=getClass().getClassLoader().loadClass(opts.updateObserverType).asSubclass(UpdateObserver.class).newInstance();
",0,0,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
259,SimpleSerializer simplerSer = SimpleSerializer.class.getClassLoader().loadClass(serType),"SimpleSerializer simplerSer=SimpleSerializer.class.getClassLoader().loadClass(serType).asSubclass(SimpleSerializer.class).newInstance();
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
260,ClassLoader newTCCL = oldTCCL == null ? this.getClass().getClassLoader() : null;,"ClassLoader newTCCL=oldTCCL == null ? this.getClass().getClassLoader() : null;
",0,2,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
261,private File keyFile = new File(ClusterManagementServiceOnServerTest.class.getClassLoader(),"private File keyFile=new File(ClusterManagementServiceOnServerTest.class.getClassLoader().getResource(""ssl/trusted.keystore"").getFile());
",0,0,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
262,.map(possibleFile -> this.getClass().getClassLoader().getResource(possibleFile)),"final URL url=Arrays.stream(new String[]{versionedWarFileName,""tools/Pulse/"" + versionedWarFileName,""tools/Extensions/"" + versionedWarFileName,""lib/"" + versionedWarFileName,unversionedWarFileName}).map(possibleFile -> this.getClass().getClassLoader().getResource(possibleFile)).filter(Objects::nonNull).findFirst().orElse(null);
",0,0,7,,"SimpleName(),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
SimpleName(MethodInvocation-arguments, LambdaExpression-body, ),
"
263,"c = Class.forName(t.getClassName(), false, ObjectName.class.getClassLoader());","c=Class.forName(t.getClassName(),false,ObjectName.class.getClassLoader());
",0,10,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
264,"jks = new File(createTempFileFromResource(ConnectCommandWithSSLTest.class.getClassLoader(),","jks=new File(createTempFileFromResource(ConnectCommandWithSSLTest.class.getClassLoader(),""ssl/trusted.keystore"").getAbsolutePath());
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
265,"bundleContext = new MockBundleContext(getClass().getClassLoader(), BASEDIR.getAbsolutePath(), null, Collections.singletonMap(baseLocation, NEW_ID));","bundleContext=new MockBundleContext(getClass().getClassLoader(),BASEDIR.getAbsolutePath(),null,Collections.singletonMap(baseLocation,NEW_ID));
",0,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
266,"throw (NoClassDefFoundError)new NoClassDefFoundError(""could not get methods from interface: "" + intf.getName() + "" due to: "" + e.getMessage() + "" loaded in classLoader: "" + intf.getClassLoader()).initCause(e);","throw (NoClassDefFoundError)new NoClassDefFoundError(""could not get methods from interface: "" + intf.getName() + "" due to: ""+ e.getMessage()+ "" loaded in classLoader: ""+ intf.getClassLoader()).initCause(e);
",0,8,13,,"SimpleName(SimpleType-name, CastExpression-type, ThrowStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ThrowStatement-expression, ),
"
267,"b.append(""\ntargetClassClassLoader="").append(gbeanInstance.getType().getClassLoader());","b.append(""\ntargetClassClassLoader="").append(gbeanInstance.getType().getClassLoader());
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
268,"private MockBundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), null, configurations, null);","private MockBundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),null,configurations,null);
",0,0,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
269,"MockClassLoader cl = new MockClassLoader(getClass().getClassLoader(), new URL[] {new URL(url1), new URL(url2)});","MockClassLoader cl=new MockClassLoader(getClass().getClassLoader(),new URL[]{new URL(url1),new URL(url2)});
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
270,"protected static MockBundleContext bundleContext = new MockBundleContext(AbstractContextTest.class.getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), null);","protected static MockBundleContext bundleContext=new MockBundleContext(AbstractContextTest.class.getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),null);
",0,0,12,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
271,"LoginModuleGBean lm = new LoginModuleGBean(PropertiesFileLoginModule.class.getName(), null, true, props, ""TestProperties"", getClass().getClassLoader());","LoginModuleGBean lm=new LoginModuleGBean(PropertiesFileLoginModule.class.getName(),null,true,props,""TestProperties"",getClass().getClassLoader());
",0,3,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
272,"CredentialStore credentialStore = new SimpleCredentialStoreImpl(credentials, Collections.<ConfigurationEntryFactory>singleton(gsr), getClass().getClassLoader());","CredentialStore credentialStore=new SimpleCredentialStoreImpl(credentials,Collections.<ConfigurationEntryFactory>singleton(gsr),getClass().getClassLoader());
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
273,"private MockBundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), locations);","private MockBundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),locations);
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
274,configStream = GeronimoConfigurator.class.getClassLoader().getResourceAsStream(this.resourceName);,"configStream=GeronimoConfigurator.class.getClassLoader().getResourceAsStream(this.resourceName);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
275,"gbeans = configurationData.getGBeans(new MockBundle(getClass().getClassLoader(), """", 0L));","gbeans=configurationData.getGBeans(new MockBundle(getClass().getClassLoader(),"""",0L));
",0,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
276,"Bundle bundle = new MockBundleContext(getClass().getClassLoader(), """", null, null).getBundle();","Bundle bundle=new MockBundleContext(getClass().getClassLoader(),"""",null,null).getBundle();
",0,9,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
277,Bundle framework = ((BundleReference)getClass().getClassLoader()).getBundle().getBundleContext().getBundle(0);,"Bundle framework=((BundleReference)getClass().getClassLoader()).getBundle().getBundleContext().getBundle(0);
",0,3,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
278,"org.openide.awt.Mnemonics.setLocalizedText(lblTitle, org.openide.util.NbBundle.getBundle(""org.netbeans.modules.bugtracking.commons.Bundle2"", java.util.Locale.getDefault(), SectionPanel.class.getClassLoader()).getString(""SectionPanel.title""));","org.openide.awt.Mnemonics.setLocalizedText(lblTitle,org.openide.util.NbBundle.getBundle(""org.netbeans.modules.bugtracking.commons.Bundle2"",java.util.Locale.getDefault(),SectionPanel.class.getClassLoader()).getString(""SectionPanel.title""));
",0,3,12,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
279,"Bundle bundle = new MockBundle(getClass().getClassLoader(), """", 0);","Bundle bundle=new MockBundle(getClass().getClassLoader(),"""",0);
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
280,"CORBABean corbaBean = new CORBABean(testName, configAdapter, ""localhost"", 8050, getClass().getClassLoader(), null, null);","CORBABean corbaBean=new CORBABean(testName,configAdapter,""localhost"",8050,getClass().getClassLoader(),null,null);
",0,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
281,"bundleContext = new MockBundleContext(getClass().getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), locations);","bundleContext=new MockBundleContext(getClass().getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),locations);
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
282,"final EjbModule ejbModule = new EjbModule(getClass().getClassLoader(), ""TestModule"", null, ejbJar, new OpenejbJar());","final EjbModule ejbModule=new EjbModule(getClass().getClassLoader(),""TestModule"",null,ejbJar,new OpenejbJar());
",0,2,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
283,"BundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), locations);","BundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),locations);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
284,"WebModule webModule = new WebModule(true, new AbstractName(new URI(""test/test/1.0/car?J2EEApplication=null,j2eeType=WebModule,name=test.war"")), ""test.war"", new Environment(), new DeployableBundle(new MockBundle(WebFragmentTest.class.getClassLoader(), """", 1L)), """",","WebModule webModule=new WebModule(true,new AbstractName(new URI(""test/test/1.0/car?J2EEApplication=null,j2eeType=WebModule,name=test.war"")),""test.war"",new Environment(),new DeployableBundle(new MockBundle(WebFragmentTest.class.getClassLoader(),"""",1L)),"""",new WebApp(),null,"""","""","""",null,null);
",0,0,16,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
285,"WebFragmentTest.class.getClassLoader(), """", 1L)), null, null, null, null, null, null);","super(FileUtils.createTempDir(),null,new Environment(),ConfigurationModuleType.WAR,null,new DummyConfigurationManager(),new MockBundleContext(new MockBundle(WebFragmentTest.class.getClassLoader(),"""",1L)),null,null,null,null,null,null);
",0,0,10,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
NumberLiteral(),
NullLiteral(),
NullLiteral(),
NullLiteral(),
NullLiteral(),
NullLiteral(),
NullLiteral(),
"
286,"return discoverWebServices(((DeployableJarFile) deployable).getJarFile(), AbstractWARWebServiceFinder.class.getClassLoader());","return discoverWebServices(((DeployableJarFile)deployable).getJarFile(),AbstractWARWebServiceFinder.class.getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
287,"new SecurityServiceImpl(this.getClass().getClassLoader(), serverInfo, GeronimoPolicyConfigurationFactory.class.getName(), GeronimoPolicy.class.getName(), null, null, null, null);","new SecurityServiceImpl(this.getClass().getClassLoader(),serverInfo,GeronimoPolicyConfigurationFactory.class.getName(),GeronimoPolicy.class.getName(),null,null,null,null);
",0,0,13,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
"
288,"return parseConfigFile(FacesConfig.class.getClassLoader().getResource(""META-INF/standard-faces-config.xml""), ""META-INF/standard-faces-config.xml"");","return parseConfigFile(FacesConfig.class.getClassLoader().getResource(""META-INF/standard-faces-config.xml""),""META-INF/standard-faces-config.xml"");
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
289,"TomcatServerGBean tomcatServerGBean = new TomcatServerGBean(null, SERVER_1, null, serverInfo, null, null, getClass().getClassLoader(), null);","TomcatServerGBean tomcatServerGBean=new TomcatServerGBean(null,SERVER_1,null,serverInfo,null,null,getClass().getClassLoader(),null);
",0,4,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
290,"Context context = createContext(contextInfo.getContextPath().equals(""/"") ? """" : contextInfo.getContextPath(), contextInfo.getClassLoader(), contextInfo.getWebAppInfo());","Context context=createContext(contextInfo.getContextPath().equals(""/"") ? """" : contextInfo.getContextPath(),contextInfo.getClassLoader(),contextInfo.getWebAppInfo());
",0,0,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
291,"MockBundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), locationURI.toString(), new HashMap<Artifact, ConfigurationData>(), null);","MockBundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),locationURI.toString(),new HashMap<Artifact,ConfigurationData>(),null);
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
292,"bundle = BundleUtils.getBundle(SAAJFactoryFinder.class.getClassLoader(), true);","bundle=BundleUtils.getBundle(SAAJFactoryFinder.class.getClassLoader(),true);
",0,2,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
293,"bundles.add(BundleUtils.getBundle(RestServlet.class.getClassLoader(), true));","bundles.add(BundleUtils.getBundle(RestServlet.class.getClassLoader(),true));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
294,"URL securityConfigUrl = this.getClass().getClassLoader().getResource(""security-profile.""+profile+"".properties"");","URL securityConfigUrl=this.getClass().getClassLoader().getResource(""security-profile."" + profile + "".properties"");
",0,13,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
295,"delegate.put(new SimpleKey<>(serializations.copy(manager.getClassLoader(), key.getKey())), element);","delegate.put(new SimpleKey<>(serializations.copy(manager.getClassLoader(),key.getKey())),element);
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
296,"final NamespaceHandler xbeanHandler = new XBeanNamespaceHandler(NAMESPACE_URI.toString(), BlueprintTestSupport.class.getClassLoader().getResource(""restaurant.xsd""), classes, propertyEditors, properties);","final NamespaceHandler xbeanHandler=new XBeanNamespaceHandler(NAMESPACE_URI.toString(),BlueprintTestSupport.class.getClassLoader().getResource(""restaurant.xsd""),classes,propertyEditors,properties);
",0,0,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
297,"assertEquals(parents[0], clazz.getClassLoader());","assertEquals(parents[0],clazz.getClassLoader());
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
298,if (clazz.getClassLoader() == null) continue;,"if (clazz.getClassLoader() == null) continue;
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
ContinueStatement(IfStatement-thenStatement, ),
"
299,if (directServant_.servant.getClass().getClassLoader() == self,"if (directServant_.servant.getClass().getClassLoader() == self.getClass().getClassLoader()) {
  getRetry();
  if (!directServant_.locate_request()) {
    throw new org.omg.CORBA.OBJECT_NOT_EXIST();
  }
  return true;
}
",0,0,4,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
300,"final Class<?> helperClass = Util.loadClass(expectedType.getName() + ""Helper"", codebase, expectedType.getClassLoader());","final Class<?> helperClass=Util.loadClass(expectedType.getName() + ""Helper"",codebase,expectedType.getClassLoader());
",0,1,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
301,"helperType = Util.loadClass(helperName, null, type.getClassLoader());","helperType=Util.loadClass(helperName,null,type.getClassLoader());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
302,"LOGGER.info(""Hessian(url="" + registry.deploy(deployment.itf.getClassLoader(), server,","LOGGER.info(""Hessian(url="" + registry.deploy(deployment.itf.getClassLoader(),server,service.getVirtualHost(),appName,service.getAuthMethod(),service.getTransportGuarantee(),service.getRealmName(),name) + "", interface=""+ name+ "")"");
",0,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
303,if (theLoader == (Object.class).getClassLoader()),"if (theLoader == (Object.class).getClassLoader()) return null;
",0,0,3,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
304,loaders.add(interfaces[i].getClassLoader());,"loaders.add(interfaces[i].getClassLoader());
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
305,newSchema.newValidator().validate(new StreamSource(getClass().getClassLoader().getResourceAsStream(filename)));,"newSchema.newValidator().validate(new StreamSource(getClass().getClassLoader().getResourceAsStream(filename)));
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
306,org.w3c.dom.Document dom = db.parse(getClass().getClassLoader().getResourceAsStream(filename));,"org.w3c.dom.Document dom=db.parse(getClass().getClassLoader().getResourceAsStream(filename));
",0,0,8,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
307,"basicArgs.put(""classLoader"", loader != null ? loader : sourceUnit.getClassLoader());","basicArgs.put(""classLoader"",loader != null ? loader : sourceUnit.getClassLoader());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
308,if (cls.getClassLoader() == this) return false;,"if (cls.getClassLoader() == this) return false;
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(InfixExpression-rightOperand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
309,"cn = ClassHelper.make(Class.forName(className, false, sourceUnit.getClassLoader()));","cn=ClassHelper.make(Class.forName(className,false,sourceUnit.getClassLoader()));
",0,2,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
310,if (parent == CL_STUB) parent = this.getClass().getClassLoader();,"if (parent == CL_STUB) parent=this.getClass().getClassLoader();
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
311,": b.getClassLoader(), emptyMethods, useDelegate ? delegateClass : null","return (ProxyGeneratorAdapter)adapterCache.getAndPut(key,k -> new ProxyGeneratorAdapter(closureMap,b,intfs,useDelegate ? delegateClass.getClassLoader() : b.getClassLoader(),emptyMethods,useDelegate ? delegateClass : null));
",0,0,6,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(),
SimpleName(ConditionalExpression-expression, ),
SimpleName(ConditionalExpression-thenExpression, ),
NullLiteral(ConditionalExpression-elseExpression, ),
"
312,"return getContext(cls.getClassLoader(), false).getLogger(cls, messageFactory);","return getContext(cls.getClassLoader(),false).getLogger(cls,messageFactory);
",0,1,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
313,"ModuleNode moduleNode = ParserPlugin.buildAST(""Dummy<"" + option + ""> dummy;"", compilationUnit.getConfiguration(), compilationUnit.getClassLoader(), null);","ModuleNode moduleNode=ParserPlugin.buildAST(""Dummy<"" + option + ""> dummy;"",compilationUnit.getConfiguration(),compilationUnit.getClassLoader(),null);
",0,0,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
314,if (clazz.getClassLoader() instanceof GroovyClassLoader.InnerLoader) {,"if (clazz.getClassLoader() instanceof GroovyClassLoader.InnerLoader) {
  GroovyClassLoader.InnerLoader innerLoader=(GroovyClassLoader.InnerLoader)clazz.getClassLoader();
  return innerLoader.getTimeStamp();
}
",0,0,3,,"SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
QualifiedName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
315,GroovyClassLoader.InnerLoader innerLoader = (GroovyClassLoader.InnerLoader) clazz.getClassLoader();,"GroovyClassLoader.InnerLoader innerLoader=(GroovyClassLoader.InnerLoader)clazz.getClassLoader();
",0,0,5,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
316,"classLoaders.register(archive.getName(), SystemInstance.get().getComponent(ContainerSystem.class).getAppContext(info.appId).getClassLoader());","classLoaders.register(archive.getName(),SystemInstance.get().getComponent(ContainerSystem.class).getAppContext(info.appId).getClassLoader());
",0,1,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
317,"Class<?> aClass = getClass().getClassLoader().loadClass(className.replace('/', '.'));","Class<?> aClass=getClass().getClassLoader().loadClass(className.replace('/','.'));
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
318,try (final InputStream asStream = SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))) {,"try (final InputStream asStream=SunClassLoader.class.getClassLoader().getResourceAsStream(resName(name))){
  ClassReader reader=new ClassReader(asStream);
  final ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  reader.accept(cw,ClassReader.SKIP_DEBUG);
  define(cw.toByteArray(),name);
}
 ",0,0,8,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
319,"ExtensionModuleScanner scanner = new ExtensionModuleScanner(new DefaultModuleListener(map), this.getClass().getClassLoader());","ExtensionModuleScanner scanner=new ExtensionModuleScanner(new DefaultModuleListener(map),this.getClass().getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
320,final GroovyClassLoader transformLoader = compilationUnit!=null?compilationUnit.getTransformLoader():typeCheckingVisitor.getSourceUnit().getClassLoader();,"final GroovyClassLoader transformLoader=compilationUnit != null ? compilationUnit.getTransformLoader() : typeCheckingVisitor.getSourceUnit().getClassLoader();
",0,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
321,ClassLoader cl = loader == null ? this.getClass().getClassLoader() : loader;,"ClassLoader cl=loader == null ? this.getClass().getClassLoader() : loader;
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
322,"Class<?> aClass = cu.getClassLoader().defineClass(className, classes.get(0).getBytes());","Class<?> aClass=cu.getClassLoader().defineClass(className,classes.get(0).getBytes());
",0,0,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
323,"List<MethodNode> methods = findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(), dgmReceiver, ""get"" + capName, ClassNode.EMPTY_ARRAY);","List<MethodNode> methods=findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(),dgmReceiver,""get"" + capName,ClassNode.EMPTY_ARRAY);
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
324,"for (MethodNode method : findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(), dgmReceiver, ""is"" + capName, ClassNode.EMPTY_ARRAY)) {","for (MethodNode method : findDGMMethodsByNameAndArguments(getSourceUnit().getClassLoader(),dgmReceiver,""is"" + capName,ClassNode.EMPTY_ARRAY)) {
  if (isPrimitiveBoolean(method.getReturnType()))   methods.add(method);
}
",0,0,9,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-arguments, EnhancedForStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, EnhancedForStatement-expression, ),
QualifiedName(MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
325,return Optional.ofNullable(typeCheckingContext.getCompilationUnit()).map(CompilationUnit::getTransformLoader).orElseGet(() -> getSourceUnit().getClassLoader());,"return Optional.ofNullable(typeCheckingContext.getCompilationUnit()).map(CompilationUnit::getTransformLoader).orElseGet(() -> getSourceUnit().getClassLoader());
",0,0,10,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ExpressionMethodReference-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ReturnStatement-expression, ),
"
326,"try (InputStreamReader isReader = new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(classpathResource), StandardCharsets.UTF_8);","try (InputStreamReader isReader=new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(classpathResource),StandardCharsets.UTF_8);BufferedReader bufferedReader=new BufferedReader(isReader);StringWriter writer=new StringWriter()){
  char[] buf=new char[1024];
  int n;
  while ((n=bufferedReader.read(buf)) != -1) {
    writer.write(buf,0,n);
  }
  writer.close();
  bufferedReader.close();
  return writer.toString();
}
 ",0,1,9,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
327,"return Class.forName(""java.lang."" + name, false, getClass().getClassLoader());","return Class.forName(""java.lang."" + name,false,getClass().getClassLoader());
",0,0,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
328,"CompilationUnit cu = new CompilationUnit(new CompilerConfiguration(), null, gcl, new GroovyClassLoader(this.getClass().getClassLoader()));","CompilationUnit cu=new CompilationUnit(new CompilerConfiguration(),null,gcl,new GroovyClassLoader(this.getClass().getClassLoader()));
",0,1,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
329,"super(spec, MessageContent.fromClasspath(SimpleSOAPSample.class.getClassLoader(), resourceName), name);","super(spec,MessageContent.fromClasspath(SimpleSOAPSample.class.getClassLoader(),resourceName),name);
",0,1,7,,"SimpleName(SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(SuperConstructorInvocation-arguments, ),
"
330,"ClassLoader jspClassLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());","ClassLoader jspClassLoader=new URLClassLoader(new URL[0],this.getClass().getClassLoader());
",0,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
331,"callback.getClass().getClassLoader(), new Class<?>[] { Callback.class },","callbacks.add((Callback)Proxy.newProxyInstance(callback.getClass().getClassLoader(),new Class<?>[]{Callback.class},new InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    try {
      return method.invoke(callback,args);
    }
 catch (    Exception e) {
      LOG.warn(""Caught exception in callback "" + method.getName(),e);
    }
    return null;
  }
}
));
",0,0,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
332,"bspJob.conf.setClassLoader(new URLClassLoader(libjars, bspJob.conf","bspJob.conf.setClassLoader(new URLClassLoader(libjars,bspJob.conf.getClassLoader()));
",0,0,5,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
333,final boolean generatedOrmXmlProvided = appModule.getClassLoader().getResource(GENERATED_ORM_XML) != null;,"final boolean generatedOrmXmlProvided=appModule.getClassLoader().getResource(GENERATED_ORM_XML) != null;
",0,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
334,"Class<?> c = Proxy.getProxyClass(myImpl.getClass().getClassLoader(), myImpl.getClass().getInterfaces());","Class<?> c=Proxy.getProxyClass(myImpl.getClass().getClassLoader(),myImpl.getClass().getInterfaces());
",0,0,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
335,"ClassLoader cl = RMIClassLoader.getClassLoader(new URI(""file:","ClassLoader cl=RMIClassLoader.getClassLoader(new URI(""file://"" + paths[0]).toURL().toString());
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
336,"if(((SpecialClassLoader)this.getClass().getClassLoader()).checkFind(""org.apache.harmony.lang.generics.SpecialC"")==null) {","if (((SpecialClassLoader)this.getClass().getClassLoader()).checkFind(""org.apache.harmony.lang.generics.SpecialC"") == null) {
  fail(""FAILED: "" + this.getClass().getClassLoader().getClass() + "" wasn't marked as initiating classloader for SpecialC"");
}
",0,1,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
337,"pout.write(""<td>""+this.getClass().getClassLoader().getResource(res)+""</td>"");","pout.write(""<td>"" + this.getClass().getClassLoader().getResource(res) + ""</td>"");
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
338,"((SpecialClassLoader)this.getClass().getClassLoader()).loadClass("""");","((SpecialClassLoader)this.getClass().getClassLoader()).loadClass("""");
",0,1,6,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
339,"return forName(name, true, VMClassRegistry.getClassLoader(VMStack","return forName(name,true,VMClassRegistry.getClassLoader(VMStack.getCallerClass(0)));
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
340,VMClassRegistry.getClassLoader(VMStack.getCallerClass(0)) != null) {,"if (sc != null && VMClassRegistry.getClassLoader(VMStack.getCallerClass(0)) != null) {
  sc.checkPermission(RuntimePermissionCollection.GET_CLASS_LOADER_PERMISSION);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
341,"am.loader.l = new URLClassLoader(new URL[] { Utilities.toURI(am.jar).toURL() }, m1.getClassLoader());","am.loader.l=new URLClassLoader(new URL[]{Utilities.toURI(am.jar).toURL()},m1.getClassLoader());
",0,1,10,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
342,"realClass = Class.forName(getClassName(), false, super.getClass().getClassLoader());","realClass=Class.forName(getClassName(),false,super.getClass().getClassLoader());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SuperMethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
343,"webModule.getAltDDs().putAll(DeploymentLoader.mapDescriptors(new ResourceFinder("""", webModule.getClassLoader(), thisJar.toURI().toURL())));","webModule.getAltDDs().putAll(DeploymentLoader.mapDescriptors(new ResourceFinder("""",webModule.getClassLoader(),thisJar.toURI().toURL())));
",0,1,12,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
344,"cls = Class.forName(clsName, false, getClass().getClassLoader()).asSubclass(DataObject.class);","cls=Class.forName(clsName,false,getClass().getClassLoader()).asSubclass(DataObject.class);
",0,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
345,"final ConnectorModule connectorModule = createConnectorModule(jarLocation, jarLocation, webModule.getClassLoader(), webModule.getModuleId() + ""RA"", (URL) webModule.getAltDDs().get(""ra.xml""));","final ConnectorModule connectorModule=createConnectorModule(jarLocation,jarLocation,webModule.getClassLoader(),webModule.getModuleId() + ""RA"",(URL)webModule.getAltDDs().get(""ra.xml""));
",0,6,16,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
346,Path path = Paths.get(getClass().getClassLoader().getResource(fileName).toURI());,"Path path=Paths.get(getClass().getClassLoader().getResource(fileName).toURI());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
347,"new GridClientJdkMarshaller(MarshallerUtils.classNameFilter(this.getClass().getClassLoader())),","marshallers=new GridClientMarshaller[]{new GridClientJdkMarshaller(MarshallerUtils.classNameFilter(this.getClass().getClassLoader())),new GridClientOptimizedMarshaller()};
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
"
348,"Map<URI, GridFutureAdapter<CacheManager>> uriMap = cacheManagers.get(mgr.getClassLoader());","Map<URI,GridFutureAdapter<CacheManager>> uriMap=cacheManagers.get(mgr.getClassLoader());
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
349,if (ldr.equals(e.getKey().getClassLoader())),"if (ldr.equals(e.getKey().getClassLoader())) it.remove();
",0,1,5,,"SimpleName(MethodInvocation-expression, IfStatement-expression, ),
SimpleName(MethodInvocation-name, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, IfStatement-expression, ),
"
350,final ClassLoader providerClassLoader = instanceClassLoader == null ? provider.getClass().getClassLoader() : instanceClassLoader;,"final ClassLoader providerClassLoader=instanceClassLoader == null ? provider.getClass().getClassLoader() : instanceClassLoader;
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
351,IgnitePredicate<String> clsFilter = MarshallerUtils.classNameFilter(this.getClass().getClassLoader());,"IgnitePredicate<String> clsFilter=MarshallerUtils.classNameFilter(this.getClass().getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
352,invokeEntry.cctx.kernalContext().deploy().isGlobalLoader(entryProcessor.getClass().getClassLoader())) {,"if (invokeEntry.cctx.kernalContext().deploy().enabled() && invokeEntry.cctx.kernalContext().deploy().isGlobalLoader(entryProcessor.getClass().getClassLoader())) {
  U.restoreDeploymentContext(invokeEntry.cctx.kernalContext(),invokeEntry.cctx.kernalContext().deploy().getClassLoaderId(entryProcessor.getClass().getClassLoader()));
}
",0,0,7,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
353,"return new BinaryReaderExImpl(binCtx, stream, ctx.config().getClassLoader(), true);","return new BinaryReaderExImpl(binCtx,stream,ctx.config().getClassLoader(),true);
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
354,"() -> (T)Proxy.newProxyInstance(cls.getClassLoader(), new Class[] {cls},","return SecurityUtils.doPrivileged(() -> (T)Proxy.newProxyInstance(cls.getClassLoader(),new Class[]{cls},new SandboxIgniteComponentProxyHandler(ctx,instance)));
",0,0,8,,"SimpleName(SimpleType-name, CastExpression-type, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, CastExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, LambdaExpression-body, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, LambdaExpression-body, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, LambdaExpression-body, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, LambdaExpression-body, ),
"
355,classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));,"classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));
",0,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
356,String key = cls.getName() + System.identityHashCode(cls.getClassLoader());,"String key=cls.getName() + System.identityHashCode(cls.getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
357,"in.context(clsMap, CTX, null, getClass().getClassLoader(), true);","in.context(clsMap,CTX,null,getClass().getClassLoader(),true);
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
358,UsersClassLoader testClassLdr = (UsersClassLoader)grid(0).configuration().getClassLoader();,"UsersClassLoader testClassLdr=(UsersClassLoader)grid(0).configuration().getClassLoader();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
359,grid(idx).cache(DEFAULT_CACHE_NAME).get(i).getClass().getClassLoader());,"assertEquals(grid(idx).configuration().getClassLoader(),grid(idx).cache(DEFAULT_CACHE_NAME).get(i).getClass().getClassLoader());
",0,0,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
360,"return bytes == null ? null : JdkMarshaller.DEFAULT.unmarshal(bytes, getClass().getClassLoader());","return bytes == null ? null : JdkMarshaller.DEFAULT.unmarshal(bytes,getClass().getClassLoader());
",0,0,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
361,assert d.classLoader() == SelfReferencedJob.class.getClassLoader();,"assert d.classLoader() == SelfReferencedJob.class.getClassLoader();
",0,0,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, AssertStatement-expression, ),
"
362,"return marsh.<T>unmarshal(data, getClass().getClassLoader());","return marsh.<T>unmarshal(data,getClass().getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
363,"return new GridTestDeployment(SHARED, getClass().getClassLoader(), ldrId, ""0"", PREDICATE_NAME, false);","return new GridTestDeployment(SHARED,getClass().getClassLoader(),ldrId,""0"",PREDICATE_NAME,false);
",0,0,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
364,"assert p2pJob.getClass().getClassLoader() instanceof GridTestClassLoader : ""Class loader = ""","assert p2pJob.getClass().getClassLoader() instanceof GridTestClassLoader : ""Class loader = "" + res.getClass().getClassLoader();
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, AssertStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, AssertStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, AssertStatement-message, ),
"
365,assert getClass().getClassLoader() == ldr;,"assert getClass().getClassLoader() == ldr;
",0,0,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(InfixExpression-rightOperand, AssertStatement-expression, ),
"
366,assert taskLdr == getClass().getClassLoader();,"assert taskLdr == getClass().getClassLoader();
",0,0,3,,"SimpleName(InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, AssertStatement-expression, ),
"
367,"checkResourceRegisteredInSpi(t1.getClassLoader(), ""GridDeploymentTestTask"", getSpi(), false);","checkResourceRegisteredInSpi(t1.getClassLoader(),""GridDeploymentTestTask"",getSpi(),false);
",0,0,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
368,"neu = Collections.singletonList(Proxy.newProxyInstance(iface.getClassLoader(), new Class<?>[] {iface}, dns));","neu=Collections.singletonList(Proxy.newProxyInstance(iface.getClassLoader(),new Class<?>[]{iface},dns));
",0,0,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
369,"XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(""spring1.xml"", getClass().getClassLoader()));","XmlBeanFactory factory=new XmlBeanFactory(new ClassPathResource(""spring1.xml"",getClass().getClassLoader()));
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
370,CLS_COMMAND_LIST = (Class<? extends Command>)CommandContainer.class.getClassLoader(),"CLS_COMMAND_LIST=(Class<? extends Command>)CommandContainer.class.getClassLoader().loadClass(ORG_H2_COMMAND_COMMAND_LIST);
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
371,"addResources(newDesc.getClassLoader(), newDesc, clss.toArray(new Class<?>[clss.size()]));","addResources(newDesc.getClassLoader(),newDesc,clss.toArray(new Class<?>[clss.size()]));
",0,0,11,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
372,if (!clsLdr.equals(getClass().getClassLoader())),"if (!clsLdr.equals(getClass().getClassLoader())) GridUriDeploymentFileProcessor.cleanupUnit(clsLdr,log);
",0,0,4,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
373,"assertEquals(reqMarker, marshaller.<Profile>unmarshal(data, getClass().getClassLoader()).getMarker());","assertEquals(reqMarker,marshaller.<Profile>unmarshal(data,getClass().getClassLoader()).getMarker());
",0,0,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
374,"marshaller.<String>unmarshal(ses.attributes().get(""key1""), getClass().getClassLoader()));","assertEquals(""val1"",marshaller.<String>unmarshal(ses.attributes().get(""key1""),getClass().getClassLoader()));
",0,0,9,,"SimpleName(MethodInvocation-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
375,clazz = (Class<T>) getClass().getClassLoader().loadClass(clazzName);,"clazz=(Class<T>)getClass().getClassLoader().loadClass(clazzName);
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
376,MementoSerializer<Object> rawSerializer = new XmlMementoSerializer<Object>(mgmt.getClass().getClassLoader());,"MementoSerializer<Object> rawSerializer=new XmlMementoSerializer<Object>(mgmt.getClass().getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
377,"persister = new BrooklynMementoPersisterToObjectStore(store, BrooklynProperties.Factory.newEmpty(), RebindTestUtils.class.getClassLoader());","persister=new BrooklynMementoPersisterToObjectStore(store,BrooklynProperties.Factory.newEmpty(),RebindTestUtils.class.getClassLoader());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
378,"ManagementContext mgmt = RebindTestUtils.managementContextBuilder(mementoDir, getClass().getClassLoader())","ManagementContext mgmt=RebindTestUtils.managementContextBuilder(mementoDir,getClass().getClassLoader()).persistPeriodMillis(1).forLive(false).emptyCatalog(true).buildUnstarted();
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
379,"LOG.debug(""Installing OSGi boot bundles from ""+EmbeddedFelixFramework.class.getClassLoader()+""..."");","LOG.debug(""Installing OSGi boot bundles from "" + EmbeddedFelixFramework.class.getClassLoader() + ""..."");
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
380,".readLines(new InputStreamReader(GobblinAWSClusterLauncherTest.class.getClassLoader().getResourceAsStream(file), ""UTF-8""));","List<String> lines=IOUtils.readLines(new InputStreamReader(GobblinAWSClusterLauncherTest.class.getClassLoader().getResourceAsStream(file),""UTF-8""));
",0,0,7,,"SimpleName(),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
StringLiteral(ClassInstanceCreation-arguments, ),
"
381,"Schema metricReportUtf8 = new Schema.Parser().parse(this.getClass().getClassLoader().getResourceAsStream(""MetricReport.avsc""));","Schema metricReportUtf8=new Schema.Parser().parse(this.getClass().getClassLoader().getResourceAsStream(""MetricReport.avsc""));
",0,11,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
382,try (final InputStream stream = RetentionTestHelper.class.getClassLoader().getResourceAsStream(additionalJobPropsClasspathResource.get().toString())) {,"try (final InputStream stream=RetentionTestHelper.class.getClassLoader().getResourceAsStream(additionalJobPropsClasspathResource.get().toString())){
  additionalJobProps.load(stream);
}
 ",0,5,9,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
383,= (Class<IHealthPolicy>) this.getClass().getClassLoader().loadClass(policyClassName);,"Class<IHealthPolicy> policyClass=(Class<IHealthPolicy>)this.getClass().getClassLoader().loadClass(policyClassName);
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ),
"
384,".orElseGet(() -> ControllerConf.class.getClassLoader().getResource(""webapp"").toExternalForm());","return Optional.ofNullable(getProperty(CONSOLE_WEBAPP_ROOT_PATH)).orElseGet(() -> ControllerConf.class.getClassLoader().getResource(""webapp"").toExternalForm());
",0,0,6,,"SimpleName(),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, LambdaExpression-body, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, LambdaExpression-body, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, ),
"
385,"return Compiler.compiled(conf.getClassLoader(),n.children().nth(0).toString());","return Compiler.compiled(conf.getClassLoader(),n.children().nth(0).toString());
",0,0,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
386,"return this.getClass().getClassLoader().getResourceAsStream(makePath(desc,","return this.getClass().getClassLoader().getResourceAsStream(makePath(desc,this.desc.getIncludedLocales().get(0))) != null;
",0,1,6,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
"
387,"return this.getClass().getClassLoader().getResourceAsStream(makePath(desc, filename));","return this.getClass().getClassLoader().getResourceAsStream(makePath(desc,filename));
",0,0,7,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
388,"return JSONConfigReader.readConfig(VehicleDataSimulator.class.getClassLoader().getResourceAsStream(EXAMPLES_CONFIG_FILE),","return JSONConfigReader.readConfig(VehicleDataSimulator.class.getClassLoader().getResourceAsStream(EXAMPLES_CONFIG_FILE),SimulationConfig.class);
",0,0,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
389,assertThat(new CoreConfigurationProvider().getConfiguration(getClass().getClassLoader())).isNotNull();,"assertThat(new CoreConfigurationProvider().getConfiguration(getClass().getClassLoader())).isNotNull();
",0,0,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
390,"InjectionHelper.sendConfigurationEvent(this.type, config.getContext().getServiceContext().getClassLoader());","InjectionHelper.sendConfigurationEvent(this.type,config.getContext().getServiceContext().getClassLoader());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
391,return spi(configuration.getContext().getServiceContext().getClassLoader()),"return spi(configuration.getContext().getServiceContext().getClassLoader()).createMutableConfiguration(configuration,changePropagationPolicy);
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
"
392,"Enumeration<URL> urls = getClass().getClassLoader().getResources(bundleID+"".""+format);","Enumeration<URL> urls=getClass().getClassLoader().getResources(bundleID + ""."" + format);
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
393,if (webContext == null && appCtx.getWebContexts().size() == 1 && appCtx.getWebContexts().get(0).getClassLoader() == oldLoader) {,"if (webContext == null && appCtx.getWebContexts().size() == 1 && appCtx.getWebContexts().get(0).getClassLoader() == oldLoader) {
  webContext=appCtx.getWebContexts().get(0);
}
",0,1,12,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
394,"Location location = copyFromURL(getClass().getClassLoader().getResource(Constants.Files.LOGBACK_TEMPLATE),","Location location=copyFromURL(getClass().getClassLoader().getResource(Constants.Files.LOGBACK_TEMPLATE),createTempLocation(Constants.Files.LOGBACK_TEMPLATE));
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
395,"String header = Files.readFirstLine(new File(getClass().getClassLoader().getResource(""header.txt"").toURI()),","String header=Files.readFirstLine(new File(getClass().getClassLoader().getResource(""header.txt"").toURI()),Charsets.UTF_8);
",0,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
396,InputStream in = this.getClass().getClassLoader().getResourceAsStream(basePath + '/' + relPath);,"InputStream in=this.getClass().getClassLoader().getResourceAsStream(basePath + '/' + relPath);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
397,"this(new ClasspathResourceLoader(NodeStateAnalyzerFactory.class.getClassLoader()), defaultVersion);","this(new ClasspathResourceLoader(NodeStateAnalyzerFactory.class.getClassLoader()),defaultVersion);
",0,3,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
"
398,"new JcloudsVersion(new ResourceHidingClassLoader(JcloudsVersion.class.getClassLoader(),","new JcloudsVersion(new ResourceHidingClassLoader(JcloudsVersion.class.getClassLoader(),VERSION_RESOURCE_FILE));
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ExpressionStatement-expression, ),
"
399,try { classLoader = Metadata.class.getClassLoader(); } catch (AtlasException ex) {},"try {
  classLoader=Metadata.class.getClassLoader();
}
 catch (AtlasException ex) {
}
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, Block-statements, TryStatement-body, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, CatchClause-exception, TryStatement-catchClauses, ),
SimpleName(SingleVariableDeclaration-name, CatchClause-exception, TryStatement-catchClauses, ),
Block(CatchClause-body, TryStatement-catchClauses, ),
"
400,"GUIMenuSortOrder menuSortOrder = Class.forName(classFullName, false, MenuInfo.class.getClassLoader())","GUIMenuSortOrder menuSortOrder=Class.forName(classFullName,false,MenuInfo.class.getClassLoader()).getDeclaredAnnotation(GUIMenuSortOrder.class);
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
401,return new Tika(new TikaConfig(this.getClass().getClassLoader(),"return new Tika(new TikaConfig(this.getClass().getClassLoader().getResourceAsStream(""org/apache/jmeter/protocol/http/gui/action/tika-config.xml"")));
",0,0,5,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
402,return new Tika(new TikaConfig(HTTPFileArg.class.getClassLoader(),"return new Tika(new TikaConfig(HTTPFileArg.class.getClassLoader().getResourceAsStream(""org/apache/jmeter/protocol/http/gui/action/tika-config.xml"")));
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
403,p = ofNullable(type.getClassLoader()).orElseGet(ClassLoader::getSystemClassLoader),"p=ofNullable(type.getClassLoader()).orElseGet(ClassLoader::getSystemClassLoader).loadClass(parentPack + "".package-info"").getPackage();
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ExpressionMethodReference-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ExpressionMethodReference-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
404,final Collection<URL> urls = NewLoaderLogic.applyBuiltinExcludes(new UrlSet(Assembler.class.getClassLoader()).excludeJvm()).getUrls();,"final Collection<URL> urls=NewLoaderLogic.applyBuiltinExcludes(new UrlSet(Assembler.class.getClassLoader()).excludeJvm()).getUrls();
",0,8,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
405,return TranslationsCheck.class.getClassLoader().getResourceAsStream( base + source );,"return TranslationsCheck.class.getClassLoader().getResourceAsStream(base + source);
",0,0,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
406,"return ClassUtil.class.getClassLoader().loadClass( packageName + ""."" + className );","return ClassUtil.class.getClassLoader().loadClass(packageName + ""."" + className);
",0,0,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ReturnStatement-expression, ),
"
407,final Enumeration< URL > resources = XmlUtil.class.getClassLoader().getResources( xml );,"final Enumeration<URL> resources=XmlUtil.class.getClassLoader().getResources(xml);
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
408,URL url = this.getClass().getClassLoader().getResource(map.getProperty(TRUSTSTORE_FILE));,"URL url=this.getClass().getClassLoader().getResource(map.getProperty(TRUSTSTORE_FILE));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
409,"ResourceBundle rb = this.rb == null ? null : findBundle(this.rb.getBaseBundleName(), locale, c.getClassLoader());","ResourceBundle rb=this.rb == null ? null : findBundle(this.rb.getBaseBundleName(),locale,c.getClassLoader());
",0,0,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
410,"return this.getClass().getClassLoader().getResource(""org/apache/karaf/jaas/modules/properties/test.properties"").getFile();","return this.getClass().getClassLoader().getResource(""org/apache/karaf/jaas/modules/properties/test.properties"").getFile();
",0,0,6,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
411,"URL url = mainClass.getClassLoader().getResource(mainClass.getName().replace(""."", ""/"") + "".class"");","URL url=mainClass.getClassLoader().getResource(mainClass.getName().replace(""."",""/"") + "".class"");
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
412,"return classloader != null ? classloader : (classloader = LoaderUtil.getClassLoader(ResolverUtil.class, null));","return classloader != null ? classloader : (classloader=LoaderUtil.getClassLoader(ResolverUtil.class,null));
",0,1,8,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
413,"FileSystem fs = FileSystems.newFileSystem(profileURI, new HashMap<>(), Builder.class.getClassLoader());","FileSystem fs=FileSystems.newFileSystem(profileURI,new HashMap<>(),Builder.class.getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
414,"is = clazz.getClassLoader().getResourceAsStream(desc.substring(""classpath:"".length()));","is=clazz.getClassLoader().getResourceAsStream(desc.substring(""classpath:"".length()));
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
415,"super(new URL[] {u1.getProtectionDomain().getCodeSource().getLocation()}, u1.getClassLoader().getParent());","super(new URL[]{u1.getProtectionDomain().getCodeSource().getLocation()},u1.getClassLoader().getParent());
",0,1,9,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
416,"return JAXBContext.newInstance(Topology.class.getPackage().getName(), Topology.class.getClassLoader(), properties);","return JAXBContext.newInstance(Topology.class.getPackage().getName(),Topology.class.getClassLoader(),properties);
",0,0,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
417,"JAXBContext jaxbContext = JAXBContext.newInstance( Topology.class.getPackage().getName(), Topology.class.getClassLoader() , properties );","JAXBContext jaxbContext=JAXBContext.newInstance(Topology.class.getPackage().getName(),Topology.class.getClassLoader(),properties);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
418,"final String csvPath = ""file:","final String csvPath=""file://"" + KnoxShellTableCallHistoryTest.class.getClassLoader().getResource(""knoxShellTableLocationsWithZipLessThan14.csv"").getPath();
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
419,"return Proxy.newProxyInstance(clazz.getClassLoader(), new java.lang.Class[] { clazz },","return Proxy.newProxyInstance(clazz.getClassLoader(),new java.lang.Class[]{clazz},new java.lang.reflect.InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    if (Object.class.getMethod(""equals"",Object.class).equals(method)) {
      return proxy == args[0];
    }
    if (Object.class.getMethod(""hashCode"",Object.class).equals(method)) {
      return Integer.valueOf(System.identityHashCode(proxy));
    }
    if (Object.class.getMethod(""toString"",Object.class).equals(method)) {
      return ""Bean "" + getMockedType(proxy);
    }
    return null;
  }
}
);
",0,0,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
"
420,String createOutput = cubeCommand.createCube(new File(TestLensDatabaseCommands.class.getClassLoader(),"String createOutput=cubeCommand.createCube(new File(TestLensDatabaseCommands.class.getClassLoader().getResource(""schema/cubes/base/sample-cube.xml"").toURI()));
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
421,return classLoader == null ? getSessionState().getConf().getClassLoader() : classLoader;,"return classLoader == null ? getSessionState().getConf().getClassLoader() : classLoader;
",0,0,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
422,"Class clz = Class.forName(""ClassLoaderTestClass"", true, getClass().getClassLoader());","Class clz=Class.forName(""ClassLoaderTestClass"",true,getClass().getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
423,"Class clz = Class.forName(TEST_CLASS, true, dbResService.getClassLoader(DB1));","Class clz=Class.forName(TEST_CLASS,true,dbResService.getClassLoader(DB1));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
424,ClassLoader loader = service.getSession(handle).getSessionState().getConf().getClassLoader();,"ClassLoader loader=service.getSession(handle).getSessionState().getConf().getClassLoader();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
425,"isForceTccl() ? null : LoaderUtil.class.getClassLoader(),","final ClassLoader[] candidates={getThreadContextClassLoader(),isForceTccl() ? null : LoaderUtil.class.getClassLoader(),isForceTccl() || GET_CLASS_LOADER_DISABLED ? null : ClassLoader.getSystemClassLoader()};
",0,0,4,,"SimpleName(MethodInvocation-name, ConditionalExpression-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
426,"PluginType<?> type = new PluginType<>(entry, this.getClass().getClassLoader());","PluginType<?> type=new PluginType<>(entry,this.getClass().getClassLoader());
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
427,"final Map<String, List<PluginType<?>>> newPluginsByCategory = decodeCacheFiles(LoaderUtil.getClassLoader());","final Map<String,List<PluginType<?>>> newPluginsByCategory=decodeCacheFiles(LoaderUtil.getClassLoader());
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
428,"LOGGER.debug(""Created logger context for [{}] using [{}]."", this.name, context.getClass().getClassLoader());","LOGGER.debug(""Created logger context for [{}] using [{}]."",this.name,context.getClass().getClassLoader());
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
429,in = AbstractXmlValidatorTest.class.getClassLoader().getResource( entry.getName() ).openStream();,"in=AbstractXmlValidatorTest.class.getClassLoader().getResource(entry.getName()).openStream();
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
430,"request.getForeignImports().put( getClass().getPackage().getName() + "".*"", getClass().getClassLoader() );","request.getForeignImports().put(getClass().getPackage().getName() + "".*"",getClass().getClassLoader());
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
431,"return type.hashCode() + ""@"" + type.getClassLoader().hashCode();","return type.hashCode() + ""@"" + type.getClassLoader().hashCode();
",0,0,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
432,"jsdoc.generate( this.getClass().getClassLoader().getResource( ""jsdoc"" ).getFile(), jsDocDir.getAbsolutePath() );","jsdoc.generate(this.getClass().getClassLoader().getResource(""jsdoc"").getFile(),jsDocDir.getAbsolutePath());
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
433,"try ( RootLoader childFirstLoader = new RootLoader( new URL[] {}, getClass().getClassLoader() ) )","try (RootLoader childFirstLoader=new RootLoader(new URL[]{},getClass().getClassLoader())){
  if (scriptOutput != null) {
    System.setErr(scriptOutput);
    System.setOut(scriptOutput);
  }
  if (classPath != null && !classPath.isEmpty()) {
    for (    String path : classPath) {
      childFirstLoader.addURL(new File(path).toURI().toURL());
    }
  }
  GroovyShell interpreter=new GroovyShell(childFirstLoader,new Binding(globalVariables),new CompilerConfiguration(CompilerConfiguration.DEFAULT));
  try {
    return interpreter.evaluate(script);
  }
 catch (  ThreadDeath e) {
    throw e;
  }
catch (  PowerAssertionError e) {
    throw new ScriptEvaluationException(""Assertion Error"",e);
  }
catch (  Throwable e) {
    throw new ScriptEvaluationException(e);
  }
}
 catch (IOException e) {
  throw new ScriptEvaluationException(e);
}
 finally {
  System.setErr(origErr);
  System.setOut(origOut);
}
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
ArrayInitializer(ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
434,"System.out.println( ""from classloader "" + javax.transaction.InvalidTransactionException.class.getClassLoader() );","System.out.println(""from classloader "" + javax.transaction.InvalidTransactionException.class.getClassLoader());
",0,0,5,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
435,"tryLoadClass( TestNGExecutor.class.getClassLoader(), ""org.testng.annotations.Test"" ) != null;","private static final boolean HAS_TEST_ANNOTATION_ON_CLASSPATH=tryLoadClass(TestNGExecutor.class.getClassLoader(),""org.testng.annotations.Test"") != null;
",0,0,5,,"SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, ),
NullLiteral(InfixExpression-rightOperand, ),
"
436,final DeploymentInfo deployment = Servlets.deployment().setClassLoader(WebServer.class.getClassLoader());,"final DeploymentInfo deployment=Servlets.deployment().setClassLoader(WebServer.class.getClassLoader());
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
437,"return Optional.of(new VFSClassLoader(objects, vfs, vfs.getClass().getClassLoader()));","return Optional.of(new VFSClassLoader(objects,vfs,vfs.getClass().getClassLoader()));
",0,0,8,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
438,cls = new ClassLoader[]{getClass().getClassLoader()};,"cls=new ClassLoader[]{getClass().getClassLoader()};
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
439,"deploymentFinished.put(ClassUtils.getClassLoader(null), Boolean.TRUE);","deploymentFinished.put(ClassUtils.getClassLoader(null),Boolean.TRUE);
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
440,return Boolean.TRUE.equals(deploymentFinished.get(ClassUtils.getClassLoader(null)));,"return Boolean.TRUE.equals(deploymentFinished.get(ClassUtils.getClassLoader(null)));
",0,0,7,,"QualifiedName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
441,"targetClass = loadClassForName(serviceClassName, this.serviceProviderContext.getClassLoader());","targetClass=loadClassForName(serviceClassName,this.serviceProviderContext.getClassLoader());
",0,1,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
442,"return java.lang.reflect.Proxy.newProxyInstance(theInterface.getClassLoader(), new Class[]{theInterface}, new JavascriptProxyFactory(jsClass, FileUtils.readFileToString(script)));","return java.lang.reflect.Proxy.newProxyInstance(theInterface.getClassLoader(),new Class[]{theInterface},new JavascriptProxyFactory(jsClass,FileUtils.readFileToString(script)));
",0,0,12,,"QualifiedName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
443,"final Enumeration<URL> ul = getClass().getClassLoader().getResources(""META-INF/MANIFEST.MF"");","final Enumeration<URL> ul=getClass().getClassLoader().getResources(""META-INF/MANIFEST.MF"");
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
444,"return Class.forName(clazz, false, classpath.getClassLoader(true));","return Class.forName(clazz,false,classpath.getClassLoader(true));
",0,0,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
445,"Class<?> c = Class.forName(clazz, false, classpath.getClassLoader(true));","Class<?> c=Class.forName(clazz,false,classpath.getClassLoader(true));
",0,0,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
446,"return new URLClassLoader(urls.toArray(new URL[] {}), Util.class.getClassLoader());","return new URLClassLoader(urls.toArray(new URL[]{}),Util.class.getClassLoader());
",0,1,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ArrayInitializer(ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
447,"wsdlIS = this.getClass().getClassLoader().getResourceAsStream(""org/netbeans/modules/websvc/wsitconf/resources/templates/"" + fileName + "".template"");","wsdlIS=this.getClass().getClassLoader().getResourceAsStream(""org/netbeans/modules/websvc/wsitconf/resources/templates/"" + fileName + "".template"");
",0,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
448,"FileUtil.class.getClassLoader().setClassAssertionStatus(FileUtil.class.getName(), false);","FileUtil.class.getClassLoader().setClassAssertionStatus(FileUtil.class.getName(),false);
",0,18,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
449,"cp.getClassLoader(true).loadClass(""javax.ejb.embeddable.EJBContainer"");","cp.getClassLoader(true).loadClass(""javax.ejb.embeddable.EJBContainer"");
",0,0,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
450,"String content = JpaControllerUtil.readResource(PersistenceClientIterator.class.getClassLoader().getResourceAsStream(JSFClientGenerator.RESOURCE_FOLDER + UTIL_CLASS_NAMES[i] + "".java.txt""), ""UTF-8"");","String content=JpaControllerUtil.readResource(PersistenceClientIterator.class.getClassLoader().getResourceAsStream(JSFClientGenerator.RESOURCE_FOLDER + UTIL_CLASS_NAMES[i] + "".java.txt""),""UTF-8"");
",0,0,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
451,"content = JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(JSFClientGenerator.RESOURCE_FOLDER + JSFClientGenerator.JSFCRUD_STYLESHEET), ""UTF-8"");","content=JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(JSFClientGenerator.RESOURCE_FOLDER + JSFClientGenerator.JSFCRUD_STYLESHEET),""UTF-8"");
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
452,"super(path.getClassLoader(true), config);","super(path.getClassLoader(true),config);
",0,0,4,,"SimpleName(MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
BooleanLiteral(MethodInvocation-arguments, SuperConstructorInvocation-arguments, ),
SimpleName(SuperConstructorInvocation-arguments, ),
"
453,return new Manifest(new JellyVersion().getClass().getClassLoader().getResourceAsStream(info));,"return new Manifest(new JellyVersion().getClass().getClassLoader().getResourceAsStream(info));
",0,0,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
454,"this(services, MockServices.class.getClassLoader(), true);","this(services,MockServices.class.getClassLoader(),true);
",0,0,4,,"SimpleName(ConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
BooleanLiteral(ConstructorInvocation-arguments, ),
"
455,"JUnitLoader junit = new JUnitLoader(config.parentClassLoader, NbModuleSuite.class.getClassLoader());","JUnitLoader junit=new JUnitLoader(config.parentClassLoader,NbModuleSuite.class.getClassLoader());
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
456,"LOG.log(Level.WARNING, ""Reopen #175325 and save complete log: type="" + type.getName() + "" type.cl="" + type.getClassLoader() +","LOG.log(Level.WARNING,""Reopen #175325 and save complete log: type="" + type.getName() + "" type.cl=""+ type.getClassLoader()+ "" Mutex.cl=""+ Mutex.class.getClassLoader()+ "" clazz.cl=""+ clazz.getClassLoader(),e);
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
457,Set<String> s = NbModuleSuite.S.findEnabledModules(getClass().getClassLoader());,"Set<String> s=NbModuleSuite.S.findEnabledModules(getClass().getClassLoader());
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
458,"private static final String tooltipBranch = ""<img src=\"""" + Annotator.class.getClassLoader().getResource(""org/netbeans/modules/git/resources/icons/branch-badge.png"") + ""\"">&nbsp;"";","private static final String tooltipBranch=""<img src=\"""" + Annotator.class.getClassLoader().getResource(""org/netbeans/modules/git/resources/icons/branch-badge.png"") + ""\"">&nbsp;"";
",0,2,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
459,"Class.forName(Analyzer.Context.class.getName(), true, Analyzer.Context.class.getClassLoader());","Class.forName(Analyzer.Context.class.getName(),true,Analyzer.Context.class.getClassLoader());
",0,1,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
460,"return !RemoteUserInfo.class.getClassLoader().getClass().getName().startsWith(""org.netbeans."");","return !RemoteUserInfo.class.getClassLoader().getClass().getName().startsWith(""org.netbeans."");
",0,0,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, ReturnStatement-expression, ),
"
461,"pp = new TextPreview(prefs, ""text/xml"", getClass().getClassLoader(), ""org/netbeans/modules/options/indentation/indentationExample"");","pp=new TextPreview(prefs,""text/xml"",getClass().getClassLoader(),""org/netbeans/modules/options/indentation/indentationExample"");
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
462,"UnitUtilities.setLookup(new Object[0], this.getClass().getClassLoader());","UnitUtilities.setLookup(new Object[0],this.getClass().getClassLoader());
",0,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
463,"Class<SvnClient> proxyClass = (Class<SvnClient>) Proxy.getProxyClass(SvnClient.class.getClassLoader(), new Class[] {SvnClient.class});","Class<SvnClient> proxyClass=(Class<SvnClient>)Proxy.getProxyClass(SvnClient.class.getClassLoader(),new Class[]{SvnClient.class});
",0,0,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
464,"return (HintContext)Proxy.newProxyInstance(TestUtil.class.getClassLoader(), interfaces.toArray(new Class[interfaces.size()]), new Handler());","return (HintContext)Proxy.newProxyInstance(TestUtil.class.getClassLoader(),interfaces.toArray(new Class[interfaces.size()]),new Handler());
",0,0,12,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
465,"return new OIS(bais, bean.getClass().getClassLoader(), formModel).readObject();","return new OIS(bais,bean.getClass().getClassLoader(),formModel).readObject();
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
466,ClassLoader actualCL = classPath != null ? classPath.getClassLoader(true) : null;,"ClassLoader actualCL=classPath != null ? classPath.getClassLoader(true) : null;
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
467,"ret.setShortDescription(Bundle.ERR_WrongSG(relPath, prjText, NbGradleProject.class.getClassLoader().getResource(WARNING_BADGE)));","ret.setShortDescription(Bundle.ERR_WrongSG(relPath,prjText,NbGradleProject.class.getClassLoader().getResource(WARNING_BADGE)));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
468,final InputStream protoIn = new BufferedInputStream(J2SEDeployProperties.class.getClassLoader().getResourceAsStream(BUILD_SCRIPT_PROTOTYPE))) {,"try (final InputStream buildIn=new BufferedInputStream(buildNativeXml.getInputStream());final InputStream protoIn=new BufferedInputStream(J2SEDeployProperties.class.getClassLoader().getResourceAsStream(BUILD_SCRIPT_PROTOTYPE))){
  final long buildNativeCRC=computeCRC(buildIn);
  final long prototypeCRC=computeCRC(protoIn);
  return buildNativeCRC == prototypeCRC;
}
 catch (IOException ioe) {
  LOG.log(Level.INFO,""Cannot read: {0}"",FileUtil.getFileDisplayName(buildNativeXml));
  return false;
}
",0,0,8,,"Modifier(VariableDeclarationExpression-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
"
469,"defineClass.invoke(unsafe, fqn, classData, 0, classData.length, targetClass.getClassLoader(), targetClass.getProtectionDomain());","defineClass.invoke(unsafe,fqn,classData,0,classData.length,targetClass.getClassLoader(),targetClass.getProtectionDomain());
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
470,"SourceUtilsTestUtil.setLookup(new Object[] {new MockCfg()}, getClass().getClassLoader());","SourceUtilsTestUtil.setLookup(new Object[]{new MockCfg()},getClass().getClassLoader());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
471,"SourceUtilsTestUtil.setLookup(new Object[]{}, getClass().getClassLoader());","SourceUtilsTestUtil.setLookup(new Object[]{},getClass().getClassLoader());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ArrayInitializer(ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
472,"Class c = JShell.Builder.class.getClassLoader().loadClass(""javax.tools.StandardJavaFileManager"");","Class c=JShell.Builder.class.getClassLoader().loadClass(""javax.tools.StandardJavaFileManager"");
",0,0,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
473,"private static final String toolTipBroken = ""<img src=\"""" + MavenProjectNode.class.getClassLoader().getResource(IconResources.BROKEN_PROJECT_BADGE_ICON) + ""\"">&nbsp;"" + ICON_BrokenProjectBadge();","@Messages(""ICON_BrokenProjectBadge=Project loading failed or was not complete"") private static final String toolTipBroken=""<img src=\"""" + MavenProjectNode.class.getClassLoader().getResource(IconResources.BROKEN_PROJECT_BADGE_ICON) + ""\"">&nbsp;""+ ICON_BrokenProjectBadge();
",0,0,12,,"Modifier(),
Modifier(),
Modifier(),
SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, ),
"
474,javaPlatform.getBootstrapLibraries().getClassLoader(true).loadClass(NASHORN_SHELL);,"javaPlatform.getBootstrapLibraries().getClassLoader(true).loadClass(NASHORN_SHELL);
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
475,"Class<?> JSLauncher = cp.getClassLoader(true).loadClass(""com.oracle.truffle.js.shell.JSLauncher"");","Class<?> JSLauncher=cp.getClassLoader(true).loadClass(""com.oracle.truffle.js.shell.JSLauncher"");
",0,0,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
476,"Wizard wizard = new Wizard(null, product.getWizardComponents(), -1, product, product.getClassLoader());","Wizard wizard=new Wizard(null,product.getWizardComponents(),-1,product,product.getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(PrefixExpression-operand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
477,"data.setInstallerMainClass(Class.forName(data.getInstallerMainClassName(), true, data.getClassLoader()));","data.setInstallerMainClass(Class.forName(data.getInstallerMainClassName(),true,data.getClassLoader()));
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
478,final InputStream resource = (loader != null ? loader: getClass().getClassLoader()).getResourceAsStream(uri.getSchemeSpecificPart());,"final InputStream resource=(loader != null ? loader : getClass().getClassLoader()).getResourceAsStream(uri.getSchemeSpecificPart());
",0,0,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
479,"return ""<img src=\"""" + SyncPanel.class.getClassLoader().getResource(src).toExternalForm() + ""\"">&nbsp;"";","return ""<img src=\"""" + SyncPanel.class.getClassLoader().getResource(src).toExternalForm() + ""\"">&nbsp;"";
",0,0,7,,"StringLiteral(InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
480,if ((nbClassLoaderClass.isInstance(ctx[i].getClassLoader())) &&,"if ((nbClassLoaderClass.isInstance(ctx[i].getClassLoader())) && (ctx[i].getProtectionDomain().getCodeSource() != null)) {
  return true;
}
",0,0,5,,"SimpleName(MethodInvocation-expression, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
"
481,InputStream is = LocalFSTest.class.getClassLoader().getResourceAsStream(getResource(0));,"InputStream is=LocalFSTest.class.getClassLoader().getResourceAsStream(getResource(0));
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
482,return frameworkLoader = f.getClass().getClassLoader();,"return frameworkLoader=f.getClass().getClassLoader();
",0,0,4,,"SimpleName(Assignment-leftHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ReturnStatement-expression, ),
"
483,"Enumeration<URL> res = (Enumeration<URL>) loadResource.invoke(null, ""org/foo/Something.txt"", someModule.getClassLoader());","Enumeration<URL> res=(Enumeration<URL>)loadResource.invoke(null,""org/foo/Something.txt"",someModule.getClassLoader());
",0,0,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
484,"ClassLoader loader = new JarClassLoader(Collections.<File>emptyList(), new ClassLoader[] { Module.class.getClassLoader() });","ClassLoader loader=new JarClassLoader(Collections.<File>emptyList(),new ClassLoader[]{Module.class.getClassLoader()});
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
485,"classTop[0] = Class.forName(""org.load3.Load"", true, mTop.getClassLoader());","classTop[0]=Class.forName(""org.load3.Load"",true,mTop.getClassLoader());
",0,0,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
486,"nue = new SystemClassLoader(classLoaderPatches, new ClassLoader[] {ModuleManager.class.getClassLoader()}, Collections.<Module>emptySet());","nue=new SystemClassLoader(classLoaderPatches,new ClassLoader[]{ModuleManager.class.getClassLoader()},Collections.<Module>emptySet());
",0,0,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, MethodInvocation-typeArguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
487,"cls.getClassLoader() + "" and "" + pcl + "" starting from "" + this +","String message=""Will not load class "" + name + "" arbitrarily from one of ""+ cls.getClassLoader()+ "" and ""+ pcl+ "" starting from ""+ this+ ""; see http://wiki.netbeans.org/DevFaqModuleCCE"";
",0,0,6,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(),
SimpleName(),
StringLiteral(),
ThisExpression(),
"
488,"if (!ProxyURLStreamHandlerFactory.class.getClassLoader().getClass().getName().equals(""com.sun.jnlp.JNLPClassLoader"")) {","if (!ProxyURLStreamHandlerFactory.class.getClassLoader().getClass().getName().equals(""com.sun.jnlp.JNLPClassLoader"")) {
  try {
    List<Field> candidates=new ArrayList<Field>();
    for (    Field f : URL.class.getDeclaredFields()) {
      if (f.getType() == URLStreamHandler.class) {
        candidates.add(f);
      }
    }
    if (candidates.size() != 1) {
      throw new Exception(""No, or multiple, URLStreamHandler-valued fields in URL: "" + candidates);
    }
    Field f=candidates.get(0);
    f.setAccessible(true);
    originalJarHandler=(URLStreamHandler)f.get(new URL(""jar:file:/sample.jar!/""));
    LOG.log(Level.FINE,""found originalJarHandler: {0}"",originalJarHandler);
  }
 catch (  Throwable t) {
    if (originalJarHandler == null) {
      LOG.log(Level.SEVERE,""No way to find original stream handler for jar protocol"",t);
    }
  }
}
",0,1,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
489,if (! (cl instanceof ProxyClassLoader) && cl != Util.class.getClassLoader()) {,"if (!(cl instanceof ProxyClassLoader) && cl != Util.class.getClassLoader()) {
  throw new IllegalArgumentException(""Not a package-accessible classloader: "" + cl);
}
",0,0,5,,"SimpleName(InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
490,"return mgr.createFixed(new Manifest(new ByteArrayInputStream(manifest.getBytes())), null, ModuleManagerTest.class.getClassLoader());","return mgr.createFixed(new Manifest(new ByteArrayInputStream(manifest.getBytes())),null,ModuleManagerTest.class.getClassLoader());
",0,0,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
491,"defaults.add(Class.forName(provider, true, CxfRSService.class.getClassLoader()).newInstance());","defaults.add(Class.forName(provider,true,CxfRSService.class.getClassLoader()).newInstance());
",0,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
492,"fail(""Loaded "" + clazz + "" from "" + clazz.getClassLoader() + "" via "" + loader);","fail(""Loaded "" + clazz + "" from ""+ clazz.getClassLoader()+ "" via ""+ loader);
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
493,"System.err.println(""Could not load "" + s + "" from "" + UIUtils.class.getClassLoader() +","System.err.println(""Could not load "" + s + "" from ""+ UIUtils.class.getClassLoader()+ "" at ""+ UIUtils.class.getProtectionDomain().getCodeSource().getLocation());
",0,0,7,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
494,if (cs[j].getClassLoader() instanceof NbClassLoader) {,"if (cs[j].getClassLoader() instanceof NbClassLoader) {
  return false;
}
",0,0,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
495,"Class.forName(PropertyEnv.class.getName(), true, getClass().getClassLoader());","Class.forName(PropertyEnv.class.getName(),true,getClass().getClassLoader());
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
496,"throw (IllegalStateException) new IllegalStateException(""Failed to load "" + clsName + "" from "" + getClass().getClassLoader()).initCause(cnfe);","throw (IllegalStateException)new IllegalStateException(""Failed to load "" + clsName + "" from ""+ getClass().getClassLoader()).initCause(cnfe);
",0,0,9,,"SimpleName(SimpleType-name, CastExpression-type, ThrowStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, MethodInvocation-expression, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ThrowStatement-expression, ),
"
497,"return new DataFlavor(dndMimeType.format(new Object[] {new Integer(actions)}), null, DataObject.class.getClassLoader());","return new DataFlavor(dndMimeType.format(new Object[]{new Integer(actions)}),null,DataObject.class.getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
498,"Class<?> proxy = Proxy.getProxyClass(XMLDataObject.class.getClassLoader(), Document.class, DocumentType.class);","Class<?> proxy=Proxy.getProxyClass(XMLDataObject.class.getClassLoader(),Document.class,DocumentType.class);
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
499,"setLookups(new Lookup[] { al, Lookups.metaInfServices(getClass().getClassLoader()) });","setLookups(new Lookup[]{al,Lookups.metaInfServices(getClass().getClassLoader())});
",0,0,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
500,"Class c = java.lang.reflect.Proxy.getProxyClass(getClass ().getClassLoader(), (Class[])superclasses.toArray(new Class[0]));","Class c=java.lang.reflect.Proxy.getProxyClass(getClass().getClassLoader(),(Class[])superclasses.toArray(new Class[0]));
",0,0,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, CastExpression-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
501,"new Object[] { Lookup.class.getClassLoader(), Thread.currentThread() }","LOG.log(Level.FINER,""About to initialize Lookup@{0}.getDefault() by {1}"",new Object[]{Lookup.class.getClassLoader(),Thread.currentThread()});
",0,0,6,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
502,"out.println(""Node for: "" + type + ""\t"" + ((type == null) ? null : type.getClassLoader()));","out.println(""Node for: "" + type + ""\t""+ ((type == null) ? null : type.getClassLoader()));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ConditionalExpression-thenExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
503,"LOGGER.log(Level.FINER, ""Searching for {0} in {1} from {2}"", new Object[] {clazz.getName(), clazz.getClassLoader(), this});","LOGGER.log(Level.FINER,""Searching for {0} in {1} from {2}"",new Object[]{clazz.getName(),clazz.getClassLoader(),this});
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
504,super (java.lang.Object.class.getClassLoader());,"super(java.lang.Object.class.getClassLoader());
",0,0,2,,"QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
505,"ClassLoader l = FnUtils.newLoader(new Res(), this, CountFnCreationTest.class.getClassLoader().getParent());","ClassLoader l=FnUtils.newLoader(new Res(),this,CountFnCreationTest.class.getClassLoader().getParent());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
506,"ClassLoader loader = FnUtils.newLoader(this, this, KeepAliveTest.class.getClassLoader().getParent());","ClassLoader loader=FnUtils.newLoader(this,this,KeepAliveTest.class.getClassLoader().getParent());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
507,"return ""Bind{"" + ""clazz="" + clazz + ""@"" + clazz.getClassLoader() + "", impl="" + impl + "", priority="" + priority + '}';","return ""Bind{"" + ""clazz="" + clazz + ""@""+ clazz.getClassLoader()+ "", impl=""+ impl+ "", priority=""+ priority+ '}';
",0,0,11,,"StringLiteral(InfixExpression-leftOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ReturnStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
508,"for (Enumeration<URL> en = RepositoryImpl.class.getClassLoader().getResources(""META-INF/generated-layer.xml""); en.hasMoreElements();) {","for (Enumeration<URL> en=RepositoryImpl.class.getClassLoader().getResources(""META-INF/generated-layer.xml""); en.hasMoreElements(); ) {
  found=true;
  layers.add(en.nextElement());
}
",0,0,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationExpression-type, ForStatement-initializers, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ForStatement-initializers, ),
SimpleName(MethodInvocation-expression, ForStatement-expression, ),
SimpleName(MethodInvocation-name, ForStatement-expression, ),
"
509,for (URL layerURL : NbCollections.iterable(this.getClass().getClassLoader().getResources(layerName))) {,"for (URL layerURL : NbCollections.iterable(this.getClass().getClassLoader().getResources(layerName))) {
  layers2Merge.add(layerURL);
}
",0,0,9,,"SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
510,"new URLClassLoader(new URL[]{new File(shieldUrl).toURI().toURL()}, this.getClass().getClassLoader());","ClassLoader shieldClassLoader=new URLClassLoader(new URL[]{new File(shieldUrl).toURI().toURL()},this.getClass().getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
"
511,"clazz = (Class<LogRepository>) Class.forName(LOG_REPOSITORY_CLASS_NAME, true, LogRepositoryFactory.class.getClassLoader());","clazz=(Class<LogRepository>)Class.forName(LOG_REPOSITORY_CLASS_NAME,true,LogRepositoryFactory.class.getClassLoader());
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
512,final Enumeration<URL> parentResourceUrlEnum = bundle.getClassLoader().getParent().getResources(servicesFile);,"final Enumeration<URL> parentResourceUrlEnum=bundle.getClassLoader().getParent().getResources(servicesFile);
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
513,"logger.info(""Closing "" + this.getClass().getClassLoader());","logger.info(""Closing "" + this.getClass().getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
514,"customClassLoader = ClassLoaderUtils.getCustomClassLoader(context.getProperty(MODULES).getValue(), this.getClass().getClassLoader(), getJarFilenameFilter());","customClassLoader=ClassLoaderUtils.getCustomClassLoader(context.getProperty(MODULES).getValue(),this.getClass().getClassLoader(),getJarFilenameFilter());
",0,0,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
515,this.overlayProperties.load(getClass().getClassLoader().getResourceAsStream(OVERLAY_PROPERTIES));,"this.overlayProperties.load(getClass().getClassLoader().getResourceAsStream(OVERLAY_PROPERTIES));
",0,0,7,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
516,"this(TlsToolkitMain.class.getClassLoader().getResourceAsStream(""conf/nifi.properties""));","this(TlsToolkitMain.class.getClassLoader().getResourceAsStream(""conf/nifi.properties""));
",0,0,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
StringLiteral(MethodInvocation-arguments, ConstructorInvocation-arguments, ),
"
517,"private final File file = new File(getClass().getClassLoader().getResource(""file.parquet"").getFile());","private final File file=new File(getClass().getClassLoader().getResource(""file.parquet"").getFile());
",0,1,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
518,"if (canReferenceControllerService && !checkControllerServiceReferenceEligibility((ConfigurableComponent) o, bundle.getClassLoader())) {","if (canReferenceControllerService && !checkControllerServiceReferenceEligibility((ConfigurableComponent)o,bundle.getClassLoader())) {
  registerExtension=false;
  logger.error(String.format(""Skipping component %s because it is bundled with its referenced Controller Service APIs and requires instance class loading."",extensionType.getName()));
}
",0,0,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(CastExpression-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
519,"File rootpath = new File(PerformanceIT.class.getClassLoader().getResource("""").toURI().getPath());","File rootpath=new File(PerformanceIT.class.getClassLoader().getResource("""").toURI().getPath());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
520,"final AppModule app = new AppModule(this.getClass().getClassLoader(), ""test-app"", new Application(""myApp""), false);","final AppModule app=new AppModule(this.getClass().getClassLoader(),""test-app"",new Application(""myApp""),false);
",0,1,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
521,"JndiEncBuilder jndiEncBuilder = new JndiEncBuilder(bean.jndiEnc, injections, transactionType, moduleContext.getId(), null, moduleContext.getUniqueId(), moduleContext.getClassLoader());","JndiEncBuilder jndiEncBuilder=new JndiEncBuilder(bean.jndiEnc,injections,transactionType,moduleContext.getId(),null,moduleContext.getUniqueId(),moduleContext.getClassLoader());
",0,2,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
522,"resourceRef.setResType(chooseType(module.getClassLoader(), resourceInfo.types, resource.getType()));","resourceRef.setResType(chooseType(module.getClassLoader(),resourceInfo.types,resource.getType()));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
523,"final Class<?> editorClass = c.getClassLoader().loadClass(c.getName().replace(""Editors"", type.getSimpleName() + ""Editor""));","final Class<?> editorClass=c.getClassLoader().loadClass(c.getName().replace(""Editors"",type.getSimpleName() + ""Editor""));
",0,2,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
524,"final EjbModule ejbModule = new EjbModule(appModule.getClassLoader(), ""ear-scoped-cdi-beans_"" + appModule.getModuleId(), new EjbJar(), new OpenejbJar());","final EjbModule ejbModule=new EjbModule(appModule.getClassLoader(),""ear-scoped-cdi-beans_"" + appModule.getModuleId(),new EjbJar(),new OpenejbJar());
",0,0,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
525,"ejbModule.setFinder(new FinderFactory.ModuleLimitedFinder(new org.apache.xbean.finder.AnnotationFinder(new WebappAggregatedArchive(appModule.getClassLoader(), appModule.getAltDDs(), xmls))));","ejbModule.setFinder(new FinderFactory.ModuleLimitedFinder(new org.apache.xbean.finder.AnnotationFinder(new WebappAggregatedArchive(appModule.getClassLoader(),appModule.getAltDDs(),xmls))));
",0,0,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
526,"final AnnotationFinder annotationFinder = new AnnotationFinder(new DebugArchive(new ConfigurableClasspathArchive(module.getClassLoader(), url)));","final AnnotationFinder annotationFinder=new AnnotationFinder(new DebugArchive(new ConfigurableClasspathArchive(module.getClassLoader(),url)));
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
527,"final URL url = module.getClassLoader().getResource(""META-INF/"" + name);","final URL url=module.getClassLoader().getResource(""META-INF/"" + name);
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
528,if (classLoader == Object.class.getClassLoader()) return tldUrls;,"if (classLoader == Object.class.getClassLoader()) return tldUrls;
",0,0,4,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(ReturnStatement-expression, IfStatement-thenStatement, ),
"
529,"final Archive archive = new FilteredArchive(new ConfigurableClasspathArchive(module.getClassLoader(), Arrays.asList(url)), new ScanXmlSaverFilter(scanXmlExists, handler, classes));","final Archive archive=new FilteredArchive(new ConfigurableClasspathArchive(module.getClassLoader(),Arrays.asList(url)),new ScanXmlSaverFilter(scanXmlExists,handler,classes));
",0,0,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
530,"return LocalBeanProxyFactory.newProxyInstance(handler.getBeanContext().getClassLoader(), handler, handler.getBeanContext().getBeanClass(), interfaces.toArray(new Class<?>[interfaces.size()]));","return LocalBeanProxyFactory.newProxyInstance(handler.getBeanContext().getClassLoader(),handler,handler.getBeanContext().getBeanClass(),interfaces.toArray(new Class<?>[interfaces.size()]));
",0,1,16,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
531,"return (Class<?>) defineClass.invoke(unsafe, proxyName, proxyBytes, 0, proxyBytes.length, clsToProxy.getClassLoader(), clsToProxy.getProtectionDomain());","return (Class<?>)defineClass.invoke(unsafe,proxyName,proxyBytes,0,proxyBytes.length,clsToProxy.getClassLoader(),clsToProxy.getProtectionDomain());
",0,0,13,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
532,"AppModule app = new AppModule(this.getClass().getClassLoader(), ""classpath-"" + ejbJars.hashCode());","AppModule app=new AppModule(this.getClass().getClassLoader(),""classpath-"" + ejbJars.hashCode());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
533,"final AppModule app = new AppModule(this.getClass().getClassLoader(), unitName + ""-app"");","final AppModule app=new AppModule(this.getClass().getClassLoader(),unitName + ""-app"");
",0,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
534,"AppModule app = new AppModule(this.getClass().getClassLoader(), ""test-app"", new Application(""myApp""), false);","AppModule app=new AppModule(this.getClass().getClassLoader(),""test-app"",new Application(""myApp""),false);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
535,"final Class clazz = Classes.forName(input[i], this.getClass().getClassLoader());","final Class clazz=Classes.forName(input[i],this.getClass().getClassLoader());
",0,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayAccess-index, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
536,"return new BeanContext(null, new IvmContext(), new ModuleContext("""", null, """", new AppContext("""", SystemInstance.get(), testClass.getClassLoader(), new IvmContext(), new IvmContext(), false), new IvmContext(), null), testClass, null, null, null, null, null, null, null, null, null, BeanType.MANAGED, false);","return new BeanContext(null,new IvmContext(),new ModuleContext("""",null,"""",new AppContext("""",SystemInstance.get(),testClass.getClassLoader(),new IvmContext(),new IvmContext(),false),new IvmContext(),null),testClass,null,null,null,null,null,null,null,null,null,BeanType.MANAGED,false);
",0,0,30,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
537,"final Object proxy = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{clazz}, new ServletInvocationHandler());","final Object proxy=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{clazz},new ServletInvocationHandler());
",0,2,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
538,"deployPojo(appInfo.appId, """", ejb.getValue().path, ctx.getBeanClass(), null, ctx.getClassLoader(), ctx.getInjections(),","deployPojo(appInfo.appId,"""",ejb.getValue().path,ctx.getBeanClass(),null,ctx.getClassLoader(),ctx.getInjections(),ctx.getJndiContext(),containerSystem.getAppContext(appInfo.appId).getWebBeansContext(),providers,new ServiceConfiguration(ctx.getProperties(),appInfo.services));
",0,2,13,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
539,"providers = appProviders(appInfo, containerSystem.getAppContext(appInfo.appId).getClassLoader());","providers=appProviders(appInfo,containerSystem.getAppContext(appInfo.appId).getClassLoader());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
540,"deployPojo("""", ejb.getValue().path, ctx.getBeanClass(), null, ctx.getClassLoader(), ctx.getInjections(),","deployPojo("""",ejb.getValue().path,ctx.getBeanClass(),null,ctx.getClassLoader(),ctx.getInjections(),ctx.getJndiContext(),containerSystem.getAppContext(appInfo.appId).getWebBeansContext(),providers,new ServiceConfiguration(ctx.getProperties(),appInfo.services));
",0,2,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
541,"final RsRegistry.AddressInfo address = rsRegistry.createRsHttpListener(appId, web, listener, beanContext.getClassLoader(), nopath.substring(NOPATH_PREFIX.length() - 1), virtualHost, auth, realm);","final RsRegistry.AddressInfo address=rsRegistry.createRsHttpListener(appId,web,listener,beanContext.getClassLoader(),nopath.substring(NOPATH_PREFIX.length() - 1),virtualHost,auth,realm);
",0,1,18,,"Modifier(VariableDeclarationStatement-modifiers, ),
QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
542,"Class moduleType = new DeploymentLoader().discoverModuleType(url, application.getClassLoader(), true);","Class moduleType=new DeploymentLoader().discoverModuleType(url,application.getClassLoader(),true);
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
543,"EjbModule ejbModule = new EjbModule(webModule.getClassLoader(), getEjbModuleId(application), file.getAbsolutePath(), null, null);","EjbModule ejbModule=new EjbModule(webModule.getClassLoader(),getEjbModuleId(application),file.getAbsolutePath(),null,null);
",0,0,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
544,"ejbModule.setClientModule(new ClientModule(null, ejbModule.getClassLoader(), ejbModule.getJarLocation(), null, ejbModule.getModuleId()));","ejbModule.setClientModule(new ClientModule(null,ejbModule.getClassLoader(),ejbModule.getJarLocation(),null,ejbModule.getModuleId()));
",0,0,11,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
545,"ResourceFinder ejbResourceFinder = new ResourceFinder("""", application.getClassLoader(), file.toURI().toURL());","ResourceFinder ejbResourceFinder=new ResourceFinder("""",application.getClassLoader(),file.toURI().toURL());
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
546,"mapping = repos.getMapping(_cls, ctx.store.getContext().","mapping=repos.getMapping(_cls,ctx.store.getContext().getClassLoader(),false);
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
547,"getMetaData((Class) params[_idx], getClass().getClassLoader(), true);","return (ClassMapping)ctx.store.getConfiguration().getMetaDataRepositoryInstance().getMetaData((Class)params[_idx],getClass().getClassLoader(),true);
",0,0,7,,"SimpleName(),
SimpleName(SimpleType-name, CastExpression-type, ),
SimpleName(ArrayAccess-array, CastExpression-expression, ),
SimpleName(ArrayAccess-index, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
BooleanLiteral(),
"
548,"throw new MetaDataException(_loc.get(""no-meta"", cls, cls.getClassLoader()));","throw new MetaDataException(_loc.get(""no-meta"",cls,cls.getClassLoader()));
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
549,return JavaTypes.convert(smd.getInstance(ctx.getClassLoader()).,"return JavaTypes.convert(smd.getInstance(ctx.getClassLoader()).next(ctx,meta),typeCode);
",0,0,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
550,"ProductDerivations.load(resourceName, anchor, getClass().getClassLoader()).setInto(this);","ProductDerivations.load(resourceName,anchor,getClass().getClassLoader()).setInto(this);
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
551,"ProductDerivations.load(file, null, getClass().getClassLoader()).","ProductDerivations.load(file,null,getClass().getClassLoader()).setInto(this);
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
"
552,assertTrue(_loader.getClassLoader(0) == SYSTEM_LOADER);,"assertTrue(_loader.getClassLoader(0) == SYSTEM_LOADER);
",0,0,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
553,"boolean ok = MappingTool.run(jdbcConf, entityClassFiles, flags, this.getClass().getClassLoader());","boolean ok=MappingTool.run(jdbcConf,entityClassFiles,flags,this.getClass().getClassLoader());
",0,0,10,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
554,"SchemaTool.run(conf, new String[0], flags, getClass().getClassLoader());","SchemaTool.run(conf,new String[0],flags,getClass().getClassLoader());
",0,0,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
555,"QueryMetaData meta = repos.getQueryMetaData(null, name, _broker.getClassLoader(), true);","QueryMetaData meta=repos.getQueryMetaData(null,name,_broker.getClassLoader(),true);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
556,"replaceAsOpenJPAProperty(map, added, ""ClassResolver"", new ClassResolverImpl(info.getClassLoader()));","replaceAsOpenJPAProperty(map,added,""ClassResolver"",new ClassResolverImpl(info.getClassLoader()));
",0,0,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
557,"new URLClassLoader( (URL[]) urls.toArray( new URL[urls.size()] ), getClass().getClassLoader() );","ClassLoader jpaRealm=new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]),getClass().getClassLoader());
",0,0,11,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, ArrayType-elementType, CastExpression-type, ClassInstanceCreation-arguments, ),
Dimension(ArrayType-dimensions, CastExpression-type, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
"
558,"try (InputStream is = getClass().getClassLoader().getResourceAsStream(BACKUP_ROOT + ""jira2423/backup_2423.zip"")) {","try (InputStream is=getClass().getClassLoader().getResourceAsStream(BACKUP_ROOT + ""jira2423/backup_2423.zip"")){
  backupImport.performImport(is,new ProgressHolder());
  Group grp2=groupDao.get(""group2_jira_2423"");
  User usr2=userDao.getByLogin(""testUser2_jira_2423"",User.Type.USER,null);
  assertTrue(usr2.getGroupUsers().stream().filter(gu -> gu.getGroup().getId().equals(grp2.getId())).findFirst().isPresent(),""User2 should belong to group2"");
  roomDao.getMyRooms(usr2.getId(),""bla"",""bla1"").forEach(r -> {
    assertTrue(r.getComment().contains(""user2_jira_2423""));
  }
);
  FileItem f1=fileDao.getByHash(""820b356c-2c96-4634-90c4-3e490432987f"");
  assertEquals(usr2.getId(),f1.getInsertedBy(),""Inserted by is wrong"");
  assertEquals(usr2.getId(),f1.getOwnerId(),""Owner is wrong"");
  FileItem f2=fileDao.getByHash(""7af3f90d-2a8d-44fa-9e0f-79fd87511cc6"");
  assertEquals(grp2.getId(),f2.getGroupId(),""Group is wrong"");
}
 ",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
559,return ofNullable(SeInitializerFacade.class.getClassLoader()),"return ofNullable(SeInitializerFacade.class.getClassLoader()).orElseGet(ClassLoader::getSystemClassLoader).loadClass(name.trim()).asSubclass(SeContainerInitializer.class);
",0,0,3,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
"
560,final Class<? extends Filter> clazz = (Class<? extends Filter>) OWBAutoSetup.class.getClassLoader(),"final Class<? extends Filter> clazz=(Class<? extends Filter>)OWBAutoSetup.class.getClassLoader().loadClass(""org.apache.webbeans.web.context.WebConversationFilter"");
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
561,"return recipe.getClass().getMethod(""create"", ClassLoader.class).invoke(recipe, configClass.getClassLoader());","return recipe.getClass().getMethod(""create"",ClassLoader.class).invoke(recipe,configClass.getClassLoader());
",0,0,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
562,".invoke(config, recipe.getClass().getMethod(""create"", ClassLoader.class).invoke(recipe, configClass.getClassLoader()));","configClass.getMethod(""setLoginConfig"",Collection.class).invoke(config,recipe.getClass().getMethod(""create"",ClassLoader.class).invoke(recipe,configClass.getClassLoader()));
",0,0,11,,"SimpleName(),
SimpleName(),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
"
563,return getCache(clsLoader != null ? clsLoader : CacheBridge.class.getClassLoader());,"return getCache(clsLoader != null ? clsLoader : CacheBridge.class.getClassLoader());
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
564,assertThat(new PooledPlcDriverManager(PooledPlcDriverManager.class.getClassLoader())).isNotNull();,"assertThat(new PooledPlcDriverManager(PooledPlcDriverManager.class.getClassLoader())).isNotNull();
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
565,"private static final String JAR_NAME = CmdFunctionsTest.class.getClassLoader().getResource(""dummyexamples.jar"").getFile();","private static final String JAR_NAME=CmdFunctionsTest.class.getClassLoader().getResource(""dummyexamples.jar"").getFile();
",0,6,10,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
566,"is = getClass().getClassLoader().getResourceAsStream(""upgrade/"" + storeDirectoryName + ""/test-store/"" + fileName);","is=getClass().getClassLoader().getResourceAsStream(""upgrade/"" + storeDirectoryName + ""/test-store/""+ fileName);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
567,"PackageBuilderConfiguration kconf = (PackageBuilderConfiguration) KnowledgeBuilderFactory.newKnowledgeBuilderConfiguration(null,DroolsBlueprintBean.class.getClassLoader());","PackageBuilderConfiguration kconf=(PackageBuilderConfiguration)KnowledgeBuilderFactory.newKnowledgeBuilderConfiguration(null,DroolsBlueprintBean.class.getClassLoader());
",0,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
568,"this.getClass().getClassLoader().getResourceAsStream(""wsdls"" + req.getPathInfo())));","BufferedReader br=new BufferedReader(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(""wsdls"" + req.getPathInfo())));
",0,0,7,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ),
"
569,"proxy = (Remote) Proxy.newProxyInstance(remoteInterface.getClassLoader(), interfaceArray, this);","proxy=(Remote)Proxy.newProxyInstance(remoteInterface.getClassLoader(),interfaceArray,this);
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
570,"me.getInMessage().setContent(new StreamSource(getClass().getClassLoader().getResourceAsStream(""request.xml"")));","me.getInMessage().setContent(new StreamSource(getClass().getClassLoader().getResourceAsStream(""request.xml"")));
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
571,"this( target.getClass().getClassLoader(), target.getClass().getInterfaces());","this(target.getClass().getClassLoader(),target.getClass().getInterfaces());
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
"
572,"parents[parents.length - 2] = new BundleDelegatingClassLoader(bundle, getClass().getClassLoader());","parents[parents.length - 2]=new BundleDelegatingClassLoader(bundle,getClass().getClassLoader());
",0,0,7,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
NumberLiteral(InfixExpression-rightOperand, ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
573,"processor.setBundleContext((BundleContext) Proxy.newProxyInstance(getClass().getClassLoader(),","processor.setBundleContext((BundleContext)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{BundleContext.class},new InvocationHandler(){
  public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    if (""getBundle"".equals(method.getName())) {
      return (Bundle)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{Bundle.class},new InvocationHandler(){
        public Object invoke(        Object proxy,        Method method,        Object[] args) throws Throwable {
          if (""getBundleId"".equals(method.getName())) {
            return bundleId;
          }
          return null;
        }
      }
);
    }
    return null;
  }
}
));
",0,0,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
574,"return ResourceBundle.getBundle(CodeLists.RESOURCES, locale, UML.class.getClassLoader())","return ResourceBundle.getBundle(CodeLists.RESOURCES,locale,UML.class.getClassLoader()).getString(uml.identifier() + '.' + code.identifier());
",0,0,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
"
575,"final ResourceBundle r = ResourceBundle.getBundle(""org.apache.sis.measure.UnitAliases"", locale, UnitFormat.class.getClassLoader());","final ResourceBundle r=ResourceBundle.getBundle(""org.apache.sis.measure.UnitAliases"",locale,UnitFormat.class.getClassLoader());
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
576,"return base.cast(getBundle(base.getName(), locale, base.getClassLoader(), Loader.INSTANCE));","return base.cast(getBundle(base.getName(),locale,base.getClassLoader(),Loader.INSTANCE));
",0,0,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
577,"System.out.println(""   takes parameter "" + cc.getName() + "" : from "" + cc.getClassLoader());","System.out.println(""   takes parameter "" + cc.getName() + "" : from ""+ cc.getClassLoader());
",0,1,8,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
578,AnalyserTask task = (AnalyserTask) Analyser.class.getClassLoader().loadClass(cls).newInstance();,"AnalyserTask task=(AnalyserTask)Analyser.class.getClassLoader().loadClass(cls).newInstance();
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
579,"Object msf = Proxy.newProxyInstance(listenerClass.getClassLoader(), new Class[] {listenerClass}, new InvocationHandler() {","Object msf=Proxy.newProxyInstance(listenerClass.getClassLoader(),new Class[]{listenerClass},new InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    Class<?> mdDecl=method.getDeclaringClass();
    if (mdDecl.equals(Object.class)) {
switch (method.getName()) {
case ""equals"":
        return proxy == args[0];
case ""hashCode"":
      return System.identityHashCode(proxy);
case ""toString"":
    return ""Proxy for "" + listenerClass;
default :
  throw new UnsupportedOperationException(""Method "" + method + "" not supported on proxy for ""+ listenerClass);
}
}
if (""configurationEvent"".equals(method.getName()) && args.length == 1) {
final Object event=args[0];
final String factoryPid=(String)eventGetFactoryPidMethod.invoke(event,(Object[])null);
if (FACTORY_PID.equals(factoryPid)) {
final String pid=(String)eventGetPidMethod.invoke(event,(Object[])null);
final Object eventType=eventGetTypeMethod.invoke(event,(Object[])null);
if (eventType.equals(1)) {
  final Object cfg=caGetConfigMethod.invoke(cfgAdmin,new Object[]{pid,null});
  @SuppressWarnings(""unchecked"") final Dictionary<String,Object> props=(Dictionary<String,Object>)cfgGetPropertiesMethod.invoke(cfg,(Object[])null);
  configuration.setConfig(pid,props);
}
 else if (eventType.equals(2)) {
  configuration.removeConfig(pid);
}
}
}
return null;
}
}
);
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
580,"final Class<?> installableResourceClass = installer.getClass().getClassLoader().loadClass(""org.apache.sling.installer.api.InstallableResource"");","final Class<?> installableResourceClass=installer.getClass().getClassLoader().loadClass(""org.apache.sling.installer.api.InstallableResource"");
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
581,currentThread.setContextClassLoader(JndiRegistrationSupport.this.getClass().getClassLoader());,"currentThread.setContextClassLoader(JndiRegistrationSupport.this.getClass().getClassLoader());
",0,0,5,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(ThisExpression-qualifier, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
582,return (T) (TeleporterRule.class.getClassLoader().loadClass(className).newInstance());,"return (T)(TeleporterRule.class.getClassLoader().loadClass(className).newInstance());
",0,0,6,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, CastExpression-expression, ReturnStatement-expression, ),
"
583,"ClassLoader classLoader = new HideClassesClassLoader(this.getClass().getClassLoader(), Hidden.class.getName());","ClassLoader classLoader=new HideClassesClassLoader(this.getClass().getClassLoader(),Hidden.class.getName());
",0,0,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
584,when(classLoaderWriter.getClassLoader().loadClass(className)).thenAnswer(invocationOnMock -> MockPojo.class);,"when(classLoaderWriter.getClassLoader().loadClass(className)).thenAnswer(invocationOnMock -> MockPojo.class);
",0,0,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
585,"final ServiceReference<Servlet> reference = (ServiceReference<Servlet>) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{ServiceReference.class}, new InvocationHandler() {","@SuppressWarnings(""unchecked"") final ServiceReference<Servlet> reference=(ServiceReference<Servlet>)Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{ServiceReference.class},new InvocationHandler(){
  @Override public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    if (method.equals(ServiceReference.class.getMethod(""getProperty"",String.class))) {
      return properties.get(args[0]);
    }
 else     if (method.equals(ServiceReference.class.getMethod(""getPropertyKeys""))) {
      return properties.keySet().toArray(new String[0]);
    }
 else     if (method.equals(ServiceReference.class.getMethod(""getBundle""))) {
      return context.getBundle();
    }
 else     if (method.equals(ServiceReference.class.getMethod(""getUsingBundles""))) {
      BundleContext bc=bundleContext.get();
      if (bc != null) {
        return new Bundle[]{bc.getBundle()};
      }
 else {
        return new Bundle[0];
      }
    }
 else     if (method.equals(ServiceReference.class.getMethod(""isAssignableTo"",Bundle.class,String.class))) {
      return Servlet.class.getName().equals(args[1]);
    }
 else     if (method.equals(ServiceReference.class.getMethod(""compareTo"",Object.class))) {
      return compareTo(args[0]);
    }
 else     if (method.getName().equals(""equals"") && Arrays.equals(method.getParameterTypes(),new Class[]{Object.class})) {
      return args[0] instanceof ServiceReference && compareTo(args[0]) == 0;
    }
 else     if (method.getName().equals(""hashCode"") && method.getParameterCount() == 0) {
      return id.intValue();
    }
 else     if (method.getName().equals(""toString"")) {
      return ""Internal reference: "" + id.toString();
    }
 else {
      throw new UnsupportedOperationException(method.toGenericString());
    }
  }
  private int compareTo(  Object arg){
    ServiceReference<?> other=(ServiceReference<?>)arg;
    Long id;
    if (""true"".equals(other.getProperty(BundledHooks.class.getName()))) {
      id=(Long)properties.get(Constants.SERVICE_ID);
    }
 else {
      id=-1L;
    }
    Long otherId=(Long)other.getProperty(Constants.SERVICE_ID);
    if (id.equals(otherId)) {
      return 0;
    }
    Object rankObj=properties.get(Constants.SERVICE_RANKING);
    Object otherRankObj=other.getProperty(Constants.SERVICE_RANKING);
    rankObj=(rankObj == null) ? Integer.valueOf(0) : rankObj;
    otherRankObj=(otherRankObj == null) ? Integer.valueOf(0) : otherRankObj;
    Integer rank=(rankObj instanceof Integer) ? (Integer)rankObj : Integer.valueOf(0);
    Integer otherRank=(otherRankObj instanceof Integer) ? (Integer)otherRankObj : Integer.valueOf(0);
    if (rank.compareTo(otherRank) < 0) {
      return -1;
    }
 else     if (rank.compareTo(otherRank) > 0) {
      return 1;
    }
    return (id.compareTo(otherId) < 0) ? 1 : -1;
  }
}
);
",0,1,14,,"Modifier(),
SimpleName(SimpleType-name, ParameterizedType-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, ),
"
586,Enumeration<URL> resEnum = ManifestScanner.class.getClassLoader().getResources(JarFile.MANIFEST_NAME);,"Enumeration<URL> resEnum=ManifestScanner.class.getClassLoader().getResources(JarFile.MANIFEST_NAME);
",0,0,7,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
587,"type = Class.forName(""[L""+type.getName()+"";"", false, type.getClassLoader());","type=Class.forName(""[L"" + type.getName() + "";"",false,type.getClassLoader());
",0,0,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
588,antiSamy = new AntiSamy(Policy.getInstance(AntiSamyPolicyTest.class.getClassLoader().getResourceAsStream(POLICY_FILE)));,"antiSamy=new AntiSamy(Policy.getInstance(AntiSamyPolicyTest.class.getClassLoader().getResourceAsStream(POLICY_FILE)));
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
589,"context.load().binaryFile(this.getClass().getClassLoader().getResourceAsStream(XSSFilterImpl.EMBEDDED_POLICY_PATH),","context.load().binaryFile(this.getClass().getClassLoader().getResourceAsStream(XSSFilterImpl.EMBEDDED_POLICY_PATH),""/libs/"" + XSSFilterImpl.DEFAULT_POLICY_PATH);
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
590,"throw new IllegalStateException(""Could not find '"" + pomPropertiesFile + ""' via classloader '"" + DependencyLifecycleParticipant.class.getClassLoader() + ""'"");","throw new IllegalStateException(""Could not find '"" + pomPropertiesFile + ""' via classloader '""+ DependencyLifecycleParticipant.class.getClassLoader()+ ""'"");
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
591,spotsXml = IOUtils.toString(this.getClass().getClassLoader(),"spotsXml=IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream(testFile));
",0,0,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
592,"context = JAXBContext.newInstance(articleClass.getPackage().getName(), ObjectFactory.class.getClassLoader());","context=JAXBContext.newInstance(articleClass.getPackage().getName(),ObjectFactory.class.getClassLoader());
",0,0,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
593,"return (ClassLoaderInterface) ObjectUtils.defaultIfNull(classLoaderInterface, new ClassLoaderInterfaceDelegate(JSPLoader.class.getClassLoader()));","return (ClassLoaderInterface)ObjectUtils.defaultIfNull(classLoaderInterface,new ClassLoaderInterfaceDelegate(JSPLoader.class.getClassLoader()));
",0,0,7,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
594,"private final static String KEY = JspApplicationContextImpl.class.getName() + ""@"" + JspApplicationContextImpl.class.getClassLoader().hashCode();","private final static String KEY=JspApplicationContextImpl.class.getName() + ""@"" + JspApplicationContextImpl.class.getClassLoader().hashCode();
",0,0,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
595,is = (TypeUtils.class).getClassLoader().getResourceAsStream(TYPE_CONVERTER_PROPERTIES);,"is=(TypeUtils.class).getClassLoader().getResourceAsStream(TYPE_CONVERTER_PROPERTIES);
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
596,"plasticProxyFactory = new PlasticProxyFactoryImpl(getClass().getClassLoader(), LoggerFactory.getLogger(PlasticProxyFactory.class));","plasticProxyFactory=new PlasticProxyFactoryImpl(getClass().getClassLoader(),LoggerFactory.getLogger(PlasticProxyFactory.class));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
597,"byte[] bytecode = PlasticInternalUtils.readBytecodeForClass(manager.getClassLoader(), clazz.getName(), false);","byte[] bytecode=PlasticInternalUtils.readBytecodeForClass(manager.getClassLoader(),clazz.getName(),false);
",0,0,10,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
598,"getXML(pff, this.getClass().getClassLoader(), new UpperCasingContentHandler());","XMLResult xmlResult=getXML(pff,this.getClass().getClassLoader(),new UpperCasingContentHandler());
",0,0,6,,"SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ),
"
599,return new ServiceLoader(TikaServerProcess.class.getClassLoader()),"return new ServiceLoader(TikaServerProcess.class.getClassLoader()).loadServiceProviders(org.apache.tika.server.core.writer.TikaServerWriter.class);
",0,0,3,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
"
600,"new ServiceLoader(ServiceLoader.class.getClassLoader(), LoadErrorHandler.WARN);","this.loader=new ServiceLoader(ServiceLoader.class.getClassLoader(),LoadErrorHandler.WARN);
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
QualifiedName(ClassInstanceCreation-arguments, ),
"
601,return groovy.lang.Script.class.getClassLoader();,"return groovy.lang.Script.class.getClassLoader();
",0,0,2,,"QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
602,(Digester.GeneratedCodeLoader) Catalina.class.getClassLoader().loadClass(loaderClassName).newInstance();,"Digester.GeneratedCodeLoader loader=(Digester.GeneratedCodeLoader)Catalina.class.getClassLoader().loadClass(loaderClassName).newInstance();
",0,0,6,,"QualifiedName(SimpleType-name, CastExpression-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ),
"
603,"return new Resource(stream, getClass().getClassLoader().getResource(name).toURI());","return new Resource(stream,getClass().getClassLoader().getResource(name).toURI());
",0,0,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
604,"return ((ModuleClassLoader)m.getClassLoader()).loadClass2(name, resolve, false);","return ((ModuleClassLoader)m.getClassLoader()).loadClass2(name,resolve,false);
",0,3,7,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
605,"Enumeration myRes=((ModuleClassLoader)m.getClassLoader()).findResources2(name,false);","Enumeration myRes=((ModuleClassLoader)m.getClassLoader()).findResources2(name,false);
",0,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
606,new InputSource(getClass().getClassLoader().getResource(,"source=new InputSource(getClass().getClassLoader().getResource(filename).toURI().toString());
",0,0,4,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
"
607,"return setKeystore(this.getClass().getClassLoader().getResourceAsStream(res),","return setKeystore(this.getClass().getClassLoader().getResourceAsStream(res),pass);
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
608,"final EjbModule earCdiModule = new EjbModule(appModule.getClassLoader(), DeploymentLoader.EAR_SCOPED_CDI_BEANS + appModule.getModuleId(), new EjbJar(), new OpenejbJar());","final EjbModule earCdiModule=new EjbModule(appModule.getClassLoader(),DeploymentLoader.EAR_SCOPED_CDI_BEANS + appModule.getModuleId(),new EjbJar(),new OpenejbJar());
",0,0,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
609,final ClassLoader classLoader = loader == null ? info.appCtx.getClassLoader() : loader;,"final ClassLoader classLoader=loader == null ? info.appCtx.getClassLoader() : loader;
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
610,"moduleContext.getUniqueId(), moduleContext.getClassLoader(), moduleContext.getAppContext() == null ? moduleContext.getProperties() : moduleContext.getAppContext().getProperties());","final JndiEncBuilder jndiEncBuilder=new JndiEncBuilder(bean.jndiEnc,injections,transactionType,moduleContext.getId(),null,moduleContext.getUniqueId(),moduleContext.getClassLoader(),moduleContext.getAppContext() == null ? moduleContext.getProperties() : moduleContext.getAppContext().getProperties());
",0,0,12,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
611,restHandledByTheWebApp = webModule.getClassLoader().loadClass(Application.class.getName()) != Application.class;,"restHandledByTheWebApp=webModule.getClassLoader().loadClass(Application.class.getName()) != Application.class;
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
612,"final URL url = new ResourceFinder("""", appModule.getClassLoader()).getResource(location);","final URL url=new ResourceFinder("""",appModule.getClassLoader()).getResource(location);
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
613,"finder = new FinderFactory.ModuleLimitedFinder(new FinderFactory.OpenEJBAnnotationFinder(new WebappAggregatedArchive(appModule.getClassLoader(), appModule.getAltDDs(), xmls)));","finder=new FinderFactory.ModuleLimitedFinder(new FinderFactory.OpenEJBAnnotationFinder(new WebappAggregatedArchive(appModule.getClassLoader(),appModule.getAltDDs(),xmls)));
",0,0,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
614,"final EjbModule ejbModule = new EjbModule(appModule.getClassLoader(), EAR_SCOPED_CDI_BEANS + appModule.getModuleId(), new EjbJar(), new OpenejbJar());","final EjbModule ejbModule=new EjbModule(appModule.getClassLoader(),EAR_SCOPED_CDI_BEANS + appModule.getModuleId(),new EjbJar(),new OpenejbJar());
",0,0,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
615,"finder = newFinder(new DebugArchive(new ConfigurableClasspathArchive(module.getClassLoader(), url)));","finder=newFinder(new DebugArchive(new ConfigurableClasspathArchive(module.getClassLoader(),url)));
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
616,"final URL wsdlUrl = module.getClassLoader().getResource(wsdlFile.startsWith(""classpath:"") ? wsdlFile.substring(""classpath:"".length()) : wsdlFile);","final URL wsdlUrl=module.getClassLoader().getResource(wsdlFile.startsWith(""classpath:"") ? wsdlFile.substring(""classpath:"".length()) : wsdlFile);
",0,0,14,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, ConditionalExpression-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ConditionalExpression-thenExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
617,"return Class.forName(clazz, false, cl == null ? module.getClassLoader() : cl);","return Class.forName(clazz,false,cl == null ? module.getClassLoader() : cl);
",0,0,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
618,"try (final InputStream is = getClass().getClassLoader().getResourceAsStream(""META-INF/maven/org.apache.openejb/tomee-catalina/pom.properties"")) {","try (final InputStream is=getClass().getClassLoader().getResourceAsStream(""META-INF/maven/org.apache.openejb/tomee-catalina/pom.properties"")){
  if (is != null) {
    final Properties prop=new Properties();
    prop.load(is);
    current=prop.getProperty(""version"");
  }
}
 catch (IOException e) {
  LOGGER.error(""can't get tomee version, will use openejb one"");
}
",0,0,7,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
619,"ModuleContext mockModuleContext =  new ModuleContext(""moduleId"", new URI(""""), ""uniqueId"", mockAppContext, context, this.getClass().getClassLoader());","ModuleContext mockModuleContext=new ModuleContext(""moduleId"",new URI(""""),""uniqueId"",mockAppContext,context,this.getClass().getClassLoader());
",0,0,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
620,"final EjbModule ejbModule = new EjbModule(getClass().getClassLoader(), ""TestModule"", null, null, null);","final EjbModule ejbModule=new EjbModule(getClass().getClassLoader(),""TestModule"",null,null,null);
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
621,"final AppContext appContext = new AppContext("""", SystemInstance.get(), testClass.getClassLoader(), new IvmContext(), new IvmContext(), false);","final AppContext appContext=new AppContext("""",SystemInstance.get(),testClass.getClassLoader(),new IvmContext(),new IvmContext(),false);
",0,0,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
622,final ArchiveResolver instance = ArchiveResolver.class.cast(ProvisioningResolver.class.getClassLoader().loadClass(c));,"final ArchiveResolver instance=ArchiveResolver.class.cast(ProvisioningResolver.class.getClassLoader().loadClass(c));
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
623,"for (final ResourceProvider rp : ServiceLoader.load(ResourceProvider.class, EmbeddedServletContext.class.getClassLoader())) {","for (final ResourceProvider rp : ServiceLoader.load(ResourceProvider.class,EmbeddedServletContext.class.getClassLoader())) {
  resourceProviders.add(rp);
}
",0,1,8,,"Modifier(SingleVariableDeclaration-modifiers, EnhancedForStatement-parameter, ),
SimpleName(SimpleType-name, SingleVariableDeclaration-type, EnhancedForStatement-parameter, ),
SimpleName(SingleVariableDeclaration-name, EnhancedForStatement-parameter, ),
SimpleName(MethodInvocation-expression, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, EnhancedForStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, EnhancedForStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, EnhancedForStatement-expression, ),
"
624,"unserialized[i] = serializer.deserialize(wrapper.getData(), body.getMethodInstance().getDeclaringClass().getClassLoader().loadClass(wrapper.getClassname()));","unserialized[i]=serializer.deserialize(wrapper.getData(),body.getMethodInstance().getDeclaringClass().getClassLoader().loadClass(wrapper.getClassname()));
",0,0,13,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
625,|| (container != null && container.getClassLoader() == classLoader)) {,"if (classLoader == ClassLoader.getSystemClassLoader() || Boolean.getBoolean(""openejb.client.flus-tasks"") || (container != null && container.getClassLoader() == classLoader)) {
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      waitEndOfTasks(GLOBAL_CLIENT_POOL);
    }
  }
);
}
",0,0,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
SimpleName(InfixExpression-rightOperand, InfixExpression-rightOperand, ParenthesizedExpression-expression, ),
"
626,"CXFBusFactory.setDefaultBus(Bus.class.cast(Proxy.newProxyInstance(CxfUtil.class.getClassLoader(), new Class<?>[]{Bus.class}, new ClientAwareBusHandler())));","CXFBusFactory.setDefaultBus(Bus.class.cast(Proxy.newProxyInstance(CxfUtil.class.getClassLoader(),new Class<?>[]{Bus.class},new ClientAwareBusHandler())));
",0,0,13,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
627,server = new HessianServer(deployment.bean.getBeanClass().getClassLoader());,"server=new HessianServer(deployment.bean.getBeanClass().getClassLoader());
",0,0,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
628,"wc.getClassLoader().loadClass(""org.apache.tomee.catalina.JavaeeInstanceManager"").getConstructor(WebContext.class).newInstance(wc));","SystemInstance.get().getComponent(ServletContext.class).setAttribute(""org.apache.tomcat.InstanceManager"",wc.getClassLoader().loadClass(""org.apache.tomee.catalina.JavaeeInstanceManager"").getConstructor(WebContext.class).newInstance(wc));
",0,0,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-arguments, ),
"
629,final ClassLoader appClassLoader = getClassLoader(containerSystem.getAppContext(appInfo.appId).getClassLoader());,"final ClassLoader appClassLoader=getClassLoader(containerSystem.getAppContext(appInfo.appId).getClassLoader());
",0,0,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
630,"final URLClassLoader loader = new URLClassLoader(new URL[0], Server.class.getClassLoader());","final URLClassLoader loader=new URLClassLoader(new URL[0],Server.class.getClassLoader());
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
631,"comp.rebind(""ORB"", new SystemComponentReference(TomcatJndiBuilder.class.getClassLoader().loadClass(""org.omg.CORBA.ORB"")));","comp.rebind(""ORB"",new SystemComponentReference(TomcatJndiBuilder.class.getClassLoader().loadClass(""org.omg.CORBA.ORB"")));
",0,0,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
632,"final List<HandlerChainData> handlerChains = WsBuilder.toHandlerChainData(ref.handlerChains, standardContext.getLoader().getClassLoader());","final List<HandlerChainData> handlerChains=WsBuilder.toHandlerChainData(ref.handlerChains,standardContext.getLoader().getClassLoader());
",0,0,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
633,"final Context comp = Context.class.cast(ContextBindings.getClassLoader().lookup(""comp""));","final Context comp=Context.class.cast(ContextBindings.getClassLoader().lookup(""comp""));
",0,0,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
634,&& !tempLoader.equals(params[i].getClass().getClassLoader())) {,"if (params[i] != null && tempLoader != null && !tempLoader.equals(params[i].getClass().getClassLoader())) {
  params[i]=switchObjectContext(params[i],loader);
}
",0,0,6,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, ),
"
635,"node = SCANodeFactory.newInstance().createSCANodeFromClassLoader(null, getClass().getClassLoader());","node=SCANodeFactory.newInstance().createSCANodeFromClassLoader(null,getClass().getClassLoader());
",0,0,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
636,"ClassLoader cl = new URLClassLoader(new URL[]{new URL(ic.getURL())}, Remotable.class.getClassLoader());","ClassLoader cl=new URLClassLoader(new URL[]{new URL(ic.getURL())},Remotable.class.getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
637,"Node node = NodeFactory.getInstance().createNode(""ScenarioFive.composite"", getClass().getClassLoader()).start();","Node node=NodeFactory.getInstance().createNode(""ScenarioFive.composite"",getClass().getClassLoader()).start();
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
638,"GroovyScriptEngine engine = new GroovyScriptEngine(bundleResourceConnector, groovyAction.getBundleContext().getBundle().adapt(BundleWiring.class).getClassLoader());","GroovyScriptEngine engine=new GroovyScriptEngine(bundleResourceConnector,groovyAction.getBundleContext().getBundle().adapt(BundleWiring.class).getClassLoader());
",0,0,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
639,URL reloaded = getClass().getClassLoader().getResource( script.getPath().substring( 1 ) );,"URL reloaded=getClass().getClassLoader().getResource(script.getPath().substring(1));
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
640,"return getClass().getClassLoader().getResource(""META-INF/resources/"" + name);","return getClass().getClassLoader().getResource(""META-INF/resources/"" + name);
",0,0,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
641,"BadInputTest.class.getClassLoader().getResourceAsStream(""badsoap/"" + file), null)","SOAPEnvelope soapEnvelope=OMXMLBuilderFactory.createSOAPModelBuilder(metaFactory,BadInputTest.class.getClassLoader().getResourceAsStream(""badsoap/"" + file),null).getSOAPEnvelope();
",0,0,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ),
NullLiteral(),
"
642,"return getInstance(properties, Loader.getClassLoader(CryptoFactory.class), null);","return getInstance(properties,Loader.getClassLoader(CryptoFactory.class),null);
",0,0,6,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
643,"InputStreamReader inputStreamReader = new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(resource), encoding);","InputStreamReader inputStreamReader=new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream(resource),encoding);
",0,0,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
644,new XmlObject[] { XmlBeans.typeLoaderForClassLoader(this.getClass().getClassLoader()).,"schemaTypeSystem=XmlBeans.compileXsd(new XmlObject[]{XmlBeans.typeLoaderForClassLoader(this.getClass().getClassLoader()).parse(new File(this.schema),null,null)},XmlBeans.getBuiltinTypeSystem(),null);
",0,0,7,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ),
"
645,ClassLoader cl = (classLoader == null) ? SchemaDocument.class.getClassLoader() : classLoader;,"ClassLoader cl=(classLoader == null) ? SchemaDocument.class.getClassLoader() : classLoader;
",0,0,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
646,"return type.cast(java.lang.reflect.Proxy.newProxyInstance(type.getClassLoader(), new Class[]{type}, new InvocationHandler() {","return type.cast(java.lang.reflect.Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},new InvocationHandler(){
  @Override public Object invoke(  Object o,  Method method,  Object[] objects) throws Throwable {
    if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
      return ""Unmodifiable proxy -> ("" + method.invoke(target,objects) + "")"";
    }
    if (method.getParameterTypes().length > 0) {
      throw new UnsupportedOperationException(""Cannot mutate outside the Client work thread"");
    }
    if (blacklist.contains(method.getName())) {
      throw new UnsupportedOperationException(""Cannot mutate outside the Client work thread"");
    }
    Class<?> returnType=method.getReturnType();
    try {
      Object result=method.invoke(target,objects);
      if (result == null) {
        return null;
      }
      if (returnType.isPrimitive() || returnType.isArray() || Object.class.equals(returnType)) {
      }
 else       if (returnType.isAssignableFrom(ByteBuffer.class)) {
        result=null;
      }
 else       if (returnType.isAssignableFrom(Map.class)) {
        result=Collections.unmodifiableMap((Map<?,?>)result);
      }
 else       if (isProtonType(returnType) && returnType.isInterface()) {
        if (!returnType.getName().equals(""org.apache.qpid.proton.amqp.transport.Source"") && !returnType.getName().equals(""org.apache.qpid.proton.amqp.messaging.Source"") && !returnType.getName().equals(""org.apache.qpid.proton.amqp.transport.Target"")&& !returnType.getName().equals(""org.apache.qpid.proton.amqp.messaging.Target"")) {
          result=wrap(returnType,result);
        }
      }
      return result;
    }
 catch (    InvocationTargetException e) {
      throw e.getTargetException();
    }
  }
}
));
",1,91,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
647,"Class<?> clazz = DataFileGenerator.class.getClassLoader().loadClass(""org.apache.activemq.openwire."" + cn);","Class<?> clazz=DataFileGenerator.class.getClassLoader().loadClass(""org.apache.activemq.openwire."" + cn);
",1,2126,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
648,this.parent = parent == null ? AntClassLoader.class.getClassLoader() : parent;,"this.parent=parent == null ? AntClassLoader.class.getClassLoader() : parent;
",1,5,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
649,PersistenceAdapter adaptor = (PersistenceAdapter)getClass().getClassLoader().loadClass(clazz).getDeclaredConstructor().newInstance();,"PersistenceAdapter adaptor=(PersistenceAdapter)getClass().getClassLoader().loadClass(clazz).getDeclaredConstructor().newInstance();
",1,228,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
650,"final URL url = getClass().getClassLoader().getResource(""./"" + res);","final URL url=getClass().getClassLoader().getResource(""./"" + res);
",1,303,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
651,EasyMock.expect(bus.getExtension(ClassLoader.class)).andReturn(this.getClass().getClassLoader());,"EasyMock.expect(bus.getExtension(ClassLoader.class)).andReturn(this.getClass().getClassLoader());
",1,280,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
652,"assertSame(cm.getClassLoader(""CX1"").loadClass(""test.HelloWorld""), pclass);","assertSame(cm.getClassLoader(""CX1"").loadClass(""test.HelloWorld""),pclass);
",1,80,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
653,AbstractException a = (AbstractException)this.getClass().getClassLoader().loadClass(ai.className).newInstance();,"AbstractException a=(AbstractException)this.getClass().getClassLoader().loadClass(ai.className).newInstance();
",1,4,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
654,Class<?> clazz = svc.getClass().getClassLoader().loadClass(Event.class.getName());,"Class<?> clazz=svc.getClass().getClassLoader().loadClass(Event.class.getName());
",1,31,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
655,"return (T) Proxy.newProxyInstance(DynamicMBeanWrapper.class.getClassLoader(), new Class<?>[]{clazz}, new AnnotationHandler(javaxAnnotation));","return (T)Proxy.newProxyInstance(DynamicMBeanWrapper.class.getClassLoader(),new Class<?>[]{clazz},new AnnotationHandler(javaxAnnotation));
",1,36,11,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
656,"return loadType(className, type instanceof Class ? ((Class) type).getClassLoader() : null);","return loadType(className,type instanceof Class ? ((Class)type).getClassLoader() : null);
",1,15,8,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InstanceofExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
657,this.taskRunnerFactory.setThreadClassLoader(this.getClass().getClassLoader());,"this.taskRunnerFactory.setThreadClassLoader(this.getClass().getClassLoader());
",1,6,6,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
658,expect(viewDefinition.getClassLoader()).andReturn(ViewContextImplTest.class.getClassLoader()).anyTimes();,"expect(viewDefinition.getClassLoader()).andReturn(ViewContextImplTest.class.getClassLoader()).anyTimes();
",1,160,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
659,if (cl == null) cl = this.getClass().getClassLoader();,"if (cl == null) cl=this.getClass().getClassLoader();
",1,19,6,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
660,"return LocalBeanProxyFactory.newProxyInstance(itfs[0].getClassLoader(), new Handler(beanContext), itfs[0], IntraVmProxy.class, Serializable.class);","return LocalBeanProxyFactory.newProxyInstance(itfs[0].getClassLoader(),new Handler(beanContext),itfs[0],IntraVmProxy.class,Serializable.class);
",1,17,11,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
"
661,"try (OutputStream outputStream = Files.newOutputStream(Paths.get(StandaloneXmlTest.class.getClassLoader().getResource(""docker-compose-v1-standalone.yml"").getFile())","try (OutputStream outputStream=Files.newOutputStream(Paths.get(StandaloneXmlTest.class.getClassLoader().getResource(""docker-compose-v1-standalone.yml"").getFile()).getParent().toAbsolutePath().resolve(getConfigYml()))){
  SchemaSaver.saveConfigSchema(configSchema,outputStream);
}
 ",1,77,11,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
662,"return new ActiveMQThreadFactory(""ActiveMQ-server-"" + this.toString(), false, ClientSessionFactoryImpl.class.getClassLoader());","return new ActiveMQThreadFactory(""ActiveMQ-server-"" + this.toString(),false,ClientSessionFactoryImpl.class.getClassLoader());
",1,1,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
663,final Path template = Paths.get(JMSSaslGssapiTest.class.getClassLoader().getResource(KRB5_CONFIG_TEMPLATE).toURI());,"final Path template=Paths.get(JMSSaslGssapiTest.class.getClassLoader().getResource(KRB5_CONFIG_TEMPLATE).toURI());
",1,31,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
664,final String keyStorePath = this.getClass().getClassLoader().getResource(SERVER_KEYSTORE_NAME).getFile();,"final String keyStorePath=this.getClass().getClassLoader().getResource(SERVER_KEYSTORE_NAME).getFile();
",1,23,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
665,File parentQuiclinksFile = new File(this.getClass().getClassLoader().getResource(parentJson).getFile());,"File parentQuiclinksFile=new File(this.getClass().getClassLoader().getResource(parentJson).getFile());
",1,12,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
666,else if (h.getClass().getClassLoader() != RulesManager.class.getClassLoader()) hmb = hmb.addOptions(Options.QUERY);,"if (h.getClass().getClassLoader() != RulesManager.class.getClassLoader()) hmb=hmb.addOptions(Options.QUERY);
",1,16,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
QualifiedName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
667,"boolean useContainerLoader = ""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.resources.use-container-loader"", ""true"")) && impl.getClassLoader() == DataSourceFactory.class.getClassLoader();","boolean useContainerLoader=""true"".equalsIgnoreCase(SystemInstance.get().getProperty(""openejb.resources.use-container-loader"",""true"")) && impl.getClassLoader() == DataSourceFactory.class.getClassLoader();
",1,3,13,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
668,this.serviceTypeLoader = registeringBundle.adapt(BundleWiring.class).getClassLoader();,"this.serviceTypeLoader=registeringBundle.adapt(BundleWiring.class).getClassLoader();
",1,1,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
669,ClassLoader loader = type instanceof Class ? ((Class) type).getClassLoader() : null;,"ClassLoader loader=type instanceof Class ? ((Class)type).getClassLoader() : null;
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InstanceofExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
670,Thread.currentThread().setContextClassLoader(CachePojos.CacheContainer.class.getClassLoader());,"Thread.currentThread().setContextClassLoader(CachePojos.CacheContainer.class.getClassLoader());
",1,9,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
671,return ctx.getLoader() != null && ctx.getLoader().getClassLoader() != null ? ctx.getLoader().getClassLoader() : null;,"return ctx.getLoader() != null && ctx.getLoader().getClassLoader() != null ? ctx.getLoader().getClassLoader() : null;
",1,2,11,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
NullLiteral(ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
672,"if (!Objects.equal(getClassLoader(), ((JavaBrooklynClassLoadingContext)obj).getClassLoader())) return false;","if (!Objects.equal(getClassLoader(),((JavaBrooklynClassLoadingContext)obj).getClassLoader())) return false;
",1,5,7,,"SimpleName(MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
BooleanLiteral(ReturnStatement-expression, IfStatement-thenStatement, ),
"
673,"final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);","final ClassLoader providerCL=new TestBundleClassLoader(new URL[]{url},getClass().getClassLoader(),providerBundle);
",1,2,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
674,"ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);","ClassLoader clientCL=new TestBundleClassLoader(new URL[]{},getClass().getClassLoader(),clientBundle);
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ArrayInitializer(ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
675,"final URL resource = Agent.class.getClassLoader().getResource(Agent.class.getName().replace('.', '/') + "".class"");","final URL resource=Agent.class.getClassLoader().getResource(Agent.class.getName().replace('.','/') + "".class"");
",1,23,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
676,return bundleDTO.getClass().getClassLoader().getResource((String)getResource.getArgument(0));,"return bundleDTO.getClass().getClassLoader().getResource((String)getResource.getArgument(0));
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
"
677,"InvocationHandler handler = Activator.getInstance().getClient().getProxy(address, StreamProvider.STREAM_PROVIDER_SERVICE_NAME, getClass().getClassLoader());","InvocationHandler handler=Activator.getInstance().getClient().getProxy(address,StreamProvider.STREAM_PROVIDER_SERVICE_NAME,getClass().getClassLoader());
",1,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
678,"firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[]{Invoker.class}, (proxy, method, args) -> {","firstInvoker=(Invoker)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Invoker.class},(proxy,method,args) -> {
  if (""getUrl"".equals(method.getName())) {
    return url.addParameter(GROUP_KEY,""first"");
  }
  if (""getInterface"".equals(method.getName())) {
    return MenuService.class;
  }
  if (""invoke"".equals(method.getName())) {
    return AsyncRpcResult.newDefaultAsyncResult(firstMenu,invocation);
  }
  return null;
}
);
",1,7,13,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
679,return jobSerDe == null ? DeploymentUtils.class.getClassLoader() : jobSerDe.getClassLoader();,"return jobSerDe == null ? DeploymentUtils.class.getClassLoader() : jobSerDe.getClassLoader();
",1,2,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
680,ClassLoader cl = jobSerDe == null ? DeploymentUtils.class.getClassLoader() : jobSerDe.getClassLoader();,"ClassLoader cl=jobSerDe == null ? DeploymentUtils.class.getClassLoader() : jobSerDe.getClassLoader();
",1,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
681,"final String HIB_H2_CONF_DIR = ODEConfigDirAware.class.getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-h2"";","final String HIB_H2_CONF_DIR=ODEConfigDirAware.class.getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-h2"";
",1,49,9,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
682,"String customSchedulesFilePath = SystemCronCleanupTest.class.getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/test-schedules.xml"";","String customSchedulesFilePath=SystemCronCleanupTest.class.getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/test-schedules.xml"";
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
683,return (Servlet) this.getClass().getClassLoader().loadClass(embeddedServletClassName).newInstance();,"return (Servlet)this.getClass().getClassLoader().loadClass(embeddedServletClassName).newInstance();
",1,2,7,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
"
684,"Method m = _pm.getClass().getMethod(actionName, findTypes(_pm.getClass().getClassLoader(), signature));","Method m=_pm.getClass().getMethod(actionName,findTypes(_pm.getClass().getClassLoader(),signature));
",1,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
685,"threadPool = new ThreadPool(1, 1, ""foo"", Long.MAX_VALUE, ThreadPoolTest.class.getClassLoader(), ""foo:bar=baz"");","threadPool=new ThreadPool(1,1,""foo"",Long.MAX_VALUE,ThreadPoolTest.class.getClassLoader(),""foo:bar=baz"");
",1,22,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
686,"assertEquals(l1, l3.loadClass(B.class.getName()).getMethod(""a"").invoke(null).getClass().getClassLoader());","assertEquals(l1,l3.loadClass(B.class.getName()).getMethod(""a"").invoke(null).getClass().getClassLoader());
",1,21,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
687,"return (T) Proxy.newProxyInstance(delegate.getClass().getClassLoader(), getInterfaces(delegate.getClass()),","return (T)Proxy.newProxyInstance(delegate.getClass().getClassLoader(),getInterfaces(delegate.getClass()),new BatchProxyInvocationHandler(delegate,injectionRefs,nonExceptionHandlingMethods));
",1,2,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
688,"Class<?> c = Class.forName(function.getClassName(), false, this.getClass().getClassLoader());","Class<?> c=Class.forName(function.getClassName(),false,this.getClass().getClassLoader());
",1,10,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
689,"this.performanceMonitorClass = Clazz.getClazz(this.getClassLoader(), this.performanceMonitorClassName);","this.performanceMonitorClass=Clazz.getClazz(this.getClassLoader(),this.performanceMonitorClassName);
",1,2,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
690,"URL url = Main.class.getClassLoader().getResource(Main.class.getName().replace(""."", ""/"") + "".class"");","URL url=Main.class.getClassLoader().getResource(Main.class.getName().replace(""."",""/"") + "".class"");
",1,3,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
691,if (cl==null) cl = contextObject instanceof Class ? ((Class<?>)contextObject).getClassLoader() :,"if (cl == null) cl=contextObject instanceof Class ? ((Class<?>)contextObject).getClassLoader() : contextObject instanceof ClassLoader ? ((ClassLoader)contextObject) : contextObject.getClass().getClassLoader();
",1,3,9,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(InstanceofExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
692,"Assert.assertEquals(Entity.class, bundleCls.getClassLoader().loadClass(Entity.class.getName()));","Assert.assertEquals(Entity.class,bundleCls.getClassLoader().loadClass(Entity.class.getName()));
",1,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
693,"assertSerialize(getClass().getClassLoader(), ""{\""type\"":\""""+getClass().getClassLoader().getClass().getCanonicalName()+""\""}"");","assertSerialize(getClass().getClassLoader(),""{\""type\"":\"""" + getClass().getClassLoader().getClass().getCanonicalName() + ""\""}"");
",1,22,9,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
694,this.classLoader = classLoader!=null ? classLoader : getClass().getClassLoader();,"this.classLoader=classLoader != null ? classLoader : getClass().getClassLoader();
",1,1,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
695,"throw new ReflectionNotFoundException(""Failed to invoke method "" + methodName + "" on class "" + clazz + "" with argument types "" + Arrays.asList(argTypes) + "", using class loader "" + clazz.getClassLoader() + "": "" + Exceptions.collapseText(e), e);","throw new ReflectionNotFoundException(""Failed to invoke method "" + methodName + "" on class ""+ clazz+ "" with argument types ""+ Arrays.asList(argTypes)+ "", using class loader ""+ clazz.getClassLoader()+ "": ""+ Exceptions.collapseText(e),e);
",1,1,17,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
696,"= new File(Objects.requireNonNull(getClass().getClassLoader().getResource(""upload_test_file"")).getFile());","final File fileToUpload=new File(Objects.requireNonNull(getClass().getClassLoader().getResource(""upload_test_file"")).getFile());
",1,9,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
"
697,"post.setEntity(new InputStreamEntity(this.getClass().getClassLoader().getResourceAsStream(""java.jpg""), 100));","post.setEntity(new InputStreamEntity(this.getClass().getClassLoader().getResourceAsStream(""java.jpg""),100));
",1,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
698,"commandLink = JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(TEMPLATE_FOLDER + COMMAND_LINK_TEMPLATE), ""UTF-8"");","commandLink=JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(TEMPLATE_FOLDER + COMMAND_LINK_TEMPLATE),""UTF-8"");
",1,9,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
699,if (caller == null || factory.getClass().getClassLoader().equals(callerPlugin.getClass().getClassLoader()) || factory.createInstance(caller)==null) {,"if (caller == null || factory.getClass().getClassLoader().equals(callerPlugin.getClass().getClassLoader()) || factory.createInstance(caller) == null) {
  plugins.add(plugin);
  if (plugin instanceof FiltersDescription.Provider) {
    FiltersDescription.Provider prov=(FiltersDescription.Provider)plugin;
    prov.addFilters(filtersDescription);
  }
}
",1,7,13,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
700,"final Class<?> utilClass = Class.forName(""org.apache.openejb.server.httpd.util.HttpUtil"", true, LightweightWebAppBuilder.class.getClassLoader());","final Class<?> utilClass=Class.forName(""org.apache.openejb.server.httpd.util.HttpUtil"",true,LightweightWebAppBuilder.class.getClassLoader());
",1,6,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
701,"DestinationRule destinationRule = yaml.loadAs(this.getClass().getClassLoader().getResourceAsStream(""DestinationRuleTest.yaml""), DestinationRule.class);","DestinationRule destinationRule=yaml.loadAs(this.getClass().getClassLoader().getResourceAsStream(""DestinationRuleTest.yaml""),DestinationRule.class);
",1,33,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
702,"Constructor constructor = new YamlConfigurationLoader.CustomConstructor(klass, klass.getClassLoader());","Constructor constructor=new YamlConfigurationLoader.CustomConstructor(klass,klass.getClassLoader());
",1,1,6,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
703,"URL res = clazz.getClassLoader().getResource(clazz.getName().replace('.', '/') + "".class"");","URL res=clazz.getClassLoader().getResource(clazz.getName().replace('.','/') + "".class"");
",1,1,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
CharacterLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
704,"return new URLClassLoader(urls.toArray(new URL[0]), getClass().getClassLoader());","return new URLClassLoader(urls.toArray(new URL[0]),getClass().getClassLoader());
",1,1,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
705,"findContexts(host).forEach(ctx -> fire(new StartListening(connector, host, ctx), ctx.getLoader().getClassLoader()));","findContexts(host).forEach(ctx -> fire(new StartListening(connector,host,ctx),ctx.getLoader().getClassLoader()));
",1,2,12,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(VariableDeclarationFragment-name, LambdaExpression-parameters, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, LambdaExpression-body, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
706,ClassLoader loader = new ClassLoader(this.getClass().getClassLoader()) {};,"ClassLoader loader=new ClassLoader(this.getClass().getClassLoader()){
}
;
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
AnonymousClassDeclaration(ClassInstanceCreation-anonymousClassDeclaration, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
707,"final ExtensionClassLoader frameworkClassLoader = new ExtensionClassLoader(""web-api"", new URL[0], this.getClass().getClassLoader());","final ExtensionClassLoader frameworkClassLoader=new ExtensionClassLoader(""web-api"",new URL[0],this.getClass().getClassLoader());
",1,27,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ArrayCreation-dimensions, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
708,"Context context = EnterpriseNamingContext.livenReferences(module.getJndiScope(JndiScope.comp), null, null, getClass().getClassLoader(), null, ""comp/"");","Context context=EnterpriseNamingContext.livenReferences(module.getJndiScope(JndiScope.comp),null,null,getClass().getClassLoader(),null,""comp/"");
",1,4,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
709,return CallSupportContext.class.getClassLoader().loadClass(str) != null;,"return CallSupportContext.class.getClassLoader().loadClass(str) != null;
",1,2,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, InfixExpression-leftOperand, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
710,"return new JdkProxySource<>(this.getClass().getClassLoader(),","return new JdkProxySource<>(this.getClass().getClassLoader(),new Class<?>[]{TestObject.class});
",1,1,4,,"SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
711,java.net.URL url = LvgAnnotator.class.getClassLoader().getResource(lvgProperties);,"java.net.URL url=LvgAnnotator.class.getClassLoader().getResource(lvgProperties);
",1,3,6,,"QualifiedName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
712,"LOG.log(Level.FINE, ""create a new one with parent  "" + Proxy.class.getClassLoader());","LOG.log(Level.FINE,""create a new one with parent  "" + Proxy.class.getClassLoader());
",1,7,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
713,"return cls.cast(ProxyHelper.getProxy(loader == null ? cls.getClassLoader() : loader,","return cls.cast(ProxyHelper.getProxy(loader == null ? cls.getClassLoader() : loader,new Class[]{Client.class,InvocationHandlerAware.class,cls},handler));
",1,3,9,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-elseExpression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
714,"return url + ""!"" + OnlineManipulatorTest.class.getClassLoader().getResource(""provider.xml"");","return url + ""!"" + OnlineManipulatorTest.class.getClassLoader().getResource(""provider.xml"");
",1,2,6,,"SimpleName(InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-extendedOperands, ReturnStatement-expression, ),
"
715,if ((pcClass != null) && (pcClass.getClassLoader() == cl)) {,"if ((pcClass != null) && (pcClass.getClassLoader() == cl)) {
  i.remove();
}
",1,1,5,,"SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
716,"return type.cast(Proxy.newProxyInstance(ClassUtils.getClassLoader(null),","return type.cast(Proxy.newProxyInstance(ClassUtils.getClassLoader(null),new Class<?>[]{type,Serializable.class},handler));
",1,1,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
"
717,InputStream is = ClassUtils.getClassLoader(null).getResourceAsStream(getClientWindowResourceLocation());,"InputStream is=ClassUtils.getClassLoader(null).getResourceAsStream(getClientWindowResourceLocation());
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
718,"return classPoolRepository.createScopedClassPool(GuavaPatcher.class.getClassLoader(), null);","return classPoolRepository.createScopedClassPool(GuavaPatcher.class.getClassLoader(),null);
",1,2,5,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
"
719,"if (classname.startsWith(""org.apache.dubbo"") && cl != this.getClass().getClassLoader()) {","if (classname.startsWith(""org.apache.dubbo"") && cl != this.getClass().getClassLoader()) {
  result=this.getClass().getClassLoader().getResourceAsStream(cname);
  if (result != null) {
    return result;
  }
 else {
    return cl.getResourceAsStream(cname);
  }
}
 else {
  result=cl.getResourceAsStream(cname);
  if (result == null && (cl != this.getClass().getClassLoader())) {
    return this.getClass().getClassLoader().getResourceAsStream(cname);
  }
  return result;
}
",1,3,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
720,if (result == null && (cl != this.getClass().getClassLoader())) {,"if (result == null && (cl != this.getClass().getClassLoader())) {
  return this.getClass().getClassLoader().getResourceAsStream(cname);
}
",1,1,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
721,this.type = (cl.getClassLoader() == null) ? cl,"this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);
",1,4,6,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
722,Class<T> clazz = (Class<T>) ReflectionUtils.class.getClassLoader().loadClass(clazzName);,"Class<T> clazz=(Class<T>)ReflectionUtils.class.getClassLoader().loadClass(clazzName);
",1,1,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
723,"Class<?> ta1cls = getClass().getClassLoader().loadClass(getClass().getPackage().getName() + "".sub1.TestAnn1"");","Class<?> ta1cls=getClass().getClassLoader().loadClass(getClass().getPackage().getName() + "".sub1.TestAnn1"");
",1,4,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
724,(PrivilegedAction<GroovyClassLoader>) () -> new GroovyClassLoader(SecurityTestSupport.class.getClassLoader()),"protected GroovyClassLoader loader=AccessController.doPrivileged((PrivilegedAction<GroovyClassLoader>)() -> new GroovyClassLoader(SecurityTestSupport.class.getClassLoader()));
",1,3,5,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, LambdaExpression-body, CastExpression-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, LambdaExpression-body, CastExpression-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, LambdaExpression-body, CastExpression-expression, ),
"
725,"final AppModule app = new AppModule(this.getClass().getClassLoader(), ""classpath-"" + ejbJars.hashCode());","final AppModule app=new AppModule(this.getClass().getClassLoader(),""classpath-"" + ejbJars.hashCode());
",1,19,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
726,"Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(target.getClass(), target.getClass().getClassLoader());","Class<?>[] ifcs=ClassUtils.getAllInterfacesForClass(target.getClass(),target.getClass().getClassLoader());
",1,2,11,,"SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
727,acceptPackage &= targetClasslLoader == theClass.getClassLoader(),"acceptPackage&=targetClasslLoader == theClass.getClassLoader() && targetPackage.equals(ClassUtils.getPackageName(theClass));
",1,1,4,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
728,"final Class<?> clazz = this.getClass().getClassLoader().loadClass(name.replace("".jar"", """"));","final Class<?> clazz=this.getClass().getClassLoader().loadClass(name.replace("".jar"",""""));
",1,9,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
729,"assertEquals(getClass(), copy.getClass(""myclass"", null, getClass().getClassLoader()));","assertEquals(getClass(),copy.getClass(""myclass"",null,getClass().getClassLoader()));
",1,1,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
730,"Class<?> class1 = CompileUtils.compile(this.getClass().getClassLoader(), ""Main"", code);","Class<?> class1=CompileUtils.compile(this.getClass().getClassLoader(),""Main"",code);
",1,1,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
731,return payload.getClass().getClassLoader() == targetClassLoader;,"return payload.getClass().getClassLoader() == targetClassLoader;
",1,1,4,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
732,keyType = (Class<K>) getClass().getClassLoader().loadClass(opts.keyType);,"keyType=(Class<K>)getClass().getClassLoader().loadClass(opts.keyType);
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
733,return (cl1.getClassLoader() == cl2.getClassLoader(),"return (cl1.getClassLoader() == cl2.getClassLoader() && getPackageName(cl1).equals(getPackageName(cl2)));
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
734,"List<MethodNode> methods = findDGMMethodsByNameAndArguments(controller.getSourceUnit().getClassLoader(), receiverType, isserName, ClassNode.EMPTY_ARRAY);","List<MethodNode> methods=findDGMMethodsByNameAndArguments(controller.getSourceUnit().getClassLoader(),receiverType,isserName,ClassNode.EMPTY_ARRAY);
",1,2,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
735,"message.append(""lookup interface classloader: "").append(clazz.getClassLoader().toString()).append(""\n"");","message.append(""lookup interface classloader: "").append(clazz.getClassLoader().toString()).append(""\n"");
",1,3,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
736,"this.referenceType = ClassLoading.loadClass(referenceInfo.getReferenceType(), gbeanInstance.getType().getClassLoader());","this.referenceType=ClassLoading.loadClass(referenceInfo.getReferenceType(),gbeanInstance.getType().getClassLoader());
",1,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
737,"throw new InvalidConfigurationException(""Getter return type in wrong classloader: type: "" + type + "" wanted in classloader: "" + type.getClassLoader() + "" actual: "" + getterMethod.getReturnType().getClassLoader());","throw new InvalidConfigurationException(""Getter return type in wrong classloader: type: "" + type + "" wanted in classloader: ""+ type.getClassLoader()+ "" actual: ""+ getterMethod.getReturnType().getClassLoader());
",1,1,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ThrowStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(InfixExpression-rightOperand, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ThrowStatement-expression, ),
"
738,"private Bundle bundle = new MockBundle(getClass().getClassLoader(), """", 1);","private Bundle bundle=new MockBundle(getClass().getClassLoader(),"""",1);
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
739,static final SchemaTypeLoader SCHEMA_TYPE_LOADER = XmlBeans.typeLoaderForClassLoader(ArtifactType.class.getClassLoader());,"static final SchemaTypeLoader SCHEMA_TYPE_LOADER=XmlBeans.typeLoaderForClassLoader(ArtifactType.class.getClassLoader());
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
740,"private Bundle bundle = new MockBundle(getClass().getClassLoader(), null, 0L);","private Bundle bundle=new MockBundle(getClass().getClassLoader(),null,0L);
",1,1,8,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
741,"ejbModule = new EjbModule(getClass().getClassLoader(), ""FakeEjbJar"", ""fake.jar"", ejbJar, null);","ejbModule=new EjbModule(getClass().getClassLoader(),""FakeEjbJar"",""fake.jar"",ejbJar,null);
",1,2,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
742,"implInfo = new GeronimoJaxWsImplementorInfo(instance, this.portInfo, instance.getClassLoader());","implInfo=new GeronimoJaxWsImplementorInfo(instance,this.portInfo,instance.getClassLoader());
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
743,"BundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), null);","BundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),null);
",1,3,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
744,"return manager.createSSLContext(null, getProtocol(), getSslKeyManagerFactoryAlgorithm(), keyStore, keyAlias, trustStore, SslSocketConnector.class.getClassLoader());","return manager.createSSLContext(null,getProtocol(),getSslKeyManagerFactoryAlgorithm(),keyStore,keyAlias,trustStore,SslSocketConnector.class.getClassLoader());
",1,1,10,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
NullLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
745,"detectTempClassLoader = ClassLoaderUtil.createTempClassLoader(ClassLoaderUtil.createClassLoader(jarPath, libURLs.toArray(new URL[0]), OpenEJB.class.getClassLoader()));","detectTempClassLoader=ClassLoaderUtil.createTempClassLoader(ClassLoaderUtil.createClassLoader(jarPath,libURLs.toArray(new URL[0]),OpenEJB.class.getClassLoader()));
",1,5,13,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayCreation-dimensions, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
746,"new ModuleContext(deploymentId, null, null, new AppContext(deploymentId, SystemInstance.get(), getClass().getClassLoader(), null, null, false), null),","deploymentInfo=new BeanContext(deploymentId,null,new ModuleContext(deploymentId,null,null,new AppContext(deploymentId,SystemInstance.get(),getClass().getClassLoader(),null,null,false),null),SFSB.class,null,null,null,null,null,null,null,null,null,null,false){
  @Override public Object getDeploymentID(){
    return deploymentId;
  }
}
;
",1,1,14,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
BooleanLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
NullLiteral(ClassInstanceCreation-arguments, ),
"
747,"assembler.createApplication(config.configureApplication(new EjbModule(getClass().getClassLoader(), getClass().getSimpleName(), ""test"", ejbJar, null)));","assembler.createApplication(config.configureApplication(new EjbModule(getClass().getClassLoader(),getClass().getSimpleName(),""test"",ejbJar,null)));
",1,2,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
748,&& varArgsClassType.getClassLoader() == params[iCurrentIndex].getClass().getClassLoader()) {,"if (iCurrentIndex == params.length - 1 && varArgsClassType == params[iCurrentIndex].getClass() && varArgsClassType.getClassLoader() == params[iCurrentIndex].getClass().getClassLoader()) {
  finalParamValues[iCurrentIndex]=params[iCurrentIndex];
}
 else {
  Object targetArray=Array.newInstance(varArgsClassType.getComponentType(),params.length - iCurrentIndex);
  Class<?> componentClassType=varArgsClassType.getComponentType();
  for (int i=0, iLoopSize=params.length - iCurrentIndex; i < iLoopSize; i++) {
    Array.set(targetArray,i,expressionFactory.coerceToType(params[iCurrentIndex + i],componentClassType));
  }
  finalParamValues[iCurrentIndex]=targetArray;
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
"
749,"new FilteredArchive(new CompositeArchive(new JarArchive(this.getClass().getClassLoader(), one.toURI().toURL())), new MyFilter()),","archive=new CompositeArchive(new FilteredArchive(new CompositeArchive(new JarArchive(this.getClass().getClassLoader(),one.toURI().toURL())),new MyFilter()),new FilteredArchive(new CompositeArchive(new JarArchive(this.getClass().getClassLoader(),two.toURI().toURL())),new MyFilter()));
",1,1,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ),
"
750,"System.out.println(""invoked from an already aped main() in target loader "" + this.getClass().getClassLoader());","System.out.println(""invoked from an already aped main() in target loader "" + this.getClass().getClassLoader());
",1,6,6,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
751,if (interfaces[i].getClassLoader() != null) {,"if (interfaces[i].getClassLoader() != null) {
  loaders.add(interfaces[i].getClassLoader());
}
",1,1,4,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
752,final ClassLoader parentLoader = (parent!=null)?parent:GroovyShell.class.getClassLoader();,"final ClassLoader parentLoader=(parent != null) ? parent : GroovyShell.class.getClassLoader();
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
753,"format = NbBundle.getBundle(""org.netbeans.modules.masterfs.filebasedfs.Bundle"", java.util.Locale.getDefault(), FileObjectFactory.class.getClassLoader()).getString(res);","format=NbBundle.getBundle(""org.netbeans.modules.masterfs.filebasedfs.Bundle"",java.util.Locale.getDefault(),FileObjectFactory.class.getClassLoader()).getString(res);
",1,4,10,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
754,Schema myschema = new SpecificData(Event.class.getClassLoader()).getSchema(Event.class);,"Schema myschema=new SpecificData(Event.class.getClassLoader()).getSchema(Event.class);
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
755,"toValidate = new Schema.Parser().parse(new File(AvroSchemaCheckDefaultStrategy.class.getClassLoader().getResource(""avroSchemaCheckStrategyTest/toValidateSchema.avsc"").getFile()));","toValidate=new Schema.Parser().parse(new File(AvroSchemaCheckDefaultStrategy.class.getClassLoader().getResource(""avroSchemaCheckStrategyTest/toValidateSchema.avsc"").getFile()));
",1,9,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
756,"assertSame(""ClassLoader"", classLoader, pd[0].getClassLoader());","assertSame(""ClassLoader"",classLoader,pd[0].getClassLoader());
",1,1,6,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
757,"result = (T) Proxy.newProxyInstance(interfaces[0].getClassLoader(),","result=(T)Proxy.newProxyInstance(interfaces[0].getClassLoader(),interfaces,new OpenTypeMappingIHandler(connection,mxbeanInterface.getName(),mxbeanName));
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-array, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NumberLiteral(ArrayAccess-index, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
758,"assertNull(new ProtectionDomain(null, null).getClassLoader());","assertNull(new ProtectionDomain(null,null).getClassLoader());
",1,1,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
759,"System.out.println(""SCA API ClassLoader: "" + print(Reference.class.getClassLoader()));","System.out.println(""SCA API ClassLoader: "" + print(Reference.class.getClassLoader()));
",1,4,6,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
760,"load0(filename, VMClassRegistry.getClassLoader(VMStack.getCallerClass(0)), true);","load0(filename,VMClassRegistry.getClassLoader(VMStack.getCallerClass(0)),true);
",1,3,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
761,static ClassLoader[] ClassLoaderArray = { ArrayReferenceDebuggee.class.getClassLoader() };,"static ClassLoader[] ClassLoaderArray={ArrayReferenceDebuggee.class.getClassLoader()};
",1,1,6,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, ArrayType-elementType, FieldDeclaration-type, ),
Dimension(ArrayType-dimensions, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
762,"coCtx.kernalContext().config().getClassLoader() : ctx.configuration().getClassLoader(), true);","BinaryReaderExImpl reader=reader(null,coCtx != null ? coCtx.kernalContext().config().getClassLoader() : ctx.configuration().getClassLoader(),true);
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
BooleanLiteral(),
"
763,return key != null && !clsLdr.equals(key.getClass().getClassLoader()) ?,"return key != null && !clsLdr.equals(key.getClass().getClassLoader()) ? key.getClass() : val != null ? val.getClass() : getClass();
",1,2,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
"
764,IgniteUtils.detectClass(this.val).getClassLoader() : val.getClass().getClassLoader();,"ClassLoader ldr=p2pEnabled ? IgniteUtils.detectClass(this.val).getClassLoader() : val.getClass().getClassLoader();
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
765,"Service cp = U.unmarshal(m, bytes, U.resolveClassLoader(svc.getClass().getClassLoader(), ctx.config()));","Service cp=U.unmarshal(m,bytes,U.resolveClassLoader(svc.getClass().getClassLoader(),ctx.config()));
",1,1,13,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
766,Class procCls = grid(1).configuration().getClassLoader().loadClass(getEntryProcessor());,"Class procCls=grid(1).configuration().getClassLoader().loadClass(getEntryProcessor());
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
767,"return S.toString(MyStringKey.class, this, ""clsLdr"", getClass().getClassLoader());","return S.toString(MyStringKey.class,this,""clsLdr"",getClass().getClassLoader());
",1,1,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
768,assert taskCls1.getClassLoader() != taskCls2.getClassLoader();,"assert taskCls1.getClassLoader() != taskCls2.getClassLoader();
",1,1,4,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, AssertStatement-expression, ),
"
769,"String subject = formatter.formatSubject(this.getClass().getClassLoader().getResource(""subjectTemplate.vm"").getPath(), createEvent());","String subject=formatter.formatSubject(this.getClass().getClassLoader().getResource(""subjectTemplate.vm"").getPath(),createEvent());
",1,2,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
770,"Config c = ConfigFactory.parseResources(getClass().getClassLoader(), ""replicationConfigTest/validCompleteDataset_PushMode.conf"").resolve();","Config c=ConfigFactory.parseResources(getClass().getClassLoader(),""replicationConfigTest/validCompleteDataset_PushMode.conf"").resolve();
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
771,url = this.getClass().getClassLoader().getResource(map.getProperty(SIGNATURE_KEYSTORE_FILE));,"url=this.getClass().getClassLoader().getResource(map.getProperty(SIGNATURE_KEYSTORE_FILE));
",1,4,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
772,String sentry_site_path = SentryKafkaAuthorizerTest.class.getClassLoader().getResource(KafkaAuthConf.AUTHZ_SITE_FILE).getPath();,"String sentry_site_path=SentryKafkaAuthorizerTest.class.getClassLoader().getResource(KafkaAuthConf.AUTHZ_SITE_FILE).getPath();
",1,1,7,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
773,"in.readList(this.inputsAttributes, InputsAttribute.class.getClassLoader());","in.readList(this.inputsAttributes,InputsAttribute.class.getClassLoader());
",1,1,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
774,"assertTrue(AClass.class.getClassLoader()==actual, ""singleton on context is expected to be the same as the 'local' singleton"");","assertTrue(AClass.class.getClassLoader() == actual,""singleton on context is expected to be the same as the 'local' singleton"");
",1,1,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
775,"final byte[] filePdf = Files.readAllBytes( Paths.get( TikaSearchProviderTest.class.getClassLoader().getResource( ""aaa-diagram.pdf"" ).toURI() ) );","final byte[] filePdf=Files.readAllBytes(Paths.get(TikaSearchProviderTest.class.getClassLoader().getResource(""aaa-diagram.pdf"").toURI()));
",1,7,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
776,"assertTrue(c != null && (c.getClassLoader() == null || c.getClassLoader().getClass().getName().contains(""jdk.internal"")));","assertTrue(c != null && (c.getClassLoader() == null || c.getClassLoader().getClass().getName().contains(""jdk.internal"")));
",1,2,12,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
777,this(ServiceURLPropertyConfig.class.getClassLoader().getResourceAsStream(DEFAULT_SERVICE_URL_MAPPINGS));,"this(ServiceURLPropertyConfig.class.getClassLoader().getResourceAsStream(DEFAULT_SERVICE_URL_MAPPINGS));
",1,1,4,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-arguments, ConstructorInvocation-arguments, ),
"
778,"final String createTableSql = readFileToString(new File(getClass().getClassLoader().getResource(""createBooksTable.sql"").getFile()), UTF_8);","final String createTableSql=readFileToString(new File(getClass().getClassLoader().getResource(""createBooksTable.sql"").getFile()),UTF_8);
",1,1,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
779,"Assert.assertTrue(isJarLoaded(dbResService.getClassLoader(DB1), DB1), DB1 + "" jar should be loaded"");","Assert.assertTrue(isJarLoaded(dbResService.getClassLoader(DB1),DB1),DB1 + "" jar should be loaded"");
",1,1,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
780,final ClassLoader loader1 = class1 == null ? null : class1.getClassLoader();,"final ClassLoader loader1=class1 == null ? null : class1.getClassLoader();
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
781,"try (final InputStream is = Loader.getResourceAsStream(schemaResource, XmlConfiguration.class.getClassLoader())) {","try (final InputStream is=Loader.getResourceAsStream(schemaResource,XmlConfiguration.class.getClassLoader())){
  if (is != null) {
    final javax.xml.transform.Source src=new StreamSource(is,LOG4J_XSD);
    final SchemaFactory factory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    Schema schema=null;
    try {
      schema=factory.newSchema(src);
    }
 catch (    final SAXException ex) {
      LOGGER.error(""Error parsing Log4j schema"",ex);
    }
    if (schema != null) {
      final Validator validator=schema.newValidator();
      try {
        validator.validate(new StreamSource(new ByteArrayInputStream(buffer)));
      }
 catch (      final IOException ioe) {
        LOGGER.error(""Error reading configuration for validation"",ioe);
      }
catch (      final SAXException ex) {
        LOGGER.error(""Error validating configuration"",ex);
      }
    }
  }
}
 catch (final Exception ex) {
  LOGGER.error(""Unable to access schema {}"",this.schemaResource,ex);
}
",1,1,8,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
782,"this.loggerContext = Configurator.initialize(this.name, this.getClassLoader(), uris,","this.loggerContext=Configurator.initialize(this.name,this.getClassLoader(),uris,WebLoggerContextUtils.createExternalEntry(this.servletContext));
",1,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
783,"this.rbundle = ResourceBundle.getBundle( ""changes-report"", locale, this.getClass().getClassLoader() );","this.rbundle=ResourceBundle.getBundle(""changes-report"",locale,this.getClass().getClassLoader());
",1,1,9,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
784,"getLog().error( ""Plugin Class Loaded by "" + FileWagon.class.getClassLoader() );","getLog().error(""Plugin Class Loaded by "" + FileWagon.class.getClassLoader());
",1,1,5,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
785,if (factory != null && factory.getClass().getClassLoader() instanceof WildFlyClassLoader) {,"if (factory != null && factory.getClass().getClassLoader() instanceof WildFlyClassLoader) {
  cl=(WildFlyClassLoader)factory.getClass().getClassLoader();
}
",1,3,6,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
786,"DEFAULT_LOOKUP.setLookup(new Object[] { repository }, lkp, UnitTestUtils.class.getClassLoader());","DEFAULT_LOOKUP.setLookup(new Object[]{repository},lkp,UnitTestUtils.class.getClassLoader());
",1,3,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
787,"return (EventListener) Proxy.newProxyInstance(c.getClassLoader(), new Class[] { c }, this);","return (EventListener)Proxy.newProxyInstance(c.getClassLoader(),new Class[]{c},this);
",1,1,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
788,"data.setClassLoader(new URLClassLoader(new URL[]{data.getBundleFile().toURI().toURL()}, data.getClass().getClassLoader()));","data.setClassLoader(new URLClassLoader(new URL[]{data.getBundleFile().toURI().toURL()},data.getClass().getClassLoader()));
",1,2,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
789,"assert l instanceof OSGiMainLookup : ""mismatch between "" + OSGiMainLookup.class.getClassLoader() + "" vs. "" + l.getClass().getClassLoader();","assert l instanceof OSGiMainLookup : ""mismatch between "" + OSGiMainLookup.class.getClassLoader() + "" vs. ""+ l.getClass().getClassLoader();
",1,3,9,,"SimpleName(InstanceofExpression-leftOperand, AssertStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, AssertStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, AssertStatement-message, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, AssertStatement-message, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, AssertStatement-message, ),
StringLiteral(InfixExpression-extendedOperands, AssertStatement-message, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, AssertStatement-message, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, AssertStatement-message, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, AssertStatement-message, ),
"
790,"Callable<?> c = (Callable<?>) m.getClassLoader().loadClass(""org.agent.HelloWorld"").newInstance();","Callable<?> c=(Callable<?>)m.getClassLoader().loadClass(""org.agent.HelloWorld"").newInstance();
",1,3,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
791,case 1: return m1.getClassLoader ();,"case 1:
",1,1,1,,"NumberLiteral(SwitchCase-expression, ),
"
792,"BufferedReader expectedReader = new BufferedReader(new InputStreamReader(OrderedPropertiesTest.class.getClassLoader().getResourceAsStream(""orderedPropertiesExpected.properties"")))) {","try (BufferedReader actualReader=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(byteArrayOutputStream.toByteArray())));BufferedReader expectedReader=new BufferedReader(new InputStreamReader(OrderedPropertiesTest.class.getClassLoader().getResourceAsStream(""orderedPropertiesExpected.properties"")))){
  String expectedLine;
  while ((expectedLine=expectedReader.readLine()) != null) {
    String actualLine=actualReader.readLine();
    if (!""#Tue Feb 21 11:03:08 EST 2017"".equals(expectedLine)) {
      assertEquals(expectedLine,actualLine);
    }
 else {
      System.out.println(""Skipping timestamp comment line"");
    }
  }
  assertNull(actualReader.readLine());
}
 ",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, ),
"
793,"handlers.addHandler(loadWar(path.toFile(), ""/c2"", JettyServer.class.getClassLoader()));","handlers.addHandler(loadWar(path.toFile(),""/c2"",JettyServer.class.getClassLoader()));
",1,1,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
794,resourceDirectory = Paths.get(HierarchicalC2IntegrationTest.class.getClassLoader(),"resourceDirectory=Paths.get(HierarchicalC2IntegrationTest.class.getClassLoader().getResource(""docker-compose-c2-hierarchical.yml"").getFile()).getParent();
",1,1,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
795,"try (InputStream inputStream = StandaloneXmlTest.class.getClassLoader().getResourceAsStream(""./standalone/"" + version + ""/"" + name + ""/xml/"" + name + "".xml"")) {","try (InputStream inputStream=StandaloneXmlTest.class.getClassLoader().getResourceAsStream(""./standalone/"" + version + ""/""+ name+ ""/xml/""+ name+ "".xml"")){
  configSchema=ConfigMain.transformTemplateToSchema(inputStream);
}
 ",1,1,12,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
796,"new LimitedInputStream(ConfigMainTest.class.getClassLoader().getResourceAsStream(""TemplateWithFunnel.xml""), 25));","when(pathInputStreamFactory.create(testInput)).thenAnswer(invocation -> new LimitedInputStream(ConfigMainTest.class.getClassLoader().getResourceAsStream(""TemplateWithFunnel.xml""),25));
",1,1,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ),
NumberLiteral(ClassInstanceCreation-arguments, ),
"
797,"JoltTransform transform = TransformFactory.getTransform(getClass().getClassLoader(), ""jolt-transform-sort"", null);","JoltTransform transform=TransformFactory.getTransform(getClass().getClassLoader(),""jolt-transform-sort"",null);
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
798,"String filePath = ""file:"" + ResourceUtilities.class.getClassLoader().getResource(relativeFilePath).getPath();","String filePath=""file:"" + ResourceUtilities.class.getClassLoader().getResource(relativeFilePath).getPath();
",1,1,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
799,if (serviceName == null || dctx == null || context == null || dctx.getClassLoader() == null) {,"if (serviceName == null || dctx == null || context == null || dctx.getClassLoader() == null) {
  throw new GenericServiceException(""Cannot have null Service, Context or DispatchContext!"");
}
",1,3,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
800,"String message = SafeToolkit.messages.format(""cl0008"", className, clazz.getClassLoader(), moduleContext.getClassLoader(), e.getMessage());","String message=SafeToolkit.messages.format(""cl0008"",className,clazz.getClassLoader(),moduleContext.getClassLoader(),e.getMessage());
",1,2,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
801,"final EjbModule webEjbModule = new EjbModule(webModule.getClassLoader(), webModule.getModuleId(), webModule.getJarLocation(), null, null);","final EjbModule webEjbModule=new EjbModule(webModule.getClassLoader(),webModule.getModuleId(),webModule.getJarLocation(),null,null);
",1,1,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
802,"final IAnnotationFinder finder = new AnnotationFinder(new ConfigurableClasspathArchive(appModule.getClassLoader(), true, libs));","final IAnnotationFinder finder=new AnnotationFinder(new ConfigurableClasspathArchive(appModule.getClassLoader(),true,libs));
",1,1,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
803,this.embedded = this.getClass().getClassLoader() == this.system;,"this.embedded=this.getClass().getClassLoader() == this.system;
",1,1,7,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
804,final ClassLoader cl = JaccProvider.Factory.class.getClassLoader();,"final ClassLoader cl=JaccProvider.Factory.class.getClassLoader();
",1,1,5,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
805,"DataSourceHelper.setUrl(dataSource, url.replace(""jdbc:derby:"", """"), dataSource.getClass().getClassLoader(), ""org.apache.derby.jdbc.EmbeddedDataSource"", ""setDatabaseName"");","DataSourceHelper.setUrl(dataSource,url.replace(""jdbc:derby:"",""""),dataSource.getClass().getClassLoader(),""org.apache.derby.jdbc.EmbeddedDataSource"",""setDatabaseName"");
",1,1,12,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
806,final Class<?> clazz = webContext.getClassLoader().loadClass(listener.classname);,"final Class<?> clazz=webContext.getClassLoader().loadClass(listener.classname);
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
807,"return java.lang.reflect.Proxy.getProxyClass(this.getClass().getClassLoader(), interfaces);","return java.lang.reflect.Proxy.getProxyClass(this.getClass().getClassLoader(),interfaces);
",1,1,6,,"QualifiedName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
808,isr = new InputStreamReader(IO.read(getClass().getClassLoader().getResource(expectedFile)));,"isr=new InputStreamReader(IO.read(getClass().getClassLoader().getResource(expectedFile)));
",1,1,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
809,"app.getAltDDs().put(""app-ctx.xml"", ParseAppCtxXmlTest.class.getClassLoader().getResource(""complete-app-ctx.xml""));","app.getAltDDs().put(""app-ctx.xml"",ParseAppCtxXmlTest.class.getClassLoader().getResource(""complete-app-ctx.xml""));
",1,1,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
810,final ClassLoader classloader = super.getClassLoader();,"final ClassLoader classloader=super.getClassLoader();
",1,1,4,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SuperMethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
811,if (!clazz.getClassLoader().equals(OpenEJB.class.getClassLoader())) {,"if (!clazz.getClassLoader().equals(OpenEJB.class.getClassLoader())) {
  continue;
}
",1,1,5,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, IfStatement-expression, ),
"
812,final ClassLoader loader = this.standardContext.getLoader().getClassLoader();,"final ClassLoader loader=this.standardContext.getLoader().getClassLoader();
",1,3,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(FieldAccess-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
813,final ClassLoader loader = info.appCtx.getWebContexts().isEmpty() ? info.appCtx.getClassLoader() : info.appCtx.getWebContexts().iterator().next().getClassLoader();,"final ClassLoader loader=info.appCtx.getWebContexts().isEmpty() ? info.appCtx.getClassLoader() : info.appCtx.getWebContexts().iterator().next().getClassLoader();
",1,3,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
814,".getMetaData(""SharedName1"", getClass().getClassLoader(), true);","ClassMetaData meta=emf.getConfiguration().getMetaDataRepositoryInstance().getMetaData(""SharedName1"",getClass().getClassLoader(),true);
",1,1,5,,"SimpleName(),
StringLiteral(),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
BooleanLiteral(),
"
815,"ServiceLoader<PlcDriver> drivers = ServiceLoader.load(PlcDriver.class, context.getBundle().adapt(BundleWiring.class).getClassLoader());","ServiceLoader<PlcDriver> drivers=ServiceLoader.load(PlcDriver.class,context.getBundle().adapt(BundleWiring.class).getClassLoader());
",1,1,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
816,this.configuration.setClassLoader(FileSystemLedgerOffloaderFactory.class.getClassLoader());,"this.configuration.setClassLoader(FileSystemLedgerOffloaderFactory.class.getClassLoader());
",1,1,5,,"ThisExpression(FieldAccess-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
817,"final InputStream is = FileUtils.openFileOrDefaultResource(fileThatDoesNotExist.getCanonicalPath(), defaultResource, this.getClass().getClassLoader());","final InputStream is=FileUtils.openFileOrDefaultResource(fileThatDoesNotExist.getCanonicalPath(),defaultResource,this.getClass().getClassLoader());
",1,6,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
818,byte[] reference = getBytesFromResource(this.getClass().getClassLoader().getResource(,"byte[] reference=getBytesFromResource(this.getClass().getClassLoader().getResource(""org/apache/xml/security/c14n/inExcl/example2_2_1_c14nized.xml""));
",1,1,8,,"PrimitiveType(ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
819,"Path specFilePath = Paths.get(GeneratorTest.class.getClassLoader().getResource(""swagger.yaml"").toURI());","Path specFilePath=Paths.get(GeneratorTest.class.getClassLoader().getResource(""swagger.yaml"").toURI());
",1,1,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
820,"options.put(Options.KEY_CLASS_LOADER, this.getClass().getClassLoader());","options.put(Options.KEY_CLASS_LOADER,this.getClass().getClassLoader());
",1,3,6,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
821,final String file = Objects.requireNonNull(getClass().getClassLoader().getResource(yamlName)).getFile();,"final String file=Objects.requireNonNull(getClass().getClassLoader().getResource(yamlName)).getFile();
",1,1,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
822,ClassLoader[] cls = new ClassLoader[] { this.getClass().getClassLoader() };,"ClassLoader[] cls=new ClassLoader[]{this.getClass().getClassLoader()};
",1,1,8,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
823,"ClassLoader[] cls = new ClassLoader[] { Digester.class.getClassLoader(),","ClassLoader[] cls=new ClassLoader[]{Digester.class.getClassLoader(),Thread.currentThread().getContextClassLoader()};
",1,1,7,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
824,"Proxy.getProxyClass(ConnectionPool.class.getClassLoader(), new Class[] {java.sql.Connection.class,javax.sql.PooledConnection.class, javax.sql.XAConnection.class}) :","Class<?> proxyClass=xa ? Proxy.getProxyClass(ConnectionPool.class.getClassLoader(),new Class[]{java.sql.Connection.class,javax.sql.PooledConnection.class,javax.sql.XAConnection.class}) : Proxy.getProxyClass(ConnectionPool.class.getClassLoader(),new Class[]{java.sql.Connection.class,javax.sql.PooledConnection.class});
",1,3,9,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ),
QualifiedName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, ),
"
825,"return new Timer(""Tomcat JDBC Pool Cleaner[""+ System.identityHashCode(ConnectionPool.class.getClassLoader()) + "":""+","return new Timer(""Tomcat JDBC Pool Cleaner["" + System.identityHashCode(ConnectionPool.class.getClassLoader()) + "":""+ System.currentTimeMillis()+ ""]"",true);
",1,1,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
826,"return loadRuleSet(prefix,""org.apache.catalina.cluster.ClusterRuleSet"",ClusterRuleSetFactory.class.getClassLoader());","return loadRuleSet(prefix,""org.apache.catalina.cluster.ClusterRuleSet"",ClusterRuleSetFactory.class.getClassLoader());
",1,1,5,,"SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
827,manager = (Manager) getClass().getClassLoader().loadClass(getManagerClassName()).newInstance();,"manager=(Manager)getClass().getClassLoader().loadClass(getManagerClassName()).newInstance();
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
828,"final String message = messages().format(""cl0008"", className, clazz.getClassLoader(), moduleContext.getClassLoader(), e.getMessage());","final String message=messages().format(""cl0008"",className,clazz.getClassLoader(),moduleContext.getClassLoader(),e.getMessage());
",1,2,13,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
829,"final AppModule app = new AppModule(OpenEJBXmlByModuleTest.class.getClassLoader(), OpenEJBXmlByModuleTest.class.getSimpleName());","final AppModule app=new AppModule(OpenEJBXmlByModuleTest.class.getClassLoader(),OpenEJBXmlByModuleTest.class.getSimpleName());
",1,1,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
830,final JAXBContext jc = clazz.getClassLoader() == JaxbPersistenceFactory.class.getClassLoader() ?,"final JAXBContext jc=clazz.getClassLoader() == JaxbPersistenceFactory.class.getClassLoader() ? JaxbJavaee.getContext(clazz) : JAXBContextFactory.newInstance(clazz);
",1,1,7,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ConditionalExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
831,if (!(this.getClass().getClassLoader() instanceof URLClassLoader)) {,"if (!(this.getClass().getClassLoader() instanceof URLClassLoader)) {
  String classPath=System.getProperty(""java.class.path"");
  String[] classPathEntries=classPath.split(System.getProperty(""path.separator""));
  HashSet<String> dependentJars=new HashSet<String>();
  for (int i=0; i < classPathEntries.length; i++) {
    dependentJars.add(classPathEntries[i]);
  }
  scaApiUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,scaApiJars);
  runtimeUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,tuscanyCoreSpiJars,tuscanyRuntimeJars);
  extensionUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,tuscanyExtensionJars);
  dependencyUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars);
}
 else {
  HashSet<URL> dependentJars=new HashSet<URL>();
  URL[] classPathEntries=((URLClassLoader)this.getClass().getClassLoader()).getURLs();
  for (int i=0; i < classPathEntries.length; i++) {
    dependentJars.add(classPathEntries[i]);
  }
  scaApiUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,scaApiJars);
  runtimeUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,tuscanyCoreSpiJars,tuscanyRuntimeJars);
  extensionUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars,tuscanyExtensionJars);
  dependencyUrls=getTuscanyClassLoaderURLs(classPathEntries,dependentJars);
}
",1,1,4,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, PrefixExpression-operand, IfStatement-expression, ),
"
832,"contribB.getClassLoader().loadClass(getPackageName(getClass()) + "".NonExistentClass"");","contribB.getClassLoader().loadClass(getPackageName(getClass()) + "".NonExistentClass"");
",1,1,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
833,operation == null ? t.getClassLoader() : ((JavaInterface)operation.getInterface()),"ClassLoader parent=operation == null ? t.getClassLoader() : ((JavaInterface)operation.getInterface()).getJavaClass().getClassLoader();
",1,1,7,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, ),
"
834,"node = SCANodeFactory.newInstance().createSCANodeFromClassLoader(""helloworld.composite"", getClass().getClassLoader());","node=SCANodeFactory.newInstance().createSCANodeFromClassLoader(""helloworld.composite"",getClass().getClassLoader());
",1,1,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
835,if (contribution.getClassLoader() == null && contribution.getModelResolver() instanceof ExtensibleModelResolver) {,"if (contribution.getClassLoader() == null && contribution.getModelResolver() instanceof ExtensibleModelResolver) {
  ModelResolver o=((ExtensibleModelResolver)contribution.getModelResolver()).getModelResolverInstance(ClassReference.class);
  if (o instanceof ClassLoader) {
    contribution.setClassLoader((ClassLoader)o);
  }
}
",1,1,6,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
836,if ( this.getClass().getClassLoader() instanceof URLClassLoader) {,"if (this.getClass().getClassLoader() instanceof URLClassLoader) {
  URL[] urls=((URLClassLoader)this.getClass().getClassLoader()).getURLs();
  for (  URL url : urls) {
    loadedJars.append(url.getFile() + File.pathSeparator);
  }
}
",1,1,4,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, IfStatement-expression, ),
"
837,this.defaultEngine = RutaDescriptorFactory.class.getClassLoader(),"this.defaultEngine=RutaDescriptorFactory.class.getClassLoader().getResource(""org/apache/uima/ruta/engine/BasicEngine.xml"");
",1,1,4,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
838,"resourceManager.setExtensionClassPath(this.getClass().getClassLoader(), cpDir.getAbsolutePath(), true);","resourceManager.setExtensionClassPath(this.getClass().getClassLoader(),cpDir.getAbsolutePath(),true);
",1,3,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
839,"ConcurrentHashMap<String, T> container = getClassLoaderCache(key.getClassLoader(), true);","ConcurrentHashMap<String,T> container=getClassLoaderCache(key.getClassLoader(),true);
",1,1,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
840,"_javaClass = (Class<? extends XmlObject>) Class.forName(getFullJavaName(), false, getTypeSystem().getClassLoader());","_javaClass=(Class<? extends XmlObject>)Class.forName(getFullJavaName(),false,getTypeSystem().getClassLoader());
",1,1,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
841,"url = locateResource(id, callingClass.getClassLoader(), null);","url=locateResource(id,callingClass.getClassLoader(),null);
",2,9,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
842,"final Class openejb = Class.forName(""org.apache.openejb.OpenEJB"", true, this.getClass().getClassLoader());","final Class openejb=Class.forName(""org.apache.openejb.OpenEJB"",true,this.getClass().getClassLoader());
",2,14,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
843,"final Hello hello = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), new Class[] { Hello.class }, handler);","final Hello hello=(Hello)Proxy.newProxyInstance(HelloImpl.class.getClassLoader(),new Class[]{Hello.class},handler);
",2,49,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
844,if (container != null && container.getLoader() != null && container.getLoader().getClassLoader() != null) {,"if (container != null && container.getLoader() != null && container.getLoader().getClassLoader() != null) {
  cl=container.getLoader().getClassLoader();
}
",2,46,9,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
845,if (c != null && factoryClass == c.getClassLoader().loadClass(factoryClass.getName()),"if (c != null && factoryClass == c.getClassLoader().loadClass(factoryClass.getName()) && (factoryClassName == null || c.getName().equals(factoryClassName))) {
  return c;
}
",2,9,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
"
846,"Enumeration<URL> en = this.getClass().getClassLoader().getResources(""META-INF/commons-transfer.properties"");","Enumeration<URL> en=this.getClass().getClassLoader().getResources(""META-INF/commons-transfer.properties"");
",2,2,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
847,"MBeanServer guardedServer = (MBeanServer) Proxy.newProxyInstance(server.getClass().getClassLoader(), new Class[]{ MBeanServer.class }, handler);","MBeanServer guardedServer=(MBeanServer)Proxy.newProxyInstance(server.getClass().getClassLoader(),new Class[]{MBeanServer.class},handler);
",2,4,12,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
848,"return new MyWovenClassClassLoader(className, getBytes(), getClass().getClassLoader(), bundleContainingOriginalClass).loadClass(className);","return new MyWovenClassClassLoader(className,getBytes(),getClass().getClassLoader(),bundleContainingOriginalClass).loadClass(className);
",2,6,8,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
849,_loader = (l != null) ? l : this.getClass().getClassLoader();,"_loader=(l != null) ? l : this.getClass().getClassLoader();
",2,2,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ParenthesizedExpression-expression, ConditionalExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
850,if (source == null && (klass.getClassLoader() == null || klass.getClassLoader().equals(Object.class.getClassLoader()))) {,"if (source == null && (klass.getClassLoader() == null || klass.getClassLoader().equals(Object.class.getClassLoader()))) {
  return Util.THIS.getString(""MSG_platform_parser"");
}
 else if (source == null) {
  return Util.THIS.getString(""MSG_unknown_parser"",klass.getName());
}
 else {
  URL location=source.getLocation();
  return Util.THIS.getString(""MSG_parser_plug"",location.toExternalForm());
}
",2,6,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-rightOperand, ParenthesizedExpression-expression, InfixExpression-rightOperand, IfStatement-expression, ),
"
851,"return new DynamicClassLoader(urls, tccl != null ? tccl : DynamicClassLoader.class.getClassLoader());","return new DynamicClassLoader(urls,tccl != null ? tccl : DynamicClassLoader.class.getClassLoader());
",2,4,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ConditionalExpression-thenExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
852,"URLClassLoader loader = new URLClassLoader(new URL[] {tb.toURI().toURL()}, getClass().getClassLoader());","URLClassLoader loader=new URLClassLoader(new URL[]{tb.toURI().toURL()},getClass().getClassLoader());
",2,2,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayInitializer-expressions, ArrayCreation-initializer, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
853,return ( this.getClass().getClassLoader() );,"return (this.getClass().getClassLoader());
",2,2,3,,"ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ParenthesizedExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ParenthesizedExpression-expression, ReturnStatement-expression, ),
"
854,"return IOUtils.toString(QueryElasticsearchHttp.class.getClassLoader().getResourceAsStream(filename), StandardCharsets.UTF_8);","return IOUtils.toString(QueryElasticsearchHttp.class.getClassLoader().getResourceAsStream(filename),StandardCharsets.UTF_8);
",2,3,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
855,"assertThat(ClassUtils.getCallerClassLoader(ClassUtilsTest.class), sameInstance(ClassUtilsTest.class.getClassLoader()));","assertThat(ClassUtils.getCallerClassLoader(ClassUtilsTest.class),sameInstance(ClassUtilsTest.class.getClassLoader()));
",2,2,7,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
856,Mockito.when(factory.getBundleClassLoader()).thenReturn(Dependency.class.getClassLoader());,"Mockito.when(factory.getBundleClassLoader()).thenReturn(Dependency.class.getClassLoader());
",2,2,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
857,"return (T) Proxy.newProxyInstance(clazz.getClassLoader(), new Class<?>[] { clazz }, h);","return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class<?>[]{clazz},h);
",2,2,10,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
858,"private BundleContext bundleContext = new MockBundleContext(getClass().getClassLoader(), """", new HashMap<Artifact, ConfigurationData>(), null);","private BundleContext bundleContext=new MockBundleContext(getClass().getClassLoader(),"""",new HashMap<Artifact,ConfigurationData>(),null);
",2,12,11,,"Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
859,if (parent == null) parent = ProcessingUnit.class.getClassLoader();,"if (parent == null) parent=ProcessingUnit.class.getClassLoader();
",2,2,5,,"SimpleName(InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, IfStatement-thenStatement, ),
"
860,"protocol.getClassLoader(), new Class[]{protocol}, invoker), false);","return new ProtocolProxy<T>(protocol,(T)Proxy.newProxyInstance(protocol.getClassLoader(),new Class[]{protocol},invoker),false);
",2,2,7,,"SimpleName(MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(),
BooleanLiteral(),
"
861,return classes[index].getClassLoader();,"return classes[index].getClassLoader();
",2,2,3,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
"
862,"""constructor: "" + getClass().getSimpleName() + "" classloader: "" + getClass().getClassLoader() + "", "" + util + "" classloader: ""","System.out.println(""constructor: "" + getClass().getSimpleName() + "" classloader: ""+ getClass().getClassLoader()+ "", ""+ util+ "" classloader: ""+ util.getClass().getClassLoader());
",2,5,9,,"StringLiteral(InfixExpression-leftOperand, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
SimpleName(InfixExpression-extendedOperands, ),
StringLiteral(InfixExpression-extendedOperands, ),
"
863,return getClass().getClassLoader().getResource(ReplUtils.RANGER_CONFIGURATION_RESOURCE_NAME);,"return getClass().getClassLoader().getResource(ReplUtils.RANGER_CONFIGURATION_RESOURCE_NAME);
",2,2,4,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
864,"grid(0).compute().localDeployTask(TestTask1.class, TestTask1.class.getClassLoader());","grid(0).compute().localDeployTask(TestTask1.class,TestTask1.class.getClassLoader());
",2,2,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
865,"T hook = (T) Class.forName(hookClass, true, JavaUtils.getClassLoader()).newInstance();","@SuppressWarnings(""unchecked"") T hook=(T)Class.forName(hookClass,true,JavaUtils.getClassLoader()).newInstance();
",2,2,10,,"SimpleName(SimpleType-name, ),
SimpleName(VariableDeclarationFragment-name, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
BooleanLiteral(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, ),
"
866,assertThat(ServiceContextManager.getServiceContext(getClass().getClassLoader()) == mine).isTrue();,"assertThat(ServiceContextManager.getServiceContext(getClass().getClassLoader()) == mine).isTrue();
",2,4,7,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
867,if(config.getContext().getServiceContext().getClassLoader()!=this.classLoader){,"if (config.getContext().getServiceContext().getClassLoader() != this.classLoader) {
  throw new IllegalArgumentException(""Classloader mismatch."");
}
",2,3,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(FieldAccess-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(FieldAccess-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
868,"ClassLoader jtaCl = FrameworkUtil.getBundle(myCl.loadClass(""javax.transaction.UserTransaction"")).adapt(BundleWiring.class).getClassLoader();","ClassLoader jtaCl=FrameworkUtil.getBundle(myCl.loadClass(""javax.transaction.UserTransaction"")).adapt(BundleWiring.class).getClassLoader();
",2,3,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
869,"return new DefaultConverter(action.getClass().getClassLoader()).convert(value, toType);","return new DefaultConverter(action.getClass().getClassLoader()).convert(value,toType);
",2,2,7,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
870,boolean refreshableAttribute = (beanDefinition.getBeanClass().getClassLoader() instanceof ThrowAwayClassloader);,"boolean refreshableAttribute=(beanDefinition.getBeanClass().getClassLoader() instanceof ThrowAwayClassloader);
",2,2,6,,"PrimitiveType(VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, ParenthesizedExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
871,return context.getSurroundingClass().getCompileUnit().getClassLoader().loadClass(context.getTypeName());,"return context.getSurroundingClass().getCompileUnit().getClassLoader().loadClass(context.getTypeName());
",2,2,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
872,"Class.forName(OnSaveTask.Context.class.getName(), true, DocumentSpiPackageAccessor.class.getClassLoader());","Class.forName(OnSaveTask.Context.class.getName(),true,DocumentSpiPackageAccessor.class.getClassLoader());
",2,2,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
873,"Class<Enum> caseKind = (Class<Enum>) Class.forName(""com.sun.source.tree.CaseTree$CaseKind"", false, JCTree.class.getClassLoader());","Class<Enum> caseKind=(Class<Enum>)Class.forName(""com.sun.source.tree.CaseTree$CaseKind"",false,JCTree.class.getClassLoader());
",2,2,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
874,"return Something.class.getClassLoader().getResources(""/"" + name);","return Something.class.getClassLoader().getResources(""/"" + name);
",2,2,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ReturnStatement-expression, ),
"
875,"Class<?> someFromBundle = (Class<?>) loadClass.invoke(null, ""org.foo.Something"", someModule.getClassLoader());","Class<?> someFromBundle=(Class<?>)loadClass.invoke(null,""org.foo.Something"",someModule.getClassLoader());
",2,4,11,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
876,if (arr[i].getClassLoader() == ClassLoader.getSystemClassLoader()) {,"if (arr[i].getClassLoader() == ClassLoader.getSystemClassLoader()) {
  fail(""Should be an OSGi class: "" + arr[i]);
}
",2,2,5,,"SimpleName(ArrayAccess-array, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(ArrayAccess-index, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
877,"final ConnectorModule connectorModule = createConnectorModule(jarLocation, jarLocation, webModule.getClassLoader(), null);","final ConnectorModule connectorModule=createConnectorModule(jarLocation,jarLocation,webModule.getClassLoader(),null);
",2,2,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
878,"app.getEjbModules().iterator().next().getAltDDs().put(""resources.xml"", getClass().getClassLoader().getResource(""META-INF/resource/appresource.openejb.xml""));","app.getEjbModules().iterator().next().getAltDDs().put(""resources.xml"",getClass().getClassLoader().getResource(""META-INF/resource/appresource.openejb.xml""));
",2,2,11,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
879,"final Context app = (Context) ContextBindings.getClassLoader().lookup(""app"");","final Context app=(Context)ContextBindings.getClassLoader().lookup(""app"");
",2,2,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
880,"return (ConfiguredObject<?>) Proxy.newProxyInstance(getClass().getClassLoader(),","return (ConfiguredObject<?>)Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{_bestFitInterface},new AttributeGettingHandler(attributes,_attributeTypes,this));
",2,2,6,,"SimpleName(SimpleType-name, ParameterizedType-type, CastExpression-type, ReturnStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
881,"return (AuthenticationService) java.lang.reflect.Proxy.newProxyInstance(AuthenticationService.class.getClassLoader(),","return (AuthenticationService)java.lang.reflect.Proxy.newProxyInstance(AuthenticationService.class.getClassLoader(),new Class[]{AuthenticationService.class},new InvocationHandler(){
  public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    try {
      Object o=target.getClass().getMethod(method.getName(),method.getParameterTypes()).invoke(target,args);
      return o;
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw t;
    }
  }
}
);
",2,2,5,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
QualifiedName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
882,if (inputstream == null && FactoryFinder.class.getClassLoader() != null) {,"if (inputstream == null && FactoryFinder.class.getClassLoader() != null) {
  inputstream=FactoryFinder.class.getClassLoader().getResourceAsStream(factoryResource);
}
",2,2,5,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
883,if ((url = this.getClass().getClassLoader().getResource(fileName)) != null) {,"if ((url=this.getClass().getClassLoader().getResource(fileName)) != null) {
  URI uri;
  try {
    uri=quote(url);
  }
 catch (  URISyntaxException e) {
    uri=null;
  }
  if (uri != null) {
    return new File(uri);
  }
}
",2,3,7,,"SimpleName(Assignment-leftHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-arguments, Assignment-rightHandSide, ParenthesizedExpression-expression, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, IfStatement-expression, ),
"
884,thread.setContextClassLoader(wc.getClassLoader() == null ? wc.getAppContext().getClassLoader() : wc.getClassLoader());,"thread.setContextClassLoader(wc.getClassLoader() == null ? wc.getAppContext().getClassLoader() : wc.getClassLoader());
",2,3,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
885,"final EjbModule ejbModule = new EjbModule(getClass().getClassLoader(), ""FakeEjbJar"", ""fake.jar"", ejbJar, null);","final EjbModule ejbModule=new EjbModule(getClass().getClassLoader(),""FakeEjbJar"",""fake.jar"",ejbJar,null);
",2,2,10,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
886,"final ClientModule clientModule = new ClientModule(null, app.getClassLoader(), app.getJarLocation(), null, null);","final ClientModule clientModule=new ClientModule(null,app.getClassLoader(),app.getJarLocation(),null,null);
",2,2,11,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
887,final PersistenceProvider persistenceProvider = (PersistenceProvider) getClass().getClassLoader().loadClass(PERSISTENCE_PROVIDER).newInstance();,"final PersistenceProvider persistenceProvider=(PersistenceProvider)getClass().getClassLoader().loadClass(PERSISTENCE_PROVIDER).newInstance();
",2,2,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
888,"SCANode node = SCANodeFactory.newInstance().createSCANodeFromClassLoader(""myapp.composite"", MyClientImpl.class.getClassLoader());","SCANode node=SCANodeFactory.newInstance().createSCANodeFromClassLoader(""myapp.composite"",MyClientImpl.class.getClassLoader());
",2,2,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
889,"Crypto clientCrypto = new Merlin(clientProperties, this.getClass().getClassLoader(), null);","Crypto clientCrypto=new Merlin(clientProperties,this.getClass().getClassLoader(),null);
",2,2,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
890,"Init.init(WSSec.class.getClassLoader().getResource(""wss/wss-config.xml"").toURI(), WSSec.class);","Init.init(WSSec.class.getClassLoader().getResource(""wss/wss-config.xml"").toURI(),WSSec.class);
",2,2,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
891,"try (InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(""minikdc-krb5.conf"");","try (InputStream inputStream=this.getClass().getClassLoader().getResourceAsStream(""minikdc-krb5.conf"");BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8))){
  String line=reader.readLine();
  while (line != null) {
    sb.append(line).append(""{3}"");
    line=reader.readLine();
  }
}
 ",3,29,7,,"SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
892,"builder.addBinaryBody(""part1"", new File(this.getClass().getClassLoader().getResource(""java.jpg"").toURI()),","builder.addBinaryBody(""part1"",new File(this.getClass().getClassLoader().getResource(""java.jpg"").toURI()),ContentType.create(""image/jpeg""),""java.jpg"");
",3,748,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
893,File[] samples = new File(getClass().getClassLoader().getResource(testDir).getFile()).listFiles(new FileFilter() {,"File[] samples=new File(getClass().getClassLoader().getResource(testDir).getFile()).listFiles(new FileFilter(){
  public boolean accept(  File pathname){
    return pathname.isDirectory() && pathname.getName().matches(""process-sample\\d*"");
  }
}
);
",3,6,11,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
894,"url = ApplicationProperties.class.getClassLoader().getResource(""/"" + fileName);","url=ApplicationProperties.class.getClassLoader().getResource(""/"" + fileName);
",3,4,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
895,"this(iface, impl, new ReflectData(impl.getClass().getClassLoader()));","this(iface,impl,new ReflectData(impl.getClass().getClassLoader()));
",3,9,6,,"SimpleName(ConstructorInvocation-arguments, ),
SimpleName(ConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ConstructorInvocation-arguments, ),
"
896,"xmlObject = XmlBeansUtil.parse(((File) plan).toURI().toURL(), getClass().getClassLoader());","xmlObject=XmlBeansUtil.parse(((File)plan).toURI().toURL(),getClass().getClassLoader());
",3,4,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
897,"ReferenceWithError<Class<? extends D>> r1 = loadClass(className, entity.getClass().getClassLoader());","ReferenceWithError<Class<? extends D>> r1=loadClass(className,entity.getClass().getClassLoader());
",3,4,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-type, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, WildcardType-bound, ParameterizedType-typeArguments, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
898,public static final ImageIcon FOCUS_ON_ICON = new ImageIcon(ChainsawIcons.class.getClassLoader().getResource(,"public static final ImageIcon FOCUS_ON_ICON=new ImageIcon(ChainsawIcons.class.getClassLoader().getResource(BASE_ICON_PATH + ""ZoomIn24.gif""));
",3,9,9,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
899,"final InputStream inputFile = XJTestUtils.class.getClassLoader().getResourceAsStream(testName + "".xml"");","final InputStream inputFile=XJTestUtils.class.getClassLoader().getResourceAsStream(testName + "".xml"");
",3,3,8,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
900,assertTrue(newFloatConverter.getClass().getClassLoader() == componentLoader);,"assertTrue(newFloatConverter.getClass().getClassLoader() == componentLoader);
",3,3,5,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
901,newLoader( createRules( rules ) ).setClassLoader( this.getClass().getClassLoader() ).newDigester();,"final Digester digester=newLoader(createRules(rules)).setClassLoader(this.getClass().getClassLoader()).newDigester();
",3,3,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
902,root = new SwaggerUiResolver(OpenApiFeature.class.getClassLoader()),"root=new SwaggerUiResolver(OpenApiFeature.class.getClassLoader()).findSwaggerUiRootInternal(swaggerUiMavenGroupAndArtifact,swaggerUiVersion);
",3,4,4,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
903,return serviceType != null ? serviceType.getClassLoader() : ClassUtils.getClassLoader();,"return serviceType != null ? serviceType.getClassLoader() : ClassUtils.getClassLoader();
",3,3,6,,"SimpleName(InfixExpression-leftOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ReturnStatement-expression, ),
"
904,"Document doc = XMLUtils.read(this.getClass().getClassLoader().getResourceAsStream(filename), false);","Document doc=XMLUtils.read(this.getClass().getClassLoader().getResourceAsStream(filename),false);
",3,5,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
905,"results[i] = (JettyContainer) proxyManager.createProxy(name, JettyContainer.class.getClassLoader());","results[i]=(JettyContainer)proxyManager.createProxy(name,JettyContainer.class.getClassLoader());
",3,3,8,,"SimpleName(ArrayAccess-array, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(ArrayAccess-index, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
906,"result.add((JettyWebConnector) proxyManager.createProxy(name, JettyWebConnector.class.getClassLoader()));","result.add((JettyWebConnector)proxyManager.createProxy(name,JettyWebConnector.class.getClassLoader()));
",3,3,8,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
907,if (ServicesManager.class.getClassLoader() == sce.getServletContext().getClassLoader()) {,"if (ServicesManager.class.getClassLoader() == sce.getServletContext().getClassLoader()) {
  servicesManager.close();
}
",3,12,5,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, IfStatement-expression, ),
"
908,"Map<String, Object> templateMap = ConfigMain.transformTemplateToSchema(getClass().getClassLoader().getResourceAsStream(name + "".xml"")).toMap();","Map<String,Object> templateMap=ConfigMain.transformTemplateToSchema(getClass().getClassLoader().getResourceAsStream(name + "".xml"")).toMap();
",3,8,12,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
909,final File clusterConfigFile = new File(getClass().getClassLoader().getResource(DEFAULT_STANDALONE_CONF).toURI());,"final File clusterConfigFile=new File(getClass().getClassLoader().getResource(DEFAULT_STANDALONE_CONF).toURI());
",3,4,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
910,Class valCls = grid(1).configuration().getClassLoader().loadClass(TEST_VALUE);,"Class valCls=grid(1).configuration().getClassLoader().loadClass(TEST_VALUE);
",3,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
911,"assert v2.getClass().getClassLoader().getClass().getName().contains(""GridDeploymentClassLoader"");","assert v2.getClass().getClassLoader().getClass().getName().contains(""GridDeploymentClassLoader"");
",3,3,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, AssertStatement-expression, ),
StringLiteral(MethodInvocation-arguments, AssertStatement-expression, ),
"
912,((WrappingClassLoader)i1.configuration().getClassLoader()).getParent() :,"ClassLoader ldr=useWrappingLoader ? ((WrappingClassLoader)i1.configuration().getClassLoader()).getParent() : i1.configuration().getClassLoader();
",3,3,5,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
913,"deploymentInfo = new BeanContext(""author"", null, new ModuleContext("""", null, """", new AppContext("""", SystemInstance.get(), Author.class.getClassLoader(), new IvmContext(), new IvmContext(), false), new IvmContext(), null),","deploymentInfo=new BeanContext(""author"",null,new ModuleContext("""",null,"""",new AppContext("""",SystemInstance.get(),Author.class.getClassLoader(),new IvmContext(),new IvmContext(),false),new IvmContext(),null),AuthorBean.class,null,null,AuthorHome.class,Author.class,null,null,null,null,String.class,BeanType.CMP_ENTITY,false);
",3,5,19,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
BooleanLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
914,"IOUtils.toString(ControllerAdminApiApplication.class.getClassLoader().getResourceAsStream(""api/index.html""),","String expected=IOUtils.toString(ControllerAdminApiApplication.class.getClassLoader().getResourceAsStream(""api/index.html""),""UTF-8"").replace(""\n"","""");
",3,3,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ),
"
915,"GroovyTemplateUtils.class.getClassLoader().getResource(""ingestion_job_spec_template.yaml"").getFile(), null,","SegmentGenerationJobSpec spec=IngestionJobLauncher.getSegmentGenerationJobSpec(GroovyTemplateUtils.class.getClassLoader().getResource(""ingestion_job_spec_template.yaml"").getFile(),null,context);
",3,3,6,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
NullLiteral(),
"
916,ClassLoader cl = FrameworkUtil.getBundle(this.getClass()).adapt(BundleWiring.class).getClassLoader();,"ClassLoader cl=FrameworkUtil.getBundle(this.getClass()).adapt(BundleWiring.class).getClassLoader();
",3,3,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
917,"ClassLoader loader = new URLClassLoader(urls.toArray(new URL[urls.size()]), getClass().getClassLoader());","ClassLoader loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),getClass().getClassLoader());
",3,3,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ArrayCreation-dimensions, MethodInvocation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
918,URL resourceUrl = this.getClass().getClassLoader().getResource( sourceFolder + file );,"URL resourceUrl=this.getClass().getClassLoader().getResource(sourceFolder + file);
",3,3,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
919,"validator = (Validator) Proxy.newProxyInstance(appContext.getClassLoader(), new Class<?>[]{Validator.class}, new LazyValidator(factory));","validator=(Validator)Proxy.newProxyInstance(appContext.getClassLoader(),new Class<?>[]{Validator.class},new LazyValidator(factory));
",3,4,12,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
WildcardType(ParameterizedType-typeArguments, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, MethodInvocation-arguments, CastExpression-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
920,"when(pathInputStreamFactory.create(testInput)).thenReturn(getClass().getClassLoader().getResourceAsStream(""CsvToJson-v1.yml""));","when(pathInputStreamFactory.create(testInput)).thenReturn(getClass().getClassLoader().getResourceAsStream(""CsvToJson-v1.yml""));
",3,3,9,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
921,if (serviceApi != null && !component.getClass().getClassLoader().equals(serviceApi.getClassLoader())) {,"if (serviceApi != null && !component.getClass().getClassLoader().equals(serviceApi.getClassLoader())) {
  final Bundle apiBundle=classLoaderBundleLookup.get(serviceApi.getClassLoader());
  reachableApiBundles.add(apiBundle.getBundleDetails().getCoordinate());
}
",3,5,8,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
922,"Boolean cond = ObjectType.doRealCompare(lhsValue, rhsValue, operator, compareType, format, messages, null, dctx.getClassLoader(), constant);","Boolean cond=ObjectType.doRealCompare(lhsValue,rhsValue,operator,compareType,format,messages,null,dctx.getClassLoader(),constant);
",3,3,14,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
923,"this.dispatchContext = new DispatchContext(modelName, this.getClass().getClassLoader(), null);","this.dispatchContext=new DispatchContext(modelName,this.getClass().getClassLoader(),null);
",3,4,8,,"ThisExpression(FieldAccess-expression, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(FieldAccess-name, Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
924,if (oldClassLoader != ThreadSingletonServiceImpl.class.getClassLoader() && ThreadSingletonServiceImpl.class.getClassLoader() != oldClassLoader.getParent()) {,"if (oldClassLoader != ThreadSingletonServiceImpl.class.getClassLoader() && ThreadSingletonServiceImpl.class.getClassLoader() != oldClassLoader.getParent()) {
  cl=new MultipleClassLoader(oldClassLoader,ThreadSingletonServiceImpl.class.getClassLoader());
}
 else {
  cl=oldClassLoader;
}
",3,3,7,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
925,"listener = new ServletListener((Servlet) wc.newInstance(wc.getClassLoader().loadClass(classname)), wc.getContextRoot());","listener=new ServletListener((Servlet)wc.newInstance(wc.getClassLoader().loadClass(classname)),wc.getContextRoot());
",3,3,11,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, CastExpression-type, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, CastExpression-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
926,"ctx.store.getContext().getClassLoader(), true);","pstate.mapping[i]=ctx.store.getConfiguration().getMappingRepositoryInstance().getMapping((Class)val,ctx.store.getContext().getClassLoader(),true);
",3,3,4,,"QualifiedName(MethodInvocation-expression, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
BooleanLiteral(),
"
927,URL[] classPathEntries = ((URLClassLoader)this.getClass().getClassLoader()).getURLs();,"URL[] classPathEntries=((URLClassLoader)this.getClass().getClassLoader()).getURLs();
",3,3,8,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
928,GenerateDescriptorTest.basicAEUrl = GenerateDescriptorTest.class.getClassLoader(),"GenerateDescriptorTest.basicAEUrl=GenerateDescriptorTest.class.getClassLoader().getResource(""BasicEngine.xml"");
",3,3,3,,"QualifiedName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
929,"icons.add( new ImageIcon( getClass().getClassLoader().getResource( ""org/apache/usergrid/launcher/icon_16.png"" ) )","icons.add(new ImageIcon(getClass().getClassLoader().getResource(""org/apache/usergrid/launcher/icon_16.png"")).getImage());
",3,3,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
930,"return (MBeanServerConnection)Proxy.newProxyInstance(handler.getClass().getClassLoader(), new Class[]{MBeanServerConnection.class}, handler);","return (MBeanServerConnection)Proxy.newProxyInstance(handler.getClass().getClassLoader(),new Class[]{MBeanServerConnection.class},handler);
",4,34,10,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
931,"assertTrue(testBundle.adapt(BundleWiring.class).getClassLoader().getResource(""bla"").toExternalForm().endsWith(""/""));","assertTrue(testBundle.adapt(BundleWiring.class).getClassLoader().getResource(""bla"").toExternalForm().endsWith(""/""));
",4,16,10,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
932,"super(new URL [] {}, TestProviderBundleClassLoader.class.getClassLoader());","super(new URL[]{},TestProviderBundleClassLoader.class.getClassLoader());
",4,22,5,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, SuperConstructorInvocation-arguments, ),
ArrayInitializer(ArrayCreation-initializer, SuperConstructorInvocation-arguments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, SuperConstructorInvocation-arguments, ),
SimpleName(MethodInvocation-name, SuperConstructorInvocation-arguments, ),
"
933,serializer = XmlMementoSerializerBuilder.empty().withClassLoader(XmlMementoSerializerTest.class.getClassLoader()),"serializer=XmlMementoSerializerBuilder.empty().withClassLoader(XmlMementoSerializerTest.class.getClassLoader()).withBrooklynDeserializingClassRenames().build();
",4,8,6,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
934,"return CryptoFactory.getInstance(properties, this.getClass().getClassLoader(), passwordEncryptor);","return CryptoFactory.getInstance(properties,this.getClass().getClassLoader(),passwordEncryptor);
",4,4,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
"
935,"GeronimoHandlerResolver resolver = new GeronimoHandlerResolver(new MockBundle(getClass().getClassLoader(), null, 11L), getClass(), handlerChains, null);","GeronimoHandlerResolver resolver=new GeronimoHandlerResolver(new MockBundle(getClass().getClassLoader(),null,11L),getClass(),handlerChains,null);
",4,5,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NumberLiteral(ClassInstanceCreation-arguments, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
936,"info(""Stored value in cache1 [v="" + v1 + "", ldr="" + v1.getClass().getClassLoader() + ']');","info(""Stored value in cache1 [v="" + v1 + "", ldr=""+ v1.getClass().getClassLoader()+ ']');
",4,5,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
CharacterLiteral(InfixExpression-extendedOperands, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
937,"new URL[] {new URL(GridTestProperties.getProperty(""p2p.uri.cls""))}, getClass().getClassLoader());","ClassLoader ldr1=new URLClassLoader(new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))},getClass().getClassLoader());
",4,4,8,,"SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-expression, ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ),
StringLiteral(MethodInvocation-arguments, ClassInstanceCreation-arguments, ArrayInitializer-expressions, ArrayCreation-initializer, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ),
SimpleName(MethodInvocation-name, ),
"
938,serializer = new XmlMementoSerializer<Object>(XmlMementoSerializerTest.class.getClassLoader());,"serializer=new XmlMementoSerializer<Object>(XmlMementoSerializerTest.class.getClassLoader());
",4,4,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-type, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, ClassInstanceCreation-type, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
939,"node = NodeFactory.getInstance().createNode(""ScenarioFour.composite"", TestCorbaHost.class.getClassLoader()).start();","node=NodeFactory.getInstance().createNode(""ScenarioFour.composite"",TestCorbaHost.class.getClassLoader()).start();
",4,5,8,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
940,"private static final String toolTipJavadoc = ""<img src=\"""" + DependencyNode.class.getClassLoader().getResource(IconResources.JAVADOC_BADGE_ICON) + ""\"">&nbsp;""","private static final String toolTipJavadoc=""<img src=\"""" + DependencyNode.class.getClassLoader().getResource(IconResources.JAVADOC_BADGE_ICON) + ""\"">&nbsp;""+ NbBundle.getMessage(DependencyNode.class,""ICON_JavadocBadge"");
",4,5,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
QualifiedName(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
941,"System.err.println(""Server Log was loaded by "" + serverLog.getClass().getClassLoader());","System.err.println(""Server Log was loaded by "" + serverLog.getClass().getClassLoader());
",4,4,6,,"QualifiedName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
942,Assert.assertTrue(resourceConfigs.get(0).getProviderClass(getClass().getClassLoader()).equals(ViewConfigTest.MyResourceProvider.class));,"Assert.assertTrue(resourceConfigs.get(0).getProviderClass(getClass().getClassLoader()).equals(ViewConfigTest.MyResourceProvider.class));
",5,26,10,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
QualifiedName(SimpleType-name, TypeLiteral-type, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
943,final Class<?> clazz = testCase.getClass().getClassLoader().loadClass(MOCKITO_CLASS);,"final Class<?> clazz=testCase.getClass().getClassLoader().loadClass(MOCKITO_CLASS);
",5,11,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
944,Method[] methods = DOMUtils.class.getClassLoader().,"Method[] methods=DOMUtils.class.getClassLoader().loadClass(""com.sun.xml.messaging.saaj.soap.SOAPDocumentImpl"").getMethods();
",5,5,5,,"SimpleName(SimpleType-name, ArrayType-elementType, VariableDeclarationStatement-type, ),
Dimension(ArrayType-dimensions, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
945,"ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),","locDep=ann != null ? new LocalDeployment(ctx.config().getDeploymentMode(),ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),IgniteUuid.fromUuid(ctx.localNodeId()),ctx.userVersion(U.gridClassLoader()),String.class.getName()) : null;
",5,9,9,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-elseExpression, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ),
"
946,"GBeanInfo.getGBeanInfo(OpenEjbSystemGBean.class.getName(), new MockBundle(getClass().getClassLoader(), ""test"", 0L));","GBeanInfo.getGBeanInfo(OpenEjbSystemGBean.class.getName(),new MockBundle(getClass().getClassLoader(),""test"",0L));
",5,5,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
947,URL url = (cl.getClassLoader() != null ? cl.getClassLoader() : getClass().getClassLoader()).getResource(name);,"URL url=(cl.getClassLoader() != null ? cl.getClassLoader() : getClass().getClassLoader()).getResource(name);
",5,8,11,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
NullLiteral(InfixExpression-rightOperand, ConditionalExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-thenExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ConditionalExpression-elseExpression, ParenthesizedExpression-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
948,"URL url = this.getClass().getClassLoader().getResource( pluginResourcesBase + ""/"" + resourceName );","URL url=this.getClass().getClassLoader().getResource(pluginResourcesBase + ""/"" + resourceName);
",5,5,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-extendedOperands, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
949,((TestLookup) Lookup.getDefault()).setLookupsImpl(Lookups.metaInfServices(ClassPathProviderImplTest.class.getClassLoader()));,"((TestLookup)Lookup.getDefault()).setLookupsImpl(Lookups.metaInfServices(ClassPathProviderImplTest.class.getClassLoader()));
",5,5,8,,"SimpleName(SimpleType-name, CastExpression-type, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ParenthesizedExpression-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
950,if (web.getClassLoader() != null && !saw.contains(web.getClassLoader())) {,"if (web.getClassLoader() != null && !saw.contains(web.getClassLoader())) {
  final Set<Class<?>> classes=new HashSet<>();
  addTests(findMarkers(web.getClassLoader()),findClassMarkers(web.getClassLoader()),web.getFinder(),classes);
  saw.add(web.getClassLoader());
  for (  final Class<?> c : classes) {
    webTestClasses.put(c,web);
  }
  final Iterator<Class<?>> c=testClasses.iterator();
  while (c.hasNext()) {
    final String cl=c.next().getName();
    for (    final Class<?> wc : classes) {
      if (cl.equals(wc.getName())) {
        c.remove();
        break;
      }
    }
  }
  testClasses.addAll(classes);
}
",5,5,7,,"SimpleName(MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, InfixExpression-rightOperand, IfStatement-expression, ),
"
951,newCryptoService = CryptoServiceFactory.class.getClassLoader().loadClass(clazzName),"newCryptoService=CryptoServiceFactory.class.getClassLoader().loadClass(clazzName).asSubclass(CryptoService.class).getDeclaredConstructor().newInstance();
",6,38,5,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
952,return new File(Configuration.class.getClassLoader().getResource(CONFIG_FILE).getPath());,"return new File(Configuration.class.getClassLoader().getResource(CONFIG_FILE).getPath());
",6,17,6,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
953,"return ( DataSource ) Proxy.newProxyInstance( DataSource.class.getClassLoader(), new Class[]{ DataSource.class }, handler );","return (DataSource)Proxy.newProxyInstance(DataSource.class.getClassLoader(),new Class[]{DataSource.class},handler);
",6,8,9,,"SimpleName(SimpleType-name, CastExpression-type, ReturnStatement-expression, ),
SimpleName(MethodInvocation-expression, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, ArrayType-elementType, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
Dimension(ArrayType-dimensions, ArrayCreation-type, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, ArrayInitializer-expressions, ArrayCreation-initializer, MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, CastExpression-expression, ReturnStatement-expression, ),
"
954,"try (final ClassLoaderObjectInputStream clois = new ClassLoaderObjectInputStream(getClass().getClassLoader(),","try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){
  final Object result=clois.readObject();
  assertEquals(input,result);
}
 ",6,6,6,,"Modifier(VariableDeclarationExpression-modifiers, TryStatement-resources, ),
SimpleName(SimpleType-name, VariableDeclarationExpression-type, TryStatement-resources, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationExpression-fragments, TryStatement-resources, ),
"
955,"TokenIssuer issuer = (TokenIssuer) Loader.loadClass(this.getClass().getClassLoader(),","TokenIssuer issuer=(TokenIssuer)Loader.loadClass(this.getClass().getClassLoader(),issuerClassName).newInstance();
",7,7,8,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, CastExpression-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, CastExpression-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
956,File file = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(JAVA_LOG_SAMPLE_PATH)).getFile());,"File file=new File(Objects.requireNonNull(getClass().getClassLoader().getResource(JAVA_LOG_SAMPLE_PATH)).getFile());
",7,11,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
957,if (authenticator == null || DEFAULT_SESSION.authenticator == null || authenticator.getClass().getClassLoader() != DEFAULT_SESSION.authenticator.getClass().getClassLoader()) {,"if (authenticator == null || DEFAULT_SESSION.authenticator == null || authenticator.getClass().getClassLoader() != DEFAULT_SESSION.authenticator.getClass().getClassLoader()) {
  throw new SecurityException();
}
",7,18,10,,"SimpleName(InfixExpression-leftOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-leftOperand, InfixExpression-leftOperand, IfStatement-expression, ),
QualifiedName(InfixExpression-leftOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
NullLiteral(InfixExpression-rightOperand, InfixExpression-rightOperand, InfixExpression-leftOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, InfixExpression-rightOperand, IfStatement-expression, ),
QualifiedName(MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, InfixExpression-rightOperand, IfStatement-expression, ),
"
958,"return new EjbModule(this.getClass().getClassLoader(), this.getClass().getSimpleName(), ""test"", ejbJar, null);","return new EjbModule(this.getClass().getClassLoader(),this.getClass().getSimpleName(),""test"",ejbJar,null);
",7,8,10,,"SimpleName(SimpleType-name, ClassInstanceCreation-type, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, ReturnStatement-expression, ),
StringLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
SimpleName(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
NullLiteral(ClassInstanceCreation-arguments, ReturnStatement-expression, ),
"
959,assertTrue(other.getClassLoader() instanceof Fake_ClassLoader);,"assertTrue(other.getClassLoader() instanceof Fake_ClassLoader);
",7,7,4,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, InstanceofExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, InstanceofExpression-leftOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, InstanceofExpression-rightOperand, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
960,assert !v2.getClass().getClassLoader().equals(getClass().getClassLoader());,"assert !v2.getClass().getClassLoader().equals(getClass().getClassLoader());
",7,11,6,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, PrefixExpression-operand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, PrefixExpression-operand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, PrefixExpression-operand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, PrefixExpression-operand, AssertStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, PrefixExpression-operand, AssertStatement-expression, ),
"
961,"testComparison(new File(getClass().getClassLoader().getResource(""users.parquet"").getFile()), 1);","testComparison(new File(getClass().getClassLoader().getResource(""users.parquet"").getFile()),1);
",7,7,8,,"SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
NumberLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
"
962,"private static final String toolTip = ""<img src=\"""" + ModuleJarAccessibilityQueryImpl.class.getClassLoader().getResource(BADGE) + ""\"">&nbsp;""","private static final String toolTip=""<img src=\"""" + ModuleJarAccessibilityQueryImpl.class.getClassLoader().getResource(BADGE) + ""\"">&nbsp;""+ Tooltip_manifest();
",7,9,11,,"Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
Modifier(FieldDeclaration-modifiers, ),
SimpleName(SimpleType-name, FieldDeclaration-type, ),
SimpleName(VariableDeclarationFragment-name, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-leftOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-name, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
SimpleName(MethodInvocation-arguments, InfixExpression-rightOperand, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
StringLiteral(InfixExpression-extendedOperands, VariableDeclarationFragment-initializer, FieldDeclaration-fragments, ),
"
963,"Class<?> classMiddle = Class.forName(""org.load2.Load"", true, mMiddle.getClassLoader());","Class<?> classMiddle=Class.forName(""org.load2.Load"",true,mMiddle.getClassLoader());
",7,7,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
BooleanLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
964,"when(httpURLConnection.getInputStream()).thenReturn(TemplatesIteratorTest.class.getClassLoader().getResourceAsStream(""noTemplates.json""));","when(httpURLConnection.getInputStream()).thenReturn(TemplatesIteratorTest.class.getClassLoader().getResourceAsStream(""noTemplates.json""));
",7,7,8,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
965,"ConfigMain.transformTemplateToSchema(getClass().getClassLoader().getResourceAsStream(""TemplateWithProcessGroup.xml"")).toMap();","ConfigMain.transformTemplateToSchema(getClass().getClassLoader().getResourceAsStream(""TemplateWithProcessGroup.xml"")).toMap();
",7,7,7,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
966,"ejbModule.getAltDDs().put(""ejb-jar.xml"", getClass().getClassLoader().getResource(ejbJarFileName));","ejbModule.getAltDDs().put(""ejb-jar.xml"",getClass().getClassLoader().getResource(ejbJarFileName));
",7,7,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
967,Class<?> testClassA = contribA.getClassLoader().loadClass(this.getClass().getName());,"Class<?> testClassA=contribA.getClassLoader().loadClass(this.getClass().getName());
",7,7,9,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
968,"return getClass().getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-h2"";","return getClass().getClassLoader().getResource(""webapp"").getFile() + ""/WEB-INF/conf.hib-h2"";
",8,10,6,,"SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, InfixExpression-leftOperand, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, InfixExpression-leftOperand, ReturnStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, ReturnStatement-expression, ),
"
969,protected SpecificData() { this(SpecificData.class.getClassLoader()); },"this(SpecificData.class.getClassLoader());
",8,8,2,,"SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, ConstructorInvocation-arguments, Block-statements, ),
SimpleName(MethodInvocation-name, ConstructorInvocation-arguments, Block-statements, ),
"
970,"String content = JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(RESOURCE_FOLDER + WELCOME_JSF_JSP_PAGE), ""UTF-8"");","String content=JSFFrameworkProvider.readResource(JSFClientGenerator.class.getClassLoader().getResourceAsStream(RESOURCE_FOLDER + WELCOME_JSF_JSP_PAGE),""UTF-8"");
",9,11,10,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
971,"final String keystore = this.getClass().getClassLoader().getResource(""client_not_revoked.jks"").getFile();","final String keystore=this.getClass().getClassLoader().getResource(""client_not_revoked.jks"").getFile();
",10,742,9,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
972,"content = readResource (this.getClass().getClassLoader().getResourceAsStream(RESOURCE_FOLDER + ""struts-config.xml""), ""UTF-8"");","content=readResource(this.getClass().getClassLoader().getResourceAsStream(RESOURCE_FOLDER + ""struts-config.xml""),""UTF-8"");
",10,14,9,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
973,"return ResourceBundle.getBundle( ""checkstyle-report"", locale, AbstractCheckstyleReport.class.getClassLoader() );","return ResourceBundle.getBundle(""checkstyle-report"",locale,AbstractCheckstyleReport.class.getClassLoader());
",10,10,6,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
974,"Map<String, Object> yamlAsMap = SchemaLoader.loadYamlAsMap(ConfigSchemaTest.class.getClassLoader().getResourceAsStream(""config-minimal-v2.yml""));","Map<String,Object> yamlAsMap=SchemaLoader.loadYamlAsMap(ConfigSchemaTest.class.getClassLoader().getResourceAsStream(""config-minimal-v2.yml""));
",10,11,10,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(SimpleType-name, ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
975,EasyMock.expect(bw.getClassLoader()).andReturn(getClass().getClassLoader()).anyTimes();,"EasyMock.expect(bw.getClassLoader()).andReturn(getClass().getClassLoader()).anyTimes();
",11,13,8,,"SimpleName(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
"
976,"InvocationHandler handler = client.getProxy(server.getConnectAddress(), ""service-id"", TestServiceImpl.class.getClassLoader());","InvocationHandler handler=client.getProxy(server.getConnectAddress(),""service-id"",TestServiceImpl.class.getClassLoader());
",11,11,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
977,"Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());","Class<?> clazz=compiler.compile(getSimpleCode(),AdaptiveCompiler.class.getClassLoader());
",11,11,8,,"SimpleName(SimpleType-name, ParameterizedType-type, VariableDeclarationStatement-type, ),
WildcardType(ParameterizedType-typeArguments, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
978,"preview = Utils.loadPreviewText(FmtBlankLines.class.getClassLoader().getResourceAsStream(""org/netbeans/modules/php/editor/indent/ui/Spaces.php""));","preview=Utils.loadPreviewText(FmtBlankLines.class.getClassLoader().getResourceAsStream(""org/netbeans/modules/php/editor/indent/ui/Spaces.php""));
",13,13,7,,"SimpleName(Assignment-leftHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-expression, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-arguments, MethodInvocation-arguments, Assignment-rightHandSide, ExpressionStatement-expression, ),
"
979,"return ResourceBundle.getBundle( ""surefire-report"", locale, this.getClass().getClassLoader() );","return ResourceBundle.getBundle(""surefire-report"",locale,this.getClass().getClassLoader());
",14,17,7,,"SimpleName(MethodInvocation-expression, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, ReturnStatement-expression, ),
StringLiteral(MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-arguments, ReturnStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ReturnStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ReturnStatement-expression, ),
"
980,"final AppModule appModule = config.loadApplication(this.getClass().getClassLoader(), ""fooApp"", Arrays.asList(module));","final AppModule appModule=config.loadApplication(this.getClass().getClassLoader(),""fooApp"",Arrays.asList(module));
",15,18,12,,"Modifier(VariableDeclarationStatement-modifiers, ),
SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-expression, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
981,"keyStore.load(this.getClass().getClassLoader().getResourceAsStream(keystore), ""passwd"".toCharArray());","keyStore.load(this.getClass().getClassLoader().getResourceAsStream(keystore),""passwd"".toCharArray());
",19,21,9,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
ThisExpression(MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-arguments, MethodInvocation-arguments, ExpressionStatement-expression, ),
StringLiteral(MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
982,"File configs = new File(getClass().getClassLoader().getResource(BACKUP_ROOT + ""config/skip/configs.xml"").toURI());","File configs=new File(getClass().getClassLoader().getResource(BACKUP_ROOT + ""config/skip/configs.xml"").toURI());
",21,21,9,,"SimpleName(SimpleType-name, VariableDeclarationStatement-type, ),
SimpleName(VariableDeclarationFragment-name, VariableDeclarationStatement-fragments, ),
SimpleName(SimpleType-name, ClassInstanceCreation-type, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(InfixExpression-leftOperand, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
StringLiteral(InfixExpression-rightOperand, MethodInvocation-arguments, MethodInvocation-expression, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
SimpleName(MethodInvocation-name, ClassInstanceCreation-arguments, VariableDeclarationFragment-initializer, VariableDeclarationStatement-fragments, ),
"
983,"Class.forName(EditList.class.getName(), true, ApiAccessor.class.getClassLoader());","Class.forName(EditList.class.getName(),true,ApiAccessor.class.getClassLoader());
",36,36,7,,"SimpleName(MethodInvocation-expression, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
BooleanLiteral(MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(SimpleType-name, TypeLiteral-type, MethodInvocation-expression, MethodInvocation-arguments, ExpressionStatement-expression, ),
SimpleName(MethodInvocation-name, MethodInvocation-arguments, ExpressionStatement-expression, ),
"
