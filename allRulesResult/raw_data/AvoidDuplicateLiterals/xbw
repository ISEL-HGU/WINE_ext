48000,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DateMetaInputModule.java,46,,"        this.inputConf = config.getChild(""input-module"");"
48001,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,49,,"    private String defaultSalt = ""salt"";"
48002,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,50,,"    private String defaultEncode = ""false"";"
48003,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,80,,"        this.inputConf = config.getChild(""input-module"");"
48004,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,81,,"        this.defaultInput = this.inputConf.getAttribute(""name"", this.defaultInput);"
48005,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,83,,"        this.defaultAlgorithm = this.inputConf.getAttribute(""algorithm"",this.defaultAlgorithm);"
48006,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,84,,"        this.defaultProvider = this.inputConf.getAttribute(""provider"",this.defaultProvider);"
48007,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,86,,"        this.defaultEncode = this.inputConf.getAttribute(""encode"",""false"");"
48008,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,156,,"                    getLogger().warn(""A problem occurred acquiring digest algorithm '"" + algorithm "
48009,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,157,,"                                     + (provider==null?"""":""' from '""+provider) +""': "" + nsae.getMessage());"
48010,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/DigestMetaModule.java,157,,"                                     + (provider==null?"""":""' from '""+provider) +""': "" + nsae.getMessage());"
48011,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/HeaderAttributeModule.java,48,,"        String pname = (String) this.settings.get(""parameter"",name);"
48012,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/MapMetaModule.java,46,,"        this.inputConf = config.getChild(""input-module"");"
48013,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/MapMetaModule.java,48,,"        this.objectName = this.inputConf.getAttribute(""object"",this.objectName);"
48014,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/MapMetaModule.java,49,,"        this.parameter = this.inputConf.getAttribute(""parameter"",this.parameter);"
48015,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/RandomNumberModule.java,49,,"        long max = Long.parseLong((String)this.settings.get(""max"", String.valueOf(Long.MAX_VALUE)));"
48016,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/RequestAttributeModule.java,47,,"        String pname = (String) this.settings.get(""parameter"", name);"
48017,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/RequestParameterModule.java,49,,"        String pname = (String) this.settings.get(""parameter"", name);"
48018,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SelectMetaInputModule.java,81,,"            String name = expr[i].getAttribute(""name"");"
48019,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SessionAttributeModule.java,50,,"        String pname = (String) this.settings.get(""parameter"", name);"
48020,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,114,,"        this.inputConf = config.getChild(""input-module"");"
48021,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,115,,"        this.defaultInput = this.inputConf.getAttribute(""name"", this.defaultInput);"
48022,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,116,,"        this.prefix = config.getChild(""prefix"").getValue(null);"
48023,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,117,,"        this.suffix = config.getChild(""suffix"").getValue(null);"
48024,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,118,,"        this.rmPrefix = config.getChild(""rm-prefix"").getValue(null);"
48025,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/SimpleMappingMetaModule.java,119,,"        this.rmSuffix = config.getChild(""rm-suffix"").getValue(null);"
48026,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XMLMetaModule.java,96,,"    protected String rootName = ""root"";"
48027,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XMLMetaModule.java,119,,"        this.ignore = this.inputConf.getAttribute(""ignore"",this.ignore);"
48028,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XMLMetaModule.java,120,,"        this.use = this.inputConf.getAttribute(""use"",this.use);"
48029,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XMLMetaModule.java,121,,"        this.strip = this.inputConf.getAttribute(""strip"",this.strip);"
48030,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XPathXMLFileModule.java,315,,"                        throw new ConfigurationException(""Unable to resolve "" + cacheParm, pe);"
48031,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/input/XPathXMLFileModule.java,404,,"                            getLogger().debug(""for "" + name + "" using cached result "" + result);"
48032,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/output/RequestAttributeOutputModule.java,61,,"                getLogger().debug(""Setting transient ['"" + name + ""'] to ['"" + value + ""']"");"
48033,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/components/modules/output/SessionAttributeOutputModule.java,62,,"                getLogger().debug(""setting transient ['""+name+""'] to ['""+value+""']"");"
48034,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,295,,"        super.contentHandler.startElement(NAMESPACE, ""statusinfo"", ""statusinfo"", atts);"
48035,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,375,,"        ai.addAttribute(NAMESPACE, ""id"", ""id"", ""CDATA"", wc.getId());"
48036,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,381,,"        super.contentHandler.startElement(NAMESPACE, ""cont"", ""cont"", ai);"
48037,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,428,,"        addValue(""name"", SystemUtils.OS_NAME);"
48038,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,447,,"                super.contentHandler.startElement(NAMESPACE, ""value"", ""value"", atts);"
48039,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,460,,"                        super.contentHandler.startElement(NAMESPACE, ""line"", ""line"", atts);"
48040,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-components/src/main/java/org/apache/cocoon/generation/StatusGenerator.java,614,,"        super.contentHandler.startElement(NAMESPACE, ""group"", ""group"", ai);"
48041,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,420,,"                getLogger().debug(""String parameter "" + name + "" is null"");"
48042,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,428,,"            String eq = constraints.getAttribute(""equals-to"", """");"
48043,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,431,,"            String eqp = constraints.getAttribute(""equals-to-param"", """");"
48044,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,449,,"                    getLogger().debug(""String parameter "" + name + "" should be equal to "" + eq);"
48045,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,452,,"                        getLogger().debug(""and it is not"");"
48046,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,578,,"                getLogger().debug(""Long parameter "" + name + "" is null"");"
48047,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,589,,"            Long min = getAttributeAsLong(conf, ""min"", null);"
48048,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,592,,"            Long max = getAttributeAsLong(conf, ""max"", null);"
48049,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/acting/AbstractValidatorAction.java,709,,"                    getLogger().debug(""Double parameter "" + name + "" should be equal to "" + eq);"
48050,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/components/notification/Notifier.java,82,,"          .append(StringEscapeUtils.escapeXml(n.getMessage())).append(""</p>"");"
48051,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/components/treeprocessor/sitemap/SitemapLanguage.java,532,,"                    String msg = ""Invalid pattern '"" + value + ""' at "" + child.getLocation();"
48052,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/components/treeprocessor/variables/PreparedVariableResolver.java,140,,"        while (variable.startsWith(""../"", pos)) {"
48053,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/components/treeprocessor/variables/PreparedVariableResolver.java,155,,"                                       ""' in expression '"" + this.originalExpr + ""'"", e);"
48054,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/BridgeElementParser.java,142,,"        final RootBeanDefinition beanDef = createBeanDefinition(AvalonBeanPostProcessor.class, ""init"", true);"
48055,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/ComponentContext.java,71,,"                throw new ContextException(""Unable to locate "" + key + "" (No environment available)"");"
48056,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/ConfigurationReader.java,379,,"                                                     ""' at "" + componentConfig.getLocation());"
48057,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/ConfigurationReader.java,395,,"                        throw new ConfigurationException(""Duplicate component definition for role "" + role + "" at "" + componentConfig.getLocation());"
48058,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/ConfigurationReader.java,403,,"                } else if (!className.endsWith(""Selector"")) {"
48059,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/SitemapHelper.java,79,,"                addAttribute(buffer, ""dir"", dir);"
48060,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/SitemapHelper.java,80,,"                buffer.append(""/>\n"");"
48061,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/main/java/org/apache/cocoon/core/container/spring/avalon/SitemapHelper.java,152,,"        return config.getChild(""components"").getAttributeAsBoolean(""use-default-includes"", true);"
48062,./TargetProjects/cocoon/core/cocoon-sitemap/cocoon-sitemap-impl/src/test/java/org/apache/cocoon/environment/FOMTestCase.java,33,,"        parameters.setParameter(""test"", ""foo"");"
48063,./TargetProjects/cocoon/core/cocoon-thread/cocoon-thread-impl/src/main/java/org/apache/cocoon/thread/impl/DefaultThreadPool.java,339,,"	    msg.append(""\"",\"""").append(POLICY_DISCARD);"
48064,./TargetProjects/cocoon/core/cocoon-thread/cocoon-thread-impl/src/test/java/org/apache/cocoon/thread/impl/DefaultThreadPoolTestCase.java,39,,"        pool.setName(""mypool"");"
48065,./TargetProjects/cocoon/core/cocoon-thread/cocoon-thread-impl/src/test/java/org/apache/cocoon/thread/impl/DefaultThreadPoolTestCase.java,53,,"        pool.setBlockPolicy(""ABORT"");"
48066,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/BufferedOutputStreamTestCase.java,36,,"        assertEquals(""Count of buffered and flushed bytes is wrong"", 0, bufferedOutputStream.getCount());"
48067,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/BufferedOutputStreamTestCase.java,37,,"        assertEquals(""Streamed bytes is not empty"", 0, byteArrayOutputStream.size());"
48068,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/BufferedOutputStreamTestCase.java,62,,"        assertEquals(""Count of streamed bytes is wrong"", bytes.length, byteArrayOutputStream.size());"
48069,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/BufferedOutputStreamTestCase.java,63,,"        assertTrue(""Streamed bytes are wrong"", Arrays.equals(bytes, streamedBytes));"
48070,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/WildcardMatcherHelperTestCase.java,34,,"        Map result = WildcardMatcherHelper.match(""test"", ""test"");"
48071,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/WildcardMatcherHelperTestCase.java,42,,"        Map result = WildcardMatcherHelper.match(""end"", ""enp"");"
48072,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/WildcardMatcherHelperTestCase.java,217,,"        assertEquals(""baz"", result.get(""2""));"
48073,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/DeprecationTestCase.java,69,,"            Deprecation.logger.info(""testing deprecation logs"");"
48074,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/MIMEUtilsTestCase.java,63,,"        assertEquals(E2M, ""text/plain"", MIMEUtils.getMIMEType("".txt""));"
48075,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/MIMEUtilsTestCase.java,63,,"        assertEquals(E2M, ""text/plain"", MIMEUtils.getMIMEType("".txt""));"
48076,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,67,,"                new String[]{""/foo.bar"", """"},"
48077,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,69,,"                new String[]{""/foo/bar"", ""/foo""}"
48078,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,77,,"            String message = ""Test "" + ""'"" + test + ""'"";"
48079,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,91,,"                new String[]{""/foo.bar"", "".bar""},"
48080,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,95,,"                new String[]{""foo.bar"", "".bar""},"
48081,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,121,,"            new String[]{""/base/path"",  ""foo.bar"",  ""/base/path/foo.bar""},"
48082,./TargetProjects/cocoon/core/cocoon-util/src/test/java/org/apache/cocoon/util/test/NetUtilsTestCase.java,217,,"                new String[]{""bar"", ""bar""},"
48083,./TargetProjects/cocoon/core/cocoon-webapp/src/test/java/org/apache/cocoon/it/servletservice/ServletProtocol.java,28,,"        assertXPath(""/test"", ""some-text"");"
48084,./TargetProjects/cocoon/core/cocoon-webapp/src/test/java/org/apache/cocoon/it/sitemap/ExpressionLanguageTest.java,33,,"        assertEquals(""text/xml"", this.response.getContentType());"
48085,./TargetProjects/cocoon/core/cocoon-webapp/src/test/java/org/apache/cocoon/it/sitemap/ExpressionLanguageTest.java,34,,"        assertXPath(""/simple"", ""simple-text"");"
48086,./TargetProjects/cocoon/core/cocoon-webapp/src/test/java/org/apache/cocoon/it/sitemap/ExpressionLanguageTest.java,34,,"        assertXPath(""/simple"", ""simple-text"");"
48087,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,38,,"        ns.addDeclaration(""ns1"", ""http://ns1"");"
48088,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,38,,"        ns.addDeclaration(""ns1"", ""http://ns1"");"
48089,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,39,,"        ns.addDeclaration(""ns2"", ""http://ns2"");"
48090,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,39,,"        ns.addDeclaration(""ns2"", ""http://ns2"");"
48091,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,51,,"            ns.addDeclaration(""ns3"", ""http://ns3"");"
48092,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,51,,"            ns.addDeclaration(""ns3"", ""http://ns3"");"
48093,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,161,,"        ns.addDeclaration(""fi"", ""http://apache.org/cocoon/forms/1.0#instance"");"
48094,./TargetProjects/cocoon/core/cocoon-xml/cocoon-xml-util/src/test/java/org/apache/cocoon/xml/util/NamespacesTableTestCase.java,162,,"        ns.addDeclaration(""jx"", ""http://apache.org/cocoon/templates/jx/1.0"");"
48095,./TargetProjects/cocoon/jail/cocoon3/src/main/java/org/apache/cocoon/sample/generation/TimestampGenerator.java,40,,"            consumer.startElement("""", ""timestamp"", ""timestamp"", new ImmutableAttributesImpl());"
48096,./TargetProjects/cocoon/tools/cocoon-rcl/cocoon-rcl-plugin-demo/src/main/java/demo/MyGenerator.java,31,,"        contentHandler.startElement("""",""html"",""html"", new AttributesImpl());"
48097,./TargetProjects/cocoon/tools/cocoon-rcl/cocoon-rcl-plugin-demo/src/main/java/demo/MyGenerator.java,32,,"        contentHandler.startElement("""",""body"",""body"", new AttributesImpl());"
48098,./TargetProjects/commons-bcel/src/examples/HelloWorldBuilder.java,82,,"        final ObjectType p_stream = new ObjectType(""java.io.PrintStream"");"
48099,./TargetProjects/commons-bcel/src/examples/HelloWorldBuilder.java,85,,"        il.append(factory.createNew(""java.io.BufferedReader""));"
48100,./TargetProjects/commons-bcel/src/examples/HelloWorldBuilder.java,89,,"        il.append(factory.createFieldAccess(""java.lang.System"", ""in"", i_stream, Const.GETSTATIC));"
48101,./TargetProjects/commons-bcel/src/examples/JasminVisitor.java,186,,"                        put(target, ""Label"" + label_counter++ + "":"");"
48102,./TargetProjects/commons-bcel/src/examples/Mini/ASTProgram.java,256,,"    il.append(new NEW(cp.addClass(""java.lang.StringBuffer"")));"
48103,./TargetProjects/commons-bcel/src/examples/Mini/ASTProgram.java,260,,"                                                ""<init>"","
48104,./TargetProjects/commons-bcel/src/examples/Mini/MiniParser.java,400,,"    throw new Error(""Missing return statement in function"");"
48105,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/classfile/Module.java,197,,"        buf.append(""  requires("").append(requiresTable.length).append(""):\n"");"
48106,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/classfile/Module.java,199,,"            buf.append(""    "").append(module.toString(cp)).append(""\n"");"
48107,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/classfile/Utility.java,322,,"                buf.append(""\t\t"").append("
48108,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/classfile/Utility.java,584,,"                throw new ClassFormatException(""Invalid method signature: "" + signature);"
48109,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/classfile/Utility.java,986,,"                            throw new ClassFormatException(""Invalid signature: "" + signature);"
48110,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionFactory.java,217,,"            new MethodObject(""java.lang.StringBuffer"", ""append"", Type.STRINGBUFFER, new Type[] {"
48111,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionFactory.java,217,,"            new MethodObject(""java.lang.StringBuffer"", ""append"", Type.STRINGBUFFER, new Type[] {"
48112,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionFactory.java,368,,"                throw new IllegalArgumentException(""Invalid operand "" + op);"
48113,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionFactory.java,457,,"                throw new IllegalArgumentException(""Invalid type "" + type);"
48114,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionList.java,264,,"            throw new ClassGenException(""Instruction "" + i + "" is not contained in this list."");"
48115,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionList.java,264,,"            throw new ClassGenException(""Instruction "" + i + "" is not contained in this list."");"
48116,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/InstructionList.java,623,,"            throw new ClassGenException(""Invalid null handle: From "" + start + "" to "" + end);"
48117,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/generic/Type.java,230,,"            throw new ClassFormatException(""Invalid method signature: "" + signature, e);"
48118,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/BCELFactory.java,127,,"                    + ""));"");"
48119,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/BCELFactory.java,295,,"                target = ""ih_"" + t_pos;"
48120,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/BCELifier.java,116,,"        _out.println(""  }"");"
48121,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/CodeHTML.java,123,,"                buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append("
48122,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/CodeHTML.java,124,,"                        element).append(""\"">"").append(element).append(""</A></TD>"");"
48123,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/CodeHTML.java,177,,"                        .append(""\"">"").append(index).append(""</A>"");"
48124,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/ConstantHTML.java,139,,"                    ref = ""<A HREF=\"""" + className + ""_code.html#method"""
48125,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/ConstantHTML.java,141,,"                            + html_method_name + ""</A>"";"
48126,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/ConstantHTML.java,146,,"                constantRef[index] = ret_type + ""&nbsp;<A HREF=\"""" + className + ""_cp.html#cp"""
48127,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/ConstantHTML.java,150,,"                file.println(""<P><TT>"" + ret_type + ""&nbsp;"" + ref + arg_types"
48128,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/util/ConstantHTML.java,151,,"                        + ""&nbsp;</TT>\n<UL>"" + ""<LI><A HREF=\""#cp"" + class_index"
48129,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,174,,"        throw new AssertionViolatedException(""Missing class: "" + e, e);"
48130,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,259,,"                            throw new ClassConstraintException(""Method '"" + nameAndSig + ""' in class '"" + hashmap.get(nameAndSig) +"
48131,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,365,,"                throw new ClassConstraintException(""Invalid index '""+index+""' used by '""+tostring(referrer)+""'."");"
48132,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,392,,"                    addMessage(""Attribute '"" + tostring(att) + ""' as an attribute of the ClassFile structure '"" +"
48133,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,440,,"                throw new ClassConstraintException(""Wrong constant tag in '""+tostring(obj)+""'."");"
48134,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,538,,"                    throw new ClassConstraintException(""Field '""+tostring(obj)+"
48135,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,585,,"                throw new ClassConstraintException(""Illegal descriptor (==signature) '""+sig+""' used by '""+tostring(obj)+""'."", cfe);"
48136,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,699,,"                            ""Abstract method '""+tostring(obj)+""' must not have the ACC_FINAL modifier set."");"
48137,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,741,,"                            throw new ClassConstraintException(""Interface method '"" + tostring(obj) + ""' must have"" +"
48138,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,969,,"                addMessage(""Code attribute '""+tostring(obj)+""' is not declared in a method_info structure but in '""+"
48139,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,978,,"                    ""Code array of Code attribute '""+tostring(obj)+""' (method '""+m+""') must not be empty."");"
48140,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java,1096,,"                                ""' used by LocalVariable '""+tostring(localvariable)+""' referenced by '""+tostring(lvt)+""'."", cfe);"
48141,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,222,,"        throw new AssertionViolatedException(""Missing class: "" + e, e);"
48142,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,263,,"                throw new ClassConstraintException(""Code attribute '"" + code + ""' has a LineNumberTable attribute '"" +"
48143,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,310,,"                throw new ClassConstraintException(""Code attribute '""+code+""' has an exception_table entry '""+element+"
48144,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,634,,"                    constraintViolated(o, ""Referenced field '""+field_name+""' does not exist in class '""+jc.getClassName()+""'."");"
48145,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,745,,"                constraintViolated(o, ""Expecting a CONSTANT_Class operand, but found a '""+c+""'."");"
48146,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,844,,"                constraintViolated(o, ""Index '""+idx+""' must be non-negative."");"
48147,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,844,,"                constraintViolated(o, ""Index '""+idx+""' must be non-negative."");"
48148,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,849,,"                    constraintViolated(o, ""Index '""+idx+""' must not be greater than max_locals-1 '""+maxminus1+""'."");"
48149,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,965,,"                    "" [Constraint by JustIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not happen anyway.]"");"
48150,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,970,,"                    constraintViolated(o, ""Index '""+idx+""' must not be greater than max_locals-2 '""+maxminus2+""'."");"
48151,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,1143,,"                constraintViolated(o, ""Referenced method '""+o.getMethodName(constantPoolGen)+""' with expected signature '""+o.getSignature(constantPoolGen)+"
48152,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,1143,,"                constraintViolated(o, ""Referenced method '""+o.getMethodName(constantPoolGen)+""' with expected signature '""+o.getSignature(constantPoolGen)+"
48153,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java,1144,,"                    ""' not found in class '""+jc.getClassName()+""'."");"
48154,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,236,,"                constraintViolated((Instruction) o, ""Class '""+o.getLoadClassType(cpg).getClassName()+"
48155,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,237,,"                    ""' is referenced, but cannot be loaded and resolved: '""+vr+""'."");"
48156,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,591,,"        throw new AssertionViolatedException(""Missing class: "" + e, e);"
48157,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,704,,"            constraintViolated(o, ""The value at the stack top is not of type 'double', but of type '""+stack().peek()+""'."");"
48158,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,737,,"            constraintViolated(o, ""The value at the stack next-to-top is not of type 'double', but of type '""+stack().peek(1)+""'."");"
48159,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,940,,"                ""Stack top type must be of size 1, but is '""+stack().peek()+""' of size '""+stack().peek().getSize()+""'."");"
48160,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1024,,"            constraintViolated(o, ""The value at the stack top is not of type 'float', but of type '""+stack().peek()+""'."");"
48161,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1057,,"            constraintViolated(o, ""The value at the stack next-to-top is not of type 'float', but of type '""+stack().peek(1)+""'."");"
48162,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1357,,"            constraintViolated(o, ""The value at the stack top is not of type 'int', but of type '""+stack().peek()+""'."");"
48163,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1420,,"            constraintViolated(o, ""The value at the stack next-to-top is not of type 'int', but of type '""+stack().peek(1)+""'."");"
48164,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1503,,"            constraintViolated(o, ""The value at the stack top is not of a ReferenceType, but of type '""+stack().peek()+""'."");"
48165,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1835,,"                    constraintViolated(o, ""Expecting a '""+fromDesc+""' but found a '""+fromStack+""' on the stack."");"
48166,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1835,,"                    constraintViolated(o, ""Expecting a '""+fromDesc+""' but found a '""+fromStack+""' on the stack."");"
48167,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1835,,"                    constraintViolated(o, ""Expecting a '""+fromDesc+""' but found a '""+fromStack+""' on the stack."");"
48168,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,1964,,"            constraintViolated(o, ""The 'objref' item '""+objref+""' does not implement '""+theClass+""' as expected."");"
48169,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,2238,,"            constraintViolated(o, ""The value at the stack top is not of type 'long', but of type '""+stack().peek()+""'."");"
48170,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,2271,,"            constraintViolated(o, ""The value at the stack next-to-top is not of type 'long', but of type '""+stack().peek(1)+""'."");"
48171,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java,2722,,"                constraintViolated(o, ""The stack top type '""+value+""' is not of a reference type as expected."");"
48172,./TargetProjects/commons-bcel/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java,196,,"            @SuppressWarnings(""unchecked"") // ec is of type ArrayList<InstructionContext>"
48173,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/ElementValueGenTestCase.java,53,,"        final ClassGen cg = createClassGen(""HelloWorld"");"
48174,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/ElementValueGenTestCase.java,59,,"        assertEquals(cp.lookupInteger(555), evg.getIndex(), ""Should have the same index in the constantpool"");"
48175,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/classfile/UtilityTestCase.java,31,,"                ""generic signature"");"
48176,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/classfile/UtilityTestCase.java,52,,"                ""type parameters signature"");"
48177,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/FieldAnnotationsTestCase.java,45,,"        checkAnnotatedField(clazz, ""i"", ""L""+PACKAGE_BASE_SIG+""/data/SimpleAnnotation;"", ""id"", ""1"");"
48178,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,82,,"        final ClassGen cg = createClassGen(""HelloWorld"");"
48179,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,91,,"        dumpClass(cg, ""HelloWorld.class"");"
48180,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,197,,"        assertEquals(1, annotations.length, ""Wrong number of annotations"");"
48181,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,251,,"            if(methodName.equals(""<init>""))"
48182,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,354,,"        dumpClass(cgen, ""SimpleAnnotatedClass.class"");"
48183,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,405,,"        final ObjectType p_stream = new ObjectType(""java.io.PrintStream"");"
48184,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,410,,"        il.append(factory.createNew(""java.io.BufferedReader""));"
48185,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,412,,"        il.append(factory.createNew(""java.io.InputStreamReader""));"
48186,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,414,,"        il.append(factory.createFieldAccess(""java.lang.System"", ""in"", i_stream,"
48187,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/GeneratingAnnotatedClassesTestCase.java,467,,"                .append(factory.createInvoke(""java.lang.StringBuffer"","
48188,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java,92,,"        assertNotNull(start, ""scope start"");"
48189,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/generic/MethodGenTestCase.java,93,,"        assertNotNull(end, ""scope end"");"
48190,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/util/LruCacheClassPathRepositoryTestCase.java,39,,"            final JavaClass class1 = repository.loadClass(""java.lang.String"");"
48191,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/util/LruCacheClassPathRepositoryTestCase.java,41,,"            final JavaClass class2 = repository.loadClass(""java.lang.Long"");"
48192,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/util/ModularRuntimeImageTestCase.java,46,,"    @MethodSource(""org.apache.bcel.generic.JdkGenericDumpTestCase#findJavaHomes"")"
48193,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/verifier/tests/TestArrayAccess02Creator.java,43,,"    _cg = new ClassGen(TEST_PACKAGE+"".TestArrayAccess02"", ""java.lang.Object"", ""TestArrayAccess02.java"","
48194,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/verifier/tests/TestArrayAccess03Creator.java,43,,"    _cg = new ClassGen(TEST_PACKAGE+"".TestArrayAccess03"", ""java.lang.Object"", ""TestArrayAccess03.java"","
48195,./TargetProjects/commons-bcel/src/test/java/org/apache/bcel/verifier/tests/TestReturn01Creator.java,41,,"    _cg = new ClassGen(TEST_PACKAGE+"".TestReturn01"", ""java.lang.Object"", ""TestReturn01.java"","
48196,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/BasicDynaBean.java,122,,"                    (""No mapped value for '"" + name + ""("" + key + "")'"");"
48197,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/BasicDynaBean.java,128,,"                (""Non-mapped property for '"" + name + ""("" + key + "")'"");"
48198,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/BeanUtilsBean.java,414,,"                    (e, ""Cannot set "" + propName);"
48199,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/BeanUtilsBean.java,929,,"                        log.debug(""Skipping read-only property"");"
48200,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/ConvertUtilsBean.java,265,,"            log.trace(""  Using converter "" + converter);"
48201,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaBean.java,235,,"            throw new IllegalArgumentException(""No property name specified"");"
48202,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaBean.java,360,,"                (""Non-indexed property for '"" + name + ""["" + index + ""]' """
48203,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaBean.java,407,,"                (""Non-mapped property for '"" + name + ""("" + key + "")' """
48204,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaBean.java,726,,"                                   type.getName() + ""' for '"" + name + ""' "" + ex);"
48205,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaClass.java,231,,"            throw new IllegalArgumentException(""Property name is missing."");"
48206,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/LazyDynaMap.java,223,,"            throw new IllegalArgumentException(""Property name is missing."");"
48207,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/MethodUtils.java,265,,"            throw new NoSuchMethodException(""No such accessible method: "" +"
48208,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,282,,"                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);"
48209,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,352,,"            throw new IllegalArgumentException(""No bean specified"");"
48210,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,408,,"            throw new IllegalArgumentException(""No name specified for bean class '"" +"
48211,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,417,,"            throw new IllegalArgumentException(""Invalid indexed property '"" +"
48212,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,418,,"                    name + ""' on bean class '"" + bean.getClass() + ""' "" +"
48213,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,482,,"                throw new NoSuchMethodException(""Unknown property '"" +"
48214,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,520,,"            throw new NoSuchMethodException(""Property '"" + name + ""' has no "" +"
48215,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,582,,"                    (""Invalid mapped property '"" + name +"
48216,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,764,,"                        (""Null property value for '"" + name +"
48217,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java,1579,,"                            value == null ? ""<null>"""
48218,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/WrapDynaBean.java,134,,"                              ""' nested exception - "" + cause);"
48219,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/WrapDynaBean.java,138,,"                              ""', exception - "" + t);"
48220,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/converters/DateTimeConverter.java,477,,"            log().warn(""    "" + msg);"
48221,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/converters/NumberConverter.java,312,,"                throw new ConversionException(toString(sourceType) + "" value '"" + value"
48222,./TargetProjects/commons-beanutils/src/main/java/org/apache/commons/beanutils2/converters/NumberConverter.java,313,,"                        + ""' is too large for "" + toString(targetType));"
48223,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,55,,"        ""booleanProperty"","
48224,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,56,,"        ""booleanSecond"","
48225,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,57,,"        ""doubleProperty"","
48226,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,58,,"        ""floatProperty"","
48227,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,59,,"        ""intArray"","
48228,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,60,,"        ""intIndexed"","
48229,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,61,,"        ""intProperty"","
48230,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,62,,"        ""listIndexed"","
48231,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,63,,"        ""longProperty"","
48232,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,64,,"        ""mappedProperty"","
48233,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,67,,"        ""shortProperty"","
48234,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,68,,"        ""stringArray"","
48235,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,69,,"        ""stringIndexed"","
48236,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,70,,"        ""stringProperty"","
48237,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,117,,"        mappedProperty.put(""First Key"", ""First Value"");"
48238,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,168,,"            fail(""Threw "" + t + "" instead of returning null"");"
48239,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,315,,"                fail(""intArray "" + i + "" threw "" + t);"
48240,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,433,,"            assertNotNull(""Got a value"", value);"
48241,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,434,,"            assertTrue(""Got correct type"", value instanceof Boolean);"
48242,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,435,,"            assertTrue(""Got correct value"","
48243,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,438,,"            fail(""Exception: "" + e);"
48244,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,566,,"                    !bean.contains(""mappedProperty"", ""Unknown Key""));"
48245,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BasicDynaBeanTestCase.java,793,,"            assertTrue(""Matched new value"","
48246,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanComparatorTestCase.java,88,,"                ""name"");"
48247,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanComparatorTestCase.java,90,,"        assertTrue(""Comparator did not sort properly.  Result:"" + result,"
48248,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanMapTestCase.java,406,,"                cause = (Throwable)PropertyUtils.getProperty(e, ""cause"");"
48249,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPredicateTestCase.java,35,,"        final Predicate<String> p = s -> s.equals(""foo"");"
48250,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPredicateTestCase.java,36,,"        final BeanPredicate<String> predicate = new BeanPredicate<>(""stringProperty"", p);"
48251,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPredicateTestCase.java,38,,"        assertTrue(!predicate.test(new TestBean(""bar"")));"
48252,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,49,,"        new BeanPropertyValueChangeConsumer<>(""floatProperty"", expectedFloatValue).accept(testBean);"
48253,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,59,,"            fail(""Should have thrown an IllegalArgumentException"");"
48254,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,91,,"        new BeanPropertyValueChangeConsumer<>(""doubleProperty"", expectedDoubleValue).accept(testBean);"
48255,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,130,,"            new BeanPropertyValueChangeConsumer<>(""intProperty"", expectedDoubleValue).accept(new TestBean());"
48256,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,205,,"            new BeanPropertyValueChangeConsumer<>(""byteProperty"", ""foo"").accept(new TestBean());"
48257,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueChangeConsumerTestCase.java,297,,"        new BeanPropertyValueChangeConsumer<>(""mappedProperty(fred)"", ""barney"").accept(testBean);"
48258,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueEqualsPredicateTestCase.java,48,,"            new BeanPropertyValueEqualsPredicate<>(""stringProperty"",""foo"");"
48259,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueEqualsPredicateTestCase.java,68,,"            new BeanPropertyValueEqualsPredicate<>(""anotherNested.stringProperty"",""match"");"
48260,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanPropertyValueEqualsPredicateTestCase.java,166,,"        testBean.setMappedProperty(""test-key"", ""match"");"
48261,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanToPropertyValueTransformerTestCase.java,51,,"        final TestBean testBean = new TestBean(""foo"");"
48262,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtils2TestCase.java,74,,"            fail(""Threw "" + t);"
48263,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtils2TestCase.java,90,,"        assertEquals(""java.util.Date[] --> String[] length"", 1, bean.getStringArray().length);"
48264,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtils2TestCase.java,91,,"        assertEquals(""java.util.Date[] --> String[] value "", testStringDate, bean.getStringArray()[0]);"
48265,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsBenchCase.java,178,,"                           "", time="" + (stopMillis - startMillis));"
48266,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,75,,"    { ""booleanProperty"","
48267,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,77,,"      ""byteProperty"","
48268,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,78,,"      ""doubleProperty"","
48269,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,80,,"      ""floatProperty"","
48270,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,81,,"      ""intArray"","
48271,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,83,,"      ""longProperty"","
48272,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,89,,"      ""nullProperty"","
48273,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,91,,"      ""shortProperty"","
48274,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,92,,"      ""stringArray"","
48275,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,94,,"      ""stringProperty"""
48276,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,185,,"                 new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48277,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,185,,"                 new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48278,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,185,,"                 new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48279,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,187,,"        orig.set(""intProperty"", new Integer(333));"
48280,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,191,,"        orig.set(""stringProperty"", ""Custom string"");"
48281,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,233,,"        assertEquals(""intArray length"", 3, intArray.length);"
48282,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,234,,"        assertEquals(""intArray[0]"", 100, intArray[0]);"
48283,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,235,,"        assertEquals(""intArray[1]"", 200, intArray[1]);"
48284,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,236,,"        assertEquals(""intArray[2]"", 300, intArray[2]);"
48285,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,239,,"        assertEquals(""stringArray length"", 2, stringArray.length);"
48286,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,240,,"        assertEquals(""stringArray[0]"", ""New 0"", stringArray[0]);"
48287,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,265,,"            fail(""Threw "" + t.toString());"
48288,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,390,,"                   !map.containsKey(""writeOnlyProperty""));"
48289,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,394,,"                     ""true"","
48290,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,450,,"            fail(""IllegalAccessException"");"
48291,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,452,,"            fail(""InvocationTargetException"");"
48292,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,454,,"            fail(""NoSuchMethodException"");"
48293,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,596,,"            value = BeanUtils.getSimpleProperty(bean, ""dateProperty"");"
48294,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,629,,"            map.put(""stringIndexed[1]"", ""New String 1"");"
48295,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,708,,"                         bean.getMappedProperty(""Second Key""));"
48296,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,735,,"            map.put(""nested.intProperty"", ""543"");"
48297,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,739,,"            map.put(""nested.writeOnlyProperty"", ""New writeOnlyProperty value"");"
48298,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,1305,,"        BeanUtils.copyProperty(bean, ""nested.intArray[1]"", new Integer(1));"
48299,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanUtilsTestCase.java,1406,,"        BeanUtils.copyProperty(bean, ""writeOnlyProperty"", ""New value"");"
48300,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanificationTestCase.java,100,,"        @SuppressWarnings(""unused"")"
48301,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/BeanificationTestCase.java,300,,"        assertEquals(""Signal not set by test thread"", 2, signal.getSignal());"
48302,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConstructorUtilsTestCase.java,73,,"            final Object obj = ConstructorUtils.invokeConstructor(TestBean.class,""TEST"");"
48303,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConvertUtilsTestCase.java,117,,"        value = ConvertUtils.convert(""foo"", Boolean.TYPE);"
48304,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConvertUtilsTestCase.java,208,,"        final String[] stringArray1 = { ""abc"" };"
48305,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConvertUtilsTestCase.java,213,,"        assertEquals(""intArray1"", ""123"","
48306,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConvertUtilsTestCase.java,234,,"        assertEquals(""Boolean->String"", ""true"","
48307,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/ConvertUtilsTestCase.java,407,,"        value = ConvertUtils.convert(""123.456"", Double.TYPE);"
48308,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanMapDecoratorTestCase.java,152,,"        assertFalse(""decoratedMap false"", decoratedMap.containsKey(""xyz""));"
48309,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,54,,"    { ""booleanProperty"","
48310,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,55,,"      ""booleanSecond"","
48311,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,56,,"      ""byteProperty"","
48312,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,57,,"      ""doubleProperty"","
48313,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,58,,"      ""dupProperty"","
48314,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,59,,"      ""floatProperty"","
48315,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,60,,"      ""intArray"","
48316,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,61,,"      ""intIndexed"","
48317,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,62,,"      ""intProperty"","
48318,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,64,,"      ""longProperty"","
48319,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,65,,"      ""mapProperty"","
48320,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,66,,"      ""mappedProperty"","
48321,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,68,,"      ""nested"","
48322,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,69,,"      ""nullProperty"","
48323,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,71,,"      ""shortProperty"","
48324,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,72,,"      ""stringArray"","
48325,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,73,,"      ""stringIndexed"","
48326,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,74,,"      ""stringProperty"""
48327,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,118,,"        listIndexed.add(""String 0"");"
48328,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,120,,"        listIndexed.add(""String 2"");"
48329,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,122,,"        listIndexed.add(""String 4"");"
48330,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,126,,"        mapProperty.put(""First Key"", ""First Value"");"
48331,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,126,,"        mapProperty.put(""First Key"", ""First Value"");"
48332,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,127,,"        mapProperty.put(""Second Key"", ""Second Value"");"
48333,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,127,,"        mapProperty.put(""Second Key"", ""Second Value"");"
48334,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,147,,"        bean.set(""stringProperty"", ""This is a string"");"
48335,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,189,,"        orig.set(""dupProperty"", new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48336,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,189,,"        orig.set(""dupProperty"", new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48337,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,189,,"        orig.set(""dupProperty"", new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48338,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,195,,"        orig.set(""stringProperty"", ""Custom string"");"
48339,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,231,,"        assertNotNull(""dupProperty present"", dupProperty);"
48340,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,232,,"        assertEquals(""dupProperty length"", 3, dupProperty.length);"
48341,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,233,,"        assertEquals(""dupProperty[0]"", ""New 0"", dupProperty[0]);"
48342,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,234,,"        assertEquals(""dupProperty[1]"", ""New 1"", dupProperty[1]);"
48343,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,235,,"        assertEquals(""dupProperty[2]"", ""New 2"", dupProperty[2]);"
48344,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,237,,"        assertNotNull(""intArray present"", intArray);"
48345,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,238,,"        assertEquals(""intArray length"", 3, intArray.length);"
48346,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,239,,"        assertEquals(""intArray[0]"", 100, intArray[0]);"
48347,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,240,,"        assertEquals(""intArray[1]"", 200, intArray[1]);"
48348,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,241,,"        assertEquals(""intArray[2]"", 300, intArray[2]);"
48349,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,244,,"        assertEquals(""stringArray length"", 2, stringArray.length);"
48350,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,245,,"        assertEquals(""stringArray[0]"", ""New 0"", stringArray[0]);"
48351,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,246,,"        assertEquals(""stringArray[1]"", ""New 1"", stringArray[1]);"
48352,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,515,,"                { ""New String 0"", ""New String 1"" };"
48353,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,534,,"            fail(""IllegalAccessException"");"
48354,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,536,,"            fail(""InvocationTargetException"");"
48355,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,562,,"            fail(""NoSuchMethodException"");"
48356,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,772,,"            map.put(""nested.intProperty"", ""543"");"
48357,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaBeanUtilsTestCase.java,1078,,"        BeanUtils.copyProperty(bean, ""nested.intArray[1]"", new Integer(1));"
48358,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,48,,"    { ""booleanProperty"","
48359,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,50,,"      ""doubleProperty"","
48360,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,51,,"      ""floatProperty"","
48361,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,52,,"      ""intArray"","
48362,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,53,,"      ""intIndexed"","
48363,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,54,,"      ""intProperty"","
48364,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,55,,"      ""listIndexed"","
48365,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,56,,"      ""longProperty"","
48366,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,57,,"      ""mappedObjects"","
48367,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,58,,"      ""mappedProperty"","
48368,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,60,,"      ""nested"","
48369,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,63,,"      ""shortProperty"","
48370,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,64,,"      ""stringArray"","
48371,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,65,,"      ""stringIndexed"","
48372,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,66,,"      ""stringProperty"""
48373,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,118,,"        mapProperty.put(""First Key"", ""First Value"");"
48374,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,118,,"        mapProperty.put(""First Key"", ""First Value"");"
48375,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,119,,"        mapProperty.put(""Second Key"", ""Second Value"");"
48376,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,119,,"        mapProperty.put(""Second Key"", ""Second Value"");"
48377,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,143,,"        bean.set(""stringProperty"", ""This is a string"");"
48378,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,188,,"            fail(""Threw "" + t.toString());"
48379,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,273,,"            fail(""Should throw IllegalArgumentException 1"");"
48380,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,277,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 1"");"
48381,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,282,,"            fail(""Should throw IllegalArgumentException 2"");"
48382,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,286,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 2"");"
48383,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,294,,"            fail(""Should throw IllegalArgumentException 3"");"
48384,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,298,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 3"");"
48385,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,302,,"            PropertyUtils.getIndexedProperty(bean, ""[0]"");"
48386,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,303,,"            fail(""Should throw NoSuchMethodException 4"");"
48387,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,307,,"            fail(""Threw "" + t + "" instead of NoSuchMethodException 4"");"
48388,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,312,,"            fail(""Should throw IllegalArgumentException 5"");"
48389,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,316,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 5"");"
48390,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,391,,"                fail(""intArray "" + i + "" threw "" + t);"
48391,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,413,,"                        ""String "" + i, (String) value);"
48392,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,521,,"            fail(""Should have thrown ArrayIndexOutOfBoundsException"");"
48393,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,525,,"            fail(""Threw "" + t + "" instead of ArrayIndexOutOfBoundsException"");"
48394,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,565,,"            fail(""Should have thrown IndexOutOfBoundsException"");"
48395,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,569,,"            fail(""Threw "" + t + "" instead of IndexOutOfBoundsException"");"
48396,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,701,,"        bean.set(""mappedProperty"", ""key.with.a.dot"", ""Special Value"");"
48397,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,702,,"        assertEquals(""Can retrieve directly"","
48398,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,711,,"            fail(""Thew exception: "" + e);"
48399,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,906,,"            assertNotNull(""Got a value"", value);"
48400,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,907,,"            assertTrue(""Got correct type"", value instanceof Boolean);"
48401,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,909,,"            assertTrue(""Got correct value"","
48402,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,913,,"            fail(""IllegalAccessException"");"
48403,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,915,,"            fail(""IllegalArgumentException"");"
48404,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,917,,"            fail(""InvocationTargetException"");"
48405,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,919,,"            fail(""NoSuchMethodException"");"
48406,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1096,,"                    (bean, ""nested.stringProperty"");"
48407,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1122,,"            fail(""Should have thrown NoSuchMethodException"");"
48408,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1245,,"            fail(""Should have thrown IllegalArgumentException"");"
48409,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1566,,"                    ""New Value 2"");"
48410,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1598,,"                    ""New Value 3"");"
48411,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,1742,,"                    ""New String"");"
48412,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,2005,,"            assertTrue(""Matched new value"","
48413,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,2133,,"            final String newValue = oldValue + "" Extra Value"";"
48414,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaPropertyUtilsTestCase.java,2209,,"            final String newValue = ""New String Value"";"
48415,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaResultSetTestCase.java,51,,"      ""stringproperty"", ""timeproperty"","
48416,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaRowSetTestCase.java,54,,"      ""stringproperty"", ""timeproperty"","
48417,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/DynaRowSetTestCase.java,302,,"        assertEquals(""Timestamp Meta Name"",       ""timestampProperty"",             metaData.getColumnName(timestampColIdx));"
48418,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/IndexedPropertyTestCase.java,108,,"        final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, ""stringArray"");"
48419,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/IndexedPropertyTestCase.java,123,,"        final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, ""stringList"");"
48420,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/IndexedPropertyTestCase.java,140,,"        final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, ""arrayList"");"
48421,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/IndexedPropertyTestCase.java,374,,"        beanUtilsBean.setProperty(bean, ""stringArray[1]"", ""modified-1"");"
48422,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,99,,"        assertNull(""Check Property doesn't exist"", dynaClass.getDynaProperty(testProperty));"
48423,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,100,,"        assertNull(""Check Value is null"", bean.get(testProperty));"
48424,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,278,,"        assertNull(""Check Indexed Property doesn't exist"", dynaClass.getDynaProperty(testProperty));"
48425,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,279,,"        assertNull(""Check Indexed Property is null"", bean.get(testProperty));"
48426,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,285,,"        assertEquals(""Check Indexed Property is correct type"", ArrayList.class, bean.get(testProperty).getClass());"
48427,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaBeanTestCase.java,293,,"        assertEquals(""Check Second Array length is correct"", new Integer(index+1),  new Integer(((ArrayList<?>)bean.get(testProperty)).size()));"
48428,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaClassTestCase.java,150,,"        assertTrue(""MutableDynaClass is restricted"", dynaClass.isRestricted());"
48429,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,115,,"        bean.set(""prop1"", ""val"");"
48430,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,184,,"            map.put(""prop""+i, ""val""+i);"
48431,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,285,,"        ((DynaBean)collection.get(0)).set(testProperty, origValue+""_updated_""+0);"
48432,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,440,,"        assertNull(""pre-set check"", bean.get(BASIC_PROP1));"
48433,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,441,,"        bean.set(BASIC_PROP1, ""value1"");"
48434,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,442,,"        assertEquals(""post-set check"", ""value1"", bean.get(BASIC_PROP1));"
48435,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,451,,"        assertEquals(""post-serialize check"", ""value1"", bean.get(BASIC_PROP1));"
48436,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,515,,"        assertEquals(""pre-set check"", ""This is a string"", bean.get(""stringProperty""));"
48437,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaListTestCase.java,573,,"        assertSame(""Wrong element"", elem, beans[0]);"
48438,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,108,,"        assertNull(""Check Property doesn't exist"", dynaMap.getDynaProperty(testProperty));"
48439,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,109,,"        assertNull(""Check Value is null"", dynaMap.get(testProperty));"
48440,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,268,,"        assertNull(""Check Indexed Property doesn't exist"", dynaMap.getDynaProperty(testProperty));"
48441,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,269,,"        assertNull(""Check Indexed Property is null"", dynaMap.get(testProperty));"
48442,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,275,,"        assertEquals(""Check Indexed Property is correct type"", ArrayList.class, dynaMap.get(testProperty).getClass());"
48443,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,283,,"        assertEquals(""Check Second Array length is correct"", new Integer(index+1),  new Integer(((ArrayList<?>)dynaMap.get(testProperty)).size()));"
48444,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,330,,"        assertEquals(""Check Indexed Property exists"", primitiveArray.getClass(), dynaMap.getDynaProperty(testProperty).getType());"
48445,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/LazyDynaMapTestCase.java,487,,"        orig.set(""indexProp"", 0, ""indexVal0"");"
48446,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,76,,"        final String property = ""mapproperty"";"
48447,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,81,,"            assertNotNull(""Getter is missing"", desc.getMappedReadMethod());"
48448,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,82,,"            assertNotNull(""Setter is missing"", desc.getMappedWriteMethod());"
48449,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,84,,"            fail(""Property '"" + property + ""' Not Found in "" + clazz.getName() + "": "" + ex);"
48450,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,84,,"            fail(""Property '"" + property + ""' Not Found in "" + clazz.getName() + "": "" + ex);"
48451,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,112,,"            fail(""Property '"" + property + ""' found in "" + clazz.getName());"
48452,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MappedPropertyTestCase.java,143,,"            assertNull(""Getter is found"", desc.getMappedReadMethod());"
48453,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,145,,"                new AlphaBean(""parent""),"
48454,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,146,,"                ""getName"","
48455,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,182,,"        final Child childTwo = new AlphaBean(""ChildTwo"");"
48456,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,275,,"        value = MethodUtils.invokeStaticMethod(TestBean.class, ""currentCounter"", new Object[0]);"
48457,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,276,,"        assertEquals(""currentCounter value"", current, ((Integer) value).intValue());"
48458,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,278,,"        MethodUtils.invokeStaticMethod(TestBean.class, ""incrementCounter"", new Object[0]);"
48459,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,324,,"            assertNotNull(""currentCounter exists"", value);"
48460,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,325,,"            assertTrue(""currentCounter type"","
48461,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,538,,"        MethodUtils.invokeMethod(bean, ""setFoo"", ""alpha"");"
48462,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/MethodUtilsTestCase.java,538,,"        MethodUtils.invokeMethod(bean, ""setFoo"", ""alpha"");"
48463,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsBenchCase.java,167,,"                           "", time="" + (stopMillis - startMillis));"
48464,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,120,,"    { ""booleanProperty"","
48465,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,121,,"      ""booleanSecond"","
48466,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,122,,"      ""doubleProperty"","
48467,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,123,,"      ""floatProperty"","
48468,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,124,,"      ""intArray"","
48469,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,126,,"      ""intProperty"","
48470,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,127,,"      ""listIndexed"","
48471,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,128,,"      ""longProperty"","
48472,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,135,,"      ""shortProperty"","
48473,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,136,,"      ""stringArray"","
48474,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,138,,"      ""stringProperty"""
48475,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,150,,"        ""dupProperty"","
48476,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,153,,"        ""intIndexed"","
48477,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,159,,"        ""readOnlyProperty"","
48478,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,162,,"        ""stringIndexed"","
48479,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,164,,"        ""writeOnlyProperty"","
48480,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,199,,"        final BasicDynaClass dynaClass = new BasicDynaClass(""nestedDynaBean"", BasicDynaBean.class, properties);"
48481,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,240,,"        map.put(""dupProperty"", new String[] { ""New 0"", ""New 1"", ""New 2"" });"
48482,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,251,,"            fail(""Threw "" + t.toString());"
48483,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,320,,"                     ""This is a string"","
48484,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,332,,"            fail(""Should throw IllegalArgumentException 1"");"
48485,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,336,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 1"");"
48486,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,341,,"            fail(""Should throw IllegalArgumentException 2"");"
48487,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,345,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 2"");"
48488,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,436,,"        bean.setMappedIntProperty(""key.with.a.dot"", testIntegerValue.intValue());"
48489,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,437,,"        assertEquals(""Can retrieve directly"","
48490,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,450,,"        bean.setMappedObjects(""nested.property"", new TestBean(testIntegerValue.intValue()));"
48491,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,601,,"            fail(""Should throw IllegalArgumentException 3"");"
48492,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,605,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 3"");"
48493,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,609,,"            PropertyUtils.getIndexedProperty(bean, ""[0]"");"
48494,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,610,,"            fail(""Should throw NoSuchMethodException 4"");"
48495,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,614,,"            fail(""Threw "" + t + "" instead of NoSuchMethodException 4"");"
48496,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,619,,"            fail(""Should throw IllegalArgumentException 5"");"
48497,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,623,,"            fail(""Threw "" + t + "" instead of IllegalArgumentException 5"");"
48498,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,699,,"                fail(""dupProperty "" + i + "" threw "" + t);"
48499,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,733,,"                        ""String "" + i, (String) value);"
48500,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,854,,"            fail(""Should have thrown ArrayIndexOutOfBoundsException"");"
48501,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,858,,"            fail(""Threw "" + t + "" instead of ArrayIndexOutOfBoundsException"");"
48502,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,920,,"            fail(""Should have thrown IndexOutOfBoundsException"");"
48503,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,924,,"            fail(""Threw "" + t + "" instead of IndexOutOfBoundsException"");"
48504,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,988,,"        final String[] firstArray = new String[] {""FIRST-1"", ""FIRST-2"", ""FIRST-3""};"
48505,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,988,,"        final String[] firstArray = new String[] {""FIRST-1"", ""FIRST-2"", ""FIRST-3""};"
48506,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,988,,"        final String[] firstArray = new String[] {""FIRST-1"", ""FIRST-2"", ""FIRST-3""};"
48507,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,989,,"        final String[] secondArray = new String[] {""SECOND-1"", ""SECOND-2"", ""SECOND-3"",  ""SECOND-4""};"
48508,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,989,,"        final String[] secondArray = new String[] {""SECOND-1"", ""SECOND-2"", ""SECOND-3"",  ""SECOND-4""};"
48509,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,989,,"        final String[] secondArray = new String[] {""SECOND-1"", ""SECOND-2"", ""SECOND-3"",  ""SECOND-4""};"
48510,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,989,,"        final String[] secondArray = new String[] {""SECOND-1"", ""SECOND-2"", ""SECOND-3"",  ""SECOND-4""};"
48511,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1036,,"        secondMap.put(""SECOND-KEY-1"", ""SECOND-VALUE-1"");"
48512,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1036,,"        secondMap.put(""SECOND-KEY-1"", ""SECOND-VALUE-1"");"
48513,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1061,,"            PropertyUtils.getMappedProperty(null, ""mappedProperty"","
48514,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1062,,"                    ""First Key"");"
48515,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1125,,"        final String[] array = new String[] {""abc"", ""def"", ""ghi""};"
48516,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1126,,"        bean.getMapProperty().put(""mappedArray"", array);"
48517,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1142,,"        list.add(""klm"");"
48518,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1145,,"        bean.getMapProperty().put(""mappedList"", list);"
48519,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1163,,"        map.put(""sub-key-3"", ""sub-value-3"");"
48520,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1163,,"        map.put(""sub-key-3"", ""sub-value-3"");"
48521,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1164,,"        bean.getMapProperty().put(""mappedMap"", map);"
48522,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1179,,"        bean.setMappedProperty(""key.with.a.dot"", ""Special Value"");"
48523,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1189,,"            fail(""Thew exception: "" + e);"
48524,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1279,,"            assertEquals(""Can find first value"", ""First Value"", value);"
48525,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1287,,"            assertEquals(""Can find second value"", ""Second Value"", value);"
48526,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1394,,"            assertNotNull(""Got a value"", value);"
48527,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1395,,"            assertTrue(""Got correct type"", value instanceof Boolean);"
48528,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1396,,"            assertTrue(""Got correct value"","
48529,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1400,,"            fail(""IllegalAccessException"");"
48530,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1402,,"            fail(""IllegalArgumentException"");"
48531,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1404,,"            fail(""InvocationTargetException"");"
48532,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1406,,"            fail(""NoSuchMethodException"");"
48533,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1577,,"                    (bean, ""nested.stringProperty"");"
48534,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1602,,"            fail(""Should have thrown NoSuchMethodException"");"
48535,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1788,,"            result = PropertyUtils.getProperty(bean, ""bar"");"
48536,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,1989,,"            fail(""Should have thrown IllegalArgumentException"");"
48537,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2235,,"            assertTrue(""Property "" + property +"" isReadable expected TRUE"", PropertyUtils.isReadable(bean, property));"
48538,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2235,,"            assertTrue(""Property "" + property +"" isReadable expected TRUE"", PropertyUtils.isReadable(bean, property));"
48539,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2237,,"            fail(""Property "" + property +"" isReadable Threw exception: "" + t);"
48540,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2312,,"            assertTrue(""Property "" + property +"" isWriteable expected TRUE"", PropertyUtils.isWriteable(bean, property));"
48541,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2314,,"            fail(""Property "" + property +"" isWriteable Threw exception: "" + t);"
48542,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2529,,"        assertEquals(""BEFORE"", ""SECOND-3"", bean.getString2dArray(1)[2]);"
48543,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2535,,"        assertEquals(""AFTER"", ""SECOND-3-UPDATED"", bean.getString2dArray(1)[2]);"
48544,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2645,,"                    ""New Value 2"");"
48545,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2677,,"                    ""New Value 3"");"
48546,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,2859,,"                    ""New String"");"
48547,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3155,,"            PropertyUtils.setMappedProperty(bean, ""mappedProperty"", ""key.with.a.dot"", ""Updated Special Value"");"
48548,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3247,,"            assertTrue(""Matched new value"","
48549,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3375,,"            final String newValue = oldValue + "" Extra Value"";"
48550,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3451,,"            final String newValue = ""New String Value"";"
48551,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3997,,"        assertEquals(""Bug in NestedTestBean"", ""NOT SET"", value.getTestString());"
48552,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,3997,,"        assertEquals(""Bug in NestedTestBean"", ""NOT SET"", value.getTestString());"
48553,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,4259,,"        bean.setUnusuallyNamedProperty(""bean value"");"
48554,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,4262,,"                PropertyUtils.getNestedProperty(bean, ""unusuallyNamedProperty""));"
48555,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,4266,,"        PropertyUtils.setSimpleProperty(bean, ""unusuallyNamedProperty"", ""new value"");"
48556,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/PropertyUtilsTestCase.java,4273,,"        PropertyUtils.setProperty(bean, ""unusuallyNamedProperty"", ""next value"");"
48557,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/SuppressPropertiesBeanIntrospectorTestCase.java,116,,"            throw new UnsupportedOperationException(""Unexpected method call!"");"
48558,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/TestBean.java,286,,"            mapProperty.put(""First Key"", ""First Value"");"
48559,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/TestBean.java,286,,"            mapProperty.put(""First Key"", ""First Value"");"
48560,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/TestBean.java,287,,"            mapProperty.put(""Second Key"", ""Second Value"");"
48561,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/TestBean.java,287,,"            mapProperty.put(""Second Key"", ""Second Value"");"
48562,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/WrapDynaBeanTestCase.java,101,,"            bean.get(""invalidProperty"");"
48563,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/WrapDynaBeanTestCase.java,182,,"                    bean.contains(""mappedProperty"", ""First Key""));"
48564,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/WrapDynaBeanTestCase.java,183,,"            fail(""Should have thrown UnsupportedOperationException"");"
48565,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/WrapDynaBeanTestCase.java,187,,"            fail(""Exception: "" + t);"
48566,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/WrapDynaBeanTestCase.java,266,,"        assertEquals(""origBean default"", new Integer(123), origBean.get(""intProperty""));"
48567,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira18TestCase.java,95,,"            result = PropertyUtils.isReadable(bean, ""simple"");"
48568,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira18TestCase.java,97,,"            log.error(""ERROR "" + t, t);"
48569,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira18TestCase.java,98,,"            fail(""Threw exception: "" + t);"
48570,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira273TestCase.java,93,,"            result = PropertyUtils.getProperty(bean, ""beanValue"");"
48571,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira345TestCase.java,82,,"        BeanUtils.setProperty(myBean, ""matr[0][0]"",""Sample"");"
48572,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira359TestCase.java,91,,"        utils.setProperty(simplePojo, ""jcrMixinTypes"", ""mix:rereferencible,mix:simple"");"
48573,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira359TestCase.java,93,,"        assertEquals(""array size"", 2, simplePojo.getJcrMixinTypes().length);"
48574,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira369TestCase.java,82,,"        bean.setARatedCd(""foo"");"
48575,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira465TestCase.java,61,,"        assertEquals(""Wrong value"", NEW_VALUE, bean.getFoo()[0]);"
48576,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira492TestCase.java,54,,"        bean.setSomeList(Arrays.asList(""item0"", ""item1""));"
48577,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira492TestCase.java,54,,"        bean.setSomeList(Arrays.asList(""item0"", ""item1""));"
48578,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira492TestCase.java,59,,"        assertEquals(""item0"", beanUtils.getIndexedProperty(bean, ""someList"", 0));"
48579,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,87,,"        PropertyUtils.getPropertyDescriptor(testBean, ""mappedReadOnly"");"
48580,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,88,,"        PropertyUtils.getPropertyDescriptor(testBean, ""mappedWriteOnly"");"
48581,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,110,,"            result = PropertyUtils.isReadable(wrapDynaBean, ""simpleReadOnly"");"
48582,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,112,,"            log.error(""ERROR "" + t, t);"
48583,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,118,,"            result = PropertyUtils.isReadable(wrapDynaBean, ""simpleWriteOnly"");"
48584,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,121,,"            fail(""simpleWriteOnly Threw exception: "" + t);"
48585,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,161,,"            fail(""indexedReadOnly Threw exception: "" + t);"
48586,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,169,,"            fail(""indexedWriteOnly Threw exception: "" + t);"
48587,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,185,,"            fail(""mappedReadOnly Threw exception: "" + t);"
48588,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,193,,"            fail(""mappedWriteOnly Threw exception: "" + t);"
48589,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,411,,"            fail(""copyProperties Threw exception: "" + t);"
48590,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/bugs/Jira61TestCase.java,413,,"        assertFalse(""Target value='"" + value + ""'"", value.equals(testBean.getSimpleReadOnly()));"
48591,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/ArrayConverterTestCase.java,118,,"            fail(msg + "" failed "" + e);"
48592,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/BigDecimalConverterTestCase.java,92,,"            ""from String"","
48593,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/BigDecimalConverterTestCase.java,119,,"            new BigDecimal(""3200.11""),"
48594,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/BigIntegerConverterTestCase.java,81,,"            ""from String"","
48595,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/ByteConverterTestCase.java,114,,"            ""from String"","
48596,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DateConverterTestBase.java,147,,"            assertEquals(""TYPE ""  + msg, expectType, resultType);"
48597,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DateConverterTestBase.java,242,,"        final String pattern = ""yyyy-MM-dd"";"
48598,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DateConverterTestBase.java,249,,"        final String testString = ""2006-10-29"";"
48599,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DateConverterTestBase.java,302,,"        invalidConversion(converter, ""2006-10-2X"");"
48600,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DoubleConverterTestCase.java,80,,"            ""from String"","
48601,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/DurationConverterTestCase.java,72,,"            ""from String"","
48602,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/EnumConverterTestCase.java,62,,"            ""from String"","
48603,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/FloatConverterTestCase.java,102,,"            ""from String"","
48604,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/IntegerConverterTestCase.java,129,,"            ""from String"","
48605,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/LocalTimeConverterTestCase.java,72,,"            ""from String"","
48606,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/LongConverterTestCase.java,80,,"            ""from String"","
48607,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/MonthDayConverterTestCase.java,72,,"            ""from String"","
48608,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/NumberConverterTestBase.java,234,,"        assertEquals(""Default Convert "" + numbers[0], numbers[0].toString(), converter.convert(String.class, numbers[0]));"
48609,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/NumberConverterTestBase.java,252,,"        assertEquals(""Default Locale "" + numbers[0], ""-12"", converter.convert(String.class, numbers[0]));"
48610,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/NumberConverterTestBase.java,257,,"        assertEquals(""Locale.GERMAN "" + numbers[2], ""-22"", converter.convert(String.class, numbers[2]));"
48611,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/NumberConverterTestBase.java,330,,"            fail(""Expected invalid value to cause ConversionException"");"
48612,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/OffsetTimeConverterTestCase.java,72,,"            ""from String"","
48613,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/PathConverterTestCase.java,74,,"            ""from String"","
48614,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/PeriodConverterTestCase.java,72,,"            ""from String"","
48615,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/ShortConverterTestCase.java,115,,"            ""from String"","
48616,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/URIConverterTestCase.java,72,,"            ""from String"","
48617,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/UUIDConverterTestCase.java,72,,"            ""from String"","
48618,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/YearConverterTestCase.java,72,,"            ""from String"","
48619,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/YearMonthConverterTestCase.java,72,,"            ""from String"","
48620,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/ZoneIdConverterTestCase.java,72,,"            ""from String"","
48621,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/converters/ZoneOffsetConverterTestCase.java,72,,"            ""from String"","
48622,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,91,,"                label = ""Simple "" + label(validProperties[i], i);"
48623,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,94,,"                fail(label + "" threw "" + t);"
48624,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,101,,"                label = ""Indexed "" + label(validIndexProperties[i], i);"
48625,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,111,,"                label = ""Mapped "" + label(validMapProperties[i], i);"
48626,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,122,,"            fail(label + "" expected IllegalArgumentException: "" + index);"
48627,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/expression/DefaultResolverTestCase.java,124,,"            assertEquals(label + "" Error Message"", ""No Index Value"", e.getMessage());"
48628,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleBeanificationTestCase.java,294,,"        assertEquals(""Signal not set by test thread"", 2, signal.getSignal());"
48629,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleConvertUtilsTestCase.java,96,,"        fail(""Array conversions not implemented yet."");"
48630,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleConvertUtilsTestCase.java,133,,"            LocaleConvertUtils.convert(""foo"", Byte.TYPE);"
48631,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleConvertUtilsTestCase.java,251,,"        final String[] stringArray1 = {""abc""};"
48632,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleConvertUtilsTestCase.java,256,,"        assertEquals(""intArray1"", ""123"","
48633,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/LocaleConvertUtilsTestCase.java,456,,"        value = LocaleConvertUtils.convert(""123"" + decimalSeparator + ""456"", Double.TYPE);"
48634,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/BaseLocaleConverterTestCase.java,149,,"            fail(""Pattern conversion threw "" + msgId + "" threw "" + e);"
48635,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/BigDecimalLocaleConverterTestCase.java,71,,"        convertValueNoPattern(converter, ""(A)"", localizedDecimalValue, expectedValue);"
48636,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/BigDecimalLocaleConverterTestCase.java,108,,"        convertValueNoPattern(converter, ""(C)"", localizedDecimalValue, expectedValue);"
48637,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/BigIntegerLocaleConverterTestCase.java,73,,"        convertValueNoPattern(converter, ""(A)"", localizedIntegerValue, expectedValue);"
48638,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/BigIntegerLocaleConverterTestCase.java,109,,"        convertValueNoPattern(converter, ""(C)"", localizedIntegerValue, expectedValue);"
48639,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/ByteLocaleConverterTestCase.java,79,,"        convertValueNoPattern(converter, ""(A)"", localizedIntegerValue, expectedValue);"
48640,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/ByteLocaleConverterTestCase.java,113,,"        convertValueNoPattern(converter, ""(C)"", localizedIntegerValue, expectedValue);"
48641,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DateLocaleConverterTestCase.java,123,,"            dateFormat.parse(""Feb 10, 2001"");"
48642,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DateLocaleConverterTestCase.java,131,,"            dateFormat.parse(""Feb 31, 2001"");"
48643,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DateLocaleConverterTestCase.java,220,,"        convertValueNoPattern(converter, ""(A)"", localizedDateValue, expectedValue);"
48644,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DateLocaleConverterTestCase.java,246,,"        convertValueNoPattern(converter, ""(C)"", localizedDateValue, expectedValue);"
48645,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DoubleLocaleConverterTestCase.java,69,,"        convertValueNoPattern(converter, ""(A)"", localizedDecimalValue, expectedValue);"
48646,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/DoubleLocaleConverterTestCase.java,106,,"        convertValueNoPattern(converter, ""(C)"", localizedDecimalValue, expectedValue);"
48647,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/FloatLocaleConverterTestCase.java,75,,"        convertValueNoPattern(converter, ""(A)"", localizedDecimalValue, expectedValue);"
48648,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/FloatLocaleConverterTestCase.java,112,,"        convertValueNoPattern(converter, ""(C)"", localizedDecimalValue, expectedValue);"
48649,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/IntegerLocaleConverterTestCase.java,69,,"        convertValueNoPattern(converter, ""(A)"", localizedIntegerValue, expectedValue);"
48650,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/IntegerLocaleConverterTestCase.java,105,,"        convertValueNoPattern(converter, ""(C)"", localizedIntegerValue, expectedValue);"
48651,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/LongLocaleConverterTestCase.java,69,,"        convertValueNoPattern(converter, ""(A)"", localizedIntegerValue, expectedValue);"
48652,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/LongLocaleConverterTestCase.java,105,,"        convertValueNoPattern(converter, ""(C)"", localizedIntegerValue, expectedValue);"
48653,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/ShortLocaleConverterTestCase.java,69,,"        convertValueNoPattern(converter, ""(A)"", localizedIntegerValue, expectedValue);"
48654,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/locale/converters/ShortLocaleConverterTestCase.java,105,,"        convertValueNoPattern(converter, ""(C)"", localizedIntegerValue, expectedValue);"
48655,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,74,,"        assertNotNull(""ClassLoader is null"", loader);"
48656,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,75,,"        assertNotNull(""BeanClass is null"", beanClass);"
48657,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,76,,"        assertNotSame(""ClassLoaders should be different.."", getClass().getClassLoader(), beanClass.getClassLoader());"
48658,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,77,,"        assertSame(""BeanClass ClassLoader incorrect"", beanClass.getClassLoader(), loader);"
48659,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,178,,"        assertNotNull(""1-Read Method null"", descriptor.getMappedReadMethod());"
48660,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,179,,"        assertNotNull(""1-Write Method null"", descriptor.getMappedWriteMethod());"
48661,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,180,,"        assertEquals(""1-Read Method name"", ""getMappedProperty"", descriptor.getMappedReadMethod().getName());"
48662,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,180,,"        assertEquals(""1-Read Method name"", ""getMappedProperty"", descriptor.getMappedReadMethod().getName());"
48663,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,181,,"        assertEquals(""1-Read Write name"", ""setMappedProperty"", descriptor.getMappedWriteMethod().getName());"
48664,./TargetProjects/commons-beanutils/src/test/java/org/apache/commons/beanutils2/memoryleaktests/MemoryLeakTestCase.java,181,,"        assertEquals(""1-Read Write name"", ""setMappedProperty"", descriptor.getMappedWriteMethod().getName());"
48665,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/BSFManager.java,347,,"            logger.error(""[BSFManager] Exception :"", prive);"
48666,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/engines/jacl/BSFCommand.java,44,,"      interp.setResult (""invalid # of args; usage: bsf "" +"
48667,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/engines/jython/JythonEngine.java,84,,"                                  ""exception from Jython:\n"" + e, e);"
48668,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/util/BSFEngineImpl.java,73,,"        ObjInfo bsfInfo = cb.getSymbol(""bsf"");"
48669,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/util/ReflectionUtils.java,352,,"      throw new IllegalArgumentException (""field '"" + fieldName + ""' is "" +"
48670,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/util/ReflectionUtils.java,353,,"                          ""unknown for '"" + target + ""'"");"
48671,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/util/ReflectionUtils.java,382,,"      throw new IllegalArgumentException (""property '"" + propName + ""' is "" +"
48672,./TargetProjects/commons-bsf/src/main/java/org/apache/bsf/util/type/TypeConvertorRegistry.java,46,,"        return ""(Class from, Class to, Object obj) {\n"" +"
48673,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/BSFTest.java,89,,"        BSFManager.registerScriptingEngine(""fakeEngine"","
48674,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/BSFTest.java,101,,"                         BSFManager.getLangFromFilename(""Test.fE""));"
48675,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/BSFTest.java,147,,"            bsfManager.declareBean(""foo"", new Integer(1), Integer.class);"
48676,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JaclTest.java,48,,"            jaclEngine.exec(""Test.jacl"", 0, 0,"
48677,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JaclTest.java,119,,"            bsfManager.registerBean(""foo"", foo);"
48678,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JavascriptTest.java,49,,"            javascriptEngine.exec(""Test.js"", 0, 0,"
48679,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JavascriptTest.java,138,,"            bsfManager.registerBean(""foo"", foo);"
48680,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JythonTest.java,49,,"            jythonEngine.exec(""Test.py"", 0, 0,"
48681,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/JythonTest.java,138,,"            bsfManager.registerBean(""foo"", foo);"
48682,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/NetrexxTest.java,60,,"            bsfManager.declareBean(""foo"", foo, Integer.class);"
48683,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/engines/NetrexxTest.java,61,,"            bar = new Integer((netrexxEngine.eval(""Test.nrx"", 0, 0,"
48684,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/util/EngineUtilsTest.java,52,,"            fail(""createBean method failed""+bsfe);"
48685,./TargetProjects/commons-bsf/src/test/java/org/apache/bsf/util/StringUtilsTest.java,137,,"            pw.println(""file name : Test.txt"");"
48686,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/CopyCommandTestCase.java,48,,"        context.put(""one"", ""one"");"
48687,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/CopyCommandTestCase.java,49,,"        context.put(""two"", ""two"");"
48688,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/CopyCommandTestCase.java,50,,"        context.put(""three"", ""three"");"
48689,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchCommandTestCase.java,35,,"        assertNull(context.get(""foo""));"
48690,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchCommandTestCase.java,52,,"        assertNull(context.get(""bar""));"
48691,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchCommandTestCase.java,67,,"        assertNull(context.get(""elephant""));"
48692,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchLookupCommandTestCase.java,99,,"        catalog.addCommand(""fooCommand"", new TestCommand<Context<String, Object>>(""1""));"
48693,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchLookupCommandTestCase.java,106,,"            assertEquals(""Command should return finished"","
48694,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchLookupCommandTestCase.java,110,,"            fail(""Threw exception: "" + e);"
48695,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/DispatchLookupCommandTestCase.java,160,,"        command.setMethodKey(""methodKey"");"
48696,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/LookupCommandTestCase.java,101,,"        catalog.addCommand(""foo"", new NonDelegatingCommand(""1a""));"
48697,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/LookupCommandTestCase.java,105,,"            assertEquals(""Command should return finished"","
48698,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/LookupCommandTestCase.java,108,,"            fail(""Threw exception: "" + e);"
48699,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/LookupCommandTestCase.java,143,,"        command.setNameKey(""nameKey"");"
48700,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/OverrideCommandTestCase.java,44,,"        context.put(""Key"", ""Value"");"
48701,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/base/RemoveCommandTestCase.java,43,,"        context.put(""Key"", ""Value"");"
48702,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/CatalogBaseTestCase.java,99,,"            AddingCommand command = catalog.getCommand(""AddingCommand"");"
48703,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/CatalogFactoryBaseTestCase.java,88,,"        assertNull(factory.getCatalog(""foo""));"
48704,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ChainBaseTestCase.java,133,,"            fail(""Threw exception: "" + e);"
48705,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ChainBaseTestCase.java,159,,"            assertEquals(""Correct exception id"", ""1"", e.getMessage());"
48706,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,90,,"        context.put(""foo"", ""This is foo"");"
48707,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,97,,"        context.put(""bar"", ""This is bar"");"
48708,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,104,,"        context.put(""baz"", ""This is baz"");"
48709,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,143,,"        assertFalse(context.containsKey(""bop""));"
48710,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,144,,"        assertFalse(context.containsValue(""bop value""));"
48711,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,210,,"        context.put(""foo"", ""foo value"");"
48712,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,211,,"        context.put(""bar"", ""bar value"");"
48713,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/ContextBaseTestCase.java,212,,"        context.put(""baz"", ""baz value"");"
48714,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/TestContextTestCase.java,48,,"        assertEquals(""readOnly"", context.get(""readOnly""));"
48715,./TargetProjects/commons-chain/base/src/test/java/org/apache/commons/chain2/impl/TestContextTestCase.java,49,,"        assertEquals(""readWrite"", context.get(""readWrite""));"
48716,./TargetProjects/commons-chain/configuration/xml/src/test/java/org/apache/commons/chain2/config/xml/XmlConfigParserTestCase.java,188,,"            assertEquals(""Correct exception id"","
48717,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/faces/FacesWebContext.java,108,,"        @SuppressWarnings(""unchecked"") // Assume faces is following contract"
48718,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletApplicationScopeMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that attribute names are String"
48719,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletHeaderMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that header names are String"
48720,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletHeaderValuesMap.java,78,,"        @SuppressWarnings( ""unchecked"" ) // it is known that header names are String"
48721,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletInitParamMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that header names are String"
48722,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletParamMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that Servlet request parameter names are String"
48723,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletParamValuesMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that header names are String"
48724,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletRequestScopeMap.java,58,,"        @SuppressWarnings( ""unchecked"" ) // it is known that attribute names are String"
48725,./TargetProjects/commons-chain/web/src/main/java/org/apache/commons/chain2/web/servlet/ServletSessionScopeMap.java,64,,"        @SuppressWarnings( ""unchecked"" ) // it is known that attribute names are String"
48726,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/MockPortletRequest.java,318,,"        throw new UnsupportedOperationException(""Not supported yet."");"
48727,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,64,,"        pcontext.setAttribute(""akey1"", ""avalue1"");"
48728,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,65,,"        pcontext.setAttribute(""akey2"", ""avalue2"");"
48729,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,68,,"        ((MockPortletContext) pcontext).addInitParameter(""ikey1"", ""ivalue1"");"
48730,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,72,,"        session.setAttribute(""skey1"", ""svalue1"");"
48731,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,73,,"        session.setAttribute(""skey2"", ""svalue2"");"
48732,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,76,,"        request.setAttribute(""rkey1"", ""rvalue1"");"
48733,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,77,,"        request.setAttribute(""rkey2"", ""rvalue2"");"
48734,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,78,,"        ((MockPortletRequest) request).addParameter(""pkey1"", ""pvalue1"");"
48735,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,78,,"        ((MockPortletRequest) request).addParameter(""pkey1"", ""pvalue1"");"
48736,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,79,,"        ((MockPortletRequest) request).addParameter(""pkey2"", ""pvalue2a"");"
48737,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,79,,"        ((MockPortletRequest) request).addParameter(""pkey2"", ""pvalue2a"");"
48738,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,130,,"        pcontext.setAttribute(""akeyA"", ""avalueA"");"
48739,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,135,,"        map.put(""akeyB"", ""avalueB"");"
48740,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,140,,"        pcontext.setAttribute(""akeyA"", ""newvalueA"");"
48741,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,145,,"        map.put(""akeyB"", ""newvalueB"");"
48742,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,155,,"        values.put(""1"", ""One"");"
48743,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,156,,"        values.put(""2"", ""Two"");"
48744,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,205,,"            fail(""Should have thrown UnsupportedOperationException"");"
48745,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,509,,"        request.setAttribute(""rkeyA"", ""rvalueA"");"
48746,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,514,,"        map.put(""rkeyB"", ""rvalueB"");"
48747,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,571,,"        session.setAttribute(""skeyA"", ""svalueA"");"
48748,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,576,,"        map.put(""skeyB"", ""svalueB"");"
48749,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/portlet/PortletWebContextTestCase.java,625,,"        assertFalse(""containsKey()"", sessionMap.containsKey(""ABC""));"
48750,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,64,,"        scontext.setAttribute(""akey1"", ""avalue1"");"
48751,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,65,,"        scontext.setAttribute(""akey2"", ""avalue2"");"
48752,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,68,,"        ((MockServletContext) scontext).addInitParameter(""ikey1"", ""ivalue1"");"
48753,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,72,,"        session.setAttribute(""skey1"", ""svalue1"");"
48754,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,73,,"        session.setAttribute(""skey2"", ""svalue2"");"
48755,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,78,,"        request.setAttribute(""rkey1"", ""rvalue1"");"
48756,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,79,,"        request.setAttribute(""rkey2"", ""rvalue2"");"
48757,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,80,,"        ((MockHttpServletRequest) request).addHeader(""hkey1"", ""hvalue1"");"
48758,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,80,,"        ((MockHttpServletRequest) request).addHeader(""hkey1"", ""hvalue1"");"
48759,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,81,,"        ((MockHttpServletRequest) request).addHeader(""hkey2"", ""hvalue2a"");"
48760,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,81,,"        ((MockHttpServletRequest) request).addHeader(""hkey2"", ""hvalue2a"");"
48761,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,83,,"        ((MockHttpServletRequest) request).addParameter(""pkey1"", ""pvalue1"");"
48762,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,83,,"        ((MockHttpServletRequest) request).addParameter(""pkey1"", ""pvalue1"");"
48763,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,84,,"        ((MockHttpServletRequest) request).addParameter(""pkey2"", ""pvalue2a"");"
48764,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,84,,"        ((MockHttpServletRequest) request).addParameter(""pkey2"", ""pvalue2a"");"
48765,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,86,,"        ((MockHttpServletRequest) request).addCookie(""ckey1"", ""cvalue1"");"
48766,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,137,,"        scontext.setAttribute(""akeyA"", ""avalueA"");"
48767,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,142,,"        map.put(""akeyB"", ""avalueB"");"
48768,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,147,,"        scontext.setAttribute(""akeyA"", ""newvalueA"");"
48769,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,152,,"        map.put(""akeyB"", ""newvalueB"");"
48770,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,162,,"        values.put(""1"", ""One"");"
48771,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,163,,"        values.put(""2"", ""Two"");"
48772,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,224,,"            fail(""Should have thrown UnsupportedOperationException"");"
48773,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,613,,"        request.setAttribute(""rkeyA"", ""rvalueA"");"
48774,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,618,,"        map.put(""rkeyB"", ""rvalueB"");"
48775,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,675,,"        session.setAttribute(""skeyA"", ""svalueA"");"
48776,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,680,,"        map.put(""skeyB"", ""svalueB"");"
48777,./TargetProjects/commons-chain/web/src/test/java/org/apache/commons/chain2/web/servlet/ServletWebContextBaseTestCase.java,729,,"        assertFalse(""containsKey()"", sessionMap.containsKey(""ABC""));"
48778,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ApplicationTest.java,76,,"        options.addOption( ""help"", false, ""print this message"" );"
48779,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ApplicationTest.java,78,,"        options.addOption( ""version"", false, ""print the version information and exit"" );"
48780,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java,35,,"        options = new Options().addOption(""p"", false, ""Option p"").addOption(""attr"", true, ""Option accepts argument"");"
48781,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/BasicParserTest.java,35,,"    @Override @Test @Ignore(""not supported by the BasicParser"")"
48782,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/CommandLineTest.java,51,,"        assertEquals(""property with long format"", ""bar"", cl.getOptionProperties(""property"").getProperty(""foo""));"
48783,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/CommandLineTest.java,51,,"        assertEquals(""property with long format"", ""bar"", cl.getOptionProperties(""property"").getProperty(""foo""));"
48784,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/CommandLineTest.java,100,,"        final CommandLine cmd = parser.parse(options, new String[] { ""-i"", ""123"", ""-f"", ""foo"" });"
48785,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java,33,,"        options.addOption(new Option(""d"", ""debug"", false, ""Turn on debug.""));"
48786,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java,34,,"        options.addOption(new Option(""e"", ""extract"", false, ""Turn on extract.""));"
48787,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java,35,,"        options.addOption(new Option(""o"", ""option"", true, ""Turn on option with argument.""));"
48788,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/GnuParserTest.java,35,,"    @Override @Test @Ignore(""not supported by the GnuParser"")"
48789,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,132,,"        final String expected = ""aaaa aaaa aaaa"" + EOL +"
48790,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,171,,"        options = new Options().addOption(""a"", false, ""aaaa aaaa aaaa aaaa aaaa"");"
48791,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,185,,"        expected = lpad + ""-a,--aaa"" + dpad + ""dddd dddd dddd dddd"";"
48792,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,191,,"        expected = lpad + ""-a,--aaa"" + dpad + ""dddd dddd"" + EOL +"
48793,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,244,,"        hf.printUsage(pw, 60, ""app"", options);"
48794,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,549,,"        formatter.printHelp(new PrintWriter(out),80,""commandline"",""header"",mOptions,2,2,""footer"",true);"
48795,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,549,,"        formatter.printHelp(new PrintWriter(out),80,""commandline"",""header"",mOptions,2,2,""footer"",true);"
48796,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionBuilderTest.java,32,,"        final Option simple = OptionBuilder.withLongOpt( ""simple option"")"
48797,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionBuilderTest.java,37,,"                                     .withDescription( ""this is a simple option"" )"
48798,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionBuilderTest.java,83,,"        final Option base = OptionBuilder.withDescription( ""option description"")"
48799,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,71,,"        assertTrue( ""Confirm -r is NOT set"", !cl.hasOption(""r"") );"
48800,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,72,,"        assertTrue( ""Confirm -f is set"", cl.hasOption(""f"") );"
48801,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,73,,"        assertTrue( ""Confirm -d is NOT set"", !cl.hasOption(""d"") );"
48802,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,74,,"        assertTrue( ""Confirm -s is NOT set"", !cl.hasOption(""s"") );"
48803,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,75,,"        assertTrue( ""Confirm -c is NOT set"", !cl.hasOption(""c"") );"
48804,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionGroupTest.java,76,,"        assertTrue( ""Confirm no extra args"", cl.getArgList().isEmpty());"
48805,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionTest.java,78,,"        assertNotEquals(Option.builder(""test"").build().hashCode(), Option.builder(""test2"").build().hashCode()) ;"
48806,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionTest.java,156,,"        option.addValueForProcessing(""foo"");"
48807,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionTest.java,168,,"        checkOption(Option.builder(""a"").desc(""desc"").build(),"
48808,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionsTest.java,38,,"        opts.addOption(""a"", false, ""toggle -a"");"
48809,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/OptionsTest.java,50,,"        opts.addOption(""a"", true, ""toggle -a*"");"
48810,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,46,,"            .addOption(""a"", ""enable-a"", false, ""turn [a] on or off"")"
48811,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,47,,"            .addOption(""b"", ""bfile"", true, ""set the value of [b]"")"
48812,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,55,,"                                       ""-b"", ""toast"","
48813,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,56,,"                                       ""foo"", ""bar"" };"
48814,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,56,,"                                       ""foo"", ""bar"" };"
48815,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,60,,"        assertTrue(""Confirm -a is set"", cl.hasOption(""a""));"
48816,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,61,,"        assertTrue(""Confirm -b is set"", cl.hasOption(""b""));"
48817,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,62,,"        assertTrue(""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast""));"
48818,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,86,,"                                       ""foobar"","
48819,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,90,,"        assertTrue(""Confirm -c is set"", cl.hasOption(""c""));"
48820,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,91,,"        assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);"
48821,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,95,,"        assertTrue(""Confirm -c is not set"", !cl.hasOption(""c""));"
48822,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,98,,"        assertTrue(""Confirm  1 extra arg: "" + cl.getArgList().size(), cl.getArgList().size() == 1);"
48823,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,155,,"        assertTrue( ""Confirm MissingArgumentException caught"", caught );"
48824,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,343,,"        final String[] args = new String[] { ""-foobar"" };"
48825,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,481,,"        assertEquals(""property 1"", ""true"", props.getProperty(""param1""));"
48826,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,491,,"        final String[] args = new String[] { ""--ver"" };"
48827,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,494,,"        options.addOption(OptionBuilder.withLongOpt(""version"").create());"
48828,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,495,,"        options.addOption(OptionBuilder.withLongOpt(""help"").create());"
48829,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,505,,"        final String[] args = new String[] { ""-ver"" };"
48830,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,522,,"        options.addOption(OptionBuilder.withLongOpt(""verbose"").hasOptionalArg().create());"
48831,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,564,,"            assertEquals(""Partial option"", ""--ver"", e.getOption());"
48832,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,565,,"            assertNotNull(""Matching options null"", e.getMatchingOptions());"
48833,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,566,,"            assertEquals(""Matching options size"", 2, e.getMatchingOptions().size());"
48834,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,668,,"        final String[] args = new String[] { ""-b"", ""file"" };"
48835,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ParserTestCase.java,944,,"        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());"
48836,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java,46,,"        final String[] args = new String[] {""-c"", ""-a"", ""foo"", ""-b"", ""java.util.Vector"", ""-e"", ""build.xml"", ""-f"", ""java.util.Calendar"", ""-n"", ""4.5"", ""-t"", ""https://commons.apache.org"", ""-z"", ""Thu Jun 06 17:48:57 EDT 2002"", ""-m"", ""test*""};"
48837,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java,46,,"        final String[] args = new String[] {""-c"", ""-a"", ""foo"", ""-b"", ""java.util.Vector"", ""-e"", ""build.xml"", ""-f"", ""java.util.Calendar"", ""-n"", ""4.5"", ""-t"", ""https://commons.apache.org"", ""-z"", ""Thu Jun 06 17:48:57 EDT 2002"", ""-m"", ""test*""};"
48838,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/PosixParserTest.java,38,,"    @Override @Test @Ignore(""not supported by the PosixParser"")"
48839,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,43,,"        opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(""fish"").create());"
48840,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,44,,"        opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(""gravy"").create());"
48841,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,45,,"        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(""hide"").create());"
48842,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,144,,"        final String[] args = new String[] { ""-e"", ""everything"" };"
48843,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,166,,"        final String[] args = new String[] { ""--fish"" };"
48844,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,188,,"        final String[] args = new String[] { ""--fish"", ""face"" };"
48845,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,210,,"        final String[] args = new String[] { ""-j"", ""ink"", ""idea"" };"
48846,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,210,,"        final String[] args = new String[] { ""-j"", ""ink"", ""idea"" };"
48847,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,238,,"        final String[] args = new String[] { ""--gravy"", ""gold"", ""garden"" };"
48848,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,238,,"        final String[] args = new String[] { ""--gravy"", ""gold"", ""garden"" };"
48849,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,266,,"        final String[] args = new String[] { ""-i"", ""ink"", ""idea"", ""isotope"", ""ice"" };"
48850,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,266,,"        final String[] args = new String[] { ""-i"", ""ink"", ""idea"", ""isotope"", ""ice"" };"
48851,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,299,,"            ""--hide"", ""house"", ""hair"", ""head"""
48852,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,299,,"            ""--hide"", ""house"", ""hair"", ""head"""
48853,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValueTest.java,299,,"            ""--hide"", ""house"", ""hair"", ""head"""
48854,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValuesTest.java,59,,"                                       ""-g"", ""val1"", ""val2"" , ""arg3"","
48855,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValuesTest.java,59,,"                                       ""-g"", ""val1"", ""val2"" , ""arg3"","
48856,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValuesTest.java,129,,"        assertArrayEquals(new String[] { ""key"", ""value"", ""key"", ""value"" }, cmd.getOptionValues(""j""));"
48857,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/ValuesTest.java,129,,"        assertArrayEquals(new String[] { ""key"", ""value"", ""key"", ""value"" }, cmd.getOptionValues(""j""));"
48858,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java,321,,"        formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), ""Header"", options, 0, 5, ""Footer"");"
48859,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java,321,,"        formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), ""Header"", options, 0, 5, ""Footer"");"
48860,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java,50,,"        final Option optionLast = Option.builder(""last"").hasArg(false).build();"
48861,./TargetProjects/commons-cli/src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java,55,,"        final String[] args = new String[] { ""-a"", ""Caesar"", ""-k"", ""A"" };"
48862,./TargetProjects/commons-codec/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java,442,,"                contains(value, 0, 3, ""SCH"") ||"
48863,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/CharsetsTest.java,39,,"    @SuppressWarnings(""deprecation"")"
48864,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java,173,,"            assertEquals(""EOF"", -1, in.read());"
48865,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java,174,,"            assertEquals(""Still EOF"", -1, in.read());"
48866,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base16Test.java,61,,"        final String content = ""Hello World"";"
48867,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base16Test.java,64,,"        assertEquals(""encoding hello world"", ""48656C6C6F20576F726C64"", encodedContent);"
48868,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,291,,"        assertEquals(""EOF"", -1, in.read());"
48869,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,292,,"        assertEquals(""Still EOF"", -1, in.read());"
48870,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32Test.java,44,,"        {""foo""    ,""MZXW6===""},"
48871,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32Test.java,45,,"        {""foob""   ,""MZXW6YQ=""},"
48872,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32Test.java,46,,"        {""fooba""  ,""MZXW6YTB""},"
48873,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base32Test.java,47,,"        {""foobar"" ,""MZXW6YTBOI======""},"
48874,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,304,,"        assertEquals(""EOF"", -1, in.read());"
48875,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,305,,"        assertEquals(""Still EOF"", -1, in.read());"
48876,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,110,,"        final String content = ""Hello World"";"
48877,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,114,,"        assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
48878,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,114,,"        assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
48879,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,403,,"        assertEquals(""empty base64 encode"", 0, result.length);"
48880,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,668,,"        assertEquals(""f"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="")));"
48881,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,669,,"        assertEquals(""fo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="")));"
48882,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,670,,"        assertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"")));"
48883,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,670,,"        assertEquals(""foo"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"")));"
48884,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,671,,"        assertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="")));"
48885,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,671,,"        assertEquals(""foob"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="")));"
48886,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,672,,"        assertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="")));"
48887,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,672,,"        assertEquals(""fooba"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="")));"
48888,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,673,,"        assertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"")));"
48889,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,673,,"        assertEquals(""foobar"", StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"")));"
48890,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/Base64Test.java,1163,,"            assertTrue(""url-safe i="" + i, Arrays.equals(decoded, result));"
48891,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,104,,"        assertDecodeObject(bits, ""00000000"");"
48892,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,107,,"        assertDecodeObject(bits, ""00000001"");"
48893,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,110,,"        assertDecodeObject(bits, ""00000011"");"
48894,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,113,,"        assertDecodeObject(bits, ""00000111"");"
48895,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,116,,"        assertDecodeObject(bits, ""00001111"");"
48896,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,119,,"        assertDecodeObject(bits, ""00011111"");"
48897,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,122,,"        assertDecodeObject(bits, ""00111111"");"
48898,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,125,,"        assertDecodeObject(bits, ""01111111"");"
48899,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,128,,"        assertDecodeObject(bits, ""11111111"");"
48900,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,132,,"        assertDecodeObject(bits, ""0000000011111111"");"
48901,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,136,,"        assertDecodeObject(bits, ""0000000111111111"");"
48902,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,140,,"        assertDecodeObject(bits, ""0000001111111111"");"
48903,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,144,,"        assertDecodeObject(bits, ""0000011111111111"");"
48904,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,148,,"        assertDecodeObject(bits, ""0000111111111111"");"
48905,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,152,,"        assertDecodeObject(bits, ""0001111111111111"");"
48906,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,156,,"        assertDecodeObject(bits, ""0011111111111111"");"
48907,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,160,,"        assertDecodeObject(bits, ""0111111111111111"");"
48908,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,164,,"        assertDecodeObject(bits, ""1111111111111111"");"
48909,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,622,,"        assertEquals(""0000000000000000"", l_encoded);"
48910,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,626,,"        assertEquals(""0000000000000001"", l_encoded);"
48911,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,630,,"        assertEquals(""0000000000000011"", l_encoded);"
48912,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,634,,"        assertEquals(""0000000000000111"", l_encoded);"
48913,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,638,,"        assertEquals(""0000000000001111"", l_encoded);"
48914,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,642,,"        assertEquals(""0000000000011111"", l_encoded);"
48915,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,646,,"        assertEquals(""0000000000111111"", l_encoded);"
48916,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java,650,,"        assertEquals(""0000000001111111"", l_encoded);"
48917,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java,90,,"            new TestData(""a"",   true,      0,     ""abc"", 0,     0,     true),"
48918,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java,95,,"            new TestData(""Abc"", true,      0,     ""abc"", 0,     3,     true),"
48919,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/HexTest.java,124,,"            fail(""An exception wasn't thrown when trying to decode an odd number of characters"");"
48920,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/HexTest.java,183,,"        final String sourceString = ""Hello World"";"
48921,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/HexTest.java,502,,"        assertEquals(""000000000000000000000000000000000000000000000000000000000000000000000000"", new String(c));"
48922,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/HexTest.java,715,,"        testCustomCharset(""UTF-8"", ""testRequiredCharset"");"
48923,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,42,,"    private static final String STRING_FIXTURE = ""ABC"";"
48924,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,116,,"            StringUtils.getBytesUnchecked(STRING_FIXTURE, ""UNKNOWN"");"
48925,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,216,,"        Assert.assertFalse(StringUtils.equals(""abc"", null));"
48926,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,219,,"        Assert.assertFalse(StringUtils.equals(""abc"", ""abcd""));"
48927,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,33,,"        assertEquals(""$apr1$TqI9WECO$LHZB2DqRlk9nObiB6vJG9."", Md5Crypt.apr1Crypt(""secret"", ""$apr1$TqI9WECO""));"
48928,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,37,,"        assertEquals(""$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$1234""));"
48929,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,55,,"        assertEquals(""$apr1$./$EeFrYzWWbmTyGdf4xULYc."", Md5Crypt.apr1Crypt(""t\u00e4st"", ""$apr1$./$""));"
48930,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,55,,"        assertEquals(""$apr1$./$EeFrYzWWbmTyGdf4xULYc."", Md5Crypt.apr1Crypt(""t\u00e4st"", ""$apr1$./$""));"
48931,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,156,,"        assertEquals(""da853b0d3f88d99b30283a69e6ded6bb"", DigestUtils.md2Hex(""abc""));"
48932,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,160,,"        assertEquals(""4e8ddff3650292ab5a4108c3aa47940b"", DigestUtils.md2Hex(""abcdefghijklmnopqrstuvwxyz""));"
48933,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,168,,"            DigestUtils.md2Hex(""1234567890123456789012345678901234567890"" + ""1234567890123456789012345678901234567890""));"
48934,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,258,,"        assertEquals(""a9993e364706816aba3e25717850c26c9cd0d89d"", DigestUtils.sha1Hex(""abc""));"
48935,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,271,,"        final String d1 = ""C'est un homme qui rentre dans un café, et plouf"";"
48936,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java,272,,"        final String d2 = ""C'est un homme, c'est qu'une tête, on lui offre un cadeau: 'oh... encore un chapeau!'"";"
48937,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java,38,,"    @SuppressWarnings(""deprecation"") // most of the static methods are deprecated"
48938,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java,64,,"        assertEquals(""750c783e6ab0b503eaa86e310a5db738"", HmacUtils.hmacMd5Hex(""Jefe"", ""what do ya want for nothing?""));"
48939,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java,64,,"        assertEquals(""750c783e6ab0b503eaa86e310a5db738"", HmacUtils.hmacMd5Hex(""Jefe"", ""what do ya want for nothing?""));"
48940,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java,75,,"        assertEquals(""f42bb0eeb018ebbd4597ae7213711ec60760843f"", HmacUtils.hmacSha1Hex(HmacAlgorithmsTest.STANDARD_KEY_STRING, """"));"
48941,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,40,,"        assertEquals(""$1$1234$ImZYBLmYC.rbBKg9ERxX70"", Crypt.crypt(""secret"", ""$1$1234""));"
48942,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,60,,"        assertTrue(Md5Crypt.md5Crypt(""secret"".getBytes()).matches(""^\\$1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$""));"
48943,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java,604,,"            Assert.assertArrayEquals(""Length: "" + i, answers[i], MurmurHash3.hash128(RANDOM_BYTES, offset, i, seed));"
48944,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,35,,"        assertEquals(""$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/"", Crypt.crypt(""secret"", ""$5$45678""));"
48945,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,36,,"        assertEquals(""$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."", Crypt.crypt(""secret"", ""$6$45678""));"
48946,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,38,,"        assertEquals(""xxWAum7tHdIUw"", Crypt.crypt(""secret"", ""xx""));"
48947,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/Caverphone2Test.java,69,,"        final String[][] data = {{""Stevenson"", ""STFNSN1111""}, {""Peter"", ""PTA1111111""}};"
48948,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java,214,,"            {""house"", ""house""},"
48949,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,77,,"        Assert.assertEquals(""876450"", encode(""LEWINSKY""));"
48950,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,79,,"        Assert.assertEquals(""486740"", encode(""SZLAMAWICZ""));"
48951,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,41,,"        {""ALLERTON"", ""ALRT"", ""ALRT""},"
48952,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,47,,"        {""Alan"", ""ALN"", ""ALN""},"
48953,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,53,,"        {""Alsop"", ""ALSP"", ""ALSP""},"
48954,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,57,,"        {""Andrews"", ""ANTR"", ""ANTR""},"
48955,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,66,,"        {""Arnold"", ""ARNL"", ""ARNL""},"
48956,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,71,,"        {""Austin"", ""ASTN"", ""ASTN""},"
48957,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,75,,"        {""Babbitt"", ""PPT"", ""PPT""},"
48958,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,76,,"        {""Bachelor"", ""PXLR"", ""PKLR""},"
48959,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,76,,"        {""Bachelor"", ""PXLR"", ""PKLR""},"
48960,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,84,,"        {""Barker"", ""PRKR"", ""PRKR""},"
48961,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,86,,"        {""Barnard"", ""PRNR"", ""PRNR""},"
48962,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,87,,"        {""Barnes"", ""PRNS"", ""PRNS""},"
48963,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,89,,"        {""Barouxis"", ""PRKS"", ""PRKS""},"
48964,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,91,,"        {""Basley"", ""PSL"", ""PSL""},"
48965,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,92,,"        {""Basset"", ""PST"", ""PST""},"
48966,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,95,,"        {""Bates"", ""PTS"", ""PTS""},"
48967,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,103,,"        {""Beers"", ""PRS"", ""PRS""},"
48968,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,110,,"        {""Bergen"", ""PRJN"", ""PRKN""},"
48969,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,119,,"        {""Billings"", ""PLNK"", ""PLNK""},"
48970,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,121,,"        {""Binker"", ""PNKR"", ""PNKR""},"
48971,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,122,,"        {""Birdsill"", ""PRTS"", ""PRTS""},"
48972,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,124,,"        {""Black"", ""PLK"", ""PLK""},"
48973,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,128,,"        {""Bledsoe"", ""PLTS"", ""PLTS""},"
48974,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,131,,"        {""Blewett"", ""PLT"", ""PLT""},"
48975,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,133,,"        {""Bloetgoet"", ""PLTK"", ""PLTK""},"
48976,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,136,,"        {""Blount"", ""PLNT"", ""PLNT""},"
48977,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,137,,"        {""Bodine"", ""PTN"", ""PTN""},"
48978,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,138,,"        {""Bodman"", ""PTMN"", ""PTMN""},"
48979,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,146,,"        {""Bradder"", ""PRTR"", ""PRTR""},"
48980,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,152,,"        {""Brandish"", ""PRNT"", ""PRNT""},"
48981,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,153,,"        {""Braun"", ""PRN"", ""PRN""},"
48982,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,154,,"        {""Brecc"", ""PRK"", ""PRK""},"
48983,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,158,,"        {""Brigham"", ""PRM"", ""PRM""},"
48984,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,171,,"        {""Bulmer"", ""PLMR"", ""PLMR""},"
48985,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,173,,"        {""Burden"", ""PRTN"", ""PRTN""},"
48986,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,186,,"        {""Canada"", ""KNT"", ""KNT""},"
48987,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,190,,"        {""Card"", ""KRT"", ""KRT""},"
48988,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,204,,"        {""Chillingsworth"", ""XLNK"", ""XLNK""},"
48989,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,208,,"        {""Clark"", ""KLRK"", ""KLRK""},"
48990,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,210,,"        {""Cleare"", ""KLR"", ""KLR""},"
48991,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,211,,"        {""Clement"", ""KLMN"", ""KLMN""},"
48992,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,216,,"        {""Close"", ""KLS"", ""KLS""},"
48993,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,219,,"        {""Coburn"", ""KPRN"", ""KPRN""},"
48994,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,222,,"        {""Coffin"", ""KFN"", ""KFN""},"
48995,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,234,,"        {""Copperthwaite"", ""KPR0"", ""KPRT""},"
48996,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,236,,"        {""Corell"", ""KRL"", ""KRL""},"
48997,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,239,,"        {""Corneliszen"", ""KRNL"", ""KRNL""},"
48998,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,247,,"        {""Crane"", ""KRN"", ""KRN""},"
48999,./TargetProjects/commons-codec/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java,250,,"        {""Crispin"", ""KRSP"", ""KRSP""},"
