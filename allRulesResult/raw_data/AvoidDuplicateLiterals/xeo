118000,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,387,,"        new MockFile(""mock:/tbl/part1/delta_1_1/bucket_0"", 500, new byte[0]),"
118001,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,388,,"        new MockFile(""mock:/tbl/part1/delta_2_5/bucket_0"", 500, new byte[0]));"
118002,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,397,,"    assertEquals(""mock:/tbl/part1/delta_1_1"", delts.get(0).getPath().toString());"
118003,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidUtils.java,638,,"    assertsForAcidOperationalProperties(testObj, ""default"");"
118004,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestIOContextMap.java,72,,"            conf.set(Utilities.INPUT_NAME, ""Input "" + nextIx);"
118005,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,97,,"      new Text(""hive and hadoop""), null, null};"
118006,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,110,,"    dir = new Path(System.getProperty(""test.tmp.dir"", ""."") + ""/mapred"");"
118007,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,119,,"    bytesArray = new byte[][] {""123"".getBytes(StandardCharsets.UTF_8),"
118008,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,120,,"        ""456"".getBytes(StandardCharsets.UTF_8), ""789"".getBytes(StandardCharsets.UTF_8),"
118009,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,120,,"        ""456"".getBytes(StandardCharsets.UTF_8), ""789"".getBytes(StandardCharsets.UTF_8),"
118010,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,121,,"        ""1000"".getBytes(StandardCharsets.UTF_8), ""5.3"".getBytes(StandardCharsets.UTF_8),"
118011,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,121,,"        ""1000"".getBytes(StandardCharsets.UTF_8), ""5.3"".getBytes(StandardCharsets.UTF_8),"
118012,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,123,,"        ""NULL"".getBytes(StandardCharsets.UTF_8)};"
118013,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,178,,"                        RCFile.createMetadata(new Text(""apple""),"
118014,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,179,,"                                              new Text(""block""),"
118015,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/TestRCFile.java,235,,"          assertEquals(""Field "" + i, standardWritableData, expectedRecord_1[j]);"
118016,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,103,,"      {text(""Hello""), charW(""Hello"", 10), varcharW(""Hello"", 10)},"
118017,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,104,,"      {text(""world!""), charW(""world!"", 10), varcharW(""world!"", 10)},"
118018,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,329,,"        {""datatypes.c3"", ""double""},"
118019,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,337,,"        {""datatypes.c11"", ""float""},"
118020,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,338,,"        {""datatypes.c12"", ""bigint""},"
118021,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,343,,"        {""datatypes.c17"", ""timestamp""},"
118022,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,345,,"        {""datatypes.c19"", ""binary""},"
118023,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,416,,"        {""bigint1"", ""bigint""}"
118024,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestArrowColumnarBatchSerDe.java,547,,"        {""timestamp1"", ""timestamp""},"
118025,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/arrow/TestSerializer.java,34,,"    Serializer converter = new Serializer(new HiveConf(), ""attemptId"", typeInfos, fieldNames);"
118026,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestFixAcidKeyIndex.java,144,,"    String outputFilename = ""fixAcidKeyIndex.out"";"
118027,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,395,,"      return ""x,y"";"
118028,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,398,,"      return ""int:int"";"
118029,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,436,,"    conf.set(""mapred.input.dir"", ""a,b,c"");"
118030,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,465,,"    ""ETLSplitStrategy"", /* 1 files x 100 size for 1 splits */"
118031,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,477,,"    ""BISplitStrategy"", /* 10 files x 100 size for 1 splits */"
118032,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,524,,"              context, () -> fs, new MockPath(fs, ""mock:/a/b""), false, null);"
118033,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,566,,"        new MockFile(""mock:/a/b/part-00"", 1000, new byte[1]),"
118034,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,567,,"        new MockFile(""mock:/a/b/part-01"", 1000, new byte[1]),"
118035,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,570,,"        new MockFile(""mock:/a/b/part-04"", 1000, new byte[1]));"
118036,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,595,,"    conf.set(""bucket_count"", ""2"");"
118037,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,601,,"        new MockFile(""mock:/a/delta_000_001/bucket_000000"", 1000, new byte[1], new MockBlock(""host1"")),"
118038,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,607,,"            new MockPath(fs, ""mock:/a""), false, null);"
118039,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,621,,"    conf.set(hive_metastoreConstants.TABLE_IS_TRANSACTIONAL, ""true"");"
118040,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,629,,"        new MockFile(""mock:/a/b/000000_0"", 1000, new byte[1], new MockBlock(""host1"")),"
118041,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,630,,"        new MockFile(""mock:/a/b/000000_1"", 1000, new byte[1], new MockBlock(""host1"")));"
118042,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,649,,"        new MockFile(""mock:/a/base_0000001/bucket_00000"", 1000, new byte[1], new MockBlock(""host1"")),"
118043,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,650,,"        new MockFile(""mock:/a/base_0000001/bucket_00001"", 1000, new byte[1], new MockBlock(""host1"")));"
118044,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,667,,"        new MockFile(""mock:/a/delta_0000001_0000001_0000/bucket_00000"", 1000, new byte[1], new MockBlock(""host1"")),"
118045,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,780,,"      conf.set(""fs.defaultFS"", ""mock:///"");"
118046,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,780,,"      conf.set(""fs.defaultFS"", ""mock:///"");"
118047,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,781,,"      conf.set(""fs.mock.impl"", MockFileSystem.class.getName());"
118048,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,819,,"        new MockFile(""mock:/a/b/part-00"", 1000, new byte[1], new MockBlock(""host1"", ""host2"")),"
118049,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,821,,"        new MockFile(""mock:/a/b/part-02"", 1000, new byte[1], new MockBlock(""host1"", ""host2"")),"
118050,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,822,,"        new MockFile(""mock:/a/b/part-03"", 1000, new byte[1], new MockBlock(""host1"", ""host2"")),"
118051,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1236,,"      statistics = getStatistics(""mock"", getClass());"
118052,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1498,,"          FsPermission.createImmutable((short) 644), ""owen"", ""group"","
118053,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1685,,"        new MockFile(""mock:/a/file"", 500,"
118054,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1687,,"          new MockBlock(""host1-1"", ""host1-2"", ""host1-3""),"
118055,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1687,,"          new MockBlock(""host1-1"", ""host1-2"", ""host1-3""),"
118056,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1687,,"          new MockBlock(""host1-1"", ""host1-2"", ""host1-3""),"
118057,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1688,,"          new MockBlock(""host2-1"", ""host0"", ""host2-3""),"
118058,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1688,,"          new MockBlock(""host2-1"", ""host0"", ""host2-3""),"
118059,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1688,,"          new MockBlock(""host2-1"", ""host0"", ""host2-3""),"
118060,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1695,,"            fs.getFileStatus(new Path(""/a/file"")), null, null, true,"
118061,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1843,,"    properties.setProperty(""columns"", ""x,y"");"
118062,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1844,,"    properties.setProperty(""columns.types"", ""int:int"");"
118063,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1948,,"      throw new UnsupportedOperationException(""unsupported"");"
118064,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,1998,,"    properties.setProperty(""columns"", ""z,r"");"
118065,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,2313,,"    Path path = new Path(conf.get(""mapred.input.dir"") + ""/0_0"");"
118066,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,2644,,"        .addAllFieldNames(Arrays.asList(""url"", ""purchase"", ""cost"", ""store""))"
118067,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,2829,,"    writer = OrcFile.createWriter(new Path(mockPath + ""/0_1""),"
118068,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,2843,,"    assertTrue(""MockFS has stats. Read ops not expected to be -1"", readOpsBefore != -1);"
118069,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,2859,,"    conf.set(""fs.defaultFS"", ""file:///"");"
118070,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3204,,"    conf.set(""hive.orc.splits.include.file.footer"", ""false"");"
118071,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3204,,"    conf.set(""hive.orc.splits.include.file.footer"", ""false"");"
118072,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3243,,"      assertTrue(""OrcSplit is expected"", split instanceof OrcSplit);"
118073,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3245,,"      assertTrue(split.toString().contains(""start=3""));"
118074,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3246,,"      assertTrue(split.toString().contains(""hasFooter=false""));"
118075,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3247,,"      assertTrue(split.toString().contains(""hasBase=true""));"
118076,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3248,,"      assertTrue(split.toString().contains(""deltas=0""));"
118077,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3251,,"            "" orc splits."", ((OrcSplit) split).hasFooter());"
118078,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3316,,"      assertTrue(split.toString().contains(""hasFooter=true""));"
118079,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java,3888,,"      assertEquals(""row "" + r, r * 42, ((LongColumnVector) batch.cols[0]).vector[r]);"
118080,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestNewInputOutputFormat.java,79,,"        + File.separator + ""mapred"" + File.separator + ""local"");"
118081,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestNewInputOutputFormat.java,104,,"    Job job = new Job(conf, ""orc test"");"
118082,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestNewInputOutputFormat.java,114,,"        ""TestOrcFile."" + testCaseName.getMethodName() + "".txt"");"
118083,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestNewInputOutputFormat.java,114,,"        ""TestOrcFile."" + testCaseName.getMethodName() + "".txt"");"
118084,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestNewInputOutputFormat.java,119,,"    Path outputFilePath = new Path(outputPath, ""part-m-00000"");"
118085,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,339,,"        .getStructFieldRef(""int1"").getFieldObjectInspector();"
118086,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,349,,"        .getStructFieldRef(""string1"").getFieldObjectInspector();"
118087,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,399,,"    assertEquals(""bye"", st.getPrimitiveJavaObject(inner.getStructFieldData("
118088,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,403,,"    assertEquals(""sigh"", st.getPrimitiveJavaObject(inner.getStructFieldData("
118089,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,1254,,"    writer.addUserMetadata(""clobber"", byteBuf(1, 2, 3));"
118090,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,1322,,"            new TimestampWritableV2(Timestamp.valueOf(year + ""-05-05 12:34:56."""
118091,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcFile.java,1400,,"    value = HiveDecimal.create(""-5643.234"");"
118092,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,214,,"    setRow(row1, OrcRecordUpdater.INSERT_OPERATION, 10, 20, 20, 100, ""first"");"
118093,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,216,,"    setRow(row2, OrcRecordUpdater.INSERT_OPERATION, 10, 20, 30, 110, ""second"");"
118094,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,218,,"    setRow(row3, OrcRecordUpdater.INSERT_OPERATION, 10, 20, 40, 120, ""third"");"
118095,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,220,,"    setRow(row4, OrcRecordUpdater.INSERT_OPERATION, 40, 50, 60, 130, ""fourth"");"
118096,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,222,,"    setRow(row5, OrcRecordUpdater.INSERT_OPERATION, 40, 50, 61, 140, ""fifth"");"
118097,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,710,,"    ru.update(200, new MyRow(""update 1"", 0, 0, BUCKET_PROPERTY));"
118098,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,711,,"    ru.update(200, new MyRow(""update 2"", 2, 0, BUCKET_PROPERTY));"
118099,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,712,,"    ru.update(200, new MyRow(""update 3"", 3, 0, BUCKET_PROPERTY));"
118100,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1136,,"    String[] values= new String[]{""ignore.1"", ""0.1"", ""ignore.2"", ""ignore.3"","
118101,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1137,,"       ""2.0"", ""2.1"", ""3.0"", ""ignore.4"", ""ignore.5"", ""ignore.6""};"
118102,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1137,,"       ""2.0"", ""2.1"", ""3.0"", ""ignore.4"", ""ignore.5"", ""ignore.6""};"
118103,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1137,,"       ""2.0"", ""2.1"", ""3.0"", ""ignore.4"", ""ignore.5"", ""ignore.6""};"
118104,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1152,,"    values = new String[]{""0.0"", null, null, ""1.1"", null, null, null,"
118105,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1152,,"    values = new String[]{""0.0"", null, null, ""1.1"", null, null, null,"
118106,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1165,,"    values = new String[]{null, null, ""1.0"", null, null, null, null, ""3.1""};"
118107,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1165,,"    values = new String[]{null, null, ""1.0"", null, null, null, null, ""3.1""};"
118108,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcRawRecordMerger.java,1200,,"    job.set(""mapred.input.dir"", root.toString());"
118109,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,223,,"    assertEquals(15, reader.getRawDataSizeOfColumns(Lists.newArrayList(""bytes1"")));"
118110,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,224,,"    assertEquals(258, reader.getRawDataSizeOfColumns(Lists.newArrayList(""string1"")));"
118111,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,407,,"        new MiddleStruct(inner(1, ""bye""), inner(2, ""sigh"")),"
118112,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,407,,"        new MiddleStruct(inner(1, ""bye""), inner(2, ""sigh"")),"
118113,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,429,,"    assertEquals(8, reader.getRawDataSizeOfColumns(Lists.newArrayList(""boolean1"")));"
118114,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,430,,"    assertEquals(8, reader.getRawDataSizeOfColumns(Lists.newArrayList(""byte1"")));"
118115,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,431,,"    assertEquals(8, reader.getRawDataSizeOfColumns(Lists.newArrayList(""short1"")));"
118116,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,432,,"    assertEquals(8, reader.getRawDataSizeOfColumns(Lists.newArrayList(""int1"")));"
118117,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,433,,"    assertEquals(16, reader.getRawDataSizeOfColumns(Lists.newArrayList(""long1"")));"
118118,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,434,,"    assertEquals(8, reader.getRawDataSizeOfColumns(Lists.newArrayList(""float1"")));"
118119,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,435,,"    assertEquals(16, reader.getRawDataSizeOfColumns(Lists.newArrayList(""double1"")));"
118120,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,438,,"    assertEquals(483, reader.getRawDataSizeOfColumns(Lists.newArrayList(""list"")));"
118121,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,439,,"    assertEquals(384, reader.getRawDataSizeOfColumns(Lists.newArrayList(""map"")));"
118122,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,440,,"    assertEquals(396, reader.getRawDataSizeOfColumns(Lists.newArrayList(""middle"")));"
118123,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSerDeStats.java,442,,"    assertEquals(224, reader.getRawDataSizeOfColumns(Lists.newArrayList(""decimal1"")));"
118124,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestOrcSplitElimination.java,148,,"    conf.set(""hive.io.filter.expr.serialized"", sargStr);"
118125,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedORCReader.java,119,,"    String[] words = new String[] {""It"", ""was"", ""the"", ""best"", ""of"", ""times,"","
118126,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedORCReader.java,119,,"    String[] words = new String[] {""It"", ""was"", ""the"", ""best"", ""of"", ""times,"","
118127,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedOrcAcidRowBatchReader.java,108,,"      return ""field"";"
118128,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedOrcAcidRowBatchReader.java,564,,"        new String[] {""localhost""}, null, false, true, getDeltaMetaDataWithBucketFile(1),"
118129,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedOrcAcidRowBatchReader.java,1186,,"    checkPath(""00000_0_copy"", ""delete_delta_0000012_0000012_0000"", true);"
118130,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedOrcAcidRowBatchReader.java,1197,,"    checkPath(""delta_00000002_0000002/bucket_00001_1"", ""delete_delta_0000002_0000002"", false);"
118131,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestVectorizedOrcAcidRowBatchReader.java,1211,,"    checkPath(""delta_0000002_0000005_124/bucket_00001"", ""delete_delta_0000012_0000012_0000"", true);"
118132,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,45,,"        .repeated(INT32).named(""list_of_ints"")"
118133,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,69,,"    Assert.assertEquals(""Should have only one record"", 1, records.size());"
118134,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,70,,"    assertEquals(""Should match expected record"","
118135,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,168,,"                    .required(INT64).named(""count"")"
118136,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,170,,"                .named(""single_element_groups"")"
118137,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,216,,"                .repeated(INT32).named(""array"")"
118138,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,360,,"                    .required(DOUBLE).named(""latitude"")"
118139,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,361,,"                    .required(DOUBLE).named(""longitude"")"
118140,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,362,,"                    .named(""element"") // should not affect schema conversion"
118141,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,363,,"                .named(""locations"")"
118142,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestArrayCompatibility.java,420,,"                    .named(""list"")"
118143,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,212,,"    String fileSchema = ""message hive_schema {\n"""
118144,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,221,,"        + ""}\n"";"
118145,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,239,,"      startField(""int"", 0);"
118146,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,300,,"    String columnNames = ""structCol"";"
118147,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,308,,"        + ""  }\n"""
118148,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,342,,"    String columnNames = ""arrayCol"";"
118149,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,349,,"        + ""    }\n"""
118150,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,368,,"          startField(""array"", 0);"
118151,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,370,,"              startField(""array_element"", 0);"
118152,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,389,,"    String columnNames = ""mapCol"";"
118153,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,427,,"              startField(""key"", 0);"
118154,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestDataWritableWriter.java,430,,"              startField(""value"", 1);"
118155,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,49,,"            ""message hive_schema {\n"""
118156,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,57,,"            + ""}\n"");"
118157,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,136,,"    testConversion(""arrayCol"","
118158,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,139,,"            + ""  optional group arrayCol (LIST) {\n"""
118159,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,140,,"            + ""    repeated group bag {\n"""
118160,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,142,,"            + ""    }\n"""
118161,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,143,,"            + ""  }\n"""
118162,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,216,,"    testConversion(""structCol"","
118163,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,224,,"            + ""      }\n"""
118164,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,260,,"            + ""  optional group structCol {\n"""
118165,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,328,,"    testConversion(""mapCol"","
118166,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,331,,"            + ""  optional group mapCol (MAP) {\n"""
118167,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,332,,"            + ""    repeated group key_value (MAP_KEY_VALUE) {\n"""
118168,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestHiveSchemaConverter.java,333,,"            + ""      required binary key (UTF8);\n"""
118169,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,45,,"                    .required(BINARY).as(LogicalTypeAnnotation.stringType()).named(""key"")"
118170,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,46,,"                    .required(INT32).named(""value"")"
118171,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,47,,"                    .named(""key_value"")"
118172,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,48,,"                .named(""votes"")"
118173,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,61,,"            rc.addBinary(Binary.fromString(""lettuce""));"
118174,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,70,,"            rc.addBinary(Binary.fromString(""cabbage""));"
118175,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,90,,"    Assert.assertEquals(""Should have only one record"", 1, records.size());"
118176,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,91,,"    assertEquals(""Should match expected record"","
118177,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,130,,"            rc.addBinary(Binary.fromString(""kale""));"
118178,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,178,,"                            .optional(BINARY).as(LogicalTypeAnnotation.stringType()).named(""element"")"
118179,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,179,,"                            .named(""list"")"
118180,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,182,,"                .named(""examples"")"
118181,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,354,,"                .named(""matrix"")"
118182,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,415,,"                .named(""approx"")"
118183,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestMapStructures.java,478,,"                .named(""map_of_maps"")"
118184,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestParquetRowGroupFilter.java,68,,"    columnNames = ""intCol"";"
118185,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestParquetRowGroupFilter.java,69,,"    columnTypes = ""int"";"
118186,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestParquetSerDe.java,66,,"      arr[5] = new BytesWritable(""hive and hadoop and parquet. Big family."".getBytes(""UTF-8""));"
118187,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,178,,"    testListRead(isDictionaryEncoding, ""int"", elementNum);"
118188,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,179,,"    testListRead(isDictionaryEncoding, ""long"", elementNum);"
118189,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,180,,"    testListRead(isDictionaryEncoding, ""double"", elementNum);"
118190,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,181,,"    testListRead(isDictionaryEncoding, ""float"", elementNum);"
118191,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,182,,"    testListRead(isDictionaryEncoding, ""boolean"", elementNum);"
118192,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,183,,"    testListRead(isDictionaryEncoding, ""binary"", elementNum);"
118193,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedListColumnReader.java,184,,"    testListRead(isDictionaryEncoding, ""decimal"", elementNum);"
118194,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,70,,"          group.addGroup(""map_int32"").append(""key"", intValForMap).append(""value"", intValForMap);"
118195,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,70,,"          group.addGroup(""map_int32"").append(""key"", intValForMap).append(""value"", intValForMap);"
118196,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,171,,"    testMapRead(false, ""multipleLevel"", 1023);"
118197,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,176,,"    testMapRead(isDictionaryEncoding, ""int"", elementNum);"
118198,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,177,,"    testMapRead(isDictionaryEncoding, ""long"", elementNum);"
118199,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,178,,"    testMapRead(isDictionaryEncoding, ""double"", elementNum);"
118200,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,179,,"    testMapRead(isDictionaryEncoding, ""float"", elementNum);"
118201,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,180,,"    testMapRead(isDictionaryEncoding, ""binary"", elementNum);"
118202,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,181,,"    testMapRead(isDictionaryEncoding, ""decimal"", elementNum);"
118203,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedMapColumnReader.java,238,,"        + ""}\n"";"
118204,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,104,,"          + ""}\n"""
118205,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,290,,"          .append(""int32_field"", intVal)"
118206,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,291,,"          .append(""int64_field"", longVal)"
118207,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,309,,"      group.append(""value"", Binary.fromConstantByteArray(w.getInternalStorage()));"
118208,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,403,,"    conf.set(IOConstants.COLUMNS_TYPES, ""string"");"
118209,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,457,,"          assertEquals(""Failed at "" + c, getIntValue(isDictionaryEncoding, c), vector.vector[i], 0);"
118210,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,471,,"    conf.set(IOConstants.COLUMNS_TYPES, ""double"");"
118211,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,837,,"      assertEquals(""It doesn't exit at expected position"", nElements, c);"
118212,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java,849,,"    String schema = ""message hive_schema {\n"""
118213,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/convert/TestETypeConverter.java,68,,"        .as(LogicalTypeAnnotation.decimalType(2, 7)).named(""value"");"
118214,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/convert/TestETypeConverter.java,89,,"        getWritableFromPrimitiveConverter(createHiveTypeInfo(""bigint""), primitiveType, 2200);"
118215,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/convert/TestETypeConverter.java,219,,"        Binary.fromString(""this_is_a_value""));"
118216,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/convert/TestGetDataColumnReaderByType.java,53,,"                .as(LogicalTypeAnnotation.decimalType(2, 5)).named(""value""),"
118217,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,30,,"        ""message hive_schema {\n"""
118218,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,31,,"      + ""  optional group structCol {\n"""
118219,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,32,,"      + ""    optional int32 a;\n"""
118220,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,36,,"      + ""  }\n"""
118221,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,37,,"      + ""}\n"");"
118222,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestDataWritableReadSupport.java,39,,"    testConversion(""structCol"", ""struct<a:int>"", DataWritableReadSupport"
118223,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,50,,"            .nullSafeEquals(""stinger"", PredicateLeaf.Type.STRING, ""stinger"")"
118224,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,56,,"    columnTypes.put(""a"", TypeInfoFactory.getPrimitiveTypeInfo(""int""));"
118225,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,59,,"    columnTypes.put(""stinger"", TypeInfoFactory.getPrimitiveTypeInfo(""string""));"
118226,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,74,,"        .equals(""none"", PredicateLeaf.Type.LONG, 1L)"
118227,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,150,,"        .between(""bCol"", PredicateLeaf.Type.LONG, 1L, 5L)"
118228,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,189,,"    MessageType schema = MessageTypeParser.parseMessageType(""message test {"" +"
118229,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,337,,"        .lessThan(""a"", PredicateLeaf.Type.STRING, new HiveChar(""apple"", 10).toString())"
118230,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,340,,"        ""message test {required binary a;}"");"
118231,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,405,,"        .in(""a"", PredicateLeaf.Type.STRING, new HiveChar(""cherry"", 10).toString(), new HiveChar(""orange"", 10).toString())"
118232,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,405,,"        .in(""a"", PredicateLeaf.Type.STRING, new HiveChar(""cherry"", 10).toString(), new HiveChar(""orange"", 10).toString())"
118233,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,422,,"        .between(""a"", PredicateLeaf.Type.STRING, new HiveChar(""apple"", 10).toString(), new HiveChar(""pear"", 10).toString())"
118234,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,483,,"        "" required binary a; required binary b;"""
118235,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/read/TestParquetFilterPredicate.java,484,,"        + "" required binary c; required binary d;}"");"
118236,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestAbstractParquetMapInspector.java,58,,"    assertEquals(""Wrong size"", -1, inspector.getMapSize(null));"
118237,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestArrayWritableObjectInspector.java,50,,"    StructTypeInfo nestedStruct = createNestedStruct(TypeInfoFactory.getPrimitiveTypeInfo(""int""), 1000);"
118238,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestDeepParquetHiveMapInspector.java,70,,"    assertEquals(""Wrong result of inspection"", new IntWritable(1), inspector.getMapValueElement(map, new IntWritable(0)));"
118239,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestParquetHiveArrayInspector.java,45,,"    assertEquals(""Wrong size"", -1, inspector.getListLength(null));"
118240,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestParquetHiveArrayInspector.java,46,,"    assertNull(""Should be null"", inspector.getList(null));"
118241,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestParquetTimestampUtils.java,41,,"  public static final ZoneId GMT = ZoneId.of(""GMT"");"
118242,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestParquetTimestampsHive2Compatibility.java,63,,"  @ParameterizedTest(name = ""{0}"")"
118243,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestParquetTimestampsHive2Compatibility.java,64,,"  @MethodSource(""generateTimestamps"")"
118244,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/serde/TestStandardParquetHiveMapInspector.java,69,,"    assertEquals(""Wrong result of inspection"", new IntWritable(1), inspector.getMapValueElement(map, new IntWritable(0)));"
118245,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,99,,"    String exprStr = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?> \n"" +"
118246,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,100,,"        ""<java version=\""1.6.0_31\"" class=\""java.beans.XMLDecoder\""> \n"" +"
118247,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,101,,"        "" <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118248,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,102,,"        ""  <void property=\""children\""> \n"" +"
118249,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,103,,"        ""   <object class=\""java.util.ArrayList\""> \n"" +"
118250,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,104,,"        ""    <void method=\""add\""> \n"" +"
118251,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,105,,"        ""     <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118252,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,106,,"        ""      <void property=\""children\""> \n"" +"
118253,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,107,,"        ""       <object class=\""java.util.ArrayList\""> \n"" +"
118254,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,108,,"        ""        <void method=\""add\""> \n"" +"
118255,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,109,,"        ""         <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118256,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,110,,"        ""          <void property=\""children\""> \n"" +"
118257,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,111,,"        ""           <object class=\""java.util.ArrayList\""> \n"" +"
118258,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,112,,"        ""            <void method=\""add\""> \n"" +"
118259,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,113,,"        ""             <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118260,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,114,,"        ""              <void property=\""children\""> \n"" +"
118261,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,115,,"        ""               <object class=\""java.util.ArrayList\""> \n"" +"
118262,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,116,,"        ""                <void method=\""add\""> \n"" +"
118263,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,117,,"        ""                 <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118264,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,118,,"        ""                  <void property=\""children\""> \n"" +"
118265,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,119,,"        ""                   <object class=\""java.util.ArrayList\""> \n"" +"
118266,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,120,,"        ""                    <void method=\""add\""> \n"" +"
118267,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,121,,"        ""                     <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeGenericFuncDesc\""> \n"" +"
118268,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,122,,"        ""                      <void property=\""children\""> \n"" +"
118269,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,123,,"        ""                       <object class=\""java.util.ArrayList\""> \n"" +"
118270,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,124,,"        ""                        <void method=\""add\""> \n"" +"
118271,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,128,,"        ""                            <void method=\""add\""> \n"" +"
118272,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,132,,"        ""                                <void method=\""add\""> \n"" +"
118273,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,136,,"        ""                                  </void> \n"" +"
118274,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,140,,"        ""                                  <void property=\""typeInfo\""> \n"" +"
118275,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,147,,"        ""                                 </object> \n"" +"
118276,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,148,,"        ""                                </void> \n"" +"
118277,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,160,,"        ""                              </void> \n"" +"
118278,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,164,,"        ""                              <void property=\""typeInfo\""> \n"" +"
118279,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,171,,"        ""                             </object> \n"" +"
118280,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,172,,"        ""                            </void> \n"" +"
118281,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,210,,"        ""                           </object> \n"" +"
118282,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,211,,"        ""                          </void> \n"" +"
118283,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,215,,"        ""                          <void property=\""typeInfo\""> \n"" +"
118284,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,218,,"        ""                         </object> \n"" +"
118285,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,219,,"        ""                        </void> \n"" +"
118286,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,257,,"        ""                       </object> \n"" +"
118287,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,258,,"        ""                      </void> \n"" +"
118288,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,259,,"        ""                      <void property=\""genericUDF\""> \n"" +"
118289,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,262,,"        ""                      <void property=\""typeInfo\""> \n"" +"
118290,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,263,,"        ""                       <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118291,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,265,,"        ""                     </object> \n"" +"
118292,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,266,,"        ""                    </void> \n"" +"
118293,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,272,,"        ""                         <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\""> \n"" +"
118294,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,273,,"        ""                          <void property=\""column\""> \n"" +"
118295,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,274,,"        ""                           <string>id</string> \n"" +"
118296,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,276,,"        ""                          <void property=\""tabAlias\""> \n"" +"
118297,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,277,,"        ""                           <string>orc_people</string> \n"" +"
118298,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,289,,"        ""                         <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\""> \n"" +"
118299,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,293,,"        ""                          <void property=\""value\""> \n"" +"
118300,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,308,,"        ""                   </object> \n"" +"
118301,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,309,,"        ""                  </void> \n"" +"
118302,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,310,,"        ""                  <void property=\""genericUDF\""> \n"" +"
118303,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,313,,"        ""                  <void property=\""typeInfo\""> \n"" +"
118304,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,314,,"        ""                   <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118305,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,316,,"        ""                 </object> \n"" +"
118306,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,317,,"        ""                </void> \n"" +"
118307,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,323,,"        ""                     <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\""> \n"" +"
118308,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,325,,"        ""                       <object idref=\""PrimitiveTypeInfo2\""/> \n"" +"
118309,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,327,,"        ""                      <void property=\""value\""> \n"" +"
118310,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,333,,"        ""                     <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\""> \n"" +"
118311,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,334,,"        ""                      <void property=\""column\""> \n"" +"
118312,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,335,,"        ""                       <string>id</string> \n"" +"
118313,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,337,,"        ""                      <void property=\""tabAlias\""> \n"" +"
118314,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,338,,"        ""                       <string>orc_people</string> \n"" +"
118315,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,355,,"        ""               </object> \n"" +"
118316,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,356,,"        ""              </void> \n"" +"
118317,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,357,,"        ""              <void property=\""genericUDF\""> \n"" +"
118318,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,360,,"        ""              <void property=\""typeInfo\""> \n"" +"
118319,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,361,,"        ""               <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118320,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,363,,"        ""             </object> \n"" +"
118321,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,364,,"        ""            </void> \n"" +"
118322,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,370,,"        ""                 <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\""> \n"" +"
118323,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,371,,"        ""                  <void property=\""column\""> \n"" +"
118324,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,374,,"        ""                  <void property=\""tabAlias\""> \n"" +"
118325,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,375,,"        ""                   <string>orc_people</string> \n"" +"
118326,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,378,,"        ""                   <object idref=\""PrimitiveTypeInfo2\""/> \n"" +"
118327,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,383,,"        ""                 <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\""> \n"" +"
118328,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,387,,"        ""                  <void property=\""value\""> \n"" +"
118329,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,402,,"        ""           </object> \n"" +"
118330,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,403,,"        ""          </void> \n"" +"
118331,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,404,,"        ""          <void property=\""genericUDF\""> \n"" +"
118332,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,407,,"        ""          <void property=\""typeInfo\""> \n"" +"
118333,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,408,,"        ""           <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118334,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,410,,"        ""         </object> \n"" +"
118335,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,411,,"        ""        </void> \n"" +"
118336,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,417,,"        ""             <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\""> \n"" +"
118337,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,419,,"        ""               <object idref=\""PrimitiveTypeInfo2\""/> \n"" +"
118338,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,421,,"        ""              <void property=\""value\""> \n"" +"
118339,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,427,,"        ""             <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\""> \n"" +"
118340,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,428,,"        ""              <void property=\""column\""> \n"" +"
118341,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,429,,"        ""               <string>id</string> \n"" +"
118342,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,431,,"        ""              <void property=\""tabAlias\""> \n"" +"
118343,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,432,,"        ""               <string>orc_people</string> \n"" +"
118344,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,449,,"        ""       </object> \n"" +"
118345,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,450,,"        ""      </void> \n"" +"
118346,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,451,,"        ""      <void property=\""genericUDF\""> \n"" +"
118347,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,452,,"        ""       <object class=\""org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPOr\""/> \n"" +"
118348,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,454,,"        ""      <void property=\""typeInfo\""> \n"" +"
118349,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,455,,"        ""       <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118350,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,457,,"        ""     </object> \n"" +"
118351,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,458,,"        ""    </void> \n"" +"
118352,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,507,,"        ""               <string>first_name</string> \n"" +"
118353,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,513,,"        ""               <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118354,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,547,,"        ""   </object> \n"" +"
118355,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,548,,"        ""  </void> \n"" +"
118356,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,549,,"        ""  <void property=\""genericUDF\""> \n"" +"
118357,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,552,,"        ""  <void property=\""typeInfo\""> \n"" +"
118358,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,553,,"        ""   <object idref=\""PrimitiveTypeInfo1\""/> \n"" +"
118359,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,555,,"        "" </object> \n"" +"
118360,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,556,,"        ""</java> \n"";"
118361,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,564,,"        MessageTypeParser.parseMessageType(""message test { required int32 id;"" +"
118362,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,565,,"            "" required binary first_name; }"");"
118363,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,568,,"    columnTypes.put(""id"", TypeInfoFactory.getPrimitiveTypeInfo(""int""));"
118364,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,569,,"    columnTypes.put(""first_name"", TypeInfoFactory.getPrimitiveTypeInfo(""string""));"
118365,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,569,,"    columnTypes.put(""first_name"", TypeInfoFactory.getPrimitiveTypeInfo(""string""));"
118366,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,698,,"        ""                <void property=\""typeName\""> \n"" +"
118367,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,718,,"        ""                   <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118368,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,808,,"        ""         <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc\""> \n"" +"
118369,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,809,,"        ""          <void property=\""column\""> \n"" +"
118370,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,810,,"        ""           <string>id</string> \n"" +"
118371,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,812,,"        ""          <void property=\""tabAlias\""> \n"" +"
118372,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,813,,"        ""           <string>orc_people</string> \n"" +"
118373,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,816,,"        ""           <object idref=\""PrimitiveTypeInfo2\""/> \n"" +"
118374,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,821,,"        ""         <object class=\""org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc\""> \n"" +"
118375,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,825,,"        ""          <void property=\""value\""> \n"" +"
118376,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,976,,"        ""                        <void property=\""typeName\""> \n"" +"
118377,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1158,,"        ""           <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118378,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1205,,"        ""       <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118379,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1280,,"        ""   <object class=\""org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPAnd\""/> \n"" +"
118380,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1813,,"    assertEquals(""leaf-0"","
118381,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1868,,"        ""                           <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118382,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1878,,"        ""                       <object class=\""org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan\""/> \n"" +"
118383,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestConvertAstToSearchArg.java,1949,,"        ""                       <object idref=\""PrimitiveTypeInfo0\""/> \n"" +"
118384,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java,92,,"    assertEquals(""leaf-1"", SearchArgumentImpl.BuilderImpl.pushDownNot(leaf(1))"
118385,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java,124,,"    assertEquals(""YES_NO_NULL"", SearchArgumentImpl.BuilderImpl.pushDownNot("
118386,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java,135,,"    assertEquals(""(and leaf-1 leaf-2)"","
118387,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager.java,92,,"    txnMgr.openTxn(ctx, ""fred"");"
118388,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,95,,"    txnMgr.acquireLocks(driver.getPlan(), ctx, ""Fifer"");"
118389,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,97,,"    Assert.assertEquals(""Unexpected lock count"", 1, locks.size());"
118390,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,99,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""T"", null, locks);"
118391,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,105,,"    ((DbTxnManager)txnMgr2).acquireLocks(driver.getPlan(), ctx, ""Fiddler"", false);"
118392,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,130,,"        ""clustered by(b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"");"
118393,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,172,,"    Assert.assertEquals(""Lock remained"", 0, getLocks().size());"
118394,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,247,,"    driver.compileAndRespond(""drop table if exists T6"", true);"
118395,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,280,,"    checkLock(LockType.SHARED_WRITE, LockState.ACQUIRED, ""temp"", ""T7"", null, locks);"
118396,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,312,,"    ((DbTxnManager) txnMgr2).acquireLocks(driver.getPlan(), ctx, ""Practical"", false); //waits for SS lock on T8 from fifer"
118397,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,369,,"    dropTable(new String[] {""TAB_BLOCKED""});"
118398,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,371,,"        ""clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"");"
118399,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,482,,"    int count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""COMPLETED_TXN_COMPONENTS\"" "" +"
118400,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,495,,"    count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""TXN_COMPONENTS\"" "" +"
118401,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,531,,"    count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""COMPACTION_QUEUE\"" "" +"
118402,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,542,,"    count = TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""COMPLETED_COMPACTIONS\"" "" +"
118403,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,548,,"        ""where \""CQ_DATABASE\""='temp' and \""CQ_TABLE\""='t12p' and \""CQ_PARTITION\""='ds=tomorrow/hour=2' "" +"
118404,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,671,,"    dropTable(new String[] {""acidPart"", ""nonAcidPart""});"
118405,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,690,,"    checkLock(LockType.EXCLUSIVE, LockState.ACQUIRED, ""default"", ""nonAcidPart"", ""p=1"", locks);"
118406,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,732,,"    dropTable(new String[] {""tab_acid"", ""tab_not_acid""});"
118407,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,732,,"    dropTable(new String[] {""tab_acid"", ""tab_not_acid""});"
118408,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,744,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""tab_acid"", ""p=bar"", locks);"
118409,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,745,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""tab_acid"", ""p=foo"", locks);"
118410,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,746,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""tab_not_acid"", ""np=blah"", locks);"
118411,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,747,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""tab_not_acid"", ""np=doh"", locks);"
118412,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,906,,"        ""clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"");"
118413,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,947,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""db1"", ""t14"", ""ds=today"", locks);"
118414,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,947,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""db1"", ""t14"", ""ds=today"", locks);"
118415,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,949,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""db2"", ""t15"", null, locks);"
118416,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,949,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""db2"", ""t15"", null, locks);"
118417,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1000,,"    dropTable(new String[] {""TAB_PART""});"
118418,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1001,,"    driver.run(""create table if not exists TAB_PART (a int, b int) "" +"
118419,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1002,,"        ""partitioned by (p string) clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"");"
118420,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1009,,"    driver.compileAndRespond(""update TAB_PART set b = 7 where p = 'blah'"", true);"
118421,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1026,,"    dropTable(new String[] {""TAB_PART"", ""TAB2""});"
118422,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1062,,"    checkLock(LockType.SHARED_WRITE, LockState.ACQUIRED, ""default"", ""TAB_PART"", ""p=blah"", locks);"
118423,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1091,,"    Assert.assertNotNull(""Didn't get exception"", expectedException);"
118424,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1093,,"    Assert.assertEquals(""Exception msg didn't match"","
118425,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1105,,"    Assert.assertEquals(0, TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""WRITE_SET\""""));"
118426,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1111,,"    txnMgr.openTxn(ctx, ""Long Running"");"
118427,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1132,,"    AllocateTableWriteIdsRequest rqst = new AllocateTableWriteIdsRequest(""default"", ""tab2"");"
118428,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1161,,"        ""default"", ""tab2"", Collections.singletonList(""p=two""));"
118429,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1165,,"    Assert.assertEquals(""WRITE_SET mismatch: "" + TestTxnDbUtil.queryToString(conf, ""select * from \""WRITE_SET\""""),"
118430,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1165,,"    Assert.assertEquals(""WRITE_SET mismatch: "" + TestTxnDbUtil.queryToString(conf, ""select * from \""WRITE_SET\""""),"
118431,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1310,,"    checkLock(LockType.SHARED_WRITE, LockState.ACQUIRED, ""default"", ""TAB2"", ""p=one"", locks);"
118432,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1340,,"    Assert.assertEquals(""COMPLETED_TXN_COMPONENTS mismatch: "" +"
118433,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1341,,"        TestTxnDbUtil.queryToString(conf, ""select * from \""COMPLETED_TXN_COMPONENTS\""""),"
118434,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1348,,"    driver.run(""create table if not exists tab1 (a int, b int) partitioned by (p string) "" +"
118435,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1350,,"    driver.run(""insert into tab1 partition(p)(a,b,p) values(1,1,'one'),(2,2,'two')""); //txnid:4"
118436,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1356,,"    checkLock(LockType.SHARED_WRITE, LockState.ACQUIRED, ""default"", ""TAB1"", ""p=two"", locks);"
118437,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1371,,"    writeId = txnMgr2.getTableWriteId(""default"", ""tab1"");"
118438,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1402,,"        ""select count(*) from \""COMPLETED_TXN_COMPONENTS\"" where \""CTC_TABLE\""='tab1' and \""CTC_PARTITION\"" is not null""));"
118439,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1518,,"        ""select count(*) from \""COMPLETED_TXN_COMPONENTS\"" where \""CTC_TXNID\""="" + (idTxnUpdate1 - 1) +"
118440,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1809,,"    dropTable(new String[]{""target"", ""source"", ""source2""});"
118441,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1809,,"    dropTable(new String[]{""target"", ""source"", ""source2""});"
118442,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1809,,"    dropTable(new String[]{""target"", ""source"", ""source2""});"
118443,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1812,,"    driver.run(""create table target (a int, b int) "" +"
118444,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1814,,"        ""stored as orc TBLPROPERTIES ('transactional'='true')"");"
118445,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1842,,"        LockState.ACQUIRED, ""default"", ""target"", ""p=1/q=2"", locks);"
118446,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1844,,"        LockState.ACQUIRED, ""default"", ""target"", ""p=1/q=3"", locks);"
118447,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1846,,"        LockState.ACQUIRED, ""default"", ""target"", ""p=2/q=2"", locks);"
118448,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1889,,"        ""TXN_COMPONENTS mismatch("" + JavaUtils.txnIdToString(txnId1) + ""): "" +"
118449,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1889,,"        ""TXN_COMPONENTS mismatch("" + JavaUtils.txnIdToString(txnId1) + ""): "" +"
118450,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1890,,"        TestTxnDbUtil.queryToString(conf, ""select * from \""TXN_COMPONENTS\""""),"
118451,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1892,,"        TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""TXN_COMPONENTS\"" where \""TC_TXNID\""="" + txnId1));"
118452,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1913,,"            "" and \""TC_OPERATION_TYPE\""='u'""));"
118453,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1929,,"        ""COMPLETED_TXN_COMPONENTS mismatch("" + JavaUtils.txnIdToString(txnId1) + ""): "" +"
118454,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1934,,"        ""WRITE_SET mismatch("" + JavaUtils.txnIdToString(txnId1) + ""): "" +"
118455,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1937,,"        TestTxnDbUtil.countQueryAgent(conf, ""select count(*) from \""WRITE_SET\"" where \""WS_TXNID\""="" + txnId1 +"
118456,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,1938,,"            "" and \""WS_OPERATION_TYPE\""='u'""));"
118457,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2089,,"    driver.run(""create table source (a int, b int)"");"
118458,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2199,,"    driver.run(""insert into target values (1,2), (3,4)"");"
118459,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2209,,"    driver.compileAndRespond(""merge into target t using source s on t.a = s.a "" +"
118460,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2210,,"        ""when not matched then insert values (s.a, s.b)"");"
118461,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2289,,"    driver.run(""select * from target"");"
118462,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2801,,"    txnMgr2.openTxn(ctx, ""Fidler"");"
118463,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,2927,,"    checkLock(LockType.SHARED_READ, LockState.ACQUIRED, ""default"", ""T7"", ""p=2"", locks);"
118464,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,3006,,"    ValidWriteIdList testValidWriteIds = txnMgr2.getValidWriteIds(Collections.singletonList(""temp.t7""), testValidTxns)"
118465,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManager2.java,3009,,"    Assert.assertTrue(""Invalid write ID list"", testValidWriteIds.isWriteIdValid(baseWriteId));"
118466,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,46,,"    driver.run((""drop table if exists gap""));"
118467,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,47,,"    driver.run(""create table gap (a int, b int) "" + ""stored as orc TBLPROPERTIES ('transactional'='true')"");"
118468,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,47,,"    driver.run(""create table gap (a int, b int) "" + ""stored as orc TBLPROPERTIES ('transactional'='true')"");"
118469,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,49,,"    driver.compileAndRespond(""select * from gap"");"
118470,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,54,,"    driver2.compileAndRespond(""insert into gap values(1,2)"");"
118471,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestDbTxnManagerIsolationProperties.java,56,,"    Assert.assertTrue(""Sequence number goes onward"", second > first);"
118472,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestEmbeddedLockManager.java,50,,"    HiveLockObject path1sel1 = lockObj(path1, ""select"");"
118473,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestHiveLockObject.java,33,,"    HiveLockObjectData data1 = new HiveLockObjectData(""ID1"", ""SHARED"", ""1997-07-01"","
118474,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestHiveLockObject.java,33,,"    HiveLockObjectData data1 = new HiveLockObjectData(""ID1"", ""SHARED"", ""1997-07-01"","
118475,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/lockmgr/TestHiveLockObject.java,33,,"    HiveLockObjectData data1 = new HiveLockObjectData(""ID1"", ""SHARED"", ""1997-07-01"","
118476,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestLog4j2Appenders.java,72,,"    logger.info(""Test"");"
118477,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,42,,"      TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));"
118478,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,47,,"      fs1.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-10-10_0.log.gz""));"
118479,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,49,,"      fs2.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-10-15_0.log.gz""));"
118480,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,51,,"      fs3.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-10-15_1.log.gz""));"
118481,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,53,,"      fs4.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-10-35_0.log.gz""));"
118482,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,55,,"      fs5.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-11-15_0.log.gz""));"
118483,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,57,,"      fs6.setPath(new Path(""s3a://bucket/logs/dt=2019-01-01/ns=foo/app=hs2/2019-01-03-11-35_0.log.gz""));"
118484,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,182,,"        Timestamp.valueOf(""2019-01-03 10:15:03.600""), Timestamp.valueOf(""2019-01-03 11:15:04.320"")).build();"
118485,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/log/TestSyslogInputFormat.java,182,,"        Timestamp.valueOf(""2019-01-03 10:15:03.600""), Timestamp.valueOf(""2019-01-03 11:15:04.320"")).build();"
118486,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHive.java,768,,"      part_spec.put(""ds"", ""2008-04-08"");"
118487,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHive.java,774,,"        assertTrue(""Unable to create parition for table: "" + tableName, false);"
118488,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveCopyFiles.java,77,,"    sourceFolder.newFile(""000000_0"");"
118489,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveCopyFiles.java,78,,"    sourceFolder.newFile(""000001_0"");"
118490,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveCopyFiles.java,79,,"    sourceFolder.newFile(""000000_0.gz"");"
118491,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveCopyFiles.java,80,,"    sourceFolder.newFile(""000001_0.gz"");"
118492,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveCopyFiles.java,90,,"      assertTrue(""Hive.copyFiles() threw an unexpected exception."", false);"
118493,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java,225,,"        partDateName + ""=2017-01-01/"" + partCityName + ""=paloalto/fakePartCol=fakepartValue"");"
118494,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java,282,,"        partDateName + ""=2017-01-01/"" + partCityName + ""=paloalto"");"
118495,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java,285,,"    addFolderToPath(fs, newPart.toString(), ""delta_0000001_0000001_0000"");"
118496,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestHiveMetaStoreChecker.java,564,,"    assertTrue(""Expected MetastoreException"", exception instanceof MetastoreException);"
118497,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,59,,"    runStatementOnDriver(""drop table if exists "" + acidTblPartMsck);"
118498,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,62,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(1,1,'p1'),(2,2,'p1'),(3,3,'p1')"");"
118499,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,62,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(1,1,'p1'),(2,2,'p1'),(3,3,'p1')"");"
118500,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,65,,"    List<String> r = runStatementOnDriver(""select a, b from "" + Table.ACIDTBLPART + "" where p='p1' order by a, b"");"
118501,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,70,,"    runStatementOnDriver(""create table "" + acidTblPartMsck"
118502,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,71,,"        + "" (a int, b int) partitioned by (p string) clustered by (a) into 2 buckets"""
118503,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,72,,"        + "" stored as orc TBLPROPERTIES ('transactional'='true')"");"
118504,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,76,,"    FileUtil.copy(fs, new Path(getWarehouseDir() + ""/"" + Table.ACIDTBLPART.toString().toLowerCase() + ""/p=p1""), fs,"
118505,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,82,,"    runStatementOnDriver(""msck repair table "" + acidTblPartMsck);"
118506,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,101,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(4,4,'p1')"");"
118507,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,102,,"    runStatementOnDriver(""insert into "" + Table.ACIDTBLPART + "" partition(p) values(1,2,'p2'),(2,3,'p2'),(3,4,'p2')"");"
118508,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,104,,"    List<String> r = runStatementOnDriver(""select a, b from "" + Table.ACIDTBLPART + "" order by a, b"");"
118509,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,116,,"    FileUtil.copy(fs, new Path(getWarehouseDir() + ""/"" + Table.ACIDTBLPART.toString().toLowerCase() + ""/p=p2""), fs,"
118510,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMSCKRepairOnAcid.java,229,,"    runStatementOnDriver(""alter table "" + Table.ACIDTBLPART + "" partition (p='p1') compact 'minor'"");"
118511,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestMaterializedViewsCache.java,78,,"    defaultMV1 = getTable(""default"", ""mat1"", ""select col0 from t1 where col0 = 'foo'"");"
118512,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientAddPartitionsTempTable.java,133,,"    assertEquals(""The partition location is not correct."", tableLocation + ""/year=2017"", sd.getLocation());"
118513,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientExchangePartitionsTempTable.java,109,,"    parts[0] = createPartition(source, Lists.newArrayList(""2019"", ""may"", ""11""),"
118514,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientExchangePartitionsTempTable.java,130,,"    parts[0] = createPartition(source, Lists.newArrayList(""2019"", ""march"", ""15""),"
118515,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientExchangePartitionsTempTable.java,168,,"    partitionSpecs.put(YEAR_COL_NAME, ""2017"");"
118516,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientExchangePartitionsTempTable.java,299,,"    Table nonTempTable = createNonTempTable(DB_NAME, ""nonTempTable"", getYearMonthAndDayPartCols(), null);"
118517,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientListPartitionsTempTable.java,263,,"        Lists.newArrayList(""2017"", ""10"", defaultPartitionName));"
118518,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/TestSessionHiveMetastoreClientListPartitionsTempTable.java,273,,"        e.val(""2017"").strCol(""yyyy"").pred("">="", 2).build(), t);"
118519,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,118,,"    assertEquals(""test_rp_1"", jsonTree.get(""name"").asText());"
118520,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,119,,"    assertTrue(jsonTree.get(""parallelism"").isNull());"
118521,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,121,,"    assertTrue(jsonTree.get(""pools"").isArray());"
118522,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,130,,"    addPool(fullRp, ""pool2"", 0.7, 7, ""fcfs"");"
118523,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,152,,"    assertTrue(pool2.get(""triggers"").isArray());"
118524,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/metadata/formatting/TestJsonRPFormatter.java,157,,"    assertTrue(type0.get(""values"").isArray());"
118525,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestColumnPrunerProcCtx.java,67,,"    names.add(""col1"");"
118526,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestColumnPrunerProcCtx.java,81,,"    ExprNodeDesc colDesc = new ExprNodeColumnDesc(col3Type, ""root"", ""test"", false);"
118527,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestColumnPrunerProcCtx.java,81,,"    ExprNodeDesc colDesc = new ExprNodeColumnDesc(col3Type, ""root"", ""test"", false);"
118528,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestColumnPrunerProcCtx.java,84,,"    final List<FieldNode> paths = Arrays.asList(new FieldNode(""_col0""));"
118529,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestGenMapRedUtilsCreateConditionalTask.java,77,,"    final Path condInputPath = new Path(""s3a://bucket/scratch/-ext-10000"");"
118530,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestGenMapRedUtilsCreateConditionalTask.java,78,,"    final Path condOutputPath = new Path(""s3a://bucket/scratch/-ext-10002"");"
118531,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestGenMapRedUtilsUsePartitionColumnsPositive.java,35,,"      {""p1/p2/p3"",""t1:t2:t3"",""p2"",""p2"",""t2""},"
118532,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/TestGenMapRedUtilsUsePartitionColumnsPositive.java,35,,"      {""p1/p2/p3"",""t1:t2:t3"",""p2"",""p2"",""t2""},"
118533,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/calcite/rules/TestHiveReduceExpressionsWithStatsRule.java,127,,"      ""  LogicalTableScan(table=[[]])\n"";"
118534,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/calcite/rules/TestHiveReduceExpressionsWithStatsRule.java,128,,"    assertEquals(""missing literal"", expected, RelOptUtil.toString(optimizedRelNode));"
118535,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/calcite/rules/TestHiveReduceExpressionsWithStatsRule.java,139,,"                    builder.field(""_str"")"
118536,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/listbucketingpruner/TestDynamicMultiDimeCollection.java,36,,"  private static String DEF_DIR = ""default"";"
118537,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/physical/TestVectorizer.java,59,,"    columns.add(""col1"");"
118538,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/physical/TestVectorizer.java,60,,"    columns.add(""col2"");"
118539,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/ppr/TestPositivePartitionPrunerCompactExpr.java,58,,"      {and(falseExpr, null), ""false""},"
118540,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/ppr/TestPositivePartitionPrunerCompactExpr.java,70,,"      {and(trueExpr, trueExpr), ""true""},"
118541,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/topnkey/TestCommonKeyPrefix.java,55,,"    ExprNodeColumnDesc childCol0 = exprNodeColumnDesc(""_col0"");"
118542,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/topnkey/TestCommonKeyPrefix.java,56,,"    ExprNodeColumnDesc childCol1 = exprNodeColumnDesc(""_col1"");"
118543,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/topnkey/TestCommonKeyPrefix.java,57,,"    ExprNodeColumnDesc parentCol0 = exprNodeColumnDesc(""KEY._col0"");"
118544,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/optimizer/topnkey/TestCommonKeyPrefix.java,58,,"    ExprNodeColumnDesc parentCol1 = exprNodeColumnDesc(""KEY._col1"");"
118545,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestColumnAccess.java,64,,"    List<String> cols = columnAccessInfo.getTableToColumnAccessMap().get(""default@t1"");"
118546,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestColumnAccess.java,67,,"    Assert.assertNotNull(cols.contains(""id1""));"
118547,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestColumnAccess.java,68,,"    Assert.assertNotNull(cols.contains(""name1""));"
118548,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestColumnAccess.java,93,,"    cols = columnAccessInfo.getTableToColumnAccessMap().get(""default@t2"");"
118549,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestColumnAccess.java,96,,"    Assert.assertNotNull(cols.contains(""id2""));"
118550,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestEximUtil.java,46,,"        ""10.3"", // current code version"
118551,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestEximUtil.java,47,,"        ""10.4"", // data's version"
118552,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestEximUtil.java,75,,"          ""9.9"", // current code version"
118553,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestHiveDecimalParse.java,64,,"      Assert.assertTrue(""Got "" + cpe.getResponseCode() + "", expected not zero"", cpe.getResponseCode() != 0);"
118554,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestHiveDecimalParse.java,64,,"      Assert.assertTrue(""Got "" + cpe.getResponseCode() + "", expected not zero"", cpe.getResponseCode() != 0);"
118555,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestHiveDecimalParse.java,69,,"    Assert.assertTrue(""Expected to receive an exception"", false);"
118556,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestMacroSemanticAnalyzer.java,68,,"    analyze(parse(""DROP TEMPORARY MACRO SOME_MACRO""));"
118557,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestReplicationSemanticAnalyzer.java,60,,"    assertEquals(""TOK_TABLEPROPERTY"", configOne.getText());"
118558,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestSemanticAnalyzer.java,41,,"    checkNormalization(""date"", ""2010-01-01"", ""2010-01-01"", Date.valueOf(""2010-01-01""));"
118559,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestSemanticAnalyzer.java,41,,"    checkNormalization(""date"", ""2010-01-01"", ""2010-01-01"", Date.valueOf(""2010-01-01""));"
118560,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/TestSemanticAnalyzer.java,43,,"    checkNormalization(""date"", ""2010-1-1"", ""2010-01-01"", Date.valueOf(""2010-01-01""));"
118561,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java,127,,"    Assert.assertNotNull(""Role should not be null"", roleDesc);"
118562,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java,145,,"    DDLWork work = analyze(""GRANT "" + SELECT + "" ON TABLE "" + TABLE + "" TO USER "" + USER);"
118563,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java,147,,"    Assert.assertNotNull(""Grant should not be null"", grantDesc);"
118564,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java,155,,"    Assert.assertTrue(""Expected table"", grantDesc.getPrivilegeSubject().getTable());"
118565,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/authorization/TestHiveAuthorizationTaskFactory.java,256,,"    Assert.assertFalse(""With admin option is not specified"", grantDesc.isGrantOption());"
118566,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,64,,"    conf.set(Constants.SCHEDULED_QUERY_SCHEDULENAME, ""repl"");"
118567,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,99,,"        ""staging"", conf);"
118568,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,103,,"    bootstrapDumpMetricCollector.reportStageStart(""dump"", metricMap);"
118569,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,351,,"    repl.addEntry(""EVENT_ADD_PARTITION"", ""1"", 2345);"
118570,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,354,,"    repl.addEntry(""EVENT_ADD_DATABASE"", ""4"", 234544);"
118571,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,355,,"    repl.addEntry(""EVENT_ALTER_PARTITION"", ""5"", 2145);"
118572,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,356,,"    repl.addEntry(""EVENT_CREATE_TABLE"", ""6"", 2245);"
118573,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricCollector.java,368,,"    repl.addEntry(""EVENT_DROP_PARTITION"", ""18"", 2205);"
118574,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricSink.java,65,,"    conf.set(Constants.SCHEDULED_QUERY_SCHEDULENAME, ""repl"");"
118575,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricSink.java,75,,"      ""testAcidTablesReplLoadBootstrapIncr_1592205875387"","
118576,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricSink.java,81,,"    bootstrapDumpMetricCollector.reportStageStart(""dump"", metricMap);"
118577,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/parse/repl/metric/TestReplicationMetricUpdateOnFailure.java,159,,"    String stageName = ""REPL_LOAD"";"
118578,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestConditionalResolverCommonJoin.java,46,,"    pathToAliases.put(new Path(""path1""), new ArrayList<String>(Arrays.asList(""alias1"", ""alias2"")));"
118579,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestConditionalResolverCommonJoin.java,47,,"    pathToAliases.put(new Path(""path2""), new ArrayList<String>(Arrays.asList(""alias3"")));"
118580,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestReadEntityDirect.java,78,,"    assertEquals(""Checking command success"", 0, ret);"
118581,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestReadEntityDirect.java,95,,"      if (readEntity.getName().equals(""default@t1"")) {"
118582,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestReadEntityDirect.java,97,,"      } else if (readEntity.getName().equals(""default@v1"")) {"
118583,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestReadEntityDirect.java,98,,"        assertTrue(""direct"", readEntity.isDirect());"
118584,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestReadEntityDirect.java,100,,"        fail(""unexpected entity name "" + readEntity.getName());"
118585,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestTezWork.java,168,,"    conf.set(MR_JAR_PROPERTY, ""file:///tmp/foo1.jar"");"
118586,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,88,,"    driver.run(""create table "" + tab1 + ""(id int)"");"
118587,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,88,,"    driver.run(""create table "" + tab1 + ""(id int)"");"
118588,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,90,,"    driver.run(""create view "" + view1 + "" as select t.id from """
118589,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,93,,"    driver.compile(""select * from "" + view1, true);"
118590,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,95,,"    assertEquals(""default@"" + view1, CheckInputReadEntity.readEntities[0].getName());"
118591,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,99,,"    assertFalse(""Table is not direct input"", CheckInputReadEntity.readEntities[1].isDirect());"
118592,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,287,,"    assertEquals(""default@test_view"", CheckInputReadEntity.readEntities[0].getName());"
118593,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java,289,,"    assertEquals(""default@test_table"", CheckInputReadEntity.readEntities[1].getName());"
118594,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/mapping/TestOperatorCmp.java,120,,"    PlanMapper pm0 = getMapperForQuery(driver, ""select u from tu where id_uv = 1 group by u"");"
118595,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/mapping/TestReOptimization.java,111,,"    IDriver driver = createDriver(""overlay,reoptimize"");"
118596,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/plan/mapping/TestReOptimization.java,158,,"    IDriver driver = createDriver(""reoptimize"");"
118597,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/schq/TestScheduledQueryStatements.java,94,,"    driver.run(""set role admin"");"
118598,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java,110,,"      String expected = ""Operation type "" + HiveOperationType.CREATEDATABASE+ "" not allowed for user:"" + unAuthorizedUser;"
118599,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java,110,,"      String expected = ""Operation type "" + HiveOperationType.CREATEDATABASE+ "" not allowed for user:"" + unAuthorizedUser;"
118600,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java,121,,"              .addCol(""name"", ColumnType.STRING_TYPE_NAME)"
118601,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java,144,,"      assertTrue(params.containsKey(""Authorized""));"
118602,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/metastore/TestHiveMetaStoreAuthorizer.java,168,,"      hmsHandler.alter_table(""default"", viewName, viewObj);"
118603,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/TestSQLStdHiveAccessControllerHS2.java,141,,"    List<String> paramRegexes = Arrays.asList(""hive.ctest.param"", ""hive.abc..*"");"
118604,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestAddResource.java,105,,"    list.add(createURI(TEST_JAR_DIR + ""testjar1.jar""));"
118605,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestAddResource.java,106,,"    list.add(createURI(TEST_JAR_DIR + ""testjar2.jar""));"
118606,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestAddResource.java,107,,"    list.add(createURI(TEST_JAR_DIR + ""testjar3.jar""));"
118607,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestAddResource.java,108,,"    list.add(createURI(TEST_JAR_DIR + ""testjar4.jar""));"
118608,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestAddResource.java,109,,"    list.add(createURI(TEST_JAR_DIR + ""testjar5.jar""));"
118609,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/session/TestSessionState.java,327,,"    SessionState.createPath(conf, repeatedCreate, ""700"", true, true);"
118610,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,114,,"    verifyAndUnsetColStats(""simple_stats"", Lists.newArrayList(""i""), msClient);"
118611,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,133,,"    verifyAndUnsetColStats(""simple_stats2"", Lists.newArrayList(""s""), msClient);"
118612,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,255,,"    Partition part1 = msClient.getPartition(dbName, tblName, ""p=1"");"
118613,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,256,,"    Partition part2 = msClient.getPartition(dbName, tblName, ""p=2"");"
118614,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,302,,"    executeQuery(""create table simple_stats (s string) partitioned by (i int)"" +"
118615,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,356,,"      executeQuery(""insert into simple_stats partition(i='"" + i + ""') values ('test')"");"
118616,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,356,,"      executeQuery(""insert into simple_stats partition(i='"" + i + ""') values ('test')"");"
118617,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,361,,"    setPartitionSkipProperty(msClient, ""simple_stats"", ""i=0"", ""true"");"
118618,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,446,,"    verifyStatsUpToDate(""simple_stats"", ""i=1"", Lists.newArrayList(""s"", ""u""), msClient, true);"
118619,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,479,,"    verifyStatsUpToDate(""simple_stats"", ""i=2"", Lists.newArrayList(""s""), msClient, true);"
118620,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,568,,"    executeQuery(""alter database "" + dbName + "" set dbproperties('"" + ReplConst.TARGET_OF_REPLICATION + ""'='true')"");"
118621,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,568,,"    executeQuery(""alter database "" + dbName + "" set dbproperties('"" + ReplConst.TARGET_OF_REPLICATION + ""'='true')"");"
118622,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,575,,"    executeQuery(""create table "" + tblWOStats + ""(i int, s string) "" + txnProperty);"
118623,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,576,,"    executeQuery(""insert into "" + tblWOStats + ""(i, s) values (1, 'test')"");"
118624,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,576,,"    executeQuery(""insert into "" + tblWOStats + ""(i, s) values (1, 'test')"");"
118625,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/stats/TestStatsUpdaterThread.java,605,,"    executeQuery(""drop table "" + tblWOStats);"
118626,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,60,,"    Table t = newTable(""default"", ""camtc"", false);"
118627,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,60,,"    Table t = newTable(""default"", ""camtc"", false);"
118628,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,138,,"    Partition p = newPartition(t, ""today"");"
118629,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,148,,"    rqst.setPartitionname(""ds=today"");"
118630,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,190,,"      if (p.getName().equals(""base_20"")) sawBase = true;"
118631,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,192,,"      else Assert.fail(""Unexpected file "" + p.getName());"
118632,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,200,,"    Table t = newTable(""default"", ""camipc"", true);"
118633,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java,453,,"    Table t = newTable(""default"", ""dcamimcop"", true);"
118634,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,104,,"    Table t = newTable(""default"", ""ime"", true);"
118635,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,104,,"    Table t = newTable(""default"", ""ime"", true);"
118636,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,108,,"      Partition p = newPartition(t, ""part"" + (i + 1));"
118637,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,115,,"      comp.setPartitionname(""ds=part"" + (i + 1));"
118638,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,122,,"    LockRequest req = new LockRequest(components, ""me"", ""localhost"");"
118639,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,151,,"    Table t = newTable(""default"", ""imd"", true);"
118640,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,234,,"    Assert.assertEquals(""numerator mismatch"", 0, ratio.getLeft().get());"
118641,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,235,,"    Assert.assertEquals(""denominator mismatch"", 1, ratio.getRight().get());"
118642,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,317,,"    Table t = newTable(""default"", ""camipc"", true);"
118643,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,333,,"      rqst.setPartitionname(""ds=today"" + i);"
118644,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,409,,"    Table t = newTable(""default"", ""mapwb"", true);"
118645,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,456,,"    elements.add(generateElement(5,""db"", ""tb3"", ""p1"", CompactionType.MINOR, TxnStore.DID_NOT_INITIATE_RESPONSE));"
118646,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,464,,"    elements.add(generateElement(9,""db2"", ""tb"", null, CompactionType.MINOR, TxnStore.SUCCEEDED_RESPONSE));"
118647,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,469,,"    elements.add(generateElement(13,""db3"", ""tb3"", null, CompactionType.MINOR, TxnStore.WORKING_RESPONSE));"
118648,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,471,,"    elements.add(generateElement(15,""db3"", ""tb5"", null, CompactionType.MINOR, TxnStore.WORKING_RESPONSE, true));"
118649,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,641,,"    Assert.assertEquals(MetricsConstants.TOTAL_NUM_ABORTED_TXNS + "" value incorrect"","
118650,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,669,,"    tezCounters.findCounter(NUM_OBSOLETE_DELTAS + """", ""acid/p=1"").setValue(200);"
118651,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,670,,"    tezCounters.findCounter(NUM_OBSOLETE_DELTAS + """", ""acid/p=2"").setValue(100);"
118652,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,671,,"    tezCounters.findCounter(NUM_OBSOLETE_DELTAS + """", ""acid/p=3"").setValue(150);"
118653,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCompactionMetrics.java,672,,"    tezCounters.findCounter(NUM_OBSOLETE_DELTAS + """", ""acid_v2"").setValue(250);"
118654,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,73,,"    Table t = newTable(""default"", ""rflw1"", false);"
118655,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,93,,"      } else if (c.getState().equals(""initiated"")) {"
118656,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,133,,"      LockRequest req = new LockRequest(components, ""me"", ""localhost"");"
118657,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,152,,"    Partition p = newPartition(t, ""today"");"
118658,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,160,,"      comp.setPartitionname(""ds=today"");"
118659,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,258,,"    Table t = newTable(""default"", ""ncwncs"", false, parameters);"
118660,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,310,,"    Table t = newTable(""default"", ""ncwcas"", false);"
118661,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,348,,"    Table t = newTable(""default"", ""cthdp"", false);"
118662,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,381,,"    Table t = newTable(""default"", ""cphdp"", true);"
118663,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,417,,"    Table t = newTable(""default"", ""test_table"", true);"
118664,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,453,,"    Table t = newTable(""default"", ""nctdpnhe"", false);"
118665,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,482,,"    Table t = newTable(""default"", ""cttmd"", false);"
118666,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,524,,"    Table t = newTable(""default"", ""cptmd"", true);"
118667,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,569,,"    Table t = newTable(""default"", ""nctned"", false);"
118668,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,598,,"    Table t = newTable(""default"", ""cmomwbv"", false);"
118669,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,640,,"    Table t = newTable(""default"", ""ednb"", true);"
118670,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,684,,"    Table t = newTable(""default"", ""ttospgocr"", true);"
118671,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java,734,,"    Table t = newTable(""default"", ""nctdp"", true);"
118672,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,101,,"    base.put(""mary"", ""poppins"");"
118673,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,102,,"    base.put(""bert"", null);"
118674,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,243,,"    Table t = newTable(""default"", ""st"", false, new HashMap<String, String>(), sortCols, false);"
118675,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,269,,"    Partition p = newPartition(t, ""today"", sortCols);"
118676,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,279,,"    rqst.setPartitionname(""ds=today"");"
118677,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,293,,"    Table t = newTable(""default"", ""mtwb"", false);"
118678,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,309,,"    Assert.assertEquals(""ready for cleaning"", compacts.get(0).getState());"
118679,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,319,,"      if (stat[i].getPath().getName().equals(makeDeltaDirNameCompacted(21, 24) + ""_v0000026"")) {"
118680,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,323,,"        Assert.assertTrue(buckets[0].getPath().getName().matches(""bucket_0000[01]""));"
118681,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,378,,"    Assert.assertEquals(""base_20"", stat[0].getPath().getName());"
118682,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,565,,"        LOG.debug(""This is not the file you are looking for "" + stat[i].getPath().getName());"
118683,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,592,,"    Table t = newTable(""default"", ""mapwb"", true);"
118684,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,632,,"    matchesNotFound.add(makeDeleteDeltaDirNameCompacted(21,23) + ""_v\\d+"");"
118685,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java,1060,,"    Table t = newTable(""default"", ""delta1"", false);"
118686,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/TestBlockedUdf.java,53,,"    assertEquals(""substr"", FunctionRegistry.getFunctionInfo(""substr"").getDisplayName());"
118687,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/TestBlockedUdf.java,63,,"    funcNames.remove(""reflect"");"
118688,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFDateFormatGranularity.java,99,,"        new TimestampTZ(Instant.ofEpochMilli(494243222000L).atZone(ZoneId.of(""America/Los_Angeles""))));"
118689,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFJson.java,83,,"    runTest(""[1,2,3]"", ""$[0]"", ""1"", udf);"
118690,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/TestUDFJson.java,94,,"    runTest(""[{\""k1\"":[{\""k11\"":[1,2,3]}]}]"", ""$[0].k1[0].k11[1]"", ""2"", udf);"
118691,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java,60,,"    runAndVerify(""2014-01-14"", 1, ""2014-02-14"", udf);"
118692,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java,61,,"    runAndVerify(""2014-01-31"", 1, ""2014-02-28"", udf);"
118693,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java,65,,"    runAndVerify(""2015-02-28"", 12, ""2016-02-29"", udf);"
118694,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesDecrypt.java,44,,"    Text keyWr = new Text(""1234567890123456"");"
118695,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesDecrypt.java,51,,"    runAndVerifyStr(""y6Ss+zCYObpCbgfWfyNWTw=="", keyWr, ""ABC"", udf);"
118696,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesDecrypt.java,51,,"    runAndVerifyStr(""y6Ss+zCYObpCbgfWfyNWTw=="", keyWr, ""ABC"", udf);"
118697,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesDecrypt.java,52,,"    runAndVerifyStr(""BQGHoM3lqYcsurCRq3PlUw=="", keyWr, """", udf);"
118698,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesEncrypt.java,43,,"    Text keyWr = new Text(""1234567890123456"");"
118699,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesEncrypt.java,50,,"    runAndVerifyStr(""ABC"", keyWr, ""y6Ss+zCYObpCbgfWfyNWTw=="", udf);"
118700,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesEncrypt.java,50,,"    runAndVerifyStr(""ABC"", keyWr, ""y6Ss+zCYObpCbgfWfyNWTw=="", udf);"
118701,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAesEncrypt.java,51,,"    runAndVerifyStr("""", keyWr, ""BQGHoM3lqYcsurCRq3PlUw=="", udf);"
118702,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,56,,"    testCast(STRING, inputOI, date(""2009-07-30""), ""yyyy-MM-dd"", ""2009-07-30"");"
118703,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,58,,"    testCast(STRING, inputOI, date(""1969-07-30""), ""dd"", ""30"");"
118704,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,60,,"    testCast(CHAR, 3, inputOI, date(""2009-07-30""), ""yyyy-MM-dd"", ""200"");"
118705,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,71,,"    testCast(STRING, inputOI, timestamp(""2009-07-30 00:00:08""),"
118706,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,72,,"        ""yyyy-MM-dd HH24:mi:ss"", ""2009-07-30 00:00:08"");"
118707,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,73,,"    testCast(STRING, inputOI, timestamp(""2009-07-30 11:02:00""),"
118708,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,75,,"    testCast(STRING, inputOI, timestamp(""2009-07-30 01:02:03""), ""MM"", ""07"");"
118709,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFCastFormat.java,96,,"    testCast(DATE, inputOI, ""307-2009"", ""ddmm-yyyy"", ""2009-07-30"");"
118710,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,47,,"    Text fmtText = new Text(""EEEE"");"
118711,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,55,,"    runAndVerifyStr(""2015-04-05"", fmtText, ""Sunday"", udf);"
118712,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,55,,"    runAndVerifyStr(""2015-04-05"", fmtText, ""Sunday"", udf);"
118713,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,56,,"    runAndVerifyStr(""2015-04-06"", fmtText, ""Monday"", udf);"
118714,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,57,,"    runAndVerifyStr(""2015-04-07"", fmtText, ""Tuesday"", udf);"
118715,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,58,,"    runAndVerifyStr(""2015-04-08"", fmtText, ""Wednesday"", udf);"
118716,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,59,,"    runAndVerifyStr(""2015-04-09"", fmtText, ""Thursday"", udf);"
118717,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,60,,"    runAndVerifyStr(""2015-04-10"", fmtText, ""Friday"", udf);"
118718,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,61,,"    runAndVerifyStr(""2015-04-11"", fmtText, ""Saturday"", udf);"
118719,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFDateFormat.java,68,,"    runAndVerifyStr(""2015-04-08 10:30:45"", fmtText, ""Wednesday"", udf);"
118720,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFExtractUnionValueConverter.java,46,,"  private final Object union = new StandardUnion((byte) 0, ""foo"");"
118721,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFExtractUnionValueConverter.java,65,,"    @SuppressWarnings(""unchecked"")"
118722,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFloor.java,161,,"    HiveDecimalWritable input = new HiveDecimalWritable(HiveDecimal.create(""32300.004747""));"
118723,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFromUtcTimestamp.java,58,,"        new Text(""2015-03-28 17:00:00""), new Text(""Europe/London""),"
118724,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFromUtcTimestamp.java,58,,"        new Text(""2015-03-28 17:00:00""), new Text(""Europe/London""),"
118725,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFromUtcTimestamp.java,61,,"        new Text(""2015-03-28 18:00:00""), new Text(""Europe/London""),"
118726,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFromUtcTimestamp.java,64,,"        new Text(""2015-03-28 19:00:00""), new Text(""Europe/London""),"
118727,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFFromUtcTimestamp.java,69,,"        new Text(""2015-03-28 18:00:00.123456789""), new Text(""Europe/London""),"
118728,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFJsonRead.java,95,,"      ObjectInspector[] arguments = buildArguments(""struct<a:string>"");"
118729,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFLastDay.java,47,,"    runAndVerify(""2014-01-01"", ""2014-01-31"", udf);"
118730,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFLastDay.java,50,,"    runAndVerify(""2014-02-02"", ""2014-02-28"", udf);"
118731,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFLastDay.java,52,,"    runAndVerify(""2016-02-03"", ""2016-02-29"", udf);"
118732,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFLastDay.java,67,,"    runAndVerifyTs(""1966-01-31 00:00:01"", ""1966-01-31"", udf);"
118733,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFLevenshtein.java,74,,"      assertEquals(""levenshtein test"","
118734,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMonthsBetween.java,90,,"    runTestStr(""2002-02-28"", ""2002-03-01"", -0.12903226, udf);"
118735,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMonthsBetween.java,90,,"    runTestStr(""2002-02-28"", ""2002-03-01"", -0.12903226, udf);"
118736,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMonthsBetween.java,96,,"    runTestStr(""2012-02-29"", ""2012-03-01"", -0.09677419, udf);"
118737,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMonthsBetween.java,105,,"    runTestStr(""1997-02-28 10:30:00"", ""1996-10-30"", 3.94959677, udf);"
118738,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFNextDay.java,48,,"    runAndVerify(""2015-01-11"", ""su"", ""2015-01-18"", udf);"
118739,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFNextDay.java,54,,"    runAndVerify(""2015-01-11"", ""Sa"", ""2015-01-17"", udf);"
118740,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java,260,,"    verifyReturnType(new GenericUDFOPDivide(), ""int"", ""int"", ""double""); // different from sql compat mode"
118741,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java,260,,"    verifyReturnType(new GenericUDFOPDivide(), ""int"", ""int"", ""double""); // different from sql compat mode"
118742,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java,261,,"    verifyReturnType(new GenericUDFOPDivide(), ""int"", ""float"", ""double"");"
118743,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPDivide.java,263,,"    verifyReturnType(new GenericUDFOPDivide(), ""int"", ""decimal(10,2)"", ""decimal(23,11)"");"
118744,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMinus.java,221,,"    verifyReturnType(new GenericUDFOPMinus(), ""int"", ""int"", ""int"");"
118745,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMinus.java,222,,"    verifyReturnType(new GenericUDFOPMinus(), ""int"", ""float"", ""float"");"
118746,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMinus.java,223,,"    verifyReturnType(new GenericUDFOPMinus(), ""int"", ""double"", ""double"");"
118747,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMinus.java,224,,"    verifyReturnType(new GenericUDFOPMinus(), ""int"", ""decimal(10,2)"", ""decimal(13,2)"");"
118748,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMultiply.java,213,,"    verifyReturnType(new GenericUDFOPMultiply(), ""int"", ""int"", ""int"");"
118749,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMultiply.java,214,,"    verifyReturnType(new GenericUDFOPMultiply(), ""int"", ""float"", ""float"");"
118750,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMultiply.java,215,,"    verifyReturnType(new GenericUDFOPMultiply(), ""int"", ""double"", ""double"");"
118751,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMultiply.java,216,,"    verifyReturnType(new GenericUDFOPMultiply(), ""int"", ""decimal(10,2)"", ""decimal(21,2)"");"
118752,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPMultiply.java,251,,"    verifyReturnType(new GenericUDFOPMultiply(), ""decimal(38,0)"", ""decimal(38,0)"", ""decimal(38,0)"");"
118753,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPNegative.java,163,,"    HiveDecimalWritable input = new HiveDecimalWritable(HiveDecimal.create(""32300.004747""));"
118754,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,227,,"    verifyReturnType(new GenericUDFOPPlus(), ""int"", ""int"", ""int"");"
118755,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,228,,"    verifyReturnType(new GenericUDFOPPlus(), ""int"", ""float"", ""float"");"
118756,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,229,,"    verifyReturnType(new GenericUDFOPPlus(), ""int"", ""double"", ""double"");"
118757,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,230,,"    verifyReturnType(new GenericUDFOPPlus(), ""int"", ""decimal(10,2)"", ""decimal(13,2)"");"
118758,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,407,,"        new HiveIntervalDayTimeWritable(HiveIntervalDayTime.valueOf(""1 2:3:4.567""));"
118759,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPlus.java,422,,"    Assert.assertEquals(Timestamp.valueOf(""2001-01-02 2:3:4.567""), res.getTimestamp());"
118760,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFOPPositive.java,163,,"    HiveDecimalWritable input = new HiveDecimalWritable(HiveDecimal.create(""32300.004747""));"
118761,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFRegexp.java,44,,"    Text regexText = new Text(""^fo"");"
118762,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFRegexp.java,51,,"    runAndVerifyConst(""fofo"", regexText, true, udf);"
118763,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSha2.java,50,,"    runAndVerifyStr(""ABC"", lenWr,"
118764,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSha2.java,51,,"        ""b5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df78"", udf);"
118765,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSha2.java,52,,"    runAndVerifyStr("""", lenWr, ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"","
118766,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,53,,"            .getStandardStructObjectInspector(asList(""Company"", ""Salary""), tuple)),"
118767,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,53,,"            .getStandardStructObjectInspector(asList(""Company"", ""Salary""), tuple)),"
118768,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,58,,"    Object i1 = asList(new Text(""Facebook""), new DoubleWritable(80223.25));"
118769,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,114,,"            .getStandardStructObjectInspector(asList(""Company"", ""Department""), tuple)),"
118770,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,120,,"    Object i1 = asList(new Text(""Linkedin""), new Text(""HR""));"
118771,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,122,,"    Object i3 = asList(new Text(""Linkedin""), new Text(""Finance""));"
118772,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSortArrayByField.java,126,,"    Object i7 = asList(new Text(""Google""), new Text(""Logistics""));"
118773,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java,48,,"    runAndVerify(""Miller"", ""M460"", udf);"
118774,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java,76,,"      assertEquals(""soundex test"","
118775,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSubstringIndex.java,48,,"    runAndVerify(""www.apache.org"", ""."", 3, ""www.apache.org"", udf);"
118776,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrim.java,45,,"    runAndVerify("" Hello World! "", ""Hello World!"", udf);"
118777,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,54,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-01""));"
118778,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,58,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-14""));"
118779,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,62,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-31""));"
118780,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,66,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-02-02""));"
118781,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,68,,"    runAndVerify(""2014-02-01"", udf, initArgs, evalArgs);"
118782,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,70,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-02-28""));"
118783,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,74,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-03""));"
118784,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,76,,"    runAndVerify(""2016-02-01"", udf, initArgs, evalArgs);"
118785,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,78,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-28""));"
118786,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,82,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-29""));"
118787,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,87,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-01 10:30:45""));"
118788,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,91,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-14 10:30:45""));"
118789,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,95,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-01-31 10:30:45""));"
118790,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,99,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-02-02 10:30:45""));"
118791,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,103,,"    valueObj0 = new DeferredJavaObject(new Text(""2014-02-28 10:30:45""));"
118792,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,107,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-03 10:30:45""));"
118793,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,111,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-28 10:30:45""));"
118794,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,115,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-02-29 10:30:45""));"
118795,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,155,,"    runAndVerify(""2016-01-01"", udf, initArgs, evalArgs);"
118796,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,167,,"    runAndVerify(""2016-04-01"", udf, initArgs, evalArgs);"
118797,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,169,,"    valueObj0 = new DeferredJavaObject(new Text(""2016-07-01""));"
118798,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFTrunc.java,175,,"    runAndVerify(""2016-10-01"", udf, initArgs, evalArgs);"
118799,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFUtils.java,33,,"    Assert.assertEquals(0, GenericUDFUtils.findText(new Text(""foobarbar""), new Text(""foo""), 0));"
118800,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFUtils.java,34,,"    Assert.assertEquals(3, GenericUDFUtils.findText(new Text(""foobarbar""), new Text(""bar""), 0));"
118801,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/ptf/TestPTFValueCache.java,30,,"    cache.put(0, new Range(0, 10, null), ""0-10"");"
118802,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/xml/TestUDFXPathUtil.java,40,,"    assertNull(util.eval(""<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>"", null, XPathConstants.STRING));"
118803,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/udf/xml/TestUDFXPathUtil.java,58,,"    result = util.evalBoolean(""<a><b>true</b><b>false</b><b>b3</b><c>c1</c><c>c2</c></a>"", ""a/b[1]/text()"");"
118804,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,38,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03"", plus, ""0-0"","
118805,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,38,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03"", plus, ""0-0"","
118806,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,40,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03.456"", plus, ""1-1"","
118807,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,40,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03.456"", plus, ""1-1"","
118808,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,48,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03.500"", plus, ""-1-1"","
118809,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,48,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03.500"", plus, ""-1-1"","
118810,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,78,,"    checkTimestampIntervalYearMonthArithmetic(""2001-01-28 01:02:03"", plus, ""0-1"","
118811,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,79,,"        ""2001-02-28 01:02:03"");"
118812,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,94,,"      checkTimestampIntervalYearMonthArithmetic(""2001-01-01 01:02:03"", plus, ""0-6"","
118813,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,95,,"          ""2001-07-01 01:02:03"");"
118814,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,114,,"    checkDateIntervalDayTimeArithmetic(""2001-01-01"", plus, ""0-0"", ""2001-01-01"");"
118815,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,130,,"    checkDateIntervalDayTimeArithmetic(""2001-01-28"", plus, ""0-1"", ""2001-02-28"");"
118816,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,149,,"    checkIntervalYearMonthArithmetic(""0-0"", plus, ""4-5"", ""4-5"");"
118817,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,178,,"    checkTsIntervalDayTimeArithmetic(""2001-01-01 01:02:03"", plus, ""1 1:1:1.555555555"","
118818,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,195,,"    checkTsIntervalDayTimeArithmetic(""2001-01-01 01:02:03"", minus, ""0 01:02:03"","
118819,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,196,,"        ""2001-01-01 00:00:00"");"
118820,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,197,,"    checkTsIntervalDayTimeArithmetic(""2001-01-01 01:02:03"", minus, ""0 0:0:0"","
118821,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,215,,"      checkTsIntervalDayTimeArithmetic(""2015-03-08 01:59:58"", plus, ""0 0:0:01"","
118822,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,216,,"          ""2015-03-08 01:59:59"");"
118823,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,259,,"    checkIntervalDayTimeArithmetic(""3 4:5:6.789"", minus, ""1 1:1:1.111"", ""2 3:4:5.678"");"
118824,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,275,,"    checkTsArithmetic(""2015-01-01 00:00:00"", ""2014-12-31 00:00:00"", ""1 0:0:0"");"
118825,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,289,,"      checkTsArithmetic(""1999-12-15 00:00:00"", ""1999-09-15 00:00:00"", ""91 0:0:0"");"
118826,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,289,,"      checkTsArithmetic(""1999-12-15 00:00:00"", ""1999-09-15 00:00:00"", ""91 0:0:0"");"
118827,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,291,,"      checkTsArithmetic(""1999-12-15 00:00:00"", ""1995-09-15 00:00:00"", ""1552 0:0:0"");"
118828,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,329,,"        throw new IllegalArgumentException(""Invalid operation "" + operationType);"
118829,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestDateTimeMath.java,332,,"    assertEquals(String.format(""%s %s %s"", leftTs, operationType, rightInterval),"
118830,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestHiveStrictManagedMigration.java,169,,"        Sets.newHashSet(""manwhwh"", ""manwhnone"")"
118831,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/util/TestUpgradeTool.java,132,,"    org.apache.hadoop.hive.ql.metadata.Table tacid = db.getTable(""default"", ""tacid"");"
118832,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/wm/TestExpressionFactory.java,35,,"    assertEquals(""BYTES_READ"", expr.getCounterLimit().getName());"
118833,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/wm/TestExpressionFactory.java,82,,"    assertEquals(""ELAPSED_TIME"", expr.getCounterLimit().getName());"
118834,./TargetProjects/hive/ql/src/test/org/apache/hadoop/hive/ql/wm/TestTrigger.java,32,,"    Expression expression = ExpressionFactory.createExpression(new FileSystemCounterLimit(""hdfs"","
118835,./TargetProjects/hive/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java,1038,,"      sb.append(""null"");"
118836,./TargetProjects/hive/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java,1902,,"        sb.append(""null"");"
118837,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/SchemaResolutionProblem.java,28,,"        ""        {\n"" +"
118838,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/SchemaResolutionProblem.java,30,,"        ""            \""type\"":\""string\""\n"" +"
118839,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/SchemaResolutionProblem.java,31,,"        ""        },\n"" +"
118840,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/TypeInfoToSchema.java,110,,"            ""\""type\"":\"""" + AvroSerDe.AVRO_STRING_TYPE_NAME + ""\"","" +"
118841,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/TypeInfoToSchema.java,110,,"            ""\""type\"":\"""" + AvroSerDe.AVRO_STRING_TYPE_NAME + ""\"","" +"
118842,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/avro/TypeInfoToSchema.java,111,,"            ""\""logicalType\"":\"""" + AvroSerDe.CHAR_TYPE_NAME + ""\"","" +"
118843,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/binarysortable/BinarySortableSerDe.java,448,,"        throw new RuntimeException(""Unrecognized type: """
118844,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/lazy/LazySerDeParameters.java,93,,"        .equalsIgnoreCase(""true""));"
118845,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/lazy/VerifyLazy.java,167,,"            throw new RuntimeException(""Boolean field mismatch (expected "" + expected + "" found "" + value + "")"");"
118846,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/lazy/fast/LazySimpleDeserializeRead.java,308,,"      throw new Error(""Unexpected complex category "" + complexField.complexCategory);"
118847,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java,81,,"        throw new RuntimeException(""Hive internal error: conversion of """
118848,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java,160,,"            + inputOI.getTypeName() + "" to "" + outputOI.getTypeName()"
118849,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java,340,,"            ""not supported yet."");"
118850,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java,756,,"        throw new RuntimeException(""Unknown type: """
118851,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorUtils.java,552,,"      throw new RuntimeException(""Hive 2 Internal error: unsupported conversion from type: """
118852,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/teradata/TeradataBinaryDataOutputStream.java,104,,"      write(pad.getBytes(""UTF8""));"
118853,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/thrift/TCTLSeparatedProtocol.java,510,,"      throw new TException(""Not implemented: nested structures"");"
118854,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java,392,,"        throw new IllegalArgumentException(""Error: "" + item"
118855,./TargetProjects/hive/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java,405,,"              + "" expected at the position "" + t.position + "" of '"""
118856,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/TestJsonSerDe.java,58,,"    props.setProperty(serdeConstants.TIMESTAMP_FORMATS, ""millis"");"
118857,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/TestTCTLSeparatedProtocol.java,149,,"    prot.writeString(""key2"");"
118858,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/TestTCTLSeparatedProtocol.java,152,,"    prot.writeString(""val3"");"
118859,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/TestTCTLSeparatedProtocol.java,158,,"    prot.writeString(""elem1"");"
118860,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/TestTCTLSeparatedProtocol.java,159,,"    prot.writeString(""elem2"");"
118861,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/VerifyFast.java,105,,"              TestCase.fail(""Boolean field mismatch (expected "" + expected + "" found "" + value + "")"");"
118862,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,56,,"    String schemaString = ""{\n"" +"
118863,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,61,,"        ""  ]\n"" +"
118864,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,95,,"    m.put(""one"", 1l);"
118865,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,96,,"    m.put(""two"", 2l);"
118866,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,97,,"    m.put(""three"", 3l);"
118867,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,195,,"    GenericData.Record innerRecord = new GenericData.Record(s.getField(""aRecord"").schema());"
118868,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,268,,"    record.put(""aUnion"", ""this is a string"");"
118869,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,268,,"    record.put(""aUnion"", ""this is a string"");"
118870,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,438,,"         + ""    {\n"""
118871,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,592,,"    record.put(""nullableString"", ""this is a string"");"
118872,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroDeserializer.java,605,,"     record.put(""nullableEnum"", new GenericData.EnumSymbol(AvroSerdeUtils.getOtherTypeFromNullableType(s.getField(""nullableEnum"").schema()), ""CYBERMEN""));"
118873,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,52,,"  static public final String MAP_WITH_PRIMITIVE_VALUE_TYPE = ""{\n"" +"
118874,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,53,,"      ""  \""namespace\"": \""testing\"",\n"" +"
118875,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,55,,"      ""  \""type\"": \""record\"",\n"" +"
118876,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,56,,"      ""  \""fields\"": [\n"" +"
118877,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,57,,"      ""    {\n"" +"
118878,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,62,,"      ""  ]\n"" +"
118879,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,99,,"      ""    }\n"" +"
118880,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,104,,"      ""  \""namespace\"": \""test.a.rossa\"",\n"" +"
118881,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,105,,"      ""  \""name\"": \""oneUnion\"",\n"" +"
118882,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,109,,"      ""      \""name\"":\""aUnion\"",\n"" +"
118883,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,167,,"      ""      \n"" +"
118884,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroObjectInspectorGenerator.java,242,,"      ""    },\n"" +"
118885,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerdeUtils.java,44,,"  private final String NULLABLE_UNION = ""{\n"" +"
118886,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerdeUtils.java,45,,"      ""  \""type\"": \""record\"", \n"" +"
118887,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerdeUtils.java,47,,"      ""  \""fields\"" : [\n"" +"
118888,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerdeUtils.java,49,,"      ""  ]\n"" +"
118889,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerdeUtils.java,67,,"    testField(NULLABLE_UNION, ""mayBeNull"", true);"
118890,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,143,,"    GenericRecord r = serializeAndDeserialize(field, ""list1"", intList);"
118891,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,166,,"    m.put(""yes"", true);"
118892,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,169,,"    GenericRecord r = serializeAndDeserialize(field, ""map1"", m);"
118893,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,194,,"    GenericData.Record innerRecord = new GenericData.Record(s.getField(""struct1"").schema());"
118894,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,196,,"    innerRecord.put(""sInt"", 77);"
118895,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,197,,"    innerRecord.put(""sBoolean"", false);"
118896,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,229,,"    GenericRecord r = serializeAndDeserialize(field, ""union1"", 424.4f);"
118897,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,271,,"    GenericRecord r = serializeAndDeserialize(field, ""nullableenum"", symbol);"
118898,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,281,,"    GenericRecord r = serializeAndDeserialize(field, ""nullableint"", 42);"
118899,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,312,,"    Schema nullable = s.getField(""nullableStruct"").schema();"
118900,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,336,,"    GenericRecord r = serializeAndDeserialize(field, ""nullableList"", intList);"
118901,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,353,,"    GenericRecord r = serializeAndDeserialize(field, ""nullableMap"", m);"
118902,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,368,,"    Schema nullable = s.getField(""nullableFixed"").schema();"
118903,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestAvroSerializer.java,388,,"    GenericRecord r = serializeAndDeserialize(field, ""nullableBytes"", bb);"
118904,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,33,,"    String original = ""{\n"" +"
118905,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,36,,"        ""    \""type\"": \""record\"",\n"" +"
118906,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,37,,"        ""    \""fields\"": [\n"" +"
118907,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,38,,"        ""        {\n"" +"
118908,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,41,,"        ""        }\n"" +"
118909,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestSchemaReEncoder.java,42,,"        ""    ]\n"" +"
118910,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/avro/TestTypeInfoToSchema.java,313,,"    Assert.assertEquals(""Test for union's avro schema failed"","
118911,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/binarysortable/TestBinarySortableSerDe.java,99,,"          System.out.println(""serialized data ["" + (i - 1) + ""] = """
118912,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/columnar/TestBytesRefArrayWritable.java,31,,"    left.set(0, new BytesRefWritable(""123"".getBytes(""UTF-8"")));"
118913,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/columnar/TestLazyBinaryColumnarSerDe.java,109,,"      System.out.println(""expected = """
118914,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/columnar/TestLazyBinaryColumnarSerDe.java,111,,"      System.out.println(""actual = """
118915,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/columnar/TestLazyBinaryColumnarSerDe.java,113,,"      fail(""Deserialized object does not compare"");"
118916,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestDateWritableV2.java,86,,"    assertTrue(""Dates should be equal"", dw1.equals(dw1));"
118917,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestDateWritableV2.java,93,,"    assertFalse(""Dates not should be equal"", dw1.equals(dw2));"
118918,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveCharWritable.java,50,,"    HiveChar hc1 = new HiveChar(""abcd"", 8);"
118919,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveCharWritable.java,52,,"    assertEquals(""abcd    "", hcw1.toString());"
118920,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveCharWritable.java,55,,"    assertEquals(""abcd      "", hcw1.toString());"
118921,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveCharWritable.java,196,,"    assertEquals(""abcdefgh"", hcw.toString());"
118922,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveIntervalDayTimeWritable.java,64,,"    assertTrue(hiw1 + "" compare "" + hiw1, 0 ==  hiw1.compareTo(hiw1));"
118923,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveIntervalYearMonthWritable.java,64,,"    assertTrue(hiw1 + "" compare "" + hiw1, 0 ==  hiw1.compareTo(hiw1));"
118924,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestHiveVarcharWritable.java,98,,"    hc2 = new HiveVarcharWritable(new HiveVarchar(""abcde"", 20));"
118925,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/io/TestTimestampTZWritable.java,42,,"    TimestampTZ tstz = new TimestampTZ(seconds, 0, ZoneId.of(""UTC""));"
118926,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazy/TestLazyArrayMapStruct.java,67,,"      Text nullSequence = new Text(""\\N"");"
118927,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazy/TestLazyArrayMapStruct.java,176,,"            TypeInfoUtils.getTypeInfosFromTypeString(""map<string,string>"").get("
118928,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazy/TestLazyPrimitive.java,543,,"        {""   +128    "", 128},"
118929,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java,209,,"        System.out.println(""structs      = """
118930,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java,211,,"        System.out.println(""deserialized = """
118931,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/lazybinary/TestLazyBinarySerDe.java,213,,"        System.out.println(""serialized   = """
118932,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestCrossMapEqualComparer.java,63,,"    o1.mMap.put(42, ""The answer to Life, Universe And Everything"");"
118933,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestCrossMapEqualComparer.java,66,,"    o1.mMap.put(1729, ""A taxi cab number"");"
118934,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestCrossMapEqualComparer.java,120,,"    o1.mMap.put(new Text(""1729""), ""A taxi cab number"");"
118935,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,192,,"      assertEquals(""BAConverter"", new BytesWritable(new byte[]"
118936,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,194,,"          baConverter.convert(""hive""));"
118937,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,210,,"      assertEquals(""TextConverter"", new Text(""0""), textConverter"
118938,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,242,,"	  .convert(HiveDecimal.create(""100.001"")));"
118939,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,250,,"      assertEquals(""VarCharConverter"", new HiveVarchar(""TRUE"", -1), varcharConverter"
118940,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,250,,"      assertEquals(""VarCharConverter"", new HiveVarchar(""TRUE"", -1), varcharConverter"
118941,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,252,,"      assertEquals(""VarCharConverter"", new HiveVarchar(""FALSE"", -1), varcharConverter"
118942,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,318,,"      assertEquals(""CharConverter"", new HiveChar(""TRUE"", -1), charConverter"
118943,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java,397,,"      assertEquals(""LongConverter"", new FloatWritable(0), floatConverter"
118944,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestSimpleMapEqualComparer.java,63,,"    o1.mMap.put(42, ""The answer to Life, Universe And Everything"");"
118945,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestSimpleMapEqualComparer.java,66,,"    o1.mMap.put(1729, ""A taxi cab number"");"
118946,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestStandardObjectInspectors.java,266,,"      map.put(""two"", 2);"
118947,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestThriftObjectInspectors.java,77,,"      c.setAString(""test"");"
118948,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/primitive/TestPrimitiveObjectInspectorUtils.java,99,,"    assertEquals(""1969-12-31 23:59:59.999"", gmtDateFormat.format(PrimitiveObjectInspectorUtils.getTimestamp((byte)-1, byteOI).toSqlTimestamp()));"
118949,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/primitive/TestPrimitiveObjectInspectorUtils.java,124,,"    assertEquals(""2015-02-07 15:01:22.123"", gmtDateFormat.format(PrimitiveObjectInspectorUtils.getTimestamp((double)1423321282.123, doubleOI).toSqlTimestamp()));"
118950,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/primitive/TestPrimitiveObjectInspectorUtils.java,129,,"    assertEquals(""2015-02-07 15:01:22.000"", gmtDateFormat.format(PrimitiveObjectInspectorUtils.getTimestamp(HiveDecimal.create(1423321282L), decimalOI).toSqlTimestamp()));"
118951,./TargetProjects/hive/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/primitive/TestPrimitiveObjectInspectorUtils.java,130,,"    assertEquals(""1969-12-31 23:59:59.000"", gmtDateFormat.format(PrimitiveObjectInspectorUtils.getTimestamp(HiveDecimal.create(-1), decimalOI).toSqlTimestamp()));"
118952,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,143,,"      sendBase(""OpenSession"", args);"
118953,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,166,,"      sendBase(""CloseSession"", args);"
118954,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,189,,"      sendBase(""GetInfo"", args);"
118955,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,212,,"      sendBase(""ExecuteStatement"", args);"
118956,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,235,,"      sendBase(""GetTypeInfo"", args);"
118957,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,258,,"      sendBase(""GetCatalogs"", args);"
118958,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,281,,"      sendBase(""GetSchemas"", args);"
118959,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,304,,"      sendBase(""GetTables"", args);"
118960,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,327,,"      sendBase(""GetTableTypes"", args);"
118961,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,350,,"      sendBase(""GetColumns"", args);"
118962,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,373,,"      sendBase(""GetFunctions"", args);"
118963,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,396,,"      sendBase(""GetPrimaryKeys"", args);"
118964,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,419,,"      sendBase(""GetCrossReference"", args);"
118965,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,442,,"      sendBase(""GetOperationStatus"", args);"
118966,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,465,,"      sendBase(""CancelOperation"", args);"
118967,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,488,,"      sendBase(""CloseOperation"", args);"
118968,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,511,,"      sendBase(""GetResultSetMetadata"", args);"
118969,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,534,,"      sendBase(""FetchResults"", args);"
118970,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,557,,"      sendBase(""GetDelegationToken"", args);"
118971,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,580,,"      sendBase(""CancelDelegationToken"", args);"
118972,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,603,,"      sendBase(""RenewDelegationToken"", args);"
118973,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,626,,"      sendBase(""GetQueryId"", args);"
118974,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,649,,"      sendBase(""SetClientInfo"", args);"
118975,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,704,,"          throw new java.lang.IllegalStateException(""Method call not finished!"");"
118976,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,2087,,"              _LOGGER.error(""TTransportException writing to internal frame buffer"", e);"
118977,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,2090,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
118978,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,2099,,"              _LOGGER.error(""TTransportException inside handler"", e);"
118979,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,2103,,"              _LOGGER.error(""TApplicationException inside handler"", e);"
118980,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,2107,,"              _LOGGER.error(""Exception inside handler"", e);"
118981,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3477,,"    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField(""req"", org.apache.thrift.protocol.TType.STRUCT, (short)1);"
118982,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3515,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
118983,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3515,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
118984,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3717,,"      sb.append(""req:"");"
118985,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3719,,"        sb.append(""null"");"
118986,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,3844,,"    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(""success"", org.apache.thrift.protocol.TType.STRUCT, (short)0);"
118987,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TCLIService.java,4084,,"      sb.append(""success:"");"
118988,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetColumnsReq.java,541,,"      sb.append(""null"");"
118989,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetCrossReferenceReq.java,119,,"        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , ""TIdentifier"")));"
118990,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetCrossReferenceReq.java,683,,"      sb.append(""null"");"
118991,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetFunctionsReq.java,472,,"      sb.append(""null"");"
118992,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetOperationStatusResp.java,971,,"      sb.append(""null"");"
118993,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetPrimaryKeysReq.java,470,,"      sb.append(""null"");"
118994,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TGetTablesReq.java,559,,"      sb.append(""null"");"
118995,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TOpenSessionResp.java,501,,"      sb.append(""null"");"
118996,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TProgressUpdateResp.java,670,,"      sb.append(""null"");"
118997,./TargetProjects/hive/service-rpc/src/gen/thrift/gen-javabean/org/apache/hive/service/rpc/thrift/TStatus.java,571,,"      sb.append(""null"");"
118998,./TargetProjects/hive/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java,240,,"          ""Delegation token only supported over kerberos authentication"", ""08S01"");"
118999,./TargetProjects/hive/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java,240,,"          ""Delegation token only supported over kerberos authentication"", ""08S01"");"
