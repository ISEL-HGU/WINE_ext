235000,./TargetProjects/sling-whiteboard/org.apache.sling.thumbnails/src/test/java/org/apache/sling/thumbnails/internal/transformers/CropHandlerTest.java,54,,"        TransformationHandlerConfig config = new TransformationHandlerConfigImpl(""/conf"", properties);"
235001,./TargetProjects/sling-whiteboard/org.apache.sling.thumbnails/src/test/java/org/apache/sling/thumbnails/internal/transformers/ResizeHandlerTest.java,54,,"        TransformationHandlerConfig config = new TransformationHandlerConfigImpl(""/conf"", properties);"
235002,./TargetProjects/sling-whiteboard/org.apache.sling.thumbnails/src/test/java/org/apache/sling/thumbnails/internal/transformers/RotateHandlerTest.java,58,,"        TransformationHandlerConfig config = new TransformationHandlerConfigImpl(""/conf"", properties);"
235003,./TargetProjects/sling-whiteboard/org.apache.sling.thumbnails/src/test/java/org/apache/sling/thumbnails/internal/transformers/ScaleHandlerTest.java,58,,"        TransformationHandlerConfig config = new TransformationHandlerConfigImpl(""/conf"", properties);"
235004,./TargetProjects/sling-whiteboard/org.apache.sling.thumbnails/src/test/java/org/apache/sling/thumbnails/internal/transformers/TransparencyHandlerTest.java,57,,"        TransformationHandlerConfig config = new TransformationHandlerConfigImpl(""/conf"", properties);"
235005,./TargetProjects/sling-whiteboard/remote-content-api/document-aggregator/src/test/java/org/apache/sling/documentaggregator/impl/JsonDocumentNodeTest.java,54,,"        child.addValue(""foo"", ""bar"");"
235006,./TargetProjects/sling-whiteboard/resource-predicates/src/main/java/org/apache/sling/resource/predicates/PropertyPredicates.java,50,,"        this.key = Objects.requireNonNull(name, ""value may not be null"");"
235007,./TargetProjects/sling-whiteboard/resource-predicates/src/main/java/org/apache/sling/resource/predicates/PropertyPredicates.java,107,,"        Objects.requireNonNull(type, ""type value may not be null"");"
235008,./TargetProjects/sling-whiteboard/resource-predicates/src/main/java/org/apache/sling/resource/predicates/PropertyPredicates.java,109,,"            @SuppressWarnings(""unchecked"")"
235009,./TargetProjects/sling-whiteboard/tag-modifier/src/main/java/org/apache/sling/tagmodifier/impl/TagParser.java,71,,"    throw new Error(""Missing return statement in function"");"
235010,./TargetProjects/sling-whiteboard/tag-modifier/src/test/java/org/apache/sling/tagmodifier/HtmlParseTest.java,82,,"            if (element.containsAttribute(""href"")) {"
235011,./TargetProjects/sqoop/src/java/org/apache/sqoop/SqoopOptions.java,828,,"    if (getBooleanProperty(props, ""db.require.password"", false)) {"
235012,./TargetProjects/sqoop/src/java/org/apache/sqoop/SqoopOptions.java,1213,,"          + ""\nTry --help for usage instructions."");"
235013,./TargetProjects/sqoop/src/java/org/apache/sqoop/io/CodecMap.java,59,,"      if (simpleName.endsWith(""Codec"")) {"
235014,./TargetProjects/sqoop/src/java/org/apache/sqoop/lib/RecordParser.java,105,,"          ""null input string"");"
235015,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/CatalogQueryManager.java,70,,"        LoggingUtils.logAll(LOG, ""Failed to rollback transaction"", ce);"
235016,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/CatalogQueryManager.java,79,,"          LoggingUtils.logAll(LOG, ""Failed to close resultset"", re);"
235017,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/CatalogQueryManager.java,86,,"          LoggingUtils.logAll(LOG, ""Failed to close statement"", se);"
235018,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/ConnManager.java,111,,"      return ""String"";"
235019,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/OracleManager.java,368,,"        LoggingUtils.logAll(LOG, ""Failed to rollback transaction"", ex);"
235020,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/OracleManager.java,375,,"          LoggingUtils.logAll(LOG, ""Failed to close resultset"", ex);"
235021,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/OracleManager.java,382,,"          LoggingUtils.logAll(LOG, ""Failed to close statement"", ex);"
235022,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/OracleManager.java,418,,"        ""GMT"");"
235023,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/OracleManager.java,738,,"        LoggingUtils.logAll(LOG, ""Unable to discard connection"", ex);"
235024,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/SqlManager.java,140,,"    String rawQuery = query.replace(SUBSTITUTE_TOKEN, "" (1 = 0) "");"
235025,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/SqlManager.java,152,,"      LoggingUtils.logAll(LOG, ""Error executing statement: "" + sqlE.toString(),"
235026,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/SqlManager.java,175,,"      LoggingUtils.logAll(LOG, ""Error reading from database: """
235027,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/SqlManager.java,183,,"        LoggingUtils.logAll(LOG, ""SQLException closing ResultSet: """
235028,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/SqlManager.java,213,,"            String name = results.getString(""COLUMN_NAME"");"
235029,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/oracle/OraOopOracleQueries.java,983,,"        String.format(""CREATE TABLE %s \n"" + ""%s %s \n"" + ""AS \n"""
235030,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/oracle/OraOopOracleQueries.java,983,,"        String.format(""CREATE TABLE %s \n"" + ""%s %s \n"" + ""AS \n"""
235031,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/oracle/OraOopOracleQueries.java,1589,,"        throw new RuntimeException(""Could not set bind variable"", e);"
235032,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/oracle/OraOopUtilities.java,368,,"      throw new IllegalArgumentException(""The conf argument cannot be null"");"
235033,./TargetProjects/sqoop/src/java/org/apache/sqoop/manager/oracle/OracleConnectionFactory.java,147,,"          + ""the following Oracle session-initialization statement:"" + ""\n%s"""
235034,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/ExportJobBase.java,135,,"        LOG.warn(""Input path "" + p + "" does not exist"");"
235035,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/BooleanSplitter.java,40,,"          colName + "" IS NULL"", colName + "" IS NULL""));"
235036,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/DataDrivenDBInputFormat.java,83,,"        throw new IllegalArgumentException(""split-limit is supported only with Integer and Date columns"");"
235037,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/DateSplitter.java,70,,"          colName + "" IS NULL"", colName + "" IS NULL""));"
235038,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/FloatSplitter.java,54,,"          colName + "" IS NULL"", colName + "" IS NULL""));"
235039,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/IntegerSplitter.java,57,,"            colName + "" IS NULL"", colName + "" IS NULL""));"
235040,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/db/TextSplitter.java,92,,"          colName + "" IS NULL"", colName + "" IS NULL""));"
235041,./TargetProjects/sqoop/src/java/org/apache/sqoop/mapreduce/hcat/SqoopHCatUtilities.java,297,,"        + "" to "" + SqoopOptions.getHiveHomeDefault());"
235042,./TargetProjects/sqoop/src/java/org/apache/sqoop/metastore/GenericJobStorage.java,323,,"      throw new IOException(""Error communicating with database"", sqlE);"
235043,./TargetProjects/sqoop/src/java/org/apache/sqoop/metastore/GenericJobStorage.java,430,,"        LOG.debug(""Saving "" + key + "" => "" + rawVal + "" / "" + baseVal);"
235044,./TargetProjects/sqoop/src/java/org/apache/sqoop/metastore/GenericJobStorage.java,704,,"    LOG.debug(""Job: "" + jobName + ""; Setting property """
235045,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,363,,"    if (javaType.equals(""String"")) {"
235046,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,368,,"    } else if (javaType.equals(""java.math.BigDecimal"")"
235047,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,394,,"      return ""    this."" + colName + "" = Integer.valueOf("" + inputObj"
235048,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,398,,"          + "".readLong());\n"";"
235049,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,409,,"      return ""    this."" + colName + "" = Text.readString("" + inputObj + "");\n"";"
235050,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,410,,"    } else if (javaType.equals(""java.sql.Date"")) {"
235051,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,413,,"    } else if (javaType.equals(""java.sql.Time"")) {"
235052,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,416,,"    } else if (javaType.equals(""java.sql.Timestamp"")) {"
235053,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,421,,"      return ""    this."" + colName + "" = """
235054,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,454,,"        + ""    }\n"";"
235055,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,467,,"      return ""    "" + outputObj + "".writeInt(this."" + colName + "");\n"";"
235056,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,469,,"      return ""    "" + outputObj + "".writeLong(this."" + colName + "");\n"";"
235057,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,569,,"      sb.append(""  private "" + javaType + "" "" + col + "";\n"");"
235058,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,572,,"      sb.append(""  }\n"");"
235059,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,676,,"    sb.append(""throws SQLException {\n"");"
235060,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,723,,"        LOG.error(""No Java type for SQL type "" + sqlType"
235061,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,724,,"            + "" for column "" + col);"
235062,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,839,,"    sb.append(""  }\n\n"");"
235063,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,926,,"        + ""throws IOException {\n"");"
235064,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,1159,,"        sb.append(""      this."" + colName + "" = ("" + javaType"
235065,./TargetProjects/sqoop/src/java/org/apache/sqoop/orm/ClassWriter.java,1931,,"    sb.append(""import "" + JdbcWritableBridge.class.getCanonicalName() + "";\n"");"
235066,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,415,,"    group.addOption(OptionBuilder.withArgName(""job-id"")"
235067,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,500,,"    commonOpts.addOption(OptionBuilder.withArgName(""dir"")"
235068,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,739,,"    formatOpts.addOption(OptionBuilder.withArgName(""char"")"
235069,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,834,,"    codeGenOpts.addOption(OptionBuilder.withArgName(""null-str"")"
235070,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,1587,,"      throw new InvalidOptionsException(""The "" + HIVE_DROP_DELIMS_ARG"
235071,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,1588,,"              + "" option conflicts with the "" + HIVE_DELIMS_REPLACEMENT_ARG"
235072,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/BaseSqoopTool.java,1589,,"              + "" option."" + HELP_STR);"
235073,./TargetProjects/sqoop/src/java/org/apache/sqoop/tool/ImportTool.java,1085,,"	      throw new InvalidOptionsException(""Validation is not supported for """
235074,./TargetProjects/sqoop/src/java/org/apache/sqoop/util/OptionsFileUtil.java,86,,"                      + fileName + ""): "" + buffer.toString());"
235075,./TargetProjects/sqoop/src/perftest/LobFileStressTest.java,103,,"      System.out.println(""PASS"");"
235076,./TargetProjects/sqoop/src/perftest/LobFileStressTest.java,108,,"        System.out.println(""FAIL"");"
235077,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAutoResetMapper.java,56,,"    { ""INT NOT NULL"", ""VARCHAR(32)"" },"
235078,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroExport.java,369,,"      colGenerator(100, Schema.create(Schema.Type.INT), 100, ""INTEGER""),"
235079,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroExport.java,425,,"    ColumnGenerator gen0 = colGenerator(null, schema, null, ""VARCHAR(64)"");"
235080,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroImport.java,163,,"    Path outputFile = new Path(getTablePath(), ""part-m-00000.avro"");"
235081,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroImport.java,170,,"    checkField(fields.get(0), ""DATA_COL0"", Schema.Type.BOOLEAN);"
235082,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroImport.java,171,,"    checkField(fields.get(1), ""DATA_COL1"", Schema.Type.INT);"
235083,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroImport.java,202,,"    String [] types = { ""INT"" };"
235084,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestAvroImportExportRoundtrip.java,87,,"    args.add(""--connect"");"
235085,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestExportUpdate.java,416,,"        ""--update-key"", updateCol));"
235086,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestExportUpdate.java,429,,"    verifyRow(""A"", ""0"", ""0"", ""foo0"", ""0"");"
235087,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestExportUpdate.java,430,,"    verifyRow(""A"", ""1"", ""1"", ""foo2"", ""2"");"
235088,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestExportUpdate.java,431,,"    verifyRow(""A"", ""9"", ""9"", ""foo18"", ""18"");"
235089,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestExportUpdate.java,446,,"        ""--update-key"", ""A,B""));"
235090,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,300,,"      fail(""Got unexpected exception: "" + StringUtils.stringifyException(e));"
235091,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,551,,"      args.add(""--incremental"");"
235092,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,552,,"      args.add(""append"");"
235093,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,554,,"        args.add(""--check-column"");"
235094,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,558,,"        args.add(""LAST_MODIFIED"");"
235095,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,718,,"    final String TABLE_NAME = ""emptyJob"";"
235096,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,904,,"    final String TABLE_NAME = ""emptyJobLastMod"";"
235097,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,908,,"    args.add(""--append"");"
235098,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,1036,,"      s = c.prepareStatement(""UPDATE "" + manager.escapeTableName(TABLE_NAME) + "" SET id=?, last_modified=? WHERE id=?"");"
235099,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,1036,,"      s = c.prepareStatement(""UPDATE "" + manager.escapeTableName(TABLE_NAME) + "" SET id=?, last_modified=? WHERE id=?"");"
235100,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestIncrementalImport.java,1341,,"		System.clearProperty(""expected.script"");"
235101,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,62,,"    String [] types = { ""VARCHAR(32)"", ""VARCHAR(32)"", ""VARCHAR(32)"" };"
235102,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,63,,"    String [] insertVals = { ""'foo'"", ""'bar'"", ""'baz'"" };"
235103,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,63,,"    String [] insertVals = { ""'foo'"", ""'bar'"", ""'baz'"" };"
235104,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,72,,"    String [] insertVals = { ""'foo'"", ""null"", ""'baz'"" };"
235105,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,98,,"    String [] types = { ""INTEGER"", ""INTEGER"", ""INTEGER"" };"
235106,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,143,,"    String [] types = { ""NUMERIC"", ""INTEGER"", ""NUMERIC"" };"
235107,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,144,,"    String [] insertVals = { ""-42"", ""17"", ""33333333333333333333333.1714"" };"
235108,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestMultiCols.java,162,,"    String [] insertVals = { ""33333333333333333333333"", ""17"", ""-42""};"
235109,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestParquetExport.java,371,,"    ColumnGenerator gen0 = colGenerator(null, schema, null, ""VARCHAR(64)"");"
235110,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestParquetImport.java,153,,"    checkField(fields.get(0), ""DATA_COL0"", Type.BOOLEAN);"
235111,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestParquetImport.java,180,,"    String [] types = { ""INT"" };"
235112,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestParquetIncrementalImportMerge.java,38,,"  private static final String[] TEST_COLUMN_TYPES = {""INTEGER"", ""VARCHAR(32)"", ""CHAR(64)"", ""TIMESTAMP""};"
235113,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestSqoopOptions.java,429,,"    assertEquals(""connection params don't match"","
235114,./TargetProjects/sqoop/src/test/org/apache/sqoop/TestSqoopOptions.java,693,,"        ""/usr/lib/hadoop"","
235115,./TargetProjects/sqoop/src/test/org/apache/sqoop/accumulo/TestAccumuloImport.java,35,,"    String [] types = { ""INT"", ""INT"" };"
235116,./TargetProjects/sqoop/src/test/org/apache/sqoop/accumulo/TestAccumuloQueryImport.java,34,,"    String [] types = { ""INT"", ""INT"", ""INT"" };"
235117,./TargetProjects/sqoop/src/test/org/apache/sqoop/cloud/tools/CloudTestDataSet.java,31,,"  private final String[] columnTypes = {""INT"", ""VARCHAR(25)"", ""VARCHAR(25)"", ""INT""};"
235118,./TargetProjects/sqoop/src/test/org/apache/sqoop/cloud/tools/CloudTestDataSet.java,85,,"        ""1940,Black Widow,Falcon,"" + expectedInitialTimestampForMerge,"
235119,./TargetProjects/sqoop/src/test/org/apache/sqoop/credentials/TestPassingSecurePassword.java,77,,"    String passwordFilePath = BaseSqoopTestCase.getTempBaseDir() + "".pwd"";"
235120,./TargetProjects/sqoop/src/test/org/apache/sqoop/credentials/TestPassingSecurePassword.java,82,,"      extraArgs.add(""--username"");"
235121,./TargetProjects/sqoop/src/test/org/apache/sqoop/credentials/TestPassingSecurePassword.java,83,,"      extraArgs.add(""username"");"
235122,./TargetProjects/sqoop/src/test/org/apache/sqoop/credentials/TestPassingSecurePassword.java,84,,"      extraArgs.add(""--password-file"");"
235123,./TargetProjects/sqoop/src/test/org/apache/sqoop/credentials/TestPassingSecurePassword.java,144,,"      extraArgs.add(""password"");"
235124,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportNullTest.java,35,,"    String [] types = { ""INT"", ""INT"" };"
235125,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportTest.java,36,,"    String [] types = { ""INT"", ""INT"" };"
235126,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportTest.java,78,,"    String [] argv = getArgv(true, ""AppendTable"", ""AppendColumnFamily"", true, null);"
235127,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportTest.java,78,,"    String [] argv = getArgv(true, ""AppendTable"", ""AppendColumnFamily"", true, null);"
235128,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportTest.java,138,,"    runImport(getArgv(true, ""OverwriteTable"", ""OverwriteColumnFamily"", true, null));"
235129,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseImportTest.java,138,,"    runImport(getArgv(true, ""OverwriteTable"", ""OverwriteColumnFamily"", true, null));"
235130,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseQueryImportTest.java,34,,"    String [] types = { ""INT"", ""INT"", ""INT"" };"
235131,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseQueryImportTest.java,38,,"    String [] argv = getArgv(true, ""queryT"", ""queryF"", true,"
235132,./TargetProjects/sqoop/src/test/org/apache/sqoop/hbase/HBaseQueryImportTest.java,38,,"    String [] argv = getArgv(true, ""queryT"", ""queryF"", true,"
235133,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,134,,"    if (addlArgsMap.containsKey(""-libjars"")) {"
235134,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,227,,"        ""2000"", new BigDecimal(""2000""), KeyType.NOT_A_KEY),"
235135,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,296,,"        ""string to test"", ""string to test"", KeyType.NOT_A_KEY),"
235136,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,336,,"        ""varchar(20)"", Types.VARCHAR, HCatFieldSchema.Type.STRING, 0, 0,"
235137,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,356,,"    addlArgsArray.add(""--hive-partition-key"");"
235138,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,357,,"    addlArgsArray.add(""col0"");"
235139,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogExportTest.java,358,,"    addlArgsArray.add(""--hive-partition-value"");"
235140,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,115,,"    codeGenArgv.add(""--connect"");"
235141,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,117,,"    codeGenArgv.add(""--hcatalog-table"");"
235142,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,244,,"        + "", actual = "" + recs.size());"
235143,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,378,,"        ""int"", Types.INTEGER, HCatFieldSchema.Type.INT, 0, 0, 1000,"
235144,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,448,,"        ""decimal(18,2)"", Types.DECIMAL, HCatFieldSchema.Type.STRING, 0, 0,"
235145,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,449,,"        ""2000"", new BigDecimal(""2000""), KeyType.NOT_A_KEY),"
235146,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,533,,"        ""string to test"", ""string to test"", KeyType.NOT_A_KEY),"
235147,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,576,,"        ""varchar(20)"", Types.VARCHAR, HCatFieldSchema.Type.STRING, 0, 0,"
235148,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,625,,"    addlArgsArray.add(""--hive-partition-key"");"
235149,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,626,,"    addlArgsArray.add(""col0"");"
235150,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,627,,"    addlArgsArray.add(""--hive-partition-value"");"
235151,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogImportTest.java,772,,"    addlArgsArray.add(""--create-hcatalog-table"");"
235152,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/HCatalogTestUtils.java,525,,"            .assertEquals(""Got unexpected column value"", expectedVal,"
235153,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,84,,"      ""--hcatalog-table"","
235154,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,85,,"      ""table"","
235155,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,104,,"      ""--connect"","
235156,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,105,,"      ""jdbc:db:url"","
235157,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,106,,"      ""--table"","
235158,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,107,,"      ""dbtable"","
235159,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,116,,"    thrown.reportMissingExceptionWithMessage(""Expected InvalidOptionsException during HCatalog import "" +"
235160,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,332,,"      ""--hcatalog-partition-keys"","
235161,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,333,,"      ""k1,k2"","
235162,./TargetProjects/sqoop/src/test/org/apache/sqoop/hcat/TestHCatalogBasic.java,334,,"      ""--hcatalog-partition-values"","
235163,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,95,,"    String[] types = { ""VARCHAR(32)"", ""INTEGER"", ""CHAR(64)"" };"
235164,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,95,,"    String[] types = { ""VARCHAR(32)"", ""INTEGER"", ""CHAR(64)"" };"
235165,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,95,,"    String[] types = { ""VARCHAR(32)"", ""INTEGER"", ""CHAR(64)"" };"
235166,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,116,,"    args.add(""--table"");"
235167,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,120,,"    args.add(""--connect"");"
235168,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,273,,"    String [] vals = { ""'test'"", ""42"", ""'somestring'"" };"
235169,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,273,,"    String [] vals = { ""'test'"", ""42"", ""'somestring'"" };"
235170,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveImport.java,519,,"    runImportTest(TABLE_NAME, types, vals, ""partitionImport.q"","
235171,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveServer2ParquetImport.java,63,,"  private static final String[] TEST_COLUMN_TYPES = {""VARCHAR(32)"", ""INTEGER"", ""CHAR(64)""};"
235172,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestHiveTypesForAvroTypeMapping.java,64,,"        new Object[]{""BINARY"", create(Type.BYTES), new SqoopOptions()},"
235173,./TargetProjects/sqoop/src/test/org/apache/sqoop/hive/TestTableDefWriterForExternalTable.java,76,,"    LOG.debug(""External table dir: ""+options.getHiveExternalTableDir());"
235174,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/MysqlImportJobTestConfiguration.java,49,,"    inputData.add(new String[]{""1"", ""100.030"", ""1000000.05"", ""1000000.05"", ""1000000.05"", ""1000000.05"","
235175,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/MysqlImportJobTestConfiguration.java,86,,"        new BigDecimal(""1000000""),"
235176,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/OracleImportJobTestConfiguration.java,45,,"    data.add(new String[]{""1"", ""1000000.05"", ""1000000.05"", ""1000000.05"", ""1000000.05"","
235177,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/OracleImportJobTestConfiguration.java,76,,"        new BigDecimal(""1000000""),"
235178,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/OracleImportJobTestConfiguration.java,77,,"        new BigDecimal(""1000000.05000""),"
235179,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/PostgresqlImportJobTestConfigurationPaddingShouldSucceed.java,49,,"    inputData.add(new String[]{""1"", ""1000000.05"", ""1000000.05"", ""1000000.05"", ""1000000.05"","
235180,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/PostgresqlImportJobTestConfigurationPaddingShouldSucceed.java,88,,"        new BigDecimal(""1000000""),"
235181,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/SqlServerImportJobTestConfiguration.java,43,,"    inputData.add(new String[]{""1"", ""100.050"", ""1000000.05"", ""1000000.05"", ""1000000.05"", ""1000000.05"","
235182,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/SqlServerImportJobTestConfiguration.java,75,,"        new BigDecimal(""1000000""),"
235183,./TargetProjects/sqoop/src/test/org/apache/sqoop/importjob/configuration/SqlServerImportJobTestConfiguration.java,76,,"        new BigDecimal(""1000000.05000""),"
235184,./TargetProjects/sqoop/src/test/org/apache/sqoop/io/TestSplittableBufferedWriter.java,153,,"        w.write(""This is a string!"");"
235185,./TargetProjects/sqoop/src/test/org/apache/sqoop/io/TestSplittableBufferedWriter.java,155,,"        w.write(""This is another string!"");"
235186,./TargetProjects/sqoop/src/test/org/apache/sqoop/lib/TestRecordParser.java,138,,"    String [] strings = { ""the field"" };"
235187,./TargetProjects/sqoop/src/test/org/apache/sqoop/lib/TestRecordParser.java,250,,"    String [] strings = { ""field1"", ""field2"" };"
235188,./TargetProjects/sqoop/src/test/org/apache/sqoop/lib/TestRecordParser.java,250,,"    String [] strings = { ""field1"", ""field2"" };"
235189,./TargetProjects/sqoop/src/test/org/apache/sqoop/lib/TestRecordParser.java,378,,"    String [] strings = { """", ""foo"", """" };"
235190,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/TestMainframeManager.java,86,,"      LOG.error(""Got SQLException: "" + sqlE.toString());"
235191,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/TestSqlManager.java,67,,"      LOG.error(""Got SQLException: "" + sqlE.toString());"
235192,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/TestSqlManager.java,262,,"    String[] allColumnsFromDbTable = { ""aaa"", ""bbb"", ""ccc"", ""ddd"" };"
235193,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/TestSqlManager.java,262,,"    String[] allColumnsFromDbTable = { ""aaa"", ""bbb"", ""ccc"", ""ddd"" };"
235194,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/cubrid/CubridManagerImportTest.java,145,,"      st.executeUpdate(""INSERT INTO "" + tableName"
235195,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/hsqldb/TestHsqldbManager.java,58,,"      LOG.error(""Got SQLException: "" + sqlE.toString());"
235196,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mainframe/MainframeManagerImportTest.java,122,,"    doImportAndVerify(MainframeTestUtil.GDG_BINARY_DATASET_NAME, MainframeConfiguration.MAINFRAME_INPUT_DATASET_TYPE_GDG, files, ""--as-binaryfile"");"
235197,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mysql/DirectMySQLExportTest.java,202,,"          ""--username"", mySQLTestUtils.getUserName(),"
235198,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mysql/DirectMySQLExportTest.java,203,,"          ""--password"", mySQLTestUtils.getUserPass(),"
235199,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mysql/DirectMySQLExportTest.java,204,,"          ""--connect"", mySQLTestUtils.getMySqlConnectString()));"
235200,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mysql/DirectMySQLTest.java,123,,"      st.executeUpdate(""INSERT INTO "" + getTableName() + "" VALUES("""
235201,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/mysql/DirectMySQLTest.java,123,,"      st.executeUpdate(""INSERT INTO "" + getTableName() + "" VALUES("""
235202,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/netezza/DirectNetezzaHCatExportManualTest.java,126,,"        ""string to test"", ""string to test"", KeyType.NOT_A_KEY),"
235203,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/netezza/DirectNetezzaHCatImportManualTest.java,127,,"        ""string to test"", ""string to test"", KeyType.NOT_A_KEY),"
235204,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/netezza/NetezzaImportManualTest.java,125,,"      statement.executeUpdate(""INSERT INTO "" + tableName"
235205,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,46,,"      assertEquals(""Return code should be 0"", 0, retCode);"
235206,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,72,,"    setSqoopTargetDirectory(getSqoopTargetDirectory() + ""tst_product_part"");"
235207,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,73,,"    createTable(""table_tst_product_part.xml"");"
235208,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,76,,"      int retCode = runImport(""TST_PRODUCT_PART"", getSqoopConf(), false, DISABLE_ORACLE_ESCAPING_FLAG);"
235209,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,151,,"    setSqoopTargetDirectory(getSqoopTargetDirectory() + ""tst_product_subpart"");"
235210,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,152,,"    createTable(""table_tst_product_subpart.xml"");"
235211,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/ImportTest.java,155,,"      int retCode = runImport(""TST_PRODUCT_SUBPART"", getSqoopConf(), false, DISABLE_ORACLE_ESCAPING_FLAG);"
235212,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OraOopTypesTest.java,63,,"            + ""123456789101112.123456789101112,"""
235213,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OraOopTypesTest.java,73,,"            + ""'ÁRÍZTŰRŐTÜKÖRFÚRÓGÉP',"""
235214,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleCompatTest.java,248,,"    verifyType(""BINARY_FLOAT"", getBinaryFloatInsertStr(25f), ""25.0"");"
235215,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleCompatTest.java,259,,"    verifyType(""BINARY_DOUBLE"", getBinaryDoubleInsertStr(0.5), ""0.5"");"
235216,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleConnectionFactoryTest.java,357,,"        ""Expected a session initialization statement of \""%s\"", but got \""%s\""."""
235217,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,167,,"        return ""2009-10-"" + pad(day) + "" 00:00:00.0"";"
235218,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,174,,"        return ""TIMESTAMP""; // TODO: Support DATE more intelligently."
235219,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,281,,"        ""--update-key"", ""ID"", ""--update-mode"", ""allowinsert"", ""--oracle-escaping-disabled"", ""false"")));"
235220,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,281,,"        ""--update-key"", ""ID"", ""--update-mode"", ""allowinsert"", ""--oracle-escaping-disabled"", ""false"")));"
235221,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,281,,"        ""--update-key"", ""ID"", ""--update-mode"", ""allowinsert"", ""--oracle-escaping-disabled"", ""false"")));"
235222,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleExportTest.java,281,,"        ""--update-key"", ""ID"", ""--update-mode"", ""allowinsert"", ""--oracle-escaping-disabled"", ""false"")));"
235223,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleManagerTest.java,131,,"      ""INSERT INTO "" + TABLE_NAME + "" VALUES("""
235224,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/OracleManagerTest.java,131,,"      ""INSERT INTO "" + TABLE_NAME + "" VALUES("""
235225,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopDBInputSplitGetDebugDetails.java,60,,"                ""\n\t Data chunk info:"" +"
235226,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopJdbcUrl.java,66,,"      fail(""An IllegalArgumentException should be been thrown."");"
235227,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopJdbcUrl.java,183,,"      assertEquals(""hostname"", actual.getHost());"
235228,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopJdbcUrl.java,200,,"      assertEquals(""dbservice.dbdomain"", actual.getService());"
235229,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,51,,"    context = OraOopUtilities.decodeOracleTableName(""oraoop"", ""junk"", null);"
235230,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,53,,"    assertEquals(context.getName(), ""JUNK"");"
235231,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,138,,"      fail(""An IllegalArgumentException should be been thrown."");"
235232,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,242,,"    conf.set(OraOopConstants.ORAOOP_ORACLE_DATA_CHUNK_METHOD, ""loremipsum"");"
235233,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,384,,"    expected = ""abcd"";"
235234,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,412,,"    assertEquals(""OraOop configuration expression failure."", expected,"
235235,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,542,,"    expected.add(""LOREM"");"
235236,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/TestOraOopUtilities.java,545,,"    expected.add(""SIT"");"
235237,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/oracle/util/OracleData.java,81,,"    pkgSql = pkgSql.replaceAll(""\\$TABLE_NAME"", tableDefinition.getTableName());"
235238,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,136,,"          + manager.escapeColName(""name"") + "" VARCHAR(24) NOT NULL, """
235239,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,137,,"          + manager.escapeColName(""start_date"") + "" DATE, """
235240,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,138,,"          + manager.escapeColName(""salary"") + "" FLOAT, """
235241,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,139,,"          + manager.escapeColName(""dept"") + "" VARCHAR(32))"");"
235242,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,153,,"          + ""IN "" + manager.escapeColName(""id"") + "" INT,"""
235243,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,312,,"    createTestFile(""inputFile"", new String[] {"
235244,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,313,,"      ""2,Bob,2009-04-20,400,sales"","
235245,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,314,,"      ""3,Fred,2009-01-23,15,marketing"","
235246,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExportTest.java,370,,"      ""--schema"","
235247,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlExternalTableImportTest.java,165,,"      st.executeUpdate(""INSERT INTO "" + fullTableName"
235248,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlImportTest.java,185,,"          + manager.escapeColName(""start_date"") + "" DATE, """
235249,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlImportTest.java,190,,"      st.executeUpdate(""INSERT INTO "" + fullTableName"
235250,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlImportTest.java,347,,"    String [] extraArgs = { ""--incremental"", ""lastmodified"","
235251,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlImportTest.java,347,,"    String [] extraArgs = { ""--incremental"", ""lastmodified"","
235252,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/postgresql/PostgresqlImportTest.java,348,,"       ""--check-column"", ""start_date"","
235253,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/ManagerCompatExport.java,329,,"              .println(""------------------------------------------------------"""
235254,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/ManagerCompatExport.java,330,,"                + ""-----"");"
235255,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerDatatypeImportDelimitedFileTest.java,256,,"  @Ignore(""Ignored as used type is not supported for table splitting."")"
235256,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerDatatypeImportSequenceFileTest.java,157,,"        fr.append(""Error\t"" + res + ""\n"");"
235257,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerDatatypeImportSequenceFileTest.java,242,,"      assertTrue(""This test should not pass on sql server"", false);"
235258,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerDatatypeImportSequenceFileTest.java,244,,"      System.out.println(""Test failed, this was expected"");"
235259,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerManagerExportTest.java,134,,"        LOG.warn(""Exception while closing stmt"", ex);"
235260,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerManagerExportTest.java,319,,"    createTestFile(""inputFile"", new String[] {"
235261,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerManagerExportTest.java,320,,"      ""2,Bob,400,sales"","
235262,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerManagerExportTest.java,321,,"      ""3,Fred,15,marketing"","
235263,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerParseMethodsTest.java,209,,"    String[] types = { ""INTEGER"", ""VARCHAR(32)"", ""INTEGER"" };"
235264,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerParseMethodsTest.java,209,,"    String[] types = { ""INTEGER"", ""VARCHAR(32)"", ""INTEGER"" };"
235265,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/SQLServerParseMethodsTest.java,213,,"    runParseTest("","", ""\\n"", ""\\\"""", ""\\"", false);"
235266,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/TestSqlServerManagerContextConfigurator.java,58,,"    ImportJobContext context = new ImportJobContext(""TABLE_NAME"", ""example.jar"", options, null);"
235267,./TargetProjects/sqoop/src/test/org/apache/sqoop/manager/sqlserver/TestSqlServerManagerContextConfigurator.java,58,,"    ImportJobContext context = new ImportJobContext(""TABLE_NAME"", ""example.jar"", options, null);"
235268,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestImportJob.java,72,,"    createTableForColType(""VARCHAR(32)"", ""'meep'"");"
235269,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestImportJob.java,72,,"    createTableForColType(""VARCHAR(32)"", ""'meep'"");"
235270,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestImportJob.java,86,,"    String[] argv = getArgv(true, new String[] { ""DATA_COL0"" }, conf);"
235271,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestImportJob.java,94,,"      LOG.info(""Got exceptional return (expected: ok). msg is: "" + e);"
235272,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestJdbcExportJob.java,58,,"    opts.setExportDir(""myexportdir"");"
235273,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestJdbcExportJob.java,62,,"    assertEquals(asSetOfText(""Age"", ""Name"", ""Gender""), DefaultStringifier.load(job.getConfiguration(), AvroExportMapper.AVRO_COLUMN_TYPES_MAP, MapWritable.class).keySet());"
235274,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestJdbcExportJob.java,62,,"    assertEquals(asSetOfText(""Age"", ""Name"", ""Gender""), DefaultStringifier.load(job.getConfiguration(), AvroExportMapper.AVRO_COLUMN_TYPES_MAP, MapWritable.class).keySet());"
235275,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/TestJdbcExportJob.java,62,,"    assertEquals(asSetOfText(""Age"", ""Name"", ""Gender""), DefaultStringifier.load(job.getConfiguration(), AvroExportMapper.AVRO_COLUMN_TYPES_MAP, MapWritable.class).keySet());"
235276,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/db/TestDataDrivenDBInputFormat.java,194,,"      s.executeUpdate(""INSERT INTO "" + DATE_TABLE + "" VALUES('2010-04-01')"");"
235277,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetFTPRecordReader.java,230,,"      Assert.assertTrue(""Retrieve of dataset"", mfDFTPRR.nextKeyValue());"
235278,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetFTPRecordReader.java,231,,"      Assert.assertEquals(""Key should increase by records"", 1, mfDFTPRR"
235279,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetFTPRecordReader.java,233,,"      Assert.assertEquals(""Read value by line and by dataset"", ""123"", mfDFTPRR"
235280,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetFTPRecordReader.java,235,,"      Assert.assertEquals(""Get progress according to left dataset"","
235281,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetInputSplit.java,55,,"    String mainframeDataset = ""test"";"
235282,./TargetProjects/sqoop/src/test/org/apache/sqoop/mapreduce/mainframe/TestMainframeDatasetPath.java,36,,"		String dsName = ""a.b.c.d"";"
235283,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestClassWriter.java,91,,"      LOG.error(""Got SQLException: "" + sqlE.toString());"
235284,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestClassWriter.java,244,,"      ""--bindir"","
235285,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestClassWriter.java,246,,"      ""--outdir"","
235286,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestClassWriter.java,267,,"      ""--class-name"","
235287,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestClassWriter.java,313,,"      ""--package-name"","
235288,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestParseMethods.java,168,,"    String [] types = { ""INTEGER"", ""VARCHAR(32)"", ""INTEGER"" };"
235289,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestParseMethods.java,168,,"    String [] types = { ""INTEGER"", ""VARCHAR(32)"", ""INTEGER"" };"
235290,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestParseMethods.java,169,,"    String [] vals = { ""64"", ""'foo'"", ""128"" };"
235291,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestParseMethods.java,172,,"    runParseTest("","", ""\\n"", ""\\\"""", ""\\"", false);"
235292,./TargetProjects/sqoop/src/test/org/apache/sqoop/orm/TestParseMethods.java,202,,"    runParseTest("","", ""\\n"", ""\\\'"", ""\\"", false);"
235293,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/BaseSqoopTestCase.java,226,,"        LOG.error(""Got SQLException: "" + StringUtils.stringifyException(sqlE));"
235294,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/HsqldbTestServer.java,196,,"      st.executeUpdate(""INSERT INTO \"""" + DUMMY_TABLE_NAME + ""\"" VALUES(1, 8)"");"
235295,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/LobAvroImportTestCase.java,170,,"    String expectedVal = ""This is short BLOB data"";"
235296,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/LobAvroImportTestCase.java,177,,"    Path outputFile = new Path(getTablePath(), ""part-m-00000.avro"");"
235297,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/LobAvroImportTestCase.java,218,,"    assertTrue(""ExpectedStart: "" + expectedStart + "", value: "" + returnVal, returnVal.startsWith(expectedStart));"
235298,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,623,,"    verifyType(""REAL"", ""256"", getRealSeqOutput(""256""));"
235299,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,628,,"    verifyType(""REAL"", ""256.45"", getRealSeqOutput(""256.45""));"
235300,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,666,,"      log.info(""Skipping time test (unsupported)"");"
235301,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,670,,"    verifyType(""TIME"", getTimeInsertStr(""'12:24:00'""), ""12:24:00"");"
235302,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,740,,"    verifyType(getNumericType(), ""-10"","
235303,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,746,,"    verifyType(getNumericType(), ""3.14159"","
235304,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,753,,"        ""3000000000000000000.14159"","
235305,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,760,,"        ""99999999999999999999.14159"","
235306,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/ManagerCompatTestCase.java,768,,"        ""-99999999999999999999.14159"","
235307,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/TestArgumentArrayBuilder.java,32,,"    String[] expectedArray = { ""-D"", ""property=value3"", ""--option"", ""value2"", ""--"", ""--toolOption"", ""value1"" };"
235308,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/TestArgumentArrayBuilder.java,32,,"    String[] expectedArray = { ""-D"", ""property=value3"", ""--option"", ""value2"", ""--"", ""--toolOption"", ""value1"" };"
235309,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/TestArgumentArrayBuilder.java,34,,"    builder.withToolOption(""toolOption"", ""value1"")"
235310,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/TestArgumentArrayBuilder.java,35,,"        .withOption(""option"", ""value2"")"
235311,./TargetProjects/sqoop/src/test/org/apache/sqoop/testutil/TestArgumentArrayBuilder.java,36,,"        .withProperty(""property"", ""value3"");"
235312,./TargetProjects/sqoop/src/test/org/apache/sqoop/tool/TestMainframeImportTool.java,132,,"	  String[] args = new String[] { ""--dataset"", ""mydataset"",""--datasettype"", ""fjfdksjjf"" };"
235313,./TargetProjects/sqoop/src/test/org/apache/sqoop/tool/TestMainframeImportTool.java,173,,"	  String[] args = new String[] { ""--dataset"", ""mydatasetname"", ""--tape"", ""invalidvalue"" };"
235314,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,54,,"  private static final String DEFAULT_FTP_USERNAME=""user"";"
235315,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,55,,"  private static final String DEFAULT_FTP_PASSWORD=""pssword"";"
235316,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,79,,"      fail(""No IOException should be thrown!"");"
235317,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,180,,"        file2.setName(""blah2"");"
235318,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,191,,"    conf.set(MainframeConfiguration.MAINFRAME_INPUT_DATASET_NAME,""a.b.c.blah1"");"
235319,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestMainframeFTPClientUtils.java,357,,"    verify(mockFTPClient).sendCommand(""quote SITE RDW READTAPEFORMAT=V"");"
235320,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestOptionsFileExpansion.java,175,,"        ""--query"","
235321,./TargetProjects/sqoop/src/test/org/apache/sqoop/util/TestOptionsFileExpansion.java,176,,"        ""SELECT * FROM table"","
235322,./TargetProjects/sqoop/src/test/org/apache/sqoop/validation/RowCountValidatorImportTest.java,53,,"    String[] types = {""INT NOT NULL PRIMARY KEY"", ""VARCHAR(32)"", ""VARCHAR(32)""};"
235323,./TargetProjects/sqoop/src/test/org/apache/sqoop/validation/RowCountValidatorImportTest.java,53,,"    String[] types = {""INT NOT NULL PRIMARY KEY"", ""VARCHAR(32)"", ""VARCHAR(32)""};"
235324,./TargetProjects/sqoop/src/test/org/apache/sqoop/validation/RowCountValidatorImportTest.java,54,,"    String[] insertVals = {""1"", ""'Bob'"", ""'sales'""};"
235325,./TargetProjects/sqoop/src/test/org/apache/sqoop/validation/RowCountValidatorImportTest.java,54,,"    String[] insertVals = {""1"", ""'Bob'"", ""'sales'""};"
235326,./TargetProjects/stanbol/commons/ixa-pipe-nerc/src/main/java/org/apache/stanbol/commons/ixa/pipe/nerc/Activator.java,91,,"        prop.put(""opennlp"", Word2VecClusterSerializer.class.getName());"
235327,./TargetProjects/stanbol/commons/marmotta/kiwi/src/main/java/org/apache/stanbol/commons/marmotta/kiwi/KiWiRepositoryService.java,86,,"    @Property(value=""kiwi"")"
235328,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/NamespaceMappingsUtilsTest.java,45,,"        Assert.assertTrue(NamespaceMappingUtils.checkNamespace(""http://www.example.com/""));"
235329,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/NamespaceMappingsUtilsTest.java,47,,"        Assert.assertTrue(NamespaceMappingUtils.checkNamespace(""http://www.example.com/test/""));"
235330,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/NamespaceMappingsUtilsTest.java,49,,"        Assert.assertTrue(NamespaceMappingUtils.checkNamespace(""http://www.example.com/test#""));"
235331,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/NamespaceMappingsUtilsTest.java,78,,"        Assert.assertEquals(""urn:example:"","
235332,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/NamespaceMappingsUtilsTest.java,91,,"        Assert.assertEquals(""test"","
235333,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/impl/NamespacePrefixProviderImplTest.java,57,,"        Assert.assertEquals(""http://www.example.org/test#"", provider.getNamespace(""test"")); "
235334,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/impl/NamespacePrefixProviderImplTest.java,57,,"        Assert.assertEquals(""http://www.example.org/test#"", provider.getNamespace(""test"")); "
235335,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/impl/NamespacePrefixProviderImplTest.java,63,,"        Assert.assertEquals(""test2"",prefixes.get(1));"
235336,./TargetProjects/stanbol/commons/namespaceprefix/service/src/test/java/org/apache/stanbol/commons/namespaceprefix/service/StanbolNamespacePrefixServiceTest.java,65,,"        Assert.assertEquals(""http://www.example.org/test#"", service.getNamespace(""test"")); "
235337,./TargetProjects/stanbol/commons/namespaceprefix/stanbolprovider/src/main/java/org/apache/stanbol/commons/namespaceprefix/mappings/DefaultNamespaceMappingsEnum.java,71,,"    dbpedia_ont(""dbpedia-ont"", ""http://dbpedia.org/ontology/""),"
235338,./TargetProjects/stanbol/commons/opennlp/src/main/java/org/apache/stanbol/commons/opennlp/OpenNLP.java,556,,"                ""Unable to create %s for %s!"",modelType.getSimpleName(),"
235339,./TargetProjects/stanbol/commons/owl/src/main/java/org/apache/stanbol/commons/owl/transformation/JenaToOwlConvert.java,100,,"                System.err.println(""ModelJenaToOwlConvert::: "" + e);"
235340,./TargetProjects/stanbol/commons/owl/src/main/java/org/apache/stanbol/commons/owl/transformation/JenaToOwlConvert.java,110,,"            if (!format.equals(""RDF/XML"")) {"
235341,./TargetProjects/stanbol/commons/owl/src/main/java/org/apache/stanbol/commons/owl/transformation/JenaToOwlConvert.java,337,,"                    .create(""http://www.semanticweb.org/owlapi/ontologies/ontology""));"
235342,./TargetProjects/stanbol/commons/owl/src/main/java/org/apache/stanbol/commons/owl/transformation/JenaToOwlConvert.java,555,,"                System.err.println(""ClassOwlToJena::: "" + e);"
235343,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,82,,"        map.put(""rdfs"",""<http://www.w3.org/2000/01/rdf-schema#>"");"
235344,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,82,,"        map.put(""rdfs"",""<http://www.w3.org/2000/01/rdf-schema#>"");"
235345,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,83,,"        map.put(""xsd"",""<http://www.w3.org/2000/01/rdf-schema#>"");"
235346,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,84,,"        map.put(""owl"",""<http://www.w3.org/2000/01/rdf-schema#>"");"
235347,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,85,,"        map.put(""rdf"",""<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"");"
235348,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/RunSingleSPARQLTest.java,85,,"        map.put(""rdf"",""<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"");"
235349,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/transformation/ConversionTester.java,150,,"                fail(""Some errors occur"");"
235350,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/transformation/ConversionTester.java,180,,"            fail(""Exception caugth"");"
235351,./TargetProjects/stanbol/commons/owl/src/test/java/org/apache/stanbol/commons/owl/util/TestOWLUtils.java,74,,"        log.info(""Testing lookahead for location {}"", location);"
235352,./TargetProjects/stanbol/commons/security/usermanagement/src/main/java/org/apache/stanbol/commons/usermanagement/resource/UserResource.java,120,,"    public Graph getUserContext(@PathParam(""username"") String userName)"
235353,./TargetProjects/stanbol/commons/solr/core/src/main/java/org/apache/stanbol/commons/solr/utils/ConfigUtils.java,75,,"        cfm.put(SOLR_INDEX_ARCHIVE_EXTENSION, ""zip""); // the default if not specified"
235354,./TargetProjects/stanbol/commons/solr/core/src/main/java/org/apache/stanbol/commons/solr/utils/ConfigUtils.java,167,,"    @SuppressWarnings(""unchecked"")"
235355,./TargetProjects/stanbol/commons/solr/core/src/main/java/org/apache/stanbol/commons/solr/utils/ConfigUtils.java,180,,"                                            + "" extists but is not a directory!"");"
235356,./TargetProjects/stanbol/commons/solr/managed/src/main/java/org/apache/stanbol/commons/solr/managed/IndexMetadata.java,131,,"            throw new IOException(""Unable to ""+(store?""store"":""read"")+"
235357,./TargetProjects/stanbol/commons/solr/managed/src/main/java/org/apache/stanbol/commons/solr/managed/IndexMetadata.java,131,,"            throw new IOException(""Unable to ""+(store?""store"":""read"")+"
235358,./TargetProjects/stanbol/commons/solr/managed/src/main/java/org/apache/stanbol/commons/solr/managed/IndexMetadata.java,131,,"            throw new IOException(""Unable to ""+(store?""store"":""read"")+"
235359,./TargetProjects/stanbol/commons/solr/managed/src/main/java/org/apache/stanbol/commons/solr/managed/impl/ManagedSolrServerImpl.java,420,,"            throw new IllegalArgumentException(""The parsed index name MUST NOT be NULL nor empty!"");"
235360,./TargetProjects/stanbol/commons/solr/managed/src/main/java/org/apache/stanbol/commons/solr/managed/standalone/StandaloneManagedSolrServer.java,270,,"            throw new IllegalArgumentException(""The parsed index name MUST NOT be NULL nor empty!"");"
235361,./TargetProjects/stanbol/commons/testing/http/src/main/java/org/apache/stanbol/commons/testing/http/ServletContextMock.java,65,,"        throw new UnsupportedOperationException(""not included in the mock implementation"");"
235362,./TargetProjects/stanbol/commons/web/base/src/main/java/org/apache/stanbol/commons/web/base/format/KRFormat.java,38,,"    public static final MediaType FUNCTIONAL_OWL_TYPE = new MediaType(""text"", ""owl-functional"");"
235363,./TargetProjects/stanbol/commons/web/base/src/main/java/org/apache/stanbol/commons/web/base/format/KRFormat.java,78,,"    public static final MediaType OWL_XML_TYPE = new MediaType(""application"", ""owl+xml"");"
235364,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/HermitReasoningServiceTest.java,110,,"            log.debug(""Created test ontology with ID: {}"", testOntologyID);"
235365,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/HermitReasoningServiceTest.java,122,,"            log.debug(""Running HermiT"");"
235366,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/HermitReasoningServiceTest.java,136,,"                    log.error(""missing expected axiom: {}"", expected);"
235367,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/HermitReasoningServiceTest.java,146,,"            log.error(""An {} have been thrown while creating the input ontology for test"", e.getClass());"
235368,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/HermitReasoningServiceTest.java,149,,"            log.error(""An {} have been thrown while executing the reasoning"", e.getClass());"
235369,./TargetProjects/stanbol/contrib/reasoners/hermit/src/test/java/org/apache/stanbol/reasoners/hermit/TestData.java,49,,"			.getProperty(""file.separator"") + LOCAL_RESOURCE_FOAF);"
235370,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,95,,"                throw new IllegalStateException(""Multiple Models for Language '"" + lang"
235371,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,96,,"                                                + ""'! This is an error in the static confituration of """
235372,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,97,,"                                                + ""this class. Please report this to the stanbol-dev mailing"""
235373,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,98,,"                                                + ""list!"");"
235374,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,372,,"                    throw new IllegalStateException(""Unable to instantiate "" + clazz.getSimpleName()"
235375,./TargetProjects/stanbol/enhancement-engines/celi/src/main/java/org/apache/stanbol/enhancer/engines/celi/CeliTagSetRegistry.java,373,,"                                                    + "" with String tag '"" + tag + ""'!"", e);"
235376,./TargetProjects/stanbol/enhancement-engines/celi/src/test/java/org/apache/stanbol/enhancer/engines/celi/lemmatizer/impl/CeliLemmatizerEnhancementEngineTest.java,221,,"            	assertTrue(""Part of Speech of ""+TERM+"" should be ""+LexicalCategory.Noun , (cat==LexicalCategory.Noun));"
235377,./TargetProjects/stanbol/enhancement-engines/celi/src/test/java/org/apache/stanbol/enhancer/engines/celi/testutils/MockComponentContext.java,52,,"        throw new UnsupportedOperationException(""Mock implementation"");"
235378,./TargetProjects/stanbol/enhancement-engines/dbpedia-spotlight/src/main/java/org/apache/stanbol/enhancer/engines/dbpspotlight/annotate/DBPSpotlightAnnotateEnhancementEngine.java,212,,"								debugStream.toString(""UTF-8""));"
235379,./TargetProjects/stanbol/enhancement-engines/dbpedia-spotlight/src/main/java/org/apache/stanbol/enhancer/engines/dbpspotlight/candidates/DBPSpotlightCandidatesEnhancementEngine.java,214,,"								debugStream.toString(""UTF-8""));"
235380,./TargetProjects/stanbol/enhancement-engines/dbpedia-spotlight/src/main/java/org/apache/stanbol/enhancer/engines/dbpspotlight/disambiguate/DBPSpotlightDisambiguateEnhancementEngine.java,227,,"								debugStream.toString(""UTF-8""));"
235381,./TargetProjects/stanbol/enhancement-engines/dereference/core/src/test/java/org/apache/stanbol/enhancer/engines/dereference/DereferenceEngineTest.java,176,,"        ContentItem ci = getContentItem(""urn:test:testSyncDereferencing"");"
235382,./TargetProjects/stanbol/enhancement-engines/entitycoreference/src/test/java/org/apache/stanbol/enhancer/engines/entitycoreference/EntityCoReferenceEngineTest.java,123,,"		int chancellorStartIdx = sentence2.getSpan().indexOf(""politician"");"
235383,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/EntityLinkerConfig.java,603,,"                throw new ConfigurationException(SUGGESTIONS, ""Values MUST be valid Integer values > 0"",e);"
235384,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/EntityLinkerConfig.java,652,,"                throw new ConfigurationException(MIN_LABEL_SCORE, ""Parsed value '"""
235385,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/EntityLinkerConfig.java,653,,"                        +value+""' is not an valid double!"");"
235386,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/TextProcessingConfig.java,321,,"            language == null ? ""default"":language);"
235387,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/TextProcessingConfig.java,462,,"                throw new IllegalStateException(""Unable to create new ""+clazz.getSimpleName()"
235388,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/config/TextProcessingConfig.java,463,,"                    +""(""+paramVal.trim()+""::String)"",e);"
235389,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,131,,"        IRI uri = new IRI(""urn:test:PatrickMarshall"");"
235390,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,139,,"        graph.add(new TripleImpl(uri, REDIRECT, new IRI(""urn:test:redirect:Geologist"")));"
235391,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,147,,"        uri = new IRI(""urn:test:NewZealand"");"
235392,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,148,,"        graph.add(new TripleImpl(uri, NAME, new PlainLiteralImpl(""New Zealand"")));"
235393,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,152,,"        uri = new IRI(""urn:test:UniversityOfOtago"");"
235394,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,153,,"        graph.add(new TripleImpl(uri, NAME, new PlainLiteralImpl(""University of Otago"")));"
235395,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,173,,"        uri = new IRI(""urn:test:UniversityOfOtago_Texas"");"
235396,./TargetProjects/stanbol/enhancement-engines/entitylinking/engine/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/engine/EntityLinkingEngineTest.java,199,,"        at.addChunk(TEST_TEXT.indexOf(""geologist""), TEST_TEXT.indexOf(""geologist"")+""geologist"".length())"
235397,./TargetProjects/stanbol/enhancement-engines/entitylinking/labeltokenizer-lucene/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/labeltokenizer/lucene/LuceneLabelTokenizer.java,303,,"                + ""for class "" + analyzerClass +"" (analyzer: '""+analyzerName+""') !"");"
235398,./TargetProjects/stanbol/enhancement-engines/entitylinking/labeltokenizer-lucene/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/labeltokenizer/lucene/LuceneLabelTokenizer.java,310,,"            throw new ConfigurationException(property, ""Unable to instantiate """
235399,./TargetProjects/stanbol/enhancement-engines/entitylinking/labeltokenizer-lucene/src/main/java/org/apache/stanbol/enhancer/engines/entitylinking/labeltokenizer/lucene/LuceneLabelTokenizer.java,311,,"                +type.getSimpleName()+' '+ analyzerClass +"" (analyzer: ""+analyzerName+""') !"",e);"
235400,./TargetProjects/stanbol/enhancement-engines/entitylinking/labeltokenizer-lucene/src/test/java/org/apache/stanbol/enhancer/engines/entitylinking/labeltokenizer/lucene/MockComponentContext.java,172,,"                throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates."
235401,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,152,,"        type(""json"", ""string"", ""xml"", ""json"", ""rdf""),"
235402,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,157,,"        style(""FULL"", ""SHORT"", ""MEDIUM"", ""LONG"", ""FULL""),"
235403,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,391,,"            log.info(""    - responseTime: "" + responseTime + ""ms"");"
235404,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,402,,"                    if (root.has(""geonames"")) {"
235405,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,417,,"                if (root.has(""status"")) {"
235406,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/GeonamesAPIWrapper.java,419,,"                    if (status.has(""message"")) {"
235407,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/LocationEnhancementEngine.java,211,,"        typeMappings.put(""H.STM"", riverTypes);"
235408,./TargetProjects/stanbol/enhancement-engines/geonames/src/main/java/org/apache/stanbol/enhancer/engines/geonames/impl/Toponym.java,85,,"            throw new IllegalStateException(String.format(""Unable to parse %s form %s"","
235409,./TargetProjects/stanbol/enhancement-engines/htmlextractor/src/test/java/org/apache/stanbol/enhancer/engines/htmlextractor/TestHtmlExtractor.java,85,,"        assertNotNull(""failed to load resource "" + testFile, in);"
235410,./TargetProjects/stanbol/enhancement-engines/htmlextractor/src/test/java/org/apache/stanbol/enhancer/engines/htmlextractor/TestHtmlExtractor.java,87,,"        extractor.extract(""file://"" + testFile,in,null, ""text/html"", model);"
235411,./TargetProjects/stanbol/enhancement-engines/htmlextractor/src/test/java/org/apache/stanbol/enhancer/engines/htmlextractor/TestHtmlExtractor.java,87,,"        extractor.extract(""file://"" + testFile,in,null, ""text/html"", model);"
235412,./TargetProjects/stanbol/enhancement-engines/htmlextractor/src/test/java/org/apache/stanbol/enhancer/engines/htmlextractor/TestHtmlExtractor.java,94,,"        ClerezzaRDFUtils.makeConnected(model, new IRI(""file://"" + testFile), new IRI(NIE_NS+""contains""));"
235413,./TargetProjects/stanbol/enhancement-engines/keywordextraction/src/main/java/org/apache/stanbol/enhancer/engines/keywordextraction/engine/KeywordLinkingEngine.java,735,,"                throw new ConfigurationException(MAX_SUGGESTIONS, ""Values MUST be valid Integer values > 0"",e);"
235414,./TargetProjects/stanbol/enhancement-engines/kuromoji-nlp/src/main/java/org/apache/stanbol/enhancer/engines/kuromoji/impl/KuromojiNlpEngine.java,133,,"        TOKENIZER_FACTORY_CONFIG.put(""luceneMatchVersion"", LUCENE_VERSION.toString());"
235415,./TargetProjects/stanbol/enhancement-engines/kuromoji-nlp/src/test/java/org/apache/stanbol/enhancer/engines/kuromoji/impl/MockComponentContext.java,52,,"        throw new UnsupportedOperationException(""Mock implementation"");"
235416,./TargetProjects/stanbol/enhancement-engines/kuromoji-nlp/src/test/java/org/apache/stanbol/enhancer/engines/kuromoji/impl/MockComponentContext.java,207,,"            throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates."
235417,./TargetProjects/stanbol/enhancement-engines/lucenefstlinking/src/test/java/org/apache/stanbol/enhancer/engines/lucenefstlinking/FstLinkingEngineTest.java,149,,"        DBPEDIA+""Germany"", DBPEDIA+""Social_Democratic_Party_of_Germany"","
235418,./TargetProjects/stanbol/enhancement-engines/lucenefstlinking/src/test/java/org/apache/stanbol/enhancer/engines/lucenefstlinking/FstLinkingEngineTest.java,150,,"        DBPEDIA+""Greece""); "
235419,./TargetProjects/stanbol/enhancement-engines/metaxa/src/test/java/org/apache/stanbol/enhancer/engines/metaxa/core/TestMetaxaCore.java,90,,"        assertNotNull(""failed to load resource "" + testFile, in);"
235420,./TargetProjects/stanbol/enhancement-engines/metaxa/src/test/java/org/apache/stanbol/enhancer/engines/metaxa/core/TestMetaxaCore.java,92,,"        Model m = extractor.extract(in, new URIImpl(""file://"" + testFile), ""application/pdf"");"
235421,./TargetProjects/stanbol/enhancement-engines/opencalais/src/main/java/org/apache/stanbol/enhancer/engines/opencalais/impl/OpenCalaisEngine.java,300,,"                        log.debug(""Calais Enhancements:\n{}"",debugStream.toString(""UTF-8""));"
235422,./TargetProjects/stanbol/enhancement-engines/opennlp/opennlp-ner/src/test/java/org/apache/stanbol/enhancer/engines/opennlp/impl/TestNamedEntityExtractionEnhancementEngine.java,101,,"        assertTrue(names.contains(""Patrick Marshall""));"
235423,./TargetProjects/stanbol/enhancement-engines/textannotationnewmodel/src/test/java/org/apache/stanbol/enhancer/engines/textannotationnewmodel/impl/MockComponentContext.java,52,,"        throw new UnsupportedOperationException(""Mock implementation"");"
235424,./TargetProjects/stanbol/enhancement-engines/tika/src/main/java/org/apache/stanbol/enhancer/engines/tika/metadata/OntologyMappings.java,210,,"            new PropertyMapping(dc+""created"",XSD.dateTime,"
235425,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,113,,"            singleton(""text/plain""));"
235426,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,118,,"            ""The Apache Stanbol Enhancer"","
235427,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,119,,"            ""The Stanbol enhancer can detect famous cities such as Paris and people such as Bob Marley."");"
235428,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,122,,"            singleton(""application/xhtml+xml""));"
235429,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,127,,"            ""<html xmlns=\""http://www.w3.org/1999/xhtml\"">"","
235430,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,128,,"            ""<head>"","
235431,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,129,,"            ""<meta name="","
235432,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,132,,"            ""The Stanbol enhancer can detect famous cities"","
235433,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,133,,"            ""</body></html>"");"
235434,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,319,,"        verifyValue(ci, new IRI(NamespaceEnum.dc+""creator""), null,""Julien Nioche (JIRA) <jira@apache.org>"");"
235435,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,324,,"        verifyValue(ci, new IRI(NamespaceEnum.media+""hasFormat""),null,""message/rfc822"");"
235436,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,340,,"        ContentItem ci = createContentItem(""testMP3id3v24.mp3"", ""audio/mpeg"");"
235437,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,350,,"            ""Test Artist"","
235438,./TargetProjects/stanbol/enhancement-engines/tika/src/test/java/org/apache/stanbol/enhancer/engines/tika/TikaEngineTest.java,351,,"            ""Test Album"");"
235439,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/main/java/org/apache/stanbol/enhancer/engine/topic/TopicClassificationEngine.java,656,,"                SolrQuery metadataQuery = new SolrQuery(""*:*"");"
235440,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,96,,"            baseDir = System.getProperty(""user.dir"");"
235441,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,225,,"        classifier.addConcept(""http://example.com/topics/root1"", null);"
235442,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,226,,"        classifier.addConcept(""http://example.com/topics/root2"", null);"
235443,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,227,,"        classifier.addConcept(""http://example.com/topics/root3"", new ArrayList<String>());"
235444,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,234,,"        classifier.addConcept(""http://example.com/topics/node1"","
235445,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,236,,"        classifier.addConcept(""http://example.com/topics/node2"","
235446,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,425,,"            classifier.getPerformanceEstimates(""urn:t/001"");"
235447,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TopicEngineTest.java,433,,"        classifier.addConcept(""urn:t/002"", Arrays.asList(""urn:t/001""));"
235448,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TrainingSetTest.java,83,,"            baseDir = System.getProperty(""user.dir"");"
235449,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TrainingSetTest.java,163,,"        trainingSet.registerExample(""example1"", ""Text of example1."", Arrays.asList(TOPIC_1));"
235450,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TrainingSetTest.java,163,,"        trainingSet.registerExample(""example1"", ""Text of example1."", Arrays.asList(TOPIC_1));"
235451,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/TrainingSetTest.java,164,,"        trainingSet.registerExample(""example2"", ""Text of example2."", Arrays.asList(TOPIC_1, TOPIC_2));"
235452,./TargetProjects/stanbol/enhancement-engines/topic/engine/src/test/java/org/apache/stanbol/enhancer/engine/topic/integration/TopicClassificationOSGiTest.java,76,,"            mavenBundle(""org.apache.stanbol"", ""org.apache.stanbol.commons.stanboltools.datafileprovider"")"
235453,./TargetProjects/stanbol/enhancement-engines/uima/uimaremote/src/main/java/org/apache/stanbol/enhancer/engines/uimaremote/tools/UIMAServletClient.java,59,,"            String data = URLEncoder.encode(""text"", ""UTF-8"") + ""="" + URLEncoder.encode(input, ""UTF-8"");"
235454,./TargetProjects/stanbol/enhancement-engines/zemanta/src/main/java/org/apache/stanbol/enhancer/engines/zemanta/ZemantaOntologyEnum.java,41,,"    targetType_RDF(""http://s.zemanta.com/targets#"", ""rdf""),"
235455,./TargetProjects/stanbol/enhancer/benchmark/src/main/java/org/apache/stanbol/enhancer/benchmark/impl/BenchmarkServlet.java,114,,"            return bos.toString(""UTF-8"");"
235456,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/MorphoFeaturesSupport.java,96,,"                jCase.put(""tag"", caseTag.getTag());"
235457,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/MorphoFeaturesSupport.java,98,,"                    jCase.put(""type"", caseTag.getCase().name());"
235458,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/MorphoFeaturesSupport.java,107,,"                jMorpho.put(""definitness"",definitnesses.get(0).name());"
235459,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/MorphoFeaturesSupport.java,145,,"                jMorpho.put(""person"",persons.get(0).name());"
235460,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/MorphoFeaturesSupport.java,218,,"                            + ""missing or is not a String (json: ""+jCase.toString()+"")"");"
235461,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/main/java/org/apache/stanbol/enhancer/nlp/json/valuetype/impl/PosTagSupport.java,75,,"        if(jValue.has(""pos"")){"
235462,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/test/java/org/apache/stanbol/enhancer/nlp/json/valuetype/DependencyRelationSupportTest.java,46,,"	    + ""      \""partnerType\"" : \""Token\"","" + LINE_SEPARATOR"
235463,./TargetProjects/stanbol/enhancer/generic/nlp-json/src/test/java/org/apache/stanbol/enhancer/nlp/json/valuetype/DependencyRelationSupportTest.java,49,,"	    + ""      \""class\"" : \""org.apache.stanbol.enhancer.nlp.dependency.DependencyRelation\"""" + LINE_SEPARATOR"
235464,./TargetProjects/stanbol/enhancer/generic/nlp/src/main/java/org/apache/stanbol/enhancer/nlp/model/impl/AnnotatedImpl.java,34,,"    @SuppressWarnings(""unchecked"")"
235465,./TargetProjects/stanbol/enhancer/generic/nlp/src/main/java/org/apache/stanbol/enhancer/nlp/model/impl/SectionImpl.java,69,,"    @SuppressWarnings(""unchecked"")"
235466,./TargetProjects/stanbol/enhancer/generic/nlp/src/main/java/org/apache/stanbol/enhancer/nlp/utils/NlpEngineHelper.java,81,,"                    + ""used EnhancementJobManager!"");"
235467,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/model/AnalysedTextTest.java,121,,"        int parisStart = sent1.getSpan().indexOf(""Paris"");"
235468,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/model/AnalysedTextTest.java,158,,"        Token texasSent2 = parisInTexas.addToken(parisInTexas.getSpan().indexOf(""Texas""),"
235469,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/model/AnalysedTextTest.java,309,,"            log.info(""  {}"",sent);"
235470,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/pos/PosTagTest.java,30,,"        PosTag tag = new PosTag(""test"", LexicalCategory.Noun);"
235471,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,35,,"        config.put(""test"", ""de,en"");"
235472,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,41,,"        config.put(""test2"", new String[]{""ru"",""fi""});"
235473,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,47,,"        config.put(""test3"", Arrays.asList(""zh"",""jp""));"
235474,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,86,,"        Assert.assertEquals(""test"", lc.getParameter(""de"", ""param1""));"
235475,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,100,,"        Assert.assertEquals(""test1"", lc.getParameter(""fi"", ""param1""));"
235476,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,101,,"        Assert.assertEquals(""test2"", lc.getParameter(""fi"", ""param2""));"
235477,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,131,,"        Assert.assertEquals(""default"", lc.getParameter(""en"", ""param""));"
235478,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,131,,"        Assert.assertEquals(""default"", lc.getParameter(""en"", ""param""));"
235479,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,177,,"        Assert.assertTrue(lc.isLanguage(""de-AT""));"
235480,./TargetProjects/stanbol/enhancer/generic/nlp/src/test/java/org/apache/stanbol/enhancer/nlp/utils/LanguageConfigurationTest.java,178,,"        Assert.assertTrue(lc.isLanguage(""de-CH""));"
235481,./TargetProjects/stanbol/enhancer/generic/rdfentities/src/main/java/org/apache/stanbol/enhancer/rdfentities/impl/RdfProxyInvocationHandler.java,266,,"                                throw new IllegalStateException(""Unable to parse ""+URI.class"
235482,./TargetProjects/stanbol/enhancer/generic/rdfentities/src/main/java/org/apache/stanbol/enhancer/rdfentities/impl/RdfProxyInvocationHandler.java,267,,"                                        +"" for ""+IRI.class+"" value=""+((IRI)result).getUnicodeString());"
235483,./TargetProjects/stanbol/enhancer/generic/rdfentities/src/main/java/org/apache/stanbol/enhancer/rdfentities/impl/RdfProxyInvocationHandler.java,267,,"                                        +"" for ""+IRI.class+"" value=""+((IRI)result).getUnicodeString());"
235484,./TargetProjects/stanbol/enhancer/generic/rdfentities/src/test/java/org/apache/stanbol/enhancer/rdfentities/RdfEntityFactoryTest.java,57,,"        String testUri = ""urn:RdfEntityFactoryTest:TestEntity"";"
235485,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/ContentItemHelper.java,254,,"            throw new IllegalArgumentException(""The parsed ContentItem MUST NOT be NULL!"");"
235486,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/EnhancementEngineHelper.java,1041,,"            throw new NullPointerException(""The parsed Dictionary with the configuration MUST NOT be NULL!"");"
235487,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/EnhancementEngineHelper.java,1044,,"            throw new NullPointerException(""The parsed configuration property MUST NOT be NULL!"");"
235488,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/EnhancementEngineHelper.java,1080,,"            throw new NullPointerException(""The parsed EnhancementProperty MUST NOT be NULL"");"
235489,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/EnhancementEngineHelper.java,1083,,"            throw new NullPointerException(""The parsed Map with the EnhancementProperties MUST NOT be NULL"");"
235490,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/main/java/org/apache/stanbol/enhancer/servicesapi/helper/ExecutionPlanHelper.java,383,,"                throw new ChainException(""Execution Node ""+node+"" does not define "" +"
235491,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/test/java/org/apache/stanbol/enhancer/serviceapi/helper/EnhancementEngineHelperTest.java,127,,"        Object value = new String[]{""23"",""27.25"",""-23""};"
235492,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/test/java/org/apache/stanbol/enhancer/serviceapi/helper/EnhancementEngineHelperTest.java,127,,"        Object value = new String[]{""23"",""27.25"",""-23""};"
235493,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/test/java/org/apache/stanbol/enhancer/serviceapi/helper/EnhancementPropertyTest.java,244,,"        initExecutionMetadata(new TestChain(""test"", engines));"
235494,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/test/java/org/apache/stanbol/enhancer/serviceapi/helper/EnhancementPropertyTest.java,248,,"        assertNotNull(""EnhancementProperties ContentPart was not initialised"",ep);"
235495,./TargetProjects/stanbol/enhancer/generic/servicesapi/src/test/java/org/apache/stanbol/enhancer/serviceapi/impl/ContentSourceTest.java,264,,"        assertEquals(Charset.defaultCharset().name(), mt.get(""charset""));"
235496,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/BlobTest.java,48,,"    private static byte[] content = ""This is a test"".getBytes(Charset.forName(""UTF-8""));"
235497,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/BlobTest.java,99,,"        Assert.assertEquals(""text/plain"", blob.getMimeType());"
235498,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/BlobTest.java,100,,"        Assert.assertTrue(blob.getParameter().containsKey(""charset""));"
235499,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/BlobTest.java,107,,"        Assert.assertTrue(blob.getParameter().containsKey(""other""));"
235500,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/ContentItemTest.java,145,,"            assertFalse(""The part with the uri ""+uri+"" was not added correctly"","
235501,./TargetProjects/stanbol/enhancer/generic/test/src/main/java/org/apache/stanbol/enhancer/test/helper/EnhancementStructureHelper.java,169,,"                +selectedText.getLexicalForm()+""' (uri: ""+textAnnotation+"")!"",content.contains(selectedText.getLexicalForm()));"
235502,./TargetProjects/stanbol/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/reader/ContentItemReader.java,161,,"            log.trace(""content: \n{}"", new String(content,""UTF-8""));"
235503,./TargetProjects/stanbol/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/utils/RequestPropertiesHelper.java,111,,"    @SuppressWarnings(""unchecked"")"
235504,./TargetProjects/stanbol/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/writers/ContentItemWriter.java,131,,"        Collections.singletonMap(""charset"", UTF8.name()));"
235505,./TargetProjects/stanbol/enhancer/jersey/src/test/java/org/apache/stanbol/enhancer/jersey/ContentItemReaderWriterTest.java,156,,"        assertEquals(contentType.getParameters().get(""charset""),""UTF-8"");"
235506,./TargetProjects/stanbol/enhancer/jobmanager/event/src/main/java/org/apache/stanbol/enhancer/jobmanager/event/impl/EnhancementJob.java,333,,"        log.trace(""++ r: {}"",""getRunning"");"
235507,./TargetProjects/stanbol/enhancer/jobmanager/event/src/main/java/org/apache/stanbol/enhancer/jobmanager/event/impl/EnhancementJob.java,336,,"            log.trace("">> r: {}"",""getRunning"");"
235508,./TargetProjects/stanbol/enhancer/jobmanager/event/src/main/java/org/apache/stanbol/enhancer/jobmanager/event/impl/EnhancementJob.java,339,,"            log.trace(""<< r: {}"",""getRunning"");"
235509,./TargetProjects/stanbol/enhancer/ldpath/src/main/java/org/apache/stanbol/enhancer/ldpath/EnhancerLDPath.java,70,,"            path = String.format(""^%s[%s is %s]"","
235510,./TargetProjects/stanbol/enhancer/ldpath/src/main/java/org/apache/stanbol/enhancer/ldpath/EnhancerLDPath.java,75,,"                throw new IllegalStateException(""Unable to parse the ld-path selector '"" +"
235511,./TargetProjects/stanbol/enhancer/ldpath/src/test/java/org/apache/stanbol/enhancer/ldpath/ContentItemBackendTest.java,221,,"                Arrays.asList(""Bob Marley"",""Paris""));"
235512,./TargetProjects/stanbol/enhancer/ldpath/src/test/java/org/apache/stanbol/enhancer/ldpath/ContentItemBackendTest.java,278,,"                    new IRI(""http://dbpedia.org/resource/Paris""),"
235513,./TargetProjects/stanbol/enhancer/ldpath/src/test/java/org/apache/stanbol/enhancer/ldpath/ContentItemBackendTest.java,279,,"                    new IRI(""http://dbpedia.org/resource/Bob_Marley""),"
235514,./TargetProjects/stanbol/enhancer/ldpath/src/test/java/org/apache/stanbol/enhancer/ldpath/ContentItemBackendTest.java,284,,"            log.info(""Entity: {}"",r);"
235515,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityWrapper.java,89,,"            wrappedEntity.getMetadata().addReference(NamespaceEnum.dcTerms+""contributor"", reference);"
235516,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityWrapper.java,122,,"            wrappedEntity.getMetadata().addReference(NamespaceEnum.dcTerms+""creator"", reference);"
235517,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityWrapper.java,159,,"            wrappedEntity.getMetadata().addReference(NamespaceEnum.rdf+""type"", NamespaceEnum.cc+""Work"");"
235518,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityWrapper.java,159,,"            wrappedEntity.getMetadata().addReference(NamespaceEnum.rdf+""type"", NamespaceEnum.cc+""Work"");"
235519,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityhubComponent.java,135,,"                    name=""proposed""),"
235520,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/ReferencedSiteComponent.java,237,,"    @SuppressWarnings(""unchecked"")"
235521,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/SiteManagerImpl.java,278,,"                    log.warn(""Unable to access Site ""+site.getConfiguration().getName()+"
235522,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/SiteManagerImpl.java,279,,"                        "" (id = ""+site.getId()+"")"",e);"
235523,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/model/InMemoryRepresentation.java,82,,"    @SuppressWarnings(""unchecked"")"
235524,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/model/InMemoryRepresentation.java,86,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be NULL"");"
235525,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/model/InMemoryRepresentation.java,88,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be Empty"");"
235526,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/site/CacheUtils.java,54,,"            throw new IllegalArgumentException(""The parsed Yard MUST NOT be NULL!"");"
235527,./TargetProjects/stanbol/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/yard/AbstractYard.java,158,,"            throw new IllegalStateException(""This Yard is not activated"");"
235528,./TargetProjects/stanbol/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/util/PatternUtils.java,52,,"        StringBuilder regex = new StringBuilder(""\\b"");"
235529,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/it/EntityhubTestBase.java,79,,"                        .withHeader(""Accept"", ""text/html"")"
235530,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/it/EntityhubTestBase.java,89,,"                        .withHeader(""Accept"", ""application/json""));"
235531,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/model/RepresentationTest.java,75,,"        rep.add(null, ""test"");"
235532,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/model/RepresentationTest.java,87,,"        rep.addReference(null, ""urn:test"");"
235533,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/model/RepresentationTest.java,349,,"        String field = ""urn:the.field:used.for.this.Test"";"
235534,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/model/RepresentationTest.java,447,,"        String testReference = ""http://www.test.org/test"";"
235535,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/model/RepresentationTest.java,788,,"        rep.addNaturalText(field, NL_TEST_de_AT, ""de-AT"");"
235536,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,155,,"        assertTrue(""Result Query does not contain Limit property"",jQuery.has(""limit""));"
235537,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,158,,"        assertTrue(""Result Query does not contain offset property"",jQuery.has(""offset""));"
235538,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,163,,"        JSONArray jConstraints = jQuery.optJSONArray(""constraints"");"
235539,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,174,,"        assertEquals(""The 'patternType' of the Constraint is not 'wildcard' but ""+constraint.opt(""patternType""), "
235540,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,207,,"            ""'selected': [ 'http:\\/\\/www.test.org\\/test#field'], "" +"
235541,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,208,,"            ""'constraints': [{ "" +"
235542,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,209,,"                ""'type': 'text', "" +"
235543,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,211,,"                ""'patternType' : 'none', "" +"
235544,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,212,,"                ""'field': 'http:\\/\\/www.test.org\\/test#field', "" +"
235545,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,213,,"                ""'dataTypes': ['http:\\/\\/stanbol.apache.org\\/ontology\\/entityhub\\/entityhub#text'] "" +"
235546,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,239,,"                ""'text': 'Paris', "" + "
235547,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/query/QueryTestBase.java,275,,"                    ""'type': 'reference', ""+"
235548,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/yard/YardTest.java,197,,"        String field = ""urn:the.field:used.for.this.Test"";"
235549,./TargetProjects/stanbol/entityhub/generic/test/src/main/java/org/apache/stanbol/entityhub/test/yard/YardTest.java,441,,"        String testValue = ""This is a test"";"
235550,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/config/IndexingConfig.java,272,,"                log.info(""  - created"");"
235551,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/config/IndexingConfig.java,339,,"                    LineIterator it = IOUtils.lineIterator(new FileInputStream(indexFieldConfig), ""UTF-8"");"
235552,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/impl/IndexerImpl.java,387,,"                throw new IllegalStateException(""The Indexer MUST BE already ""+State.INDEXED+"" when calling this Method!"");"
235553,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/impl/IndexerImpl.java,387,,"                throw new IllegalStateException(""The Indexer MUST BE already ""+State.INDEXED+"" when calling this Method!"");"
235554,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/processor/LdpathSourceProcessor.java,78,,"    @SuppressWarnings(""rawtypes"")"
235555,./TargetProjects/stanbol/entityhub/indexing/core/src/main/java/org/apache/stanbol/entityhub/indexing/core/processor/LdpathSourceProcessor.java,124,,"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
235556,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ConfigTest.java,63,,"            baseDir = System.getProperty(""user.dir"");"
235557,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/DummyIndexingDestination.java,136,,"            throw new UnsupportedOperationException(""I think this is not needed for testing"");"
235558,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/IndexerTest.java,103,,"            baseDir = System.getProperty(""user.dir"");"
235559,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,101,,"            Arrays.asList(rootDir+""singleFileTest.txt""));"
235560,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,129,,"            folder+""archiveInFolder.zip"","
235561,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,130,,"            folder+""archiveWithIgnore.zip"","
235562,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,131,,"            folder+""archiveWithError.zip"","
235563,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,132,,"            folder+""errorFileInFolder.txt"","
235564,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,133,,"            folder+""fileInFolder.txt"","
235565,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,134,,"            folder+""ignoreFileInFolder.txt"","
235566,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/ResourceLoaderTest.java,135,,"            folder+""otherFileInFolder.txt""));"
235567,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/processor/FieldValueFilterTest.java,61,,"        new FieldValueFilter(nsPrefixProvider,""rdf:type"",""foaf:Person;skos:Concept;!skos:Concept"");"
235568,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/processor/FieldValueFilterTest.java,75,,"        Representation r = getRepresentation(NamespaceEnum.foaf+""Person"");"
235569,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/processor/FieldValueFilterTest.java,78,,"        r = getRepresentation(NamespaceEnum.skos+""Concept"");"
235570,./TargetProjects/stanbol/entityhub/indexing/core/src/test/java/org/apache/stanbol/entityhub/indexing/core/processor/FieldValueFilterTest.java,85,,"        filter = new FieldValueFilter(nsPrefixProvider,""skos:releated"","""");"
235571,./TargetProjects/stanbol/entityhub/indexing/dbpedia/src/test/java/org/apache/stanbol/entityhub/indexing/dbpedia/ConfigTest.java,48,,"            baseDir = System.getProperty(""user.dir"");"
235572,./TargetProjects/stanbol/entityhub/indexing/destination/solryard/src/test/java/org/apache/stanbol/entityhub/indexing/destination/solryard/SolrYardIndexingDestinationTest.java,102,,"            baseDir = System.getProperty(""user.dir"");"
235573,./TargetProjects/stanbol/entityhub/indexing/geonames/src/main/java/org/apache/stanbol/entityhub/indexing/geonames/HierarchyProcessor.java,153,,"            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(adminCodeFile), Charset.forName(""utf-8"")));"
235574,./TargetProjects/stanbol/entityhub/indexing/source/jenatdb/src/main/java/org/apache/stanbol/entityhub/indexing/source/jenatdb/AbstractTdbBackend.java,165,,"            throw new IllegalArgumentException(""parsed node is not an Literal"");"
235575,./TargetProjects/stanbol/entityhub/indexing/source/jenatdb/src/test/java/org/apache/stanbol/entityhub/indexing/source/jenatdb/LanguageLiteralFilterTest.java,41,,"            Node.createLiteral(""test"", ""en"", false)));"
235576,./TargetProjects/stanbol/entityhub/indexing/source/jenatdb/src/test/java/org/apache/stanbol/entityhub/indexing/source/jenatdb/RdfIndexingSourceTest.java,67,,"            baseDir = System.getProperty(""user.dir"");"
235577,./TargetProjects/stanbol/entityhub/indexing/source/sesame/src/main/java/org/apache/stanbol/entityhub/indexing/source/sesame/AbstractSesameBackend.java,215,,"            throw new IllegalArgumentException(""Value ""+n.stringValue()+"" is not a literal"" +"
235578,./TargetProjects/stanbol/entityhub/indexing/source/sesame/src/main/java/org/apache/stanbol/entityhub/indexing/source/sesame/AbstractSesameBackend.java,215,,"            throw new IllegalArgumentException(""Value ""+n.stringValue()+"" is not a literal"" +"
235579,./TargetProjects/stanbol/entityhub/indexing/source/sesame/src/main/java/org/apache/stanbol/entityhub/indexing/source/sesame/AbstractSesameBackend.java,216,,"                    ""but of type ""+debugType(n));"
235580,./TargetProjects/stanbol/entityhub/indexing/source/sesame/src/test/java/org/apache/stanbol/entityhub/indexing/source/sesame/RdfIndexingSourceTest.java,67,,"            baseDir = System.getProperty(""user.dir"");"
235581,./TargetProjects/stanbol/entityhub/indexing/source/vcard/src/main/java/org/apache/stanbol/entityhub/indexing/source/vcard/VcardIndexingSource.java,147,,"    @SuppressWarnings(""unchecked"")"
235582,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/EntityhubRootResource.java,145,,"        rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML+""; charset=utf-8"");"
235583,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/EntityhubRootResource.java,192,,"                                 @QueryParam(""create"") boolean create,"
235584,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/EntityhubRootResource.java,456,,"                                    @QueryParam(value = ""ldpath"") String ldpath,"
235585,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/ReferencedSiteRootResource.java,181,,"    public Response getHtmlInfo(@PathParam(value = ""site"") String siteId, "
235586,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/ReferencedSiteRootResource.java,184,,"        rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML+""; charset=utf-8"");"
235587,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/ReferencedSiteRootResource.java,528,,"                                    @QueryParam(value = ""ldpath"") String ldpath,"
235588,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/SiteManagerRootResource.java,148,,"        rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML+""; charset=utf-8"");"
235589,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/jersey/resource/SiteManagerRootResource.java,263,,"                                      @QueryParam(value = ""ldpath"") String ldpath,"
235590,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/impl/JsonModelWriter.java,254,,"            jValue.put(""type"", ""reference"");"
235591,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/impl/JsonModelWriter.java,255,,"            jValue.put(""xsd:datatype"", DataTypeEnum.AnyUri.getShortName());"
235592,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/impl/JsonModelWriter.java,256,,"            jValue.put(""value"", ((Reference)value).getReference());"
235593,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/reader/FieldQueryReader.java,296,,"                message.append(""Parsed Constraint: \n"");"
235594,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/reader/FieldQueryReader.java,492,,"        if(jConstraint.has(""text"") && !jConstraint.isNull(""text"")){"
235595,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/reader/FieldQueryReader.java,543,,"        if(jConstraint.has(""value"") && !jConstraint.isNull(""value"")){"
235596,./TargetProjects/stanbol/entityhub/jersey/src/main/java/org/apache/stanbol/entityhub/web/reader/RepresentationReader.java,155,,"                log.info(""Bad Request: {}"",e);"
235597,./TargetProjects/stanbol/entityhub/model/clerezza/src/main/java/org/apache/stanbol/entityhub/model/clerezza/RdfRepresentation.java,82,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be NULL"");"
235598,./TargetProjects/stanbol/entityhub/model/clerezza/src/main/java/org/apache/stanbol/entityhub/model/clerezza/RdfRepresentation.java,84,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be Empty"");"
235599,./TargetProjects/stanbol/entityhub/model/sesame/src/main/java/org/apache/stanbol/entityhub/model/sesame/RdfRepresentation.java,93,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be NULL"");"
235600,./TargetProjects/stanbol/entityhub/model/sesame/src/main/java/org/apache/stanbol/entityhub/model/sesame/RdfRepresentation.java,95,,"            throw new IllegalArgumentException(""The parsed field MUST NOT be Empty"");"
235601,./TargetProjects/stanbol/entityhub/model/sesame/src/main/java/org/apache/stanbol/entityhub/model/sesame/RdfRepresentation.java,225,,"    @SuppressWarnings(""unchecked"")"
235602,./TargetProjects/stanbol/entityhub/query/sparql/src/main/java/org/apache/stanbol/entityhub/query/sparql/SparqlQueryUtils.java,413,,"        queryString.append("" \n"");"
235603,./TargetProjects/stanbol/entityhub/query/sparql/src/main/java/org/apache/stanbol/entityhub/query/sparql/SparqlQueryUtils.java,455,,"            intend = ""    ""; // normal intend (2*2)"
235604,./TargetProjects/stanbol/entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java,520,,"            log.error(""FieldQuery: ""+query);"
235605,./TargetProjects/stanbol/entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java,521,,"            log.error(""SPARQL Query: ""+sparqlQueryString);"
235606,./TargetProjects/stanbol/entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/SesameYard.java,418,,"            throw new YardException(""Unable to remove parsed Representations"", e);"
235607,./TargetProjects/stanbol/entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/SesameYard.java,598,,"            throw new YardException(""Unable to execute findReferences query"", e);"
235608,./TargetProjects/stanbol/entityhub/yard/solr/src/main/java/org/apache/stanbol/entityhub/yard/solr/impl/SolrYard.java,270,,"            log.warn(""The SolrYard '{}' was already closed!"",config.getName());"
235609,./TargetProjects/stanbol/entityhub/yard/solr/src/main/java/org/apache/stanbol/entityhub/yard/solr/impl/SolrYard.java,290,,"                throw new YardException(""Unable to access SolrServer"",e);"
235610,./TargetProjects/stanbol/entityhub/yard/solr/src/main/java/org/apache/stanbol/entityhub/yard/solr/model/IndexValueFactory.java,307,,"                throw new IllegalArgumentException(""The parsed IndexDataType MUST NOT be null"");"
235611,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/commons/httpqueryheaders/it/HttpQueryHeaderGetTest.java,55,,"        String id = ""http://dbpedia.org/resource/Paris"";"
235612,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/commons/httpqueryheaders/it/HttpQueryHeaderGetTest.java,57,,"            builder.buildGetRequest(DBPEDIA_SITE_PATH+""/entity"","
235613,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/commons/httpqueryheaders/it/HttpQueryHeaderGetTest.java,59,,"            .withHeader(""Accept"", ""application/rdf+xml""));"
235614,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/commons/httpqueryheaders/it/HttpQueryHeaderGetTest.java,80,,"                ""header_Accept"",""text/rdf+nt"")); //parse the rdf+nt format as query parameter"
235615,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/DefaultChainTest.java,55,,"        ""text/rdf+nt"", "
235616,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/DefaultChainTest.java,74,,"            .withHeader(""Accept"",""text/rdf+nt"")"
235617,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/EnhancerConfigurationTest.java,85,,"            .withHeader(""Accept"",""application/rdf+xml"")"
235618,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/EnhancerConfigurationTest.java,85,,"            .withHeader(""Accept"",""application/rdf+xml"")"
235619,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,86,,"                    ""outputContent"",""*/*"","
235620,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,86,,"                    ""outputContent"",""*/*"","
235621,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,87,,"                    ""rdfFormat"",""notAvalidMimeFormat""};"
235622,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,90,,"            .withHeader(""Accept"",""multipart/from-data"")"
235623,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,90,,"            .withHeader(""Accept"",""multipart/from-data"")"
235624,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,91,,"            .withHeader(""Content-Type"", ""text/html; charset=UTF-8"")"
235625,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,91,,"            .withHeader(""Content-Type"", ""text/html; charset=UTF-8"")"
235626,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,122,,"                    ""outputContent"",""text/plain"""
235627,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,160,,"                    ""rdfFormat"",""text/rdf+nt""};"
235628,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,169,,"            ""--contentItem"","
235629,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,170,,"            ""Content-Disposition: form-data; name=\""content\"""","
235630,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,171,,"            ""Content-Type: multipart/alternate; boundary=contentParts-"","
235631,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,172,,"            ""Content-Type: text/plain; charset=UTF-8"","
235632,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,174,,"            ""--contentParts"")"
235633,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,178,,"            ""Content-Disposition: form-data; name=\""metadata\""; filename=.*"","
235634,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,179,,"            ""Content-Disposition: form-data; name=\""urn:tika:text:.*"","
235635,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,181,,"            ""--contentItem-.*--"","
235636,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,182,,"            ""--contentParts-.*--"","
235637,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,184,,"            ""http://purl.org/dc/terms/creator.*LanguageDetectionEnhancementEngine"","
235638,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,185,,"            ""http://purl.org/dc/terms/language.*en"","
235639,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,186,,"            ""http://fise.iks-project.eu/ontology/entity-label.*Paris"","
235640,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,187,,"            ""http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*NamedEntityExtractionEnhancementEngine"","
235641,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,188,,"            ""http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"")"
235642,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,190,,"        log.debug(""Content:\n{}\n"",content);"
235643,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/enhancer/it/MultipartRequestTest.java,350,,"        alternates.put(""http://www.example.com/test.html"", "
235644,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/EntityhubTest.java,115,,"        String stanbolProjectUri = ""http://stanbol.apache.org"";"
235645,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/EntityhubTest.java,126,,"            builder.buildGetRequest(""/entityhub/entity"",""id"",id)"
235646,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/EntityhubTest.java,127,,"            .withHeader(""Accept"", ""application/json""));"
235647,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/EntityhubTest.java,127,,"            .withHeader(""Accept"", ""application/json""));"
235648,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/EntityhubTest.java,130,,"        JSONObject jEntity = assertEntity(re.getContent(), id, ""entityhub"");"
235649,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,51,,"            builder.buildPostRequest(""/entityhub/site/dbpedia/ldpath"")"
235650,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,52,,"            .withHeader(""Content-Type"", ""application/x-www-form-urlencoded"")"
235651,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,52,,"            .withHeader(""Content-Type"", ""application/x-www-form-urlencoded"")"
235652,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,54,,"                ""ldpath"",""name = rdfs:label[@en] :: xsd:string;"")"
235653,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,54,,"                ""ldpath"",""name = rdfs:label[@en] :: xsd:string;"")"
235654,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,65,,"                ""context"","""")"
235655,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,83,,"                ""context"",""http://dbpedia.org/resource/Paris"")"
235656,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,207,,"            .withHeader(""Accept"", ""text/turtle"")"
235657,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,207,,"            .withHeader(""Accept"", ""text/turtle"")"
235658,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,209,,"                ""name"",""Vienna"","
235659,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,213,,"                ""limit"",""1"")"
235660,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,307,,"                    ""\""type\"": \""range\"",""+"
235661,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,311,,"                    ""\""inclusive\"": true,""+"
235662,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/ldpath/DbpediaLDPathTest.java,312,,"                    ""\""datatype\"": \""xsd:double\""""+"
235663,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,54,,"        FindQueryTestCase test = new FindQueryTestCase(""Paris"","
235664,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,56,,"                ""http://dbpedia.org/resource/Paris"","
235665,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,57,,"                ""http://dbpedia.org/resource/Paris_Hilton"","
235666,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,58,,"                ""http://dbpedia.org/resource/University_of_Paris"")); //and more"
235667,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,75,,"                ""http://dbpedia.org/resource/Paris_Saint-Germain_F.C.""));"
235668,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,212,,"                ""'selected': [""+"
235669,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,217,,"                ""'offset': '0',""+"
235670,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,218,,"                ""'limit': '5',""+"
235671,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,219,,"                ""'constraints': [{ ""+"
235672,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,238,,"                ""http://www.w3.org/2000/01/rdf-schema#label"","
235673,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,287,,"                    ""'http:\\/\\/www.w3.org\\/2000\\/01\\/rdf-schema#label'],""+"
235674,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,291,,"                    ""'type': 'text', ""+"
235675,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,299,,"                 ""http://dbpedia.org/resource/Frankfurt"","
235676,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,339,,"                ""'limit': '3',""+"
235677,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,365,,"                    ""'type': 'value',""+"
235678,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,367,,"                    ""'field': 'http:\\/\\/www.w3.org\\/2003\\/01\\/geo\\/wgs84_pos#alt',""+"
235679,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/entityhub/it/query/DbpediaQueryTest.java,433,,"                        ""'type': 'reference',""+ "
235680,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,64,,"        request = executor.execute(builder.buildGetRequest(tempActiveScopeUri).withHeader(""Accept"","
235681,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,67,,"        log.info(""Request: "" + tempActiveScopeUri + "" (should return 404) ... DONE"");"
235682,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,67,,"        log.info(""Request: "" + tempActiveScopeUri + "" (should return 404) ... DONE"");"
235683,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,76,,"        log.info(""PUT Request: "" + tempActiveScopeUri + "" ... DONE"");"
235684,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,84,,"                    tempInactiveScopeUri + "">\\s+rdf:type\\s+<"" + URI_SCOPE_CLASS + "">"")"
235685,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/ScopeTest.java,157,,"        log.info(""Request: "" + BASE_SCOPES_URI + "" (Accept: "" + KRFormat.OWL_XML + "")"" + "" ... DONE"");"
235686,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/SessionTest.java,58,,"        executor.execute(builder.buildGetRequest(SESSION_URI).withHeader(""Accept"", KRFormat.TURTLE))"
235687,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/SessionTest.java,60,,"        log.info(""Request: "" + SESSION_URI + "" ... DONE"");"
235688,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/SessionTest.java,60,,"        log.info(""Request: "" + SESSION_URI + "" ... DONE"");"
235689,./TargetProjects/stanbol/integration-tests/src/test/java/org/apache/stanbol/ontologymanager/web/it/SessionTest.java,103,,"        log.info(""Request: "" + SESSION_URI + "" (Accept: "" + KRFormat.OWL_XML + "")"" + "" ... DONE"");"
235690,./TargetProjects/stanbol/ontologymanager/generic/servicesapi/src/main/java/org/apache/stanbol/ontologymanager/servicesapi/util/OntologyUtils.java,64,,"        String[] split = stringForm.split("":::"");"
235691,./TargetProjects/stanbol/ontologymanager/generic/servicesapi/src/main/java/org/apache/stanbol/ontologymanager/servicesapi/util/OntologyUtils.java,66,,"            oiri = URIUtils.desanitize(IRI.create(split[0].replace(""%3A%3A%3A"", "":::"")));"
235692,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/main/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/collector/GraphMultiplexer.java,293,,"                    log.debug("" ... found {} (inverse)."", obj);"
235693,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/main/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/collector/GraphMultiplexer.java,295,,"                    else log.warn("" ... Unexpected literal value!"");"
235694,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/main/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/collector/GraphMultiplexer.java,690,,"            log.error(""-- resource {}"", scopeur);"
235695,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/collector/TestOntologyNetworkPersistence.java,121,,"        log.info(""Stanbol going down..."");"
235696,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,99,,"        OWLOntologyID myKey = new OWLOntologyID(IRI.create(""nameless""), IRI.create(getClass()"
235697,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,209,,"        log.info(""Named ontology loaded with public key {}"", key);"
235698,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,211,,"        log.info("" -- (matches actual ontology ID)."");"
235699,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,217,,"        log.warn(""Plain OWL API seems to be failing to preserve owl:versionInfo. Will test non-annotation axioms only."");"
235700,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,219,,"        log.info("" -- TBox axiom check successful."");"
235701,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/ontology/TestOntologyReconciliation.java,221,,"        log.info("" -- ABox axiom check successful."");"
235702,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/scope/TestClerezzaSpaces.java,198,,"            shouldBeNull = factory.createOntologySpace(""Sc0p3"", SpaceType.CORE);"
235703,./TargetProjects/stanbol/ontologymanager/multiplexer/clerezza/src/test/java/org/apache/stanbol/ontologymanager/multiplexer/clerezza/scope/TestOntologySpaces.java,188,,"            shouldBeNull = factory.createOntologySpace(""Sc0p3"", SpaceType.CORE, new BlankOntologySource());"
235704,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/RootResource.java,275,,"    @Path(""/{ontologyId:.+}"")"
235705,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/RootResource.java,276,,"    public Response createOntologyEntry(@PathParam(""ontologyId"") String ontologyId,"
235706,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/RootResource.java,461,,"        rb.header(HttpHeaders.CONTENT_TYPE, TEXT_HTML + ""; charset=utf-8"");"
235707,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,173,,"    public Response asOntologyGraph(@PathParam(""scopeid"") String scopeid,"
235708,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,174,,"                                    @DefaultValue(""false"") @QueryParam(""merge"") boolean merge,"
235709,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,174,,"                                    @DefaultValue(""false"") @QueryParam(""merge"") boolean merge,"
235710,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,180,,"        IRI prefix = IRI.create(getPublicBaseUri() + ""ontonet/ontology/"");"
235711,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,382,,"    @Path(""/{ontologyId:.+}"")"
235712,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/ScopeResource.java,405,,"                                            @PathParam(""ontologyId"") String ontologyId,"
235713,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,163,,"                                    @DefaultValue(""false"") @QueryParam(""merge"") boolean merge,"
235714,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,163,,"                                    @DefaultValue(""false"") @QueryParam(""merge"") boolean merge,"
235715,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,167,,"        IRI prefix = IRI.create(getPublicBaseUri() + ""ontonet/session/"");"
235716,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,347,,"    @Path(""/{ontologyId:.+}"")"
235717,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,370,,"                                            @PathParam(""ontologyId"") String ontologyId,"
235718,./TargetProjects/stanbol/ontologymanager/web/src/main/java/org/apache/stanbol/ontologymanager/web/resources/SessionResource.java,790,,"                if (uri != null && !uri.isEmpty()) rb = Response.seeOther(URI.create(""/ontonet/session/"""
235719,./TargetProjects/stanbol/reasoners/jena/src/test/java/org/apache/stanbol/reasoners/jena/JenaReasoningServiceTest.java,73,,"            log.info(""Testing : {}"", service.getClass());"
235720,./TargetProjects/stanbol/reasoners/jena/src/test/java/org/apache/stanbol/reasoners/jena/JenaReasoningServiceTest.java,148,,"            log.error(""Error thrown: {}"", e);"
235721,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/concurrency/ReasonersConcurrencyTest.java,104,,"            String location = future.get().assertResult().getResponse().getFirstHeader(""Location"").getValue();"
235722,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/offline/ReasonersOfflineTest.java,111,,"                executor.execute(builder.buildGetRequest(url).withHeader(""Accept"",""NOT/ACCEPTABLE""))"
235723,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/offline/ReasonersOfflineTest.java,140,,"            buildMultipartRequest(""/reasoners/owl/enrich"", multiPart).withHeader(""Accept"", ""application/turtle""))"
235724,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/offline/ReasonersOfflineTest.java,164,,"            buildMultipartRequest(""/reasoners/owlmini/enrich"", multiPart).withHeader(""Accept"", ""application/rdf+xml""))"
235725,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/online/ReasonersOnlineTest.java,48,,"                .withHeader(""Accept"", ""text/html"")"
235726,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/online/ReasonersOnlineTest.java,48,,"                .withHeader(""Accept"", ""text/html"")"
235727,./TargetProjects/stanbol/reasoners/services-tests/src/test/java/org/apache/stanbol/reasoners/it/online/ReasonersOnlineTest.java,67,,"                this.builder.buildGetRequest(""/reasoners/rdfs/classify"",""url"",FOAF)"
235728,./TargetProjects/stanbol/reasoners/web/src/main/java/org/apache/stanbol/reasoners/web/resources/ReasoningServiceTaskResource.java,286,,"    public Response get(@QueryParam(""target"") String targetGraphID,"
235729,./TargetProjects/stanbol/rules/adapters/clerezza/src/main/java/org/apache/stanbol/rules/adapters/clerezza/ClerezzaAdapter.java,127,,"    @SuppressWarnings(""unchecked"")"
235730,./TargetProjects/stanbol/rules/adapters/jena/src/main/java/org/apache/stanbol/rules/adapters/jena/JenaAdapter.java,112,,"    @SuppressWarnings(""unchecked"")"
235731,./TargetProjects/stanbol/rules/adapters/sparql/src/main/java/org/apache/stanbol/rules/adapters/sparql/SPARQLAdapter.java,75,,"    @SuppressWarnings(""unchecked"")"
235732,./TargetProjects/stanbol/rules/adapters/swrl/src/main/java/org/apache/stanbol/rules/adapters/swrl/SWRLAdapter.java,79,,"    @SuppressWarnings(""unchecked"")"
235733,./TargetProjects/stanbol/rules/manager/src/main/java/org/apache/stanbol/rules/manager/RuleImpl.java,75,,"            rule = ""RULE "" + ruleName + "" ASSERTS THAT "" + System.getProperty(""line.separator"");"
235734,./TargetProjects/stanbol/rules/manager/src/main/java/org/apache/stanbol/rules/manager/parse/RuleParserImpl.java,135,,"                variableResource = ModelFactory.createDefaultModel().createResource(kb.getPrefixURI(""var"")+variableString);"
235735,./TargetProjects/stanbol/rules/manager/src/main/java/org/apache/stanbol/rules/manager/parse/RuleParserImpl.java,211,,"    throw new Error(""Missing return statement in function"");"
235736,./TargetProjects/stanbol/rules/manager/src/test/java/org/apache/stanbol/rules/manager/RuleStoreTest.java,118,,"                ""http://incubator.apache.com/stanbol/rules/test/recipeA""), ""The text recipe named A."");"
235737,./TargetProjects/stanbol/rules/refactor/src/main/java/org/apache/stanbol/rules/refactor/impl/RefactorerImpl.java,119,,"    @SuppressWarnings(""unchecked"")"
235738,./TargetProjects/stanbol/rules/refactor/src/main/java/org/apache/stanbol/rules/refactor/impl/RefactorerImpl.java,194,,"                        ""The cause of the refactoring excpetion is: "" + e.getMessage(), e);"
235739,./TargetProjects/stanbol/rules/refactor/src/test/java/org/apache/stanbol/rules/refactor/RefactoringTest.java,118,,"                ""http://incubator.apache.com/stanbol/rules/refactor/test/graph""));"
235740,./TargetProjects/stanbol/rules/refactor/src/test/java/org/apache/stanbol/rules/refactor/RefactoringTest.java,124,,"                    ""http://incubator.apache.com/stanbol/rules/refactor/test/recipeA""),"
235741,./TargetProjects/stanbol/rules/refactor/src/test/java/org/apache/stanbol/rules/refactor/RefactoringTest.java,179,,"                    ""http://incubator.apache.com/stanbol/rules/refactor/test/refactoredGraph""), new IRI("
235742,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RefactorResource.java,137,,"        if(data.getFormFileParameterValues(""input"") != null){"
235743,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RefactorResource.java,183,,"        if(data.getFormFileParameterValues(""recipe"") != null){"
235744,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RulesResource.java,149,,"    public Response findRecipes(@QueryParam(""description"") String description) {"
235745,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RulesResource.java,216,,"    @Path(""/recipe/{recipe:.+}"")"
235746,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RulesResource.java,219,,"    public Response getRule(@PathParam(""recipe"") String recipeID,"
235747,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RulesResource.java,231,,"				recipeID = ""urn:"" + recipeID;"
235748,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/resources/RulesResource.java,232,,"				log.info(""The recipe ID is a URI without scheme. The ID is set to "" + recipeID);"
235749,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/writers/RecipeListWriter.java,172,,"                    log.error(""Failed to store ontology for rendering."", e);"
235750,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/writers/RecipeWriter.java,238,,"                        log.error(""Failed to store ontology for rendering."", e);"
235751,./TargetProjects/stanbol/rules/web/src/main/java/org/apache/stanbol/rules/web/writers/RuleListWriter.java,214,,"                    log.error(""Failed to store ontology for rendering."", e);"
235752,./TargetProjects/storm/examples/storm-hbase-examples/src/main/java/org/apache/storm/hbase/trident/WordCountTrident.java,38,,"        Fields fields = new Fields(""word"", ""count"");"
235753,./TargetProjects/storm/examples/storm-hive-examples/src/main/java/org/apache/storm/hive/trident/TridentHiveTopology.java,122,,"            new Values(""1"", ""user1"", ""123456"", ""street1"", ""sunnyvale"", ""ca""),"
235754,./TargetProjects/storm/examples/storm-kafka-client-examples/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutTopologyMainNamedTopics.java,73,,"        tp.setSpout(""kafka_spout"", new KafkaSpout<>(spoutConfig), 1);"
235755,./TargetProjects/storm/examples/storm-loadgen/src/main/java/org/apache/storm/loadgen/LoadMetricsServer.java,515,,"            targetUnit = UNIT_MAP.get(query.getOrDefault(""time"", ""MILLISECONDS"").toUpperCase());"
235756,./TargetProjects/storm/examples/storm-loadgen/src/main/java/org/apache/storm/loadgen/LoadMetricsServer.java,929,,"            @SuppressWarnings(""checkstyle:VariableDeclarationUsageDistance"")"
235757,./TargetProjects/storm/examples/storm-loadgen/src/main/java/org/apache/storm/loadgen/LoadMetricsServer.java,930,,"            TopologyPageInfo tpi = client.getTopologyPageInfo(info.get_id(), "":all-time"", false);"
235758,./TargetProjects/storm/examples/storm-loadgen/src/main/java/org/apache/storm/loadgen/ScopedTopologySet.java,63,,"        throw new RuntimeException(""Unmodifiable Set"");"
235759,./TargetProjects/storm/examples/storm-loadgen/src/test/java/org/apache/storm/loadgen/LoadCompConfTest.java,29,,"            .withId(""SOME_SPOUT"")"
235760,./TargetProjects/storm/examples/storm-mongodb-examples/src/main/java/org/apache/storm/mongodb/trident/WordCountTrident.java,41,,"        Fields fields = new Fields(""word"", ""count"");"
235761,./TargetProjects/storm/examples/storm-mongodb-examples/src/main/java/org/apache/storm/mongodb/trident/WordCountTridentMap.java,42,,"        Fields fields = new Fields(""word"", ""count"");"
235762,./TargetProjects/storm/examples/storm-perf/src/main/java/org/apache/storm/perf/queuetest/JCQueuePerfTest.java,50,,"        JCQueue spoutQ = new JCQueue(""spoutQ"", ""spoutQ"", 1024, 0, 100, ws, ""test"", ""test"", Collections.singletonList(1000), 1000, registry);"
235763,./TargetProjects/storm/examples/storm-perf/src/main/java/org/apache/storm/perf/utils/MetricsSample.java,101,,"            Map<String, Long> txMap = transferred.get("":all-time"");"
235764,./TargetProjects/storm/examples/storm-redis-examples/src/main/java/org/apache/storm/redis/topology/WhitelistWordCount.java,62,,"            String wordName = input.getStringByField(""word"");"
235765,./TargetProjects/storm/examples/storm-redis-examples/src/main/java/org/apache/storm/redis/trident/WordCountTridentRedisClusterMap.java,44,,"        Fields fields = new Fields(""word"", ""count"");"
235766,./TargetProjects/storm/examples/storm-redis-examples/src/main/java/org/apache/storm/redis/trident/WordCountTridentRedisMap.java,40,,"        Fields fields = new Fields(""word"", ""count"");"
235767,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/AnchoredWordCount.java,41,,"        builder.setBolt(""count"", new WordCount(), 4).fieldsGrouping(""split"", new Fields(""word""));"
235768,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/JoinBoltExample.java,37,,"        builder.setSpout(""genderSpout"", genderSpout);"
235769,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/ReachTopology.java,54,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235770,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/ReachTopology.java,54,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235771,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/ReachTopology.java,54,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235772,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/ReachTopology.java,54,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235773,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/ReachTopology.java,55,,"            put(""engineering.twitter.com/blog/5"", Arrays.asList(""adam"", ""david"", ""sally"", ""nathan""));"
235774,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/SingleJoinExample.java,34,,"        FeederSpout genderSpout = new FeederSpout(new Fields(""id"", ""gender""));"
235775,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/SingleJoinExample.java,35,,"        FeederSpout ageSpout = new FeederSpout(new Fields(""id"", ""age""));"
235776,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/WordCountTopologyNode.java,42,,"        builder.setBolt(""count"", new WordCount(), 12).fieldsGrouping(""split"", new Fields(""word""));"
235777,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentMapExample.java,47,,"            return new Values(input.getStringByField(""word"").toUpperCase());"
235778,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,43,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235779,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,43,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235780,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,43,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235781,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,43,,"            put(""foo.com/blog/1"", Arrays.asList(""sally"", ""bob"", ""tim"", ""george"", ""nathan""));"
235782,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,44,,"            put(""engineering.twitter.com/blog/5"", Arrays.asList(""adam"", ""david"", ""sally"", ""nathan""));"
235783,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentReach.java,67,,"        topology.newDRPCStream(""reach"").stateQuery(urlToTweeters, new Fields(""args""), new MapGet(), new Fields("
235784,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentWordCount.java,43,,"                                                                                               new Split(), new Fields(""word""))"
235785,./TargetProjects/storm/examples/storm-starter/src/jvm/org/apache/storm/starter/trident/TridentWordCount.java,45,,"                                                                                           new Count(), new Fields(""count""))"
235786,./TargetProjects/storm/examples/storm-starter/test/jvm/org/apache/storm/starter/tools/RankableObjectWithFieldsTest.java,68,,"            { new String(""foo"") }, { new Object() }, { Integer.valueOf(4) }, {"
235787,./TargetProjects/storm/examples/storm-starter/test/jvm/org/apache/storm/starter/tools/RankableObjectWithFieldsTest.java,87,,"            { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""bar"", 1) },"
235788,./TargetProjects/storm/external/storm-cassandra/src/test/java/org/apache/storm/cassandra/trident/MapStateTest.java,70,,"                                                     .withTable(""words_ks"", ""words_table"")"
235789,./TargetProjects/storm/external/storm-cassandra/src/test/java/org/apache/storm/cassandra/trident/MapStateTest.java,70,,"                                                     .withTable(""words_ks"", ""words_table"")"
235790,./TargetProjects/storm/external/storm-cassandra/src/test/java/org/apache/storm/cassandra/trident/MapStateTest.java,71,,"                                                     .withKeys(""word"")"
235791,./TargetProjects/storm/external/storm-cassandra/src/test/java/org/apache/storm/cassandra/trident/MapStateTest.java,72,,"                                                     .withJSONBinaryState(""state"")"
235792,./TargetProjects/storm/external/storm-cassandra/src/test/java/org/apache/storm/cassandra/trident/MapStateTest.java,125,,"        topology.newDRPCStream(""words"", client)"
235793,./TargetProjects/storm/external/storm-hbase/src/main/java/org/apache/storm/hbase/trident/state/HBaseMapState.java,62,,"    @SuppressWarnings(""rawtypes"")"
235794,./TargetProjects/storm/external/storm-hbase/src/test/java/org/apache/storm/hbase/state/HBaseKeyValueStateIteratorTest.java,76,,"        putEncodedKeyValueToMap(chunkMap, ""key0"".getBytes(), ""value0"".getBytes());"
235795,./TargetProjects/storm/external/storm-hbase/src/test/java/org/apache/storm/hbase/state/HBaseKeyValueStateIteratorTest.java,76,,"        putEncodedKeyValueToMap(chunkMap, ""key0"".getBytes(), ""value0"".getBytes());"
235796,./TargetProjects/storm/external/storm-hbase/src/test/java/org/apache/storm/hbase/state/HBaseKeyValueStateIteratorTest.java,77,,"        putEncodedKeyValueToMap(chunkMap, ""key2"".getBytes(), ""value2"".getBytes());"
235797,./TargetProjects/storm/external/storm-hbase/src/test/java/org/apache/storm/hbase/state/HBaseKeyValueStateIteratorTest.java,77,,"        putEncodedKeyValueToMap(chunkMap, ""key2"".getBytes(), ""value2"".getBytes());"
235798,./TargetProjects/storm/external/storm-hbase/src/test/java/org/apache/storm/hbase/state/HBaseKeyValueStateProviderTest.java,39,,"        stormConf.put(Config.TOPOLOGY_STATE_PROVIDER_CONFIG, ""{\""keyClass\"":\""String\"", \""valueClass\"":\""String\"","" +"
235799,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/BlobStoreTest.java,208,,"        try (AtomicOutputStream out = store.createBlob(""test"", metadata, null)) {"
235800,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/BlobStoreTest.java,212,,"        assertEquals(""Blobstore replication not matching"", store.getBlobReplication(""test"", null), 4);"
235801,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/BlobStoreTest.java,337,,"                assertTrue(""ACL contains WORLD_EVERYTHING"", !metadata.toString().contains(""AccessControl(type:OTHER, access:7)""));"
235802,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/BlobStoreTest.java,345,,"            LOG.info(""Deleting test"");"
235803,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/BlobStoreTest.java,466,,"        try (AtomicOutputStream out = store.createBlob(""other"", new SettableBlobMeta(BlobStoreAclHandler.WORLD_EVERYTHING),"
235804,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImplTest.java,91,,"            assertEquals(""BlobStore dir was created with wrong permissions"","
235805,./TargetProjects/storm/external/storm-hdfs-blobstore/src/test/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImplTest.java,138,,"            assertFalse(""key not deleted"", fs.exists(dataFile));"
235806,./TargetProjects/storm/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/spout/HdfsSpout.java,111,,"                LOG.error(""Unable to create "" + dirDescription + "" directory "" + dir);"
235807,./TargetProjects/storm/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/spout/HdfsSpout.java,111,,"                LOG.error(""Unable to create "" + dirDescription + "" directory "" + dir);"
235808,./TargetProjects/storm/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/spout/HdfsSpout.java,442,,"            LOG.error(Configs.SOURCE_DIR + "" setting is required"");"
235809,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestFileLock.java,67,,"        Path file1 = new Path(filesDir + Path.SEPARATOR + ""file1"");"
235810,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestFileLock.java,73,,"        FileLock lock1a = FileLock.tryLock(fs, file1, locksDir, ""spout1"");"
235811,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestHdfsSemantics.java,59,,"        Path file = new Path(dir.toString() + Path.SEPARATOR_CHAR + ""file1"");"
235812,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestHdfsSpout.java,142,,"        Path file1 = new Path(source.toString() + ""/file1.txt"");"
235813,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestHdfsSpout.java,145,,"        Path file2 = new Path(source.toString() + ""/file2.txt"");"
235814,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestHdfsSpout.java,274,,"                FileReader rdr = getField(spout2, ""reader"");"
235815,./TargetProjects/storm/external/storm-hdfs/src/test/java/org/apache/storm/hdfs/spout/TestHdfsSpout.java,276,,"                Assert.assertTrue(getBoolField(spout2, ""fileReadCompletely""));"
235816,./TargetProjects/storm/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/HiveBolt.java,290,,"            LOG.warn(""Interrupted when attempting to close writer for end point: "" + eldest, e);"
235817,./TargetProjects/storm/external/storm-hive/src/main/java/org/apache/storm/hive/trident/HiveState.java,229,,"            LOG.warn(""Interrupted when attempting to close writer for end point: "" + eldest, e);"
235818,./TargetProjects/storm/external/storm-hive/src/test/java/org/apache/storm/hive/bolt/TestHiveBolt.java,232,,"        String msg = ""SJC"";"
235819,./TargetProjects/storm/external/storm-hive/src/test/java/org/apache/storm/hive/bolt/TestHiveBolt.java,233,,"        String city = ""Sunnyvale"";"
235820,./TargetProjects/storm/external/storm-hive/src/test/java/org/apache/storm/hive/bolt/TestHiveBolt.java,311,,"        Tuple tuple2 = generateTestTuple(2, ""SFO"", ""San Jose"", ""CA"");"
235821,./TargetProjects/storm/external/storm-jdbc/src/test/java/org/apache/storm/jdbc/bolt/JdbcInsertBoltTest.java,33,,"        JdbcMapper mapper = new SimpleJdbcMapper(Lists.newArrayList(new Column(""test"", 0)));"
235822,./TargetProjects/storm/external/storm-jms/src/main/java/org/apache/storm/jms/trident/TridentJmsSpout.java,221,,"                            + ""ms and destination "" + dest + "" for "" + name);"
235823,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/bolt/KafkaBoltTest.java,56,,"        bolt.withTopicSelector(""MY_TOPIC"");"
235824,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/ByTopicRecordTranslatorTest.java,34,,"                new ByTopicRecordTranslator<>((r) -> new Values(r.key()), new Fields(""key""));"
235825,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/ByTopicRecordTranslatorTest.java,35,,"        trans.forTopic(""TOPIC 1"", (r) -> new Values(r.value()), new Fields(""value""), ""value-stream"");"
235826,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/ByTopicRecordTranslatorTest.java,43,,"        ConsumerRecord<String, String> cr1 = new ConsumerRecord<>(""TOPIC OTHER"", 100, 100, ""THE KEY"", ""THE VALUE"");"
235827,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/ByTopicRecordTranslatorTest.java,43,,"        ConsumerRecord<String, String> cr1 = new ConsumerRecord<>(""TOPIC OTHER"", 100, 100, ""THE KEY"", ""THE VALUE"");"
235828,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutConfigTest.java,37,,"        KafkaSpoutConfig<String, String> conf = KafkaSpoutConfig.builder(""localhost:1234"", ""topic"").build();"
235829,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/KafkaSpoutConfigTest.java,37,,"        KafkaSpoutConfig<String, String> conf = KafkaSpoutConfig.builder(""localhost:1234"", ""topic"").build();"
235830,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/trident/KafkaTridentSpoutEmitterEmitTest.java,126,,"        assertThat(""The batch should start at the first offset of the polled records"", deserializedMeta.getFirstOffset(), is(firstOffsetInKafka));"
235831,./TargetProjects/storm/external/storm-kafka-client/src/test/java/org/apache/storm/kafka/spout/trident/KafkaTridentSpoutEmitterEmitTest.java,127,,"        assertThat(""The batch should end at the last offset of the polled messages"", deserializedMeta.getLastOffset(), is(lastOffsetInKafka));"
235832,./TargetProjects/storm/external/storm-mongodb/src/main/java/org/apache/storm/mongodb/trident/state/MongoMapState.java,59,,"    @SuppressWarnings(""rawtypes"")"
235833,./TargetProjects/storm/external/storm-redis/src/test/java/org/apache/storm/redis/state/RedisKeyValueStateIteratorTest.java,71,,"        putEncodedKeyValueToMap(chunkMap, ""key0"".getBytes(), ""value0"".getBytes());"
235834,./TargetProjects/storm/external/storm-redis/src/test/java/org/apache/storm/redis/state/RedisKeyValueStateIteratorTest.java,71,,"        putEncodedKeyValueToMap(chunkMap, ""key0"".getBytes(), ""value0"".getBytes());"
235835,./TargetProjects/storm/external/storm-redis/src/test/java/org/apache/storm/redis/state/RedisKeyValueStateIteratorTest.java,72,,"        putEncodedKeyValueToMap(chunkMap, ""key2"".getBytes(), ""value2"".getBytes());"
235836,./TargetProjects/storm/external/storm-redis/src/test/java/org/apache/storm/redis/state/RedisKeyValueStateIteratorTest.java,72,,"        putEncodedKeyValueToMap(chunkMap, ""key2"".getBytes(), ""value2"".getBytes());"
235837,./TargetProjects/storm/external/storm-rocketmq/src/test/java/org/apache/storm/rocketmq/spout/scheme/StringKeyValueSchemeTest.java,38,,"        assertEquals(Collections.singletonList(""test""), scheme.deserialize(wrapString(""test"")));"
235838,./TargetProjects/storm/flux/flux-core/src/main/java/org/apache/storm/flux/model/ObjectDef.java,61,,"                if (map.containsKey(""ref"") && map.size() == 1) {"
235839,./TargetProjects/storm/flux/flux-core/src/main/java/org/apache/storm/flux/model/ObjectDef.java,64,,"                } else if (map.containsKey(""reflist"") && map.size() == 1) {"
235840,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java,96,,"                 ""FROM FOO "" +"
235841,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java,113,,"        stmt.add(""CREATE EXTERNAL TABLE FOO (ID INT, MAPFIELD ANY, NESTEDMAPFIELD ANY, ARRAYFIELD ANY) LOCATION 'mocknested:///foo'"");"
235842,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java,114,,"        stmt.add(""CREATE EXTERNAL TABLE BAR (ID INT, MAPFIELD ANY, NESTEDMAPFIELD ANY, ARRAYFIELD ANY) LOCATION 'mocknested:///foo'"");"
235843,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/TestStormSql.java,115,,"        stmt.add(""INSERT INTO BAR SELECT STREAM ID, MAPFIELD, NESTEDMAPFIELD, ARRAYFIELD "" +"
235844,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/streams/TestPlanCompiler.java,72,,"        data.put(""FOO"", new TestUtils.MockSqlStreamsDataSource());"
235845,./TargetProjects/storm/sql/storm-sql-core/src/test/org/apache/storm/sql/compiler/backends/streams/TestPlanCompiler.java,105,,"            + ""FROM FOO """
235846,./TargetProjects/storm/storm-buildtools/storm-maven-plugins/src/main/java/org/apache/storm/maven/plugin/versioninfo/VersionInfoMojo.java,149,,"        String[] res = new String[]{ ""Unknown"", ""Unknown"" };"
235847,./TargetProjects/storm/storm-buildtools/storm-maven-plugins/src/main/java/org/apache/storm/maven/plugin/versioninfo/VersionInfoMojo.java,175,,"    @SuppressWarnings(""checkstyle:AbbreviationAsWordInName"")"
235848,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/Config.java,1947,,"    @SuppressWarnings(""checkstyle:OverloadMethodsDeclarationOrder"")"
235849,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/container/cgroup/core/BlkioCore.java,98,,"    @SuppressWarnings(""checkstyle:AbbreviationAsWordInName"")"
235850,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/daemon/StormCommon.java,141,,"    @SuppressWarnings(""unchecked"")"
235851,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/drpc/DRPCInvocationsClient.java,66,,"                throw new TException(""Client is not connected..."");"
235852,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Assignment.java,822,,"      sb.append(""null"");"
235853,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/BoltStats.java,757,,"      sb.append(""null"");"
235854,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/ComponentAggregateStats.java,495,,"        sb.append(""null"");"
235855,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/ComponentPageInfo.java,1482,,"      sb.append(""null"");"
235856,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPC.java,73,,"      sendBase(""execute"", args);"
235857,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPC.java,601,,"        sb.append(""null"");"
235858,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,85,,"      sendBase(""result"", args);"
235859,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,108,,"      sendBase(""fetchRequest"", args);"
235860,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,134,,"      sendBase(""failRequest"", args);"
235861,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,158,,"      sendBase(""failRequestV2"", args);"
235862,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,216,,"          throw new java.lang.IllegalStateException(""Method call not finished!"");"
235863,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,496,,"              _LOGGER.error(""TTransportException writing to internal frame buffer"", e);"
235864,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,499,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
235865,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,512,,"              _LOGGER.error(""TTransportException inside handler"", e);"
235866,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,516,,"              _LOGGER.error(""TApplicationException inside handler"", e);"
235867,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,520,,"              _LOGGER.error(""Exception inside handler"", e);"
235868,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,784,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235869,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,784,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235870,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,1058,,"        sb.append(""null"");"
235871,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,1209,,"    private static final org.apache.storm.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""aze"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)1);"
235872,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/DistributedRPCInvocations.java,1451,,"      sb.append(""aze:"");"
235873,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/ExecutorSummary.java,635,,"      sb.append(""null"");"
235874,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/LocalAssignment.java,583,,"      sb.append(""null"");"
235875,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,333,,"      sendBase(""submitTopology"", args);"
235876,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,366,,"      sendBase(""submitTopologyWithOpts"", args);"
235877,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,395,,"      sendBase(""killTopology"", args);"
235878,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,422,,"      sendBase(""killTopologyWithOpts"", args);"
235879,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,448,,"      sendBase(""activate"", args);"
235880,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,474,,"      sendBase(""deactivate"", args);"
235881,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,501,,"      sendBase(""rebalance"", args);"
235882,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,531,,"      sendBase(""setLogConfig"", args);"
235883,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,551,,"      sendBase(""getLogConfig"", args);"
235884,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,577,,"      sendBase(""debug"", args);"
235885,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,604,,"      sendBase(""setWorkerProfiler"", args);"
235886,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,626,,"      sendBase(""getComponentPendingProfileActions"", args);"
235887,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,650,,"      sendBase(""uploadNewCredentials"", args);"
235888,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,680,,"      sendBase(""beginCreateBlob"", args);"
235889,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,709,,"      sendBase(""beginUpdateBlob"", args);"
235890,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,739,,"      sendBase(""uploadBlobChunk"", args);"
235891,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,762,,"      sendBase(""finishBlobUpload"", args);"
235892,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,785,,"      sendBase(""cancelBlobUpload"", args);"
235893,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,808,,"      sendBase(""getBlobMeta"", args);"
235894,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,838,,"      sendBase(""setBlobMeta"", args);"
235895,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,864,,"      sendBase(""beginBlobDownload"", args);"
235896,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,893,,"      sendBase(""downloadBlobChunk"", args);"
235897,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,919,,"      sendBase(""deleteBlob"", args);"
235898,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,948,,"      sendBase(""listBlobs"", args);"
235899,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,971,,"      sendBase(""getBlobReplication"", args);"
235900,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1001,,"      sendBase(""updateBlobReplication"", args);"
235901,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1030,,"      sendBase(""createStateInZookeeper"", args);"
235902,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1049,,"      sendBase(""beginFileUpload"", args);"
235903,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1076,,"      sendBase(""uploadChunk"", args);"
235904,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1099,,"      sendBase(""finishFileUpload"", args);"
235905,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1122,,"      sendBase(""downloadChunk"", args);"
235906,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1147,,"      sendBase(""getNimbusConf"", args);"
235907,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1172,,"      sendBase(""getClusterInfo"", args);"
235908,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1197,,"      sendBase(""getTopologySummaries"", args);"
235909,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1223,,"      sendBase(""getTopologySummaryByName"", args);"
235910,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1252,,"      sendBase(""getTopologySummary"", args);"
235911,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1280,,"      sendBase(""getLeader"", args);"
235912,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1306,,"      sendBase(""isTopologyNameAllowed"", args);"
235913,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1332,,"      sendBase(""getTopologyInfoByName"", args);"
235914,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1361,,"      sendBase(""getTopologyInfo"", args);"
235915,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1391,,"      sendBase(""getTopologyInfoByNameWithOpts"", args);"
235916,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1421,,"      sendBase(""getTopologyInfoWithOpts"", args);"
235917,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1452,,"      sendBase(""getTopologyPageInfo"", args);"
235918,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1483,,"      sendBase(""getSupervisorPageInfo"", args);"
235919,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1515,,"      sendBase(""getComponentPageInfo"", args);"
235920,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1544,,"      sendBase(""getTopologyConf"", args);"
235921,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1573,,"      sendBase(""getTopology"", args);"
235922,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1602,,"      sendBase(""getUserTopology"", args);"
235923,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1631,,"      sendBase(""getTopologyHistory"", args);"
235924,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1657,,"      sendBase(""getOwnerResourceSummaries"", args);"
235925,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1683,,"      sendBase(""getSupervisorAssignments"", args);"
235926,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1709,,"      sendBase(""sendSupervisorWorkerHeartbeats"", args);"
235927,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1732,,"      sendBase(""sendSupervisorWorkerHeartbeat"", args);"
235928,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1758,,"      sendBase(""processWorkerMetrics"", args);"
235929,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1778,,"      sendBase(""isRemoteBlobExists"", args);"
235930,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,1845,,"          throw new java.lang.IllegalStateException(""Method call not finished!"");"
235931,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,5450,,"              _LOGGER.error(""TTransportException writing to internal frame buffer"", e);"
235932,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,5453,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
235933,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,5474,,"              _LOGGER.error(""TTransportException inside handler"", e);"
235934,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,5478,,"              _LOGGER.error(""TApplicationException inside handler"", e);"
235935,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,5482,,"              _LOGGER.error(""Exception inside handler"", e);"
235936,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9107,,"    private static final org.apache.storm.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""name"", org.apache.storm.thrift.protocol.TType.STRING, (short)1);"
235937,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9108,,"    private static final org.apache.storm.thrift.protocol.TField UPLOADED_JAR_LOCATION_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""uploadedJarLocation"", org.apache.storm.thrift.protocol.TType.STRING, (short)2);"
235938,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9109,,"    private static final org.apache.storm.thrift.protocol.TField JSON_CONF_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""jsonConf"", org.apache.storm.thrift.protocol.TType.STRING, (short)3);"
235939,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9110,,"    private static final org.apache.storm.thrift.protocol.TField TOPOLOGY_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""topology"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)4);"
235940,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9160,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235941,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9160,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235942,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9568,,"      sb.append(""name:"");"
235943,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9570,,"        sb.append(""null"");"
235944,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9789,,"    private static final org.apache.storm.thrift.protocol.TField ITE_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""ite"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)2);"
235945,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,9790,,"    private static final org.apache.storm.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""aze"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)3);"
235946,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,10184,,"      sb.append(""ite:"");"
235947,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,10192,,"      sb.append(""aze:"");"
235948,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,10370,,"    private static final org.apache.storm.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""options"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)5);"
235949,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,10932,,"      sb.append(""options:"");"
235950,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,17327,,"    private static final org.apache.storm.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""success"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)0);"
235951,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,17569,,"      sb.append(""success:"");"
235952,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,19145,,"      sb.append(""id:"");"
235953,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,19556,,"    private static final org.apache.storm.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""component_id"", org.apache.storm.thrift.protocol.TType.STRING, (short)2);"
235954,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,21609,,"    private static final org.apache.storm.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""key"", org.apache.storm.thrift.protocol.TType.STRING, (short)1);"
235955,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,21610,,"    private static final org.apache.storm.thrift.protocol.TField META_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""meta"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)2);"
235956,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,21924,,"      sb.append(""key:"");"
235957,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,23024,,"    private static final org.apache.storm.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""knf"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)2);"
235958,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,23426,,"      sb.append(""knf:"");"
235959,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,23598,,"    private static final org.apache.storm.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""session"", org.apache.storm.thrift.protocol.TType.STRING, (short)1);"
235960,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,23599,,"    private static final org.apache.storm.thrift.protocol.TField CHUNK_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""chunk"", org.apache.storm.thrift.protocol.TType.STRING, (short)2);"
235961,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,23925,,"      sb.append(""session:"");"
235962,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,34571,,"    private static final org.apache.storm.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""location"", org.apache.storm.thrift.protocol.TType.STRING, (short)1);"
235963,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,46666,,"    private static final org.apache.storm.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""window"", org.apache.storm.thrift.protocol.TType.STRING, (short)2);"
235964,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Nimbus.java,46667,,"    private static final org.apache.storm.thrift.protocol.TField IS_INCLUDE_SYS_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""is_include_sys"", org.apache.storm.thrift.protocol.TType.BOOL, (short)3);"
235965,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/RebalanceOptions.java,676,,"        sb.append(""null"");"
235966,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/StormBase.java,1050,,"      sb.append(""null"");"
235967,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/StormTopology.java,1099,,"      sb.append(""null"");"
235968,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,95,,"      sendBase(""sendSupervisorAssignments"", args);"
235969,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,118,,"      sendBase(""getLocalAssignmentForStorm"", args);"
235970,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,147,,"      sendBase(""sendSupervisorWorkerHeartbeat"", args);"
235971,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,421,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
235972,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,641,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235973,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,641,,"        if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
235974,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,847,,"        sb.append(""null"");"
235975,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/Supervisor.java,972,,"    private static final org.apache.storm.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.storm.thrift.protocol.TField(""aze"", org.apache.storm.thrift.protocol.TType.STRUCT, (short)1);"
235976,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/SupervisorInfo.java,980,,"      sb.append(""null"");"
235977,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/SupervisorSummary.java,1150,,"      sb.append(""null"");"
235978,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/TopologyInfo.java,1482,,"      sb.append(""null"");"
235979,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/TopologyPageInfo.java,2682,,"      sb.append(""null"");"
235980,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/TopologyStats.java,624,,"        sb.append(""null"");"
235981,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/TopologySummary.java,1641,,"      sb.append(""null"");"
235982,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/WorkerMetricPoint.java,636,,"      sb.append(""null"");"
235983,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/generated/WorkerSummary.java,1331,,"        sb.append(""null"");"
235984,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/security/auth/AutoSSL.java,36,,"@SuppressWarnings(""checkstyle:AbbreviationAsWordInName"")"
235985,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/security/auth/authorizer/ImpersonationAuthorizer.java,36,,"    @SuppressWarnings(""checkstyle:AbbreviationAsWordInName"")"
235986,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/security/auth/kerberos/AutoTGT.java,41,,"@SuppressWarnings(""checkstyle:AbbreviationAsWordInName"")"
235987,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/security/auth/kerberos/AutoTGT.java,64,,"        if (credentials != null && credentials.containsKey(""TGT"") && credentials.get(""TGT"") != null) {"
235988,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/security/auth/sasl/SimpleSaslServerCallbackHandler.java,63,,"            String acs = ""null"";"
235989,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/topology/BaseConfigurationDeclarer.java,56,,"    @SuppressWarnings(""unchecked"")"
235990,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/trident/topology/state/RotatingTransactionalState.java,48,,"        LOG.trace(""[{}]"", this);"
235991,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/ConfigUtils.java,148,,"        if (System.getProperty(""storm.log.dir"") != null) {"
235992,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/ObjectReader.java,68,,"            throw new IllegalArgumentException(""Don't know how to convert "" + o + "" to String"");"
235993,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/ShellProcess.java,53,,"            if (""PATH"".equals(entry.getKey())) {"
235994,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/Utils.java,179,,"                @SuppressWarnings(""unchecked"")"
235995,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/Utils.java,1527,,"            && !""Unknown"".equalsIgnoreCase(stormVersion)"
235996,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/VersionInfo.java,69,,"            return info.getProperty(""version"", ""Unknown"");"
235997,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/utils/WritableUtils.java,124,,"        return new String(bytes, ""UTF-8"");"
235998,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java,154,,"                    @SuppressWarnings(""unchecked"")"
235999,./TargetProjects/storm/storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java,275,,"                throw new IllegalArgumentException(""Field "" + name + ""cannot be null! Actual value: "" + o);"
