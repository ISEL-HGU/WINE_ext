85000,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,144,,"    context.put(""hive.database"",dbName);"
85001,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,145,,"    context.put(""hive.table"",tblName);"
85002,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,147,,"      context.put(""hive.partition"", PART1_VALUE + "","" + PART2_VALUE);"
85003,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,149,,"    context.put(""autoCreatePartitions"",""false"");"
85004,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,150,,"    context.put(""batchSize"","""" + batchSize);"
85005,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,151,,"    context.put(""serializer"", HiveDelimitedTextSerializer.ALIAS);"
85006,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,152,,"    context.put(""serializer.fieldnames"", COL1 + "",,"" + COL2 + "","");"
85007,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveSink.java,153,,"    context.put(""heartBeatInterval"", ""0"");"
85008,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveWriter.java,114,,"    ctx.put(""serializer.fieldnames"", COL1 + "",,"" + COL2 + "","");"
85009,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveWriter.java,123,,"    HiveWriter writer = new HiveWriter(endPoint, 10, true, timeout, callTimeoutPool, ""flumetest"","
85010,./TargetProjects/flume/flume-ng-sinks/flume-hive-sink/src/test/java/org/apache/flume/sink/hive/TestHiveWriter.java,229,,"    ctx.put(""serializer.serdeSeparator"", "","");"
85011,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,79,,"    when(configContext.getInteger(eq(""connectTimeout""), Mockito.anyInt())).thenReturn(1000);"
85012,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,80,,"    when(configContext.getInteger(eq(""requestTimeout""), Mockito.anyInt())).thenReturn(1000);"
85013,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,84,,"    verify(configContext).getString(""endpoint"", """");"
85014,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,89,,"    verify(configContext).getBoolean(""defaultBackoff"", true);"
85015,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,90,,"    verify(configContext).getBoolean(""defaultRollback"", true);"
85016,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,91,,"    verify(configContext).getBoolean(""defaultIncrementMetrics"", false);"
85017,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,179,,"    when(event.getBody()).thenReturn(""something"".getBytes());"
85018,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,182,,"    context.put(""defaultRollback"", ""true"");"
85019,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSink.java,195,,"    context.put(""defaultRollback"", ""false"");"
85020,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,79,,"      httpSinkContext.put(""endpoint"", ""http://localhost:"" + port + ""/endpoint"");"
85021,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,84,,"      httpSinkContext.put(""backoff.200"", ""false"");"
85022,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,115,,"        .withRequestBody(equalToJson(event(""SUCCESS"")))"
85023,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,131,,"        .withRequestBody(equalToJson(event(""TRANSIENT_ERROR"")))"
85024,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,133,,"        .willSetStateTo(""Error Sent""));"
85025,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,185,,"        .withRequestBody(equalToJson(event(""NETWORK_ERROR"")))"
85026,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,216,,"        .withRequestBody(equalToJson(event(""SLOW_SOCKET"")))"
85027,./TargetProjects/flume/flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java,237,,"        .withRequestBody(equalToJson(event(""SLOW_RESPONSE"")))"
85028,./TargetProjects/flume/flume-ng-sinks/flume-irc-sink/src/test/java/org/apache/flume/sink/irc/TestIRCSink.java,82,,"    context.put(""nick"", ""flume"");"
85029,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/main/java/org/apache/flume/sink/elasticsearch/ElasticSearchSink.java,251,,"          && serverAddresses.length > 0, ""Missing Param:"" + HOSTNAMES);"
85030,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchIndexRequestBuilderFactory.java,83,,"        timestampedEvent.getHeaders().get(""timestamp""));"
85031,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,47,,"    headers.put(""timestamp"", String.valueOf(timestamp));"
85032,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,48,,"    headers.put(""source"", ""flume_tail_src"");"
85033,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,48,,"    headers.put(""source"", ""flume_tail_src"");"
85034,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,49,,"    headers.put(""host"", ""test@localhost"");"
85035,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,49,,"    headers.put(""host"", ""test@localhost"");"
85036,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,50,,"    headers.put(""src_path"", ""/tmp/test"");"
85037,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,50,,"    headers.put(""src_path"", ""/tmp/test"");"
85038,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,51,,"    headers.put(""headerNameOne"", ""headerValueOne"");"
85039,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,51,,"    headers.put(""headerNameOne"", ""headerValueOne"");"
85040,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,52,,"    headers.put(""headerNameTwo"", ""headerValueTwo"");"
85041,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,52,,"    headers.put(""headerNameTwo"", ""headerValueTwo"");"
85042,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,53,,"    headers.put(""type"", ""sometype"");"
85043,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchLogStashEventSerializer.java,53,,"    headers.put(""type"", ""sometype"");"
85044,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchSink.java,228,,"    parameters.put(HOSTNAMES, ""10.5.5.27"");"
85045,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchSink.java,229,,"    parameters.put(CLUSTER_NAME, ""testing-cluster-name"");"
85046,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchSink.java,230,,"    parameters.put(INDEX_NAME, ""testing-index-name"");"
85047,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TestElasticSearchSink.java,231,,"    parameters.put(INDEX_TYPE, ""testing-index-type"");"
85048,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/TimestampedEventTest.java,48,,"            timestampedEvent.getHeaders().get(""timestamp""));"
85049,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/client/RoundRobinListTest.java,31,,"    fixture = new RoundRobinList<String>(Arrays.asList(""test1"", ""test2""));"
85050,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/client/TestElasticSearchRestClient.java,108,,"    fixture.addEvent(event, nameBuilder, ""bar_type"", -1);"
85051,./TargetProjects/flume/flume-ng-sinks/flume-ng-elasticsearch-sink/src/test/java/org/apache/flume/sink/elasticsearch/client/TestElasticSearchTransportClient.java,87,,"    fixture.addEvent(event, nameBuilder, ""bar_type"", -1);"
85052,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/main/java/org/apache/flume/sink/hbase/AsyncHBaseSink.java,595,,"      logger.error(""Failed to commit transaction."" +"
85053,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/main/java/org/apache/flume/sink/hbase/AsyncHBaseSink.java,596,,"          ""Transaction rolled back."", e);"
85054,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/main/java/org/apache/flume/sink/hbase/HBaseSink.java,355,,"      logger.error(""Failed to commit transaction."" +"
85055,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/main/java/org/apache/flume/sink/hbase/HBaseSink.java,356,,"          ""Transaction rolled back."", e);"
85056,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/main/java/org/apache/flume/sink/hbase/SimpleRowKeyGenerator.java,32,,"    return (prefix + UUID.randomUUID().toString()).getBytes(""UTF8"");"
85057,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestAsyncHBaseSink.java,78,,"    ctxMap.put(""serializer"","
85058,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestAsyncHBaseSink.java,236,,"    ctx.put(""batchSize"", ""2"");"
85059,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestAsyncHBaseSink.java,240,,"    ctx.put(""batchSize"", ""100"");"
85060,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestHBaseSink.java,191,,"    ctx.put(""batchSize"", ""3"");"
85061,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestHBaseSink.java,232,,"    ctx.put(""batchSize"", ""100"");"
85062,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase-sink/src/test/java/org/apache/flume/sink/hbase/TestRegexHbaseEventSerializer.java,167,,"    Event e1 = EventBuilder.withBody(Bytes.toBytes(""body""));"
85063,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/main/java/org/apache/flume/sink/hbase2/HBase2Sink.java,370,,"      logger.error(""Failed to commit transaction."" +"
85064,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/main/java/org/apache/flume/sink/hbase2/HBase2Sink.java,371,,"          ""Transaction rolled back."", e);"
85065,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/main/java/org/apache/flume/sink/hbase2/SimpleRowKeyGenerator.java,32,,"    return (prefix + UUID.randomUUID().toString()).getBytes(""UTF8"");"
85066,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/test/java/org/apache/flume/sink/hbase2/TestHBase2Sink.java,216,,"    ctx.put(""batchSize"", ""3"");"
85067,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/test/java/org/apache/flume/sink/hbase2/TestHBase2Sink.java,260,,"    ctx.put(""batchSize"", ""100"");"
85068,./TargetProjects/flume/flume-ng-sinks/flume-ng-hbase2-sink/src/test/java/org/apache/flume/sink/hbase2/TestRegexHBase2EventSerializer.java,171,,"    Event e1 = EventBuilder.withBody(Bytes.toBytes(""body""));"
85069,./TargetProjects/flume/flume-ng-sinks/flume-ng-kafka-sink/src/main/java/org/apache/flume/sink/kafka/KafkaSink.java,367,,"      logger.warn(""{} is deprecated. Please use the parameter {}"", ""topic"", TOPIC_CONFIG);"
85070,./TargetProjects/flume/flume-ng-sinks/flume-ng-kafka-sink/src/test/java/org/apache/flume/sink/kafka/TestKafkaSink.java,112,,"    context.put(""kafka.bootstrap.servers"", ""localhost:9092,localhost:9092"");"
85071,./TargetProjects/flume/flume-ng-sinks/flume-ng-kafka-sink/src/test/java/org/apache/flume/sink/kafka/TestKafkaSink.java,136,,"    context.put(""topic"", ""test-topic"");"
85072,./TargetProjects/flume/flume-ng-sinks/flume-ng-kafka-sink/src/test/java/org/apache/flume/sink/kafka/TestKafkaSink.java,173,,"        fail(""Error Occurred"");"
85073,./TargetProjects/flume/flume-ng-sinks/flume-ng-kudu-sink/src/test/java/org/apache/flume/sink/kudu/TestKeyedKuduOperationsProducer.java,94,,"    testEvents(0, ""upsert"");"
85074,./TargetProjects/flume/flume-ng-sinks/flume-ng-kudu-sink/src/test/java/org/apache/flume/sink/kudu/TestKeyedKuduOperationsProducer.java,136,,"      assertTrue(""incorrect payload"", rows.get(i).contains(""payload body "" + i));"
85075,./TargetProjects/flume/flume-ng-sinks/flume-ng-kudu-sink/src/test/java/org/apache/flume/sink/kudu/TestRegexpKuduOperationsProducer.java,71,,"    testEvents(0, 1, ""insert"");"
85076,./TargetProjects/flume/flume-ng-sinks/flume-ng-kudu-sink/src/test/java/org/apache/flume/sink/kudu/TestRegexpKuduOperationsProducer.java,86,,"    testEvents(3, 1, ""upsert"");"
85077,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/main/java/org/apache/flume/sink/solr/morphline/MorphlineHandlerImpl.java,106,,"        MetricRegistry.name(""morphline.app"", Metrics.ELAPSED_TIME));"
85078,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/FlumeHttpServletRequestWrapper.java,57,,"        throw new UnsupportedOperationException(""Not supported yet."");"
85079,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestBlobHandler.java,40,,"    byte[] json = ""foo"".getBytes(""UTF-8"");"
85080,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestMorphlineInterceptor.java,44,,"    Event input = EventBuilder.withBody(""foo"", Charsets.UTF_8);"
85081,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestMorphlineInterceptor.java,45,,"    input.getHeaders().put(""name"", ""nadja"");"
85082,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestMorphlineInterceptor.java,45,,"    input.getHeaders().put(""name"", ""nadja"");"
85083,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestMorphlineSolrSink.java,103,,"    String path = RESOURCES_DIR + ""/test-documents"";"
85084,./TargetProjects/flume/flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestMorphlineSolrSink.java,194,,"    s.deleteByQuery(""*:*""); // delete everything!"
85085,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestDefaultJMSMessageConverter.java,120,,"    headers.put(""key1"", ""value1"");"
85086,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestDefaultJMSMessageConverter.java,120,,"    headers.put(""key1"", ""value1"");"
85087,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestDefaultJMSMessageConverter.java,121,,"    headers.put(""key2"", ""value2"");"
85088,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestDefaultJMSMessageConverter.java,121,,"    headers.put(""key2"", ""value2"");"
85089,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestJMSMessageConsumer.java,53,,"      fail(""Expected exception: org.apache.flume.FlumeException"");"
85090,./TargetProjects/flume/flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestJMSSource.java,181,,"    context.put(JMSSourceConfiguration.USERNAME, ""dummy"");"
85091,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,118,,"  @SuppressWarnings(""unchecked"")"
85092,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,283,,"    kafkaServer.produce(topic0, """", ""hello, world"");"
85093,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,446,,"    kafkaServer.produce(topic0, """", ""event 1"");"
85094,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,453,,"    kafkaServer.produce(topic0, """", ""event 2"");"
85095,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,558,,"    context.put(BOOTSTRAP_SERVERS, ""real-bootstrap-servers-list"");"
85096,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,582,,"    context.put(TOPIC, ""old.topic"");"
85097,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,583,,"    context.put(OLD_GROUP_ID, ""old.groupId"");"
85098,./TargetProjects/flume/flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/TestKafkaSource.java,665,,"    e = new AvroFlumeEvent(headers, ByteBuffer.wrap(""hello, world2"".getBytes()));"
85099,./TargetProjects/flume/flume-ng-sources/flume-scribe-source/src/main/java/org/apache/flume/source/scribe/Scribe.java,94,,"      sendBase(""Log"", args);"
85100,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,125,,"    File f1 = new File(tmpDir, ""file1"");"
85101,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,126,,"    File f2 = new File(tmpDir, ""file2"");"
85102,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,128,,"    Files.write(""file1line1\nfile1line2\n"", f1, Charsets.UTF_8);"
85103,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,141,,"    assertTrue(out.contains(""file1line1""));"
85104,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,142,,"    assertTrue(out.contains(""file1line2""));"
85105,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,226,,"    assertTrue(out1.contains(""file1line3""));"
85106,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,227,,"    assertTrue(out1.contains(""file1line4""));"
85107,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirEventReader.java,237,,"    assertTrue(out3.contains(""file1line5""));"
85108,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirMatcher.java,105,,"    append(""file0"");"
85109,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirMatcher.java,106,,"    append(""file1"");"
85110,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirMatcher.java,121,,"    append(""file2"");"
85111,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirMatcher.java,122,,"    append(""file3"");"
85112,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirSource.java,147,,"    File f1 = new File(tmpDir, ""file1"");"
85113,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirSource.java,148,,"    File f2 = new File(tmpDir, ""file2"");"
85114,./TargetProjects/flume/flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirSource.java,150,,"    Files.write(""file1line1\nfile1line2\n"", f1, Charsets.UTF_8);"
85115,./TargetProjects/flume/flume-tools/src/main/java/org/apache/flume/tools/FileChannelIntegrityTool.java,158,,"           .addOption(""e"", ""eventValidator"", true,"
85116,./TargetProjects/flume/flume-tools/src/test/java/org/apache/flume/tools/TestFileChannelIntegrityTool.java,78,,"        if (name.contains(""lock"")) {"
85117,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,52,,"    input.add(""0 f q WRITE 16"", ""11"");"
85118,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,53,,"    input.add(""0 f q DATA 11"", ""15"");"
85119,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,77,,"    input.add(""0 f q TX_DONE 21"", """");"
85120,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,79,,"    input.add(""0 f q ACK 20"", """");"
85121,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,127,,"    input.add(""0 f q WRITE 52"", ""48"");"
85122,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,128,,"    input.add(""0 f q WRITE 45"", ""41"");"
85123,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,129,,"    input.add(""0 f q WRITE 38"", ""33"");"
85124,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,130,,"    input.add(""0 f q WRITE 20"", ""17"");"
85125,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,131,,"    input.add(""0 f q DATA 48"", ""18"");"
85126,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,132,,"    input.add(""0 f q DATA 41"", ""15"");"
85127,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,133,,"    input.add(""0 f q DATA 33"", ""13"");"
85128,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,192,,"    input.add(""0 f q WRITE 20"", ""17 PRIMARY"");"
85129,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,252,,"    input.add(""0 f q LOCK 21"", ""1 f q"");"
85130,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,253,,"    input.add(""0 f q LOCK 11"", ""1 f q"");"
85131,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,254,,"    input.add(""0 f q DATA 21"", ""18"");"
85132,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,275,,"    input.add(""0 f q DEL_LOCK 19"", ""0 ROLLBACK"");"
85133,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,275,,"    input.add(""0 f q DEL_LOCK 19"", ""0 ROLLBACK"");"
85134,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,276,,"    input.add(""0 f q LOCK 19"", ""1 f q"");"
85135,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,277,,"    input.add(""0 f q DEL_LOCK 11"", ""0 ROLLBACK"");"
85136,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,279,,"    input.add(""0 f q DATA 19"", ""19"");"
85137,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,310,,"    input.add(""0 f q WRITE 22"", ""21"");"
85138,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,347,,"    input.add(""0 f q LOCK 11"", ""0 f q"");"
85139,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,403,,"    inputBase.add(""0 f q WRITE 52"", ""48 DELETE"");"
85140,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,410,,"    inputBase.add(""0 g q WRITE 42"", ""38 DELETE"");"
85141,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,410,,"    inputBase.add(""0 g q WRITE 42"", ""38 DELETE"");"
85142,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,415,,"    inputBase.add(""0 h q WRITE 37"", ""33"");"
85143,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,416,,"    inputBase.add(""0 h q DATA 33"", ""9"");"
85144,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,466,,"    input.add(""0 f q DATA 55"", ""abc"");"
85145,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,607,,"    input.add(""0 f q DEL_RLOCK 42"", ""50"");"
85146,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/GarbageCollectionIteratorTest.java,609,,"    input.add(""0 f q DEL_RLOCK 45"", ""53"");"
85147,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/NotificationIteratorTest.java,54,,"    input.add(""0 ntfy foo:bar 7"", """");"
85148,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/NotificationIteratorTest.java,58,,"    input.add(""1 ntfy foo:bar 3"", """");"
85149,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/NotificationIteratorTest.java,61,,"    input.add(""1 ntfy foo:baz 1"", """");"
85150,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/NotificationIteratorTest.java,62,,"    input.add(""2 ntfy foo:baz 3"", """");"
85151,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/NotificationIteratorTest.java,107,,"    input.add(""9 ntfy foo:bar 3"", """");"
85152,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/OpenReadLockIteratorTest.java,54,,"    input.add(""0 f q RLOCK 25"", "" 0 f q"");"
85153,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,82,,"      input.add(""0 f q LOCK "" + i, ""0 f q"");"
85154,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,91,,"    input.add(""0 f q WRITE 116"", ""111"");"
85155,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,91,,"    input.add(""0 f q WRITE 116"", ""111"");"
85156,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,92,,"    input.add(""0 f q LOCK 111"", ""0 f q"");"
85157,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,93,,"    input.add(""0 f q DATA 111"", ""15"");"
85158,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,109,,"      input.add(""0 f q TX_DONE 116"", ""111"");"
85159,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,181,,"    input.add(""0 f q DEL_LOCK 111"", ""ABORT"");"
85160,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,267,,"    initialInputs[1].add(""0 f q WRITE 10"", ""5"");"
85161,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,268,,"    initialInputs[1].add(""0 f q LOCK 5"", ""0 f q"");"
85162,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,269,,"    initialInputs[1].add(""0 f q DATA 5"", ""15"");"
85163,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/PrewriteIteratorTest.java,290,,"      input.add(""0 f q DEL_RLOCK 42"", ""50"");"
85164,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/SnapshotIteratorTest.java,60,,"    input.add(""0 f q WRITE 16"", ""11"");"
85165,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/SnapshotIteratorTest.java,61,,"    input.add(""0 f q DATA 11"", ""15"");"
85166,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/SnapshotIteratorTest.java,81,,"    input.add(""0 f q LOCK 21"", ""1 f q"");"
85167,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/SnapshotIteratorTest.java,81,,"    input.add(""0 f q LOCK 21"", ""1 f q"");"
85168,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/SnapshotIteratorTest.java,173,,"    input.add(""1 f q1 DATA 9"", ""x"");"
85169,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/iterators/TestData.java,79,,"    String[] fields = key.split(""\\s+"");"
85170,./TargetProjects/fluo/modules/accumulo/src/test/java/org/apache/fluo/accumulo/util/ZookeeperUtilTest.java,28,,"    Assert.assertEquals(""localhost"", ZookeeperUtil.parseServers(""localhost/my/root""));"
85171,./TargetProjects/fluo/modules/api/src/main/java/org/apache/fluo/api/config/FluoConfiguration.java,1121,,"    Preconditions.checkArgument(value > 0, property + "" must be positive"");"
85172,./TargetProjects/fluo/modules/api/src/main/java/org/apache/fluo/api/config/FluoConfiguration.java,1153,,"    Objects.requireNonNull(value, property + "" cannot be null"");"
85173,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/client/AbstractTransactionBaseTest.java,134,,"    snap.put(new RowColumn(""row1"", COL1), Bytes.of(""v1""));"
85174,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/client/AbstractTransactionBaseTest.java,135,,"    snap.put(new RowColumn(""row2"", COL1), Bytes.of(""v2""));"
85175,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/client/AbstractTransactionBaseTest.java,188,,"    tx.delete(""row5"", COL1);"
85176,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,88,,"    Assert.assertEquals(""instance"", config.setAccumuloInstance(""instance"").getAccumuloInstance());"
85177,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,89,,"    Assert.assertEquals(""pass"", config.setAccumuloPassword(""pass"").getAccumuloPassword());"
85178,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,90,,"    Assert.assertEquals(""table"", config.setAccumuloTable(""table"").getAccumuloTable());"
85179,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,91,,"    Assert.assertEquals(""user"", config.setAccumuloUser(""user"").getAccumuloUser());"
85180,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,99,,"    Assert.assertEquals(""app"", config.setApplicationName(""app"").getApplicationName());"
85181,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/FluoConfigurationTest.java,227,,"    @SuppressWarnings(""deprecation"")"
85182,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,35,,"    sc1.setProperty(""set1"", ""value1"");"
85183,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,37,,"    sc1.setProperty(""set3"", ""value3"");"
85184,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,38,,"    sc2.setProperty(""set4"", ""value4"");"
85185,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,39,,"    sc2.setProperty(""set5"", ""value5"");"
85186,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,41,,"    sc3.setProperty(""set7"", ""value7"");"
85187,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/config/SimpleConfigurationTest.java,41,,"    sc3.setProperty(""set7"", ""value7"");"
85188,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/BytesBuilderTest.java,33,,"    Assert.assertEquals(Bytes.of(""abcdef""), bytes1);"
85189,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/BytesBuilderTest.java,44,,"        new ByteArrayInputStream(""abcdefg"".getBytes(StandardCharsets.UTF_8));"
85190,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/BytesTest.java,155,,"    Bytes b4 = Bytes.of(""abc"");"
85191,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/BytesTest.java,262,,"    Bytes bytes = Bytes.of(""abcdefg"").subSequence(2, 5);"
85192,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/BytesTest.java,303,,"    AsciiSequence cs1 = new AsciiSequence(""abc123"");"
85193,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/RowColumnTest.java,60,,"    Assert.assertEquals(new RowColumn(fb), new RowColumn(""data"").following());"
85194,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/RowColumnTest.java,61,,"    Assert.assertEquals(new RowColumn(""row"", new Column(fb)),"
85195,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/RowColumnValueTest.java,27,,"  RowColumnValue rcv1 = new RowColumnValue(""row1"", new Column(""fam1"", ""qual1""), ""a"");"
85196,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/RowColumnValueTest.java,27,,"  RowColumnValue rcv1 = new RowColumnValue(""row1"", new Column(""fam1"", ""qual1""), ""a"");"
85197,./TargetProjects/fluo/modules/api/src/test/java/org/apache/fluo/api/data/RowColumnValueTest.java,27,,"  RowColumnValue rcv1 = new RowColumnValue(""row1"", new Column(""fam1"", ""qual1""), ""a"");"
85198,./TargetProjects/fluo/modules/command/src/test/java/org/apache/fluo/command/FluoProgramTest.java,32,,"  @Parameters(commandNames = ""test"")"
85199,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/client/FluoAdminImpl.java,101,,"      throw new IllegalArgumentException(""Admin configuration is missing required properties"");"
85200,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/log/TracingTransaction.java,346,,"        return TracingTransaction.this.get(rltx, rowColumns, ""withReadLock()."");"
85201,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,81,,"      sendBase(""getTimestamps"", args);"
85202,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,102,,"      sendBase(""isLeader"", args);"
85203,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,360,,"              _LOGGER.error(""Exception writing to internal frame buffer"", e);"
85204,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,533,,"          throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
85205,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,533,,"          throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");"
85206,./TargetProjects/fluo/modules/core/src/main/java/org/apache/fluo/core/thrift/OracleService.java,990,,"        new org.apache.thrift.protocol.TField(""success"", org.apache.thrift.protocol.TType.STRUCT,"
85207,./TargetProjects/fluo/modules/core/src/test/java/org/apache/fluo/core/util/NotificationScannerTest.java,63,,"    data.putNtfy(""r001"", ""f8"", ""q2"");"
85208,./TargetProjects/fluo/modules/core/src/test/java/org/apache/fluo/core/util/NotificationScannerTest.java,65,,"    data.putNtfy(""r002"", ""f8"", ""q2"");"
85209,./TargetProjects/fluo/modules/core/src/test/java/org/apache/fluo/core/util/NotificationScannerTest.java,67,,"    data.putNtfy(""r004"", ""f9"", ""q3"");"
85210,./TargetProjects/fluo/modules/core/src/test/java/org/apache/fluo/core/util/SpanUtilTest.java,32,,"    Assert.assertEquals(new Key(""row""), SpanUtil.toKey(new RowColumn(""row"")));"
85211,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/accumulo/TimeskippingIT.java,46,,"    aClient.tableOperations().create(""ttsi"","
85212,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/client/FluoAdminImplIT.java,81,,"        fail(""This should have failed"");"
85213,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/client/LoaderExecutorIT.java,96,,"    futures.add(le.submit(""test"", (tx, ctx) -> {"
85214,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/client/LoaderExecutorIT.java,97,,"      tx.set(""1234"", new Column(""last"", ""date""), ""20060101"");"
85215,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/client/LoaderExecutorIT.java,97,,"      tx.set(""1234"", new Column(""last"", ""date""), ""20060101"");"
85216,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ApiBehaviorIT.java,40,,"    Set<String> rss = Collections.singleton(""foo"");"
85217,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/AppConfigIT.java,39,,"  public static final Column DF_COL = new Column(""data"", ""foo"");"
85218,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/AppConfigIT.java,39,,"  public static final Column DF_COL = new Column(""data"", ""foo"");"
85219,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/AppConfigIT.java,40,,"  public static final Column DB_COL = new Column(""data"", ""bar"");"
85220,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/AppConfigIT.java,44,,"    config.setProperty(""myapp.sizeLimit"", 50000);"
85221,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ClientExceptionIT.java,40,,"      tx.set(Bytes.of(""row""), new Column(""c1""), Bytes.of(""val1""));"
85222,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,96,,"    Column col1 = new Column(""fam1"", ""q1"");"
85223,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,214,,"    tx.set(""bob"", BALANCE, ""10"");"
85224,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,215,,"    tx.set(""joe"", BALANCE, ""20"");"
85225,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,216,,"    tx.set(""jill"", BALANCE, ""60"");"
85226,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,395,,"    tx.set(""url0000"", lastUpdate, ""3"");"
85227,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,401,,"    tx2.set(""idx:abc"", docUrl, ""url0000"");"
85228,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,402,,"    tx2.set(""idx:def"", docUrl, ""url0000"");"
85229,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FailureIT.java,495,,"    tx.set(""john"", BALANCE, ""3"");"
85230,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,99,,"    tx.set(""bob"", BALANCE, ""10"");"
85231,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,100,,"    tx.set(""joe"", BALANCE, ""20"");"
85232,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,101,,"    tx.set(""jill"", BALANCE, ""60"");"
85233,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,164,,"    tx.set(""jane"", BALANCE, ""0"");"
85234,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,442,,"    tx.set(""d00001"", new Column(""data"", ""content""),"
85235,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,442,,"    tx.set(""d00001"", new Column(""data"", ""content""),"
85236,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,444,,"    tx.set(""d00001"", new Column(""outlink"", ""http://a.com""), """");"
85237,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,445,,"    tx.set(""d00001"", new Column(""outlink"", ""http://b.com""), """");"
85238,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,446,,"    tx.set(""d00001"", new Column(""outlink"", ""http://c.com""), """");"
85239,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,448,,"    tx.set(""d00002"", new Column(""data"", ""content""),"
85240,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,505,,"    tx.set(""d:0001"", ccol, ""abc def"");"
85241,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,507,,"    tx.set(""d:0002"", ccol, ""neb feg"");"
85242,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/FluoIT.java,509,,"    tx.set(""d:0003"", ccol, ""xyz abc"");"
85243,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,67,,"    BankUtil.setBalance(tx1, ""bob"", 10);"
85244,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,68,,"    BankUtil.setBalance(tx1, ""joe"", 20);"
85245,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,69,,"    BankUtil.setBalance(tx1, ""jill"", 60);"
85246,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,102,,"    tx1.set(""001"", docUri, ""file:///abc.txt"");"
85247,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,193,,"      tx1.set(String.format(""n:%03d"", i), altIdCol, """" + (19 * (1 + i)));"
85248,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/GarbageCollectionIteratorIT.java,204,,"      increment(tx, ""a:"" + altId, new Column(""count"", row));"
85249,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ObserverConfigIT.java,56,,"      String[] ocTokens = myConfig.getString(""observedCol"").split("":"");"
85250,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ObserverConfigIT.java,59,,"      outputCQ = Bytes.of(myConfig.getString(""outputCQ""));"
85251,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ObserverConfigIT.java,123,,"      tx1.set(""r1"", new Column(""fam1"", ""col1""), ""abcdefg"");"
85252,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,44,,"    tx1.set(""node1"", new Column(""edge"", ""node2""), """");"
85253,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,44,,"    tx1.set(""node1"", new Column(""edge"", ""node2""), """");"
85254,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,44,,"    tx1.set(""node1"", new Column(""edge"", ""node2""), """");"
85255,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,45,,"    tx1.set(""node1"", new Column(""edge"", ""node3""), """");"
85256,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,47,,"    tx1.set(""node5"", new Column(""edge"", ""node7""), """");"
85257,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,82,,"    tx1.set(""bob9"", new Column(""vote"", ""election1""), ""N"");"
85258,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,82,,"    tx1.set(""bob9"", new Column(""vote"", ""election1""), ""N"");"
85259,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,82,,"    tx1.set(""bob9"", new Column(""vote"", ""election1""), ""N"");"
85260,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,83,,"    tx1.set(""bob9"", new Column(""vote"", ""election2""), ""Y"");"
85261,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,85,,"    tx1.set(""joe3"", new Column(""vote"", ""election1""), ""nay"");"
85262,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,92,,"    tx2.set(""sue4"", new Column(""vote"", ""election1""), ""+1"");"
85263,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ParallelScannerIT.java,95,,"    tx2.set(""eve2"", new Column(""vote"", ""election1""), ""no"");"
85264,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,115,,"      setAlias(tx, ""node1"", ""bob"");"
85265,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,116,,"      setAlias(tx, ""node2"", ""joe"");"
85266,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,117,,"      setAlias(tx, ""node3"", ""alice"");"
85267,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,133,,"    Assert.assertEquals(ImmutableSet.of(""bobby:joe"", ""joe:bobby""), getDerivedEdges());"
85268,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,133,,"    Assert.assertEquals(ImmutableSet.of(""bobby:joe"", ""joe:bobby""), getDerivedEdges());"
85269,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,198,,"      tx.set(""user5"", crCol, ""0.5"");"
85270,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,199,,"      tx.set(""user6"", crCol, ""0.75"");"
85271,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,211,,"      tx.set(""org1"", crCol, (cr1 + cr2) / 2 + """");"
85272,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,217,,"      tx.set(""user5"", crCol, ""0.51"");"
85273,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,218,,"      tx.set(""user6"", crCol, ""0.76"");"
85274,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockFailureIT.java,383,,"        tx2.set(""sum1"", new Column(""f"", ""s""), """" + sum);"
85275,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,91,,"    tx.set(""d:"" + alias1 + "":"" + alias2, new Column(""edge"", node1 + "":"" + node2), """");"
85276,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,124,,"      setAlias(tx, ""node1"", ""bob"");"
85277,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,124,,"      setAlias(tx, ""node1"", ""bob"");"
85278,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,125,,"      setAlias(tx, ""node2"", ""joe"");"
85279,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,125,,"      setAlias(tx, ""node2"", ""joe"");"
85280,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,126,,"      setAlias(tx, ""node3"", ""alice"");"
85281,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,406,,"      txi.set(""test1"", c1, ""45"");"
85282,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ReadLockIT.java,408,,"      txi.set(""test2"", c1, ""30"");"
85283,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WeakNotificationIT.java,50,,"      CellScanner cellScanner = tx.scanner().over(row, new Column(Bytes.of(""stats""))).build();"
85284,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WeakNotificationOverlapIT.java,46,,"  private static final Column STAT_TOTAL = new Column(""stat"", ""total"");"
85285,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WeakNotificationOverlapIT.java,58,,"    TestUtil.increment(tx, ""all"", new Column(""stat"", ""total""), total - processed);"
85286,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WorkerIT.java,66,,"      String degree2 = """" + Iterables.size(tx.scanner().over(row, new Column(""link"")).build());"
85287,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WorkerIT.java,72,,"        tx.set(""IDEG"" + degree2, new Column(""node"", row), """");"
85288,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/WorkerIT.java,99,,"    addLink(""N0003"", ""N0040"");"
85289,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/impl/ZKSecretIT.java,50,,"      or.forColumn(new Column(""edge"", ""forward""), STRONG).useObserver((tx, row, col) -> {"
85290,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/log/LogIT.java,225,,"    Assert.assertTrue(logMsgs.matches("".*txid: \\d+ thread : \\d+ """
85291,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/log/LogIT.java,244,,"    Logger logger = Logger.getLogger(""fluo.tx"");"
85292,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/log/LogIT.java,248,,"        new WriterAppender(new PatternLayout(""%d{ISO8601} [%-8c{2}] %-5p: %m%n""), writer);"
85293,./TargetProjects/fluo/modules/integration-tests/src/main/java/org/apache/fluo/integration/log/LogIT.java,278,,"      pattern = "".*txid: (\\d+) begin\\(\\) thread: \\d+"";"
85294,./TargetProjects/fluo/modules/integration/src/test/java/org/apache/fluo/integration/impl/TransactionImplIT.java,35,,"      tx.set(""row1"", new Column(""col1""), ""val1"");"
85295,./TargetProjects/fluo/modules/integration/src/test/java/org/apache/fluo/integration/impl/TransactionImplIT.java,36,,"      tx.set(""row2"", new Column(""col2""), ""val2"");"
85296,./TargetProjects/fluo/modules/integration/src/test/java/org/apache/fluo/integration/impl/TransactionImplIT.java,37,,"      tx.set(""row3"", new Column(""col3""), ""val3"");"
85297,./TargetProjects/fluo/modules/integration/src/test/java/org/apache/fluo/integration/impl/TransactionImplIT.java,46,,"      CompletableFuture<String> res4 = tx.getsAsync(""row4"", new Column(""col4""), ""val4"");"
85298,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/FluoFileOutputFormatIT.java,107,,"    Assert.assertEquals(""90"", tx1.gets(""foo"", new Column(""moo"", ""moo"")));"
85299,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,38,,"      FluoMutationGenerator mb1 = new FluoMutationGenerator(Bytes.of(""row1""));"
85300,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,39,,"      mb1.put(new Column(""cf1"", ""cq1""), Bytes.of(""v1""));"
85301,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,39,,"      mb1.put(new Column(""cf1"", ""cq1""), Bytes.of(""v1""));"
85302,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,40,,"      mb1.put(new Column(""cf1"", ""cq2""), Bytes.of(""v2""));"
85303,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,41,,"      mb1.put(new Column(""cf1"", ""cq3""), Bytes.of(""v3""));"
85304,./TargetProjects/fluo/modules/mapreduce/src/test/java/org/apache/fluo/mapreduce/it/MutationBuilderIT.java,45,,"      FluoMutationGenerator mb2 = new FluoMutationGenerator(Bytes.of(""row2""));"
85305,./TargetProjects/fluo-examples/phrasecount/src/main/java/phrasecount/DocumentLoader.java,58,,"          ttx.get().row(""doc:"" + document.getHash()).col(DOC_REF_COUNT_COL).toInteger();"
85306,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,56,,"  private static final PasswordToken password = new PasswordToken(""secret"");"
85307,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,127,,"      Assert.assertEquals(new Counts(1, 2), pcTable.getPhraseCounts(""is only a test""));"
85308,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,128,,"      Assert.assertEquals(new Counts(1, 1), pcTable.getPhraseCounts(""test do not panic""));"
85309,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,131,,"      loadDocument(fluoClient, ""/foo2"", ""This is only a test"");"
85310,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,158,,"        Assert.assertNotNull(tsnap.get().row(""doc:"" + oldHash).col(DOC_CONTENT_COL).toString());"
85311,./TargetProjects/fluo-examples/phrasecount/src/test/java/phrasecount/PhraseCounterTest.java,185,,"      Assert.assertEquals(new Counts(100, 100), pcTable.getPhraseCounts(""this is only a""));"
85312,./TargetProjects/fluo-examples/stresso/src/test/java/stresso/TrieMapRedIT.java,58,,"        new String[] {""-D"", ""mapred.job.tracker=local"", ""-D"", ""fs.defaultFS=file:///"","
85313,./TargetProjects/fluo-examples/stresso/src/test/java/stresso/TrieMapRedIT.java,58,,"        new String[] {""-D"", ""mapred.job.tracker=local"", ""-D"", ""fs.defaultFS=file:///"","
85314,./TargetProjects/fluo-examples/webindex/modules/core/src/test/java/webindex/core/models/LinkTest.java,27,,"    Link link1 = Link.of(""com.a>>o>/"", ""anchor text"");"
85315,./TargetProjects/fluo-examples/webindex/modules/core/src/test/java/webindex/core/models/URLTest.java,107,,"    Assert.assertEquals(urlOpen(""example.com"", ""?A&B"", 83), from(""http://EXAMPLE.COM:83?A&B""));"
85316,./TargetProjects/fluo-examples/webindex/modules/core/src/test/java/webindex/core/models/URLTest.java,109,,"    Assert.assertEquals(url80(""a.b.example.com"", ""/page?1&2""),"
85317,./TargetProjects/fluo-examples/webindex/modules/data/src/test/java/webindex/data/fluo/it/IndexIT.java,179,,"      Assert.assertTrue(updatePage.addOutbound(newLink(""http://example.com"", ""Example"")));"
85318,./TargetProjects/fluo-recipes/modules/core/src/main/java/org/apache/fluo/recipes/core/types/TypedSnapshotBase.java,327,,"    @SuppressWarnings({""rawtypes"", ""unchecked""})"
85319,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/combine/it/CombineQueueTreeIT.java,47,,"  private static final String CQ_XYT_ID = ""xyt"";"
85320,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/combine/it/CombineQueueTreeIT.java,139,,"            val -> tx.delete(""inv:"" + prefix + "":"" + val, new Column(""inv"", change.getKey())));"
85321,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/common/TestGrouping.java,55,,"    Assert.assertEquals(""none"", group(pattern, ""m3:d:590""));"
85322,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/data/RowHasherTest.java,46,,"    Assert.assertTrue(rh.removeHash(rh.addHash(""abc"")).toString().equals(""abc""));"
85323,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/OptionsTest.java,38,,"        new org.apache.fluo.recipes.core.export.ExportQueue.Options(""Q2"", ""ET2"", ""KT2"", ""VT2"", 200)"
85324,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/OptionsTest.java,38,,"        new org.apache.fluo.recipes.core.export.ExportQueue.Options(""Q2"", ""ET2"", ""KT2"", ""VT2"", 200)"
85325,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/it/ExportQueueIT.java,31,,"        loader.execute(new DocumentLoader(""0999"", ""0005"", ""0002""));"
85326,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/it/ExportQueueIT.java,31,,"        loader.execute(new DocumentLoader(""0999"", ""0005"", ""0002""));"
85327,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/it/ExportQueueIT.java,31,,"        loader.execute(new DocumentLoader(""0999"", ""0005"", ""0002""));"
85328,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/export/it/ExportQueueIT.java,32,,"        loader.execute(new DocumentLoader(""0002"", ""0999"", ""0042""));"
85329,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/map/it/CollisionFreeMapIT.java,130,,"        wcMap.update(tx, Map.of(""cat"", 2L, ""dog"", 5L));"
85330,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/map/it/CollisionFreeMapIT.java,130,,"        wcMap.update(tx, Map.of(""cat"", 2L, ""dog"", 5L));"
85331,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/map/it/CollisionFreeMapIT.java,140,,"        wcMap.update(tx, Map.of(""cat"", 1L, ""dog"", 1L, ""fish"", 2L));"
85332,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/map/it/CollisionFreeMapIT.java,202,,"        loader.execute(new DocumentLoader(""0004"", ""zoo big cat""));"
85333,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/transaction/RecordingTransactionTest.java,165,,"        .singletonIterator(new RowColumnValue(""r7"", new Column(""cf7"", ""cq7""), ""v7"")));"
85334,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/transaction/RecordingTransactionTest.java,165,,"        .singletonIterator(new RowColumnValue(""r7"", new Column(""cf7"", ""cq7""), ""v7"")));"
85335,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,36,,"        new MockTransactionBase(""r1,cf1:cq1,v1"", ""r1,cf1:cq2,v2"", ""r1,cf1:cq3,9"", ""r2,cf2:7,12"","
85336,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,36,,"        new MockTransactionBase(""r1,cf1:cq1,v1"", ""r1,cf1:cq2,v2"", ""r1,cf1:cq3,9"", ""r2,cf2:7,12"","
85337,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,36,,"        new MockTransactionBase(""r1,cf1:cq1,v1"", ""r1,cf1:cq2,v2"", ""r1,cf1:cq3,9"", ""r2,cf2:7,12"","
85338,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,36,,"        new MockTransactionBase(""r1,cf1:cq1,v1"", ""r1,cf1:cq2,v2"", ""r1,cf1:cq3,9"", ""r2,cf2:7,12"","
85339,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,37,,"            ""r2,cf2:8,13"", ""13,9:17,20"", ""13,9:18,20"", ""13,9:19,20"", ""13,9:20,20"");"
85340,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,37,,"            ""r2,cf2:8,13"", ""13,9:17,20"", ""13,9:18,20"", ""13,9:19,20"", ""13,9:20,20"");"
85341,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,42,,"        ttx.get().row(""r2"").columns(Set.of(new Column(""cf2"", ""6""), new Column(""cf2"", ""7"")));"
85342,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,77,,"    Assert.assertNull(ttx.get().row(""r1"").fam(""cf1"").qual(""cq1"").toString());"
85343,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,77,,"    Assert.assertNull(ttx.get().row(""r1"").fam(""cf1"").qual(""cq1"").toString());"
85344,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,86,,"    Assert.assertNull(""v1"", ttx.get().row(""r1"").fam(""cf1"").qual(""cq1"").vis(""A&B"").toString());"
85345,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,103,,"    ttx.mutate().row(""r1"").fam(""cf1"").qual(""cq1"").vis(""A&C"".getBytes()).set(4);"
85346,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,104,,"    ttx.mutate().row(""r1"").fam(""cf1"").qual(""cq1"").vis(Bytes.of(""A&D"")).set(5);"
85347,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,160,,"    Assert.assertEquals(""28.195"", tts.get().row(""r3"").fam(""cf3"").qual(""cq3"").toString());"
85348,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,160,,"    Assert.assertEquals(""28.195"", tts.get().row(""r3"").fam(""cf3"").qual(""cq3"").toString());"
85349,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,162,,"    Assert.assertEquals(""true"", tts.get().row(""r4"").fam(""cf4"").qual(""cq4"").toString());"
85350,./TargetProjects/fluo-recipes/modules/core/src/test/java/org/apache/fluo/recipes/core/types/TypeLayerTest.java,162,,"    Assert.assertEquals(""true"", tts.get().row(""r4"").fam(""cf4"").qual(""cq4"").toString());"
85351,./TargetProjects/fluo-recipes/modules/test/src/test/java/org/apache/fluo/recipes/test/export/AccumuloExporterIT.java,102,,"        export(teq, tx, expected, ""0001"", ""abc"");"
85352,./TargetProjects/freemarker/src/main/java/freemarker/core/BuiltInsForNumbers.java,276,,"                        ""Number doesn't fit into a 64 bit signed integer (long): "", Double.valueOf(d));"
85353,./TargetProjects/freemarker/src/main/java/freemarker/core/BuiltInsForSequences.java,1107,,"                                            throw new _TemplateModelException(e, env, ""Failed to transform element"");"
85354,./TargetProjects/freemarker/src/main/java/freemarker/core/CustomAttribute.java,129,,"            throw new UnsupportedOperationException(""This is not a template-scope attribute"");"
85355,./TargetProjects/freemarker/src/main/java/freemarker/core/ExtendedDecimalFormatParser.java,112,,"                    throw new InvalidParameterValueException(""Must contain exactly 1 character."");"
85356,./TargetProjects/freemarker/src/main/java/freemarker/core/NonNumericalException.java,47,,"        super(blamed, model, ""number"", EXPECTED_TYPES, env);"
85357,./TargetProjects/freemarker/src/main/java/freemarker/core/_ObjectBuilderSettingEvaluator.java,737,,"                        ""The "" + cl.getName() + "" class has no writeable JavaBeans property called """
85358,./TargetProjects/freemarker/src/main/java/freemarker/ext/jsp/TaglibFactory.java,455,,"                if (resourcePath.endsWith("".tld"")) {"
85359,./TargetProjects/freemarker/src/main/java/freemarker/ext/jsp/TaglibFactory.java,608,,"                LOG.debug(""Scanning for "" + META_INF_ABS_PATH + ""*.tld-s in JarFile: servletContext:"""
85360,./TargetProjects/freemarker/src/main/java/freemarker/ext/servlet/FreemarkerServlet.java,514,,"    @SuppressFBWarnings(value=""SE_BAD_FIELD"", justification=""Not investing into making this Servlet serializable"")"
85361,./TargetProjects/freemarker/src/main/java/freemarker/ext/servlet/FreemarkerServlet.java,514,,"    @SuppressFBWarnings(value=""SE_BAD_FIELD"", justification=""Not investing into making this Servlet serializable"")"
85362,./TargetProjects/freemarker/src/main/java/freemarker/log/Logger.java,255,,"                            + ""\"" system property is set to \"""" + getLibraryName(Logger.libraryEnum) + ""\""."");"
85363,./TargetProjects/freemarker/src/main/java/freemarker/template/Configuration.java,1196,,"        localeToCharsetMap.put(""be"", ""ISO-8859-5"");"
85364,./TargetProjects/freemarker/src/main/java/freemarker/template/Configuration.java,1198,,"        localeToCharsetMap.put(""ca"", ""ISO-8859-1"");"
85365,./TargetProjects/freemarker/src/main/java/freemarker/template/Configuration.java,1199,,"        localeToCharsetMap.put(""cs"", ""ISO-8859-2"");"
85366,./TargetProjects/freemarker/src/main/java/freemarker/template/utility/DOMNodeModel.java,101,,"            } else if (""parent"".equals(key)) {"
85367,./TargetProjects/freemarker/src/main/java/freemarker/template/utility/DateUtil.java,437,,"            throw new DateParseException(""The value didn't match the expected pattern: "" + PATTERN_XS_DATE); "
85368,./TargetProjects/freemarker/src/main/java/freemarker/template/utility/DateUtil.java,719,,"            throw new DateParseException(""The "" + gName + "" part """
85369,./TargetProjects/freemarker/src/main/java/freemarker/template/utility/DateUtil.java,719,,"            throw new DateParseException(""The "" + gName + "" part """
85370,./TargetProjects/freemarker/src/main/java/freemarker/template/utility/StringUtil.java,1579,,"                        + "" at position "" + p + ""."","
85371,./TargetProjects/freemarker/src/test/java/freemarker/cache/FileTemplateLoaderTest.java,53,,"        FileUtils.write(tFile, ""foo"");"
85372,./TargetProjects/freemarker/src/test/java/freemarker/cache/MultiTemplateLoaderTest.java,34,,"        stl1.putTemplate(""both.ftl"", ""both 1"");"
85373,./TargetProjects/freemarker/src/test/java/freemarker/cache/MultiTemplateLoaderTest.java,34,,"        stl1.putTemplate(""both.ftl"", ""both 1"");"
85374,./TargetProjects/freemarker/src/test/java/freemarker/cache/MultiTemplateLoaderTest.java,38,,"        stl2.putTemplate(""both.ftl"", ""both 2"");"
85375,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,143,,"        loader.putTemplate(""1.ftl"", ""1 v1"");"
85376,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,143,,"        loader.putTemplate(""1.ftl"", ""1 v1"");"
85377,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,144,,"        loader.putTemplate(""2.ftl"", ""2 v1"");"
85378,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,144,,"        loader.putTemplate(""2.ftl"", ""2 v1"");"
85379,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,148,,"        loader.putTemplate(""1.ftl"", ""1 v2"");"
85380,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,172,,"        loader.putTemplate(""1_en.ftl"", ""1_en v1"");"
85381,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,212,,"            loader.putTemplate(""t.ftl"", ""v"" + i, i);"
85382,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,216,,"        loader.putTemplate(""t.ftl"", ""v10"", 10);"
85383,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,236,,"            cfg.getTemplate(""test.ftl"");"
85384,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,280,,"        tl.putTemplate(""utf-8_en.ftl"", ""<#ftl encoding='utf-8'>Foo"");"
85385,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,281,,"        tl.putTemplate(""utf-8.ftl"", ""Bar"");"
85386,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,289,,"            assertEquals(""Foo"", t.toString());"
85387,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,307,,"            assertEquals(""utf-8"", t.getEncoding());"
85388,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,331,,"        tl.putTemplate(""t_de.ftl"", ""Vuu"");"
85389,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,332,,"        tl.putTemplate(""t2.ftl"", ""<#ftl encoding='UTF-16LE'>Foo"");"
85390,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateCacheTest.java,397,,"        assertNull(cfg.getTemplate(""../x"", null, null, null, true, true));"
85391,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateConfigurationFactoryTest.java,41,,"        TemplateConfigurationFactory tcf = new ConditionalTemplateConfigurationFactory(new FileNameGlobMatcher(""*.ftlx""), tc);"
85392,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateConfigurationFactoryTest.java,44,,"        assertNotApplicable(tcf, ""x.ftl"");"
85393,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateConfigurationFactoryTest.java,45,,"        assertApplicable(tcf, ""x.ftlx"", tc);"
85394,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateNameFormatTest.java,55,,"            assertEquals(""s://a/b"", tnf.toRootBasedName(""s://a/"", ""b""));"
85395,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateNameFormatTest.java,59,,"            assertEquals(""s://b"", tnf.toRootBasedName(""s://f"", ""b""));"
85396,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateNameFormatTest.java,79,,"            assertEquals(""s:b"", tnf.toRootBasedName(""s:f"", ""b""));"
85397,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateNameFormatTest.java,105,,"                assertEquals(""foo"", tnf.normalizeRootBasedName(lead + ""foo""));"
85398,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateNameFormatTest.java,189,,"        assertEqualsOn23AndOn24(""scheme://foo"", ""scheme://foo"", ""scheme://foo"");"
85399,./TargetProjects/freemarker/src/test/java/freemarker/cache/TemplateSourceMatcherTest.java,32,,"        assertTrue(m.matches(""a/b.ftl"", ""dummy""));"
85400,./TargetProjects/freemarker/src/test/java/freemarker/core/ASTBasedErrorMessagesTest.java,37,,"        assertErrorContains(""${foo}"", ""foo"", ""specify a default"");"
85401,./TargetProjects/freemarker/src/test/java/freemarker/core/ASTPrinter.java,269,,"                        + ""\nNode: "" + child.dump(false)"
85402,./TargetProjects/freemarker/src/test/java/freemarker/core/AbsoluteTemplateNameBITest.java,42,,"        assertOutput(""${'a/b'?absolute_template_name}"", ""/a/b"");"
85403,./TargetProjects/freemarker/src/test/java/freemarker/core/AbsoluteTemplateNameBITest.java,44,,"        assertOutput(""${'foo://a/b'?absolute_template_name}"", ""foo://a/b"");"
85404,./TargetProjects/freemarker/src/test/java/freemarker/core/AbsoluteTemplateNameBITest.java,52,,"        for (String baseName : new String[] { ""dir/f"", ""/dir/f"", ""dir/"", ""/dir/"" }) {"
85405,./TargetProjects/freemarker/src/test/java/freemarker/core/AbsoluteTemplateNameBITest.java,53,,"            assertOutput(""${'a/b'?absolute_template_name('"" + baseName + ""')}"", ""/dir/a/b"");"
85406,./TargetProjects/freemarker/src/test/java/freemarker/core/CallerTemplateNameTest.java,38,,"        addTemplate(""main.ftl"", """""
85407,./TargetProjects/freemarker/src/test/java/freemarker/core/CallerTemplateNameTest.java,39,,"                + ""<#macro m>${.callerTemplateName}</#macro>"""
85408,./TargetProjects/freemarker/src/test/java/freemarker/core/CallerTemplateNameTest.java,57,,"        assertErrorContains(""${.callerTemplateName}"", ""no macro or function"", "".callerTemplateName"");"
85409,./TargetProjects/freemarker/src/test/java/freemarker/core/CallerTemplateNameTest.java,86,,"                + ""</#macro>"");"
85410,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,40,,"        getConfiguration().setOutputEncoding(""utf-8"");"
85411,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,64,,"        assertErrorContains(""${.foo_bar}"", ""data_model"", ""\\!dataModel"");"
85412,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,64,,"        assertErrorContains(""${.foo_bar}"", ""data_model"", ""\\!dataModel"");"
85413,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,115,,"        assertErrorContains(""<#ftl stripWhitespace=true strip_text=true>"", ""naming convention"");"
85414,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,139,,"        assertErrorContains(""<#setting foo_bar=1>"", ""boolean_format"", ""\\!booleanFormat"");"
85415,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,139,,"        assertErrorContains(""<#setting foo_bar=1>"", ""boolean_format"", ""\\!booleanFormat"");"
85416,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,180,,"        assertOutput(""${'-${x?upperCase}-'} ${x?upperCase}"", ""-X- X"");"
85417,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,186,,"                ""naming convention"", ""legacy"", ""upperCase"", ""detection"", ""9"");"
85418,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,186,,"                ""naming convention"", ""legacy"", ""upperCase"", ""detection"", ""9"");"
85419,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,190,,"                ""naming convention"", ""camel"", ""upper_case"");"
85420,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,190,,"                ""naming convention"", ""camel"", ""upper_case"");"
85421,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,214,,"                ""naming convention"", ""camel"", ""upperCase"", ""is_string"", ""line 2"", ""line 3"");"
85422,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,244,,"        assertErrorContains(""${'x'?upper_casw}"", ""upper_case"", ""\\!upperCase"");"
85423,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,357,,"                ""123"");"
85424,./TargetProjects/freemarker/src/test/java/freemarker/core/CamelCaseTest.java,486,,"                ""naming convention"", ""legacy"", ""upper_case"", ""isString"");"
85425,./TargetProjects/freemarker/src/test/java/freemarker/core/CapturingAssignmentTest.java,42,,"        assertOutput(""<#assign x><p>${1 + 1}</#assign>${x + '&'}"", ""<p>2&"");"
85426,./TargetProjects/freemarker/src/test/java/freemarker/core/CapturingAssignmentTest.java,43,,"        assertOutput(""<#ftl outputFormat='HTML'><#assign x><p>${1 + 1}</#assign>${x + '&'}"", ""<p>2&amp;"");"
85427,./TargetProjects/freemarker/src/test/java/freemarker/core/CoercionToTextualTest.java,46,,"        assertErrorContains(""${n?lowerCase}"", ""convert"", ""string"", ""markup"", ""text/html"");"
85428,./TargetProjects/freemarker/src/test/java/freemarker/core/CoercionToTextualTest.java,46,,"        assertErrorContains(""${n?lowerCase}"", ""convert"", ""string"", ""markup"", ""text/html"");"
85429,./TargetProjects/freemarker/src/test/java/freemarker/core/CoercionToTextualTest.java,46,,"        assertErrorContains(""${n?lowerCase}"", ""convert"", ""string"", ""markup"", ""text/html"");"
85430,./TargetProjects/freemarker/src/test/java/freemarker/core/CoercionToTextualTest.java,46,,"        assertErrorContains(""${n?lowerCase}"", ""convert"", ""string"", ""markup"", ""text/html"");"
85431,./TargetProjects/freemarker/src/test/java/freemarker/core/DateFormatTest.java,76,,"        getConfiguration().setDateTimeFormat(""@epoch"");"
85432,./TargetProjects/freemarker/src/test/java/freemarker/core/DateFormatTest.java,78,,"                ""<#assign d = d?datetime>"""
85433,./TargetProjects/freemarker/src/test/java/freemarker/core/DateFormatTest.java,107,,"                + ""${d} ${d?string} """
85434,./TargetProjects/freemarker/src/test/java/freemarker/core/DateFormatTest.java,158,,"        assertOutput(""${d}"", ""12345"");"
85435,./TargetProjects/freemarker/src/test/java/freemarker/core/DateFormatTest.java,418,,"        addToDataModel(""t"", String.valueOf(T) + ""/foo"");"
85436,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,42,,"            new DefaultTruncateBuiltinAlgorithm(""..."", true);"
85437,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,46,,"            new DefaultTruncateBuiltinAlgorithm(""[...]"", false);"
85438,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,112,,"        assertC(ASCII_INSTANCE, ""12345678"", 9, ""12345678"");"
85439,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,115,,"        assertC(ASCII_INSTANCE, ""12345678"", 6, ""1[...]"");"
85440,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,138,,"        assertC(ASCII_INSTANCE, ""123456  "", 9, ""123456  "");"
85441,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,145,,"        assertC(ASCII_INSTANCE, ""1 345        "", 13, ""1 345        "");"
85442,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,150,,"        assertC(ASCII_INSTANCE, ""1 345        "", 8,  ""1 3[...]"");"
85443,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,167,,"        assertC(ASCII_INSTANCE, ""1  4567890"", 9,  ""1  4[...]"");"
85444,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,172,,"        assertC(ASCII_INSTANCE, ""  3456789"", 9,  ""  3456789"");"
85445,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,181,,"        assertC(ASCII_INSTANCE, ""1.  56...012345"", 15, ""1.  56...012345"");"
85446,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,197,,"        assertC(DOTS_INSTANCE, ""1.  56...012345"", 12, ""1.  56..."");"
85447,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,204,,"        assertC(DOTS_INSTANCE, ""1.  56...012345"", 5,  ""1..."");"
85448,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,218,,"        assertC(EMPTY_TERMINATOR_INSTANCE, ""ab. cd"", 6, ""ab. cd"");"
85449,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,229,,"        assertW(ASCII_INSTANCE, ""word1 word2 word3"", 18, ""word1 word2 word3"");"
85450,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,260,,"        assertW(DOTS_INSTANCE, ""  word1  word2  "", 16, ""  word1  word2  "");"
85451,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,274,,"        assertW(DOTS_INSTANCE, "" . . word1..  word2    "", 23, "" . . word1..  word2    "");"
85452,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,298,,"        assertAuto(ASCII_INSTANCE, ""1 234567 90ABCDEFGHIJKL"", 24, ""1 234567 90ABCDEFGHIJKL"");"
85453,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,300,,"        assertAuto(ASCII_INSTANCE, ""1 234567 90ABCDEFGHIJKL"", 22, ""1 234567 90ABCDEF[...]"");"
85454,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,304,,"        assertAuto(ASCII_INSTANCE, ""1 234567 90ABCDEFGHIJKL"", 18, ""1 234567 [...]"");"
85455,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,342,,"        assertAuto(DOTS_INSTANCE, ""12390ABCD..  . EFGHIJK ."", 24, ""12390ABCD..  . EFGHIJK ."");"
85456,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,343,,"        assertAuto(DOTS_INSTANCE, ""12390ABCD..  . EFGHIJK ."", 23, ""12390ABCD..  . ..."");"
85457,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,357,,"        assertAuto(DOTS_INSTANCE, ""word0 word1. word2 w3 . . w4"", 27, ""word0 word1. word2 w3 . ..."");"
85458,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,444,,"                ASCII_INSTANCE.truncate(""1234567890"", 8, null, null, env)"
85459,./TargetProjects/freemarker/src/test/java/freemarker/core/DefaultTruncateBuiltinAlgorithmTest.java,607,,"            TemplateModel actual = ASCII_INSTANCE.truncateM(""abcdef"", 5, htmlSquEllipsis, null, env);"
85460,./TargetProjects/freemarker/src/test/java/freemarker/core/EndTagSyntaxTest.java,48,,"        assertOutput(""<@m>nested</@>"", ""1[nested]"");"
85461,./TargetProjects/freemarker/src/test/java/freemarker/core/EndTagSyntaxTest.java,49,,"        assertOutput(""<@m a=2>nested</@>"", ""2[nested]"");"
85462,./TargetProjects/freemarker/src/test/java/freemarker/core/EnvironmentGetTemplateVariantsTest.java,47,,"                ""<@tNames />\n"""
85463,./TargetProjects/freemarker/src/test/java/freemarker/core/EnvironmentGetTemplateVariantsTest.java,52,,"                    + ""<@tNames />"""
85464,./TargetProjects/freemarker/src/test/java/freemarker/core/EnvironmentGetTemplateVariantsTest.java,68,,"                + ""</#macro>"""
85465,./TargetProjects/freemarker/src/test/java/freemarker/core/EnvironmentGetTemplateVariantsTest.java,139,,"                    + ""]\n"""
85466,./TargetProjects/freemarker/src/test/java/freemarker/core/ExtendedDecimalFormatTest.java,64,,"        assertFormatsEquivalent(new DecimalFormat(""0.0"", SYMS), ExtendedDecimalFormatParser.parse(""0.0;"", LOC));"
85467,./TargetProjects/freemarker/src/test/java/freemarker/core/GetOptionalTemplateTest.java,81,,"                + ""<@t.include />"","
85468,./TargetProjects/freemarker/src/test/java/freemarker/core/GetOptionalTemplateTest.java,111,,"        addTemplate(""lib/inc.ftl"", ""included"");"
85469,./TargetProjects/freemarker/src/test/java/freemarker/core/GetOptionalTemplateTest.java,169,,"        assertErrorContains(""<#assign t = .getOptionalTemplate(1)>"", ""#1"", ""string"", ""number"");"
85470,./TargetProjects/freemarker/src/test/java/freemarker/core/HeaderParsingTest.java,40,,"        assertOutput(""<#ftl>text"", ""text"", ""text"");"
85471,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,39,,"        cfg.addAutoImport(""t1"", ""t1.ftl"");"
85472,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,42,,"        tc.addAutoImport(""t2"", ""t2.ftl"");"
85473,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,44,,"                new ConditionalTemplateConfigurationFactory(new FileNameGlobMatcher(""main.ftl""), tc));"
85474,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,50,,"            env.addAutoImport(""t3"", ""t3.ftl"");"
85475,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,66,,"            Template t = cfg.getTemplate(""main2.ftl"");"
85476,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportConfigurableLayersTest.java,263,,"            test3LayerLazyness(layer, null, null, false, ""t1;t2;"");"
85477,./TargetProjects/freemarker/src/test/java/freemarker/core/IncludeAndImportTest.java,55,,"        addTemplate(""lib1.ftl"", ""<#global lib1Cnt = (lib1Cnt!0) + 1><#global history = (history!) + 'L1'>"""
85478,./TargetProjects/freemarker/src/test/java/freemarker/core/InterpolationSyntaxTest.java,86,,"        assertErrorContains(""<#if [true][0]]></#if>"", ""\""]\"""", ""nothing open"");"
85479,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,74,,"                ""[iterator][hasNext][next][hasNext][next]2"");"
85480,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,92,,"        assertErrorContains(""${coll[1]}"", ""sequence"", ""evaluated to a collection"");"
85481,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,105,,"                ""[size]3"");"
85482,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,132,,"                ""[isEmpty]true"");"
85483,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,136,,"                ""[isEmpty]false"");"
85484,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,234,,"        assertOutput(""${seq?map(x->x)[1..2]?first}"", ""[size][size][get 0][get 1]2"");"
85485,./TargetProjects/freemarker/src/test/java/freemarker/core/LazilyGeneratedCollectionTest.java,243,,"        assertOutput(""${seq?filter(x->true)[1..2]?first}"", ""[size][get 0][get 1]2"");"
85486,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,59,,"                ""#items"", ""must be inside"", ""#list"");"
85487,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,59,,"                ""#items"", ""must be inside"", ""#list"");"
85488,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,59,,"                ""#items"", ""must be inside"", ""#list"");"
85489,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,79,,"                ""#sep"", ""must be inside"", ""#list"", ""#foreach"");"
85490,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,79,,"                ""#sep"", ""must be inside"", ""#list"", ""#foreach"");"
85491,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,99,,"                ""?index"", ""foo"", ""no loop variable"");"
85492,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,99,,"                ""?index"", ""foo"", ""no loop variable"");"
85493,./TargetProjects/freemarker/src/test/java/freemarker/core/ListErrorsTest.java,99,,"                ""?index"", ""foo"", ""no loop variable"");"
85494,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,57,,"                        ""<#assign s = ''>"" +"
85495,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,58,,"                        ""<#function tenTimes(x)><#assign s += '${x}->'><#return x * 10></#function>"" +"
85496,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,60,,"                        ""<#assign s += x>"" +"
85497,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,61,,"                        ""<#sep><#assign s += ', '>"" +"
85498,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,62,,"                        ""</#list>"" +"
85499,./TargetProjects/freemarker/src/test/java/freemarker/core/ListWithStreamLikeBuiltinsTest.java,63,,"                        ""${s}"","
85500,./TargetProjects/freemarker/src/test/java/freemarker/core/MapBiTest.java,154,,"                ""<#assign s = ''>"" +"
85501,./TargetProjects/freemarker/src/test/java/freemarker/core/MapBiTest.java,155,,"                ""<#function tenTimes(x)><#assign s += '${x};'><#return x * 10></#function>"" +"
85502,./TargetProjects/freemarker/src/test/java/freemarker/core/NumberFormatTest.java,90,,"        getConfiguration().setNumberFormat(""@hex"");"
85503,./TargetProjects/freemarker/src/test/java/freemarker/core/NumberFormatTest.java,112,,"        cfg.setNumberFormat(""@loc"");"
85504,./TargetProjects/freemarker/src/test/java/freemarker/core/NumberFormatTest.java,224,,"        assertOutput(""${10}"", ""@hex10"");"
85505,./TargetProjects/freemarker/src/test/java/freemarker/core/ObjectBuilderSettingsTest.java,126,,"                    ""freemarker.core.ObjectBuilderSettingsTest$TestBean1("""
85506,./TargetProjects/freemarker/src/test/java/freemarker/core/ObjectBuilderSettingsTest.java,327,,"            assertEquals(""foo"", res.b1.p4);"
85507,./TargetProjects/freemarker/src/test/java/freemarker/core/ObjectBuilderSettingsTest.java,645,,"        assertEquals(Double.valueOf(""1.0""), _ObjectBuilderSettingEvaluator.eval("
85508,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,42,,"        ALLOWED_CLASSES.add(""java.lang.String"");"
85509,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,43,,"        ALLOWED_CLASSES.add(""java.lang.Integer"");"
85510,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,57,,"    private Template dummyTemp = Template.getPlainTextTemplate(""foo.ftl"", """", dummyCfg);"
85511,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,63,,"            resolver.resolve(""java.lang.Long"", null, dummyTemp);"
85512,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,134,,"        cfg.setSetting(""new_builtin_class_resolver"","
85513,./TargetProjects/freemarker/src/test/java/freemarker/core/OptInTemplateClassResolverTest.java,169,,"                Template.getPlainTextTemplate(""x.ftl"", """", cfg)));"
85514,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,47,,"        addTemplate(""t.xml"", ""${.outputFormat}"");"
85515,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,85,,"        addTemplate(""t.ftl"", commonContent);"
85516,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,86,,"        addTemplate(""t.ftlh"", commonContent);"
85517,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,89,,"        addTemplate(""t.ftlx"", commonContent);"
85518,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,92,,"        addTemplate(""tWithHeader.ftlx"", ""<#ftl outputFormat='HTML'>"" + commonContent);"
85519,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,197,,"        assertOutputForNamed(""t.ftlx"", ""&apos; &apos; '"");  // Can't override it"
85520,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,338,,"        assertErrorContains(""${'x'?esc}"", ""undefined"", ""escaping"", ""?esc"");"
85521,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,338,,"        assertErrorContains(""${'x'?esc}"", ""undefined"", ""escaping"", ""?esc"");"
85522,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,345,,"        assertErrorContains(""<#ftl outputFormat='plainText'>${htmlMarkup}"", ""plainText"", ""HTML"", ""conversion"");"
85523,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,345,,"        assertErrorContains(""<#ftl outputFormat='plainText'>${htmlMarkup}"", ""plainText"", ""HTML"", ""conversion"");"
85524,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,379,,"                    ""<#ftl outputFormat='XML'>"""
85525,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,386,,"            assertErrorContains(""<#ftl outputFormat='RTF'>${htmlMarkup}"", ""output format"", ""RTF"", ""HTML"");"
85526,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,386,,"            assertErrorContains(""<#ftl outputFormat='RTF'>${htmlMarkup}"", ""output format"", ""RTF"", ""HTML"");"
85527,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,387,,"            assertErrorContains(""<#ftl outputFormat='RTF'>${xmlMarkup}"", ""output format"", ""RTF"", ""XML"");"
85528,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,458,,"        assertErrorContains(""<#ftl outputFormat='HTML'>${'<b>foo</b>'?esc?upperCase}"", ""string"", ""markup_output"");"
85529,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,458,,"        assertErrorContains(""<#ftl outputFormat='HTML'>${'<b>foo</b>'?esc?upperCase}"", ""string"", ""markup_output"");"
85530,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,611,,"                ""a &lt; {h&#39;} <p>c"");"
85531,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,628,,"                + ""</#outputFormat>"""
85532,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,664,,"                ""convention"", ""#outputFormat"", ""#outputformat"");"
85533,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,691,,"                + ""<#noAutoEsc>"""
85534,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,695,,"                + ""</#noAutoEsc>"""
85535,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,751,,"        assertErrorContains(""<#ftl autoEsc=true>"", ""can't do escaping"", ""undefined"");"
85536,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,923,,"        assertErrorContains(""${xmlPlain?html}"", ""?html"", ""string"", ""markup_output"", ""XML"");"
85537,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,929,,"        assertErrorContains(""${xmlPlain?xhtml}"", ""?xhtml"", ""string"", ""markup_output"", ""XML"");"
85538,./TargetProjects/freemarker/src/test/java/freemarker/core/OutputFormatTest.java,940,,"        assertErrorContains(""${xmlPlain?rtf}"", ""?rtf"", ""string"", ""markup_output"", ""XML"");"
85539,./TargetProjects/freemarker/src/test/java/freemarker/core/ParseTimeParameterBIErrorMessagesTest.java,30,,"        assertErrorContains(""${true?then}"", ""expecting"", ""\""(\"""");"
85540,./TargetProjects/freemarker/src/test/java/freemarker/core/ParseTimeParameterBIErrorMessagesTest.java,30,,"        assertErrorContains(""${true?then}"", ""expecting"", ""\""(\"""");"
85541,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,51,,"        assertErrorContainsAS(""<#set x = 1 />"", ""nknown directive"", ""#set"", ""#assign"");"
85542,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,52,,"        assertErrorContainsAS(""<#iterator></#iterator>"", ""nknown directive"", ""#iterator"", ""#list"");"
85543,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,57,,"        assertErrorContainsAS(""<#list 1..i as k>${k}<#list>"", ""existing directive"", ""malformed"", ""#list"");"
85544,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,57,,"        assertErrorContainsAS(""<#list 1..i as k>${k}<#list>"", ""existing directive"", ""malformed"", ""#list"");"
85545,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,59,,"        assertErrorContainsAS(""</#if x>"", ""existing directive"", ""malformed"", ""#if"");"
85546,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,65,,"        assertErrorContainsAS(""<#macro x>"", ""#macro"", ""unclosed"");"
85547,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,90,,"            assertErrorContains(""<#ftl>${'x'>"", ""end of file"");"
85548,./TargetProjects/freemarker/src/test/java/freemarker/core/ParsingErrorMessagesTest.java,99,,"                ""</#if>"", ""#list"", ""end-tag"");"
85549,./TargetProjects/freemarker/src/test/java/freemarker/core/SQLTimeZoneTest.java,208,,"                ""${sqlDate}, ${sqlTime}, ${sqlTimestamp}, ${javaDate?datetime}, ${javaDate?date}, ${javaDate?time}\n"""
85550,./TargetProjects/freemarker/src/test/java/freemarker/core/SQLTimeZoneTest.java,211,,"                ""2014-07-11 Fri, 10:30:05 Thu, 2014-07-12T10:30:05 Sat, 2014-07-12T10:30:05 Sat, 2014-07-12 Sat, 10:30:05 Sat\n"""
85551,./TargetProjects/freemarker/src/test/java/freemarker/core/SQLTimeZoneTest.java,237,,"                ""2014-07-12 Sat, 12:30:05 Thu, 2014-07-12T10:30:05 Sat, 2014-07-12T10:30:05 Sat, 2014-07-12 Sat, 10:30:05 Sat\n"""
85552,./TargetProjects/freemarker/src/test/java/freemarker/core/SQLTimeZoneTest.java,286,,"                ""${sqlDate}, ${sqlTime}, ${sqlTimestamp}, ${javaDate?datetime}\n"""
85553,./TargetProjects/freemarker/src/test/java/freemarker/core/SQLTimeZoneTest.java,322,,"                + ""${sqlDate}, ${sqlTime}, ${javaDate?time}\n"""
85554,./TargetProjects/freemarker/src/test/java/freemarker/core/SpecialVariableTest.java,70,,"            assertOutput(""${.autoEsc?c}"", ""true"");"
85555,./TargetProjects/freemarker/src/test/java/freemarker/core/SpecialVariableTest.java,71,,"            assertOutput(""<#ftl autoEsc=false>${.autoEsc?c}"", ""false"");"
85556,./TargetProjects/freemarker/src/test/java/freemarker/core/StringLiteralInterpolationTest.java,115,,"        assertOutput(""${\""${2000}\""?isMarkupOutput?c}"", ""true"");"
85557,./TargetProjects/freemarker/src/test/java/freemarker/core/StringLiteralInterpolationTest.java,118,,"        assertOutput(""${\""#{2000}\""?isMarkupOutput?c}"", ""false"");"
85558,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplatGetEncodingTest.java,40,,"            cfg.setDefaultEncoding(""ISO-8859-2"");"
85559,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplatGetEncodingTest.java,43,,"            tl.putTemplate(""tnp"", ""<#test>"");"
85560,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplatGetEncodingTest.java,57,,"            Template tUTF8 = cfg.getTemplate(""t"", ""UTF-8"");"
85561,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,341,,"                ""loc"", LocAndTZSensitiveTemplateDateFormatFactory.INSTANCE,"
85562,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,380,,"        tc1.setAutoIncludes(ImmutableList.of(""a.ftl"", ""x.ftl"", ""b.ftl""));"
85563,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,380,,"        tc1.setAutoIncludes(ImmutableList.of(""a.ftl"", ""x.ftl"", ""b.ftl""));"
85564,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,383,,"        tc2.setAutoIncludes(ImmutableList.of(""c.ftl"", ""x.ftl"", ""d.ftl""));"
85565,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,383,,"        tc2.setAutoIncludes(ImmutableList.of(""c.ftl"", ""x.ftl"", ""d.ftl""));"
85566,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,504,,"            tc.setAutoIncludes(ImmutableList.of(""i1.ftl"", ""i2.ftl"", ""i3.ftl""));"
85567,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationTest.java,818,,"            assertOutputWithoutAndWithTC(tc, legacyNCFtl, ""null"", outputEncoding);"
85568,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,52,,"            Template t = cfg.getTemplate(""utf8.ftl"");"
85569,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,53,,"            assertEquals(""utf-8"", t.getEncoding());"
85570,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,57,,"            Template t = cfg.getTemplate(""utf8.ftl"", ""iso-8859-1"");"
85571,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,62,,"            Template t = cfg.getTemplate(""utf16.ftl"");"
85572,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,63,,"            assertEquals(""utf-16"", t.getEncoding());"
85573,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,67,,"            Template t = cfg.getTemplate(""default.ftl"");"
85574,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,72,,"            Template t = cfg.getTemplate(""default.ftl"", ""iso-8859-5"");"
85575,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,79,,"            assertEquals(""iso-8859-2"", t.getEncoding());"
85576,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,234,,"        tc1.setCustomAttribute(""a2"", ""a2tc1"");"
85577,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateConfigurationWithTemplateCacheTest.java,237,,"        CUST_ATT_2.set(""ca2tc1"", tc1);"
85578,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,42,,"        tl.putTemplate(""main.ftl"","
85579,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,43,,"                ""In main: ${"" + specVar + ""}\n"""
85580,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,43,,"                ""In main: ${"" + specVar + ""}\n"""
85581,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,47,,"                + ""<@i.impM>${"" + specVar + ""}</@>\n"""
85582,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,61,,"                + ""</#macro>"""
85583,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,68,,"        tl.putTemplate(""inc.ftl"","
85584,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,70,,"                + ""In inc call imp:\n"""
85585,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,124,,"                    ""In main: main.ftl\n"""
85586,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,127,,"                    + ""imp.ftl\n"""
85587,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,128,,"                    + ""{main.ftl}\n"""
85588,./TargetProjects/freemarker/src/test/java/freemarker/core/TemplateNameSpecialVariablesTest.java,153,,"                + ""main.ftl\n"""
85589,./TargetProjects/freemarker/src/test/java/freemarker/core/TruncateBuiltInTest.java,52,,"        assertOutput(""${t?truncate(20)}"", ""Some text for [...]"");"
85590,./TargetProjects/freemarker/src/test/java/freemarker/core/TruncateBuiltInTest.java,52,,"        assertOutput(""${t?truncate(20)}"", ""Some text for [...]"");"
85591,./TargetProjects/freemarker/src/test/java/freemarker/core/TruncateBuiltInTest.java,60,,"        assertOutput(""${t?truncate(20)?isMarkupOutput?c}"", ""false"");"
85592,./TargetProjects/freemarker/src/test/java/freemarker/core/TruncateBuiltInTest.java,75,,"        assertOutput(""${t?truncate_m(15, mTerm)}"", ""Some text for "" + M_TERM_SRC);"
85593,./TargetProjects/freemarker/src/test/java/freemarker/core/TruncateBuiltInTest.java,84,,"        assertOutput(""${t?truncateM(15, mTerm)?isMarkupOutput?c}"", ""true"");"
85594,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,50,,"        assertErrorContains(""${n - s}"", ""\""-\"""", ""right-hand"", ""number"", ""string"");"
85595,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,50,,"        assertErrorContains(""${n - s}"", ""\""-\"""", ""right-hand"", ""number"", ""string"");"
85596,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,57,,"                ""number"", ""string"", ""method"", ""obj.getSomething"", ""obj.something"");"
85597,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,57,,"                ""number"", ""string"", ""method"", ""obj.getSomething"", ""obj.something"");"
85598,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,75,,"                ""used as string"", ""query result"", ""2"", ""multiple matches"");"
85599,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,75,,"                ""used as string"", ""query result"", ""2"", ""multiple matches"");"
85600,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,75,,"                ""used as string"", ""query result"", ""2"", ""multiple matches"");"
85601,./TargetProjects/freemarker/src/test/java/freemarker/core/TypeErrorMessagesTest.java,79,,"                ""used as string"", ""query result"", ""0"", ""no matches"");"
85602,./TargetProjects/freemarker/src/test/java/freemarker/core/UncheckedExceptionHandlingTest.java,69,,"                assertErrorContains(""${f('NPE')}"", TemplateException.class, ""thrown an unchecked"").getCause(),"
85603,./TargetProjects/freemarker/src/test/java/freemarker/core/UnclosedCommentTest.java,45,,"        assertErrorContains(UNCLOSED_COMMENT_0, ""end of file"");"
85604,./TargetProjects/freemarker/src/test/java/freemarker/core/UnclosedCommentTest.java,46,,"        assertOutput(UNCLOSED_COMMENT_1, ""foo"");"
85605,./TargetProjects/freemarker/src/test/java/freemarker/core/UnclosedCommentTest.java,59,,"        assertErrorContains(UNCLOSED_COMMENT_1, ""Unclosed"", ""<#--"");"
85606,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,59,,"                ""</#macro>"" +"
85607,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,91,,"        assertOutput(""<@m b=2 a=1 />"", ""a=1; b=2; c=d3"");"
85608,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,95,,"        assertOutput(""<@m?withArgs({'b': 2, 'c': 3}) a=1 />"", ""a=1; b=2; c=3"");"
85609,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,98,,"        assertOutput(""<@mCA a=1 b=2 />"", ""a=1; b=2; o={}"");"
85610,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,102,,"        assertOutput(""<@mCA?withArgs({'a': 1, 'b': 2, 'c': 3}) />"", ""a=1; b=2; o={c=3}"");"
85611,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,107,,"        assertOutput(""<@mCA a=1 b=2 c=3 d=4 />"", ""a=1; b=2; o={c=3, d=4}"");"
85612,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,116,,"        assertOutput(""<@mCAO?withArgs({'a': 1, 'b': 2}) />"", ""o={a=1, b=2}"");"
85613,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,158,,"        assertOutput(""<@mCA 1 2 />"", ""a=1; b=2; o=[]"");"
85614,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,162,,"        assertOutput(""<@mCA 1 2 3 />"", ""a=1; b=2; o=[3]"");"
85615,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,173,,"        assertOutput(""<@mCAO?withArgs([1, 2]) />"", ""o=[1, 2]"");"
85616,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,183,,"        assertOutput(""<@mCAO 1 null null 4 />"", ""o=[1, null, null, 4]"");"
85617,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,184,,"        addToDataModel(""args"", Arrays.asList(1, null, null, 4));"
85618,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,253,,"        assertOutput(macroDef + ""<@m 1 2 3 />"", ""1, 2, 3"");"
85619,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,258,,"        assertErrorContains(macroDef + ""<@m 1 2 3 4 />"", ""accepts 3"", ""got 4"");"
85620,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,258,,"        assertErrorContains(macroDef + ""<@m 1 2 3 4 />"", ""accepts 3"", ""got 4"");"
85621,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,264,,"        assertErrorContains(macroDef + ""<@m 1 2 />"", ""\""c\"""", ""was not specified"");"
85622,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,264,,"        assertErrorContains(macroDef + ""<@m 1 2 />"", ""\""c\"""", ""was not specified"");"
85623,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,312,,"        assertOutput(""${obj.mVA(1, 2, 3, 4)}"", ""1, 2, o=[3, 4]"");"
85624,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,370,,"        assertOutput(""${legacyMethod(1, '2')}"", ""[1.00, 2]"");"
85625,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,392,,"                ""{a=1, b=2, c=3}{11 22}"");"
85626,./TargetProjects/freemarker/src/test/java/freemarker/core/WithArgsBuiltInTest.java,501,,"        assertOutput(""<@mCA?withArgsLast([1, 2, 3, 4]) />"", ""a=1; b=2; o=[3, 4]"");"
85627,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/BeansAPINewInstanceTest.java,38,,"        testClassConstructors(""int 1, int 2"", 1, 2);"
85628,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/BeansAPINewInstanceTest.java,106,,"        public Constructors(int x, int y) { s = ""int "" + x + "", int "" + y; }"
85629,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/BeansWrapperMiscTest.java,55,,"        assertNotNull(tm.get(""hashCode""));"
85630,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/BeansWrapperMiscTest.java,56,,"        assertNotNull(tm.get(""class""));"
85631,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/DefaultObjectWrapperMemberAccessPolicyTest.java,72,,"        assertNull(objM.get(""notify""));"
85632,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/DefaultObjectWrapperMemberAccessPolicyTest.java,90,,"        assertNull(objM.get(""publicField1""));"
85633,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/DefaultObjectWrapperMemberAccessPolicyTest.java,91,,"        assertNull(objM.get(""publicField2""));"
85634,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/DefaultObjectWrapperMemberAccessPolicyTest.java,100,,"        assertNull(objM.get(""STATIC_FIELD""));"
85635,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/DefaultObjectWrapperMemberAccessPolicyTest.java,194,,"                assertThat(e.getMessage(), containsString(""No such key""));"
85636,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/ErrorMessagesTest.java,71,,"                            containsString(""String""), containsString(""convert""), containsString(""markup_output""),"
85637,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/ErrorMessagesTest.java,72,,"                            containsString(""Tip:""), containsString(""?markup_string"")));"
85638,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/FineTuneMethodAppearanceTest.java,83,,"            assertSSubvariableValue(replaceExistingProperty, true, ""from getS()"");"
85639,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/GetPropertyNameFromReaderMethodNameTest.java,29,,"       assertEquals(""foo"", _MethodUtil.getBeanPropertyNameFromReaderMethodName(""getFoo"", String.class)); "
85640,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MemberSelectorListMemberAccessPolicyTest.java,45,,"                C1.class.getName() + "".m1()"","
85641,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MemberSelectorListMemberAccessPolicyTest.java,47,,"                C1.class.getName() + "".f1"");"
85642,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MemberSelectorListMemberAccessPolicyTest.java,141,,"                    I1Sub.class.getName() + "".m2()"","
85643,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MemberSelectorListMemberAccessPolicyTest.java,338,,"            assertTrue(policy.forClass(C1.class).isMethodExposed(Object.class.getMethod(""toString"")));"
85644,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MethodMatcherTest.java,126,,"        Method m = Runnable.class.getMethod(""run"");"
85645,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/MiscNumericalOperationsTest.java,52,,"            assertEquals(BeansWrapper.forceUnwrappedNumberToType(n, BigInteger.class, false), new BigInteger(""123""));"
85646,./TargetProjects/freemarker/src/test/java/freemarker/ext/beans/OverloadedNumberUtilTest.java,27,,"@SuppressWarnings(""boxing"")"
85647,./TargetProjects/freemarker/src/test/java/freemarker/ext/dom/DOMSiblingTest.java,44,,"        assertOutput(""${doc.person.name?previousSibling}"", ""\n    "");"
85648,./TargetProjects/freemarker/src/test/java/freemarker/ext/jsp/RealServletContainertTest.java,131,,"            assertExpectedEqualsOutput(WEBAPP_TLD_DISCOVERY, ""test1.txt"", ""tester?view=test1.ftl"");"
85649,./TargetProjects/freemarker/src/test/java/freemarker/ext/jsp/RealServletContainertTest.java,131,,"            assertExpectedEqualsOutput(WEBAPP_TLD_DISCOVERY, ""test1.txt"", ""tester?view=test1.ftl"");"
85650,./TargetProjects/freemarker/src/test/java/freemarker/ext/jsp/RealServletContainertTest.java,249,,"        assertEquals(""from WEB-INF/lib/templates.jar/sub"", getResponseContent(WEBAPP_CONFIG,"
85651,./TargetProjects/freemarker/src/test/java/freemarker/ext/jsp/TaglibMethodUtilTest.java,32,,"        Method expected = Functions.class.getMethod(""plus"", new Class [] { int.class, int.class });"
85652,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,88,,"                    DEFAULT_CONTENT_TYPE + ""; charset=UTF-8"", // <- expected"
85653,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,92,,"                    ""text/css; charset=UTF-8"", // <- expected"
85654,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,93,,"                    ""text/css"", overrideCT, // <- init-params"
85655,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,98,,"                    FOO_FTL, ""application/json""); // <- request"
85656,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,245,,"                    ""UTF-8"", // <- expected response.characterEncoding"
85657,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,260,,"                    ""text/html; charset=ISO-8859-2"", // ContentType init-param"
85658,./TargetProjects/freemarker/src/test/java/freemarker/ext/servlet/FreemarkerServletTest.java,355,,"                ""UTF-16LE"", // <- expected response.characterEncoding"
85659,./TargetProjects/freemarker/src/test/java/freemarker/manual/TemplateConfigurationExamples.java,49,,"        addTemplate(""t.xml"", """");"
85660,./TargetProjects/freemarker/src/test/java/freemarker/manual/TemplateConfigurationExamples.java,52,,"        tcUTF8XML.setEncoding(""utf-8"");"
85661,./TargetProjects/freemarker/src/test/java/freemarker/manual/TemplateConfigurationExamples.java,122,,"        addTemplate(""t.stats.html"", ""${ts?datetime} ${ts?date} ${ts?time}"");"
85662,./TargetProjects/freemarker/src/test/java/freemarker/manual/TemplateConfigurationExamples.java,123,,"        addTemplate(""t.html"", """");"
85663,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,294,,"            cfg.getTemplate(""missing.ftl"");"
85664,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,297,,"            assertThat(e.getMessage(), allOf(containsString(""wasn't set""), containsString(""default"")));"
85665,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,391,,"        tl.putTemplate(tFtl, ""${1}"");"
85666,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,667,,"        cfg.getTemplate(""toCache1.ftl"");"
85667,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,852,,"                        + ""ConditionalTemplateConfigurationFactory("""
85668,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,893,,"        cfg.setSetting(Configuration.TEMPLATE_CONFIGURATIONS_KEY, ""null"");"
85669,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1062,,"        cfg.setSetting(Configuration.RECOGNIZE_STANDARD_FILE_EXTENSIONS_KEY_CAMEL_CASE, ""false"");"
85670,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1092,,"            cfg.setSetting(Configurable.TIME_ZONE_KEY, ""JVM default"");"
85671,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1232,,"        cfg.setSetting(Configurable.WRAP_UNCHECKED_EXCEPTIONS_KEY_CAMEL_CASE, ""true"");"
85672,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1373,,"            cfg.setCustomNumberFormats(Collections.singletonMap(""a_b"", HexTemplateNumberFormatFactory.INSTANCE));"
85673,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1380,,"            cfg.setCustomNumberFormats(Collections.singletonMap(""a b"", HexTemplateNumberFormatFactory.INSTANCE));"
85674,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1389,,"                    ""@wrong"", HexTemplateNumberFormatFactory.INSTANCE));"
85675,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1396,,"                ""{ 'base': "" + BaseNTemplateNumberFormatFactory.class.getName() + ""() }"");"
85676,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1656,,"        cfg.setSetting(""tag_syntax"", ""angle_bracket"");"
85677,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1670,,"            cfg.setSetting(""tag_syntax"", ""no_such_syntax"");"
85678,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1691,,"        cfg.setSetting(""interpolation_syntax"", ""dollar"");"
85679,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1775,,"        String nonDefault = defaultFileEncoding.equalsIgnoreCase(""UTF-8"") ? ""ISO-8859-1"" : ""UTF-8"";"
85680,./TargetProjects/freemarker/src/test/java/freemarker/template/ConfigurationTest.java,1838,,"        cfg.setSetting(""truncate_builtin_algorithm"", ""ASCII"");"
85681,./TargetProjects/freemarker/src/test/java/freemarker/template/DefaultObjectWrapperTest.java,150,,"    @SuppressWarnings(""boxing"")"
85682,./TargetProjects/freemarker/src/test/java/freemarker/template/DefaultObjectWrapperTest.java,626,,"                assertThat(e.getMessage(), containsString(""no more""));"
85683,./TargetProjects/freemarker/src/test/java/freemarker/template/ExceptionTest.java,75,,"        tl.putTemplate(""foo_en.ftl"", ""\n\nxxx${noSuchVariable}"");"
85684,./TargetProjects/freemarker/src/test/java/freemarker/template/GetSourceTest.java,34,,"            Template t = new Template(null, ""a\n\tb\nc"", cfg);"
85685,./TargetProjects/freemarker/src/test/java/freemarker/template/JavaCCExceptionAsEOFFixTest.java,92,,"            new Template(null, new FailingReader(new IOException(""test"")), new Configuration());"
85686,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,57,,"        tl.putTemplate(""test.ftl"", """");"
85687,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,63,,"        final Locale locale = new Locale(""aa"", ""BB"", ""CC_DD"");"
85688,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,66,,"            cfg.getTemplate(""missing.ftl"", locale);"
85689,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,93,,"        tl.putTemplate(""test_aa.ftl"", """");"
85690,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,182,,"                final Locale locale = new Locale(""aa"", ""BB"", ""XX_XX"");"
85691,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,262,,"        tl.putTemplate(""t.ftl"", """");"
85692,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,326,,"        tl.putTemplate(""@default/i_xx.ftl"", iXxAtDefaultContent);"
85693,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,328,,"        tl.putTemplate(""@foo.com/t2.ftl"", ""<#import 'i2.ftl' as i2 />${proof}"");"
85694,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,329,,"        tl.putTemplate(""@default/i2.ftl"", ""<#import 'i3.ftl' as i3 />"");"
85695,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,338,,"            final String domain = ""foo.com"";"
85696,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,339,,"            final Template t = cfg.getTemplate(""t.ftl"", locale, domain, ""utf-8"", true, false); "
85697,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateLookupStrategyTest.java,412,,"            final Template t = cfg.getTemplate(""i.ftl"", locale, domain, ""utf-8"", true, false); "
85698,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateNotFoundMessageTest.java,54,,"        final String errMsg = failWith(new ClassTemplateLoader(this.getClass(), ""foo/bar""));"
85699,./TargetProjects/freemarker/src/test/java/freemarker/template/TemplateNotFoundMessageTest.java,62,,"        final String errMsg = failWith(new WebappTemplateLoader(new MockServletContext(), ""WEB-INF/templates""));"
85700,./TargetProjects/freemarker/src/test/java/freemarker/template/VersionTest.java,77,,"        assertEquals(""beta2"", v.getExtraInfo());"
85701,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,125,,"                ""1998-10-30"","
85702,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,147,,"        TimeZone tzRome = TimeZone.getTimeZone(""Europe/Rome"");"
85703,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,423,,"                ""AD 1998-10-29 20:00:00:0 +0000"","
85704,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,427,,"                ""AD 1998-10-30 02:00:00:0 +0000"","
85705,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,438,,"                ""AD 1998-10-30 00:00:00:0 +0000"","
85706,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,474,,"                ""BC 0001-02-05 00:00:00:0 +0000"","
85707,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,491,,"                ""AD 0001-02-05 00:00:00:0 +0000"",  // Julian"
85708,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,566,,"                ""AD 1970-01-01 07:30:00:123 +0000"","
85709,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,604,,"                ""AD 1970-01-01 16:30:05:500 +0000"","
85710,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,631,,"                ""AD 1970-01-02 00:00:00:0 +0000"","
85711,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/DateUtilTest.java,690,,"                ""AD 1998-10-30 15:30:00:0 +0000"","
85712,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,81,,"        assertEsc(""\"""", ""\\\"""", ""\\\"""");"
85713,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,120,,"        assertFTLEsc(""foo"", ""foo"", ""foo"", ""foo"", ""\""foo\"""");"
85714,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,231,,"        assertGlobMatches(""a/b/c.ftl"", ""a/b/c.ftl"");"
85715,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,234,,"        assertGlobMatches(""a/b/*.ftl"", ""a/b/.ftl"", ""a/b/x.ftl"", ""a/b/xx.ftl"");"
85716,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,325,,"        s = ""asd"";"
85717,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,328,,"        assertEquals(""a&amp;b&lt;c&gt;d&quot;e'f"", StringUtil.HTMLEnc(""a&b<c>d\""e'f""));"
85718,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,329,,"        assertEquals(""&lt;"", StringUtil.HTMLEnc(""<""));"
85719,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,330,,"        assertEquals(""&lt;a"", StringUtil.HTMLEnc(""<a""));"
85720,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,331,,"        assertEquals(""&lt;a&gt;"", StringUtil.HTMLEnc(""<a>""));"
85721,./TargetProjects/freemarker/src/test/java/freemarker/template/utility/StringUtilTest.java,334,,"        assertEquals(""a&lt;&gt;b"", StringUtil.HTMLEnc(""a<>b""));"
85722,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/TemplateTestCase.java,328,,"            dataModel.put(""doc"", nm);"
85723,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/models/OverloadedMethods2.java,324,,"        return ""varargs1(String s = "" + StringUtil.jQuote(s) + "", int... xs = "" + TestUtil.arrayToString(xs) + "")"";"
85724,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/models/OverloadedMethods2.java,476,,"        return ""mSeqToArrayNonOverloaded(String[] "" + TestUtil.arrayToString(items) + "", String "" + s + "")"";"
85725,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/models/OverloadedMethods2.java,484,,"        return ""mSeqToArrayGoodHint(String[] "" + TestUtil.arrayToString(items) + "", int "" + i + "")"";"
85726,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/models/OverloadedMethods2.java,576,,"        return ""mIntegerArrayOverloaded(Object "" + obj + "", boolean "" + b + "")"";"
85727,./TargetProjects/freemarker/src/test/java/freemarker/test/templatesuite/models/OverloadedMethods2.java,904,,"    @SuppressWarnings(""boxing"")"
85728,./TargetProjects/freemarker/src/test/java/freemarker/test/utility/TestUtil.java,50,,"        if (array == null) return ""null"";"
85729,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/CJSONInterpreter.java,874,,"                        ""The closing "" + TextUtil.jQuoteOrName(q)"
85730,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/CJSONInterpreter.java,875,,"                        + "" of the string is missing."","
85731,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/DocgenRestrictionsValidator.java,268,,"                            ""The \"""" + localName + ""\"" element and other such """
85732,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/DocgenRestrictionsValidator.java,367,,"                        + AV_CONFORMANCE_DOCGEN + ""\"".""));"
85733,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/PrintTextWithDocgenSubstitutionsDirective.java,479,,"                        ""Couldn't get "" + mainMethodName + ""(String[]) method from class """
85734,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,143,,"                throw new DocgenException(""The \"""" + attName"
85735,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,144,,"                        + ""\"" attribute of the \"""" + E_COLGROUP"
85736,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,145,,"                        + ""\"" element is not supported by Docgen."");"
85737,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,232,,"            throw new SAXException(""Illegal \"""" + A_ALIGN"
85738,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,233,,"                    + ""\"" attribute value for a(n) \"""" + elemName"
85739,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/TableSimplifier.java,234,,"                    + ""\"" element: "" + attValue);"
85740,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/Transform.java,125,,"    static final String SETTING_LOGO_KEY_HREF = ""href"";"
85741,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/Transform.java,841,,"                        ""The \"""" + SETTING_DEPLOY_URL + ""\"" setting wasn't specified"");"
85742,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/main/java/org/freemarker/docgen/core/Transform.java,1817,,"                        tocNode.getElement().setAttribute(A_DOCGEN_NOT_ADDRESSABLE, ""true"");"
85743,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/test/java/org/freemarker/docgen/core/ChopLinebreakWriterTest.java,117,,"        assertEquals(""123"", sw.toString());"
85744,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/test/java/org/freemarker/docgen/core/SettingUtilsTest.java,89,,"        ImmutableSet<String> requiredKeys = ImmutableSet.of(""reqKey1"", ""reqKey2"");"
85745,./TargetProjects/freemarker-docgen/freemarker-docgen-core/src/test/java/org/freemarker/docgen/core/SettingUtilsTest.java,89,,"        ImmutableSet<String> requiredKeys = ImmutableSet.of(""reqKey1"", ""reqKey2"");"
85746,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourceFactoryTest.java,61,,"        final DataSource dataSource = DataSourceFactory.fromString(""test.txt"", ""default"", ANY_TEXT, ""text/plain"");"
85747,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourceFactoryTest.java,61,,"        final DataSource dataSource = DataSourceFactory.fromString(""test.txt"", ""default"", ANY_TEXT, ""text/plain"");"
85748,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourceFactoryTest.java,61,,"        final DataSource dataSource = DataSourceFactory.fromString(""test.txt"", ""default"", ANY_TEXT, ""text/plain"");"
85749,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourceTest.java,51,,"        try (DataSource dataSource = DataSourceFactory.fromString(""stdin"", ANY_GROUP, ANY_TEXT, Mimetypes.MIME_TEXT_PLAIN)) {"
85750,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourcesSupplierTest.java,44,,"        assertEquals(1, supplier(""pom.xml"", ""*"", NO_EXCLUDE).get().size());"
85751,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourcesSupplierTest.java,60,,"        assertEquals(2, supplier(sources, ""*.*"", null).get().size());"
85752,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourcesTest.java,39,,"    private static final String UNKNOWN = ""unknown"";"
85753,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourcesTest.java,41,,"    private static final String ANY_FILE_NAME = ""pom.xml"";"
85754,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/datasource/DataSourcesTest.java,76,,"            assertEquals(3, dataSources.find(GROUP_PART, ""default"").size());"
85755,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/file/RecursiveFileSupplierTest.java,52,,"        final List<String> sources = Arrays.asList(""pom.xml"", ""README.md"");"
85756,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/mime/MimetypeParserTest.java,38,,"        assertEquals(""text/html"", MimeTypeParser.getMimeType(""text/html""));"
85757,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/parameter/ParameterModelSupplierTest.java,58,,"        assertEquals(""value1"", toMap(map, ""group"").get(""name1""));"
85758,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/parameter/ParameterModelSupplierTest.java,58,,"        assertEquals(""value1"", toMap(map, ""group"").get(""name1""));"
85759,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,35,,"                    ""Book ID"", ""1"","
85760,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,36,,"                    ""Book Name"", ""Computer Architecture"","
85761,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,36,,"                    ""Book Name"", ""Computer Architecture"","
85762,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,37,,"                    ""Category"", ""Computers"","
85763,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,37,,"                    ""Category"", ""Computers"","
85764,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,38,,"                    ""In Stock"", true,"
85765,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,39,,"                    ""Price"", 125.60),"
85766,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,42,,"                    ""Book Name"", ""Asp.Net 4 Blue Book"","
85767,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,43,,"                    ""Category"", ""Programming"","
85768,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,48,,"                    ""Book Name"", ""Popular Science"","
85769,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/table/TableTest.java,49,,"                    ""Category"", ""Science"","
85770,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/template/TemplateTransformationsBuilderTest.java,142,,"        assertEquals(""application.properties"", transformations.get(0).getTemplateSource().getName());"
85771,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/uri/NamedUriStringParserTest.java,33,,"        final NamedUri namedURI = parse(""users.csv"");"
85772,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/uri/NamedUriStringParserTest.java,95,,"        assertEquals(""users"", namedURI.getFile().getName());"
85773,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/uri/NamedUriStringParserTest.java,189,,"        assertEquals(""UTF-16"", namedURI.getParameters().get(""charset""));"
85774,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/uri/NamedUriStringParserTest.java,189,,"        assertEquals(""UTF-16"", namedURI.getParameters().get(""charset""));"
85775,./TargetProjects/freemarker-generator/freemarker-generator-base/src/test/java/org/apache/freemarker/generator/uri/NamedUriStringParserTest.java,217,,"        assertEquals(""google"", namedURI.getName());"
85776,./TargetProjects/freemarker-generator/freemarker-generator-cli/src/test/java/org/apache/freemarker/generator/cli/PicocliTest.java,63,,"        assertEquals(ANY_FILE, parse(""-t"", ANY_TEMPLATE, ""--data-source"", ANY_FILE).outputGeneratorDefinitions.get(0)"
85777,./TargetProjects/freemarker-generator/freemarker-generator-cli/src/test/java/org/apache/freemarker/generator/cli/config/DataModelSupplierTest.java,107,,"        assertEquals(""foo"", toMap(model, ""props"").get(""FOO""));"
85778,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/FreeMarkerMojoTest.java,74,,"        FieldUtils.writeField(mojo, ""freeMarkerVersion"", """", true);"
85779,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/FreeMarkerMojoTest.java,77,,"        FieldUtils.writeField(mojo, ""templateDirectory"", new File(testCaseOutputDir, ""template""), true);"
85780,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/FreeMarkerMojoTest.java,78,,"        FieldUtils.writeField(mojo, ""generatorDirectory"", new File(testCaseOutputDir, ""data""), true);"
85781,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/OutputGeneratorTest.java,73,,"        final File file = new File(DATA_DIR, ""mydir/success-test.txt.json"");"
85782,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/OutputGeneratorTest.java,79,,"        final File templateFile = new File(TEMPLATE_DIR, ""test.ftl"");"
85783,./TargetProjects/freemarker-generator/freemarker-generator-maven-plugin/src/test/java/org/apache/freemarker/generator/maven/OutputGeneratorTest.java,134,,"        builder.addToDataModel(""testVar"", ""testVal"");"
85784,./TargetProjects/freemarker-generator/freemarker-generator-tools/src/test/java/org/apache/freemarker/generator/tools/gson/GsonToolTest.java,44,,"            ""    {\n"" +"
85785,./TargetProjects/freemarker-generator/freemarker-generator-tools/src/test/java/org/apache/freemarker/generator/tools/gson/GsonToolTest.java,47,,"            ""    },\n"" +"
85786,./TargetProjects/freemarker-generator/freemarker-generator-tools/src/test/java/org/apache/freemarker/generator/tools/gson/GsonToolTest.java,90,,"    @SuppressWarnings(""unchecked"")"
85787,./TargetProjects/freemarker-online-tester/src/test/java/org/apache/freemarker/onlinetester/resources/ExecuteApiResourceTest.java,72,,"        assertThat(problemMessage, containsString(""limit""));"
85788,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/APPE.java,84,,"                                        ""APPE"", null, null));"
85789,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/AUTH.java,69,,"                    ""AUTH"", null));"
85790,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/LIST.java,90,,"                        FtpReply.REPLY_450_REQUESTED_FILE_ACTION_NOT_TAKEN, ""LIST"","
85791,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/MDTM.java,64,,"                    ""MDTM"", null));"
85792,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/MFMT.java,70,,"                                    ""MFMT.invalid"", null));"
85793,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/MLSD.java,91,,"                    FtpReply.REPLY_150_FILE_STATUS_OKAY, ""MLSD"", null));"
85794,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/MODE.java,57,,"                    ""MODE"", null));"
85795,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/NLST.java,96,,"                    FtpReply.REPLY_150_FILE_STATUS_OKAY, ""NLST"", null));"
85796,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/PASS.java,84,,"                        FtpReply.REPLY_503_BAD_SEQUENCE_OF_COMMANDS, ""PASS"","
85797,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/PROT.java,72,,"                    ""PROT"", null));"
85798,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/RETR.java,83,,"                                        ""RETR"", null, null));"
85799,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/RNTO.java,68,,"                                        ""RNTO"", null, null, null));"
85800,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/STOR.java,84,,"                                        ""STOR"", null, null));"
85801,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/command/impl/STOU.java,114,,"                        FtpReply.REPLY_550_REQUESTED_ACTION_NOT_TAKEN, ""STOU"","
85802,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/impl/DefaultFtpStatistics.java,337,,"        if (""anonymous"".equals(user.getName())) {"
85803,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/usermanager/impl/DbUserManager.java,616,,"                throw new AuthenticationFailedException(""Authentication failed"");"
85804,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/usermanager/impl/PropertiesUserManager.java,474,,"                throw new AuthenticationFailedException(""Authentication failed"");"
85805,./TargetProjects/ftpserver/core/src/main/java/org/apache/ftpserver/util/BaseProperties.java,68,,"            throw new FtpException(str + "" not found"");"
85806,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/CdTest.java,63,,"        assertEquals(""/dir1"", client.printWorkingDirectory());"
85807,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/FtpMd5Test.java,77,,"        assertEquals(251, client.sendCommand(""MD5 "" + fileName));"
85808,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/IpFilterTest.java,60,,"        filter.add(new Subnet(InetAddress.getByName(""localhost""), 32));"
85809,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/ListTest.java,82,,"        assertEquals(""group"", file.getGroup());"
85810,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/ListTest.java,83,,"        assertEquals(""user"", file.getUser());"
85811,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/ListTest.java,196,,"        assertTrue(FTPReply.isPositiveCompletion(client.sendCommand(""MLST """
85812,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/ListTest.java,199,,"        String[] reply = client.getReplyString().split(""\\r\\n"");"
85813,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/LoginTest.java,169,,"            client1.connect(""localhost"", getListenerPort());"
85814,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/MFMTTest.java,62,,"        assertEquals(501, client.sendCommand(""MFMT""));"
85815,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/StoreTest.java,186,,"        assertTrue(client.storeFile(""foo/bar/"" + TEST_FILENAME,"
85816,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/clienttests/SuspendResumeTest.java,39,,"        client.connect(""localhost"", getListenerPort());"
85817,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/commands/impl/DefaultCommandFactoryTest.java,48,,"        Command command = factory.getCommand(""stor"");"
85818,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/commands/impl/listing/ListArgumentParserTest.java,35,,"        ListArgument arg = ListArgumentParser.parse(""foo"");"
85819,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/commands/impl/listing/ListArgumentParserTest.java,54,,"        assertEquals(""foo*"", arg.getPattern());"
85820,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/commands/impl/listing/ListArgumentTest.java,40,,"        ListArgument arg = new ListArgument(""bar"", ""foo"", OPTIONS);"
85821,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/commands/impl/listing/ListArgumentTest.java,40,,"        ListArgument arg = new ListArgument(""bar"", ""foo"", OPTIONS);"
85822,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/config/spring/FileUserManagerConfigTest.java,46,,"        PropertiesUserManager um = createPropertiesUserManager(""<file-user-manager file=\"""" + USER_FILE_PATH + ""\"" />"");"
85823,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/filesystem/nativefs/impl/FileSystemViewTemplate.java,62,,"        assertEquals(""/dir1"", view.getWorkingDirectory().getAbsolutePath());"
85824,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/filesystem/nativefs/impl/FtpFileTestTemplate.java,40,,"    protected static final String DIR1_PATH = ""/dir1"";"
85825,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/filesystem/nativefs/impl/FtpFileTestTemplate.java,62,,"            fail(""Must throw IllegalArgumentException"");"
85826,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ftpletcontainer/FtpLetContainerTestTemplate.java,81,,"        ftplets.put(""ftplet1"", ftplet1);"
85827,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ftpletcontainer/FtpLetContainerTestTemplate.java,82,,"        ftplets.put(""ftplet2"", ftplet2);"
85828,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ftpletcontainer/FtpLetContainerTestTemplate.java,263,,"                ""DELE""), new DefaultFtpReply(200, ""foo""));"
85829,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ftpletcontainer/FtpLetReturnDisconnectTest.java,98,,"            fail(""Must throw FTPConnectionClosedException"");"
85830,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ftpletcontainer/FtpLetReturnSkipTest.java,92,,"                        FtpReply.REPLY_530_NOT_LOGGED_IN, ""foo""));"
85831,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/impl/FtpRequestImplTest.java,32,,"        DefaultFtpRequest request = new DefaultFtpRequest(""foo"");"
85832,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/impl/FtpRequestImplTest.java,35,,"        assertEquals(""FOO"", request.getCommand());"
85833,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/AliasKeymanagerTest.java,56,,"        assertEquals(""dsakey"", akm.chooseServerAlias(""DSA"", null, null));"
85834,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/AliasKeymanagerTest.java,57,,"        assertEquals(null, akm.chooseServerAlias(""RSA"", null, null));"
85835,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/ExtendedAliasKeymanagerTest.java,54,,"        ExtendedAliasKeyManager akm = new ExtendedAliasKeyManager(km, ""dsakey"");"
85836,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/ExtendedAliasKeymanagerTest.java,56,,"        assertEquals(""dsakey"", akm.chooseServerAlias(""DSA"", null, null));"
85837,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/ExtendedAliasKeymanagerTest.java,57,,"        assertEquals(null, akm.chooseServerAlias(""RSA"", null, null));"
85838,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/ssl/impl/ExtendedAliasKeymanagerTest.java,61,,"        ExtendedAliasKeyManager akm = new ExtendedAliasKeyManager(km, ""rsakey"");"
85839,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/UsernamePasswordAuthenticationTest.java,33,,"                ""user"", ""pass"");"
85840,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/UsernamePasswordAuthenticationTest.java,33,,"                ""user"", ""pass"");"
85841,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/ClearTextPasswordEncryptorTest.java,41,,"        assertTrue(encryptor.matches(""foo"", ""foo""));"
85842,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/PropertiesUserManagerTest.java,50,,"        users.setProperty(""ftpserver.user.user1.homedirectory"", ""home"");"
85843,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,58,,"                .authenticate(new UsernamePasswordAuthentication(""user1"", ""pw1"")));"
85844,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,64,,"                    ""user1"", ""foo""));"
85845,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,65,,"            fail(""Must throw AuthenticationFailedException"");"
85846,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,115,,"        assertTrue(userManager.doesExist(""user2""));"
85847,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,231,,"        user.setName(""newuser"");"
85848,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,232,,"        user.setPassword(""newpw"");"
85849,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,233,,"        user.setHomeDirectory(""newhome"");"
85850,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,262,,"            userManager.authenticate(new UsernamePasswordAuthentication(""newuser"", ""dummy""));"
85851,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/usermanager/impl/UserManagerTestTemplate.java,281,,"        user.setPassword(""newerpw"");"
85852,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,49,,"        props.setProperty(""bool7"", ""foo"");"
85853,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,64,,"            fail(""Must throw FtpException"");"
85854,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,87,,"        props.setProperty(""s1"", ""bar"");"
85855,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,116,,"        props.setProperty(""int3"", ""1.23"");"
85856,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,327,,"        DateFormat format = new SimpleDateFormat(""yyyyMMddHHmmssSSSzzz"");"
85857,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,478,,"        TimeZone tz1 = TimeZone.getTimeZone(""PST"");"
85858,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/BasePropertiesTest.java,483,,"        props.setProperty(""tz1"", ""PST"");"
85859,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,32,,"        RegularExpr expr = new RegularExpr(""foo"");"
85860,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,34,,"        assertFalse(expr.isMatch(""bar""));"
85861,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,93,,"        assertFalse(expr.isMatch(""foobar""));"
85862,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,94,,"        assertTrue(expr.isMatch(""fooxbar""));"
85863,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,117,,"        assertTrue(expr.isMatch(""fooxxbar""));"
85864,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/RegularExprTest.java,125,,"        assertTrue(expr.isMatch(""fooabar""));"
85865,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/SocketAddressEncoderTest.java,66,,"            fail(""Must throw IllegalInetAddressException"");"
85866,./TargetProjects/ftpserver/core/src/test/java/org/apache/ftpserver/util/SocketAddressEncoderTest.java,88,,"            fail(""Must throw IllegalPortException"");"
85867,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/CommonTests.java,82,,"    getFilteredRequest().setAttribute(""foo"", ""bar"");"
85868,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/CommonTests.java,82,,"    getFilteredRequest().setAttribute(""foo"", ""bar"");"
85869,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/CommonTests.java,171,,"      fail(""Session should be invalid and an exception should be thrown"");"
85870,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/CommonTests.java,217,,"      fail(""Exception should not be thrown"");"
85871,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,101,,"    servletHolder.setInitParameter(""test.callback"", ""callback_1"");"
85872,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,101,,"    servletHolder.setInitParameter(""test.callback"", ""callback_1"");"
85873,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,125,,"    request.setMethod(""GET"");"
85874,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,126,,"    request.setURI(""/test/hello"");"
85875,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,127,,"    request.setHeader(""Host"", ""tester"");"
85876,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,127,,"    request.setHeader(""Host"", ""tester"");"
85877,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,128,,"    request.setVersion(""HTTP/1.0"");"
85878,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,231,,"        session.setAttribute(""foo"", output);"
85879,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,255,,"    request.setHeader(""Cookie"", ""JSESSIONID="" + getSessionCookie(cookies).getValue());"
85880,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,255,,"    request.setHeader(""Cookie"", ""JSESSIONID="" + getSessionCookie(cookies).getValue());"
85881,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,275,,"    Callback c_1 = (request, response) -> request.getSession().setAttribute(""foo"", ""bar"");"
85882,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,278,,"    Callback c_2 = (request, response) -> request.getSession().setAttribute(""foo"", ""baz"");"
85883,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,281,,"    tester.setAttribute(""callback_2"", c_2);"
85884,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,303,,"    request.setURI(""/test/request2"");"
85885,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java,357,,"        userCookie = new Cookie(""myCookie"", ""0"");"
85886,./TargetProjects/geode/extensions/geode-modules-session/src/integrationTest/java/org/apache/geode/modules/session/junit/PerTestClassLoaderRunner.java,128,,"  @SuppressWarnings(""unchecked"")"
85887,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,97,,"    servlet.getServletContext().setAttribute(""callback"", callback);"
85888,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,100,,"    final WebRequest req = new GetMethodWebRequest(String.format(""http://localhost:%d/test"", port));"
85889,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,101,,"    req.setParameter(""cmd"", QueryCommand.CALLBACK.name());"
85890,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,102,,"    req.setParameter(""param"", ""callback"");"
85891,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,111,,"    req.setParameter(""value"", value);"
85892,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,127,,"    assertEquals(""JSESSIONID"", response.getNewCookieNames()[0]);"
85893,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,178,,"    final String value = ""Foo"";"
85894,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/AbstractSessionsTest.java,382,,"      response.getWriter().write(""done"");"
85895,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/catalina/AbstractCommitSessionValveIntegrationTest.java,72,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85896,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/catalina/AbstractCommitSessionValveIntegrationTest.java,72,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85897,./TargetProjects/geode/extensions/geode-modules-test/src/main/java/org/apache/geode/modules/session/catalina/AbstractDeltaSessionManagerTest.java,104,,"    final String sessionId = ""sessionId"";"
85898,./TargetProjects/geode/extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java,62,,"    final String name = ""attribute"";"
85899,./TargetProjects/geode/extensions/geode-modules-tomcat7/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession7Test.java,63,,"    final Object value1 = ""value1"";"
85900,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,60,,"    WebRequest req = new GetMethodWebRequest(String.format(""http://localhost:%d/test"", port));"
85901,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,62,,"    req.setParameter(""cmd"", QueryCommand.GET.name());"
85902,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,63,,"    req.setParameter(""param"", ""null"");"
85903,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,67,,"        .isEqualTo(""JSESSIONID"");"
85904,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,82,,"    servlet.getServletContext().setAttribute(""callback"", c);"
85905,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,123,,"    String value = ""Foo"";"
85906,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,129,,"    req.setParameter(""value"", value);"
85907,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/distributedTest/java/org/apache/geode/modules/session/TestSessionsTomcat8Base.java,368,,"      response.getWriter().write(""done"");"
85908,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java,62,,"    final String name = ""attribute"";"
85909,./TargetProjects/geode/extensions/geode-modules-tomcat8/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession8Test.java,63,,"    final Object value1 = ""value1"";"
85910,./TargetProjects/geode/extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java,62,,"    final String name = ""attribute"";"
85911,./TargetProjects/geode/extensions/geode-modules-tomcat9/src/test/java/org/apache/geode/modules/session/catalina/DeltaSession9Test.java,63,,"    final Object value1 = ""value1"";"
85912,./TargetProjects/geode/extensions/geode-modules/src/integrationTest/java/org/apache/geode/modules/session/catalina/JvmRouteBinderValveIntegrationTest.java,67,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85913,./TargetProjects/geode/extensions/geode-modules/src/integrationTest/java/org/apache/geode/modules/session/catalina/JvmRouteBinderValveIntegrationTest.java,67,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85914,./TargetProjects/geode/extensions/geode-modules/src/integrationTest/java/org/apache/geode/modules/session/catalina/callback/LocalSessionCacheWriterIntegrationTest.java,77,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85915,./TargetProjects/geode/extensions/geode-modules/src/integrationTest/java/org/apache/geode/modules/session/catalina/callback/LocalSessionCacheWriterIntegrationTest.java,77,,"  @Parameters({""REPLICATE"", ""PARTITION""})"
85916,./TargetProjects/geode/extensions/geode-modules/src/integrationTest/java/org/apache/geode/modules/session/catalina/callback/LocalSessionCacheWriterIntegrationTest.java,106,,"        .isInstanceOf(RuntimeException.class).hasMessage(""Mock Exception"");"
85917,./TargetProjects/geode/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/bootstrap/AbstractCache.java,153,,"      if (System.getProperty(""catalina.base"") != null) {"
85918,./TargetProjects/geode/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/bootstrap/AbstractCache.java,261,,"      } else if (System.getProperty(""weblogic.Name"") != null) {"
85919,./TargetProjects/geode/extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/AbstractCacheLifecycleListener.java,41,,"  @SuppressWarnings(""unused"")"
85920,./TargetProjects/geode/extensions/geode-modules/src/main/java/org/apache/geode/modules/util/RegionHelper.java,178,,"        .append(rebalanceInfo.getTime()).append("" ms"")"
85921,./TargetProjects/geode/geode-apis-compatible-with-redis/src/commonTest/java/org/apache/geode/test/dunit/rules/RedisClusterStartupRule.java,65,,"        .withSystemProperty(""enable-unsupported-commands"", ""true""));"
85922,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/GeodeRedisServerStartupDUnitTest.java,54,,"        .withProperty(REDIS_BIND_ADDRESS, ""localhost"")"
85923,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/GeodeRedisServerStartupDUnitTest.java,55,,"        .withProperty(REDIS_ENABLED, ""true""));"
85924,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java,83,,"    String baseValue = ""value-"";"
85925,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java,115,,"    Map<String, String> testMap = makeHashMap(ITERATION_COUNT, ""field-"", ""value-"");"
85926,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/PartitionedRegionStatsUpdateTest.java,77,,"    jedis.set(STRING_KEY, ""value"");"
85927,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/MovedDUnitTest.java,105,,"      String key = ""key-"" + i;"
85928,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HExistsDUnitTest.java,80,,"    Map<String, String> testMap = makeHashMap(HASH_SIZE, ""field-"", ""value-"");"
85929,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HExistsDUnitTest.java,80,,"    Map<String, String> testMap = makeHashMap(HASH_SIZE, ""field-"", ""value-"");"
85930,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HKeysDUnitTest.java,85,,"    Map<String, String> testMap = makeHashMap(HASH_SIZE, ""field-"", ""value-"");"
85931,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HKeysDUnitTest.java,85,,"    Map<String, String> testMap = makeHashMap(HASH_SIZE, ""field-"", ""value-"");"
85932,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HMgetDUnitTest.java,78,,"    Map<String, String> testMap = makeHashMap(HASH_SIZE, ""field-"", ""value-"");"
85933,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HMsetDUnitTest.java,81,,"    String key = ""key"";"
85934,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HMsetDUnitTest.java,98,,"    Map<String, String> testMap1 = makeHashMap(HASH_SIZE, ""field1-"", ""value1-"");"
85935,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HMsetDUnitTest.java,98,,"    Map<String, String> testMap1 = makeHashMap(HASH_SIZE, ""field1-"", ""value1-"");"
85936,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HdelDUnitTest.java,99,,"        makeHashMap(HASH_SIZE, ""field"", ""value"");"
85937,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HdelDUnitTest.java,99,,"        makeHashMap(HASH_SIZE, ""field"", ""value"");"
85938,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HsetDUnitTest.java,81,,"    String key = ""key"";"
85939,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HsetDUnitTest.java,100,,"    Map<String, String> testMap1 = makeHashMap(HASH_SIZE, ""field1-"", ""value1-"");"
85940,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/hash/HsetDUnitTest.java,100,,"    Map<String, String> testMap1 = makeHashMap(HASH_SIZE, ""field1-"", ""value1-"");"
85941,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/key/ExpireDUnitTest.java,74,,"    String key = ""key"";"
85942,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/key/ExpireDUnitTest.java,76,,"    jedis.sadd(key, ""value"");"
85943,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/pubsub/PubSubDUnitTest.java,217,,"    assertThat(latch.await(30, TimeUnit.SECONDS)).as(""channel subscription was not received"")"
85944,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/pubsub/PubSubDUnitTest.java,220,,"    Long result = publisher1.publish(CHANNEL_NAME, ""hello"");"
85945,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/pubsub/PubSubDUnitTest.java,224,,"    Long resultFromSecondMessage = publisher1.publish(CHANNEL_NAME, ""hello again"");"
85946,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/pubsub/PubSubDUnitTest.java,362,,"      Jedis publisher = new Jedis(""localhost"", ports[i % 2]);"
85947,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/set/SremDUnitTest.java,84,,"    List<String> members = makeMemberList(SET_SIZE, ""member1-"");"
85948,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/string/StringsDUnitTest.java,86,,"    List<String> keys = makeStringList(LIST_SIZE, ""key1-"");"
85949,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/string/StringsDUnitTest.java,87,,"    List<String> values = makeStringList(LIST_SIZE, ""values1-"");"
85950,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/internal/executor/string/StringsDUnitTest.java,218,,"      jedisCluster.set(""key-"" + i, ""value-"" + i);"
85951,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/session/RedisSessionDUnitTest.java,46,,"    String sessionCookie = createNewSessionWithNote(APP1, ""note1"");"
85952,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/session/RedisSessionDUnitTest.java,99,,"    String sessionCookie = createNewSessionWithNote(APP1, ""noteFromClient1"");"
85953,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/session/RedisSessionDUnitTest.java,108,,"    String sessionCookie = createNewSessionWithNote(APP2, ""noteFromClient2"");"
85954,./TargetProjects/geode/geode-apis-compatible-with-redis/src/distributedTest/java/org/apache/geode/redis/session/SessionExpirationDUnitTest.java,53,,"    String sessionCookie = createNewSessionWithNote(APP1, ""note1"");"
85955,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/AbstractGlobPatternIntegrationTest.java,47,,"    jedis.set(""ble"", ""value"");"
85956,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/AbstractGlobPatternIntegrationTest.java,76,,"    jedis.set(""such"", ""value"");"
85957,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/AbstractGlobPatternIntegrationTest.java,184,,"    jedis.set(""kermit"", ""value"");"
85958,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/common/UnsupportedCommandsIntegrationTest.java,54,,"    jedis.set(""key"", ""value"");"
85959,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/connection/AuthIntegrationTest.java,64,,"    server = new GeodeRedisServer(""localhost"", port, (InternalCache) cache);"
85960,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/connection/AuthIntegrationTest.java,118,,"    assertThatThrownBy(() -> jedis.set(""foo"", ""bar""))"
85961,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/connection/AuthIntegrationTest.java,118,,"    assertThatThrownBy(() -> jedis.set(""foo"", ""bar""))"
85962,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,78,,"    jedis.hset(""key"", ""b"", ""1"");"
85963,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,85,,"  @SuppressWarnings(""unchecked"")"
85964,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,122,,"        () -> jedis.sendCommand(""a"", Protocol.Command.HSCAN, ""a"", ""0"", ""COUNT"", ""MATCH""))"
85965,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,122,,"        () -> jedis.sendCommand(""a"", Protocol.Command.HSCAN, ""a"", ""0"", ""COUNT"", ""MATCH""))"
85966,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,205,,"    entryMap.put(""1"", ""yellow"");"
85967,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,206,,"    entryMap.put(""2"", ""green"");"
85968,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,207,,"    entryMap.put(""3"", ""orange"");"
85969,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,208,,"    jedis.hmset(""colors"", entryMap);"
85970,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,273,,"    entryMap.put(""3"", ""grey"");"
85971,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHScanIntegrationTest.java,436,,"    data.put(""field_3"", ""grey"");"
85972,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,72,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.HMSET, ""key""))"
85973,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,113,,"    animalMap.put(""chicken"", ""eggs"");"
85974,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,115,,"    jedis.set(""farm"", ""chicken"");"
85975,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,118,,"        .hasMessageContaining(""WRONGTYPE Operation against a key holding the wrong kind of value"");"
85976,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,120,,"    jedis.sadd(""zoo"", ""elephant"");"
85977,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,222,,"        .hasMessage(""WRONGTYPE "" + RedisConstants.ERROR_WRONG_TYPE);"
85978,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,267,,"    jedis.set(""tractor"", ""John Deere"");"
85979,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,267,,"    jedis.set(""tractor"", ""John Deere"");"
85980,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,330,,"    jedis.hset(""key"", ""field"", ""value"");"
85981,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,330,,"    jedis.hset(""key"", ""field"", ""value"");"
85982,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,497,,"    String field1 = ""field_1"";"
85983,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,498,,"    String field2 = ""field_2"";"
85984,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHashesIntegrationTest.java,763,,"    String key1 = ""HSET1"";"
85985,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHincrByFloatIntegrationTest.java,63,,"    jedis.hset(""key"", ""number"", ""1.4"");"
85986,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHincrByFloatIntegrationTest.java,63,,"    jedis.hset(""key"", ""number"", ""1.4"");"
85987,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHincrByFloatIntegrationTest.java,67,,"            .hasMessage(""ERR increment would produce NaN or Infinity"");"
85988,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/hash/AbstractHincrByFloatIntegrationTest.java,102,,"    String field = ""field"";"
85989,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractDumpRestoreIntegrationTest.java,107,,"    lettuce.set(""restored"", ""already exists"");"
85990,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractDumpRestoreIntegrationTest.java,107,,"    lettuce.set(""restored"", ""already exists"");"
85991,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractDumpRestoreIntegrationTest.java,233,,"      lettuce.sadd(""set"", ""member-"" + i);"
85992,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExistsIntegrationTest.java,163,,"    new ConcurrentLoopingThreads(iterationCount, (i) -> jedis.set(""key"" + i, ""value"" + i)).run();"
85993,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExpireIntegrationTest.java,55,,"    assertThatThrownBy(() -> jedis.sendCommand(""key"", Protocol.Command.EXPIRE, ""key"", ""notInteger""))"
85994,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExpireIntegrationTest.java,63,,"    String value = ""value"";"
85995,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExpireIntegrationTest.java,181,,"    String key2 = ""{user1}key2"";"
85996,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractExpireIntegrationTest.java,184,,"    String value2 = ""value2"";"
85997,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractPTTLIntegrationTest.java,53,,"    jedis.set(""orange"", ""crush"");"
85998,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractPexpireIntegrationTest.java,58,,"        () -> jedis.sendCommand(""key"", Protocol.Command.PEXPIRE, ""key"", ""notInteger""))"
85999,./TargetProjects/geode/geode-apis-compatible-with-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/key/AbstractPexpireIntegrationTest.java,66,,"    String value = ""value"";"
