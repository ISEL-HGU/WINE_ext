166000,./TargetProjects/metamodel/jdbc/src/main/java/org/apache/metamodel/jdbc/dialects/PostgresqlQueryRewriter.java,57,,"            case ""jsonb"":"
166001,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/CloseableConnectionWrapper.java,274,,"		throw new UnsupportedOperationException(""Jdbc 4.1 methods are not wrapped"");"
166002,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/DerbyTest.java,82,,"        Connection conn = DriverManager.getConnection(""jdbc:derby:target/temp_derby;create=true"");"
166003,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/DerbyTest.java,120,,"        JdbcTestTemplates.createInsertAndUpdateDateTypes(dc, schema, ""test_table"");"
166004,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/DerbyTest.java,293,,"            conn.createStatement().execute(""DROP TABLE test_table"");"
166005,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/DerbyTest.java,312,,"                        .withColumn(""name"").ofSize(255).ofType(ColumnType.VARCHAR).withColumn(""age"")"
166006,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,98,,"        dc.executeUpdate(new CreateTable(schema, ""test_table"").withColumn(""id"").ofType(ColumnType.VARCHAR));"
166007,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,101,,"        dc.executeUpdate(new InsertInto(table).value(0, ""foo""));"
166008,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,102,,"        dc.executeUpdate(new InsertInto(table).value(0, ""bar""));"
166009,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,108,,"        assertEquals(""Row[values=[2]]"", ds.getRow().toString());"
166010,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,156,,"        assertEquals(""[ID, NAME, AGE]"", Arrays.toString(table.getColumnNames().toArray()));"
166011,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,287,,"                        .withColumn(""name"").ofSize(255).ofType(ColumnType.VARCHAR).withColumn(""age"").ofType("
166012,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,287,,"                        .withColumn(""name"").ofSize(255).ofType(ColumnType.VARCHAR).withColumn(""age"").ofType("
166013,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/H2databaseTest.java,320,,"                cb.insertInto(writtenTableRef.get()).value(""age"", 14).value(""name"", ""hello"").value(""id"", 1).execute();"
166014,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,145,,"        Table productsTable = schema.getTableByName(""PRODUCTS"");"
166015,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,170,,"        DataSet ds = dc.query().from(productsTable).select(""PRODUCTCODE"").limit(2).execute();"
166016,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,292,,"        q = dc.query().from(table).selectCount().where(""name"").isEquals(""m'jello"").toQuery();"
166017,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,352,,"                Table table = cb.createTable(schema, ""my_table"").withColumn(""id"").ofType(ColumnType.INTEGER)"
166018,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,354,,"                        .ofSize(10).withColumn(""foo"").ofType(ColumnType.BOOLEAN).nullable(true).withColumn(""bar"")"
166019,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/HsqldbTest.java,354,,"                        .ofSize(10).withColumn(""foo"").ofType(ColumnType.BOOLEAN).nullable(true).withColumn(""bar"")"
166020,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcDataContextTest.java,118,,"        q.from(schema.getTableByName(""CUSTOMERS"")).select(new SelectItem(""COUNT(*)"", null));"
166021,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcDataContextTest.java,230,,"        final DataSet dataSet = dataContext.query().from(""customers"").select(""creditlimit"")"
166022,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcDataContextTest.java,411,,"                        + ""columnSize=50], """
166023,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcDeleteBuilderTest.java,30,,"        Table table = dataContext.getTableByQualifiedLabel(""PUBLIC.EMPLOYEES"");"
166024,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,71,,"        if (dc.getTableByQualifiedLabel(""test_table"") != null) {"
166025,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,81,,"                            .ofType(ColumnType.FLOAT).withColumn(""code"").ofType(ColumnType.VARCHAR).ofSize(10);"
166026,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,84,,"                    cb.insertInto(table).value(""id"", 1.0).value(""code"", ""C01"").execute();"
166027,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,85,,"                    cb.insertInto(table).value(""id"", 2.0).value(""code"", ""C02"").execute();"
166028,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,323,,"                        .withColumn(""birthdate1"").ofType(ColumnType.DATE).withColumn(""birthdate2"")"
166029,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,323,,"                        .withColumn(""birthdate1"").ofType(ColumnType.DATE).withColumn(""birthdate2"")"
166030,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,327,,"                cb.insertInto(table).value(""id"", 2).value(""birthdate1"", ""2011-12-21"")"
166031,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,399,,"                        .ofType(ColumnType.INTEGER).withColumn(""birthdate"").ofType(ColumnType.DATE)"
166032,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,400,,"                        .withColumn(""wakemeup"").ofType(ColumnType.TIME).execute();"
166033,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,443,,"            assertTrue(""Actual value was: "" + ds.getRow().getValue(2),"
166034,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,525,,"                Table table = callback.createTable(schema, ""clob_test_table"").withColumn(""id"")"
166035,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,526,,"                        .ofType(ColumnType.INTEGER).asPrimaryKey().withColumn(""foo"").ofType(ColumnType.CLOB).execute();"
166036,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,580,,"        dataContext.executeUpdate(new CreateTable(defaultSchema, testTableName).withColumn(""mykey"")"
166037,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,581,,"                .ofType(ColumnType.INTEGER).nullable(false).asPrimaryKey().withColumn(""name"")"
166038,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,621,,"        dataContext.executeUpdate(new CreateTable(defaultSchema, testTableName).withColumn(""mykey1"")"
166039,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,622,,"                .ofType(ColumnType.INTEGER).nullable(false).asPrimaryKey().withColumn(""mykey2"")"
166040,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,722,,"            throw new UnsupportedOperationException(""Unsupported database precision: "" + databasePrecision);"
166041,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcTestTemplates.java,748,,"                tableBuilder.withColumn(""insertiontime"").ofType(ColumnType.TIMESTAMP);"
166042,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUpdateBuilderTest.java,30,,"        Table table = dataContext.getTableByQualifiedLabel(""PUBLIC.EMPLOYEES"");"
166043,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUpdateBuilderTest.java,35,,"        assertEquals(""[EMPLOYEENUMBER, LASTNAME, FIRSTNAME, EXTENSION, EMAIL, OFFICECODE, REPORTSTO, JOBTITLE]"","
166044,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUpdateBuilderTest.java,38,,"        updateBuilder.value(""LASTNAME"", ""foo"").value(""firstname"", ""BAR"");"
166045,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUpdateBuilderTest.java,38,,"        updateBuilder.value(""LASTNAME"", ""foo"").value(""firstname"", ""BAR"");"
166046,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUtilsTest.java,39,,"        assertTrue(JdbcUtils.wrapException(new SQLException(""msg""), ""foo"","
166047,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/JdbcUtilsTest.java,39,,"        assertTrue(JdbcUtils.wrapException(new SQLException(""msg""), ""foo"","
166048,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/MultiJDBCDataSetTest.java,69,,"        emp_dcon.executeUpdate(new CreateTable(emp_dcon.getDefaultSchema(), ""employee"").withColumn(""id"").ofType("
166049,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/MultiJDBCDataSetTest.java,70,,"                ColumnType.INTEGER).asPrimaryKey().withColumn(""name"").ofType(ColumnType.VARCHAR).ofSize(200).withColumn("
166050,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/MultiJDBCDataSetTest.java,71,,"                        ""dep_id"").ofType(ColumnType.INTEGER));"
166051,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/MultiJDBCDataSetTest.java,78,,"        dep_dcon.executeUpdate(new CreateTable(dep_dcon.getDefaultSchema(), ""department"").withColumn(""id"").ofType("
166052,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/SqliteTest.java,123,,"        Table wikiTable = schema.getTableByName(""WIKI"");"
166053,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/SqliteTest.java,229,,"                        .asPrimaryKey().withColumn(""birthdate"").ofType(ColumnType.DATE).execute();"
166054,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/dialects/VersionParserTest.java,26,,"        String version = VersionParser.getVersion(""10.11.0"");"
166055,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/HiveIntegrationTest.java,54,,"        logger.info(""SQL updated fired (return {}): {}"", st.executeUpdate(createFirstSql), createFirstSql);"
166056,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/HiveIntegrationTest.java,126,,"        dataContext.executeUpdate(new CreateTable(schema, tableName).withColumn(""foo"").ofType(ColumnType.STRING)"
166057,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/HiveIntegrationTest.java,127,,"                .withColumn(""bar"").ofType(ColumnType.INTEGER).withColumn(""baz"").ofType(ColumnType.VARCHAR));"
166058,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/HiveIntegrationTest.java,127,,"                .withColumn(""bar"").ofType(ColumnType.INTEGER).withColumn(""baz"").ofType(ColumnType.VARCHAR));"
166059,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/MysqlTest.java,149,,"        assertEquals(""sakila"", schema.getName());"
166060,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/MysqlTest.java,202,,"        Table table = sakila.getTableByName(""film"");"
166061,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/OracleTest.java,171,,"        ResultSet rs = getConnection().getMetaData().getImportedKeys(null, ""HR"", ""EMPLOYEES"");"
166062,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/OracleTest.java,188,,"        rs = getConnection().getMetaData().getImportedKeys(null, ""HR"", ""DEPARTMENTS"");"
166063,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/OracleTest.java,303,,"                context.query().from(""HR"", ""EMPLOYEES"").select(""EMPLOYEE_ID"").maxRows(10).execute().toRows();"
166064,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,112,,"        if (dc.getTableByQualifiedLabel(""test_table"") != null) {"
166065,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,124,,"                Table table = callback.createTable(dc.getDefaultSchema(), ""test_table"").withColumn(""foo"").ofType("
166066,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,125,,"                        ColumnType.INTEGER).withColumn(""bar"").ofType(ColumnType.VARCHAR).execute();"
166067,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,212,,"                Table table = cb.createTable(schema, ""my_table"").withColumn(""id"").asPrimaryKey().ofType("
166068,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,213,,"                        ColumnType.INTEGER).ofNativeType(""SERIAL"").nullable(false).withColumn(""name"").ofType("
166069,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,213,,"                        ColumnType.INTEGER).ofNativeType(""SERIAL"").nullable(false).withColumn(""name"").ofType("
166070,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,358,,"                final Table table = cb.createTable(schema, ""json_datatypes_table"").withColumn(""id"").ofType(ColumnType.INTEGER)"
166071,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,410,,"                        .ofNativeType(""SERIAL"").nullable(false).withColumn(""some_bool"").ofType(ColumnType.BOOLEAN)"
166072,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,454,,"                        .ofNativeType(""SERIAL"").nullable(false).withColumn(""some_double"").ofType(ColumnType.DOUBLE)"
166073,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,626,,"                            .ofNativeType(""SERIAL"").nullable(false).withColumn(""person name"").ofSize(255).withColumn("
166074,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,627,,"                                    ""age"").ofType(ColumnType.INTEGER).execute();"
166075,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,628,,"                    assertEquals(""[id, person name, age]"", Arrays.toString(table.getColumnNames().toArray()));"
166076,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,630,,"                            ""Column[name=id,columnNumber=0,type=INTEGER,nullable=false,nativeType=serial,columnSize=10]"","
166077,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,633,,"                            ""Column[name=person name,columnNumber=1,type=VARCHAR,nullable=true,nativeType=varchar,columnSize=255]"","
166078,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,636,,"                            ""Column[name=age,columnNumber=2,type=INTEGER,nullable=true,nativeType=int4,columnSize=10]"","
166079,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,639,,"                    cb.insertInto(table).value(""person name"", ""John Doe"").value(""age"", 42).execute();"
166080,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/PostgresqlTest.java,802,,"        assertEquals(""public"", schema.getName());"
166081,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/SQLServerJtdsDriverTest.java,132,,"        final Schema schema = dc.getSchemaByName(""Person"");"
166082,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/SQLServerJtdsDriverTest.java,162,,"                        .ofType(ColumnType.INTEGER).withColumn(""birthdate"").ofType(ColumnType.DATE).execute();"
166083,./TargetProjects/metamodel/jdbc/src/test/java/org/apache/metamodel/jdbc/integrationtests/SQLServerJtdsDriverTest.java,335,,"                context.query().from(""Person"", ""Person"").select(""BusinessEntityID"").maxRows(10).execute().toRows();"
166084,./TargetProjects/metamodel/json/src/test/java/org/apache/metamodel/json/JsonDataContextTest.java,112,,"            assertEquals(""Row[values=[John]]"", ds.getRow().toString());"
166085,./TargetProjects/metamodel/kafka/src/test/java/org/apache/metamodel/kafka/KafkaDataContextTest.java,64,,"        EasyMock.expect(consumerFactory.createConsumer(""myTopic"", String.class, String.class)).andReturn(consumer);"
166086,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,86,,"        dbRow.append(""name"", new BasicDBObject().append(""first"", ""John"").append(""last"", ""Doe""));"
166087,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,86,,"        dbRow.append(""name"", new BasicDBObject().append(""first"", ""John"").append(""last"", ""Doe""));"
166088,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,86,,"        dbRow.append(""name"", new BasicDBObject().append(""first"", ""John"").append(""last"", ""Doe""));"
166089,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,87,,"        dbRow.append(""gender"", ""MALE"");"
166090,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,88,,"        dbRow.append(""addresses"", list);"
166091,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,126,,"        dbRow1.put(""category"", ""gen_id"");"
166092,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,126,,"        dbRow1.put(""category"", ""gen_id"");"
166093,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,129,,"        final String autoGenID1 = dbRow1.get(""_id"").toString();"
166094,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,264,,"                dbRow.put(""foo"", ""bar"");"
166095,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,264,,"                dbRow.put(""foo"", ""bar"");"
166096,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,266,,"                dbRow.put(""foo"", ""baz"");"
166097,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,273,,"            dbRow.put(""list"", Arrays.<Object> asList(""l1"", ""l2"", ""l3"", i));"
166098,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataContextTest.java,493,,"                Table table = callback.createTable(defaultSchema, ""some_entries"").withColumn(""foo"").withColumn(""bar"")"
166099,./TargetProjects/metamodel/mongodb/mongo2/src/test/java/org/apache/metamodel/mongodb/mongo2/MongoDbDataCopyer.java,72,,"        new MongoDbDataCopyer(db, ""orders"", sourceDataContext, ""APP"", ""orders"").copy();"
166100,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,83,,"        dbRow.append(""name"", new Document().append(""first"", ""John"").append(""last"", ""Doe""));"
166101,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,83,,"        dbRow.append(""name"", new Document().append(""first"", ""John"").append(""last"", ""Doe""));"
166102,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,83,,"        dbRow.append(""name"", new Document().append(""first"", ""John"").append(""last"", ""Doe""));"
166103,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,83,,"        dbRow.append(""name"", new Document().append(""first"", ""John"").append(""last"", ""Doe""));"
166104,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,83,,"        dbRow.append(""name"", new Document().append(""first"", ""John"").append(""last"", ""Doe""));"
166105,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,84,,"        dbRow.append(""gender"", ""MALE"");"
166106,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,85,,"        dbRow.append(""addresses"", list);"
166107,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,119,,"        dbRow1.put(""category"", ""gen_id"");"
166108,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,119,,"        dbRow1.put(""category"", ""gen_id"");"
166109,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,122,,"        final String autoGenID1 = dbRow1.get(""_id"").toString();"
166110,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,312,,"                dbRow.put(""foo"", ""bar"");"
166111,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,312,,"                dbRow.put(""foo"", ""bar"");"
166112,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,314,,"                dbRow.put(""foo"", ""baz"");"
166113,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataContextTest.java,321,,"            dbRow.put(""list"", Arrays.<Object> asList(""l1"", ""l2"", ""l3"", i));"
166114,./TargetProjects/metamodel/mongodb/mongo3/src/test/java/org/apache/metamodel/mongodb/mongo3/MongoDbDataCopyer.java,73,,"        new MongoDbDataCopyer(mongoDb, ""orders"", sourceDataContext, ""APP"", ""orders"").copy();"
166115,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,84,,"        assertTrue(tableNames.contains(""JUnitLabel""));"
166116,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,89,,"        assertTrue(columnNames.contains(""property1""));"
166117,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,101,,"        requestWrapper.executeCypherQuery(""CREATE (n:JUnitPerson { name: 'Tomasz', age: 26})"");"
166118,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,102,,"        requestWrapper.executeCypherQuery(""CREATE (n:JUnitPerson { name: 'Philomeena', age: 18})"");"
166119,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,103,,"        requestWrapper.executeCypherQuery(""CREATE (n:JUnitBook { title: 'Introduction to algorithms'})"");"
166120,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,105,,"        requestWrapper.executeCypherQuery(""MATCH (a:JUnitPerson),(b:JUnitBook)"""
166121,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,106,,"                + ""WHERE a.name = 'Tomasz' AND b.title = 'Introduction to algorithms'"""
166122,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,107,,"                + ""CREATE (a)-[r:HAS_READ { rating : 5 }]->(b)"");"
166123,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,109,,"                + ""WHERE a.name = 'Philomeena' AND b.title = 'Introduction to algorithms'"""
166124,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,110,,"                + ""CREATE (a)-[r:HAS_BROWSED]->(b)"");"
166125,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,128,,"        assertTrue(tableNames.contains(""JUnitPerson""));"
166126,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,210,,"        requestWrapper.executeCypherQuery(""CREATE (n:JUnitPerson { name: 'Helena', age: 100})"");"
166127,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,220,,"                + "" WHERE n.title = 'Introduction to algorithms'"" + "" RETURN id(n);"");"
166128,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,221,,"        String bookNodeId = new JSONObject(bookNodeIdJSONObject).getJSONArray(""results"").getJSONObject(0)"
166129,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,222,,"                .getJSONArray(""data"").getJSONObject(0).getJSONArray(""row"").optString(0);"
166130,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,222,,"                .getJSONArray(""data"").getJSONObject(0).getJSONArray(""row"").optString(0);"
166131,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,227,,"            CompiledQuery query = strategy.query().from(""JUnitPerson"").select(""name"", ""rel_HAS_READ"").compile();"
166132,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,248,,"            CompiledQuery query = strategy.query().from(""JUnitPerson"").select(""rel_HAS_READ#rating"").compile();"
166133,./TargetProjects/metamodel/neo4j/src/test/java/org/apache/metamodel/neo4j/Neo4jDataContextTest.java,328,,"            validateRow(rows.get(0), helenaNodeId, ""Helena"", ""100"", ""null"", ""null"", ""null"");"
166134,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,55,,"        record1.put(""name"", ""Bruce Springsteen"");"
166135,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,82,,"        final SimpleTableDef tableDef = new SimpleTableDef(""bar"", new String[] { ""col1"", ""col2"", ""col3"" },"
166136,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,82,,"        final SimpleTableDef tableDef = new SimpleTableDef(""bar"", new String[] { ""col1"", ""col2"", ""col3"" },"
166137,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,82,,"        final SimpleTableDef tableDef = new SimpleTableDef(""bar"", new String[] { ""col1"", ""col2"", ""col3"" },"
166138,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,82,,"        final SimpleTableDef tableDef = new SimpleTableDef(""bar"", new String[] { ""col1"", ""col2"", ""col3"" },"
166139,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,120,,"        final PojoDataContext dc = new PojoDataContext(""foo"", tableDataProvider);"
166140,./TargetProjects/metamodel/pojo/src/test/java/org/apache/metamodel/pojo/PojoDataContextTest.java,173,,"        assertEquals(""Row[values=[2]]"", ds.getRow().toString());"
166141,./TargetProjects/metamodel/salesforce/src/test/java/org/apache/metamodel/salesforce/SalesforceDataContextTest.java,54,,"        List<Column> timeColumns = dc.getDefaultSchema().getTableByName(""Contact"").getTimeBasedColumns();"
166142,./TargetProjects/metamodel/salesforce/src/test/java/org/apache/metamodel/salesforce/SalesforceDataContextTest.java,124,,"        Table accountTable = schema.getTableByName(""Account"");"
166143,./TargetProjects/metamodel/salesforce/src/test/java/org/apache/metamodel/salesforce/SalesforceDataContextTest.java,131,,"        Column nameColumn = accountTable.getColumnByName(""Name"");"
166144,./TargetProjects/metamodel/salesforce/src/test/java/org/apache/metamodel/salesforce/SalesforceDataContextTest.java,236,,"                callback.insertInto(tableName).value(""name"", insertedName).execute();"
166145,./TargetProjects/metamodel/sugarcrm/src/test/java/org/apache/metamodel/sugarcrm/SugarCrmDataContextTest.java,56,,"        dataContext = new SugarCrmDataContext(BASE_URL, getUsername(), getPassword(), ""Test"");"
166146,./TargetProjects/metamodel/xml/src/test/java/org/apache/metamodel/xml/XmlDomDataContextTest.java,54,,"            assertEquals(""xml_input_eobjects.xml"", dataContext.getDefaultSchema().getName());"
166147,./TargetProjects/metamodel/xml/src/test/java/org/apache/metamodel/xml/XmlDomDataContextTest.java,87,,"                ""[Column[name=id,columnNumber=0,type=INTEGER,nullable=false,nativeType=Auto-generated primary key,columnSize=null], """
166148,./TargetProjects/metamodel-membrane/core/src/main/java/org/apache/metamodel/membrane/controllers/DataSourceController.java,69,,"            @PathVariable(""datasource"") String dataSourceId,"
166149,./TargetProjects/metamodel-membrane/core/src/main/java/org/apache/metamodel/membrane/controllers/TenantController.java,56,,"    public GetTenantResponse getTenant(@PathVariable(""tenant"") String tenantName) {"
166150,./TargetProjects/metamodel-membrane/core/src/test/java/org/apache/metamodel/membrane/controllers/DataSourceControllerTest.java,52,,"        final GetDatasourceResponse resp = dataSourceController.put(tenant, ""ds1"", false, dataSourceDefinition);"
166151,./TargetProjects/metamodel-membrane/core/src/test/java/org/apache/metamodel/membrane/controllers/TenantInteractionScenarioTest.java,72,,"            assertEquals(""tenant"", map.get(""type""));"
166152,./TargetProjects/metamodel-membrane/core/src/test/java/org/apache/metamodel/membrane/controllers/TenantInteractionScenarioTest.java,73,,"            assertEquals(""tenant1"", map.get(""name""));"
166153,./TargetProjects/metron/metron-analytics/metron-maas-common/src/test/java/org/apache/metron/maas/discovery/ServiceDiscoveryIntegrationTest.java,90,,"    registerService(""casey"", ""3.14159"", containerId);"
166154,./TargetProjects/metron/metron-analytics/metron-maas-common/src/test/java/org/apache/metron/maas/discovery/ServiceDiscoveryIntegrationTest.java,90,,"    registerService(""casey"", ""3.14159"", containerId);"
166155,./TargetProjects/metron/metron-analytics/metron-maas-common/src/test/java/org/apache/metron/maas/discovery/ServiceDiscoveryIntegrationTest.java,93,,"    registerService(""casey"", ""3.1416"", containerId);"
166156,./TargetProjects/metron/metron-analytics/metron-maas-service/src/main/java/org/apache/metron/maas/service/ApplicationMaster.java,383,,"              + "" not set in the environment"");"
166157,./TargetProjects/metron/metron-analytics/metron-maas-service/src/test/java/org/apache/metron/maas/service/MaasIntegrationTest.java,210,,"                      ""--name"", ""dummy"","
166158,./TargetProjects/metron/metron-analytics/metron-maas-service/src/test/java/org/apache/metron/maas/service/MaasIntegrationTest.java,211,,"                      ""--version"", ""1.0"","
166159,./TargetProjects/metron/metron-analytics/metron-maas-service/src/test/java/org/apache/metron/maas/service/StellarMaaSIntegrationTest.java,76,,"      endpoint.setName(""dga"");"
166160,./TargetProjects/metron/metron-analytics/metron-maas-service/src/test/java/org/apache/metron/maas/service/StellarMaaSIntegrationTest.java,146,,"      Object result = run(stellar, ImmutableMap.of(""host"", ""badguy.com""), context);"
166161,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/HBaseProfilerClientTest.java,89,,"    final String profile = ""profile1"";"
166162,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/HBaseProfilerClientTest.java,90,,"    final String entity = ""entity1"";"
166163,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/HBaseProfilerClientTest.java,101,,"    profileWriter.write(prototype, count, Arrays.asList(""weekdays""), val -> expectedValue);"
166164,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/HBaseProfilerClientTest.java,102,,"    profileWriter.write(prototype, count, Arrays.asList(""weekends""), val -> 0);"
166165,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/GetProfileTest.java,170,,"            .withProfileName(""profile1"")"
166166,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/GetProfileTest.java,171,,"            .withEntity(""entity1"")"
166167,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/GetProfileTest.java,177,,"    @SuppressWarnings(""unchecked"")"
166168,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/GetProfileTest.java,205,,"    state.put(""groups"", group);"
166169,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/GetProfileTest.java,379,,"    String overrides = ""{'profiler.client.period.duration' : '"" + periodDuration + ""', """
166170,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/VerboseProfileTest.java,109,,"            .withProfileName(""profile1"")"
166171,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/stellar/VerboseProfileTest.java,110,,"            .withEntity(""entity1"")"
166172,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/window/WindowProcessorTest.java,195,,"    SimpleDateFormat sdf = new SimpleDateFormat(""yyyy/MM/dd HH:mm"");"
166173,./TargetProjects/metron/metron-analytics/metron-profiler-client/src/test/java/org/apache/metron/profiler/client/window/WindowProcessorTest.java,196,,"    Date now = sdf.parse(""2017/12/26 12:00"");"
166174,./TargetProjects/metron/metron-analytics/metron-profiler-common/src/test/java/org/apache/metron/profiler/DefaultMessageDistributorTest.java,124,,"    String entity = (String) messageOne.get(""ip_src_addr"");"
166175,./TargetProjects/metron/metron-analytics/metron-profiler-common/src/test/java/org/apache/metron/profiler/DefaultMessageRouterTest.java,233,,"    assertEquals(messageOne.get(""ip_src_addr""), route1.getEntity());"
166176,./TargetProjects/metron/metron-analytics/metron-profiler-common/src/test/java/org/apache/metron/profiler/DefaultProfileBuilderTest.java,87,,"            .withEntity(""10.0.0.1"")"
166177,./TargetProjects/metron/metron-analytics/metron-profiler-common/src/test/java/org/apache/metron/profiler/hbase/SaltyRowKeyBuilderTest.java,75,,"    measurement.withGroups(Collections.singletonList(""group1""));"
166178,./TargetProjects/metron/metron-analytics/metron-profiler-repl/src/test/java/org/apache/metron/profiler/repl/ProfilerFunctionsTest.java,127,,"    state.put(""config"", ""{ \""profiles\"" : [] }"");"
166179,./TargetProjects/metron/metron-analytics/metron-profiler-repl/src/test/java/org/apache/metron/profiler/repl/ProfilerFunctionsTest.java,128,,"    StandAloneProfiler profiler = run(""PROFILER_INIT(config)"", StandAloneProfiler.class);"
166180,./TargetProjects/metron/metron-analytics/metron-profiler-repl/src/test/java/org/apache/metron/profiler/repl/ProfilerFunctionsTest.java,183,,"    state.put(""profiler"", profiler);"
166181,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,186,,"    profilerProperties.put(TELEMETRY_INPUT_PATH.getKey(), ""src/test/resources/telemetry.json"");"
166182,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,243,,"            .format(""text"")"
166183,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,281,,"    assign(""maxTimestamp"", ""1530978728982L"");"
166184,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,281,,"    assign(""maxTimestamp"", ""1530978728982L"");"
166185,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,284,,"    assign(""window"", ""PROFILE_WINDOW('from 5 hours ago', maxTimestamp)"");"
166186,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,284,,"    assign(""window"", ""PROFILE_WINDOW('from 5 hours ago', maxTimestamp)"");"
166187,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,409,,"    assign(""sketches"",""PROFILE_GET('count-by-ip', '192.168.66.1', window)"");"
166188,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,410,,"    assign(""sketch"", ""GET_FIRST(sketches)"");"
166189,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/BatchProfilerIntegrationTest.java,410,,"    assign(""sketch"", ""GET_FIRST(sketches)"");"
166190,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/function/HBaseWriterFunctionTest.java,59,,"    String entity = (String) message.get(""ip_src_addr"");"
166191,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/function/MessageRouterFunctionTest.java,65,,"    assertEquals(""profile1"", routes.get(0).getProfileDefinition().getProfile());"
166192,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/function/MessageRouterFunctionTest.java,178,,"            .withForeach(""ip_src_addr"")"
166193,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/function/MessageRouterFunctionTest.java,179,,"            .withUpdate(""count"", ""count + 1"")"
166194,./TargetProjects/metron/metron-analytics/metron-profiler-spark/src/test/java/org/apache/metron/profiler/spark/function/MessageRouterFunctionTest.java,179,,"            .withUpdate(""count"", ""count + 1"")"
166195,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/main/java/org/apache/metron/profiler/storm/ProfileSplitterBolt.java,139,,"              input.contains(TOPIC.getFieldName())      ? input.getStringByField(TOPIC.getFieldName()):       ""unknown"","
166196,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/KafkaEmitterTest.java,87,,"            .withProfileName(""profile"")"
166197,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/KafkaEmitterTest.java,88,,"            .withEntity(""entity"")"
166198,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/KafkaEmitterTest.java,91,,"            .withTriageValues(Collections.singletonMap(""triage-key"", ""triage-value""));"
166199,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/ProfileBuilderBoltTest.java,72,,"            .withField(""ip_src_addr"", ""10.0.0.1"")"
166200,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/ProfileBuilderBoltTest.java,96,,"            .withEntity(""entity1"")"
166201,./TargetProjects/metron/metron-analytics/metron-profiler-storm/src/test/java/org/apache/metron/profiler/storm/integration/ProfilerIntegrationTest.java,422,,"      setProperty(""profiler.period.duration.units"", ""MILLISECONDS"");"
166202,./TargetProjects/metron/metron-analytics/metron-statistics/src/main/java/org/apache/metron/statistics/StellarStatisticsFunctions.java,55,,"  @Stellar( namespace=""STATS"""
166203,./TargetProjects/metron/metron-analytics/metron-statistics/src/main/java/org/apache/metron/statistics/StellarStatisticsFunctions.java,174,,"            ""stats - The Stellar statistics object"""
166204,./TargetProjects/metron/metron-analytics/metron-statistics/src/main/java/org/apache/metron/statistics/approximation/HyperLogLogPlusFunctions.java,29,,"  @Stellar(namespace = ""HLLP"""
166205,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/BinFunctionsTest.java,45,,"    assertEquals(run(""BIN(value, bounds)"", ImmutableMap.of(""value"", 0, ""bounds"", ImmutableList.of(10, 20, 30))), 0);"
166206,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/BinFunctionsTest.java,46,,"    assertEquals(run(""BIN(value, [ 10, 20, 30 ])"", ImmutableMap.of(""value"", 0)), 0);"
166207,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/StatisticalBinningPerformanceDriver.java,70,,"                      + "" / "" + perfStats.getPercentile(25)"
166208,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/StellarStatisticsFunctionsTest.java,218,,"  @MethodSource(""data"")"
166209,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/StellarStatisticsFunctionsTest.java,221,,"    Object result = run(""STATS_COUNT(stats)"", variables);"
166210,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/StellarStatisticsFunctionsTest.java,418,,"    assertEquals(0, run(format(""STATS_BIN(stats, %f)"", 9.0), variables));"
166211,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/approximation/HyperLogLogPlusFunctionsIntegrationTest.java,57,,"    assertThat(""Incorrect cardinality returned"", estimate, equalTo(2L));"
166212,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/approximation/HyperLogLogPlusFunctionsTest.java,53,,"    actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(actual, ""item-1""));"
166213,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/approximation/HyperLogLogPlusFunctionsTest.java,54,,"    actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(actual, ""item-2""));"
166214,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,49,,"     Double score = (Double) run(""OUTLIER_MAD_SCORE(currentState, value)"", ImmutableMap.of(""currentState"", currentState, ""value"", value));"
166215,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,49,,"     Double score = (Double) run(""OUTLIER_MAD_SCORE(currentState, value)"", ImmutableMap.of(""currentState"", currentState, ""value"", value));"
166216,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,49,,"     Double score = (Double) run(""OUTLIER_MAD_SCORE(currentState, value)"", ImmutableMap.of(""currentState"", currentState, ""value"", value));"
166217,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,58,,"    currentState = (MedianAbsoluteDeviationFunctions.State) run(""OUTLIER_MAD_STATE_MERGE(states, NULL)"", ImmutableMap.of(""states"", states));"
166218,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,97,,"      assertTrue(score > 3.5, ""Score: "" + score + "" is not an outlier despite being a minimum."");"
166219,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/outlier/MedianAbsoluteDeviationTest.java,105,,"      assertTrue(score > 3.5, ""Score: "" + score + "" is not an outlier despite being 4 std deviations away from the mean"");"
166220,./TargetProjects/metron/metron-analytics/metron-statistics/src/test/java/org/apache/metron/statistics/sampling/SamplerFunctionsTest.java,70,,"    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of(""size"", 10 ));"
166221,./TargetProjects/metron/metron-contrib/metron-performance/src/main/java/org/apache/metron/performance/load/LoadGenerator.java,115,,"        System.out.println(""Sending "" + messagesPerPeriod + "" messages to "" + outputTopicStr + "" every "" + sendDelta + ""ms"");"
166222,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/config/WebSecurityConfig.java,187,,"                .withUser(""user"").password(""password"").roles(SECURITY_ROLE_USER).and()"
166223,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/HdfsController.java,50,,"  ResponseEntity<List<String>> list(@ApiParam(name = ""path"", value = ""Path to HDFS directory"", required = true) @RequestParam String path) throws RestException {"
166224,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/KafkaController.java,65,,"  ResponseEntity<KafkaTopic> get(final @ApiParam(name = ""name"", value = ""Kafka topic name"", required = true) @PathVariable String name) throws RestException {"
166225,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/KafkaController.java,65,,"  ResponseEntity<KafkaTopic> get(final @ApiParam(name = ""name"", value = ""Kafka topic name"", required = true) @PathVariable String name) throws RestException {"
166226,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/PcapController.java,84,,"  ResponseEntity<PcapStatus> getStatus(@ApiParam(name=""jobId"", value=""Job ID of submitted job"", required=true)@PathVariable String jobId) throws RestException {"
166227,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/PcapController.java,84,,"  ResponseEntity<PcapStatus> getStatus(@ApiParam(name=""jobId"", value=""Job ID of submitted job"", required=true)@PathVariable String jobId) throws RestException {"
166228,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,68,,"  @ApiResponses(value = { @ApiResponse(message = ""Returns topology status information"", code = 200),"
166229,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,69,,"          @ApiResponse(message = ""Topology is missing"", code = 404) })"
166230,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,71,,"  ResponseEntity<TopologyStatus> get(@ApiParam(name=""name"", value=""Topology name"", required=true)@PathVariable String name) throws RestException {"
166231,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,81,,"  @ApiResponse(message = ""Returns start response message"", code = 200)"
166232,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,83,,"  ResponseEntity<TopologyResponse> start(@ApiParam(name=""name"", value=""Parser name"", required=true)@PathVariable String name) throws RestException {"
166233,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,88,,"  @ApiResponse(message = ""Returns stop response message"", code = 200)"
166234,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,91,,"                                        @ApiParam(name=""stopNow"", value=""Stop the topology immediately"")@RequestParam(required = false, defaultValue = ""false"") boolean stopNow) throws RestException {"
166235,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,91,,"                                        @ApiParam(name=""stopNow"", value=""Stop the topology immediately"")@RequestParam(required = false, defaultValue = ""false"") boolean stopNow) throws RestException {"
166236,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,91,,"                                        @ApiParam(name=""stopNow"", value=""Stop the topology immediately"")@RequestParam(required = false, defaultValue = ""false"") boolean stopNow) throws RestException {"
166237,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,96,,"  @ApiResponse(message = ""Returns activate response message"", code = 200)"
166238,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/controller/StormController.java,103,,"  @ApiResponse(message = ""Returns deactivate response message"", code = 200)"
166239,./TargetProjects/metron/metron-interface/metron-rest/src/main/java/org/apache/metron/rest/service/impl/StormStatusServiceImpl.java,101,,"      if (""success"".equals(result.get(""status""))) {"
166240,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KafkaConfigTest.java,45,,"    when(environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY)).thenReturn(""broker urls"");"
166241,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KafkaConfigTest.java,50,,"    assertNull(consumerProperties.get(""security.protocol""));"
166242,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KafkaConfigTest.java,53,,"    when(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)).thenReturn(""kafka security protocol"");"
166243,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KnoxSSOAuthenticationFilterTest.java,72,,"                    ""userSearchBase"", mock(Path.class), ""knoxKeyString"", ""knoxCookie"", null));"
166244,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KnoxSSOAuthenticationFilterTest.java,72,,"                    ""userSearchBase"", mock(Path.class), ""knoxKeyString"", ""knoxCookie"", null));"
166245,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KnoxSSOAuthenticationFilterTest.java,72,,"                    ""userSearchBase"", mock(Path.class), ""knoxKeyString"", ""knoxCookie"", null));"
166246,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KnoxSSOAuthenticationFilterTest.java,88,,"    JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().subject(""userName"").build();"
166247,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/KnoxSSOAuthenticationFilterTest.java,92,,"    when(request.getHeader(""Authorization"")).thenReturn(null);"
166248,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/MetronAuthoritiesMapperTest.java,38,,"    mapper.setUserRole(""ACME_USER"");"
166249,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/MetronAuthoritiesMapperTest.java,39,,"    mapper.setAdminRole(""ACME_ADMIN"");"
166250,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/config/MetronAuthoritiesMapperTest.java,40,,"    mapper.setPrefix(""ROLE_"");"
166251,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/AlertsUIControllerIntegrationTest.java,144,,"    this.mockMvc.perform(post(alertUrl + ""/escalate"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(alerts))"
166252,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/AlertsUIControllerIntegrationTest.java,146,,"    this.mockMvc.perform(get(alertUrl + ""/settings""))"
166253,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/AlertsUIControllerIntegrationTest.java,148,,"    this.mockMvc.perform(get(alertUrl + ""/settings/all""))"
166254,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/AlertsUIControllerIntegrationTest.java,237,,"            .andExpect(content().json(""{\"""" + user1 + ""\"": "" + user1AlertUserSettingsJson + ""}""));"
166255,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/GlobalConfigControllerIntegrationTest.java,78,,"        this.mockMvc.perform(post(globalConfigUrl).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(globalJson))"
166256,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/GrokControllerIntegrationTest.java,94,,"        this.mockMvc.perform(post(grokUrl + ""/validate"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(grokValidationJson))"
166257,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/GrokControllerIntegrationTest.java,94,,"        this.mockMvc.perform(post(grokUrl + ""/validate"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(grokValidationJson))"
166258,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/HdfsControllerIntegrationTest.java,84,,"        this.mockMvc.perform(get(hdfsUrl + ""?path="" + path).with(httpBasic(user,password)))"
166259,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,157,,"    this.mockMvc.perform(post(kafkaUrl + ""/topic"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(broTopic))"
166260,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,157,,"    this.mockMvc.perform(post(kafkaUrl + ""/topic"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(broTopic))"
166261,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,160,,"    this.mockMvc.perform(get(kafkaUrl + ""/topic/bro""))"
166262,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,166,,"    this.mockMvc.perform(get(kafkaUrl + ""/topic/bro/sample""))"
166263,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,169,,"    this.mockMvc.perform(get(kafkaUrl + ""/topic/bro/produce""))"
166264,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/KafkaControllerIntegrationTest.java,178,,"    this.kafkaService.deleteTopic(""bro"");"
166265,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,132,,"            content().contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")))"
166266,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,146,,"        .andExpect(jsonPath(""$.results[0].source.guid"").value(""meta_2""))"
166267,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,150,,"    guid = ""bro_1"";"
166268,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,162,,"        .andExpect(jsonPath(""$.results[1].source.guid"").value(""meta_1""))"
166269,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,174,,"            .andExpect(jsonPath(""$.guid"", notNullValue()))"
166270,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,176,,"            .andExpect(jsonPath(""$.sensorType"").value(MetaAlertConstants.METAALERT_TYPE))"
166271,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,182,,"            .andExpect(jsonPath(""$.document.metron_alert[0].guid"").value(""bro_1""))"
166272,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,191,,"      add(new GetRequest(""bro_2"", ""bro"", ""bro_index_2017.01.01.01""));"
166273,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,191,,"      add(new GetRequest(""bro_2"", ""bro"", ""bro_index_2017.01.01.01""));"
166274,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,192,,"      add(new GetRequest(""bro_3"", ""bro"", ""bro_index_2017.01.01.01""));"
166275,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/MetaAlertControllerIntegrationTest.java,205,,"            .andExpect(jsonPath(""$.document.metron_alert[2].metaalerts"").value(""meta_1""))"
166276,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,134,,"    this.mockMvc.perform(post(pcapUrl + ""/fixed"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(fixedJson))"
166277,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,134,,"    this.mockMvc.perform(post(pcapUrl + ""/fixed"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(fixedJson))"
166278,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,143,,"    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean(""mockPcapJob"");"
166279,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,149,,"            .andExpect(jsonPath(""$.jobStatus"").value(""RUNNING""));"
166280,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,149,,"            .andExpect(jsonPath(""$.jobStatus"").value(""RUNNING""));"
166281,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,151,,"    assertEquals(""/base/path"", mockPcapJob.getBasePath());"
166282,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,153,,"    assertEquals(""/final/output/path"", mockPcapJob.getFinalOutputPath());"
166283,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,222,,"    mockPcapJob.setStatus(new JobStatus().withJobId(""jobId"").withState(JobStatus.State.RUNNING));"
166284,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,227,,"            .andExpect(jsonPath(""$.jobId"").value(""jobId""))"
166285,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,255,,"    this.mockMvc.perform(get(pcapUrl + ""/jobId"").with(httpBasic(user, password)))"
166286,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/PcapControllerIntegrationTest.java,317,,"    mockPcapJob.setStatus(new JobStatus().withJobId(""jobId123"").withState(JobStatus.State.RUNNING));"
166287,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,118,,"    this.mockMvc.perform(post(searchUrl + ""/search"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(SearchIntegrationTest.allQuery))"
166288,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,118,,"    this.mockMvc.perform(post(searchUrl + ""/search"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(SearchIntegrationTest.allQuery))"
166289,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,124,,"    sensorIndexingConfigService.save(""bro"", new HashMap<String, Object>() {{"
166290,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,131,,"            .andExpect(jsonPath(""$.total"").value(5))"
166291,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,132,,"            .andExpect(jsonPath(""$.results[0].source.source:type"").value(""bro""))"
166292,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,133,,"            .andExpect(jsonPath(""$.results[0].source.timestamp"").value(5))"
166293,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,134,,"            .andExpect(jsonPath(""$.results[1].source.source:type"").value(""bro""))"
166294,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,135,,"            .andExpect(jsonPath(""$.results[1].source.timestamp"").value(4))"
166295,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,136,,"            .andExpect(jsonPath(""$.results[2].source.source:type"").value(""bro""))"
166296,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,137,,"            .andExpect(jsonPath(""$.results[2].source.timestamp"").value(3))"
166297,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,183,,"    sensorIndexingConfigService.save(""snort"", new HashMap<String, Object>() {{"
166298,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,188,,"    assertEventually(() -> this.mockMvc.perform(post(searchUrl + ""/column/metadata"").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(""[]""))"
166299,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,191,,"        .andExpect(jsonPath(""$.*"", hasSize(5)))"
166300,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,192,,"        .andExpect(jsonPath(""$.common_string_field"").value(""text""))"
166301,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,192,,"        .andExpect(jsonPath(""$.common_string_field"").value(""text""))"
166302,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,193,,"        .andExpect(jsonPath(""$.common_integer_field"").value(""integer""))"
166303,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,193,,"        .andExpect(jsonPath(""$.common_integer_field"").value(""integer""))"
166304,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SearchControllerIntegrationTest.java,196,,"        .andExpect(jsonPath(""$.duplicate_field"").value(""other""))"
166305,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,130,,"    this.mockMvc.perform(post(sensorEnrichmentConfigUrl).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(broJson))"
166306,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,133,,"    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + ""/broTest""))"
166307,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,158,,"            .andExpect(jsonPath(""$.enrichment.fieldMap.geo[0]"").value(""ip_dst_addr""))"
166308,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,160,,"            .andExpect(jsonPath(""$.enrichment.fieldMap.hbaseEnrichment[0]"").value(""ip_src_addr""))"
166309,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,163,,"            .andExpect(jsonPath(""$.enrichment.fieldMap.stellar.config.group1.bar"").value(""foo""))"
166310,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,167,,"            .andExpect(jsonPath(""$.threatIntel.fieldToTypeMap.ip_src_addr[0]"").value(""malicious_ip""))"
166311,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorEnrichmentConfigControllerIntegrationTest.java,171,,"            .andExpect(jsonPath(""$.threatIntel.triageConfig.aggregator"").value(""MAX""));"
166312,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorIndexingConfigControllerIntegrationTest.java,77,,"    this.mockMvc.perform(post(sensorIndexingConfigUrl).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(broJson))"
166313,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorIndexingConfigControllerIntegrationTest.java,80,,"    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl + ""/broTest""))"
166314,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorIndexingConfigControllerIntegrationTest.java,95,,"    sensorIndexingConfigService.delete(""broTest"");"
166315,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,182,,"    this.mockMvc.perform(post(sensorParserConfigUrl).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(squidJson))"
166316,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,185,,"    this.mockMvc.perform(get(sensorParserConfigUrl + ""/squidTest""))"
166317,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,198,,"    this.sensorParserConfigService.delete(""broTest"");"
166318,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,199,,"    this.sensorParserConfigService.delete(""squidTest"");"
166319,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,210,,"            .andExpect(jsonPath(""$.*"", hasSize(numFields.get())))"
166320,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,211,,"            .andExpect(jsonPath(""$.parserClassName"").value(""org.apache.metron.parsers.GrokParser""))"
166321,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,211,,"            .andExpect(jsonPath(""$.parserClassName"").value(""org.apache.metron.parsers.GrokParser""))"
166322,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,212,,"            .andExpect(jsonPath(""$.sensorTopic"").value(""squidTest""))"
166323,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,213,,"            .andExpect(jsonPath(""$.parserConfig.grokPath"").value(""target/patterns/squidTest""))"
166324,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,214,,"            .andExpect(jsonPath(""$.parserConfig.patternLabel"").value(""SQUIDTEST""))"
166325,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,215,,"            .andExpect(jsonPath(""$.parserConfig.timestampField"").value(""timestamp""))"
166326,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,216,,"            .andExpect(jsonPath(""$.fieldTransformations[0].transformation"").value(""STELLAR""))"
166327,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,217,,"            .andExpect(jsonPath(""$.fieldTransformations[0].output[0]"").value(""full_hostname""))"
166328,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,218,,"            .andExpect(jsonPath(""$.fieldTransformations[0].output[1]"").value(""domain_without_subdomains""))"
166329,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,219,,"            .andExpect(jsonPath(""$.fieldTransformations[0].config.full_hostname"").value(""URL_TO_HOST(url)""))"
166330,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,220,,"            .andExpect(jsonPath(""$.fieldTransformations[0].config.domain_without_subdomains"").value(""DOMAIN_REMOVE_SUBDOMAINS(full_hostname)""));"
166331,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,253,,"    this.mockMvc.perform(post(sensorParserConfigUrl + ""/broTest"").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(broJson))"
166332,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,257,,"            .andExpect(jsonPath(""$.parserClassName"").value(""org.apache.metron.parsers.bro.BasicBroParser""))"
166333,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,259,,"            .andExpect(jsonPath(""$.readMetadata"").value(""true""))"
166334,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserConfigControllerIntegrationTest.java,339,,"    this.mockMvc.perform(post(sensorParserConfigUrl + ""/parseMessage"").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(parseRequest))"
166335,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,129,,"    this.sensorParserConfigService.save(""bro"", new SensorParserConfig());"
166336,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,130,,"    this.sensorParserConfigService.save(""snort"", new SensorParserConfig());"
166337,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,131,,"    this.sensorParserConfigService.save(""squid"", new SensorParserConfig());"
166338,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,132,,"    this.sensorParserConfigService.save(""yaf"", new SensorParserConfig());"
166339,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,133,,"    this.sensorParserConfigService.save(""jsonMap"", new SensorParserConfig());"
166340,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,143,,"    this.mockMvc.perform(post(sensorParserGroupUrl).with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(group1BroSnort))"
166341,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,146,,"    this.mockMvc.perform(get(sensorParserGroupUrl + ""/group1""))"
166342,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,161,,"            .andExpect(jsonPath(""$.*"", hasSize(numFields.get())))"
166343,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,162,,"            .andExpect(jsonPath(""$.name"").value(""group1""))"
166344,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,162,,"            .andExpect(jsonPath(""$.name"").value(""group1""))"
166345,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,163,,"            .andExpect(jsonPath(""$.description"").value(""group1 description""))"
166346,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,163,,"            .andExpect(jsonPath(""$.description"").value(""group1 description""))"
166347,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,164,,"            .andExpect(jsonPath(""$.sensors[0]"").value(""bro""))"
166348,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/SensorParserGroupControllerIntegrationTest.java,165,,"            .andExpect(jsonPath(""$.sensors[1]"").value(""snort""));"
166349,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StellarControllerIntegrationTest.java,78,,"        this.mockMvc.perform(post(stellarUrl + ""/validate/rules"").with(csrf()).contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")).content(rulesJson))"
166350,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,95,,"    this.mockMvc.perform(get(stormUrl + ""/parser/start/broTest""))"
166351,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,119,,"    this.mockMvc.perform(get(stormUrl + ""/enrichment/deactivate""))"
166352,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,152,,"    sensorParserConfigService.delete(""broTest"");"
166353,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,156,,"            .andExpect(jsonPath(""$.status"").value(""ERROR""))"
166354,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,156,,"            .andExpect(jsonPath(""$.status"").value(""ERROR""))"
166355,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,157,,"            .andExpect(jsonPath(""$.message"").value(TopologyStatusCode.STOP_ERROR.toString()));"
166356,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,198,,"            .andExpect(jsonPath(""$.status"").value(""SUCCESS""))"
166357,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,203,,"            .andExpect(content().contentType(MediaType.parseMediaType(""application/json;charset=UTF-8"")))"
166358,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,292,,"      this.mockMvc.perform(get(stormUrl + ""/indexing/"" + type).with(httpBasic(user,password)))"
166359,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/StormControllerIntegrationTest.java,350,,"            .andExpect(jsonPath(""$.parserScriptPath"").value(""/usr/metron/"" + metronVersion + ""/bin/start_parser_topology.sh""))"
166360,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/UpdateControllerIntegrationTest.java,145,,"            .contentType(MediaType.parseMediaType(""application/json;charset=UTF-8""))"
166361,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/controller/UpdateControllerIntegrationTest.java,159,,"            .andExpect(jsonPath(""$.source:type"").value(""bro""))"
166362,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/mock/MockStormRestTemplate.java,54,,"        topologyStatusList.add(getTopologyStatus(""enrichment""));"
166363,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/GrokServiceImplTest.java,86,,"    grokValidation.setSampleData(""asdf asdf"");"
166364,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/GrokServiceImplTest.java,87,,"    grokValidation.setStatement(""LABEL %{WORD:word1} %{WORD:word2}"");"
166365,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/GrokServiceImplTest.java,98,,"    grokValidation.setPatternLabel(""LABEL"");"
166366,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/HdfsServiceImplTest.java,76,,"        String contents = ""contents"";"
166367,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/KafkaServiceImplTest.java,113,,"    topics.put(""topic1"", Lists.newArrayList());"
166368,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/KafkaServiceImplTest.java,114,,"    topics.put(""topic2"", Lists.newArrayList());"
166369,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/KafkaServiceImplTest.java,115,,"    topics.put(""topic3"", Lists.newArrayList());"
166370,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/KafkaServiceImplTest.java,153,,"    assertFalse(kafkaService.deleteTopic(""non_existent_topic""));"
166371,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,179,,"    fixedPcapRequest.setBasePath(""basePath"");"
166372,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,180,,"    fixedPcapRequest.setBaseInterimResultPath(""baseOutputPath"");"
166373,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,181,,"    fixedPcapRequest.setFinalOutputPath(""finalOutputPath"");"
166374,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,185,,"    fixedPcapRequest.setIpSrcAddr(""ip_src_addr"");"
166375,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,186,,"    fixedPcapRequest.setIpDstAddr(""ip_dst_addr"");"
166376,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,189,,"    fixedPcapRequest.setProtocol(""tcp"");"
166377,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,190,,"    fixedPcapRequest.setPacketFilter(""filter"");"
166378,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,200,,"            .withJobId(""jobId"")"
166379,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,201,,"            .withDescription(""description"")"
166380,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,219,,"    assertEquals(expectedPcapStatus, pcapService.submit(""user"", fixedPcapRequest));"
166381,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,286,,"    queryPcapRequest.setQuery(""query"");"
166382,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,346,,"    when(jobManager.submit(pcapJobSupplier, ""user"")).thenThrow(new JobException(""some job exception""));"
166383,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,510,,"    Path path = new Path(""./target"");"
166384,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/PcapServiceImplTest.java,554,,"    when(pb.start()).thenThrow(new IOException(""some exception""));"
166385,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SearchServiceImplTest.java,69,,"    when(environment.getProperty(INDEX_WRITER_NAME)).thenReturn(""elasticsearch"");"
166386,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SearchServiceImplTest.java,70,,"    when(sensorIndexingConfigService.getAllIndices(""elasticsearch"")).thenReturn(Arrays.asList(""bro"", ""snort"", ""error""));"
166387,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SearchServiceImplTest.java,70,,"    when(sensorIndexingConfigService.getAllIndices(""elasticsearch"")).thenReturn(Arrays.asList(""bro"", ""snort"", ""error""));"
166388,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SearchServiceImplTest.java,76,,"    expectedSearchRequest.setIndices(Arrays.asList(""bro"", ""snort"", ""metaalert""));"
166389,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SearchServiceImplTest.java,109,,"    expectedSearchRequest.setFacetFields(Arrays.asList(""source:type"", ""ip_src_addr"", ""ip_dst_addr""));"
166390,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorEnrichmentConfigServiceImplTest.java,92,,"    when(builder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + ""/bro"")).thenThrow(KeeperException.NoNodeException.class);"
166391,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorEnrichmentConfigServiceImplTest.java,94,,"    assertFalse(sensorEnrichmentConfigService.delete(""bro""));"
166392,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,78,,"    when(builder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + ""/bro"")).thenThrow(KeeperException.NoNodeException.class);"
166393,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,80,,"    assertFalse(sensorIndexingConfigService.delete(""bro""));"
166394,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,125,,"    when(parserConfiguration.getTypes()).thenReturn(ImmutableList.of(""bro"", ""snort""));"
166395,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,128,,"    when(indexingConfiguration.getIndex(eq(""bro""), eq(""elasticsearch""))).thenReturn(null);"
166396,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,148,,"    when(indexingConfiguration.getTypes()).thenReturn(ImmutableList.of(""bro"", ""snort"", ""yaf""));"
166397,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,149,,"    when(indexingConfiguration.getIndex(eq(""bro""), eq(""elasticsearch""))).thenReturn(""renamed_bro"");"
166398,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorIndexingConfigServiceImplTest.java,170,,"    when(indexingConfiguration.getTypes()).thenReturn(ImmutableList.of(""bro"", ""snort"", ""squid""));"
166399,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserConfigServiceImplTest.java,112,,"    when(builder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + ""/bro"")).thenThrow(KeeperException.NoNodeException.class);"
166400,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserConfigServiceImplTest.java,114,,"    assertFalse(sensorParserConfigService.delete(""bro""));"
166401,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserConfigServiceImplTest.java,161,,"                              ,ParserConfigurations.getKey(""squid""), new HashMap<>()"
166402,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserGroupServiceImplTest.java,54,,"    when(sensorParserConfigService.findOne(""bro"")).thenReturn(new SensorParserConfig());"
166403,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserGroupServiceImplTest.java,57,,"    sensorParserGroup.setName(""group1"");"
166404,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/SensorParserGroupServiceImplTest.java,147,,"    group2.setName(""group2"");"
166405,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormAdminServiceImplTest.java,58,,"    when(stormCLIClientWrapper.startParserTopology(""bro"")).thenReturn(0);"
166406,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,56,,"    when(environment.getProperty(MetronRestConstants.PARSER_SCRIPT_PATH_SPRING_PROPERTY)).thenReturn(""/start_parser"");"
166407,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,57,,"    when(environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY)).thenReturn(""kafka_broker_url"");"
166408,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,58,,"    when(environment.getProperty(MetronRestConstants.ZK_URL_SPRING_PROPERTY)).thenReturn(""zookeeper_url"");"
166409,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,60,,"    when(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)).thenReturn(""kafka_security_protocol"");"
166410,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,63,,"    assertEquals(0, stormCLIWrapper.startParserTopology(""bro""));"
166411,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,105,,"    verify(stormCLIWrapper).getProcessBuilder(""storm"", ""kill"", ""bro"");"
166412,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,105,,"    verify(stormCLIWrapper).getProcessBuilder(""storm"", ""kill"", ""bro"");"
166413,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormCLIWrapperTest.java,122,,"    when(environment.getProperty(MetronRestConstants.ENRICHMENT_SCRIPT_PATH_SPRING_PROPERTY)).thenReturn(""/start_enrichment"");"
166414,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormStatusServiceImplTest.java,87,,"    topologyStatus.setName(""bro"");"
166415,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormStatusServiceImplTest.java,88,,"    topologyStatus.setId(""bro_id"");"
166416,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormStatusServiceImplTest.java,193,,"            .thenReturn(new HashMap() {{ put(""status"", ""success""); }});"
166417,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/service/impl/StormStatusServiceImplTest.java,211,,"            .thenReturn(new HashMap() {{ put(""status"", ""error message""); }});"
166418,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/user/UserSettingsClientTest.java,62,,"    when(result.getValue(cf, Bytes.toBytes(""type""))).thenReturn(""userSettings1String"".getBytes("
166419,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/user/UserSettingsClientTest.java,62,,"    when(result.getValue(cf, Bytes.toBytes(""type""))).thenReturn(""userSettings1String"".getBytes("
166420,./TargetProjects/metron/metron-interface/metron-rest/src/test/java/org/apache/metron/rest/user/UserSettingsClientTest.java,64,,"    Get get = new Get(""user1"".getBytes(StandardCharsets.UTF_8));"
166421,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/bolt/ConfiguredParserBoltTest.java,72,,"    byte[] globalConfig = ConfigurationsUtils.readGlobalConfigFromFile(""../"" + TestConstants.SAMPLE_CONFIG_PATH);"
166422,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/MessageGettersTest.java,34,,"    when(tuple.getBinary(1)).thenReturn(""bytes"".getBytes(UTF_8));"
166423,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/MessageGettersTest.java,46,,"    expected.put(""field"", ""value"");"
166424,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/MessageGettersTest.java,46,,"    expected.put(""field"", ""value"");"
166425,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/MessageGettersTest.java,65,,"    when(tuple.getValueByField(""tuple_field"")).thenReturn(actual);"
166426,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/MessageGettersTest.java,75,,"    Object actual = ""object"";"
166427,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/metadata/RawMessageUtilTest.java,104,,"      RawMessage m = RawMessageUtil.INSTANCE.getRawMessage(RawMessageStrategies.DEFAULT, t, ""raw_message"".getBytes("
166428,./TargetProjects/metron/metron-platform/metron-common-streaming/metron-common-storm/src/test/java/org/apache/metron/storm/common/message/metadata/RawMessageUtilTest.java,208,,"    Map<String, Object> config = ImmutableMap.of(EnvelopedRawMessageStrategy.MESSAGE_FIELD_CONFIG, ""data"");"
166429,./TargetProjects/metron/metron-platform/metron-common/src/main/java/org/apache/metron/common/error/MetronError.java,118,,"  @SuppressWarnings({""unchecked""})"
166430,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/AggregatorsTest.java,35,,"    assertEquals(7d, Aggregators.MAX.aggregate(ImmutableList.of(1, 5, -1, 7, 0), ImmutableMap.of(Aggregators.NEGATIVE_VALUES_TRUMP_CONF, ""false"")), 1e-7);"
166431,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/cli/ConfigurationManagerIntegrationTest.java,121,,"            , ""--mode"", ""PUSH"""
166432,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/cli/ConfigurationManagerIntegrationTest.java,150,,"    File globalConfigFile = new File(configDir, ""global.json"");"
166433,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/cli/ConfigurationManagerIntegrationTest.java,152,,"    validateConfig(""global"", GLOBAL, new String(Files.readAllBytes(Paths.get(globalConfigFile.toURI())),"
166434,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/cli/ConfigurationManagerIntegrationTest.java,347,,"    File configFile = new File(parsersDir, ""myparser.json"");"
166435,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/cli/ConfigurationManagerIntegrationTest.java,351,,"    pushConfigs(PARSER, configDir, Optional.of(""myparser""));"
166436,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/ConfigOptionTest.java,42,,"    ConfigOption option = newOption(""foo"");"
166437,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/IndexingConfigurationsTest.java,61,,"    assertFalse(configurations.isSetDocumentId(""sensor"", ""writer""));"
166438,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/IndexingConfigurationsTest.java,61,,"    assertFalse(configurations.isSetDocumentId(""sensor"", ""writer""));"
166439,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/SensorEnrichmentUpdateConfigTest.java,90,,"        if(sensor.equals(""bro"")) {"
166440,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/SensorEnrichmentUpdateConfigTest.java,124,,"            .contains(""ip_src_addr""),"
166441,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/SensorEnrichmentUpdateConfigTest.java,133,,"            .contains(""ip_dst_addr""),"
166442,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/SensorEnrichmentUpdateConfigTest.java,155,,"            .contains(""playful""),"
166443,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/StellarEnrichmentConfigTest.java,64,,"    assertNotNull(enrichmentConfig.getEnrichmentConfigs().get(""stellar""));"
166444,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/StellarEnrichmentConfigTest.java,86,,"      assertEquals(""stellar_test"", split.get(""source.type""));"
166445,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/StellarEnrichmentConfigTest.java,86,,"      assertEquals(""stellar_test"", split.get(""source.type""));"
166446,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/StellarEnrichmentConfigTest.java,114,,"        Map<String, Object> split = (Map<String, Object>) splits.get(0).get(""group1"");"
166447,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/StellarEnrichmentConfigTest.java,120,,"        Map<String, Object> split = (Map<String, Object>) splits.get(1).get(""group2"");"
166448,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/writer/IndexingWriterConfigurationTest.java,35,,"    IndexingWriterConfiguration config = new IndexingWriterConfiguration(""hdfs"","
166449,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/configuration/writer/IndexingWriterConfigurationTest.java,38,,"    assertEquals(1, config.getBatchSize(""foo""));"
166450,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/error/MetronErrorTest.java,46,,"    message1.put(""value"", ""message1"");"
166451,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/error/MetronErrorTest.java,117,,"    message.put(""field1"", ""value1"");"
166452,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/error/MetronErrorTest.java,118,,"    message.put(""field2"", ""value2"");"
166453,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/FieldNameConvertersTest.java,63,,"    final String writer = ""elasticsearch"";"
166454,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/FieldNameConvertersTest.java,64,,"    final String sensor = ""bro"";"
166455,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/RemoveTransformationTest.java,54,,"      put(""field1"", ""foo"");"
166456,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/RemoveTransformationTest.java,54,,"      put(""field1"", ""foo"");"
166457,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/RemoveTransformationTest.java,86,,"      assertFalse(input.containsKey(""field2""));"
166458,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/RenameTransformationTest.java,57,,"        put(""old_field"" + i, ""f"" + i);"
166459,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/SelectTransformationTest.java,45,,"				put(""field1"", ""foo"");"
166460,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/SelectTransformationTest.java,46,,"				put(""field2"", ""bar"");"
166461,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,78,,"    assertTrue(input.containsKey(""new_field""));"
166462,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,104,,"      input.put(""old_field"", ""val"");"
166463,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,247,,"      put(""timestamp"", ""2016-01-05 17:02:30"");"
166464,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,247,,"      put(""timestamp"", ""2016-01-05 17:02:30"");"
166465,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,251,,"    assertEquals(expected, input.get(""utc_timestamp""));"
166466,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/transformation/StellarTransformationTest.java,334,,"        put(""url"", ""https://caseystella.com/blog"");"
166467,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/DomainValidationTest.java,64,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""caseystella.com"")));"
166468,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/DomainValidationTest.java,87,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""www.gmail.com"", ""field2"", ""www.hotmail.com"")));"
166469,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/EmailValidationTest.java,64,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""me@caseystella.com"")));"
166470,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/EmailValidationTest.java,87,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""me@www.gmail.com"", ""field2"", ""me@www.hotmail.com"")));"
166471,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/IPValidationTest.java,84,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""127.0.0.1"")));"
166472,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/IPValidationTest.java,96,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""192.168.0.1"", ""field2"", ""127.0.0.2"")));"
166473,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/IPValidationTest.java,96,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""192.168.0.1"", ""field2"", ""127.0.0.2"")));"
166474,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/IPValidationTest.java,96,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""192.168.0.1"", ""field2"", ""127.0.0.2"")));"
166475,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/IPValidationTest.java,102,,"    assertFalse(execute(validWithMultipleFields, ImmutableMap.of(""field1"", 1, ""field2"", ""192.168.1"")));"
166476,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/URLValidationTest.java,64,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""http://caseystella.com/foo"")));"
166477,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/network/URLValidationTest.java,85,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""ftp://www.gmail.com"", ""field2"", ""http://www.hotmail.com"")));"
166478,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/DateValidationTest.java,70,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""2014-05-01"")));"
166479,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/DateValidationTest.java,86,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""2014-06-01"", ""field2"", ""2014-06-02"")));"
166480,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/DateValidationTest.java,86,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", ""2014-06-01"", ""field2"", ""2014-06-02"")));"
166481,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/IntegerValidationTest.java,64,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", 1)));"
166482,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/IntegerValidationTest.java,76,,"    assertFalse(execute(validWithSingleField, ImmutableMap.of(""field1"", ""foo"")));"
166483,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/IntegerValidationTest.java,83,,"    assertTrue(execute(validWithMultipleFields, ImmutableMap.of(""field1"", 1, ""field2"", ""2"")));"
166484,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/NotEmptyValidationTest.java,62,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""foo"")));"
166485,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/NotEmptyValidationTest.java,62,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""foo"")));"
166486,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/NotEmptyValidationTest.java,66,,"    assertFalse(execute(validWithSingleField, ImmutableMap.of(""field2"", ""foo"")));"
166487,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/RegexValidationTest.java,67,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""foo"")));"
166488,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/field/validation/primitive/RegexValidationTest.java,67,,"    assertTrue(execute(validWithSingleField, ImmutableMap.of(""field1"", ""foo"")));"
166489,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/performance/PerformanceLoggerTest.java,80,,"    perfLogger.log(""t1"", ""my message"");"
166490,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/performance/TimingTest.java,39,,"    timing.mark(""mark1"");"
166491,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/performance/TimingTest.java,52,,"    timing.mark(""mark2"");"
166492,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/utils/LazzyLoggerImplPerfTest.java,62,,"      LOG.trace(""Writing message {} to path: {}"", smallObject.toJSONString(), PATH);"
166493,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/utils/RuntimeErrorsTest.java,37,,"            () -> RuntimeErrors.ILLEGAL_ARG.throwRuntime(""illegal arg happened""));"
166494,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/utils/RuntimeErrorsTest.java,59,,"            () -> RuntimeErrors.ILLEGAL_STATE.throwRuntime(""illegal state happened""));"
166495,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/utils/SerDeUtilsTest.java,106,,"    expected.put(""foo"", ""bar"");"
166496,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/utils/SerDeUtilsTest.java,106,,"    expected.put(""foo"", ""bar"");"
166497,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/zookeeper/ZKConfigurationsCacheIntegrationTest.java,142,,"      ConfigurationsUtils.writeSensorParserConfigToZookeeper(""bro"", config, client);"
166498,./TargetProjects/metron/metron-platform/metron-common/src/test/java/org/apache/metron/common/zookeeper/ZKConfigurationsCacheIntegrationTest.java,147,,"      ConfigurationsUtils.writeSensorIndexingConfigToZookeeper(""test"", config, client);"
166499,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/bulk/HDFSDataPrunerTest.java,85,,"            () -> new HDFSDataPruner(todaysDate, 30, ""file:///"", dataPath.getAbsolutePath() + ""/file-*""));"
166500,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/bulk/HDFSDataPrunerTest.java,85,,"            () -> new HDFSDataPruner(todaysDate, 30, ""file:///"", dataPath.getAbsolutePath() + ""/file-*""));"
166501,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/bulk/HDFSDataPrunerTest.java,101,,"            filesList[i] = new File(dataPath.getPath() + ""//file-"" + String.format(""%02d"", i));"
166502,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/bulk/HDFSDataPrunerTest.java,101,,"            filesList[i] = new File(dataPath.getPath() + ""//file-"" + String.format(""%02d"", i));"
166503,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/ExtractorTest.java,41,,"            key.indicator = ""dummy"";"
166504,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/TransformFilterExtractorDecoratorTest.java,87,,"    EnrichmentKey lookupKey = new EnrichmentKey(""testenrichment"", indicatorVal);"
166505,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/TransformFilterExtractorDecoratorTest.java,89,,"      put(""foo"", ""val1"");"
166506,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/TransformFilterExtractorDecoratorTest.java,89,,"      put(""foo"", ""val1"");"
166507,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/TransformFilterExtractorDecoratorTest.java,90,,"      put(""bar"", indicatorVal);"
166508,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/extractor/TransformFilterExtractorDecoratorTest.java,91,,"      put(""baz"", ""val3"");"
166509,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,78,,"  private static final String tableName = ""enrichment"";"
166510,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,273,,"          pw.println(""google"" + i + "".com,"" + i + "",foo"" + i);"
166511,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,312,,"    String[] argv = {""-c cf"", ""-t enrichment"""
166512,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,312,,"    String[] argv = {""-c cf"", ""-t enrichment"""
166513,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,315,,"            , ""-p 2"", ""-b 128"", ""-q"""
166514,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,315,,"            , ""-p 2"", ""-b 128"", ""-q"""
166515,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,334,,"            , ""-e "" + lineByLineExtractorConfigFile.getPath()"
166516,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,335,,"            , ""-i "" + multilineFile.getPath()"
166517,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,350,,"    assertTrue(results.get(0).getValue().getMetadata().get(""meta"").toString().startsWith(""foo""));"
166518,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,350,,"    assertTrue(results.get(0).getValue().getMetadata().get(""meta"").toString().startsWith(""foo""));"
166519,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,351,,"    assertTrue(results.get(0).getValue().getMetadata().get(""host"").toString().startsWith(""google""));"
166520,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/flatfile/SimpleEnrichmentFlatFileLoaderIntegrationTest.java,469,,"    assertThat(results.get(0).getKey().getIndicator(), startsWith(""GOOGLE""));"
166521,./TargetProjects/metron/metron-platform/metron-data-management/src/test/java/org/apache/metron/dataloads/nonbulk/geo/MaxmindDbEnrichmentLoaderTest.java,77,,"    assertEquals(""test:2181"", MaxmindDbEnrichmentLoader.GeoEnrichmentOptions.ZK_QUORUM.get(cli).trim());"
166522,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/main/java/org/apache/metron/elasticsearch/dao/ElasticsearchUpdateDao.java,108,,"  @SuppressWarnings(""unchecked"")"
166523,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/bulk/ElasticsearchBulkDocumentWriterTest.java,65,,"        String index = ""bro_index"";"
166524,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/dao/ElasticsearchColumnMetadataDaoTest.java,75,,"            ""bro_index_2017.10.03.21"","
166525,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/dao/ElasticsearchDaoTest.java,119,,"    columnMetadata.put(""sortByStringDesc"", FieldType.TEXT);"
166526,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/dao/ElasticsearchDaoTest.java,120,,"    columnMetadata.put(""sortByIntAsc"", FieldType.INTEGER);"
166527,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/dao/ElasticsearchMetaAlertDaoTest.java,144,,"    doThrow(new IndexNotFoundException(ElasticsearchMetaAlertDao.METAALERTS_INDEX)).when(emauDao).getMetaAlertsForAlert(""alert_one"");"
166528,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchMetaAlertIntegrationTest.java,169,,"    alerts.get(0).put(METAALERT_FIELD, Collections.singletonList(""meta_active""));"
166529,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchMetaAlertIntegrationTest.java,170,,"    alerts.get(0).put(""ip_src_addr"", ""192.168.1.1"");"
166530,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchMetaAlertIntegrationTest.java,171,,"    alerts.get(0).put(""ip_src_port"", 8010);"
166531,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,114,,"    Response response = lowLevelClient.performRequest(""PUT"", ""/_template/bro_template"", Collections.emptyMap(), broEntity);"
166532,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,139,,"    es.add(BRO_INDEX, ""bro"", broDocuments.subList(0, 4), true);"
166533,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,166,,"    properties.put(""long_field"", longType);"
166534,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,169,,"    properties.put(""latitude"", floatType);"
166535,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,172,,"    properties.put(""score"", doubleType);"
166536,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,189,,"      assertEquals(FieldType.KEYWORD, fieldTypes.get(""ttl""));"
166537,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/integration/ElasticsearchSearchIntegrationTest.java,191,,"      assertEquals(FieldType.KEYWORD, fieldTypes.get(""source:type""));"
166538,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/writer/ElasticsearchWriterTest.java,66,,"        BulkWriterResponse response = esWriter.write(""bro"", writerConfiguration, messages);"
166539,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/writer/ElasticsearchWriterTest.java,70,,"        assertTrue(response.getSuccesses().contains(new MessageId(""message1"")));"
166540,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/writer/ElasticsearchWriterTest.java,95,,"        assertTrue(response.getSuccesses().contains(new MessageId(""message2"")));"
166541,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/writer/ElasticsearchWriterTest.java,107,,"        results.addFailure(createDocument(messages.get(0)), cause, ""error"");"
166542,./TargetProjects/metron/metron-platform/metron-elasticsearch/metron-elasticsearch-common/src/test/java/org/apache/metron/elasticsearch/writer/ElasticsearchWriterTest.java,267,,"        doReturn(""bro_index"").when(esWriter).getIndexName(eq(""bro""), any(), eq(writerConfiguration));"
166543,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/main/java/org/apache/metron/enrichment/stellar/GeoHashFunctions.java,43,,"          ,namespace=""GEOHASH"""
166544,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/main/java/org/apache/metron/enrichment/utils/ThreatIntelUtils.java,77,,"    boolean isAlert = ret.containsKey(""is_alert"");"
166545,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/host/HostFromJSONListAdapterTest.java,68,,"    JSONObject actualMessage = hja.enrich(new CacheKey(""dummy"", ip, null));"
166546,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/maxmind/asn/GeoLiteAsnDatabaseTest.java,109,,"        result.get(), ""Remote Local IP should return result based on DB"");"
166547,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/maxmind/geo/GeoLiteCityDatabaseTest.java,170,,"    assertEquals(expectedDmaMessage, result.get(), ""Remote Local IP should return result based on DB"");"
166548,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/simplehbase/SimpleHBaseAdapterTest.java,133,,"    JSONObject actualMessage = sha.enrich(new CacheKey(""test"", ""test"", broSc));"
166549,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/simplehbase/SimpleHBaseAdapterTest.java,135,,"    actualMessage = sha.enrich(new CacheKey(""ip_dst_addr"", ""10.0.2.3"", broSc));"
166550,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,55,,"      assertNotNull(enrichmentConfig.getEnrichmentConfigs().get(""stellar""));"
166551,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,58,,"      assertEquals(""STELLAR_TEST"", enriched.get(""stmt1""));"
166552,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,59,,"      assertEquals(""stellar_test"", enriched.get(""stmt2""));"
166553,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,59,,"      assertEquals(""stellar_test"", enriched.get(""stmt2""));"
166554,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,60,,"      assertEquals(""foo"", enriched.get(""stmt3""));"
166555,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,60,,"      assertEquals(""foo"", enriched.get(""stmt3""));"
166556,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/stellar/StellarAdapterTest.java,73,,"        JSONObject enriched = enrich(message, ""group1"", handler);"
166557,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/adapters/threatintel/ThreatIntelAdapterTest.java,106,,"      add(new LookupKV<>(new EnrichmentKey(""10.0.2.3"", ""10.0.2.3""), new EnrichmentValue(new HashMap<>())));"
166558,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/parallel/ParallelEnricherTest.java,131,,"      put(Constants.SENSOR_TYPE, ""test"");"
166559,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/parallel/ParallelEnricherTest.java,135,,"      config.getConfiguration().putIfAbsent(""stellarContext"", stellarContext);"
166560,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/EnrichmentObjectGetTest.java,89,,"      put(""key"", ""value"");"
166561,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/EnrichmentObjectGetTest.java,91,,"    when(objectCache.get(""/path"")).thenReturn(enrichment);"
166562,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,37,,"  String empireStateHash = (String)StellarProcessorUtils.run(""GEOHASH_FROM_LATLONG(lat, long)"""
166563,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,38,,"                             , ImmutableMap.of(""lat"", empireStatePoint.getLatitude()"
166564,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,39,,"                                              ,""long"",empireStatePoint.getLongitude()"
166565,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,57,,"    assertEquals(jutlandPoint.getLatitude(), (double)latLong.get(""latitude""), 1e-3);"
166566,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,58,,"    assertEquals(jutlandPoint.getLongitude(), (double)latLong.get(""longitude""), 1e-3);"
166567,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,84,,"    assertEquals(""u4pruydqmv"", StellarProcessorUtils.run(""GEOHASH_FROM_LATLONG(lat, long, 10)"""
166568,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,122,,"                             , ImmutableMap.of(""loc"", loc"
166569,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,171,,"            , ImmutableMap.of(""empireState"", empireStateHash"
166570,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,172,,"                    , ""mosconeCenter"", mosconeCenterHash"
166571,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/GeoHashFunctionsTest.java,173,,"                    , ""jutland"", jutlandHash"
166572,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/enrichment/stellar/SimpleHBaseEnrichmentFunctionsTest.java,57,,"        add(new LookupKV<>(new EnrichmentKey(ENRICHMENT_TYPE, ""indicator"" + i)"
166573,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,95,,"                    put(""user.type"", ""admin"");"
166574,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,95,,"                    put(""user.type"", ""admin"");"
166575,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,96,,"                    put(""asset.type"", ""web"");"
166576,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,96,,"                    put(""asset.type"", ""web"");"
166577,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,101,,"        ""Expected a score of 0"");"
166578,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-common/src/test/java/org/apache/metron/threatintel/triage/ThreatTriageTest.java,138,,"                    put(""asset.type"", ""bar"");"
166579,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/main/java/org/apache/metron/enrichment/bolt/UnifiedEnrichmentBolt.java,277,,"      collector.emit(""message"","
166580,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/bolt/GenericEnrichmentBoltTest.java,213,,"    CacheKey cacheKey1 = new CacheKey(""field1"", ""value1"", sensorEnrichmentConfig);"
166581,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/integration/EnrichmentIntegrationTest.java,73,,"    put(""orientation"", ""north"");"
166582,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/integration/EnrichmentIntegrationTest.java,214,,"      add(new LookupKV<>(new EnrichmentKey(MALICIOUS_IP_TYPE, ""10.0.2.3""), new EnrichmentValue(new HashMap<>())));"
166583,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/integration/EnrichmentIntegrationTest.java,331,,"        return evaluationPayload.indexedDoc.getOrDefault(""enrichments.host."" + evaluationPayload.key + "".known_info.local"","""").equals(""YES"");"
166584,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/integration/EnrichmentIntegrationTest.java,471,,"    if(indexedDoc.containsKey(""enrichments.geo."" + DST_IP + "".location_point"")) {"
166585,./TargetProjects/metron/metron-platform/metron-enrichment/metron-enrichment-storm/src/test/java/org/apache/metron/enrichment/integration/EnrichmentIntegrationTest.java,471,,"    if(indexedDoc.containsKey(""enrichments.geo."" + DST_IP + "".location_point"")) {"
166586,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/main/java/org/apache/metron/indexing/dao/HBaseDao.java,218,,"      @SuppressWarnings(""unchecked"")"
166587,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/main/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDao.java,140,,"  @SuppressWarnings(""unchecked"")"
166588,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/MultiIndexDaoTest.java,47,,"    document1 = new Document(new HashMap<>(), ""guid"", ""bro"", 1L);"
166589,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/MultiIndexDaoTest.java,47,,"    document1 = new Document(new HashMap<>(), ""guid"", ""bro"", 1L);"
166590,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/SearchIntegrationTest.java,470,,"      assertEquals(""snort"", results.get(i).getSource().get(getSourceTypeField()));"
166591,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/SearchIntegrationTest.java,472,,"      assertEquals(10 - i + """", results.get(i).getSource().get(""timestamp"").toString());"
166592,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/SearchIntegrationTest.java,475,,"      assertEquals(""bro"", results.get(i).getSource().get(getSourceTypeField()));"
166593,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/SearchIntegrationTest.java,541,,"      assertFalse(results.get(i).getSource().containsKey(""threat:triage:score""));"
166594,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/SearchIntegrationTest.java,606,,"    Map<String, Long> ipSrcAddrCounts = facetCounts.get(""ip_src_addr"");"
166595,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/UpdateDaoTest.java,39,,"    request.setGuid(""guid"");"
166596,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,166,,"    metaAlerts.add(buildMetaAlert(""meta_inactive"", MetaAlertStatus.INACTIVE,"
166597,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,182,,"      SearchResponse searchResponse0 = metaDao.getAllMetaAlertsForAlert(""message_0"");"
166598,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,192,,"      SearchResponse searchResponse1 = metaDao.getAllMetaAlertsForAlert(""message_1"");"
166599,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,197,,"      SearchResponse searchResponse2 = metaDao.getAllMetaAlertsForAlert(""message_2"");"
166600,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,231,,"    sr.setQuery(""*:*"");"
166601,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,295,,"      @SuppressWarnings(""unchecked"")"
166602,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,307,,"      expectedMetaAlert.put(""average"", 1.5d);"
166603,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,308,,"      expectedMetaAlert.put(""min"", 1.0d);"
166604,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,309,,"      expectedMetaAlert.put(""median"", 1.5d);"
166605,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,310,,"      expectedMetaAlert.put(""max"", 2.0d);"
166606,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,311,,"      expectedMetaAlert.put(""count"", 2);"
166607,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,312,,"      expectedMetaAlert.put(""sum"", 3.0d);"
166608,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,346,,"    alerts.get(0).put(METAALERT_FIELD, Collections.singletonList(""meta_alert""));"
166609,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,359,,"        new GetRequest(""message_3"", SENSOR_NAME),"
166610,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,601,,"      requests.add(new GetRequest(""message_"" + i, SENSOR_NAME));"
166611,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,683,,"    alerts.get(0).put(METAALERT_FIELD, Collections.singletonList(""meta_active""));"
166612,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,684,,"    alerts.get(0).put(""ip_src_addr"", ""192.168.1.1"");"
166613,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/MetaAlertIntegrationTest.java,684,,"    alerts.get(0).put(""ip_src_addr"", ""192.168.1.1"");"
166614,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDaoTest.java,301,,"    expectedExistingAlert.put(Constants.GUID, ""child_0"");"
166615,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDaoTest.java,351,,"    Document expectedDeletedDocument = new Document(expectedDeletedAlert, ""child_0"", ""test"", 0L);"
166616,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDaoTest.java,574,,"    metaAlertGuids.add(""metaalert1"");"
166617,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDaoTest.java,575,,"    metaAlertGuids.add(""metaalert2"");"
166618,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/metaalert/lucene/AbstractLuceneMetaAlertUpdateDaoTest.java,578,,"    Document alert = new Document(alertFields, ""alert"", ""test"", 0L);"
166619,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/update/PatchUtilsTest.java,35,,"      put(PatchUtils.PATH, ""/path"");"
166620,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/update/PatchUtilsTest.java,36,,"      put(PatchUtils.VALUE, ""value"");"
166621,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/update/PatchUtilsTest.java,40,,"      put(""path"", ""value"");"
166622,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/dao/update/PatchUtilsTest.java,77,,"      put(""from"", ""value"");"
166623,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/integration/HBaseDaoIntegrationTest.java,88,,"    HBaseDao.Key k = new HBaseDao.Key(""guid"", ""sensorType"");"
166624,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/integration/HBaseDaoIntegrationTest.java,181,,"    fields.put(""guid"", ""add_comment"");"
166625,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/util/IndexingCacheUtilTest.java,40,,"      put(""writer"", new HashMap<String, Object>() {{"
166626,./TargetProjects/metron/metron-platform/metron-indexing/metron-indexing-common/src/test/java/org/apache/metron/indexing/util/IndexingCacheUtilTest.java,44,,"    when(indexingConfigs.getSensorIndexingConfig(""bro"")).thenReturn(broIndexingConfig);"
166627,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/EnrichmentConfigFunctions.java,48,,"    stellarHandler.putIfAbsent(""config"", new LinkedHashMap<String, Object>());"
166628,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/FileSystemFunctions.java,282,,"  @Stellar(namespace=""LOCAL"""
166629,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/FileSystemFunctions.java,297,,"  @Stellar(namespace=""HDFS"""
166630,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/FileSystemFunctions.java,300,,"          ,params = { ""path - The path in HDFS of the file."""
166631,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/FileSystemFunctions.java,315,,"          ,params = { ""path - The path of the file."""
166632,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,175,,"          namespace = ""KAFKA"","
166633,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,180,,"                  ""topic - The name of the Kafka topic"","
166634,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,182,,"                  ""config - Optional map of key/values that override any global properties."""
166635,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,192,,"      String topic = getArg(""topic"", 0, String.class, args);"
166636,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,203,,"        overrides = getArg(""overrides"", 2, Map.class, args);"
166637,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/KafkaFunctions.java,208,,"      properties.put(""max.poll.records"", count);"
166638,./TargetProjects/metron/metron-platform/metron-management/src/main/java/org/apache/metron/management/ThreatTriageFunctions.java,72,,"          namespace = ""THREAT_TRIAGE"""
166639,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ConfigurationFunctionsTest.java,421,,"    run(""CONFIG_PUT('INDEXING', config, 'testIndexingPut')"", ImmutableMap.of(""config"", brop), context);"
166640,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,61,,"      {""ENRICHMENT"", ""group""}"
166641,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,71,,"            ""upper"", VariableResult.withExpression(""FOO"", ""TO_UPPER('foo')""),"
166642,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,72,,"            ""lower"", VariableResult.withExpression(""foo"", ""TO_LOWER('FOO')"")"
166643,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,124,,"    return (Map<String, Object>) stellarMap.get(""config"");"
166644,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,133,,"  @MethodSource(""types"")"
166645,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,137,,"            ""ENRICHMENT_STELLAR_TRANSFORM_ADD(config, type, SHELL_VARS2MAP('upper'), group)"""
166646,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/EnrichmentConfigFunctionsTest.java,139,,"                    , ""type"", enrichmentType"
166647,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/FileSystemFunctionsTest.java,114,,"  @MethodSource(""types"")"
166648,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/FileSystemFunctionsTest.java,117,,"    Object putOut = put.apply(Arrays.asList(""foo"", prefix + ""testPut.dat""), null);"
166649,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/FileSystemFunctionsTest.java,117,,"    Object putOut = put.apply(Arrays.asList(""foo"", prefix + ""testPut.dat""), null);"
166650,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/FileSystemFunctionsTest.java,122,,"    assertFalse(lsOut.contains(""(empty)""));"
166651,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/GrokFunctionsTest.java,39,,"                                                      , ImmutableMap.of(""messages"", ImmutableList.of(message), ""grok"", grokExpr)"
166652,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/IndexingConfigFunctionsTest.java,63,,"                             , toMap(""config"", ""{}"")"
166653,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/IndexingConfigFunctionsTest.java,66,,"    assertEquals(10, IndexingConfigurations.getBatchSize((Map<String, Object>) config.get(""hdfs"")));"
166654,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,139,,"    variables.put(""topic"", topicName);"
166655,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,142,,"    assertEquals(1, run(""KAFKA_PUT(topic, [message1])""));"
166656,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,213,,"    assertEquals(0, view.get(""partition""));"
166657,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,214,,"    assertEquals(0L, view.get(""offset""));"
166658,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,245,,"    assertNull(view.get(""key""));"
166659,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,249,,"    assertEquals(message1, view.get(""value""));"
166660,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,264,,"    run(""KAFKA_PUT(topic, [message1, message2, message3])"");"
166661,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,297,,"    assertEquals(Collections.singletonList(message1), run(""KAFKA_GET(topic, 1)""));"
166662,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/KafkaFunctionsIntegrationTest.java,590,,"    run(""KAFKA_PUT(topic, [ message1, message2, message3 ])"");"
166663,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserConfigFunctionsTest.java,49,,"            ""upper"" , VariableResult.withExpression(""FOO"", ""TO_UPPER('foo')""),"
166664,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserConfigFunctionsTest.java,49,,"            ""upper"" , VariableResult.withExpression(""FOO"", ""TO_UPPER('foo')""),"
166665,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserConfigFunctionsTest.java,76,,"    String newConfig = (String)run(""PARSER_STELLAR_TRANSFORM_ADD(config, SHELL_VARS2MAP('upper'))"", ImmutableMap.of(""config"", emptyTransformationsConfig), context);"
166666,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserConfigFunctionsTest.java,76,,"    String newConfig = (String)run(""PARSER_STELLAR_TRANSFORM_ADD(config, SHELL_VARS2MAP('upper'))"", ImmutableMap.of(""config"", emptyTransformationsConfig), context);"
166667,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserFunctionsTest.java,122,,"    set(""config"", broParserConfig);"
166668,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserFunctionsTest.java,123,,"    assign(""parser"", ""PARSER_INIT('bro', config)"");"
166669,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserFunctionsTest.java,123,,"    assign(""parser"", ""PARSER_INIT('bro', config)"");"
166670,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ParserFunctionsTest.java,132,,"    assertEquals(""bro"", message.get(Constants.SENSOR_TYPE));"
166671,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/StellarParserRunnerTest.java,86,,"        StellarParserRunner runner = new StellarParserRunner(""bro"")"
166672,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,50,,"            ""less"", VariableResult.withExpression(true, ""1 < 2""),"
166673,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,91,,"    String newConfig = (String) run(""THREAT_TRIAGE_SET_AGGREGATOR(config, 'MIN' )"", toMap(""config"", configStr));"
166674,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,100,,"    ThreatTriageProcessor engine = (ThreatTriageProcessor) run(""THREAT_TRIAGE_INIT()"");"
166675,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,102,,"    vars.put(""engine"", engine);"
166676,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,432,,"            toMap(""conf"", configStr));"
166677,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,435,,"    Object result = run(""THREAT_TRIAGE_INIT(confWithRule)"","
166678,./TargetProjects/metron/metron-platform/metron-management/src/test/java/org/apache/metron/management/ThreatTriageFunctionsTest.java,436,,"            toMap(""confWithRule"", confWithRule));"
166679,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/main/java/org/apache/metron/parsers/GrokParser.java,70,,"  @SuppressWarnings(""unchecked"")"
166680,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/main/java/org/apache/metron/parsers/json/JSONMapParser.java,50,,"  @SuppressWarnings(""unchecked"")"
166681,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/MessageParserTest.java,84,,"    Optional<MessageParserResult<JSONObject>> ret = parser.parseOptionalResult(""message"".getBytes("
166682,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/MessageParserTest.java,112,,"        throw new RuntimeException(""parse exception"");"
166683,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,103,,"    parserConfigurations.updateSensorParserConfig(""bro"", broConfig);"
166684,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,104,,"    parserConfigurations.updateSensorParserConfig(""snort"", snortConfig);"
166685,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,137,,"      add(""test"");"
166686,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,204,,"    RawMessage rawMessage = new RawMessage(""raw_message"".getBytes(StandardCharsets.UTF_8), new HashMap<>());"
166687,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,290,,"    inputMessage.put(""guid"", ""guid"");"
166688,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,291,,"    inputMessage.put(""ip_src_addr"", ""192.168.1.1"");"
166689,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,291,,"    inputMessage.put(""ip_src_addr"", ""192.168.1.1"");"
166690,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,292,,"    inputMessage.put(""ip_dst_addr"", ""192.168.1.2"");"
166691,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,292,,"    inputMessage.put(""ip_dst_addr"", ""192.168.1.2"");"
166692,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/ParserRunnerImplTest.java,297,,"    expectedOutput.put(""source.type"", ""bro"");"
166693,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,82,,"      assertEquals(""foo"", o.get(""col1""));"
166694,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,82,,"      assertEquals(""foo"", o.get(""col1""));"
166695,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,83,,"      assertEquals(""bar"", o.get(""col2""));"
166696,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,83,,"      assertEquals(""bar"", o.get(""col2""));"
166697,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,84,,"      assertEquals(""grok"", o.get(""col3""));"
166698,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/csv/CSVParserTest.java,84,,"      assertEquals(""grok"", o.get(""col3""));"
166699,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/integration/EnvelopedParserIntegrationTest.java,61,,"      put(""metadata_field"", ""metadata_val"");"
166700,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserQueryTest.java,67,,"      put(JSONMapParser.JSONP_QUERY, ""$.foo"");"
166701,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserQueryTest.java,74,,"    assertEquals(""foo1"", message.get(""name""));"
166702,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserQueryTest.java,75,,"    assertEquals(""bar"", message.get(""value""));"
166703,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserQueryTest.java,76,,"    assertEquals(1.0, message.get(""number""));"
166704,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserQueryTest.java,77,,"    assertNotNull(message.get(""timestamp""));"
166705,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserTest.java,67,,"    assertNotNull(message.get(""timestamp""));"
166706,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserWrappedQueryTest.java,61,,"      put(JSONMapParser.JSONP_QUERY, ""$.foo"");"
166707,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserWrappedQueryTest.java,70,,"    assertEquals(1.0, message.get(""number""));"
166708,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/json/JSONMapParserWrappedQueryTest.java,71,,"    assertNotNull(message.get(""timestamp""));"
166709,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers-common/src/test/java/org/apache/metron/parsers/regex/RegularExpressionsParserTest.java,115,,"            ""<38>Jun 20 15:01:17 deviceName sshd[11672]: Accepted publickey for prod from 22.22.22.22 port 55555 ssh2"";"
166710,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/asa/BasicAsaParser.java,64,,"      .put(""ASA-6-302013"", ""CISCOFW302013_302014_302015_302016"")"
166711,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/asa/BasicAsaParser.java,82,,"      .put(""ASA-7-710001"", ""CISCOFW710001_710002_710003_710005_710006"")"
166712,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/asa/BasicAsaParser.java,161,,"	metronJson.put(""ciscotag"", syslogJson.get(""CISCOTAG""));"
166713,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/cef/CEFParser.java,77,,"		sb.append(""\\|"");"
166714,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/ise/ISEParser.java,51,,"  @SuppressWarnings(""unused"")"
166715,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/ise/ISEParser.java,63,,"    throw new Error(""Missing return statement in function"");"
166716,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/leef/LEEFParser.java,113,,"    sb.append(""\\|"");"
166717,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/websphere/GrokWebSphereParser.java,48,,"    if (message.containsKey(""message"")) {"
166718,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/main/java/org/apache/metron/parsers/websphere/GrokWebSphereParser.java,62,,"  @SuppressWarnings(""unchecked"")"
166719,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,86,,"        assertEquals(asaJson.get(""original_string""), rawMessage);"
166720,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,87,,"        assertEquals(""10.30.9.121"", asaJson.get(""ip_src_addr""));"
166721,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,88,,"        assertEquals(""192.168.135.51"", asaJson.get(""ip_dst_addr""));"
166722,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,89,,"        assertEquals(54580, asaJson.get(""ip_src_port""));"
166723,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,90,,"        assertEquals(42028, asaJson.get(""ip_dst_port""));"
166724,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/asa/BasicAsaParserTest.java,91,,"        assertEquals(1470358894000L, (long) asaJson.get(""timestamp""));"
166725,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,107,,"      	assertEquals(broJson.get(""bro_timestamp""), expectedBroTimestamp);"
166726,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,109,,"	assertEquals(broJson.get(""timestamp"").toString(), expectedTimestamp);"
166727,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,111,,"	assertEquals(broJson.get(""ip_src_addr"").toString(), rawJson.get(""id.orig_h"").toString());"
166728,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,111,,"	assertEquals(broJson.get(""ip_src_addr"").toString(), rawJson.get(""id.orig_h"").toString());"
166729,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,112,,"	assertEquals(broJson.get(""ip_dst_addr"").toString(), rawJson.get(""id.resp_h"").toString());"
166730,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,112,,"	assertEquals(broJson.get(""ip_dst_addr"").toString(), rawJson.get(""id.resp_h"").toString());"
166731,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,113,,"	assertEquals(broJson.get(""ip_src_port""), rawJson.get(""id.orig_p""));"
166732,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,113,,"	assertEquals(broJson.get(""ip_src_port""), rawJson.get(""id.orig_p""));"
166733,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,114,,"        assertEquals(broJson.get(""ip_dst_port""), rawJson.get(""id.resp_p""));"
166734,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,114,,"        assertEquals(broJson.get(""ip_dst_port""), rawJson.get(""id.resp_p""));"
166735,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,115,,"        assertEquals(broJson.get(""uid"").toString(), rawJson.get(""uid"").toString());"
166736,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,116,,"        assertEquals(broJson.get(""trans_id"").toString(), rawJson.get(""trans_id"").toString());"
166737,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,122,,"	assertTrue(broJson.get(""original_string"").toString().startsWith(""DNS""));"
166738,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,152,,"	@SuppressWarnings(""rawtypes"")"
166739,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,170,,"		assertEquals(broJson.get(""method"").toString(), rawJson.get(""method"").toString());"
166740,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,171,,"		assertEquals(broJson.get(""host"").toString(), rawJson.get(""host"").toString());"
166741,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,172,,"		assertEquals(broJson.get(""resp_mime_types"").toString(), rawJson.get(""resp_mime_types"").toString());"
166742,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,187,,"							""\""id.resp_p\"":80,\""trans_depth\"":2,\""method\"":\""GET\"",\""host\"":\""7oqnsnzwwnm6zb7y.gigapaysun.com\"",\""uri\"":\""/img/flags/it.png\"",\""referrer\"":\""http://7oqnsnzwwnm6zb7y.gigapaysun.com/11iQmfg\"",\""user_agent\"":\""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)\"",\""request_body_len\"":0,\""response_body_len\"":552,\""status_code\"":200,\""status_msg\"":\""OK\"",\""tags\"":[],\""resp_fuids\"":[\""F3m7vB2RjUe4n01aqj\""],\""resp_mime_types\"":[\""image/png\""]}}"";"
166743,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,388,,"		assertEquals(broJson.get(""fuid"").toString(), rawJson.get(""fuid"").toString());"
166744,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,440,,"                assertEquals(broJson.get(""proto"").toString(), rawJson.get(""proto"").toString());"
166745,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,584,,"                assertEquals(broJson.get(""subject"").toString(), rawJson.get(""subject"").toString());"
166746,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,630,,"                assertEquals(broJson.get(""trans_depth"").toString(), rawJson.get(""trans_depth"").toString());"
166747,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,683,,"                assertEquals(broJson.get(""version"").toString(), rawJson.get(""version"").toString());"
166748,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,733,,"                assertEquals(broJson.get(""name"").toString(), rawJson.get(""name"").toString());"
166749,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,735,,"                assertEquals(broJson.get(""peer"").toString(), rawJson.get(""peer"").toString());"
166750,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,835,,"                assertEquals(broJson.get(""mac"").toString(), rawJson.get(""mac"").toString());"
166751,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,932,,"                assertEquals(broJson.get(""host_p"").toString(), rawJson.get(""host_p"").toString());"
166752,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,933,,"                assertEquals(broJson.get(""software_type"").toString(), rawJson.get(""software_type"").toString());"
166753,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,938,,"                assertEquals(broJson.get(""unparsed_version"").toString(), rawJson.get(""unparsed_version"").toString());"
166754,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,1016,,"                assertEquals(broJson.get(""username"").toString(), rawJson.get(""username"").toString());"
166755,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/bro/BasicBroParserTest.java,1017,,"                assertEquals(broJson.get(""result"").toString(), rawJson.get(""result"").toString());"
166756,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,44,,"  @SuppressWarnings(""unchecked"")"
166757,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,53,,"    expected.put(BasicPaloAltoFirewallParser.ReceiveTime, ""2017/08/11 12:37:58"");"
166758,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,54,,"    expected.put(BasicPaloAltoFirewallParser.SerialNum, ""008900008659"");"
166759,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,58,,"    expected.put(BasicPaloAltoFirewallParser.GenerateTime, ""2017/08/11 11:37:58"");"
166760,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,59,,"    expected.put(BasicPaloAltoFirewallParser.VirtualSystem, ""vsys1"");"
166761,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,65,,"    expected.put(BasicPaloAltoFirewallParser.Seqno, ""1354"");"
166762,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,66,,"    expected.put(BasicPaloAltoFirewallParser.ActionFlags, ""0x0"");"
166763,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,68,,"    expected.put(""original_string"", SYSTEM_61);"
166764,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,69,,"    expected.put(""timestamp"", actual.get(""timestamp""));"
166765,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,122,,"    expected.put(BasicPaloAltoFirewallParser.Type, ""CONFIG"");"
166766,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,127,,"    expected.put(BasicPaloAltoFirewallParser.HOST, ""192.168.14.162"");"
166767,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,129,,"    expected.put(BasicPaloAltoFirewallParser.Command, ""edit"");"
166768,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,130,,"    expected.put(BasicPaloAltoFirewallParser.Admin, ""admin"");"
166769,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,131,,"    expected.put(BasicPaloAltoFirewallParser.Client, ""Web"");"
166770,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,132,,"    expected.put(BasicPaloAltoFirewallParser.Result, ""Succeeded"");"
166771,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,133,,"    expected.put(BasicPaloAltoFirewallParser.ConfigurationPath, ""config shared log-settings config"");"
166772,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,270,,"    expected.put(BasicPaloAltoFirewallParser.Category, ""any"");"
166773,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,284,,"    expected.put(BasicPaloAltoFirewallParser.NATDestinationIP, ""0.0.0.0"");"
166774,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,288,,"    expected.put(BasicPaloAltoFirewallParser.OutboundInterface, ""ethernet1/1"");"
166775,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,292,,"    expected.put(BasicPaloAltoFirewallParser.IPProtocol, ""tcp"");"
166776,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,300,,"    expected.put(BasicPaloAltoFirewallParser.SourceLocation, ""10.0.0.0-10.255.255.255"");"
166777,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,308,,"    expected.put(BasicPaloAltoFirewallParser.Type, ""THREAT"");"
166778,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,364,,"    expected.put(BasicPaloAltoFirewallParser.Type, ""TRAFFIC"");"
166779,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,380,,"    expected.put(BasicPaloAltoFirewallParser.Category, ""computer-and-internet-info"");"
166780,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,398,,"    expected.put(BasicPaloAltoFirewallParser.OutboundInterface, ""vlan.1"");"
166781,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,426,,"    expected.put(BasicPaloAltoFirewallParser.DeviceName, ""PAN1"");"
166782,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/paloalto/BasicPaloAltoFirewallParserTest.java,571,,"    expected.put(BasicPaloAltoFirewallParser.DestinationPort, ""443"");"
166783,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,71,,"		assertEquals(133, parsedJSON.get(""priority""));"
166784,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,72,,"		assertEquals(expectedTimestamp, parsedJSON.get(""timestamp""));"
166785,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,73,,"		assertEquals(""ABCXML1413"", parsedJSON.get(""hostname""));"
166786,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,74,,"		assertEquals(""rojOut"", parsedJSON.get(""security_domain""));"
166787,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,75,,"		assertEquals(""0x81000033"", parsedJSON.get(""event_code""));"
166788,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,76,,"		assertEquals(""auth"", parsedJSON.get(""event_type""));"
166789,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,76,,"		assertEquals(""auth"", parsedJSON.get(""event_type""));"
166790,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,77,,"		assertEquals(""notice"", parsedJSON.get(""severity""));"
166791,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,79,,"		assertEquals(""rick007"", parsedJSON.get(""username""));"
166792,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,80,,"		assertEquals(""120.43.200.6"", parsedJSON.get(""ip_src_addr""));"
166793,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,102,,"		assertEquals(""info"", parsedJSON.get(""severity""));"
166794,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,128,,"		assertEquals(""rbm"", parsedJSON.get(""process""));"
166795,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsers/src/test/java/org/apache/metron/parsers/websphere/GrokWebSphereParserTest.java,129,,"		assertEquals(""trans(3502888135)[request] gtid(3502888135): RBM: Resource access denied."", parsedJSON.get(""message""));"
166796,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/main/java/org/apache/metron/parsers/topology/ParserTopologyCLI.java,113,,"      o.setArgName(""NUM_TASKS"");"
166797,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,114,,"    ParserBolt parserBolt = new ParserBolt(""zookeeperUrl"", parserRunner, new HashMap<String, WriterHandler>() {{"
166798,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,115,,"      put(""yaf"", writerHandler);"
166799,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,164,,"    when(yafConfig.getSensorTopic()).thenReturn(""yafTopic"");"
166800,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,245,,"    when(messageGetStrategy.get(t1)).thenReturn(""originalMessage"".getBytes(StandardCharsets.UTF_8));"
166801,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,269,,"    message.put(Constants.GUID, ""messageId"");"
166802,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/ParserBoltTest.java,270,,"    message.put(""field"", ""value"");"
166803,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/WriterBoltTest.java,81,,"    String sensorType = ""test"";"
166804,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/WriterBoltTest.java,91,,"      message.put(""value"", String.format(MESSAGE_FORMAT, i + 1));"
166805,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/bolt/WriterBoltTest.java,92,,"      when(t.getValueByField(eq(""message""))).thenReturn(message);"
166806,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,55,,"    broConfig.setSensorTopic(""bro"");"
166807,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,63,,"            .createWriterConfigs(""zookeeperUrl"","
166808,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,64,,"                    Optional.of(""brokerUrl""),"
166809,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,66,,"                    Optional.of(""securityProtocol""),"
166810,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,82,,"    snortConfig.setSensorTopic(""snort"");"
166811,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyBuilderTest.java,136,,"    yafConfig.setSensorTopic(""yaf"");"
166812,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,101,,"    CommandLine cli = new CLIBuilder().with(ParserTopologyCLI.ParserOptions.BROKER_URL, ""mybroker"")"
166813,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,102,,"                                      .with(ParserTopologyCLI.ParserOptions.ZK_QUORUM, ""myzk"")"
166814,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,103,,"                                      .with(ParserTopologyCLI.ParserOptions.SENSOR_TYPES, ""mysensor"")"
166815,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,189,,"    File extraFile = File.createTempFile(""extra"", ""json"");"
166816,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,507,,"                    , ""PLAINTEXT"""
166817,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,511,,"                      config.setSecurityProtocol(""KERBEROS"");"
166818,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,578,,"                config.setSecurityProtocol(""PLAINTEXTSASL_FROM_ZK"");"
166819,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/parsers/topology/ParserTopologyCLITest.java,670,,"      put(""extra_config"", ""from_file"");"
166820,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/writers/integration/WriterBoltIntegrationTest.java,64,,"      if (input.get(""action"") != null && input.get(""action"").equals(""invalid"")) {"
166821,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/writers/integration/WriterBoltIntegrationTest.java,135,,"    final String sensorType = ""dummy"";"
166822,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/writers/integration/WriterBoltIntegrationTest.java,163,,"        assertTrue(ImmutableSet.of(""foo"", ""bar"", ""baz"").contains(j.get(""dummy"")));"
166823,./TargetProjects/metron/metron-platform/metron-parsing/metron-parsing-storm/src/test/java/org/apache/metron/writers/integration/WriterBoltIntegrationTest.java,255,,"        .withComponent(""kafka"", kafkaComponent)"
166824,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java,54,,"    options.addOption(newOption(""st"", ""start_time"", true, ""(required) Packet start time range."", true));"
166825,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java,57,,"    options.addOption(newOption(""et"", ""end_time"", true, ""Packet end time range. Default is current system time.""));"
166826,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/main/java/org/apache/metron/pcap/query/CliParser.java,58,,"    options.addOption(newOption(""df"", ""date_format"", true, ""Date format to use for parsing start_time and end_time. Default is to use time in millis since the epoch.""));"
166827,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,76,,"            ""fixed"","
166828,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,77,,"            ""-start_time"", ""500"","
166829,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,77,,"            ""-start_time"", ""500"","
166830,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,78,,"            ""-ip_src_addr"", ""192.168.1.1"","
166831,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,78,,"            ""-ip_src_addr"", ""192.168.1.1"","
166832,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,79,,"            ""-ip_dst_addr"", ""192.168.1.2"","
166833,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,79,,"            ""-ip_dst_addr"", ""192.168.1.2"","
166834,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,80,,"            ""-ip_src_port"", ""8081"","
166835,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,80,,"            ""-ip_src_port"", ""8081"","
166836,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,81,,"            ""-ip_dst_port"", ""8082"","
166837,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,81,,"            ""-ip_dst_port"", ""8082"","
166838,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,82,,"            ""-protocol"", ""6"","
166839,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,105,,"    assertThat(""Expect no errors on run"", cli.run(args), equalTo(0));"
166840,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,157,,"            ""-end_time"", ""1000"","
166841,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,157,,"            ""-end_time"", ""1000"","
166842,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,158,,"            ""-base_path"", ""/base/path"","
166843,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,158,,"            ""-base_path"", ""/base/path"","
166844,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,159,,"            ""-base_output_path"", ""/base/output/path"","
166845,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,159,,"            ""-base_output_path"", ""/base/output/path"","
166846,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,166,,"            ""-num_reducers"", ""10"","
166847,./TargetProjects/metron/metron-platform/metron-pcap-backend/src/test/java/org/apache/metron/pcap/query/PcapCliTest.java,264,,"            ""-query"", ""some query string"""
166848,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,75,,"    globalHeaderJsonTemplateSB.append(""<\""global_header\"":<\""pcap_id\"":\"""").append(""{0}"").append('""');"
166849,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,76,,"    globalHeaderJsonTemplateSB.append("",\""inc_len\"":"").append(""{1}"");"
166850,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,77,,"    globalHeaderJsonTemplateSB.append("",\""orig_len\"":"").append(""{2}"");"
166851,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,78,,"    globalHeaderJsonTemplateSB.append("",\""ts_sec\"":"").append(""{3}"");"
166852,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,79,,"    globalHeaderJsonTemplateSB.append("",\""ts_usec\"":"").append(""{4}"");"
166853,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,88,,"    ipv4HeaderJsonTemplateSB.append("",\""ip_dst_addr\"":\"""").append(""{1}"");"
166854,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,96,,"    ipv4HeaderJsonTemplateSB.append("",\""ip_src_addr\"":\"""").append(""{9}"");"
166855,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,108,,"    tcpHeaderJsonTemplateSB.append("",\""dst_addr\"":\"""").append(""{4}"");"
166856,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/PacketInfo.java,117,,"    tcpHeaderJsonTemplateSB.append(""\"",\""src_addr\"":\"""").append(""{13}"");"
166857,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilter.java,68,,"        System.out.println(""Processing: "" + kv.getKey() + "" => "" + kv.getValue());"
166858,./TargetProjects/metron/metron-platform/metron-pcap/src/main/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilter.java,68,,"        System.out.println(""Processing: "" + kv.getKey() + "" => "" + kv.getValue());"
166859,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/PcapHelperTest.java,94,,"    when(packetInfo.getPacketBytes()).thenReturn(""packet bytes"".getBytes(StandardCharsets.UTF_8));"
166860,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/PcapPackerComparatorTest.java,68,,"    assertTrue(comp.compare(earlier, later) < 0, ""Earlier should be less than later"");"
166861,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/PcapPackerComparatorTest.java,69,,"    assertTrue(comp.compare(later, earlier) > 0, ""Later should be greater than earlier"");"
166862,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilterTest.java,40,,"      put(Constants.Fields.SRC_ADDR.getName(), ""src_ip"");"
166863,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilterTest.java,42,,"      put(Constants.Fields.DST_ADDR.getName(), ""dst_ip"");"
166864,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilterTest.java,44,,"      put(Constants.Fields.INCLUDES_REVERSE_TRAFFIC.getName(), ""false"");"
166865,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/fixed/FixedPcapFilterTest.java,48,,"    assertThat(""string representation did not match"", actual, equalTo(expected));"
166866,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/query/QueryPcapFilterTest.java,41,,"    assertThat(""string representation did not match"", actual, equalTo(expected));"
166867,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/query/QueryPcapFilterTest.java,76,,"            put(Constants.Fields.SRC_ADDR.getName(), ""src_ip"");"
166868,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/filter/query/QueryPcapFilterTest.java,78,,"            put(Constants.Fields.DST_ADDR.getName(), ""dst_ip"");"
166869,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,42,,"    filesIn.add(new Path(""/apath/pcap_pcap5_1495135372055519000_2_pcap-9-1495134910""));"
166870,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,43,,"    filesIn.add(new Path(""/apath/pcap_pcap5_1495135372168719000_1_pcap-9-1495134910""));"
166871,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,44,,"    filesIn.add(new Path(""/apath/pcap_pcap5_1495135377055375000_0_pcap-9-1495134910""));"
166872,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,45,,"    filesIn.add(new Path(""/apath/pcap_pcap5_1495135512102506000_4_pcap-9-1495134910""));"
166873,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,46,,"    filesIn.add(new Path(""/apath/pcap_pcap5_1495135512123943000_3_pcap-9-1495134910""));"
166874,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,111,,"      add(new Path(""/apps/metron/pcap/pcap_pcap_"" + firstFileTSNanos + ""_0_73686171-64a1-46e5-9e67-66cf603fb094""));"
166875,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,111,,"      add(new Path(""/apps/metron/pcap/pcap_pcap_"" + firstFileTSNanos + ""_0_73686171-64a1-46e5-9e67-66cf603fb094""));"
166876,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/mr/FileFilterUtilTest.java,126,,"        add(new Path(""/apps/metron/pcap/pcap1_pcap_"" + secondFileTSNanos + ""_0_73686171-64a1-46e5-9e67-66cf603fb094""));"
166877,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/pattern/ByteArrayMatchingUtilTest.java,88,,"    assertTrue(strategy.evaluate(""`metron`"", ""metron"".getBytes(StandardCharsets.UTF_8)));"
166878,./TargetProjects/metron/metron-platform/metron-pcap/src/test/java/org/apache/metron/pcap/pattern/ByteArrayMatchingUtilTest.java,88,,"    assertTrue(strategy.evaluate(""`metron`"", ""metron"".getBytes(StandardCharsets.UTF_8)));"
166879,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrColumnMetadataTest.java,44,,"      put(""name"", ""string"");"
166880,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrColumnMetadataTest.java,44,,"      put(""name"", ""string"");"
166881,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrColumnMetadataTest.java,45,,"      put(""type"", ""string"");"
166882,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrColumnMetadataTest.java,92,,"    doReturn(broFields).when(solrColumnMetadataDao).getIndexFields(""bro"");"
166883,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrDaoTest.java,128,,"    solrDao.update(document, Optional.of(""bro""));"
166884,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,70,,"    when(searchRequest.getQuery()).thenReturn(""query"");"
166885,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,105,,"    when(groupRequest.getIndices()).thenReturn(Arrays.asList(""bro"", ""snort""));"
166886,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,105,,"    when(groupRequest.getIndices()).thenReturn(Arrays.asList(""bro"", ""snort""));"
166887,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,145,,"    group1.setField(""field1"");"
166888,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,147,,"    group2.setField(""field2"");"
166889,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,158,,"    expectedSolrQuery.set(""collection"", ""bro,snort"");"
166890,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,182,,"    when(client.getById(""collection"", ""guid"")).thenReturn(solrDocument);"
166891,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,263,,"    solrDocument1.setField(Constants.GUID, ""id1"");"
166892,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,266,,"    solrDocument2.setField(Constants.GUID, ""id2"");"
166893,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,315,,"    when(solrDocument.getFieldValue(""field1"")).thenReturn(""value1"");"
166894,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,316,,"    when(solrDocument.getFieldValue(""field2"")).thenReturn(""value2"");"
166895,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrSearchDaoTest.java,410,,"    groupRequest.setScoreField(""score"");"
166896,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrUpdateDaoTest.java,74,,"    when(indexingConfigs.getSensorIndexingConfig(""bro"")).thenReturn(broIndexingConfig);"
166897,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrUpdateDaoTest.java,90,,"      put(""field"", ""value"");"
166898,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrUpdateDaoTest.java,90,,"      put(""field"", ""value"");"
166899,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/dao/SolrUpdateDaoTest.java,91,,"    }}, ""guid"", ""bro"", 0L);"
166900,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrMetaAlertIntegrationTest.java,140,,"    alerts.get(0).put(METAALERT_FIELD, Collections.singletonList(""meta_active""));"
166901,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrMetaAlertIntegrationTest.java,141,,"    alerts.get(0).put(""ip_src_addr"", ""192.168.1.1"");"
166902,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrMetaAlertIntegrationTest.java,142,,"    alerts.get(0).put(""ip_src_port"", 8010);"
166903,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrMetaAlertIntegrationTest.java,196,,"        searchResponse.getResults().get(0).getSource().get(""guid""));"
166904,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrSearchIntegrationTest.java,58,,"    broData = SearchIntegrationTest.broData.replace(""source:type"", ""source.type"");"
166905,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrSearchIntegrationTest.java,60,,"    solrComponent.addCollection(""bro"", ""./src/main/config/schema/bro"");"
166906,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrSearchIntegrationTest.java,61,,"    solrComponent.addCollection(""snort"", ""./src/main/config/schema/snort"");"
166907,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/integration/SolrUpdateIntegrationTest.java,58,,"    solrComponent.addCollection(""error"", ""./src/main/config/schema/error"");"
166908,./TargetProjects/metron/metron-platform/metron-solr/metron-solr-common/src/test/java/org/apache/metron/solr/writer/SolrWriterTest.java,103,,"    message1.put(Constants.SENSOR_TYPE, ""test"");"
166909,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,43,,"  private static final String SENSOR_TYPE= ""dummy"";"
166910,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,73,,"              add(new BulkMessage<>(""messageId"", new JSONObject(ImmutableMap.of(""ip"", ""localhost"", ""user"", ""cstella"", ""foo"", ""bar""))));"
166911,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,73,,"              add(new BulkMessage<>(""messageId"", new JSONObject(ImmutableMap.of(""ip"", ""localhost"", ""user"", ""cstella"", ""foo"", ""bar""))));"
166912,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,73,,"              add(new BulkMessage<>(""messageId"", new JSONObject(ImmutableMap.of(""ip"", ""localhost"", ""user"", ""cstella"", ""foo"", ""bar""))));"
166913,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,73,,"              add(new BulkMessage<>(""messageId"", new JSONObject(ImmutableMap.of(""ip"", ""localhost"", ""user"", ""cstella"", ""foo"", ""bar""))));"
166914,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/hbase/SimpleHBaseEnrichmentWriterTest.java,73,,"              add(new BulkMessage<>(""messageId"", new JSONObject(ImmutableMap.of(""ip"", ""localhost"", ""user"", ""cstella"", ""foo"", ""bar""))));"
166915,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,72,,"              put(""kafka.brokerUrl"" , ""localhost:6667"");"
166916,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,72,,"              put(""kafka.brokerUrl"" , ""localhost:6667"");"
166917,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,74,,"              put(""kafka.producerConfigs"" , ImmutableMap.of(""key1"", 1, ""key2"", ""value2""));"
166918,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,74,,"              put(""kafka.producerConfigs"" , ImmutableMap.of(""key1"", 1, ""key2"", ""value2""));"
166919,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,74,,"              put(""kafka.producerConfigs"" , ImmutableMap.of(""key1"", 1, ""key2"", ""value2""));"
166920,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,74,,"              put(""kafka.producerConfigs"" , ImmutableMap.of(""key1"", 1, ""key2"", ""value2""));"
166921,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,81,,"    assertEquals(producerConfigs.get(""key.serializer""), ""org.apache.kafka.common.serialization.StringSerializer"");"
166922,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,117,,"              put(""kafka.topicField"" , ""kafka_topic"");"
166923,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,123,,"    assertEquals( ""metron"""
166924,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-common/src/test/java/org/apache/metron/writer/kafka/KafkaWriterTest.java,178,,"    successMessage.put(""value"", ""success"");"
166925,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/AckTuplesPolicyTest.java,74,,"    message1.put(""value"", ""message1"");"
166926,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/AckTuplesPolicyTest.java,74,,"    message1.put(""value"", ""message1"");"
166927,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/AckTuplesPolicyTest.java,75,,"    message2.put(""value"", ""message2"");"
166928,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/AckTuplesPolicyTest.java,76,,"    message3.put(""value"", ""message3"");"
166929,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/bolt/BulkMessageWriterBoltTest.java,93,,"    sampleMessage.put(""field"", ""value1"");"
166930,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/bolt/BulkMessageWriterBoltTest.java,113,,"            ""zookeeperUrl"", ""INDEXING"")"
166931,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/bolt/BulkMessageWriterBoltTest.java,113,,"            ""zookeeperUrl"", ""INDEXING"")"
166932,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/bolt/BulkMessageWriterBoltTest.java,116,,"            .withMessageGetterField(""message""));"
166933,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/bolt/BulkMessageWriterBoltTest.java,139,,"            new FileInputStream(""../"" + BaseEnrichmentBoltTest.sampleSensorIndexingConfigPath));"
166934,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,70,,"            .withExtension("".json"")"
166935,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,71,,"            .withPrefix(""prefix-"");"
166936,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,114,,"  @SuppressWarnings(""unchecked"")"
166937,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,122,,"    message.put(""test.key"", ""test.value"");"
166938,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,122,,"    message.put(""test.key"", ""test.value"");"
166939,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,279,,"    message.put(""test.key2"", ""test.value2"");"
166940,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,279,,"    message.put(""test.key2"", ""test.value2"");"
166941,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,284,,"      add(new BulkMessage(""message1"", message));"
166942,./TargetProjects/metron/metron-platform/metron-writer/metron-writer-storm/src/test/java/org/apache/metron/writer/hdfs/HdfsWriterTest.java,311,,"    String function = ""FORMAT('test-%s/%s', test.key, test.key)"";"
166943,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/common/StellarCompiler.java,400,,"  @SuppressWarnings(""unchecked"")"
166944,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/common/utils/ConcatMap.java,125,,"    throw new UnsupportedOperationException(""Merged map is immutable."");"
166945,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/common/utils/ConcatMap.java,159,,"  @SuppressWarnings(""unchecked"")"
166946,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/common/utils/VFSClassloaderUtil.java,60,,"    vfs.addProvider(""zip"", new org.apache.commons.vfs2.provider.zip.ZipFileProvider());"
166947,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/common/utils/VFSClassloaderUtil.java,75,,"    vfs.addProvider(""tar"", new org.apache.commons.vfs2.provider.tar.TarFileProvider());"
166948,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/ConversionFunctions.java,42,,"          , params = { ""input - Object of string or numeric type""}"
166949,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/DataStructureFunctions.java,36,,"          , namespace=""BLOOM"""
166950,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/DataStructureFunctions.java,46,,"    @SuppressWarnings(""unchecked"")"
166951,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/DateFunctions.java,220,,"          , params = { ""dateTime - The datetime as a long representing the milliseconds since unix epoch"""
166952,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/MapFunctions.java,32,,"          ,namespace=""MAP"""
166953,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/NetworkFunctions.java,155,,"          ,namespace=""URL"""
166954,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/SetFunctions.java,31,,"          , namespace=""SET"""
166955,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/SetFunctions.java,34,,"          , returns = ""A Set"""
166956,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/SetFunctions.java,38,,"    @SuppressWarnings(""unchecked"")"
166957,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/SetFunctions.java,146,,"            namespace = ""MULTISET"","
166958,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/SetFunctions.java,149,,"            returns = ""A multiset"""
166959,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/ShellFunctions.java,58,,"           namespace = ""SHELL"""
166960,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/StringFunctions.java,87,,"          , params = { ""input - String"" }"
166961,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/StringFunctions.java,140,,"    @SuppressWarnings(""unchecked"")"
166962,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/StringFunctions.java,534,,"          throw new ParseException(""Valid JSON string not supplied"");"
166963,./TargetProjects/metron/metron-stellar/stellar-common/src/main/java/org/apache/metron/stellar/dsl/functions/StringFunctions.java,578,,"          throw new ParseException(String.format(""%s is not a valid JSON string"", in), ex);"
166964,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/CachingStellarProcessorTest.java,72,,"    Object result = execute(""TO_UPPER(name)"", contextWithCache);"
166965,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/CachingStellarProcessorTest.java,73,,"    assertEquals(""BLAH"", result);"
166966,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/DefaultStellarStatefulExecutorTest.java,84,,"    executor.assign(""foo"", ""2"", message);"
166967,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarArithmeticTest.java,90,,"      assertEquals(8, run(query, ImmutableMap.of(""one"", 1)));"
166968,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarArithmeticTest.java,94,,"      assertEquals(4, (Integer) run(query, ImmutableMap.of(""one"", 1, ""very_nearly_one"", 1.000001)), 1e-6);"
166969,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarArithmeticTest.java,146,,"          put(Pair.of(""TO_FLOAT(3.0)"", ""TO_LONG(1)""), Float.class);"
166970,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarArithmeticTest.java,147,,"          put(Pair.of(""TO_FLOAT(3)"", ""3.0""), Double.class);"
166971,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarArithmeticTest.java,147,,"          put(Pair.of(""TO_FLOAT(3)"", ""3.0""), Double.class);"
166972,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarAssignmentTest.java,38,,"      assertEquals(""bar + grok"", assignment.getStatement());"
166973,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarComparisonExpressionWithOperatorTest.java,177,,"      assertEquals(""!="".equals(op), runPredicate(""(0f/0f) "" + op + "" (0f/0f)"", new DefaultVariableResolver(variableMap::get,variableMap::containsKey)));"
166974,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/StellarCompilerTest.java,63,,"  @SuppressWarnings(""unchecked"")"
166975,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/evaluators/ComparisonOperatorsEvaluatorTest.java,44,,"  @SuppressWarnings(""unchecked"")"
166976,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,44,,"    runWithArguments(""DOMAIN_REMOVE_SUBDOMAINS"", ""www.google.co.uk"", ""google.co.uk"");"
166977,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,45,,"    runWithArguments(""DOMAIN_REMOVE_SUBDOMAINS"", ""www.google.com"", ""google.com"");"
166978,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,46,,"    runWithArguments(""DOMAIN_REMOVE_SUBDOMAINS"", ""com"", ""com"");"
166979,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,51,,"    runWithArguments(""DOMAIN_REMOVE_SUBDOMAINS"", ""com.com"", ""com.com"");"
166980,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,52,,"    runWithArguments(""DOMAIN_REMOVE_SUBDOMAINS"", ""net.net"", ""net.net"");"
166981,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,64,,"    runWithArguments(""DOMAIN_TO_TLD"", ""www.google.co.uk"", ""co.uk"");"
166982,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,84,,"    runWithArguments(""DOMAIN_REMOVE_TLD"", ""google.com"", ""google"");"
166983,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,105,,"    runWithArguments(""URL_TO_PORT"", ""http://www.google.com/foo/bar"", 80);"
166984,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,105,,"    runWithArguments(""URL_TO_PORT"", ""http://www.google.com/foo/bar"", 80);"
166985,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,106,,"    runWithArguments(""URL_TO_PORT"", ""https://www.google.com/foo/bar"", 443);"
166986,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,113,,"    runWithArguments(""URL_TO_PORT"", ""http://www.google.gmail/foo/bar"", 80);"
166987,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/network/NetworkFunctionsTest.java,118,,"    runWithArguments(""URL_TO_HOST"", ""http://www.google.com/foo/bar"", ""www.google.com"");"
166988,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/DefaultStellarAutoCompleterTest.java,48,,"    completer.addCandidateFunction(""FREUD"");"
166989,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/DefaultStellarAutoCompleterTest.java,49,,"    completer.addCandidateFunction(""FRIEND"");"
166990,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/DefaultStellarAutoCompleterTest.java,50,,"    completer.addCandidateFunction(""FOE"");"
166991,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/specials/AssignmentCommandTest.java,63,,"            ""x := 2 + 2"","
166992,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/specials/MagicListGlobalsTest.java,54,,"    assertEquals(""%globals"", magic.getCommand());"
166993,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/shell/specials/MagicListVariablesTest.java,54,,"    assertEquals(""%vars"", magic.getCommand());"
166994,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/utils/SerDeUtilsTest.java,105,,"    expected.put(""foo"", ""bar"");"
166995,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/utils/SerDeUtilsTest.java,105,,"    expected.put(""foo"", ""bar"");"
166996,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/common/utils/hashing/DefaultHasherTest.java,40,,"    assertEquals(StringUtils.repeat(""00"", 16), new DefaultHasher(""md5"", encoder).getHash(null));"
166997,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/dsl/functions/BasicStellarTest.java,134,,"      String query = ""bar:variable"";"
166998,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/dsl/functions/BasicStellarTest.java,135,,"      assertEquals(""bar"", run(query, ImmutableMap.of(""bar:variable"", ""bar"")));"
166999,./TargetProjects/metron/metron-stellar/stellar-common/src/test/java/org/apache/metron/stellar/dsl/functions/BasicStellarTest.java,136,,"      assertEquals(""grok"", run(query, ImmutableMap.of(""bar:variable"", ""grok"")));"
