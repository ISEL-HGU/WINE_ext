210000,./TargetProjects/openjpa/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/collections/TreeBidiMap.java,111,,"    @SuppressWarnings(""unchecked"")"
210001,./TargetProjects/openjpa/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/collections/TreeBidiMap.java,321,,"            throw new NoSuchElementException(""Map is empty"");"
210002,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java,65,,"        assertEquals(""openjpa.Foo"", ""Foo"", (Map) null, null);"
210003,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java,65,,"        assertEquals(""openjpa.Foo"", ""Foo"", (Map) null, null);"
210004,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java,71,,"        map.put(""bar.Foo"", ""value"");"
210005,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,43,,"        str = ""foo"";"
210006,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,70,,"        assertEquals(""bar"", opts.getProperty(""foo""));"
210007,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,71,,"        assertEquals(""baz"", opts.getProperty(""biz""));"
210008,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,71,,"        assertEquals(""baz"", opts.getProperty(""biz""));"
210009,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,93,,"        assertPluginsCombined(""jpa"", null,"
210010,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java,99,,"        assertPluginsCombined(""jdo"", null,"
210011,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java,61,,"        System.setProperty(""openjpatest.properties"", ""test.properties"");"
210012,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java,74,,"        System.setProperty(""openjpa.sysKey"", ""sysvalue"");"
210013,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java,80,,"        assertEquals(""testvalue"", _conf.getTestKey());"
210014,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java,97,,"        System.setProperty(""openjpa.pluginKey"", ""java.lang.Object"");"
210015,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java,40,,"        defaultTest(new StringValue(""testKey""));"
210016,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java,48,,"        val.setString(""foo"");"
210017,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java,52,,"        val.setDefault(""xxx"");"
210018,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java,55,,"        val.setString(""bar"");"
210019,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java,59,,"        val.setString(""yyy"");"
210020,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/identifier/TestIdentifiers.java,39,,"        String cn0 = nu.convert(newConfig, ""DEFAULT"", n0);"
210021,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java,105,,"                fail(""Allowed modification."");"
210022,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/ClassUtilTest.java,104,,"        Assert.assertEquals(""org.apache.openjpa.lib.util"", ClassUtil.getPackageName(ClassUtilTest.class));"
210023,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/StringUtilTest.java,85,,"        Assert.assertFalse(StringUtil.endsWithIgnoreCase(null, ""bla""));"
210024,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/StringUtilTest.java,143,,"        Assert.assertEquals(35.2345, (double) StringUtil.parse(""35.2345"", double.class), 0.000001);"
210025,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/StringUtilTest.java,178,,"        Assert.assertEquals(""AAA,BBB,CCC"", StringUtil.join(new String[]{""AAA"", ""BBB"", ""CCC""}, "",""));"
210026,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java,108,,"        assertEqualsMSg(""localized message key: foo.bar"", missing.get(""foo.bar""));"
210027,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java,97,,"        assertNull(_loader.getResource(""foo""));"
210028,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java,38,,"        ""-int"", ""10"", ""-boolean"", ""-string"", ""STR,STR2"", ""-range1"", ""10,100"","
210029,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java,86,,"        assertProperties(new String[][]{ { ""foo"", ""bar#baz"" } }, p);"
210030,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java,99,,"        Properties p = toProperties(LS + ""foo: bar"" + LS + LS + ""baz: val"");"
210031,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java,100,,"        assertProperties(new String[][]{ { ""foo"", ""bar"" }, { ""baz"", ""val"" } },"
210032,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java,55,,"        assertTrue(!coll.contains(""foo""));"
210033,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java,39,,"        assertTrue(matchExpr(""Hello"", ""Hello"", false));"
210034,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java,56,,"        assertTrue(matchExpr(""The quick brown fox jumped over the lazy dog"","
210035,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,39,,"        _props.setProperty(""bool"", ""true"");"
210036,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,40,,"        _props.setProperty(""int"", ""1"");"
210037,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,41,,"        _props.setProperty(""long"", ""2"");"
210038,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,42,,"        _props.setProperty(""float"", ""1.1"");"
210039,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,43,,"        _props.setProperty(""double"", ""2.2"");"
210040,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,43,,"        _props.setProperty(""double"", ""2.2"");"
210041,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java,70,,"        assertEquals(0D, _props.getDoubleProperty(""double2""), 0D);"
210042,./TargetProjects/openjpa/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java,124,,"        assertEquals(""   "", getIncludedString(""   "", _docType, 1));"
210043,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java,508,,"                throw new MetaDataException(_loc.get(""no-override-name"", cm));"
210044,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java,517,,"                throw new MetaDataException(_loc.get(""embed-override-name"","
210045,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java,1502,,"                throw new MetaDataException(_loc.get(""not-embedded"", fm));"
210046,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java,274,,"                ab.add(""name"", table);"
210047,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,147,,"        _elems.put(""name"", NAME);"
210048,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,152,,"        _elems.put(""table"", TABLE);"
210049,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,212,,"            if (""schema"".equals(name))"
210050,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,1099,,"        val = attrs.getValue(""precision"");"
210051,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,1110,,"            col.setNotNull(""false"".equals(val));"
210052,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,1111,,"        val = attrs.getValue(""insertable"");"
210053,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java,1114,,"        val = attrs.getValue(""updatable"");"
210054,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java,190,,"        serializeTable(info.getTableName(), ""table"", ClassUtil.getClassName(mapping.getDescribedType()), null,"
210055,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java,243,,"                addAttribute(""name"", table);"
210056,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java,253,,"                    addAttribute(""schema"", table.substring(0, index));"
210057,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java,464,,"                addAttribute(""nullable"", ""false"");"
210058,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java,55,,"                    fail(""Should have caught PersistenceException whose cause was "" + ""a ParseException. """
210059,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java,55,,"                    fail(""Should have caught PersistenceException whose cause was "" + ""a ParseException. """
210060,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java,56,,"                            + ""Instead the cause was: "" + cause);"
210061,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java,65,,"		p.put(""openjpa.ConnectionDriverName"", GOOD_DRIVER);"
210062,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java,66,,"		p.put(""openjpa.ConnectionURL"", BAD_URL_PROTOCOL);"
210063,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java,56,,"        props.put(""javax.persistence.lock.timeout"", ""12000"");"
210064,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java,57,,"        props.put(""javax.persistence.query.timeout"", ""7000"");"
210065,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java,74,,"                ""qtimeout-no-properties"", ""persistence3.xml"");"
210066,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java,93,,"            q = em1.createNamedQuery(""NoHintList"");"
210067,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java,97,,"        un.setStringField(""bar"");"
210068,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java,202,,"            un.setStringField(""baz"");"
210069,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java,320,,"                .get(sm.getMetaData().getField(""stringField"").getIndex()));"
210070,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java,370,,"                .get(sm.getMetaData().getField(""lazyField"").getIndex()));"
210071,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java,53,,"            ""org.apache.openjpa.enhance.UnenhancedBootstrapInstance"";"
210072,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java,64,,"        assertAllSQLInOrder(""INSERT INTO "" + empTableName + "".*"", ""INSERT INTO """
210073,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/procedure/TestStoredProcedure.java,49,,"                ""PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME "" +"
210074,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractBrokerSerializationTest.java,255,,"            em.setSavepoint(""foo"");"
210075,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java,73,,"            ""org/apache/openjpa/lib/conf/product-derivations-load.xml"","
210076,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Parent.java,31,,"@SecondaryTable(name = ""ParentSecondaryTable"", pkJoinColumns ="
210077,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java,54,,"        Security1 aI_security = new Security1(aI_sid, new Embed(""XYZ""));"
210078,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestXMLPersistenceMetaDataParser.java,55,,"        Country1 aUS_country = new Country1(aUS_sid, ""USA"");"
210079,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestDefaultAccess.java,71,,"            ""org/apache/openjpa/persistence/access/"" +"
210080,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestDefaultAccess.java,152,,"        qry.setParameter(""strVal"", ""XMLFieldAccess2"");"
210081,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestDefaultAccess.java,160,,"        dfmpa.setStringField(""XMLDFMPA2"");"
210082,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestDefaultAccess.java,211,,"        dpmfa.setStrProp(""XMLDPMFA2"");"
210083,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,76,,"        fa.setStringField(""FieldAccess"");"
210084,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,88,,"        qry.setParameter(""strVal"", ""FieldAccess"");"
210085,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,138,,"        dfmpa.setStringField(""DFMPA"");"
210086,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,161,,"            fail(""Usage of this query should have thrown an exception"");"
210087,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,184,,"        dpmfa.setStrProp(""DPMFA"");"
210088,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,227,,"        ps.setName(""AbsMappedSuperName"");"
210089,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,242,,"        qry.setParameter(""name"", ""AbsMappedSuperName"");"
210090,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,243,,"        qry.setParameter(""crtDate"", now);"
210091,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,326,,"        ps.setName(""MappedSuperName"");"
210092,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,426,,"        fs.setName(""MixedMappedSuperName"");"
210093,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,479,,"        fs.setName(""EntitySuperName"");"
210094,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,486,,"        spe.setName(""SuperPropertyEntity"");"
210095,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,565,,"        sfe.setName(""SuperFieldEntity"");"
210096,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,636,,"        efa.setLastName(""Tolkien"");"
210097,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,651,,"        qry.setParameter(""firstName"", ""J"");"
210098,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,652,,"        qry.setParameter(""lastName"", ""Tolkien"");"
210099,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,664,,"            fail(""Query execution should have failed."");"
210100,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,837,,"        pm.setName(""MixedMultEmbedEntity"");"
210101,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,1087,,"        Ingredient i1 = new Ingredient(""Peanut Butter"");"
210102,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,1089,,"        Quantity q1 = new Quantity(1.0, ""Tbsp"");"
210103,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,1093,,"        Ingredient i2 = new Ingredient(""Jelly"");"
210104,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java,1099,,"        Ingredient i3 = new Ingredient(""Bread"");"
210105,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,68,,"        qry.setParameter(""strVal"", ""XMLFieldAccess"");"
210106,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,120,,"        dfmpa.setStringField(""XMLDFMPA"");"
210107,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,166,,"        dpmfa.setStrProp(""XMLDPMFA"");"
210108,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,189,,"            fail(""Usage of this query should have thrown an exception"");"
210109,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,215,,"        ps.setName(""AbsMappedSuperName"");"
210110,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,230,,"        qry.setParameter(""name"", ""AbsMappedSuperName"");"
210111,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,231,,"        qry.setParameter(""crtDate"", now);"
210112,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,332,,"        ps.setName(""MappedSuperName"");"
210113,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,435,,"        fs.setName(""XMLMixedMappedSuperName"");"
210114,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,487,,"        fs.setName(""EntitySuperName"");"
210115,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,493,,"        spe.setName(""SuperPropertyEntity"");"
210116,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,572,,"        sfe.setName(""SuperFieldEntity"");"
210117,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,646,,"        efa.setLastName(""Tolkien"");"
210118,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,661,,"        qry.setParameter(""firstName"", ""J"");"
210119,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/xml/TestXMLExplicitAccess.java,662,,"        qry.setParameter(""lastName"", ""Tolkien"");"
210120,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestDDCallbackMethods.java,149,,"        assertEquals(""def-postload"","
210121,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestEJBEmbedded.java,62,,"        owner.setBasic(""foo"");"
210122,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java,50,,"        pc.getOneMany().add(new AnnoTest2(15, ""foo""));"
210123,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToMany.java,51,,"        pc.getOneMany().add(new AnnoTest2(20, ""foobar""));"
210124,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestOneToOne.java,48,,"        AnnoTest2 pc2 = new AnnoTest2(15, ""foo"");"
210125,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java,53,,"            b01.setName(""b01"");"
210126,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java,137,,"            a.getCollectionOfStrings().add(""one"");"
210127,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/AnnoTest1.java,60,,"@SecondaryTables({ @SecondaryTable(name = ""OTHER_ANNOTEST1"","
210128,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java,85,,"        expectedFailedObject = new Ent1(200, ""twohundred"");"
210129,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/batch/exception/TestBatchLimitException.java,180,,"            em2.persist(new Ent1(i, ""name"" + i));"
210130,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/TestBlobs.java,62,,"        be.setLobField(""abcdef"");"
210131,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java,119,,"        o.setStringField(""foo"");"
210132,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java,299,,"        Object oid = insert(""new instance"");"
210133,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java,51,,"            Message message = new Message(""Hello Persistence!"");"
210134,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java,61,,"            assertNotNull(""Test message's created field being set."", message"
210135,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java,63,,"            assertNotNull(""Test message's updated field being set."", message"
210136,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java,42,,"            entity.setStrData(""PUDEntityA01"");"
210137,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java,53,,"                fail(""No Exception thrown."");"
210138,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java,162,,"            entity.setStrData(""PUDEntityAE01"");"
210139,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java,52,,"            entity.setStrData(""PUDEntityA01"");"
210140,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java,207,,"            entity.setStrData(""PUDEntityAE01"");"
210141,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java,360,,"            entity.setStrData(""PUDEntityA02"");"
210142,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java,192,,"            assertSQLFragnments(sql, ""CREATE TABLE Bi1MJT_C"", ""C_ID"", ""Bi1MJT_ID"");"
210143,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestContainerSpecCompatibilityOptions.java,228,,"        u.setName(""newName"");"
210144,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java,65,,"            Message message = new Message(""Hello Persistence!"");"
210145,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java,66,,"            assertNull(""Test message's created field to be null."", message.getCreated());"
210146,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java,67,,"            assertNull(""Test message's updated field to be null."", message.getUpdated());"
210147,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java,73,,"            assertNotNull(""Test message's created field being set."", message.getCreated());"
210148,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java,74,,"            assertNotNull(""Test message's updated field being set."", message.getUpdated());"
210149,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java,62,,"        props.put(""openjpa.MetaDataFactory"", ""jpa(Types="" + Person.class.getName() + "")"");"
210150,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java,62,,"        props.put(""openjpa.MetaDataFactory"", ""jpa(Types="" + Person.class.getName() + "")"");"
210151,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestQuerySQLCache.java,63,,"        props.put(""openjpa.jdbc.QuerySQLCache"","
210152,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java,186,,"            assertSQLFragnments(sql, ""CREATE TABLE Bi1MJT_C"", ""C_ID"", ""Bi1MJT_ID"");"
210153,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java,219,,"        u.setName(""newName"");"
210154,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java,45,,"        EntityManagerFactory emf1 = getEmf(""openjpa.ConnectionFactoryName"", cfName, true);"
210155,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java,181,,"            getEm(emf1, ""openjpa.ConnectionFactory2Name"", ""jdbc/NotReal"");"
210156,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java,182,,"            fail(""Expected an excepton when creating an EM with a bogus JNDI name"");"
210157,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java,45,,"        EntityManagerFactory emf1 = getEmf(true, ""openjpa.ConnectionFactoryName"", cfName);"
210158,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java,177,,"            getEm(emf1, ""openjpa.ConnectionFactoryName"", ""jdbc/NotReal"");"
210159,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java,178,,"            fail(""Expected an excepton when creating an EM with a bogus JNDI name"");"
210160,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java,172,,"            fail(""JPQL "" + jpql + "" failed to execute\r\n"" + w);"
210161,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,110,,"        Predicate p1 = e.get(""salary"").greaterThan(100);"
210162,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,112,,"        Predicate p3 = e.get(""name"").like(""John"");"
210163,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,131,,"          .where(o1.get(""quantity"").greaterThan(o2.get(""quantity""))"
210164,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,132,,"            .and(o2.get(""customer"").get(""lastName"").equal(""Smith""))"
210165,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,157,,"        e.where(e.get(""contactInfo"").get(""address"").get(""zipCode"")"
210166,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,157,,"        e.where(e.get(""contactInfo"").get(""address"").get(""zipCode"")"
210167,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,183,,"        DomainObject o = c.join(""orders"");"
210168,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,185,,"        o.where(a.get(""state"").equal(""CA"").and("
210169,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,300,,"        qdef.where(customer.get(""status"").equal(qdef.param(""status"")));"
210170,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java,389,,"                    + "" FROM Customer c"""
210171,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java,56,,"        c.where(cb.equal(p.get(Person_.name), ""XYZ""));"
210172,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEdit.java,61,,"        c.where(cb.or(where, cb.equal(p.get(Person_.name), ""ABC"")));"
210173,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,241,,"        String jpql = ""select a.embed from EntityA_Embed_MappedToOne a "";"
210174,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,845,,"        String jpql = ""select e, e.intVal1, e.embed.intVal2 from "" +"
210175,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,879,,"                "" order by e.intVal3"";"
210176,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,981,,"        String jpql = ""select e, e.intVal1, e.embed.intVal2 from EntityA_Coll_Embed_Embed a "" +"
210177,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,985,,"        String expectedSQL = ""SELECT t1.IntVal1x, t1.IntVal2x, t1.IntVal3x, t1.intVal1, t1.intVal2, t1.intVal3 "" +"
210178,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,986,,"        ""FROM TBL1A t0 INNER JOIN TBL1A_embeds t1 ON t0.id = t1.ENTITYA_COLL_EMBED_EMBED_ID WHERE "" +"
210179,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,990,,"        ""ORDER BY t1.intVal3 ASC"";"
210180,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,1176,,"        ParameterExpression<Embed_Embed> param1 = cb.parameter(Embed_Embed.class, ""embed2"");"
210181,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,1234,,"        String jpql = ""select e, e.intVal1, e.intVal2 from EntityA_Embed_Coll_Embed a "" +"
210182,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,1522,,"        ParameterExpression<String> param1 = cb.parameter(String.class, ""image"");"
210183,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,1528,,"                q.setParameter(""image"", ""my photo"");"
210184,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java,1688,,"        ParameterExpression<Division> param1 = cb.parameter(Division.class, ""division"");"
210185,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,59,,"            + ""LEFT OUTER JOIN CompUser t3 ON t2.id = t3.ADD_ID """
210186,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,141,,"        String jpql = ""SELECT c FROM Customer c WHERE """
210187,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,144,,"            + ""t3.street, t4.userid, t4.DTYPE, t4.age, t4.compName, t4.creditRating, t4.name, t3.zipCode, """
210188,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,148,,"            + ""LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID """
210189,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,252,,"            + ""FROM CR_CUST t0 """
210190,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,302,,"            + ""t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, t5.zipCode, """
210191,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,303,,"            + ""t4.balanceOwed, t4.creditRating, t4.filledOrderCount, t4.firstName, t4.lastName, t4.name, t4.status, """
210192,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,306,,"            + ""LEFT OUTER JOIN CR_ADDR t5 ON t4.ADDRESS_ID = t5.id """
210193,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,357,,"        String jpql = ""SELECT o FROM Order o JOIN o.customer c WHERE 10000 < """
210194,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,359,,"        String expectedSQL = ""SELECT t0.id, t0.cnt, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, """
210195,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,362,,"            + ""t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost """
210196,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,363,,"            + ""FROM CR_ODR t0 INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id """
210197,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,364,,"            + ""LEFT OUTER JOIN CR_CUST t4 ON t0.CUSTOMER_ID = t4.id """
210198,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,477,,"            + ""t6.state, t6.street, t7.userid, t7.DTYPE, t7.age, t7.compName, t7.creditRating, t7.name, t6.zipCode, """
210199,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,565,,"            + ""FROM CR_ODR t0 """
210200,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,566,,"            + ""INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id """
210201,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,800,,"            + "" where o.customer.id = o2.customer.id)"";"
210202,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,856,,"        String jpql = ""select o.id from Order o where o.quantity >"""
210203,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java,859,,"        String expectedSQL = ""SELECT t0.id FROM CR_ODR t0 WHERE (t0.quantity > ("""
210204,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,150,,"                customer.get(customer_.getSingularAttribute(""name"", String.class)),"
210205,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,163,,"        SetJoin<Customer, Order> o = c.join(customer_.getSet(""orders"","
210206,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,185,,"                c.get(customer_.getSingularAttribute(""status"", Integer.class)),"
210207,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,216,,"                          .get(contact_.getSingularAttribute(""address"", Address.class))"
210208,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,217,,"                          .get(address_.getSingularAttribute(""zipCode"", String.class)),"
210209,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,275,,"        q.where(cb.equal(a.get(address_.getSingularAttribute(""state"", String.class)), ""CA""),"
210210,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,277,,"        q.multiselect(o.get(order_.getSingularAttribute(""quantity"", Integer.class)),"
210211,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java,356,,"                        cb.prod(e.get(employee_.getSingularAttribute(""salary"",  Long.class)), 1.1)).when("
210212,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,46,,"        Path<String> path = customer.<String>get(""name"");"
210213,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,57,,"        SetJoin<Customer, Order> order = cust.joinSet(""orders"");"
210214,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,71,,"        q.where(cb.equal(c.get(""status""), 1))"
210215,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,94,,"        q.where(cb.equal(e.get(""contactInfo"").get(""address"").get(""zipCode""), ""95054""));"
210216,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,94,,"        q.where(cb.equal(e.get(""contactInfo"").get(""address"").get(""zipCode""), ""95054""));"
210217,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,143,,"        q.where(cb.equal(a.get(""state""), ""CA""), cb.equal(a.get(""county""), ""Santa Clara""));"
210218,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,146,,"        q.multiselect(o.get(""quantity""), productTerm, a.get(""zipCode""));"
210219,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java,196,,"                  .when(cb.equal(e.get(""rating""), 1), cb.prod(e.get(""salary"").as(Float.class), 1.1))"
210220,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java,107,,"                + "" where o.customer.id = o2.customer.id)"";"
210221,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java,143,,"        String query = ""select o.id from Order o where o.quantity >"""
210222,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java,592,,"        ParameterExpression<String> testParam = cb.parameter(String.class, ""param1"");"
210223,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java,597,,"                cb.equal(cb.parameter(String.class, ""param2""), sqRoot.get(Order_.customer).get(Customer_.lastName)),"
210224,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java,216,,"        cq.where(cb.equal(c.get(CompUser_.name), ""Seetha""));"
210225,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java,631,,"                cb.nullif(e.get(CompUser_.address).get(Address_.country), ""USA""));"
210226,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java,748,,"            + ""org.apache.openjpa.persistence.criteria.CompUser$"""
210227,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,116,,"                + ""a.zipCode FROM Customer c JOIN c.orders o JOIN c.address a """
210228,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,123,,"            .get(""county""), ""Santa Clara""));"
210229,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,442,,"            + ""FROM Employee e WHERE e.department.name = 'Engineering'"";"
210230,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,445,,"        q.where(cb.equal(e.get(Employee_.department).get(Department_.name), ""Engineering""));"
210231,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,554,,"        Parameter<Integer> param = cb.parameter(Integer.class, ""stat"");"
210232,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,571,,"        Parameter<String> param2 = cb.parameter(String.class, ""name"");"
210233,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,579,,"                q.setParameter(""name"", ""test"");"
210234,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,988,,"        String sql = ""SELECT t0.name, t2.id, t2.label FROM CR_ITEM t0 """
210235,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,989,,"            + ""INNER JOIN CR_ITEM_photos t1 ON t0.id = t1.ITEM_ID """
210236,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,990,,"            + ""INNER JOIN CR_PHT t2 ON t1.VALUE_ID = t2.id WHERE "" +"
210237,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,992,,"            + ""AND 0 < (SELECT COUNT(*) FROM CR_ITEM_photos WHERE CR_ITEM_photos.ITEM_ID = t0.id))"";"
210238,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,1001,,"            p1.setLabel(""label"" + i);"
210239,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,1002,,"            photo1.put(""photo"" + i, p1);"
210240,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java,1391,,"            fail(""Expected to fail on invalid alias"");"
210241,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/TestTypedResults.java,158,,"        jpqlQuery.setParameter(""maxDate"", maxDate);"
210242,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java,117,,"            ""select from "" + AttachA.class.getName() + "" where aint > 0"","
210243,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java,733,,"                JPQLParser.LANG_JPQL, ""Select a FROM """
210244,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java,1387,,"            OpenJPAQuery q = em.createQuery(""select a FROM """
210245,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java,1389,,"                + "" a where a.str = 'e'"");"
210246,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java,223,,"        assertEquals(""Expected purchases to "" + (expectPurchase ? """" : ""not "")"
210247,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java,224,,"            + ""exist in the cache"", expectPurchase, cache.contains("
210248,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java,48,,"        propsMap.put(""openjpa.DataCache"", ""true"");"
210249,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java,211,,"            fail(""Expected ArgumentException when calling "" + ""contains(<nonEntityClass>, <nonNull>"");"
210250,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java,94,,"        Query q = broker.newQuery(JPQLParser.LANG_JPQL, ""Select a FROM "" +"
210251,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java,37,,"            ""openjpa.DataCache"", ""true"","
210252,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java,50,,"            child.setName(""child"" + i);"
210253,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPartitionedDataCache.java,46,,"            fail(""Expected parse error on "" + badProperty);"
210254,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java,110,,"        ac.add(""age"");"
210255,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java,37,,"            ""openjpa.DataCache"", ""true"","
210256,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java,66,,"    @ElementJoinColumn(name = ""ELEMENT"")"
210257,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityA.java,41,,"@Table(name=""primary entityA"", schema=""delim id2"")"
210258,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityC.java,39,,"@Table(name=""\""entity c\"""", schema=""\""delim id\"""")"
210259,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityF.java,40,,"@Table(name=""\""primary entityF\"""", schema=""\""delim id\"""","
210260,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/EntityH.java,39,,"@Table(name=""entity ha"", schema=""delim id2"")"
210261,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestDelimitedJoinAnnotation.java,131,,"            ""SELECT h "" +"
210262,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimitedJoinAnnotations.java,136,,"            ""SELECT c "" +"
210263,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java,135,,"            ""SELECT c "" +"
210264,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/xml/TestXmlDelimitedJoinAnnotation.java,129,,"            ""SELECT h "" +"
210265,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoCascade.java,59,,"        e1 = new Entity1(id,""entity1"");"
210266,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoCascade.java,160,,"        e1.setName(""new name"");"
210267,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,44,,"        _log = emf.getConfiguration().getLog(""test"");"
210268,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,67,,"            ""NoProxy2New"", ""org/apache/openjpa/persistence/detach/persistence2.xml"");"
210269,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,67,,"            ""NoProxy2New"", ""org/apache/openjpa/persistence/detach/persistence2.xml"");"
210270,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,77,,"            log.trace(""FlushBeforeDetach="" + compat.getFlushBeforeDetach());"
210271,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,78,,"            log.trace(""CopyOnDetach="" + compat.getCopyOnDetach());"
210272,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,79,,"            log.trace(""CascadeWithDetach="" + compat.getCascadeWithDetach());"
210273,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java,80,,"            log.trace(""IgnoreDetachedStateFieldForProxySerialization="" +"
210274,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachStateCascade.java,78,,"        entityA = new EntityA(id, ""entityA"", ""top level class"");"
210275,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/distinctjoin/TestDistinctJoin.java,146,,"            log.info(""\n\n"" + msg); // this one does sub-selects for LocalizedString and changeLog"
210276,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java,36,,"@Table(name=""Very______________________________________________"" +"
210277,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java,37,,"            ""Long______________________________________________"" +"
210278,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/EntityVeryLongNames.java,39,,"            ""Name______________________________________________"" )"
210279,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java,64,,"                ""openjpa.ConnectionURL"","
210280,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java,66,,"                ""openjpa.jdbc.SynchronizeMappings"", ""export"","
210281,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java,66,,"                ""openjpa.jdbc.SynchronizeMappings"", ""export"","
210282,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java,67,,"                ""openjpa.jdbc.SchemaFactory"", ""dynamic"", RETAIN_DATA);"
210283,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java,67,,"                ""openjpa.jdbc.SchemaFactory"", ""dynamic"", RETAIN_DATA);"
210284,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestResWordEntity.java,51,,"        pe.setAlias(""AliasVal"");"
210285,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,342,,"            a.addNickName(""nickName_"" + id + i);"
210286,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,374,,"        embed.setName1(""name1"");"
210287,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,375,,"        embed.setName2(""name2"");"
210288,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,376,,"        embed.setName3(""name3"");"
210289,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1361,,"            ""select e from "" +"
210290,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1362,,"                "" EntityA_Coll_String a "" +"
210291,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1363,,"                "" , in (a.nickNames) e order by a.id"","
210292,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1370,,"            ""select a from "" +"
210293,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1441,,"            ""select a.embed from "" +"
210294,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1488,,"                "" EntityA_Embed_MappedToOne a "","
210295,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1497,,"                "" WHERE exists "" +"
210296,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1553,,"                "" EntityA_Coll_Embed_ToOne a "" +"
210297,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1564,,"                "" order by e"","
210298,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1753,,"                "" EntityA_Embed_Coll_Integer a "" +"
210299,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1861,,"            ""select e, e.intVal1, e.embed.intVal2 from "" +"
210300,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1862,,"                "" EntityA_Coll_Embed_Embed a "" +"
210301,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1874,,"                "" order by e.intVal3"","
210302,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1890,,"                "" from EntityA_Coll_Embed_Embed a1, in (a1.embeds) e2) "" +"
210303,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,1915,,"                "" from EntityA_Coll_Embed_Embed a, in (a.embeds) e) "" +"
210304,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2019,,"            ""select e, e.intVal1, e.intVal2 from "" +"
210305,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2020,,"                "" EntityA_Embed_Coll_Embed a "" +"
210306,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2119,,"        FileName4 fileName1 = new FileName4(""file"" + 1, ""file"" + 1);"
210307,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2616,,"                "" order by i"","
210308,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2702,,"                "" order by c "","
210309,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2705,,"                ""  where KEY(d) = ?1)"" +"
210310,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java,2983,,"                "" EntityA_Embed_Complex a "" +"
210311,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java,109,,"        assertTrue(verifyColumnOverride(em, ""XMLOverEntity"","
210312,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java,144,,"        query.setParameter(""subject"", s);"
210313,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java,204,,"                    new SubjectKey(1, ""Type""),"
210314,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,85,,"            assertTrue(selectContains(""REC_TABLE"", _sql, ""REC_STYLE"", ""RECID_ID"", ""RECID_COLOR""));"
210315,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,86,,"            assertFalse(selectContains(""REC_TABLE"", _sql, ""GUY_HEIGHT"", ""GUY_WEIGHT"", ""GUY_NAME"","
210316,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,86,,"            assertFalse(selectContains(""REC_TABLE"", _sql, ""GUY_HEIGHT"", ""GUY_WEIGHT"", ""GUY_NAME"","
210317,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,86,,"            assertFalse(selectContains(""REC_TABLE"", _sql, ""GUY_HEIGHT"", ""GUY_WEIGHT"", ""GUY_NAME"","
210318,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,87,,"                ""BH_DIAMETER"", ""BH_DEPTH""));"
210319,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/lazy/TestLazyEmbeddable.java,87,,"                ""BH_DIAMETER"", ""BH_DEPTH""));"
210320,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java,50,,"        NoClone orig = new NoClone(""test"");"
210321,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java,225,,"            o.setStringField(""hello"");"
210322,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java,239,,"        basic.setStringField(""foo"");"
210323,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java,374,,"        Employee2 e = em.find(Employee2.class, new EmployeeId2(""f_1"", ""l_1""));"
210324,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java,374,,"        Employee2 e = em.find(Employee2.class, new EmployeeId2(""f_1"", ""l_1""));"
210325,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java,443,,"        m.setName(""medical_"" + id);"
210326,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java,269,,"        assertSQLFragnments(sql, ""CREATE TABLE DI_LIBRARY1"", ""LIBRARY_NAME"");"
210327,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entitymanager/TestEntityManagerConfiguration.java,47,,"        propMap.put(""openjpa.jdbc.QuerySQLCache"", ""true(EnableStatistics=true)"");"
210328,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,101,,"                 + ""relation field"");"
210329,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,660,,"         ent.setName (""ent"");"
210330,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,661,,"         rel.setName (""rel"");"
210331,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,705,,"         rel1.setName (""rel1"");"
210332,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,707,,"         rel2.setName (""rel2"");"
210333,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,770,,"         rel.setName (""foo"");"
210334,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,820,,"         rel2.setName (""bar"");"
210335,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,853,,"         other.setName (""other"");"
210336,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,912,,"         other1.setName (""other1"");"
210337,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java,913,,"         other2.setName (""other2"");"
210338,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java,94,,"        assertEquals(""Ava"", ae.getName());"
210339,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java,59,,"        RuntimeTest1 t1 = new RuntimeTest1(""foo"", 5);"
210340,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java,167,,"            assertEquals(""xxx"", je.getMessage());"
210341,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java,84,,"        logFactory.assertNoLogMessage(""*orphan*"");"
210342,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java,88,,"                fail(""Expected "" + OptimisticLockException.class);"
210343,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java,65,,"        entity.setS1(""LARGE"");"
210344,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java,50,,"                attributes = { @FetchAttribute(name = ""manager"","
210345,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java,37,,"        em.getFetchPlan().addFetchGroup(""foo"");"
210346,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java,41,,"            em.pushFetchPlan().addFetchGroup(""bar""); // push 1"
210347,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java,45,,"                em.pushFetchPlan().addFetchGroup(""baz""); // push 2"
210348,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java,56,,"        em.getFetchPlan().resetFetchGroups().removeFetchGroup(""default"").addFetchGroups(""AddressFetchGroup"");"
210349,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java,103,,"        fp.addFetchGroup(""DescFetchGroup"");"
210350,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java,163,,"                FGAddress.class, ""openjpa.FetchGroups"", ""default,DescFetchGroup"");"
210351,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java,207,,"        assertTrue(fp.getFetchGroups().contains(""Default"")); // Not the same as ""default"""
210352,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java,44,,"        Query q = em.createQuery(""select count(o) from EnumFieldType o where "" +"
210353,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java,45,,"            ""o.enumField = "" +"
210354,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java,158,,"        dog1.setName(""helloDog1"");"
210355,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java,163,,"        dog1a.setName(""helloDog2"");"
210356,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java,168,,"        dog2.setName(""helloDog3"");"
210357,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java,173,,"        dog2a.setName(""helloDog4"");"
210358,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java,212,,"            assertEquals(dog4.getName(), ""Dog"" + i);"
210359,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/graph/TestPersistentGraph.java,234,,"        assertFalse(""Result of ["" + jpql + ""] on source = "" + p1 + "" should not be empty"", result.isEmpty());"
210360,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/graph/TestPersistentGraph.java,243,,"                                  .setParameter(""key"", ATTR_EMOTION)"
210361,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/graph/TestPersistentGraph.java,310,,"        r.get(0).addAttribute(""new-key"", ""new-value"");"
210362,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestInheritanceWithMSCID.java,35,,"    @SuppressWarnings(""unchecked"")"
210363,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/onetomany/TestJointableOneToMany.java,46,,"                em.find(UMLPackage.class, ""org.apache.openjpa"");"
210364,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java,60,,"@SecondaryTables({ @SecondaryTable(name = ""OTHER_ANNOTEST1"","
210365,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java,45,,"    @SecondaryTable(name = ""MCSV1"","
210366,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java,72,,"        joinColumns = @XJoinColumn(name = ""OWNER"")),"
210367,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java,68,,"        owner.setBasic(""foo"");"
210368,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java,102,,"            _mapping.getField(""eager"").getCascadeDelete());"
210369,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java,64,,"        assertEquals(""basic"", fm.getKey().getValueMappedBy());"
210370,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java,100,,"        assertEquals(""OWNER"", fm.getJoinForeignKey().getColumns()[0]."
210371,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java,211,,"        fm = embed.getFieldMapping(""basic"");"
210372,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java,43,,"        pc.getOneMany().add(new AnnoTest2(15, ""foo""));"
210373,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java,44,,"        pc.getOneMany().add(new AnnoTest2(20, ""foobar""));"
210374,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java,42,,"        AnnoTest2 pc2 = new AnnoTest2(15, ""foo"");"
210375,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java,53,,"        assertEquals(""TPC_BASIC"", mapping.getFieldMapping(""basic"")."
210376,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java,53,,"        test2.setPk2(""bar"");"
210377,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java,39,,"                    @FieldResult(name=""name"",          column=""OWNER_NAME""),"
210378,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java,163,,"                if (props[i].startsWith(""openjpa.""))"
210379,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java,60,,"		pc2.setStringField (""pc2"");"
210380,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java,66,,"		pc3.setStringField (""pc3"");"
210381,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java,125,,"		pc2.setStringField (""pc2a"");"
210382,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java,127,,"		pc3.setStringField (""pc3a"");"
210383,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java,89,,"        embedded2.setStringField(""bar"");"
210384,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java,122,,"                ""embedded"");"
210385,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java,71,,"        assertEquals(""pcsub"", pc.getSub());"
210386,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,93,,"        extent.getFetchPlan().addFetchGroup(""rel"");"
210387,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,117,,"        String theQuery = ""select a FROM "" + PagingPC.class.getSimpleName()"
210388,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,118,,"            + "" a where a.intField >= 0"";"
210389,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,134,,"            matches("" >= "", (String) sql.get(0)));"
210390,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,136,,"            matches("" COUNT"", (String) sql.get(1)));"
210391,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,159,,"            fail(""Retrieved past end of list"");"
210392,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,193,,"        extent.getFetchPlan().addFetchGroup(""rels"");"
210393,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java,203,,"            matches("" IN "", (String) sql.get(1)));"
210394,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java,55,,"        String sql = ""SELECT * FROM "" + TABLE_NAME;"
210395,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java,103,,"		assertSQL(""DELETE FROM .*J_PERSON_ADDRESSES .*"");"
210396,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java,84,,"            "" in (p.emps) e order by p.number, e.empId"";"
210397,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java,86,,"        String query = ""select KEY(e) from PhoneNumber p, "" +"
210398,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java,119,,"        assertEquals((String) rs.get(0), ""String1"");"
210399,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java,74,,"            "" in (d.empMap) e "" +"
210400,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java,78,,"        String query = ""select KEY(e) from Department d, "" +"
210401,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java,122,,"            "" ORDER BY KEY(e).fName"";"
210402,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex0/TestSpec10_1_27.java,83,,"            "" in (c.orgs) e order by c.id"";"
210403,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/TestMapUpdate.java,55,,"    	ms.setText(""en"", ""Good evening"");"
210404,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java,65,,"        pc1.setStringField(""pc1"");"
210405,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java,70,,"        pc2.setStringField(""pc2"");"
210406,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,82,,"        fetch.addField(EagerOuterJoinPC.class, ""stringCollection"");"
210407,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,91,,"            assertTrue(pc.getStringCollection().contains(""1.1""));"
210408,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,92,,"            assertTrue(pc.getStringCollection().contains(""1.2""));"
210409,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,148,,"            assertTrue(pc.getStringCollection().contains(""2.1""));"
210410,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,149,,"            assertTrue(pc.getStringCollection().contains(""2.2""));"
210411,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,186,,"        fetch.addField(EagerOuterJoinPC.class, ""stringList"");"
210412,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java,431,,"        fetch.addField(EagerOuterJoinPC.class, ""manyManyList"");"
210413,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java,67,,"                cls = mapping.getFieldMapping(""toClob"").getStrategy()."
210414,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,64,,"        pc.getStringSet().add(""val1"");"
210415,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,65,,"        pc.getStringSet().add(""val2"");"
210416,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,66,,"        pc.getStringSet().add(""val3"");"
210417,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,68,,"        pc.getRelSet().add(new LRSPC(""set1""));"
210418,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,69,,"        pc.getRelSet().add(new LRSPC(""set2""));"
210419,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,70,,"        pc.getRelSet().add(new LRSPC(""set3""));"
210420,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,80,,"        pc.getStringMap().put(""key1"", ""1"");"
210421,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,81,,"        pc.getStringMap().put(""key2"", ""2"");"
210422,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,82,,"        pc.getStringMap().put(""key3"", ""3"");"
210423,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,86,,"        pc.getRelMap().put(""key3"", new LRSPC(""map3""));"
210424,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,174,,"        set.add(""val4"");"
210425,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java,240,,"        map.put(""key5"", ""5"");"
210426,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java,62,,"        FieldMapping map = pc.getFieldMapping(""helpers"");"
210427,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java,66,,"        FieldMapping str = helper.getFieldMapping(""stringField"");"
210428,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java,136,,"            assertFalse(pc.getHelpers().containsKey(""foo""));"
210429,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java,217,,"        a.setString0(a.getString0() + "" changed"");"
210430,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java,88,,"            fail(""Should have caused OL exception."");"
210431,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java,71,,"        validateOrderColumnName(BattingOrder.class, ""batters"","
210432,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java,204,,"        validateOrderColumnName(Game.class, ""rainDates"","
210433,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java,804,,"        validateIndexAndValues(em, ""Owner"", ""cars"", 0,"
210434,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java,835,,"        qry.setParameter(""widx"", 0);"
210435,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java,836,,"        qry.setParameter(""cname"", ""Course B"");"
210436,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java,60,,"            ""org/apache/openjpa/persistence/jdbc/order/"" +"
210437,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java,105,,"            applicant1.setName(""Charlie"");"
210438,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java,107,,"            applicant2.setName(""Snoopy"");"
210439,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java,126,,"                		""should fail."");"
210440,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java,151,,"                fail(""Caught unexpected exception executing stored procedure: """
210441,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java,58,,"        String JPQL_POSITIONAL = JPQL + ""WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3"";"
210442,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java,124,,"        String JPQL_NAMED = JPQL + ""WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3"";"
210443,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java,110,,"        OpenJPAQuery q = pm.createQuery(""javax.jdo.query.SQL"","
210444,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java,111,,"                ""select * from "" + _fullTableName + "" order by "" + _intColName);"
210445,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java,111,,"                ""select * from "" + _fullTableName + "" order by "" + _intColName);"
210446,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java,164,,"                ""select "" + _tableName + "".* from "" + _fullTableName"
210447,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java,181,,"                + _stringColName + "" from "" + _fullTableName + "" order by """
210448,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/AbstractProcedureList.java,28,,"            new Exception(""Method not implemented by inheriting class"");"
210449,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java,39,,"            + ""EXTERNAL NAME '"" + DerbyProcedureList.class.getName()"
210450,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java,47,,"            + ""PARAMETER STYLE JAVA LANGUAGE JAVA READS SQL DATA DYNAMIC """
210451,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java,91,,"            DriverManager.getConnection(""jdbc:default:connection"");"
210452,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,42,,"    private Schema _schema = new SchemaGroup().addSchema(""schema"");"
210453,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,58,,"        assertTrue(!_schema.getSchemaGroup().isNameTaken(""table1""));"
210454,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,61,,"        Table table2 = _schema.addTable(""table2"");"
210455,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,86,,"        Table table = _schema.addTable(""table"");"
210456,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,137,,"        Index idx = table.addIndex(""idx"");"
210457,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java,252,,"        Table foo1 = _schema.addTable(""foo"");"
210458,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,84,,"        MappingTool tool = new MappingTool(conf, ""drop"", false);"
210459,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,94,,"        properties.put(""javax.persistence.schema-generation.database.action"", ""drop"");"
210460,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,99,,"            assertNull(""Table "" + tableName + "" should not exist in the DB."","
210461,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,106,,"        properties.put(""javax.persistence.schema-generation.database.action"", ""create"");"
210462,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,111,,"            assertNotNull(""Table "" + tableName + "" should have been created in the DB, but does not exists."","
210463,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,118,,"        properties.put(""javax.persistence.schema-generation.database.action"", ""drop-and-create"");"
210464,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,133,,"        properties.put(""javax.persistence.schema-generation.drop-source"", ""script"");"
210465,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,134,,"        properties.put(""javax.persistence.schema-generation.drop-script-source"","
210466,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,161,,"        properties.put(""javax.persistence.schema-generation.create-script-source"","
210467,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,233,,"        assertNotNull(""Table "" + ""CREATE_AFTER_METADATA"" + "" should have been created in the DB, but does not exists."","
210468,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,315,,"                       ""target/create-db-output.sql"");"
210469,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerationProperties.java,328,,"                       ""target/drop-db-output.sql"");"
210470,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java,94,,"        assertEquals(""SCHEMA1"", _group.getSchema(""SCHEMA1"").getName());"
210471,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java,95,,"        assertEquals(""SCHEMA2"", _group.getSchema(""SCHEMA2"").getName());"
210472,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java,129,,"        assertEquals(""TABLE1"", tables[0].getName());"
210473,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java,134,,"        assertEquals(""COL1"", cols[0].getName());"
210474,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java,135,,"        assertEquals(""COL2"", cols[1].getName());"
210475,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,88,,"	public static final String[] DEPARTMENT_NAMES = {""Marketing"", ""Sales"", ""Engineering"" };"
210476,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,169,,"        Person p1 = new Person(""John"", ""Doe"", (short)45, 1964);"
210477,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,169,,"        Person p1 = new Person(""John"", ""Doe"", (short)45, 1964);"
210478,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,266,,"        List<Employee> rs1 = em.createQuery(jpql).setParameter(""param"", param1).getResultList();"
210479,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,377,,"        q1.setParameter(""customerId"", 339)"
210480,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,378,,"          .setParameter(""districtId"", 3)"
210481,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,379,,"          .setParameter(""warehouseId"", 23);"
210482,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,406,,"        String jpql = ""select p from Company p"";"
210483,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,800,,"        List<?> result1 = q1.setParameter(""first"", ""John"")"
210484,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,801,,"                       .setParameter(""age"", (short)40)"
210485,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1010,,"          .setParameter(""title"", ""title-1"")"
210486,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1065,,"        String jpql =  ""select o from OrderJPA o """
210487,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1066,,"                             + ""where o.OrderId in (select max(o1.OrderId) from OrderJPA o1 """
210488,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1067,,"                                   +  ""where ((o1.CustomerId = :customerId) """
210489,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1069,,"                                   +  ""and   (o1.WarehouseId = :warehouseId))) """
210490,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java,1070,,"                    +  ""and (o.CustomerId = :customerId) """
210491,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java,54,,"        pc.setName(""Original"");"
210492,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/version/TestVersionColumn.java,53,,"        assertNotNull(""No results found"", results);"
210493,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java,58,,"        Query updateQuery1 = em.createQuery(""update Entity1 e"""
210494,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java,61,,"            setParameter(""val"", ""value1"");"
210495,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java,45,,"        runt1.setStringField(""runt1"");"
210496,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java,54,,"        CompUser user1 = createUser(""Seetha"", ""MAC"", add[0], 40, true);"
210497,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java,55,,"        CompUser user2 = createUser(""Shannon"", ""PC"", add[1], 36, false);"
210498,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java,56,,"        CompUser user3 = createUser(""Ugo"", ""PC"", add[2], 19, true);"
210499,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java,83,,"        assertNotNull(""the list is null"", result);"
210500,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java,97,,"        assertEquals(""they are not equal"", 2, result.size());"
210501,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java,59,,"        CompUser user5 = createUser(""Famzy"", ""UNIX"", add[4], 29, false);"
210502,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestInMemoryScalarExpressions.java,96,,"        List rsall = em.createQuery(""SELECT e from CompUser e"")"
210503,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java,414,,"                log.trace(""Query "" + entityClassName + "" and verify 'entities' collection has """
210504,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java,423,,"                Query q = em.createQuery(""select w from "" + entityClassName"
210505,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestIndex.java,436,,"                        log.error(""  Caught unexpected exception:"" + e.getMessage());"
210506,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,64,,"        CompUser user1 = createUser(""Seetha"", ""MAC"", add[0], 36, true);"
210507,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,92,,"    @SuppressWarnings(""unchecked"")"
210508,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,144,,"        String query = ""SELECT e.name, "" +"
210509,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,180,,"        assertEquals(""the name is not seetha"", ""Seetha"", user.getName());"
210510,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,185,,"            "" e.address.country "" +"
210511,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,237,,"        String update = ""update CompUser c set c.creditRating = "" +"
210512,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,239,,"            ""org.apache.openjpa.persistence.common.apps."" +"
210513,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,240,,"            ""CompUser$CreditRating.POOR"" +"
210514,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,244,,"            "" ELSE "" +"
210515,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,247,,"            "" END "";"
210516,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java,249,,"        assertEquals(""the result is not 6"", 6, updateCount);"
210517,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java,64,,"        CompUser user1 = createUser(""Seetha"", ""MAC"", add[0], 36, true);"
210518,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java,111,,"        assertNotNull(""the user is null"", user);"
210519,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java,67,,"            + ""WHERE e.userid = ?3"";"
210520,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java,117,,"                if (props[i].startsWith(""openjpa.""))"
210521,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java,61,,"        b1.setStringField(""STRING2"");"
210522,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java,57,,"        root.getMap().put(""key"", new DependentFieldsPC());"
210523,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java,49,,"        pc1.setStringField(""string1"");"
210524,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java,51,,"        embed1.setStringField(""embedString1"");"
210525,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java,56,,"        embed2.setStringField(""embedString2"");"
210526,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java,51,,"        pc.setStringField(""foo"");"
210527,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java,77,,"        o1.setB(""foo"");"
210528,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java,87,,"        o2.setB(""bar"");"
210529,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java,193,,"        fetch.addFetchGroup(""baz"");"
210530,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java,315,,"        plan.addFetchGroup(""company.address"");"
210531,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java,330,,"            PCAddress addr = (PCAddress) PCCompany.reflect(company, ""address"");"
210532,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java,333,,"            PCCountry country = (PCCountry) PCAddress.reflect(addr, ""country"");"
210533,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java,61,,"        ModInstanceCallbackTests a = new ModInstanceCallbackTests(""foo"", 10);"
210534,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java,363,,"        assertSize(0, readPM.createNativeQuery(""name == '"" + name + ""'"","
210535,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java,67,,"        pc1.setDefaultLockGroupStringField(""pm1 value"");"
210536,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java,79,,"            fail(""should not be able to commit change to same value"");"
210537,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java,76,,"        RuntimeTest1 a = new RuntimeTest1(""STRING"", 10);"
210538,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java,131,,"            q.setParameter(""param"", param);"
210539,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java,295,,"                holder.getNamedMap(mapName).put(""key"" + j, pc);"
210540,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,63,,"        pc.getStringSet().add(""val1"");"
210541,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,64,,"        pc.getStringSet().add(""val2"");"
210542,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,65,,"        pc.getStringSet().add(""val3"");"
210543,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,72,,"        pc.getStringMap().put(""key1"", ""1"");"
210544,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,73,,"        pc.getStringMap().put(""key2"", ""2"");"
210545,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,74,,"        pc.getStringMap().put(""key3"", ""3"");"
210546,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,75,,"        pc.getStringMap().put(null, ""null"");"
210547,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,151,,"        map.put(""key4"", ""4"");"
210548,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java,154,,"        map.put(""key5"", ""5"");"
210549,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java,53,,"        pc.setC(new BigInteger(""100""));"
210550,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java,90,,"        pc.setStringField(""orig"");"
210551,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java,104,,"        pc.setStringField(""test"");"
210552,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java,73,,"        props.put(""openjpa.SavepointManager"","
210553,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java,78,,"        pm.setSavepoint(""test"");"
210554,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java,79,,"        pm.setSavepoint(""test2"");"
210555,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java,79,,"        pc.setStringField(""orig"");"
210556,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java,93,,"            pc.setStringField(""before"" + i);"
210557,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java,105,,"        pm.setSavepoint(""test"");"
210558,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java,108,,"            pc.setStringField(""after"" + i);"
210559,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java,248,,"            pc.setSelfOneOne(new ModRuntimeTest1(""one"", 1));"
210560,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java,85,,"        map.put(""bar"", 2);"
210561,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java,205,,"            bug(3, afe, ""Loss of BigDecimal precision"");"
210562,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java,66,,"            String theQuery = ""SELECT r FROM RuntimeTest1 r """
210563,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java,121,,"            saveAndQuery(aftt, ""testfloat = :param"","
210564,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java,207,,"            saveAndQuery(aftt, ""testdouble = :param"","
210565,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java,114,,"            saveAndQuery(aftt, ""testfloat ="","
210566,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java,172,,"            saveAndQuery(aftt, ""testdouble ="","
210567,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java,385,,"        assertNotNull(""parent is null"", parent);"
210568,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java,391,,"        assertEquals(""PARENT"", parent.getStringField());"
210569,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java,45,,"@FetchAttribute(name = ""_name""),"
210570,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java,46,,"@FetchAttribute(name = ""_parent"", recursionDepth = 2)"
210571,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java,132,,"        fmd = _metaTest1.getField(""intField"");"
210572,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFactoryMethod.java,72,,"        assertEquals(""valueOf"", factoryMember.getName());"
210573,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFactoryMethod.java,77,,"        assertEquals(""Both valueOf methods take just 1 parameter"", 1, parameterTypes.length);"
210574,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFactoryMethod.java,78,,"        assertEquals(""Need to match the type of the underlying field "" + ""or the factory method will fail when called"","
210575,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFactoryMethod.java,78,,"        assertEquals(""Need to match the type of the underlying field "" + ""or the factory method will fail when called"","
210576,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java,49,,"			emf = createNamedEMF(PU_NAME, ""openjpa.MetaDataRepository"","
210577,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java,50,,"					""Preload=true"");"
210578,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java,169,,"        CollectionAttribute<?,?> relColl = e0.getCollection(""collectionRelation"", ExplicitFieldAccess.class);"
210579,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java,182,,"        ListAttribute<?, ?> relList = e0.getList(""listRelation"", ExplicitFieldAccess.class);"
210580,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java,195,,"        SetAttribute<?, ?> relSet = e0.getSet(""setRelation"", ExplicitFieldAccess.class);"
210581,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java,261,,"        assertNotNull(superClass.getDeclaredMap(""mapRelationKeyBasic""));"
210582,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetamodel.java,265,,"        assertNotNull(superClass.getDeclaredSingularAttribute(""one2oneRelation""));"
210583,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java,265,,"        pc.setName(""changed"");"
210584,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest7.java,41,,"    @Externalizer(""getName"")"
210585,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest7.java,44,,"    @Factory(""valueOf"")"
210586,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java,156,,"            queries.add(""lower("" + name + "") = 'x'"");"
210587,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestDetachMerge.java,337,,"                ""Fixed Annuity from Client is not equal to DB value"", ""Mismacth was found."");"
210588,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,181,,"        e.setEmpName(""John"");"
210589,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,184,,"        e2.setEmpName(""Joe"");"
210590,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,198,,"        assertNoneSQLAnyOrder(""SELECT .* DC_EMPLOYEE .*"");"
210591,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,218,,"        assertNoneSQLAnyOrder(""SELECT .* DC_EMPLOYEE .*"", ""SELECT .* DC_DEPARTMENT .*"");"
210592,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,275,,"        assertAnySQLAnyOrder(""INSERT INTO DC_DEP_EMP .*"");"
210593,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/delayed/DelayedProxyCollectionsTestCase.java,276,,"        assertAnySQLAnyOrder(""INSERT INTO DC_EMPLOYEE .*"");"
210594,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java,129,,"                if (props[i].startsWith(""openjpa.""))"
210595,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java,112,,"        Query q = em.createQuery(""select o.intField from AllFieldTypes o "" +"
210596,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Test1x1OrderByResultCollection.java,42,,"       query.setParameter(""empNo"", ""Emp1"");"
210597,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,111,,"            new ComplexG(""testg"", 0, null,"
210598,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,112,,"                new ComplexF(""testf"", 0, null, null,"
210599,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,113,,"                    new ComplexE(""teste"", 0, null, null,"
210600,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,114,,"                        new ComplexD(""testd"", 0, null, null,"
210601,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,115,,"                            new ComplexC(""testc"", 0, null, null,"
210602,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,116,,"                                new ComplexB(""testb"", 0, null, null,"
210603,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,117,,"                                    new ComplexA(""testa"", 0, null, null))))))),"
210604,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,131,,"            ""f.e.d.c.b.a.stringA = \'testa\'"","
210605,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,145,,"                + "" AND o.f.e.d.c.b.stringB = \'testb\'"","
210606,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,160,,"                + "" AND o.f.e.d.c.stringC = \'testc\'"","
210607,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java,176,,"                + "" AND o.f.e.d.stringD = \'testd\'"","
210608,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java,67,,"            ""left join o.items item"").getResultList();"
210609,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDoubleQuotedStringLiteralInJPQL.java,51,,"        Query q = em.createQuery(""select count(o) "" +"
210610,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java,49,,"        runt1.setStringField(""runt1"");"
210611,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,72,,"                ""select a from Employee a where a.hireDate >= {d '2009-08-25'}"","
210612,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,75,,"                ""select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}"","
210613,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,77,,"                ""select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}"","
210614,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,78,,"                ""select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}"","
210615,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,79,,"                ""select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}"","
210616,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java,83,,"                ""select {t '00:00:00'}, a.empId from Employee a"","
210617,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestLocate.java,44,,"        assertEquals((long) 1, em.createQuery(""select count(o) from simple o "" +"
210618,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java,72,,"        OpenJPAQuery query = pm.createQuery(""SELECT o FROM QueryTest1 o"");"
210619,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java,88,,"            ""named"", pm.getClassLoader(), true);"
210620,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java,74,,"        performFind (""Employee.findByName"", ""%Dick"", 1);"
210621,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java,120,,"        q.setParameter(""name"", ""M|%%"");"
210622,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java,50,,"            fail(""Do not expected "" + e.getClass().getName());"
210623,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java,55,,"            fail(""Expecting TransactionRequiredException thrown"");"
210624,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryLock.java,115,,"            fail(""Expecting IllegalStateException thrown"");"
210625,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java,42,,"        em.persist(new SimpleEntity(""foo"", ""bar"" + 0));"
210626,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java,42,,"        em.persist(new SimpleEntity(""foo"", ""bar"" + 0));"
210627,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java,75,,"                    .setParameter(""value"", ""XYZ"");"
210628,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java,90,,"        String jpql = ""select e from simple e WHERE e.id=?1 and e.name=?2"";"
210629,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java,108,,"        String jpql = ""select e from simple e WHERE e.id=:id and e.name=:name"";"
210630,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryParameters.java,111,,"                    .setParameter(""name"", ""XYZ"");"
210631,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java,69,,"        OpenJPAQuery q = em.createQuery(""SELECT o FROM RuntimeTest1 o"");"
210632,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java,73,,"            fail(""Iterator should have had next()"");"
210633,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java,404,,"                assertEquals(""TestQueryResults"" + (i * 2 + 1),"
210634,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java,448,,"            ""SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC"");"
210635,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,155,,"                ""being skipped for "" + dict.platform);"
210636,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,166,,"            assertFalse(hints.containsKey(""javax.persistence.query.timeout""));"
210637,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,207,,"            q.setParameter(""strVal"", new String(""updated""));"
210638,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,219,,"                    ""msecs="" + runTime);"
210639,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,222,,"                assertTrue(""Should have taken 2+ secs, but was msecs="" +"
210640,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,257,,"                ""qtimeout-no-properties"", ""persistence3.xml"", props);"
210641,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,268,,"            OpenJPAQuery q = em.createNamedQuery(""NoHintSingle"");"
210642,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,320,,"                ""javax.persistence.query.timeout="" + timeout);"
210643,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,450,,"                    @SuppressWarnings(""unused"")"
210644,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,908,,"                exec(true, 0, ""DROP TRIGGER t1"");"
210645,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java,935,,"                getLog().trace(""setupCreateDBTriggers() - creating BEFORE "" +"
210646,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java,59,,"        assertEquals(1, helper(""intField = -8""));"
210647,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java,60,,"        assertEquals(1, helper(""intField = 15""));"
210648,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java,61,,"        assertEquals(1, helper(""intField = 3""));"
210649,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java,57,,"                em.createQuery(""SELECT o FROM Entity1 o "" + ""WHERE o.stringField = 'testSimple'"", Entity1.class)"
210650,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java,61,,"            "" where o.customer.cid.id = o2.customer.cid.id)"","
210651,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java,65,,"        ""select o.oid from Order o where o.amount >"" +"
210652,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java,55,,"        assertEquals((long) 1, em.createQuery(""select count(o) from simple o "" +"
210653,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java,78,,"            ""from simple o"").getSingleResult());"
210654,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQueryCache.java,60,,"        em.createQuery(""Select object(o) from Entity1 o"").getResultList().get(0);"
210655,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java,61,,"        Query q = em.createQuery(""SELECT o from QCEntity o WHERE o.amount=?1"");"
210656,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java,67,,"        assertTrue((getLastSQL(sql) != null) && (getLastSQL(sql).contains(""IS NULL"")));"
210657,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java,141,,"        Query q = em.createNamedQuery(""QCEntity.getByAmount"");"
210658,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/querycache/TestQuerySQLCache.java,144,,"        q.setParameter(""amount"", null);"
210659,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java,46,,"        parent.setName(""parent"");"
210660,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java,66,,"            parent.setName(""parent"" + i);"
210661,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java,70,,"            oneOneChild.setName(""oneToOneChild"" + i);"
210662,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java,101,,"        assertNotSQL("".* LEFT OUTER JOIN BidiParent .*"");"
210663,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLRS.java,53,,"        lrs.setName(""lrs"");"
210664,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java,49,,"        id1.setName(""id1"");"
210665,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java,63,,"        parent.setName(""parent"");"
210666,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java,77,,"        cparent.setName(""cparent"");"
210667,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestOneOneNulls.java,83,,"        em.getFetchPlan().addField(BidiParent.class, ""oneToOneChild"");"
210668,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestOneOneNulls.java,84,,"        em.getFetchPlan().addField(BidiChild.class, ""oneToOneParent"");"
210669,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java,106,,"            Assert.fail(""didn't throw expected PersistenceException"");"
210670,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/results/cls/ResultClsAnnotation.java,34,,"    resultSetMapping = ""ResultClsRSMapping"","
210671,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java,32,,"@Table(name = ""I_ITEM"")"
210672,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java,88,,"        assertEquals(1, query(""select x from AllFieldTypes x """
210673,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java,146,,"        assertEquals(0, query(""select x from Item x """
210674,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java,147,,"                + ""where x.itemName = 'fancy cup'"")."
210675,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java,48,,"            fail(""Expected exception not thrown "" +"
210676,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java,50,,"                    ""after calling em.close"");"
210677,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java,79,,"        assertNotSQL(""UPDATE ITEM SET.*"");"
210678,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java,97,,"        place.setLocation(""Lexington"");"
210679,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java,57,,"/* num enum  */ config.put(""openjpa.AutoClear"", 0);"
210680,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java,59,,"/* plug-in   */ config.put(""openjpa.ProxyManager"", ""default(TrackChanges=false)"");"
210681,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java,59,,"/* plug-in   */ config.put(""openjpa.ProxyManager"", ""default(TrackChanges=false)"");"
210682,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java,96,,"        assertProperty(""openjpa.IgnoreChanges"", props, Boolean.FALSE);"
210683,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java,99,,"            fail(""Expected "" + JPAProperties.CACHE_RETRIEVE_MODE + "" properties be returned"");"
210684,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java,99,,"            fail(""Expected "" + JPAProperties.CACHE_RETRIEVE_MODE + "" properties be returned"");"
210685,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java,123,,"            assertNotNull(""Could not find "" + bName, harry);"
210686,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/spring/TestLibService.java,148,,"            assertEquals(bName + "" has borrowed an unexpected number of books"","
210687,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java,39,,"        assertEquals(""name1"", se.getName());"
210688,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java,198,,"                map.containsKey(""openjpa.MetaDataFactory"") ? "","" + map.get(""openjpa.MetaDataFactory"").toString() : """";"
210689,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java,181,,"            String oldValue = map.containsKey(""openjpa.MetaDataFactory"")"
210690,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestJPAFacadeHelper.java,87,,"            fail(""Didn't fail!"");"
210691,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java,307,,"            assertFalse(puu.isLoaded(ote, ""toManyLazy""));"
210692,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java,368,,"            assertFalse(puu.isLoaded(ote, ""toManyEager""));"
210693,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestProviderUtil.java,106,,"            ""name""));"
210694,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestProviderUtil.java,110,,"            ""eagerEmbed""));"
210695,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestProviderUtil.java,118,,"            ""transField""));"
210696,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationFactory.java,56,,"            ""org/apache/openjpa/persistence/validation/persistence.xml"");"
210697,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java,62,,"                ""org/apache/openjpa/persistence/validation/persistence.xml"");"
210698,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java,92,,"            assertEquals(""Validation mode"","
210699,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSchemaVersionValidation.java,34,,"            createEntityManagerFactory(""XSDTest"","
210700,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java,59,,"        assertEquals(""XmlOverride"","
210701,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java,90,,"    @SuppressWarnings(""unchecked"")"
210702,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java,191,,"        query.setParameter(""city"", ""San Jose"");"
210703,./TargetProjects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java,39,,"        new QName("""", ""MailAddress"");"
210704,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java,204,,"            getLog().info("" *Find "" + entityName + ""("" + id0 + "") with no lock"");"
210705,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java,206,,"            getLog().info("" *"" + (e0 != null ? ""F"" : ""Can not f"") + ""ind entity"");"
210706,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java,208,,"            getLog().info("" *Found entity:"" + e0);"
210707,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/LockScopeTestCase.java,209,,"            assertNotNull("" *Found "" + entityName + ""("" + id0 + "")"", e0);"
210708,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,70,,"        getLog().info(""** "" + testName + ""()"");"
210709,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,71,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210710,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,71,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210711,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,80,,"        eLf0.setFirstName(""firstName "" + idLf0);"
210712,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,83,,"        eRt0.setLastName(""lastName "" + idRt0);"
210713,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1x1LockScope.java,126,,"                            assertLockTestSQLs(Select + tableLfName + Any + tableRtName + Where + ""\\(\\+\\).*"""
210714,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,70,,"        getLog().info(""** "" + testName + ""()"");"
210715,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,71,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210716,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,71,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210717,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,82,,"        eLf0.setFirstName(""firstName "" + idLf0);"
210718,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,86,,"        eRt00.setLastName(""lastName "" + idRt00);"
210719,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,263,,"        final String joinTables  = tableLfName + "".*JOIN.*"" + tableJTName + "".*JOIN.*"" + tableRtName;"
210720,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/Test1xmLockScope.java,336,,"                                    + ""\\(\\+\\).*"" + NoForUpdate);"
210721,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,76,,"        getLog().info(""** "" + testName + ""()"");"
210722,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,77,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210723,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,77,,"        String scope = extended ? ""Extended"" : ""Normal"";"
210724,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,83,,"        e0.setFirstName(""firstName "" + id0);"
210725,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,84,,"        e0.setLastName(""lastName "" + id0);"
210726,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,877,,"        e0.addCollection(id0 + ""String1"");"
210727,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,878,,"        e0.addCollection(id0 + ""String2"");"
210728,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lock/extended/TestBasicLockScope.java,1088,,"                            assertLockTestSQLs(Select + table1Name + Any + table2Name + Where + ""\\(\\+\\).*"""
210729,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java,365,,"                    log.trace(""Employee="" + employee);"
210730,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockTimeout.java,38,,"            , ""openjpa.LockManager"", ""mixed"""
210731,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockTimeout.java,38,,"            , ""openjpa.LockManager"", ""mixed"""
210732,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockTimeout.java,50,,"            , ""javax.persistence.lock.timeout"", ""13"""
210733,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,109,,"        fetchBatchSizeHintTest(fPlan, fConfig, hintName, ""100"", 100);"
210734,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,113,,"            fPlan.setHint(hintName, ""xxxxx"");"
210735,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,115,,"            fail(""Expecting a IllegalArgumentException."");"
210736,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,117,,"            assertTrue(""Caught expected exception"","
210737,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,125,,"            fail(""Unexpected "" + e.getClass().getName());"
210738,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,149,,"            fPlan.setHint(hintName, ""yyyyy"");"
210739,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,189,,"        eagerFetchModeHintTest(fPlan, fConfig, hintName, ""none"","
210740,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,219,,"            fPlan.setHint(hintName, ""12345"");"
210741,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,220,,"            fPlan.setHint(hintName, ""67890"");"
210742,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,598,,"        String hintName = ""openjpa.FetchPlan.Isolation"";"
210743,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,678,,"            fail(""Expecting a a IllegalArgumentException."");"
210744,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestFetchHints.java,793,,"    @SuppressWarnings(""deprecation"")"
210745,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java,129,,"            {Act.NamedQueryWithLock, ""findEmployeeById"", 1, t1Lock, ""openjpa.hint.IgnorePreparedQuery"", true},"
210746,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java,129,,"            {Act.NamedQueryWithLock, ""findEmployeeById"", 1, t1Lock, ""openjpa.hint.IgnorePreparedQuery"", true},"
210747,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java,92,,"            {Act.LockObject, ""null"", LockModeType.NONE },"
210748,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerLockException.java,131,,"        launchActionSequence(""testLockIllegalArgrumentExceptions()"","
210749,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java,130,,"            {Act.RefreshObject, ""null"", LockModeType.NONE },"
210750,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java,173,,"        launchActionSequence(""testLockIllegalArgrumentExceptions()"","
210751,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java,60,,"        assertClausePresentInSQL(lockClause, em.createNamedQuery(""findEmployeeByIdWithLock"").setParameter(""id"", 0));"
210752,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java,89,,"            assertClausePresentInSQL(lockClause, em.createNamedQuery(""findEmployeeById"").setParameter(""id"", 0));"
210753,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java,75,,"        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(""findEmployeeById"").setParameter(""id"", 0));"
210754,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,98,,"        e1.setFirstName(""first.1"");"
210755,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,103,,"        d2.setName(""D20"");"
210756,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,131,,"        query.setHint(""javax.persistence.query.timeout"", lockWaitTime);"
210757,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,139,,"        hints.put(""javax.persistence.lock.timeout"", lockWaitTime);"
210758,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,144,,"            fail(""Unexcpected find succeeded. Should throw a PessimisticLockException."");"
210759,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,162,,"        assertEquals(""Expected 1 element with department id=20"", depts.size(), 1);"
210760,./TargetProjects/openjpa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java,163,,"        assertTrue(""Test department name = 'D20'"", depts.get(0).getName().equals(""D10"")"
210761,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java,496,,"                    throw new UnsupportedException(_loc.get(""unsupported"", pkg,"
210762,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java,1462,,"                        throw new MetaDataException(_loc.get(""bad-meta-anno"","
210763,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java,652,,"        abQry.add(""name"", meta.getName());"
210764,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java,1089,,"            ab.add(""fetch"", FetchType.LAZY);"
210765,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java,79,,"            xmlTypeName = xmlTypeClass.getMethod(""name"", null);"
210766,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java,80,,"            xmlTypeNamespace = xmlTypeClass.getMethod(""namespace"", null);"
210767,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java,568,,"    @SuppressWarnings(""unchecked"")"
210768,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java,1938,,"        throw new UnsupportedOperationException(""JPA 2.1"");"
210769,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java,441,,"            String expectedSetterName = ""set"" + getterName.substring("
210770,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java,729,,"                        && dataCache != null && !""false"".equals(dataCache)) {"
210771,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,622,,"        return ""class"";"
210772,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,1126,,"            String name = attrs.getValue(""name"");"
210773,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,1634,,"                String val = attrs.getValue(""fetch"");"
210774,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,1636,,"                    fmd.setInDefaultFetchGroup(""EAGER"".equals(val));"
210775,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,1688,,"            throw getException(_loc.get(""bad-meta-anno"", fmd, attr));"
210776,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java,1705,,"        val = attrs.getValue(""target-entity"");"
210777,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java,501,,"                startElement(""access"");"
210778,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java,615,,"        addAttribute(""name"", meta.getName());"
210779,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java,1117,,"            addAttribute(""fetch"", ""LAZY"");"
210780,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilderImpl.java,127,,"        throw new UnsupportedOperationException(""JPA 2.1"");"
210781,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java,148,,"            throw new UnsupportedOperationException(""JPA 2.1"");"
210782,./TargetProjects/openjpa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Members.java,76,,"        @SuppressWarnings(""unchecked"")"
210783,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java,237,,"        String[] names = {""USA"", ""India"", ""China""};"
210784,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java,63,,"            String expected = (pc.getValue()%2 == 0) ? ""Even"" : ""Odd"";"
210785,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java,63,,"            String expected = (pc.getValue()%2 == 0) ? ""Even"" : ""Odd"";"
210786,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java,95,,"            String expected = (pc.getValue() % 2 == 0) ? ""Even"" : ""Odd"";"
210787,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryMultiThreaded.java,95,,"            String expected = (pc.getValue() % 2 == 0) ? ""Even"" : ""Odd"";"
210788,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryTargetPolicy.java,65,,"            String expected = (pc.getValue()%2 == 0) ? ""Even"" : ""Odd"";"
210789,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQueryTargetPolicy.java,65,,"            String expected = (pc.getValue()%2 == 0) ? ""Even"" : ""Odd"";"
210790,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java,52,,"        parent.setName(""parent"");"
210791,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java,69,,"            .setParameter(""name"", ""parent"")"
210792,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/SampleQueryTargetPolicy.java,39,,"            if (""Even"".equals(params.get(""name"")))"
210793,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/SampleQueryTargetPolicy.java,39,,"            if (""Even"".equals(params.get(""name"")))"
210794,./TargetProjects/openjpa/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/SampleQueryTargetPolicy.java,41,,"            if (""Odd"".equals(params.get(""name"")))"
210795,./TargetProjects/openjpa/openjpa-tools/openjpa-fetch-statistics/src/test/java/org/apache/openjpa/enhance/stats/TestFetchStatistics.java,98,,"        assertTrue(res.toString(), res.contains(""org.apache.openjpa.enhance.stats.BEntity.name""));"
210796,./TargetProjects/openjpa/openjpa-tools/openjpa-fetch-statistics/src/test/java/org/apache/openjpa/enhance/stats/TestFetchStatistics.java,118,,"        assertTrue(res.contains(""org.apache.openjpa.enhance.stats.BEntity.desc""));"
210797,./TargetProjects/openjpa/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java,379,,"        buf.append(""Class: ("" + _meta.getDescribedType().getName() + "")\n"");"
210798,./TargetProjects/openjpa/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/TestPersistence.java,112,,"            place.setLocation(""Lexington"");"
210799,./TargetProjects/openmeetings/openmeetings-core/src/main/java/org/apache/openmeetings/core/ldap/LdapOptions.java,80,,"		useLowerCase = ""true"".equals(useLowerCaseProp);"
210800,./TargetProjects/openmeetings/openmeetings-core/src/test/java/org/apache/openmeetings/core/remote/TestSetupFlowMocked.java,50,,"			WsClient c = new WsClient(""sessionId"", 0);"
210801,./TargetProjects/openmeetings/openmeetings-core/src/test/java/org/apache/openmeetings/core/util/TestStrongPasswordValidator.java,66,,"			args.add(Arguments.of(""password"", web, u3, 3));"
210802,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/room/ExtraMenuDao.java,70,,"				em.createQuery(getSearchQuery(""ExtraMenu"", ""m"", search, false, false, order, searchFields)"
210803,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/dao/user/UserDao.java,401,,"					.setParameter(""type"", type)"
210804,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/calendar/Appointment.java,74,,"		+ ""  AND ( """
210805,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/calendar/Appointment.java,75,,"		+ ""    (a.start BETWEEN :start AND :end) """
210806,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/calendar/Appointment.java,76,,"		+ ""      OR (a.end BETWEEN :start AND :end) """
210807,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/calendar/Appointment.java,77,,"		+ ""      OR (a.start < :start AND a.end > :end) """
210808,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/calendar/Appointment.java,90,,"		+ ""  )"""
210809,./TargetProjects/openmeetings/openmeetings-db/src/main/java/org/apache/openmeetings/db/entity/record/Recording.java,81,,"		+ ""ORDER BY r.type ASC, r.inserted"")"
210810,./TargetProjects/openmeetings/openmeetings-db/src/test/java/org/apache/openmeetings/db/dto/user/TestOAuthUser.java,40,,"				.addMapping(PARAM_EMAIL, ""email"")"
210811,./TargetProjects/openmeetings/openmeetings-db/src/test/java/org/apache/openmeetings/db/dto/user/TestOAuthUser.java,47,,"		assertEquals(""11klahjsfwehf5"", user.getLogin(), ""Login should be correct"");"
210812,./TargetProjects/openmeetings/openmeetings-db/src/test/java/org/apache/openmeetings/db/entity/file/FileItemTest.java,67,,"		assertTrue(f.getName().endsWith(""pdf""));"
210813,./TargetProjects/openmeetings/openmeetings-db/src/test/java/org/apache/openmeetings/db/entity/file/FileItemTest.java,96,,"		fileItem.setHash(""d44ab2c5-fd5d-4903-8fa7-292286d72a5f"");"
210814,./TargetProjects/openmeetings/openmeetings-install/src/main/java/org/apache/openmeetings/cli/Admin.java,143,,"		options.addOption(new OmOption(""b,r,i"", ""file"", null, true, ""file used for backup/restore/install"", ""b""));"
210815,./TargetProjects/openmeetings/openmeetings-install/src/test/java/org/apache/openmeetings/backup/TestBackupVersion.java,39,,"		assertNotEquals(BackupVersion.get(""3.1.1""), BackupVersion.get(""3.0.0""));"
210816,./TargetProjects/openmeetings/openmeetings-util/src/main/java/org/apache/openmeetings/util/process/ProcessResult.java,128,,"			.append(""process: "").append(process).append(""\r\n"")"
210817,./TargetProjects/openmeetings/openmeetings-util/src/test/java/org/apache/openmeetings/util/TestStoredFile.java,34,,"			StoredFile sf = new StoredFile(""test"", ext, (InputStream)null);"
210818,./TargetProjects/openmeetings/openmeetings-util/src/test/java/org/apache/openmeetings/util/crypt/AbstractCryptTest.java,40,,"		assertNull(hash, ""Hash for null should be null"");"
210819,./TargetProjects/openmeetings/openmeetings-util/src/test/java/org/apache/openmeetings/util/crypt/AbstractCryptTest.java,43,,"		assertFalse(crypt.verify(null, ""abc""), ""Hash for null should be null"");"
210820,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/admin/configurations/ConfigForm.java,154,,"		stringBox.add(valueS.setLabel(new ResourceModel(""271""))).setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true);"
210821,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/admin/oauth/OAuthForm.java,103,,"		add(new RequiredTextField<String>(""name"").setLabel(new ResourceModel(""165"")));"
210822,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/pages/install/InstallWizard.java,304,,"				add(new SpinnerAjaxButton(""check"", new ResourceModel(""install.wizard.db.step.check""), Buttons.Type.Outline_Primary) {"
210823,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/room/wb/WbPanel.java,199,,"				JSONObject o = obj.optJSONObject(""obj"");"
210824,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/room/wb/WbPanel.java,231,,"									.put(""wbId"", wb.getId())"
210825,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/room/wb/WbPanel.java,232,,"									.put(""uid"", o.getString(""uid""))"
210826,./TargetProjects/openmeetings/openmeetings-web/src/main/java/org/apache/openmeetings/web/user/profile/UserSearchPanel.java,124,,"				item.add(new WebMarkupContainer(""view"").add(AttributeModifier.append(""data-user-id"", userId)));"
210827,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/db/dao/TestRoomDao.java,47,,"		assertNotNull(r, ""Room must exist"");"
210828,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/invitiation/TestInvitation.java,54,,"				getDate(from, ""GMT""), getDate(from.plusHours(2), ""GMT""), null);"
210829,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/ldap/TestLdap.java,135,,"		assertTrue(WebSession.get().signIn(USER1, userpass, User.Type.LDAP, cfg.getId()), ""Login should be successful"");"
210830,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/service/mail/template/TestEmailTemplate.java,40,,"		checkTemplate(InvitationTemplate.getEmail(u, ""testuser"", ""email"", ""message"", true));"
210831,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/service/mail/template/TestEmailTemplate.java,40,,"		checkTemplate(InvitationTemplate.getEmail(u, ""testuser"", ""email"", ""message"", true));"
210832,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/service/mail/template/TestEmailTemplate.java,40,,"		checkTemplate(InvitationTemplate.getEmail(u, ""testuser"", ""email"", ""message"", true));"
210833,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/web/pages/auth/TestLoginUI.java,57,,"		formTester.submit(""submit"");"
210834,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/AbstractWebServiceTest.java,145,,"				.query(""sid"", sid)"
210835,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,74,,"		AppointmentDTO app = getClient(getCalendarUrl()).path(""/room/"" + a.getRoom().getId()).query(""sid"", sr.getMessage())"
210836,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,76,,"		assertNotNull(app, ""Valid DTO should be returned"");"
210837,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,101,,"					.put(""appointment"", true)"
210838,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,138,,"		assertNotNull(resp, ""Valid AppointmentDTO should be returned"");"
210839,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,139,,"		assertEquals(Response.Status.OK.getStatusCode(), resp.getStatus(), ""Call should be successful"");"
210840,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,142,,"		assertNotNull(dto.getId(), ""DTO id should be valid"");"
210841,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestCalendarService.java,167,,"						.put(new JSONObject().put(""user"", new JSONObject()"
210842,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestErrorService.java,44,,"		assertEquals(ServiceResult.Type.SUCCESS.name(), sr.getType(), ""SUCCESS result should be returned"");"
210843,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestErrorService.java,61,,"				.path(""/report"")"
210844,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestErrorService.java,63,,"		assertNotNull(resp, ""Not null Response should be returned"");"
210845,./TargetProjects/openmeetings/openmeetings-web/src/test/java/org/apache/openmeetings/webservice/TestGroupService.java,48,,"				.query(""sid"", r.getMessage()).getCollection(GroupDTO.class);"
210846,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java,92,,"	public List<AppointmentDTO> range(@QueryParam(""sid"") @WebParam(name=""sid"") String sid"
210847,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java,93,,"			, @PathParam(""start"") @WebParam(name=""start"") Calendar start"
210848,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java,94,,"			, @PathParam(""end"") @WebParam(name=""end"") Calendar end"
210849,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/CalendarWebService.java,123,,"			, @PathParam(""userid"") @WebParam(name=""userid"") long userid"
210850,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java,91,,"	public ServiceResult delete(@QueryParam(""sid"") @WebParam(name=""sid"") String sid"
210851,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/FileWebService.java,128,,"			, @WebParam(name=""externaltype"") @PathParam(""externaltype"") String externalType"
210852,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java,92,,"	public ServiceResult add(@QueryParam(""sid"") @WebParam(name=""sid"") String sid"
210853,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/GroupWebService.java,136,,"			, @PathParam(""userid"") @WebParam(name=""userid"") Long userid"
210854,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java,79,,"	public ServiceResult delete(@QueryParam(""sid"") @WebParam(name=""sid"") String sid"
210855,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RecordingWebService.java,103,,"			, @PathParam(""externaltype"") @WebParam(name=""externaltype"") String externalType"
210856,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java,110,,"	public List<RoomDTO> getPublic(@QueryParam(""sid"") @WebParam(name=""sid"") String sid"
210857,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java,111,,"			, @PathParam(""type"") @WebParam(name=""type"") String type"
210858,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java,182,,"			, @WebParam(name=""room"") @QueryParam(""room"") RoomDTO room"
210859,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/RoomWebService.java,386,,"			, @WebParam(name=""roomid"") @PathParam(""roomid"") Long roomId"
210860,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java,109,,"	public ServiceResult login(@WebParam(name=""user"") @QueryParam(""user"") String user, @WebParam(name=""pass"") @QueryParam(""pass"") String pass) {"
210861,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/UserWebService.java,140,,"	public List<UserDTO> get(@WebParam(name=""sid"") @QueryParam(""sid"") String sid) throws ServiceException {"
210862,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/WbWebService.java,99,,"	public ServiceResult resetWb(@WebParam(name=""sid"") @QueryParam(""sid"") String sid"
210863,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/WbWebService.java,123,,"			, @WebParam(name=""roomid"") @PathParam(""roomid"") long roomId"
210864,./TargetProjects/openmeetings/openmeetings-webservice/src/main/java/org/apache/openmeetings/webservice/WbWebService.java,124,,"			, @WebParam(name=""wbid"") @PathParam(""wbid"") long wbId"
210865,./TargetProjects/opennlp/opennlp-morfologik-addon/src/main/java/opennlp/morfologik/cmdline/builder/MorfologikDictionaryBuilderParams.java,35,,"  @ParameterDescription(valueName = ""true|false"", description = ""Accept leading BOM bytes (UTF-8)."")"
210866,./TargetProjects/opennlp/opennlp-morfologik-addon/src/main/java/opennlp/morfologik/cmdline/builder/MorfologikDictionaryBuilderParams.java,36,,"  @OptionalParameter(defaultValue = ""false"")"
210867,./TargetProjects/opennlp/opennlp-morfologik-addon/src/test/java/opennlp/morfologik/tagdict/MorfologikTagDictionaryTest.java,40,,"    Assert.assertTrue(tags.contains(""NOUN""));"
210868,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/CmdLineUtil.java,73,,"      isFailure = ""The "" + name + "" file is a directory!"";"
210869,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/FineGrainedReportListener.java,191,,"      matrix[i][j] = MessageFormat.format(""{0,number,#.##%}"", data[i][j]);"
210870,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/FineGrainedReportListener.java,226,,"        String.format(""%21s: %6s"", ""Number of sentences"","
210871,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/FineGrainedReportListener.java,359,,"      String rate = MessageFormat.format(""{0,number,#.###}"", (double) errors"
210872,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/GenerateManualTool.java,165,,"              .append(""' valign='middle'>"").append(format).append(""</entry>\n"");"
210873,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/cmdline/GenerateManualTool.java,167,,"        sb.append(""<entry>"").append(argument.getArgument())"
210874,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/formats/nkjp/NKJPSegmentationDocument.java,105,,"        if (sentnode.getAttributes().getNamedItem(""xml:id"") != null) {"
210875,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNMinimizer.java,373,,"            + CONVERGE_TOLERANCE + "".\nTraining will stop.\n\n"");"
210876,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/namefind/BilouCodec.java,76,,"          outcomes[name.getStart()] = ""default"" + ""-"" + BilouCodec.START;"
210877,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,648,,"    if (rest.startsWith(""-LCB-"")) {"
210878,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,651,,"    else if (rest.startsWith(""-RCB-"")) {"
210879,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,654,,"    else if (rest.startsWith(""-LRB-"")) {"
210880,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,657,,"    else if (rest.startsWith(""-RRB-"")) {"
210881,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,660,,"    else if (rest.startsWith(""-RSB-"")) {"
210882,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java,663,,"    else if (rest.startsWith(""-LSB-"")) {"
210883,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/lang/es/AncoraSpanishHeadRules.java,147,,"    if (type.equals(""SN"") || type.equals(""GRUP.NOM"")) {"
210884,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java,469,,"        mlParams.getParameters(""build""), buildReportMap);"
210885,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java,483,,"        mlParams.getParameters(""check""), checkReportMap);"
210886,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/stemmer/PorterStemmer.java,263,,"      if (ends(""at"")) setto(""ate"");"
210887,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/stemmer/PorterStemmer.java,265,,"      else if (ends(""iz"")) setto(""ize"");"
210888,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/frenchStemmer.java,60,,"                    new Among ( ""iqU"", -1, 3, """", methodObject ),"
210889,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/greekStemmer.java,146,,"        new Among(""\u03B4\u03B1\u03BD\u03B5"", -1, 1, """", methodObject),"
210890,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/greekStemmer.java,148,,"        new Among(""\u03C3\u03C5\u03BD\u03B1\u03B8\u03C1\u03BF"", 7, 1, """", methodObject)"
210891,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownBigramFeatureGenerator.java,45,,"      features.add(""p"" + ""browncluster"" + "","" + ""browncluster"" + ""="""
210892,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java,148,,"          if (type.equals(""generator"")) {"
210893,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java,199,,"        throw new InvalidFormatException(""parameter "" + name + "" must be set!"");"
210894,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java,199,,"        throw new InvalidFormatException(""parameter "" + name + "" must be set!"");"
210895,./TargetProjects/opennlp/opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java,375,,"      String featureGeneratorClassName = generatorElement.getAttribute(""class"");"
210896,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java,66,,"        ""NNS"","
210897,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java,87,,"        ""B-NP"","
210898,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java,90,,"        ""I-NP"","
210899,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkSampleTest.java,201,,"    Assert.assertEquals(new Span(6, 7, ""ADVP""), spans[4]);"
210900,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerEvaluatorTest.java,53,,"        getClass(), ""/opennlp/tools/chunker/output.txt"");"
210901,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java,63,,"  private static String[] expect1 = { ""B-NP"", ""B-VP"", ""B-NP"", ""I-NP"", ""B-VP"", ""B-SBAR"","
210902,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/chunker/ChunkerMETest.java,63,,"  private static String[] expect1 = { ""B-NP"", ""B-VP"", ""B-NP"", ""I-NP"", ""B-VP"", ""B-SBAR"","
210903,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/eval/OntoNotes4NameFinderEval.java,96,,"    params.put(""Threads"", ""4"");"
210904,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/eval/SourceForgeModelEval.java,166,,"                    ""leipzig/eng_news_2010_300K-sentences.txt""))),"
210905,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java,71,,"    Assert.assertEquals(new Span(8, 10, ""place""), samples.get(0).getNames()[1]);"
210906,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java,73,,"    Assert.assertEquals(new Span(15, 17, ""person""), samples.get(0).getNames()[3]);"
210907,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/formats/ad/ADNameSampleStreamTest.java,91,,"    Assert.assertEquals(new Span(6, 7, ""event""), samples.get(3).getNames()[1]);//    6..7"
210908,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/langdetect/LanguageSampleTest.java,35,,"    Language lang = new Language(""aLang"");"
210909,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/langdetect/LanguageSampleTest.java,36,,"    CharSequence context = ""aContext"";"
210910,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/langdetect/LanguageTest.java,58,,"    Language lang = new Language(""aLang"");"
210911,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,51,,"    Assert.assertTrue(""a probability measure should be between 0 and 1 [was """
210912,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,58,,"    model.add(""I"", ""saw"", ""the"", ""fox"");"
210913,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,58,,"    model.add(""I"", ""saw"", ""the"", ""fox"");"
210914,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,58,,"    model.add(""I"", ""saw"", ""the"", ""fox"");"
210915,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,59,,"    model.add(""the"", ""red"", ""house"");"
210916,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,59,,"    model.add(""the"", ""red"", ""house"");"
210917,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,60,,"    model.add(""I"", ""saw"", ""something"", ""nice"");"
210918,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,73,,"    model.add(""<s>"", ""I"", ""am"", ""Sam"", ""</s>"");"
210919,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,73,,"    model.add(""<s>"", ""I"", ""am"", ""Sam"", ""</s>"");"
210920,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/languagemodel/NgramLanguageModelTest.java,73,,"    model.add(""<s>"", ""I"", ""am"", ""Sam"", ""</s>"");"
210921,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/lemmatizer/LemmatizerMETest.java,53,,"  private static String[] tokens = { ""Rockwell"", ""said"", ""the"", ""agreement"", ""calls"", ""for"","
210922,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/lemmatizer/LemmatizerMETest.java,53,,"  private static String[] tokens = { ""Rockwell"", ""said"", ""the"", ""agreement"", ""calls"", ""for"","
210923,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/maxent/quasinewton/NegLogLikelihoodTest.java,54,,"        ""src/test/resources/data/opennlp/maxent/real-valued-weights-training-data.txt"","
210924,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/maxent/quasinewton/QNTrainerTest.java,58,,"        ""src/test/resources/data/opennlp/maxent/real-valued-weights-training-data.txt"");"
210925,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/maxent/quasinewton/QNTrainerTest.java,75,,"        ""feature2"",""feature3"", ""feature3"","
210926,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/naivebayes/NaiveBayesCorrectnessTest.java,62,,"    String label = ""politics"";"
210927,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/naivebayes/NaiveBayesCorrectnessTest.java,63,,"    String[] context = {""bow=united"", ""bow=nations""};"
210928,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ml/perceptron/PerceptronPrepAttachTest.java,64,,"    trainParams.put(""UseSkippedAveraging"", true);"
210929,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/BilouNameFinderSequenceValidatorTest.java,29,,"  private static String START_A = ""TypeA-"" + BilouCodec.START;"
210930,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/BilouNameFinderSequenceValidatorTest.java,45,,"    String[] inputSequence = new String[] {""TypeA"", ""TypeA"", ""something""};"
210931,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/BilouNameFinderSequenceValidatorTest.java,45,,"    String[] inputSequence = new String[] {""TypeA"", ""TypeA"", ""something""};"
210932,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/BilouNameFinderSequenceValidatorTest.java,97,,"    inputSequence = new String[] {""TypeA"", ""TypeB"", ""something""};"
210933,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/BilouNameFinderSequenceValidatorTest.java,158,,"    String[] inputSequence = new String[] {""TypeA"", ""AnyType"", ""something""};"
210934,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/DictionaryNameFinderTest.java,39,,"    StringList vanessa = new StringList(new String[]{""Vanessa""});"
210935,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java,72,,"    TokenNameFinderModel nameFinderModel = NameFinderME.train(""eng"", null, sampleStream,"
210936,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java,81,,"        ""the"","
210937,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java,143,,"    Assert.assertEquals(new Span(1, 2, ""person""), names2[0]);"
210938,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java,182,,"            ""Robert Aderholt Daniel Akaka Todd Akin Lamar Alexander Rodney Alexander"").split(""\\s+"");"
210939,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java,287,,"    Assert.assertEquals(new Span(1, 3, ""location""), names1[1]); // United States"
210940,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,39,,"    String[] inputSequence = new String[] {""PersonA"", ""is"", ""here""};"
210941,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,39,,"    String[] inputSequence = new String[] {""PersonA"", ""is"", ""here""};"
210942,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,51,,"    String[] inputSequence = new String[] {""Stefanie"", ""Schmidt"", ""is"", ""German""};"
210943,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,51,,"    String[] inputSequence = new String[] {""Stefanie"", ""Schmidt"", ""is"", ""German""};"
210944,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,63,,"    String[] inputSequence = new String[] {""PersonA"", ""LocationA"", ""something""};"
210945,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderSequenceValidatorTest.java,112,,"    inputSequence = new String[] {""it's"", ""PersonA"", ""again""};"
210946,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java,200,,"    String[] expectedPerson = { ""Barack Obama"", ""Obama"", ""Obama"","
210947,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java,206,,"    String[] expectedLocation = { ""U . S ."", ""South Korea"", ""North Korea"","
210948,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleDataStreamTest.java,206,,"    String[] expectedLocation = { ""U . S ."", ""South Korea"", ""North Korea"","
210949,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java,50,,"    Span[] names = {new Span(0, 4, ""Location""), new Span(5, 7, ""Person""),"
210950,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/NameSampleTest.java,102,,"    String[] sentence = {""A"", ""Place"", ""a"", ""time"", ""A"", ""Person"", "".""};"
210951,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/namefind/TokenNameFinderEvaluatorTest.java,75,,"    Span[] names = { new Span(0, 4, ""Location""), new Span(5, 7, ""Person""),"
210952,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramCharModelTest.java,39,,"    ngramModel.add(""the"");"
210953,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramGeneratorTest.java,32,,"    final List<String> input = Arrays.asList(""This"", ""is"", ""a"", ""sentence"");"
210954,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramGeneratorTest.java,32,,"    final List<String> input = Arrays.asList(""This"", ""is"", ""a"", ""sentence"");"
210955,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramGeneratorTest.java,94,,"    final char[] input = ""Test"".toCharArray();"
210956,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramModelTest.java,49,,"    ngramModel.add(new StringList(""the"", ""bro"", ""wn""));"
210957,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramModelTest.java,49,,"    ngramModel.add(new StringList(""the"", ""bro"", ""wn""));"
210958,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramModelTest.java,50,,"    int count = ngramModel.getCount(new StringList(""fox""));"
210959,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramModelTest.java,85,,"    ngramModel.add(new StringList(""the"", ""brown"", ""fox""), 2, 3);"
210960,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramModelTest.java,131,,"    StringList tokens = new StringList(""the"", ""brown"", ""fox"", ""jumped"");"
210961,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,36,,"    set.add(new StringList(""<s>"", ""I"", ""am"", ""Sam"", ""</s>""));"
210962,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,36,,"    set.add(new StringList(""<s>"", ""I"", ""am"", ""Sam"", ""</s>""));"
210963,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,36,,"    set.add(new StringList(""<s>"", ""I"", ""am"", ""Sam"", ""</s>""));"
210964,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,38,,"    set.add(new StringList(""<s>"", ""I"", ""do"", ""not"", ""like"", ""green"", ""eggs"", ""and"", ""ham"", ""</s>""));"
210965,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,77,,"    set.add(new StringList(""the"", ""green"", ""book"", ""STOP""));"
210966,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/ngram/NGramUtilsTest.java,77,,"    set.add(new StringList(""the"", ""green"", ""book"", ""STOP""));"
210967,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/parser/ChunkSampleStreamTest.java,42,,"      assertEquals(""S-NP"", sample.getPreds()[0]);"
210968,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/postag/POSDictionaryTest.java,62,,"    dictionary.put(""Always"", ""RB"",""NNP"");"
210969,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/postag/POSDictionaryTest.java,71,,"    Assert.assertArrayEquals(new String[]{""NNP""}, dict.getTags(""McKinsey""));"
210970,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/postag/POSDictionaryTest.java,72,,"    Assert.assertNull(dict.getTags(""Mckinsey""));"
210971,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/postag/POSDictionaryTest.java,90,,"    POSDictionary dict = loadDictionary(""TagDictionaryCaseInsensitive.xml"");"
210972,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/sentdetect/DefaultSDContextGeneratorTest.java,37,,"        ""Mr. Smith joined RONDHUIT Inc. as a manager of sales department."", 2);"
210973,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorFactoryTest.java,58,,"    return SentenceDetectorME.train(""eng"", createSampleStream(), factory,"
210974,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java,49,,"    SentenceDetectorFactory factory = new SentenceDetectorFactory(""eng"", true, null, null);"
210975,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceDetectorMETest.java,63,,"    Assert.assertEquals(sents[0],""This is a test."");"
210976,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/sentdetect/SentenceSampleTest.java,40,,"    SentenceSample sample = new SentenceSample(""1. 2."","
210977,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java,69,,"    final String lang = ""spa"";"
210978,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/tokenize/WhitespaceTokenizerTest.java,30,,"    Assert.assertEquals(""one"", WhitespaceTokenizer.INSTANCE.tokenize(""one"")[0]);"
210979,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/ParagraphStreamTest.java,31,,"      Assert.assertEquals(""1\n2\n"", paraStream.read());"
210980,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/PlainTextByLineStreamTest.java,31,,"  static final String testString = ""line1"" +"
210981,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/PlainTextByLineStreamTest.java,33,,"          ""line2"" +"
210982,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/PlainTextByLineStreamTest.java,35,,"          ""line3"" +"
210983,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/TrainingParametersTest.java,96,,"    Assert.assertEquals(""v1"", tp.getStringParameter(""k1"", ""def""));"
210984,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/TrainingParametersTest.java,107,,"    Assert.assertEquals(234.5, tp.getDoubleParameter(""k21"", -100), 0.001);"
210985,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/featuregen/FeatureGeneratorUtilTest.java,43,,"    Assert.assertEquals(""other"", FeatureGeneratorUtil.tokenFeature(""somethingStupid""));"
210986,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/featuregen/SentenceFeatureGeneratorTest.java,47,,"    Assert.assertEquals(""S=begin"", features.get(0));"
210987,./TargetProjects/opennlp/opennlp-tools/src/test/java/opennlp/tools/util/featuregen/SentenceFeatureGeneratorTest.java,53,,"    Assert.assertEquals(""S=end"", features.get(0));"
210988,./TargetProjects/opennlp-addons/geoentitylinker-addon/src/main/java/opennlp/addons/geoentitylinker/AdminBoundaryContextGenerator.java,162,,"            provMentions.putAll(regexfind(text, provsForCc, provHits, ""province""));"
210989,./TargetProjects/opennlp-addons/geoentitylinker-addon/src/main/java/opennlp/addons/geoentitylinker/indexing/RegionProcessor.java,93,,"        ccfileentries.add(id + ""\t"" + id + ""\t"" + id + ""\t"" + placeName + ""\t"" + ""NO_DATA_FOUND"" + ""\t"" + ""NO_DATA_FOUND"" + ""\t"" + ""("""
210990,./TargetProjects/opennlp-addons/japanese-addon/src/main/java/opennlp/tools/util/featuregen/lang/jpn/FeatureGeneratorUtil.java,45,,"    if (token.length() == 0) return ""other"";"
210991,./TargetProjects/opennlp-addons/japanese-addon/src/test/java/opennlp/tools/namefind/AuxiliaryInfoUtilTest.java,57,,"    Assert.assertEquals(""POStag"", AuxiliaryInfoUtil.getAuxPart(""/POStag""));"
210992,./TargetProjects/opennlp-addons/japanese-addon/src/test/java/opennlp/tools/util/featuregen/lang/jpn/FeatureGeneratorUtilTest.java,30,,"    Assert.assertEquals(""other"", FeatureGeneratorUtil.tokenFeature(""abcd234""));"
210993,./TargetProjects/opennlp-addons/japanese-addon/src/test/java/opennlp/tools/util/featuregen/lang/jpn/FeatureGeneratorUtilTest.java,38,,"    Assert.assertEquals(""alpha"", FeatureGeneratorUtil.tokenFeature(""opennlp""));"
210994,./TargetProjects/opennlp-addons/japanese-addon/src/test/java/opennlp/tools/util/featuregen/lang/jpn/TokenPatternFeatureGeneratorTest.java,62,,"    Assert.assertEquals(""pt2=alphaalpha"", features.get(1));"
210995,./TargetProjects/opennlp-addons/morfologik-addon/src/main/java/opennlp/morfologik/cmdline/builder/MorfologikDictionaryBuilderParams.java,34,,"  @ParameterDescription(valueName = ""true|false"", description = ""Accept leading BOM bytes (UTF-8)."")"
210996,./TargetProjects/opennlp-addons/morfologik-addon/src/main/java/opennlp/morfologik/cmdline/builder/MorfologikDictionaryBuilderParams.java,35,,"  @OptionalParameter(defaultValue=""false"")"
210997,./TargetProjects/opennlp-addons/morfologik-addon/src/test/java/opennlp/morfologik/lemmatizer/MorfologikLemmatizerTest.java,18,,"    assertEquals(""casar"", dict.lemmatize(""casa"", ""V""));"
210998,./TargetProjects/opennlp-addons/morfologik-addon/src/test/java/opennlp/morfologik/tagdict/MorfologikTagDictionaryTest.java,23,,"    assertTrue(tags.contains(""NOUN""));"
210999,./TargetProjects/opennlp-sandbox/caseditor-corpus-server-plugin/src/main/java/org/apache/opennlp/corpus_server/caseditor/DefaultCasDocumentProvider.java,170,,"            .path(URLEncoder.encode(casInput.getName(), ""UTF-8""))"
