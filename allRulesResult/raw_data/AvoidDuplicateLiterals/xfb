131000,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,65,,"    Assert.assertEquals(pinotQuery.getQueryOptions().get(Request.TRACE), ""true"");"
131001,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,70,,"    jsonRequest.put(Request.DEBUG_OPTIONS, ""debugOption1=foo"");"
131002,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,74,,"    Assert.assertEquals(pinotQuery.getDebugOptions().get(""debugOption1""), ""foo"");"
131003,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,74,,"    Assert.assertEquals(pinotQuery.getDebugOptions().get(""debugOption1""), ""foo"");"
131004,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,83,,"    Assert.assertEquals(pinotQuery.getDebugOptions().get(""debugOption2""), ""bar"");"
131005,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,101,,"    queryOptions.put(""queryOption1"", ""foo"");"
131006,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,124,,"    jsonRequest.put(Request.QUERY_OPTIONS, ""queryOption1=bar;queryOption2=moo"");"
131007,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,130,,"    Assert.assertEquals(pinotQuery.getQueryOptions().get(""queryOption2""), ""moo"");"
131008,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/BrokerRequestOptionsTest.java,130,,"    Assert.assertEquals(pinotQuery.getQueryOptions().get(""queryOption2""), ""moo"");"
131009,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/requesthandler/QueryValidationTest.java,109,,"    testUnsupportedPQLQuery(pql, ""Aggregation functions cannot be used with DISTINCT"");"
131010,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,69,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2""), Arrays.asList(""merged_0"", ""merged_1""),"
131011,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,69,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2""), Arrays.asList(""merged_0"", ""merged_1""),"
131012,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,69,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2""), Arrays.asList(""merged_0"", ""merged_1""),"
131013,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,69,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2""), Arrays.asList(""merged_0"", ""merged_1""),"
131014,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,69,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2""), Arrays.asList(""merged_0"", ""merged_1""),"
131015,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,74,,"        new HashSet<>(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2"", ""segment_3"", ""segment_4"")));"
131016,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpreselector/SegmentPreSelectorTest.java,74,,"        new HashSet<>(Arrays.asList(""segment_0"", ""segment_1"", ""segment_2"", ""segment_3"", ""segment_4"")));"
131017,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpruner/SegmentPrunerTest.java,152,,"    columnPartitionConfigMap.put(PARTITION_COLUMN, new ColumnPartitionConfig(""Modulo"", 5));"
131018,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpruner/SegmentPrunerTest.java,231,,"  @Test(dataProvider = ""compilerProvider"")"
131019,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpruner/SegmentPrunerTest.java,277,,"    String segment0 = ""segment0"";"
131020,./TargetProjects/incubator-pinot/pinot-broker/src/test/java/org/apache/pinot/broker/routing/segmentpruner/SegmentPrunerTest.java,281,,"    String segment1 = ""segment1"";"
131021,./TargetProjects/incubator-pinot/pinot-clients/pinot-java-client/src/main/java/org/apache/pinot/client/ExternalViewReader.java,73,,"          if (brokerName.startsWith(""Broker_"") && ""ONLINE"".equals(brokerEntry.getValue().asText())) {"
131022,./TargetProjects/incubator-pinot/pinot-clients/pinot-java-client/src/test/java/org/apache/pinot/client/DynamicBrokerSelectorTest.java,69,,"    dynamicBrokerSelectorUnderTest.handleDataChange(""dataPath"", ""data"");"
131023,./TargetProjects/incubator-pinot/pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/Constants.java,28,,"  public static final String[] CATALOG_COLUMNS_DTYPES = {""STRING""};"
131024,./TargetProjects/incubator-pinot/pinot-clients/pinot-jdbc-client/src/main/java/org/apache/pinot/client/utils/Constants.java,41,,"      {""STRING"", ""STRING"", ""STRING"", ""STRING"", ""INT"", ""STRING"", ""INT"", ""INT"", ""INT"", ""INT"", ""INT"", ""STRING"", ""STRING"", ""INT"", ""INT"", ""INT"", ""INT"", ""STRING"", ""STRING"", ""STRING"", ""STRING"", ""INT"", ""STRING"", ""STRING""};"
131025,./TargetProjects/incubator-pinot/pinot-clients/pinot-jdbc-client/src/test/java/org/apache/pinot/client/PinotPreparedStatementTest.java,43,,"    PinotConnection connection = new PinotConnection(""dummy"", _dummyPinotClientTransport, ""dummy"" ,_dummyPinotControllerTransport);"
131026,./TargetProjects/incubator-pinot/pinot-clients/pinot-jdbc-client/src/test/java/org/apache/pinot/client/PinotPreparedStatementTest.java,56,,"    Assert.assertEquals(lastExecutedQuery.substring(0, lastExecutedQuery.indexOf(""LIMIT"")).trim(),"
131027,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/function/TimeZoneKey.java,171,,"      return ""utc"";"
131028,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metadata/segment/LLCRealtimeSegmentZKMetadata.java,103,,"    result.append(""  "" + super.getClass().getName() + "" : "" + super.toString());"
131029,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metadata/segment/OfflineSegmentZKMetadata.java,90,,"    result.append(""  "" + super.getClass().getName() + "" : "" + super.toString());"
131030,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerMeter.java,28,,"  UNCAUGHT_GET_EXCEPTIONS(""exceptions"", true),"
131031,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/BrokerMeter.java,55,,"  BROKER_RESPONSES_WITH_PROCESSING_EXCEPTIONS(""badResponses"", false),"
131032,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/MinionMeter.java,28,,"  NUMBER_TASKS_EXECUTED(""tasks"", false),"
131033,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerGauge.java,36,,"  LAST_REALTIME_SEGMENT_CREATION_DURATION_SECONDS(""seconds"", false),"
131034,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerMeter.java,29,,"  UNCAUGHT_EXCEPTIONS(""exceptions"", true),"
131035,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerMeter.java,35,,"  DELETED_SEGMENT_COUNT(""segments"", false),"
131036,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerMeter.java,36,,"  REALTIME_ROWS_CONSUMED(""rows"", true),"
131037,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/metrics/ServerMeter.java,43,,"  LLC_CONTROLLER_RESPONSE_NOT_SENT(""messages"", true),"
131038,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/minion/MinionRequestURLBuilder.java,55,,"    return StringUtil.join(""/"", _baseUrl, ""tasks"", taskType, ""tasks"");"
131039,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/BrokerRequest.java,1624,,"        sb.append(""null"");"
131040,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/Expression.java,502,,"      sb.append(""null"");"
131041,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/FilterQuery.java,631,,"        sb.append(""null"");"
131042,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/HavingFilterQuery.java,631,,"        sb.append(""null"");"
131043,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/PinotQuery.java,164,,"            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , ""Expression""))));"
131044,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/request/PinotQuery.java,1078,,"        sb.append(""null"");"
131045,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/response/broker/SelectionResults.java,28,,"@JsonPropertyOrder({""columns"", ""results""})"
131046,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/response/broker/SelectionResults.java,28,,"@JsonPropertyOrder({""columns"", ""results""})"
131047,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/common/utils/FileUploadDownloadClient.java,442,,"      requestBuilder.addHeader(""Authorization"", authToken);"
131048,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/BooleanOperatorAstNode.java,44,,"    throw new AssertionError(""Should not happen"");"
131049,./TargetProjects/incubator-pinot/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java,129,,"        throw new Pql2CompilationException(""Comparison is not between a column and a constant"");"
131050,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,52,,"    entries.add(new Object[]{""1:HOURS:EPOCH"", ""416359"", 1498892400000L});"
131051,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,55,,"    entries.add(new Object[]{""5:MINUTES:EPOCH"", ""4996308"", 1498892400000L});"
131052,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,59,,"    entries.add(new Object[]{""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd"", ""20170701"", DateTimeFormat.forPattern(""yyyyMMdd"")"
131053,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,59,,"    entries.add(new Object[]{""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd"", ""20170701"", DateTimeFormat.forPattern(""yyyyMMdd"")"
131054,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,65,,"        new Object[]{""1:HOURS:SIMPLE_DATE_FORMAT:yyyyMMdd HH"", ""20170701 00"", DateTimeFormat.forPattern(""yyyyMMdd HH"")"
131055,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,65,,"        new Object[]{""1:HOURS:SIMPLE_DATE_FORMAT:yyyyMMdd HH"", ""20170701 00"", DateTimeFormat.forPattern(""yyyyMMdd HH"")"
131056,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,71,,"    entries.add(new Object[]{""1:HOURS:SIMPLE_DATE_FORMAT:M/d/yyyy h:mm:ss a"", ""8/7/2017 12:45:50 AM"", 1502066750000L});"
131057,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,100,,"        .forPattern(""yyyyMMdd HH"").withZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(""IST""))).print("
131058,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,108,,"        .forPattern(""M/d/yyyy h:mm:ss a"").withZoneUTC().withLocale(Locale.ENGLISH).print(1498892400000L)});"
131059,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,210,,"    entries.add(new Object[]{1, TimeUnit.HOURS, ""EPOCH"", null, new DateTimeFormatSpec(""1:HOURS:EPOCH""), null});"
131060,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/DateTimeFormatSpecTest.java,217,,"    entries.add(new Object[]{1, TimeUnit.HOURS, ""SIMPLE_DATE_FORMAT"", ""yyyyMMdd"", null, new DateTimeFormatSpec("
131061,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/FieldSpecTest.java,79,,"    fieldSpec1.setName(""svDimension"");"
131062,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/FieldSpecTest.java,123,,"    fieldSpec1.setName(""mvDimension"");"
131063,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/FieldSpecTest.java,282,,"    String[] dimensionFields = {""\""name\"":\""dimension\"""", ""\""dataType\"":\""BOOLEAN\"""", ""\""defaultNullValue\"":false""};"
131064,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,60,,"    schemaToValidate.addField(new MetricFieldSpec(""m"", FieldSpec.DataType.STRING, ""null""));"
131065,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,97,,"    String defaultString = ""default"";"
131066,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,98,,"    Schema schema = new Schema.SchemaBuilder().addSingleValueDimension(""svDimension"", FieldSpec.DataType.INT)"
131067,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,99,,"        .addSingleValueDimension(""svDimensionWithDefault"", FieldSpec.DataType.INT, 10)"
131068,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,101,,"        .addMultiValueDimension(""mvDimension"", FieldSpec.DataType.STRING)"
131069,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,102,,"        .addMultiValueDimension(""mvDimensionWithDefault"", FieldSpec.DataType.STRING, defaultString)"
131070,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,104,,"        .addMetric(""metric"", FieldSpec.DataType.INT).addMetric(""metricWithDefault"", FieldSpec.DataType.INT, 5)"
131071,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,104,,"        .addMetric(""metric"", FieldSpec.DataType.INT).addMetric(""metricWithDefault"", FieldSpec.DataType.INT, 5)"
131072,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,105,,"        .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.DAYS, ""time""), null)"
131073,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,106,,"        .addDateTime(""dateTime"", FieldSpec.DataType.LONG, ""1:HOURS:EPOCH"", ""1:HOURS"")"
131074,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,106,,"        .addDateTime(""dateTime"", FieldSpec.DataType.LONG, ""1:HOURS:EPOCH"", ""1:HOURS"")"
131075,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,106,,"        .addDateTime(""dateTime"", FieldSpec.DataType.LONG, ""1:HOURS:EPOCH"", ""1:HOURS"")"
131076,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/data/SchemaTest.java,243,,"        new Schema.SchemaBuilder().setSchemaName(""testSchema"").addTime(incomingTimeGranularitySpec, null).build();"
131077,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,79,,"        ""        {\n"" +"
131078,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,91,,"    assertEquals(JsonFunctions.jsonPathArray(jsonString, ""$.subjects[*].name""), new String[]{""maths"", ""english""});"
131079,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,91,,"    assertEquals(JsonFunctions.jsonPathArray(jsonString, ""$.subjects[*].name""), new String[]{""maths"", ""english""});"
131080,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,126,,"    rawData.add(ImmutableMap.of(""name"", ""maths"", ""grade"", ""A"", ""score"", 90,"
131081,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,126,,"    rawData.add(ImmutableMap.of(""name"", ""maths"", ""grade"", ""A"", ""score"", 90,"
131082,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,126,,"    rawData.add(ImmutableMap.of(""name"", ""maths"", ""grade"", ""A"", ""score"", 90,"
131083,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/function/JsonFunctionsTest.java,127,,"        ""homework_grades"", Arrays.asList(80, 85, 90, 95, 100)));"
131084,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/http/MultiGetRequestTest.java,112,,"    List<String> urls = Arrays.asList(""http://localhost:"" + String.valueOf(portStart) + URI_PATH,"
131085,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/metadata/InstanceZKMetadataTest.java,52,,"      groupIdMap.put(""testRes"" + i + ""_REALTIME"", ""groupId"" + i);"
131086,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/protocols/SegmentCompletionProtocolTest.java,40,,"    URI uri = new URI(extendBuildTimeRequest.getUrl(""localhost:8080"", ""http""));"
131087,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/protocols/SegmentCompletionProtocolTest.java,40,,"    URI uri = new URI(extendBuildTimeRequest.getUrl(""localhost:8080"", ""http""));"
131088,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/protocols/SegmentCompletionProtocolTest.java,61,,"    params = new SegmentCompletionProtocol.Request.Params().withSegmentName(""foo__0__0__12345Z"")"
131089,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/protocols/SegmentCompletionProtocolTest.java,62,,"        .withInstanceId(""Server_localhost_8099"").withReason(null).withBuildTimeMillis(-100).withWaitTimeMillis(0)"
131090,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/segment/generation/SegmentGenerationUtilsTest.java,35,,"        ""input.data"");"
131091,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/tier/TierConfigUtilsTest.java,40,,"    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""myTable"").build();"
131092,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/tier/TierConfigUtilsTest.java,53,,"            TierFactory.PINOT_SERVER_STORAGE_TYPE, ""tag_OFFLINE""))).build();"
131093,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/tier/TierConfigUtilsTest.java,79,,"        new TierConfig(""tier1"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""30d"", TierFactory.PINOT_SERVER_STORAGE_TYPE,"
131094,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/tier/TierConfigUtilsTest.java,79,,"        new TierConfig(""tier1"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""30d"", TierFactory.PINOT_SERVER_STORAGE_TYPE,"
131095,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/tier/TierConfigUtilsTest.java,80,,"            ""tier1_tag_OFFLINE"");"
131096,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/PinotDataTypeTest.java,37,,"      {(byte) 123, (char) 123, (short) 123, 123, 123L, 123f, 123d, "" 123"", ""123 "", new Object[]{(byte) 123}, new Object[]{(char) 123}, new Object[]{(short) 123}, new Object[]{123}, new Object[]{123L}, new Object[]{123f}, new Object[]{123d}, new Object[]{"" 123""}};"
131097,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/PinotDataTypeTest.java,124,,"    assertEquals(OBJECT.toInt(new NumberObject(""123"")), 123);"
131098,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/ServiceStatusTest.java,157,,"    idealState.setPartitionState(""mySegment"", INSTANCE_NAME, ""ONLINE"");"
131099,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/ServiceStatusTest.java,170,,"    idealState.setPartitionState(""mySegment_1"", INSTANCE_NAME, ""ONLINE"");"
131100,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/ServiceStatusTest.java,171,,"    idealState.setPartitionState(""mySegment_2"", INSTANCE_NAME, ""OFFLINE"");"
131101,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/ServiceStatusTest.java,171,,"    idealState.setPartitionState(""mySegment_2"", INSTANCE_NAME, ""OFFLINE"");"
131102,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/TarGzCompressionUtilsTest.java,79,,"    untarredFile = new File(UNTAR_DIR, ""untarred"");"
131103,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/URIUtilsTest.java,37,,"    assertEquals(URIUtils.getUri(""http://foo/bar"").toString(), ""http://foo/bar"");"
131104,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/URIUtilsTest.java,38,,"    assertEquals(URIUtils.getUri(""http://foo/bar"", ""table"").toString(), ""http://foo/bar/table"");"
131105,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/URIUtilsTest.java,39,,"    assertEquals(URIUtils.getUri(""http://foo/bar"", ""table"", ""segment+%25"").toString(),"
131106,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/URIUtilsTest.java,76,,"    URI uri = URIUtils.buildURI(""http"", ""foo"", ""bar"", Collections.emptyMap());"
131107,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/URIUtilsTest.java,76,,"    URI uri = URIUtils.buildURI(""http"", ""foo"", ""bar"", Collections.emptyMap());"
131108,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/InstanceUtilsTest.java,42,,"    Instance instance = new Instance(""localhost"", 1234, InstanceType.CONTROLLER, null, null, 0, 0, false);"
131109,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/InstanceUtilsTest.java,69,,"    tags = Arrays.asList(""T1_OFFLINE"", ""T2_REALTIME"");"
131110,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/InstanceUtilsTest.java,69,,"    tags = Arrays.asList(""T1_OFFLINE"", ""T2_REALTIME"");"
131111,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TableConfigSerDeTest.java,229,,"      properties.put(""foo"", ""bar"");"
131112,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TagNameUtilsTest.java,37,,"    TenantConfig tenantConfig = new TenantConfig(null, ""aServerTenant"", null);"
131113,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TagNameUtilsTest.java,38,,"    inputs.add(new Object[]{tenantConfig, ""aServerTenant_OFFLINE"", ""aServerTenant_REALTIME"", ""aServerTenant_REALTIME""});"
131114,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TagNameUtilsTest.java,38,,"    inputs.add(new Object[]{tenantConfig, ""aServerTenant_OFFLINE"", ""aServerTenant_REALTIME"", ""aServerTenant_REALTIME""});"
131115,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TagNameUtilsTest.java,45,,"    tenantConfig = new TenantConfig(null, ""aServerTenant"", new TagOverrideConfig(""overriddenTag_REALTIME"", null));"
131116,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/config/TagNameUtilsTest.java,49,,"    tenantConfig = new TenantConfig(null, ""aServerTenant"", new TagOverrideConfig(null, ""overriddenTag_OFFLINE""));"
131117,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/fetcher/SegmentFetcherFactoryTest.java,47,,"    assertEquals(SegmentFetcherFactory.getSegmentFetcher(""foo"").getClass(), PinotFSSegmentFetcher.class);"
131118,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/fetcher/SegmentFetcherFactoryTest.java,71,,"    SegmentFetcherFactory.fetchSegmentToLocal(new URI(TEST_URI), new File(""foo/bar""));"
131119,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/common/utils/helix/HelixHelperTest.java,47,,"    assertTrue(HelixHelper.updateHostnamePort(instanceConfig, ""myHost2"", 1234));"
131120,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,277,,"    Assert.assertTrue(brokerRequest.getQueryOptions().containsKey(""delicious""));"
131121,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,278,,"    Assert.assertEquals(brokerRequest.getQueryOptions().get(""delicious""), ""yes"");"
131122,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,289,,"    Assert.assertEquals(brokerRequest.getQueryOptions().get(""foo""), ""1234"");"
131123,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,289,,"    Assert.assertEquals(brokerRequest.getQueryOptions().get(""foo""), ""1234"");"
131124,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,290,,"    Assert.assertEquals(brokerRequest.getQueryOptions().get(""bar""), ""potato"");"
131125,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,290,,"    Assert.assertEquals(brokerRequest.getQueryOptions().get(""bar""), ""potato"");"
131126,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/pql/parsers/Pql2CompilerTest.java,449,,"    testOrderBy(""select sum(m1) from table group by d2, d3 order by sum(m1), d3 desc"", Arrays.asList(""sum(m1)"", ""d3""),"
131127,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java,62,,"    s.setTableName(""dummy"");"
131128,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java,71,,"    columns.add(""dummy1"");"
131129,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java,72,,"    columns.add(""dummy2"");"
131130,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,62,,"    Assert.assertEquals(pinotQuery.getSelectList().get(1).getIdentifier().getName(), ""Quantity"");"
131131,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,197,,"    Assert.assertEquals(func.getOperands().get(0).getFunctionCall().getOperator(), ""MINUS"");"
131132,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,221,,"            ""PLUS"");"
131133,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,427,,"    Assert.assertEquals(tempBrokerRequest.getAggregationsInfo().get(0).getAggregationType(), ""SUM"");"
131134,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,428,,"    Assert.assertEquals(tempBrokerRequest.getAggregationsInfo().get(1).getAggregationType(), ""COUNT"");"
131135,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,641,,"    Assert.assertTrue(pinotQuery.getQueryOptions().containsKey(""delicious""));"
131136,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,649,,"    Assert.assertEquals(pinotQuery.getQueryOptions().get(""foo""), ""1234"");"
131137,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,650,,"    Assert.assertEquals(pinotQuery.getQueryOptions().get(""bar""), ""'potato'"");"
131138,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,699,,"            ""ADD"");"
131139,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,710,,"    Assert.assertEquals(groupbyList.get(0).getFunctionCall().getOperator(), ""SUB"");"
131140,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,728,,"    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), ""EQUALS"");"
131141,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,889,,"      Assert.fail(""Query should have failed compilation"");"
131142,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,999,,"    Assert.assertEquals(c1.getName(), ""col1"");"
131143,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1000,,"    Assert.assertEquals(c2.getName(), ""col2"");"
131144,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1042,,"    Assert.assertEquals(c1.getName(), ""col3"");"
131145,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1043,,"    Assert.assertEquals(c2.getName(), ""col4"");"
131146,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1317,,"    Assert.assertEquals(pinotQuery.getSelectList().get(2).getFunctionCall().getOperator(), ""TIMES"");"
131147,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1375,,"            .getIdentifier().getName(), ""value"");"
131148,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1443,,"      Assert.fail(""Query should have failed to compile"");"
131149,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1448,,"      Assert.assertTrue(message.startsWith(""Encountered"") && message.contains(""table""));"
131150,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1515,,"    Assert.assertEquals(""CAST"", pinotQuery.getSelectList().get(0).getFunctionCall().getOperator());"
131151,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1577,,"    Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator(), ""DISTINCTCOUNT"");"
131152,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1877,,"            ""col"");"
131153,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1919,,"    Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator().toUpperCase(), ""DISTINCT"");"
131154,./TargetProjects/incubator-pinot/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java,1925,,"    Assert.assertEquals(brokerRequest.getAggregationsInfo().get(0).getAggregationParams().get(""column""), ""col1"");"
131155,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/LLCSegmentCompletionHandlers.java,87,,"      LOGGER.error(""Invalid call: offset={}, segmentName={}, instanceId={}, streamPartitionMsgOffset={}"","
131156,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,65,,"  @ApiOperation(value = ""List tenants and tables to brokers mappings"", notes = ""List tenants and tables to brokers mappings"")"
131157,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,67,,"      @ApiParam(value = ""ONLINE|OFFLINE"") @QueryParam(""state"") String state) {"
131158,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,67,,"      @ApiParam(value = ""ONLINE|OFFLINE"") @QueryParam(""state"") String state) {"
131159,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,77,,"  @ApiOperation(value = ""List tenants to brokers mappings"", notes = ""List tenants to brokers mappings"")"
131160,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,89,,"  @ApiOperation(value = ""List brokers for a given tenant"", notes = ""List brokers for a given tenant"")"
131161,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,102,,"  @ApiOperation(value = ""List tables to brokers mappings"", notes = ""List tables to brokers mappings"")"
131162,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotBrokerRestletResource.java,114,,"  @ApiOperation(value = ""List brokers for a given table"", notes = ""List brokers for a given table"")"
131163,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotClusterConfigs.java,67,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 500, message = ""Internal server error"")})"
131164,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotIngestionRestletResource.java,119,,"      + ""\n Example usage (query params need encoding):"" + ""\n```"""
131165,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceAssignmentRestletResource.java,74,,"      @ApiParam(value = ""Name of the table"") @PathParam(""tableName"") String tableName,"
131166,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceAssignmentRestletResource.java,74,,"      @ApiParam(value = ""Name of the table"") @PathParam(""tableName"") String tableName,"
131167,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceAssignmentRestletResource.java,75,,"      @ApiParam(value = ""OFFLINE|CONSUMING|COMPLETED"") @QueryParam(""type"") @Nullable InstancePartitionsType instancePartitionsType) {"
131168,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceAssignmentRestletResource.java,75,,"      @ApiParam(value = ""OFFLINE|CONSUMING|COMPLETED"") @QueryParam(""type"") @Nullable InstancePartitionsType instancePartitionsType) {"
131169,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,80,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 500, message = ""Internal error"")})"
131170,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,80,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 500, message = ""Internal error"")})"
131171,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,91,,"      @ApiParam(value = ""Instance name"", required = true, example = ""Server_a.b.com_20000 | Broker_my.broker.com_30000"") @PathParam(""instanceName"") String instanceName) {"
131172,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,91,,"      @ApiParam(value = ""Instance name"", required = true, example = ""Server_a.b.com_20000 | Broker_my.broker.com_30000"") @PathParam(""instanceName"") String instanceName) {"
131173,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,91,,"      @ApiParam(value = ""Instance name"", required = true, example = ""Server_a.b.com_20000 | Broker_my.broker.com_30000"") @PathParam(""instanceName"") String instanceName) {"
131174,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotInstanceRestletResource.java,176,,"            ""Failed to enable instance "" + instanceName + "" - "" + response.getMessage(),"
131175,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java,80,,"  @Path(""pql"")"
131176,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java,86,,"      if (requestJson.has(""trace"")) {"
131177,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java,90,,"      if (requestJson.has(""queryOptions"")) {"
131178,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java,93,,"      LOGGER.debug(""Trace: {}, Running query: {}"", traceEnabled, pqlQuery);"
131179,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotQueryResource.java,123,,"  @Path(""sql"")"
131180,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java,106,,"  @Path(""/schemas/{schemaName}"")"
131181,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java,108,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 404, message = ""Schema not found""), @ApiResponse(code = 500, message = ""Internal error"")})"
131182,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java,108,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 404, message = ""Schema not found""), @ApiResponse(code = 500, message = ""Internal error"")})"
131183,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java,110,,"      @ApiParam(value = ""Schema name"", required = true) @PathParam(""schemaName"") String schemaName) {"
131184,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSchemaRestletResource.java,136,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Successfully updated schema""), @ApiResponse(code = 404, message = ""Schema not found""), @ApiResponse(code = 400, message = ""Missing or invalid request body""), @ApiResponse(code = 500, message = ""Internal error"")})"
131185,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,168,,"      @ApiParam(value = ""Name of the table"", required = true) @PathParam(""tableName"") String tableName,"
131186,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,168,,"      @ApiParam(value = ""Name of the table"", required = true) @PathParam(""tableName"") String tableName,"
131187,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,169,,"      @ApiParam(value = ""OFFLINE|REALTIME"") @QueryParam(""type"") String tableTypeStr) {"
131188,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,169,,"      @ApiParam(value = ""OFFLINE|REALTIME"") @QueryParam(""type"") String tableTypeStr) {"
131189,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,206,,"  @ApiOperation(value = ""Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)"", notes = ""Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)"")"
131190,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,209,,"      @ApiParam(value = ""MUST be null"") @QueryParam(""state"") String stateStr,"
131191,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,271,,"      @ApiParam(value = ""Name of the segment"", required = true) @PathParam(""segmentName"") @Encoded String segmentName) {"
131192,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,271,,"      @ApiParam(value = ""Name of the segment"", required = true) @PathParam(""segmentName"") @Encoded String segmentName) {"
131193,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,303,,"  @ApiOperation(value = ""Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)"", notes = ""Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)"")"
131194,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,364,,"      return new SuccessResponse(""Sent "" + numMessagesSent + "" reload messages"");"
131195,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,364,,"      return new SuccessResponse(""Sent "" + numMessagesSent + "" reload messages"");"
131196,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,439,,"  @ApiOperation(value = ""Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)"", notes = ""Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)"")"
131197,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentRestletResource.java,491,,"  @ApiOperation(value = ""Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)"", notes = ""Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)"")"
131198,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,131,,"      @ApiParam(value = ""Name of the table"", required = true) @PathParam(""tableName"") String tableName,"
131199,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,413,,"  @ApiOperation(value = ""Upload a segment"", notes = ""Upload a segment as json"")"
131200,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,419,,"      @ApiParam(value = ""Type of the table"") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(""OFFLINE"") String tableType,"
131201,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,419,,"      @ApiParam(value = ""Type of the table"") @QueryParam(FileUploadDownloadClient.QueryParameters.TABLE_TYPE) @DefaultValue(""OFFLINE"") String tableType,"
131202,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,420,,"      @ApiParam(value = ""Whether to enable parallel push protection"") @DefaultValue(""false"") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,"
131203,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResource.java,420,,"      @ApiParam(value = ""Whether to enable parallel push protection"") @DefaultValue(""false"") @QueryParam(FileUploadDownloadClient.QueryParameters.ENABLE_PARALLEL_PUSH_PROTECTION) boolean enableParallelPushProtection,"
131204,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableInstances.java,64,,"        e.put(""tableType"", ""offline"");"
131205,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableInstances.java,69,,"        e.set(""instances"", a);"
131206,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,220,,"  public String listTables(@ApiParam(value = ""realtime|offline"") @QueryParam(""type"") String tableTypeStr,"
131207,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,220,,"  public String listTables(@ApiParam(value = ""realtime|offline"") @QueryParam(""type"") String tableTypeStr,"
131208,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,320,,"      @ApiParam(value = ""Name of the table"", required = true) @PathParam(""tableName"") String tableName,"
131209,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,320,,"      @ApiParam(value = ""Name of the table"", required = true) @PathParam(""tableName"") String tableName,"
131210,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,321,,"      @ApiParam(value = ""enable|disable|drop"") @QueryParam(""state"") String stateStr,"
131211,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java,545,,"      @ApiParam(value = ""Whether to rebalance table in dry-run mode"") @DefaultValue(""false"") @QueryParam(""dryRun"") boolean dryRun,"
131212,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTaskRestletResource.java,105,,"      @ApiParam(value = ""Task type"", required = true) @PathParam(""taskType"") String taskType) {"
131213,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTaskRestletResource.java,105,,"      @ApiParam(value = ""Task type"", required = true) @PathParam(""taskType"") String taskType) {"
131214,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTaskRestletResource.java,164,,"      @ApiParam(value = ""Task name"", required = true) @PathParam(""taskName"") String taskName) {"
131215,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTaskRestletResource.java,164,,"      @ApiParam(value = ""Task name"", required = true) @PathParam(""taskName"") String taskName) {"
131216,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,87,,"  private static final String TENANT_NAME = ""tenantName"";"
131217,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,102,,"  @ApiResponses({@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 500, message = ""Error creating tenant"")})"
131218,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,167,,"      @ApiParam(value = ""Tenant type"", required = false, allowableValues = ""BROKER, SERVER"", defaultValue = """") @QueryParam(""type"") @DefaultValue("""") String type) {"
131219,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,170,,"    if (type == null || type.isEmpty() || type.equalsIgnoreCase(""server"")) {"
131220,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,173,,"    if (type == null || type.isEmpty() || type.equalsIgnoreCase(""broker"")) {"
131221,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,185,,"      @ApiParam(value = ""Tenant name"", required = true) @PathParam(""tenantName"") String tenantName,"
131222,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java,187,,"      @ApiParam(value = ""state"") @QueryParam(""state"") String stateStr)"
131223,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,68,,"      @ApiResponse(code = 200, message = ""Success""), //"
131224,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,69,,"      @ApiResponse(code = 404, message = ""ZK Path not found""), //"
131225,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,71,,"      @ApiResponse(code = 500, message = ""Internal server error"")})"
131226,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,73,,"      @ApiParam(value = ""Zookeeper Path, must start with /"", required = true, defaultValue = ""/"") @QueryParam(""path"") @DefaultValue("""") String path) {"
131227,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,73,,"      @ApiParam(value = ""Zookeeper Path, must start with /"", required = true, defaultValue = ""/"") @QueryParam(""path"") @DefaultValue("""") String path) {"
131228,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/ZookeeperResource.java,211,,"      throw new ControllerApplicationException(LOGGER, ""ZKPath "" + path + "" cannot be null or empty"","
131229,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/api/upload/ZKOperator.java,112,,"              ""Another segment upload is in progress for segment: "" + segmentName + "" of table: "" + tableNameWithType"
131230,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,47,,"    return StringUtil.join(""/"", _baseUrl, ""segments"");"
131231,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,51,,"    return StringUtil.join(""/"", _baseUrl, ""instances"");"
131232,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,71,,"    return StringUtil.join(""/"", _baseUrl, ""tenants"", tenantName, ""tables"");"
131233,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,71,,"    return StringUtil.join(""/"", _baseUrl, ""tenants"", tenantName, ""tables"");"
131234,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,105,,"      return StringUtil.join(""/"", _baseUrl, ""brokers"");"
131235,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,107,,"    return StringUtil.join(""/"", _baseUrl, ""brokers"", ""?state="" + state);"
131236,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,134,,"      params.append(""?type="" + tableType);"
131237,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/ControllerRequestURLBuilder.java,235,,"    return StringUtil.join(""/"", _baseUrl, ""tableConfigs"");"
131238,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java,402,,"      return PinotResourceManagerResponse.failure(""Instance "" + instanceIdToAdd + "" already exists"");"
131239,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java,683,,"      LOGGER.warn(""Table "" + tableNameWithType + "" does not exist"");"
131240,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java,1477,,"      throw new RuntimeException(""Table: "" + tableName + "" of type: "" + type + "" does not exist"");"
131241,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java,1837,,"    Preconditions.checkState(externalView != null, ""Could not find external view for table: %s"", tableNameWithType);"
131242,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManager.java,244,,"    Preconditions.checkState(!_isStopping, ""Segment manager is stopping"");"
131243,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionManager.java,203,,"      LOGGER.info(""Removing FSM (if present):{}"", fsm.toString());"
131244,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/statemodel/LeadControllerResourceMasterSlaveStateModelFactory.java,44,,"  @StateModelInfo(states = ""{'MASTER','SLAVE', 'OFFLINE', 'DROPPED'}"", initialState = ""OFFLINE"")"
131245,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/statemodel/LeadControllerResourceMasterSlaveStateModelFactory.java,57,,"    @Transition(from = ""OFFLINE"", to = ""SLAVE"")"
131246,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/recommender/data/generator/DataGeneratorSpec.java,130,,"        builder.append(column + "" : "" + cardinalityMap.get(column) + "" : "" + dataTypesMap.get(column));"
131247,./TargetProjects/incubator-pinot/pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java,332,,"    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(urlConnection.getOutputStream(), ""UTF-8""));"
131248,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/ControllerStarterTest.java,52,,"    _configOverride.put(CONTROLLER_HOST, ""myHost"");"
131249,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/ControllerTestUtils.java,266,,"    @StateModelInfo(states = ""{'OFFLINE', 'ONLINE', 'DROPPED'}"", initialState = ""OFFLINE"")"
131250,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/ControllerTestUtils.java,273,,"      @Transition(from = ""OFFLINE"", to = ""ONLINE"")"
131251,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/ControllerTestUtils.java,278,,"      @Transition(from = ""OFFLINE"", to = ""DROPPED"")"
131252,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/ControllerTestUtils.java,381,,"      @Transition(from = ""OFFLINE"", to = ""CONSUMING"")"
131253,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,85,,"    partitionToOffset0.put(""0"", ""150"");"
131254,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,89,,"        .newArrayList(new SegmentConsumerInfo(SEGMENT_NAME_PARTITION_0, ""CONSUMING"", 0, partitionToOffset0),"
131255,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,92,,"    serverMap.put(""server0"", s0);"
131256,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,99,,"    serverMap.put(""server1"", s1);"
131257,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,106,,"    serverMap.put(""server2"", s2);"
131258,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/ConsumingSegmentInfoReaderTest.java,112,,"    serverMap.put(""server3"", s3);"
131259,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotBrokerRestletResourceStatelessTest.java,35,,"  private static final String TABLE_NAME_1 = ""testTable1"";"
131260,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotBrokerRestletResourceStatelessTest.java,36,,"  private static final String TABLE_NAME_2 = ""testTable2"";"
131261,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotBrokerRestletResourceStatelessTest.java,57,,"        case ""OFFLINE"":"
131262,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,69,,"        if (jsonNode != null && jsonNode.get(""instances"") != null && jsonNode.get(""instances"").size() > 0) {"
131263,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,87,,"    Instance brokerInstance = new Instance(""1.2.3.4"", 1234, InstanceType.BROKER, null, null, 0, 0, false);"
131264,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,98,,"        new Instance(""2.3.4.5"", 1234, InstanceType.BROKER, Collections.singletonList(""tag_BROKER""), null, 0, 0, false);"
131265,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,98,,"        new Instance(""2.3.4.5"", 1234, InstanceType.BROKER, Collections.singletonList(""tag_BROKER""), null, 0, 0, false);"
131266,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,102,,"    serverPools.put(""tag_OFFLINE"", 0);"
131267,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,103,,"    serverPools.put(""tag_REALTIME"", 1);"
131268,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotInstanceRestletResourceTest.java,206,,"            result = result && (instance.get(""pools"") != null) && (instance.get(""pools"").size() == pools.length);"
131269,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotSchemaRestletResourceTest.java,60,,"        + ""    \""name\"" : \""studentID\"",\n"" + ""    \""dataType\"" : \""STRING\""\n"" + ""  }, {\n"""
131270,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotSchemaRestletResourceTest.java,60,,"        + ""    \""name\"" : \""studentID\"",\n"" + ""    \""dataType\"" : \""STRING\""\n"" + ""  }, {\n"""
131271,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,71,,"    _offlineBuilder.setTableName(OFFLINE_TABLE_NAME).setTimeColumnName(""timeColumn"").setTimeType(""DAYS"")"
131272,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,95,,"      Assert.assertTrue(e.getMessage().startsWith(""Server returned HTTP response code: 400""));"
131273,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,236,,"    TableConfig tableConfig = getTableConfig(tableName, ""OFFLINE"");"
131274,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,261,,"        new Schema.SchemaBuilder().setSchemaName(tableName).addSingleValueDimension(""myCol"", FieldSpec.DataType.STRING)"
131275,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,395,,"        StringUtil.join(""/"", ControllerTestUtils.getControllerBaseApiUrl(), ""tables"", ""table0_REALTIME""));"
131276,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/PinotTableRestletResourceTest.java,479,,"    TableConfig realtimeTableConfig = _realtimeBuilder.setTableName(""testTable"").build();"
131277,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/SegmentCompletionProtocolDeserTest.java,85,,"    assertEquals(jsonNode.get(""offset"").asText(), OFFSET.toString());"
131278,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/SegmentCompletionProtocolDeserTest.java,86,,"    assertEquals(jsonNode.get(""segmentLocation"").asText(), SEGMENT_LOCATION);"
131279,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/SegmentCompletionProtocolDeserTest.java,87,,"    assertTrue(jsonNode.get(""isSplitCommitType"").asBoolean());"
131280,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/SegmentCompletionProtocolDeserTest.java,88,,"    assertEquals(jsonNode.get(""status"").asText(), SegmentCompletionProtocol.ControllerResponseStatus.COMMIT.toString());"
131281,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/SegmentCompletionProtocolDeserTest.java,89,,"    assertEquals(jsonNode.get(""controllerVipUrl"").asText(), CONTROLLER_VIP_URL);"
131282,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/TableConfigsRestletResourceTest.java,165,,"      schemaWithBlankSpace.addField(new MetricFieldSpec(""blank space"", FieldSpec.DataType.LONG));"
131283,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/TableConfigsRestletResourceTest.java,501,,"    tableConfigsResponse.getOffline().getIndexingConfig().setInvertedIndexColumns(Lists.newArrayList(""dimA""));"
131284,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/TableSizeReaderTest.java,83,,"        return table.indexOf(""offline"") >= 0;"
131285,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/TableViewsTest.java,95,,"  @DataProvider(name = ""viewProvider"")"
131286,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/access/AuthenticationFilterTest.java,37,,"    pathParams.putSingle(""tableName"", ""A"");"
131287,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/access/AuthenticationFilterTest.java,38,,"    pathParams.putSingle(""tableNameWithType"", ""B"");"
131288,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/access/AuthenticationFilterTest.java,39,,"    pathParams.putSingle(""schemaName"", ""C"");"
131289,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotSegmentUploadDownloadRestletResourceTest.java,66,,"    String crypterClassNameInTableConfig = ""NoOpPinotCrypter"";"
131290,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/api/upload/ZKOperatorTest.java,81,,"          ""otherDownloadUrl"", false, null);"
131291,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerTenantStatelessTest.java,76,,"      Assert.assertEquals(response.get(""tenantName"").asText(), brokerTag);"
131292,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerTest.java,266,,"    @StateModelInfo(states = ""{'OFFLINE', 'ONLINE', 'DROPPED'}"", initialState = ""OFFLINE"")"
131293,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerTest.java,273,,"      @Transition(from = ""OFFLINE"", to = ""ONLINE"")"
131294,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerTest.java,278,,"      @Transition(from = ""OFFLINE"", to = ""DROPPED"")"
131295,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerTest.java,367,,"      @Transition(from = ""OFFLINE"", to = ""CONSUMING"")"
131296,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotResourceManagerTest.java,80,,"        ControllerTestUtils.getHelixResourceManager().updateZkMetadata(OFFLINE_TABLE_NAME + ""_OFFLINE"", segmentZKMetadata, 0));"
131297,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/PinotResourceManagerTest.java,113,,"          ""downloadUrl"");"
131298,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,60,,"    final String tableName = ""myTable_OFFLINE"";"
131299,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,64,,"    idealState.setPartitionState(""myTable_0"", ""pinot1"", ""ONLINE"");"
131300,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,64,,"    idealState.setPartitionState(""myTable_0"", ""pinot1"", ""ONLINE"");"
131301,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,64,,"    idealState.setPartitionState(""myTable_0"", ""pinot1"", ""ONLINE"");"
131302,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,65,,"    idealState.setPartitionState(""myTable_0"", ""pinot2"", ""ONLINE"");"
131303,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,66,,"    idealState.setPartitionState(""myTable_0"", ""pinot3"", ""ONLINE"");"
131304,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,67,,"    idealState.setPartitionState(""myTable_1"", ""pinot1"", ""ONLINE"");"
131305,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,70,,"    idealState.setPartitionState(""myTable_2"", ""pinot3"", ""OFFLINE"");"
131306,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,116,,"    final String tableName = ""myTable_REALTIME"";"
131307,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/SegmentStatusCheckerTest.java,130,,"    idealState.setPartitionState(seg3.getSegmentName(), ""pinot1"", ""CONSUMING"");"
131308,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerStatelessTest.java,89,,"      Assert.fail(""Expected InvalidTableConfigException"");"
131309,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java,294,,"        .getHelixAdmin().addInstanceTag(ControllerTestUtils.getHelixClusterName(), testBrokerInstance, ""wrong_tag"");"
131310,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManagerTest.java,446,,"          ""downloadUrl"");"
131311,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/PinotLLCRealtimeSegmentManagerTest.java,789,,"    FileUtils.write(segmentFile, ""temporary file contents"");"
131312,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/realtime/SegmentCompletionTest.java,425,,"        withSegmentName(segmentNameStr).withSegmentLocation(""location"");"
131313,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,45,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host1"", ""host2""), ONLINE);"
131314,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,45,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host1"", ""host2""), ONLINE);"
131315,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,47,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host1"", ""host3""), ONLINE);"
131316,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,54,,"    targetInstanceStateMap = SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host3"", ""host4""), ONLINE);"
131317,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,61,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host3"", ""host4"", ""host5""), ONLINE);"
131318,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,96,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host4"", ""host5"", ""host6""), ONLINE);"
131319,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,108,,"        SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host4"", ""host5"", ""host6"", ""host7""), ONLINE);"
131320,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,233,,"        .put(""segment1"", SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host1"", ""host2"", ""host3""), ONLINE));"
131321,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,235,,"        .put(""segment2"", SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host2"", ""host3"", ""host4""), ONLINE));"
131322,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,237,,"        .put(""segment3"", SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host1"", ""host2"", ""host3""), ONLINE));"
131323,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,239,,"        .put(""segment4"", SegmentAssignmentUtils.getInstanceStateMap(Arrays.asList(""host2"", ""host3"", ""host4""), ONLINE));"
131324,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/rebalance/TableRebalancerTest.java,477,,"    instanceStateMap.put(""instance2"", CONSUMING);"
131325,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/retention/SegmentLineageCleanupTest.java,117,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1""), Arrays.asList(""merged_0""),"
131326,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/retention/SegmentLineageCleanupTest.java,117,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1""), Arrays.asList(""merged_0""),"
131327,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/helix/core/retention/SegmentLineageCleanupTest.java,117,,"        new LineageEntry(Arrays.asList(""segment_0"", ""segment_1""), Arrays.asList(""merged_0""),"
131328,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/util/ListenerConfigUtilTest.java,58,,"    controllerConf.setProperty(""controller.access.protocols"", ""https"");"
131329,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/util/ListenerConfigUtilTest.java,58,,"    controllerConf.setProperty(""controller.access.protocols"", ""https"");"
131330,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/util/ListenerConfigUtilTest.java,66,,"    ListenerConfig legacyListener = getListener(""http"", listenerConfigs);"
131331,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/util/ListenerConfigUtilTest.java,93,,"    Assert.assertEquals(httpListener.getHost(), ""0.0.0.0"");"
131332,./TargetProjects/incubator-pinot/pinot-controller/src/test/java/org/apache/pinot/controller/util/ListenerConfigUtilTest.java,192,,"    Assert.assertEquals(httpsListener.getTlsConfig().getKeyStorePassword(), ""a-password"");"
131333,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/filter/predicate/BaseRawValueBasedPredicateEvaluator.java,66,,"  @SuppressWarnings(""Duplicates"")"
131334,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/BinaryOperatorTransformFunction.java,56,,"          ""Unsupported data type for comparison: [Left Transform Function [%s] result type is [%s], Right Transform Function [%s] result type is [%s]]"","
131335,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/CaseTransformFunction.java,123,,"                  .format(""Incompatible expression type: %s in the THEN clause of index: %d, main type: %s"","
131336,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/GroovyTransformFunction.java,261,,"        throw new IllegalStateException(""Unexpected result type '"" + result.getClass() + ""' for GROOVY function"");"
131337,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/GroovyTransformFunction.java,261,,"        throw new IllegalStateException(""Unexpected result type '"" + result.getClass() + ""' for GROOVY function"");"
131338,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/JsonExtractScalarTransformFunction.java,126,,"            String.format(""Illegal Json Path: [%s], when reading [%s]"", _jsonPath, jsonStrings[i]));"
131339,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctAggregationFunction.java,104,,"    throw new UnsupportedOperationException(""Operation not supported for DISTINCT aggregation function"");"
131340,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountAggregationFunction.java,126,,"        throw new IllegalStateException(""Illegal data type for DISTINCT_COUNT aggregation function: "" + storedType);"
131341,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountBitmapAggregationFunction.java,128,,"            ""Illegal data type for DISTINCT_COUNT_BITMAP aggregation function: "" + storedType);"
131342,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/DistinctCountHLLAggregationFunction.java,128,,"        throw new RuntimeException(""Caught exception while merging HyperLogLogs"", e);"
131343,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/TimePredicateFilterOptimizer.java,140,,"          Preconditions.checkState(TimeUtils.timeValueInValidRange(lowerMillis), ""Invalid lower bound in millis: %s"","
131344,./TargetProjects/incubator-pinot/pinot-core/src/main/java/org/apache/pinot/core/query/optimizer/filter/TimePredicateFilterOptimizer.java,158,,"          Preconditions.checkState(TimeUtils.timeValueInValidRange(upperMillis), ""Invalid upper bound in millis: %s"","
131345,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/ArrayFunctionsTest.java,55,,"    row.putValue(""intArray"", new int[]{3, 2, 10, 6, 1, 12});"
131346,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/ArrayFunctionsTest.java,56,,"    row.putValue(""integerArray"", new Integer[]{3, 2, 10, 6, 1, 12});"
131347,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/ArrayFunctionsTest.java,57,,"    row.putValue(""stringArray"", new String[]{""3"", ""2"", ""10"", ""6"", ""1"", ""12""});"
131348,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,66,,"    row0_0.putValue(""timestamp"", 1578685189000L);"
131349,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,148,,"    row6_0.putValue(""hoursSinceEpoch"", 336000);"
131350,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,196,,"    row10_0.putValue(""dateTime"", 98697600000L);"
131351,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,233,,"    inputs.add(new Object[]{""timezone_hour(tz)"", expectedArguments, row12_0, 0});"
131352,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,234,,"    inputs.add(new Object[]{""timezone_minute(tz)"", expectedArguments, row12_0, 0});"
131353,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,257,,"    expectedArguments = Collections.singletonList(""millis"");"
131354,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/DateTimeFunctionsTest.java,310,,"    row.putValue(""epochMillis"", 1612296732123L);"
131355,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/GroovyFunctionEvaluatorTest.java,79,,"    genericRow6.putValue(""eventType"", ""IMPRESSION"");"
131356,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/InbuiltFunctionEvaluatorTest.java,35,,"    String expression = ""testColumn"";"
131357,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/InbuiltFunctionEvaluatorTest.java,40,,"      String value = ""testValue"" + i;"
131358,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/JsonFunctionsTest.java,61,,"    row0.putValue(""jsonMap"", JsonUtils.stringToObject(jsonStr, Map.class));"
131359,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/JsonFunctionsTest.java,65,,"    jsonStr = ""{\""k3\"":{\""sub1\"":10,\""sub2\"":1.0},\""k4\"":\""baz\"",\""k5\"":[1,2,3]}"";"
131360,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/JsonFunctionsTest.java,72,,"    inputs.add(new Object[]{""json_format(jsonMap)"", Lists.newArrayList(""jsonMap""), row2, jsonStr});"
131361,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/JsonFunctionsTest.java,93,,"    row6.putValue(""jsonPathArray"", JsonUtils.stringToObject(jsonStr, List.class));"
131362,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/function/JsonFunctionsTest.java,106,,"    row8.putValue(""jsonPathString"", JsonUtils.stringToObject(jsonStr, Map.class));"
131363,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java,105,,"          + ""      \"""" + StreamConfigProperties.SEGMENT_FLUSH_THRESHOLD_ROWS + ""\"": \"""" + maxRowsInSegment + ""\"", \n"""
131364,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/geospatial/transform/StContainsFunctionTest.java,28,,"    assertRelation(""ST_Contains"", ""POINT (20 20)"", ""POINT (25 25)"", false);"
131365,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/geospatial/transform/StContainsFunctionTest.java,30,,"    assertRelation(""ST_Contains"", ""LINESTRING (20 20, 30 30)"", ""POINT (25 25)"", true);"
131366,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/geospatial/transform/StContainsFunctionTest.java,35,,"    assertRelation(""ST_Contains"", ""POLYGON ((0 0, 0 4, 4 4, 4 0, 0 0))"", ""POLYGON ((1 1, 1 2, 2 2, 2 1, 1 1))"", true);"
131367,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/geospatial/transform/StDistanceFunctionTest.java,51,,"    assertDistance(""POINT(-86.67 36.12)"", ""POINT(-118.40 33.94)"", 2886448.9734367016, false);"
131368,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/geospatial/transform/StEqualFunctionTest.java,28,,"    assertRelation(""ST_Equals"", ""POINT (20 20)"", ""POINT (25 25)"", false);"
131369,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,37,,"    PredicateEvaluator predicateEvaluator = buildRangePredicate(""[-10\00010]"", FieldSpec.DataType.INT);"
131370,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,42,,"    predicateEvaluator = buildRangePredicate(""(-10\00010]"", FieldSpec.DataType.INT);"
131371,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,47,,"    predicateEvaluator = buildRangePredicate(""(-10\00010)"", FieldSpec.DataType.INT);"
131372,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,52,,"    predicateEvaluator = buildRangePredicate(""(*\00010]"", FieldSpec.DataType.INT);"
131373,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,57,,"    predicateEvaluator = buildRangePredicate(""(*\00010)"", FieldSpec.DataType.INT);"
131374,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,67,,"    predicateEvaluator = buildRangePredicate(""(10\000*)"", FieldSpec.DataType.INT);"
131375,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,72,,"    predicateEvaluator = buildRangePredicate(""(*\000*)"", FieldSpec.DataType.INT);"
131376,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,115,,"    predicateEvaluator = buildRangePredicate(""[10\000*)"", FieldSpec.DataType.LONG);"
131377,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/filter/predicate/NoDictionaryRangePredicateEvaluatorTest.java,160,,"      Assert.assertEquals(predicateEvaluator.applySV((float) i), (i <= 10), ""Value: "" + i);"
131378,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/CaseTransformFunctionTest.java,38,,"      testCaseQueryWithIntResults(String.format(""%s(%s, %s)"", functionType.getName(), INT_SV_COLUMN,"
131379,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/CaseTransformFunctionTest.java,145,,"              throw new IllegalStateException(""Not supported type - "" + type);"
131380,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/CaseTransformFunctionTest.java,385,,"              result[i] = (_intSVValues[i] == _intSVValues[INDEX_TO_COMPARE]) ? ""aaa"" : ""bbb"";"
131381,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/CaseTransformFunctionTest.java,385,,"              result[i] = (_intSVValues[i] == _intSVValues[INDEX_TO_COMPARE]) ? ""aaa"" : ""bbb"";"
131382,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/DivisionTransformFunctionTest.java,34,,"        RequestContextUtils.getExpressionFromSQL(String.format(""div(%s,%s)"", INT_SV_COLUMN, LONG_SV_COLUMN));"
131383,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/GroovyTransformFunctionTest.java,49,,"        .format(""groovy('{\""returnType\"":\""INT\"", \""isSingleValue\"":true}', "" + ""'arg0.toList().max()', "" + ""%s)"","
131384,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/JsonExtractScalarTransformFunctionTest.java,231,,"      Assert.assertTrue(keys.contains(String.format(""$['%s']"", INT_SV_COLUMN)));"
131385,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,68,,"    when(tableManager.getColumnFieldSpec(""teamName""))"
131386,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,72,,"    when(tableManager.getColumnFieldSpec(""teamInteger""))"
131387,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,76,,"    when(tableManager.getColumnFieldSpec(""teamFloat""))"
131388,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,80,,"    when(tableManager.getColumnFieldSpec(""teamDouble""))"
131389,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,84,,"    when(tableManager.getColumnFieldSpec(""teamLong""))"
131390,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/LookupTransformFunctionTest.java,313,,"        row.putValue(""lookupColumn"", String.format(""lookup_value_for_[%s]"", key.hashCode()));"
131391,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/ModuloTransformFunctionTest.java,34,,"        RequestContextUtils.getExpressionFromSQL(String.format(""mod(%s,%s)"", INT_SV_COLUMN, LONG_SV_COLUMN));"
131392,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,37,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""abs(%s)"", INT_SV_COLUMN));"
131393,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,82,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""ceil(%s)"", INT_SV_COLUMN));"
131394,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,127,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""exp(%s)"", INT_SV_COLUMN));"
131395,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,172,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""floor(%s)"", INT_SV_COLUMN));"
131396,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,217,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""ln(%s)"", INT_SV_COLUMN));"
131397,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SingleParamMathTransformFunctionTest.java,262,,"    ExpressionContext expression = RequestContextUtils.getExpressionFromSQL(String.format(""sqrt(%s)"", INT_SV_COLUMN));"
131398,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/function/SubtractionTransformFunctionTest.java,34,,"        RequestContextUtils.getExpressionFromSQL(String.format(""sub(%s,%s)"", INT_SV_COLUMN, LONG_SV_COLUMN));"
131399,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,60,,"      entries.add(new Object[]{""1:MILLISECONDS:EPOCH"", ""1:MILLISECONDS:EPOCH"", ""15:MINUTES"", input, expected});"
131400,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,68,,"      entries.add(new Object[]{""1:MILLISECONDS:EPOCH"", ""1:MILLISECONDS:EPOCH"", ""1:MILLISECONDS"", input, expected});"
131401,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,76,,"      entries.add(new Object[]{""1:MILLISECONDS:EPOCH"", ""1:HOURS:EPOCH"", ""1:HOURS"", input, expected});"
131402,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,107,,"      String[] expected = {""20170920"", ""20170921"", ""20170921""};"
131403,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,107,,"      String[] expected = {""20170920"", ""20170921"", ""20170921""};"
131404,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,109,,"          .add(new Object[]{""1:MILLISECONDS:EPOCH"", ""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd"", ""1:DAYS"", input, expected});"
131405,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,109,,"          .add(new Object[]{""1:MILLISECONDS:EPOCH"", ""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd"", ""1:DAYS"", input, expected});"
131406,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/operator/transform/transformer/datetime/DateTimeConverterTest.java,151,,"          new Object[]{""1:MILLISECONDS:EPOCH"", ""1:MILLISECONDS:SIMPLE_DATE_FORMAT:yyyy-MM-dd HH:mm:ss.SSS tz(America/Denver)"", ""15:SECONDS"", input, expected});"
131407,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/aggregation/groupby/StringGroupKeyTest.java,33,,"    Assert.assertEquals(keys, new String[]{""foo"", ""bar"", """"});"
131408,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/QueryOptimizerTest.java,49,,"      new Schema.SchemaBuilder().setSchemaName(""testTable"").addSingleValueDimension(""int"", DataType.INT)"
131409,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/QueryOptimizerTest.java,50,,"          .addSingleValueDimension(""long"", DataType.LONG).addSingleValueDimension(""float"", DataType.FLOAT)"
131410,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/QueryOptimizerTest.java,50,,"          .addSingleValueDimension(""long"", DataType.LONG).addSingleValueDimension(""float"", DataType.FLOAT)"
131411,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/QueryOptimizerTest.java,51,,"          .addSingleValueDimension(""double"", DataType.DOUBLE).addSingleValueDimension(""string"", DataType.STRING)"
131412,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/filter/NumericalFilterOptimizerTest.java,52,,"        ""Expression(type:LITERAL, literal:<Literal boolValue:false>)"");"
131413,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/filter/NumericalFilterOptimizerTest.java,60,,"        ""Expression(type:LITERAL, literal:<Literal boolValue:true>)"");"
131414,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/optimizer/filter/NumericalFilterOptimizerTest.java,166,,"    Assert.assertEquals(rewrite(""SELECT * FROM testTable WHERE floatColumn > "" + Double.MAX_VALUE),"
131415,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/reduce/PostAggregationHandlerTest.java,37,,"      DataSchema dataSchema = new DataSchema(new String[]{""sum(m1)""}, new ColumnDataType[]{ColumnDataType.DOUBLE});"
131416,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/predicate/PredicateTest.java,43,,"    assertEquals(testSerDe(""foo !=123""), ""foo != '123'"");"
131417,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,66,,"        assertEquals(queryContext.getTableName(), ""testTable"");"
131418,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,119,,"        assertEquals(selectExpressions.get(0), ExpressionContext.forIdentifier(""foo""));"
131419,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,121,,"        assertEquals(selectExpressions.get(1), ExpressionContext.forIdentifier(""bar""));"
131420,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,154,,"                    ExpressionContext.forIdentifier(""foobar"")))));"
131421,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,188,,"            new FunctionContext(FunctionContext.Type.TRANSFORM, ""add"", Arrays"
131422,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,194,,"            new FunctionContext(FunctionContext.Type.TRANSFORM, ""sub"","
131423,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,231,,"            new FunctionContext(FunctionContext.Type.AGGREGATION, ""sum"", Collections.singletonList(ExpressionContext"
131424,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,417,,"              Collections.singletonList(ExpressionContext.forIdentifier(""col1"")))));"
131425,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,419,,"          new FunctionContext(FunctionContext.Type.AGGREGATION, ""max"","
131426,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,420,,"              Collections.singletonList(ExpressionContext.forIdentifier(""col2"")))));"
131427,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/request/context/utils/BrokerRequestToQueryContextConverterTest.java,462,,"              Collections.singletonList(ExpressionContext.forIdentifier(""col4"")))));"
131428,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,65,,"          ""1020"")};"
131429,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,71,,"          ""5060"")};"
131430,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,86,,"    when(indexSegment.getColumnNames()).thenReturn(new HashSet<>(Arrays.asList(""foo"", ""bar"", ""foobar"")));"
131431,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,86,,"    when(indexSegment.getColumnNames()).thenReturn(new HashSet<>(Arrays.asList(""foo"", ""bar"", ""foobar"")));"
131432,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,86,,"    when(indexSegment.getColumnNames()).thenReturn(new HashSet<>(Arrays.asList(""foo"", ""bar"", ""foobar"")));"
131433,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,93,,"    assertEquals(expressions.get(0).toString(), ""add(foo,'1')"");"
131434,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,95,,"    assertEquals(expressions.get(2).toString(), ""sub(bar,'2')"");"
131435,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,227,,"        {""0"", ""1.0"", ""2.0"", ""3.0"", ""4"", new String[]{""5""}, new String[]{""6.0""}, new String[]{""7.0""}, new String[]{""8.0""}, new String[]{""9""}, ""1020""};"
131436,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,227,,"        {""0"", ""1.0"", ""2.0"", ""3.0"", ""4"", new String[]{""5""}, new String[]{""6.0""}, new String[]{""7.0""}, new String[]{""8.0""}, new String[]{""9""}, ""1020""};"
131437,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,227,,"        {""0"", ""1.0"", ""2.0"", ""3.0"", ""4"", new String[]{""5""}, new String[]{""6.0""}, new String[]{""7.0""}, new String[]{""8.0""}, new String[]{""9""}, ""1020""};"
131438,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/query/selection/SelectionOperatorServiceTest.java,227,,"        {""0"", ""1.0"", ""2.0"", ""3.0"", ""4"", new String[]{""5""}, new String[]{""6.0""}, new String[]{""7.0""}, new String[]{""8.0""}, new String[]{""9""}, ""1020""};"
131439,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/realtime/stream/StreamConfigTest.java,44,,"    String streamType = ""fakeStream"";"
131440,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/realtime/stream/StreamConfigTest.java,45,,"    String topic = ""fakeTopic"";"
131441,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/realtime/stream/StreamConfigTest.java,46,,"    String tableName = ""fakeTable_REALTIME"";"
131442,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/PartitionerTest.java,70,,"            .setColumnName(""foo"").build();"
131443,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/RecordFilterTest.java,70,,"    row.putValue(""colA"", ""5"");"
131444,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/RecordFilterTest.java,71,,"    row.putValue(""colB"", ""5"");"
131445,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/RecordTransformerTest.java,54,,"    transformFunctionMap.put(""foo"", ""toEpochDays(foo)"");"
131446,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/RecordTransformerTest.java,59,,"    transformFunctionMap.put(""bar"", ""badFunction()"");"
131447,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/ReducerTest.java,81,,"    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""testTable"").build();"
131448,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,66,,"      new TableConfigBuilder(TableType.OFFLINE).setTableName(""myTable"").setTimeColumnName(""timeValue"")"
131449,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,69,,"      .addSingleValueDimension(""campaign"", FieldSpec.DataType.STRING, ""xyz"").addMetric(""clicks"", FieldSpec.DataType.INT)"
131450,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,69,,"      .addSingleValueDimension(""campaign"", FieldSpec.DataType.STRING, ""xyz"").addMetric(""clicks"", FieldSpec.DataType.INT)"
131451,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,69,,"      .addSingleValueDimension(""campaign"", FieldSpec.DataType.STRING, ""xyz"").addMetric(""clicks"", FieldSpec.DataType.INT)"
131452,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,72,,"      .asList(new Object[]{""abc"", 1000, 1597719600000L}, new Object[]{""pqr"", 2000, 1597773600000L},"
131453,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentMapperTest.java,72,,"      .asList(new Object[]{""abc"", 1000, 1597719600000L}, new Object[]{""pqr"", 2000, 1597773600000L},"
131454,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,74,,"      .newArrayList(new Object[]{""abc"", 1000, 1597719600000L}, new Object[]{null, 2000, 1597773600000L},"
131455,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,77,,"          new Object[]{""xyz"", 4000, 1597856400000L}, new Object[]{null, 1000, 1597878000000L},"
131456,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,88,,"    _tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""myTable"").setTimeColumnName(""time"").build();"
131457,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,93,,"        new Schema.SchemaBuilder().setSchemaName(""mySchema"").addSingleValueDimension(""campaign"", DataType.STRING, """")"
131458,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,95,,"            .addMetric(""clicks"", DataType.INT, 1000)"
131459,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/framework/SegmentProcessorFrameworkTest.java,287,,"    assertEquals(segmentMetadata.getName(), ""myTable_1597719600000_1597892400000_0"");"
131460,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/genericrow/GenericRowSerDeTest.java,44,,"    _fieldSpecs = Arrays.asList(new DimensionFieldSpec(""intSV"", DataType.INT, true),"
131461,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/segment/processing/genericrow/GenericRowSerDeTest.java,48,,"        new DimensionFieldSpec(""bytesSV"", DataType.BYTES, true), new DimensionFieldSpec(""nullSV"", DataType.INT, true),"
131462,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/transport/QueryRoutingTest.java,93,,"        _queryRouter.submitQuery(requestId, ""testTable"", BROKER_REQUEST, ROUTING_TABLE, null, null, 1_000L);"
131463,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/PeerServerSegmentFinderTest.java,102,,"    httpServerURIs.contains(new URI(StringUtil.join(""/"", ""http://"" + HOST_1_NAME + "":"" + ADMIN_PORT, ""segments"", TABLE_NAME_WITH_TYPE, SEGMENT_1)));"
131464,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,86,,"        .addDateTime(TIME_COLUMN, DataType.LONG, ""1:MILLISECONDS:EPOCH"", ""1:HOURS"").build();"
131465,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,86,,"        .addDateTime(TIME_COLUMN, DataType.LONG, ""1:MILLISECONDS:EPOCH"", ""1:HOURS"").build();"
131466,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,94,,"        new IngestionConfig(null, null, null, Lists.newArrayList(new TransformConfig(""colA"", ""round(colB, 1000)"")), null))"
131467,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,167,,"    DimensionFieldSpec dimensionFieldSpec = new DimensionFieldSpec(""dim1"", DataType.STRING, true);"
131468,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,190,,"        new Schema.SchemaBuilder().addTime(new TimeGranularitySpec(DataType.LONG, TimeUnit.MILLISECONDS, ""time""), null)"
131469,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,215,,"        .addTime(new TimeGranularitySpec(DataType.LONG, TimeUnit.MILLISECONDS, ""incoming""),"
131470,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,217,,"                TimeGranularitySpec.TimeFormat.SIMPLE_DATE_FORMAT.toString(), ""outgoing"")).build();"
131471,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,279,,"        ""{\""schemaName\"":\""testSchema\"","" + ""\""dimensionFieldSpecs\"":[ {\""name\"":\""dim1\"",\""dataType\"":\""STRING\""}],"""
131472,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,279,,"        ""{\""schemaName\"":\""testSchema\"","" + ""\""dimensionFieldSpecs\"":[ {\""name\"":\""dim1\"",\""dataType\"":\""STRING\""}],"""
131473,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/core/util/SchemaUtilsTest.java,315,,"            + ""\""dateTimeFieldSpecs\"":[{\""name\"":\""dt1\"",\""dataType\"":\""INT\"",\""format\"":\""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd\"",\""granularity\"":\""1:DAYS\""}]}"");"
131474,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/BaseQueriesTest.java,75,,"  @SuppressWarnings({""rawtypes"", ""unchecked""})"
131475,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/BooleanQueriesTest.java,61,,"  private static final String BOOLEAN_COLUMN = ""booleanColumn"";"
131476,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,89,,"  private static final String INT_COLUMN = ""intColumn"";"
131477,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,90,,"  private static final String LONG_COLUMN = ""longColumn"";"
131478,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,91,,"  private static final String FLOAT_COLUMN = ""floatColumn"";"
131479,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,92,,"  private static final String DOUBLE_COLUMN = ""doubleColumn"";"
131480,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,93,,"  private static final String STRING_COLUMN = ""stringColumn"";"
131481,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,94,,"  private static final String BYTES_COLUMN = ""bytesColumn"";"
131482,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/DistinctQueriesTest.java,100,,"  private static final String RAW_BYTES_COLUMN = ""rawBytesColumn"";"
131483,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/FSTBasedRegexpLikeQueriesTest.java,308,,"    expected.add(new Serializable[]{1000, ""www.domain1.com/a""});"
131484,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/FSTBasedRegexpLikeQueriesTest.java,309,,"    expected.add(new Serializable[]{1001, ""www.domain1.co.ab/b""});"
131485,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentAggregationMultiValueQueriesTest.java,45,,"    String query = ""SELECT"" + AGGREGATION + "" FROM testTable"";"
131486,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentAggregationMultiValueQueriesTest.java,45,,"    String query = ""SELECT"" + AGGREGATION + "" FROM testTable"";"
131487,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentAggregationSingleValueQueriesTest.java,53,,"    String query = ""SELECT"" + AGGREGATION + "" FROM testTable"";"
131488,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentAggregationSingleValueQueriesTest.java,53,,"    String query = ""SELECT"" + AGGREGATION + "" FROM testTable"";"
131489,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionMultiValueQueriesTest.java,55,,"    Assert.assertTrue(columnIndexMap.containsKey(""column1""));"
131490,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionMultiValueQueriesTest.java,56,,"    Assert.assertTrue(columnIndexMap.containsKey(""column6""));"
131491,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionSingleValueQueriesTest.java,55,,"    Assert.assertTrue(columnIndexMap.containsKey(""column1""));"
131492,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionSingleValueQueriesTest.java,56,,"    Assert.assertTrue(columnIndexMap.containsKey(""column11""));"
131493,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionSingleValueQueriesTest.java,174,,"    String query = ""SELECT"" + SELECTION + "" FROM testTable"";"
131494,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InnerSegmentSelectionSingleValueQueriesTest.java,243,,"    Assert.assertTrue(columnIndexMap.containsKey(""column6""));"
131495,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java,82,,"        new DataSchema(new String[]{""valuein(column7,'363','469','246','100000')"", ""countmv(column6)""},"
131496,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java,155,,"        new DataSchema(new String[]{""cnt_column6""}, new DataSchema.ColumnDataType[]{DataSchema.ColumnDataType.LONG});"
131497,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java,182,,"        new String[]{""2147483647.00000""});"
131498,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationMultiValueQueriesTest.java,444,,"        .testInterSegmentAggregationResult(brokerResponse, 400000L, 0L, 400000L, 400000L, new String[]{""2147483647""});"
131499,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,69,,"        new String[]{""2146952047.00000"", ""2147419555.00000""});"
131500,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,69,,"        new String[]{""2146952047.00000"", ""2147419555.00000""});"
131501,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,142,,"        new String[]{""2142595699.00000"", ""2141451242.00000""});"
131502,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,146,,"        new String[]{""2142595699.00000"", ""999309554.00000""});"
131503,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,260,,"          new String[]{""2146791843.00000"", ""2141451242.00000""});"
131504,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,345,,"        new String[]{""2146791843"", ""2141451242""});"
131505,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentAggregationSingleValueQueriesTest.java,349,,"        new String[]{""2142595699"", ""999309554""});"
131506,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,73,,"        new Object[]{""P"", 212961658305696.0}, new Object[]{""PbQd"", 2001454759004.0},"
131507,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,75,,"    dataSchema = new DataSchema(new String[]{""column3"", ""summv(column7)""},"
131508,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,82,,"        .newArrayList(new Object[]{""yQkJTLOQoOqqhkAClgC"", 61100215182228.0}, new Object[]{""mhoVvrJm"", 5806796153884.0},"
131509,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,82,,"        .newArrayList(new Object[]{""yQkJTLOQoOqqhkAClgC"", 61100215182228.0}, new Object[]{""mhoVvrJm"", 5806796153884.0},"
131510,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,83,,"            new Object[]{""kCMyNVGCASKYDdQbftOPaqVMWc"", 51891832239248.0}, new Object[]{""PbQd"", 36532997335388.0});"
131511,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,84,,"    dataSchema = new DataSchema(new String[]{""column5"", ""summv(column7)""},"
131512,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,90,,"    results = Lists.newArrayList(new Object[]{""NCoFku"", 489626381288.0}, new Object[]{""mhoVvrJm"", 5806796153884.0},"
131513,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,91,,"        new Object[]{""JXRmGakTYafZFPm"", 18408231081808.0}, new Object[]{""PbQd"", 36532997335388.0},"
131514,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderByMultiValueQueriesTest.java,92,,"        new Object[]{""OKyOqU"", 51067166589176.0});"
131515,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,149,,"    Assert.assertEquals(dataSchema.getColumnNames(), new String[]{""column11"", ""sum(column1)"", ""min(column6)""});"
131516,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,149,,"    Assert.assertEquals(dataSchema.getColumnNames(), new String[]{""column11"", ""sum(column1)"", ""min(column6)""});"
131517,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,149,,"    Assert.assertEquals(dataSchema.getColumnNames(), new String[]{""column11"", ""sum(column1)"", ""min(column6)""});"
131518,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,173,,"        new Object[]{""gFuH"", 63202785888.0}, new Object[]{""o"", 18105331533948.0}, new Object[]{""t"", 16331923219264.0});"
131519,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,204,,"    results = Lists.newArrayList(new Object[]{"""", ""HEuxNvH"", 3789390396216.0},"
131520,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,205,,"        new Object[]{"""", ""KrNxpdycSiwoRohEiTIlLqDHnx"", 733802350944.0},"
131521,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,206,,"        new Object[]{"""", ""MaztCmmxxgguBUxPti"", 1333941430664.0}, new Object[]{"""", ""dJWwFk"", 55470665124.0000},"
131522,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,206,,"        new Object[]{"""", ""MaztCmmxxgguBUxPti"", 1333941430664.0}, new Object[]{"""", ""dJWwFk"", 55470665124.0000},"
131523,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,207,,"        new Object[]{"""", ""oZgnrlDEtjjVpUoFLol"", 22680162504.0}, new Object[]{""P"", ""HEuxNvH"", 21998672845052.0},"
131524,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,210,,"        new Object[]{""P"", ""TTltMtFiRqUjvOG"", 4462670055540.0}, new Object[]{""P"", ""XcBNHe"", 120021767504.0});"
131525,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,210,,"        new Object[]{""P"", ""TTltMtFiRqUjvOG"", 4462670055540.0}, new Object[]{""P"", ""XcBNHe"", 120021767504.0});"
131526,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,211,,"    dataSchema = new DataSchema(new String[]{""column11"", ""column12"", ""sum(column1)""},"
131527,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentOrderBySingleValueQueriesTest.java,222,,"    results.add(new Object[]{""P"", ""fykKFqiw"", 1574451324140.0});"
131528,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,70,,"    dataSchema = new DataSchema(new String[]{""column8"", ""countmv(column6)""},"
131529,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,73,,"    rows.add(new Object[]{""674022574"", 43600L});"
131530,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,79,,"    dataSchema = new DataSchema(new String[]{""column7"", ""countmv(column6)""},"
131531,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,208,,"    rows.add(new Object[]{""363"", 58236246660.0});"
131532,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,241,,"    rows.add(new Object[]{""118380643"", 5392989.0});"
131533,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,540,,"    rows.add(new Object[]{""371"", 5380174.0});"
131534,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableMultiValueQueriesTest.java,812,,"        new String[]{""column1"", ""column10"", ""column2"", ""column3"", ""column5"", ""column6"", ""column7"", ""column8"", ""column9"","
131535,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,81,,"    dataSchema = new DataSchema(new String[]{""column9"", ""count(*)""},"
131536,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,84,,"    rows.add(new Object[]{""296467636"", 64420L});"
131537,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,284,,"    rows.add(new Object[]{""438926263"", 999309554.0});"
131538,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,449,,"    String[] columnNames = {""distinctcountrawhll(column1)"", ""distinctcountrawhll(column3)""};"
131539,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,711,,"    rows.add(new Object[]{""147745543"", 2147419555.0});"
131540,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,964,,"    Assert.assertEquals(resultTable.getDataSchema().getColumnNames(), new String[]{""column1""});"
131541,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/InterSegmentResultTableSingleValueQueriesTest.java,973,,"    Assert.assertEquals(resultTable.getDataSchema().getColumnNames(), new String[]{""column1"", ""column3""});"
131542,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/JsonPathQueriesTest.java,178,,"        {{""null""}, {""null""}, {""null""}, {""null""}, {""null""}, {""null""}, {""null""}, {""null""}, {""null""}, {""1""}};"
131543,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/JsonPathQueriesTest.java,188,,"        {{1, ""{\""name\"":{\""first\"":\""daffy\"",\""last\"":\""duck\""},\""id\"":101,\""data\"":[\""a\"",\""b\"",\""c\"",\""d\""]}"", ""{\""name\"":{\""first\"":\""daffy\"",\""last\"":\""duck\""},\""id\"":101,\""data\"":[\""a\"",\""b\"",\""c\"",\""d\""]}"", 1L, ""daffy duck""}};"
131544,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/NoDictionaryCompressionQueriesTest.java,217,,"        tempStringRows[i] = ""hello_world_123"";"
131545,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,223,,"          row.putValue(SKILLS_TEXT_COL_NAME, ""software engineering"");"
131546,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,286,,"        new Serializable[]{1005, ""Distributed systems, Java, C++, Go, distributed query engines for analytics and data warehouses, Machine learning, spark, Kubernetes, transaction processing""});"
131547,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,288,,"        new Serializable[]{1009, ""Distributed systems, database development, columnar query engine, database kernel, storage, indexing and transaction processing, building large scale systems""});"
131548,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,290,,"        new Serializable[]{1010, ""Distributed systems, Java, realtime streaming systems, Machine learning, spark, Kubernetes, distributed storage, concurrency, multi-threading""});"
131549,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,292,,"        new Serializable[]{1012, ""Distributed systems, Java, database engine, cluster management, docker image building and distribution""});"
131550,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,294,,"        new Serializable[]{1017, ""Distributed systems, Apache Kafka, publish-subscribe, building and deploying large scale production systems, concurrency, multi-threading, C++, CPU processing, Java""});"
131551,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,296,,"        new Serializable[]{1020, ""Databases, columnar query processing, Apache Arrow, distributed systems, Machine learning, cluster management, docker image building and distribution""});"
131552,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,310,,"        new Serializable[]{1014, ""Apache spark, Java, C++, query processing, transaction processing, distributed storage, concurrency, multi-threading, apache airflow""});"
131553,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,325,,"    expected.add(new Serializable[]{1003, ""Java, C++, worked on open source projects, coursera machine learning""});"
131554,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,326,,"    expected.add(new Serializable[]{1004, ""Machine learning, Tensor flow, Java, Stanford university,""});"
131555,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,330,,"        new Serializable[]{1006, ""Java, Python, C++, Machine learning, building and deploying large scale production systems, concurrency, multi-threading, CPU processing""});"
131556,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,332,,"        new Serializable[]{1007, ""C++, Python, Tensor flow, database kernel, storage, indexing and transaction processing, building large scale systems, Machine learning""});"
131557,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,336,,"        new Serializable[]{1011, ""CUDA, GPU, Python, Machine learning, database kernel, storage, indexing and transaction processing, building large scale systems""});"
131558,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,338,,"        new Serializable[]{1016, ""CUDA, GPU processing, Tensor flow, Pandas, Python, Jupyter notebook, spark, Machine learning, building high performance scalable systems""});"
131559,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,340,,"        new Serializable[]{1019, ""C++, Java, Python, realtime streaming systems, Machine learning, spark, Kubernetes, transaction processing, distributed storage, concurrency, multi-threading, apache airflow""});"
131560,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,374,,"    expected.add(new Serializable[]{1000, ""Accounts, Banking, Insurance, worked in NGO, Java""});"
131561,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,382,,"        new Serializable[]{1008, ""Amazon EC2, AWS, hadoop, big data, spark, building high performance scalable systems, building and deploying large scale production systems, concurrency, multi-threading, Java, C++, CPU processing""});"
131562,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,392,,"        new Serializable[]{1018, ""Realtime stream processing, publish subscribe, columnar processing for data warehouses, concurrency, Java, multi-threading, C++,""});"
131563,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TextSearchQueriesTest.java,1051,,"    QueryParser queryParser = new QueryParser(""skill"", standardAnalyzer);"
131564,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/queries/TimestampQueriesTest.java,63,,"  private static final String TIMESTAMP_COLUMN = ""timestampColumn"";"
131565,./TargetProjects/incubator-pinot/pinot-core/src/test/java/org/apache/pinot/server/realtime/ControllerLeaderLocatorTest.java,63,,"    when(resourceConfig.getSimpleConfig(anyString())).thenReturn(""false"");"
131566,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/compat/tests/ClusterDescriptor.java,27,,"  private static final String ZOOKEEPER_URL = String.format(""http://%s:%s"", DEFAULT_HOST, ZOOKEEPER_PORT);"
131567,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java,328,,"        new String[]{""totalDocs"", ""numServersQueried"", ""numServersResponded"", ""numSegmentsQueried"", ""numSegmentsProcessed"", ""numSegmentsMatched"", ""numDocsScanned"", ""totalDocs"", ""timeUsedMs"", ""numEntriesScannedInFilter"", ""numEntriesScannedPostFilter""};"
131568,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java,473,,"    assertEquals(jsonObject.get(""exceptions"").get(0).get(""errorCode"").asInt(), errorCode);"
131569,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthBatchIntegrationTest.java,102,,"        sendPostRequest(""http://localhost:"" + getRandomBrokerPort() + ""/query/sql"", ""{\""sql\"":\""SELECT now()\""}""));"
131570,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthBatchIntegrationTest.java,102,,"        sendPostRequest(""http://localhost:"" + getRandomBrokerPort() + ""/query/sql"", ""{\""sql\"":\""SELECT now()\""}""));"
131571,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthBatchIntegrationTest.java,103,,"    Assert.assertFalse(response.has(""resultTable""), ""must not return result table"");"
131572,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthBatchIntegrationTest.java,104,,"    Assert.assertTrue(response.get(""exceptions"").get(0).get(""errorCode"").asInt() != 0, ""must return error code"");"
131573,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthTlsRealtimeIntegrationTest.java,115,,"    prop.put(""controller.tls.keystore.password"", ""changeit"");"
131574,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BasicAuthTlsRealtimeIntegrationTest.java,120,,"    prop.put(""controller.access.protocols"", ""https"");"
131575,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java,619,,"                ""Value: "" + aggregationIndex + "" does not match, expected: "" + h2Value + "", got: "" + pinotValue;"
131576,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java,619,,"                ""Value: "" + aggregationIndex + "" does not match, expected: "" + h2Value + "", got: "" + pinotValue;"
131577,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTest.java,178,,"    Assert.assertNotNull(getDebugInfo(""debug/routingTable/"" + tableName));"
131578,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,48,,"  private static final String TIME_COLUMN_NAME = ""millisSinceEpoch"";"
131579,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,65,,"    transformConfigs.add(new TransformConfig(""AmPm"", ""Groovy({DepTime < 1200 ? \""AM\"": \""PM\""}, DepTime)""));"
131580,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,82,,"            .addSingleValueDimension(""DepTime"", FieldSpec.DataType.INT)"
131581,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,156,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""millisSinceEpoch"");"
131582,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,156,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""millisSinceEpoch"");"
131583,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,156,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""millisSinceEpoch"");"
131584,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,157,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(0).asText(), ""LONG"");"
131585,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/IngestionConfigHybridIntegrationTest.java,166,,"    for (int i = 0; i < response.get(""resultTable"").get(""rows"").size(); i++) {"
131586,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,118,,"        map.put(""k1"", ""value-k1-"" + i);"
131587,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,119,,"        map.put(""k2"", ""value-k2-"" + i);"
131588,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,126,,"        complexMap.put(""k3"", Arrays.asList(""value-k3-0-"" + i, ""value-k3-1-"" + i, ""value-k3-2-"" + i));"
131589,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,126,,"        complexMap.put(""k3"", Arrays.asList(""value-k3-0-"" + i, ""value-k3-1-"" + i, ""value-k3-2-"" + i));"
131590,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,126,,"        complexMap.put(""k3"", Arrays.asList(""value-k3-0-"" + i, ""value-k3-1-"" + i, ""value-k3-2-"" + i));"
131591,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131592,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131593,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131594,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131595,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131596,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131597,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,128,,"            .of(""k4-k1"", ""value-k4-k1-"" + i, ""k4-k2"", ""value-k4-k2-"" + i, ""k4-k3"", ""value-k4-k3-"" + i, ""met"", i));"
131598,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,144,,"    String pqlQuery = ""Select "" + MY_MAP_STR_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME;"
131599,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,144,,"    String pqlQuery = ""Select "" + MY_MAP_STR_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME;"
131600,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,146,,"    ArrayNode selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");"
131601,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,146,,"    ArrayNode selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");"
131602,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,151,,"      Assert.assertTrue(value.indexOf(""-k1-"") > 0);"
131603,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,155,,"    pqlQuery = ""Select jsonExtractScalar(myMapStr,'$.k1','STRING') from "" + DEFAULT_TABLE_NAME"
131604,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,201,,"    Assert.assertNotNull(pinotResponse.get(""aggregationResults""));"
131605,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,222,,"    ArrayNode rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");"
131606,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/JsonPathClusterIntegrationTest.java,222,,"    ArrayNode rows = (ArrayNode) pinotResponse.get(""resultTable"").get(""rows"");"
131607,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,136,,"    assertEquals(pinotResponse.get(""exceptions"").size(), 0);"
131608,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,137,,"    JsonNode selectionResults = pinotResponse.get(""selectionResults"").get(""results"");"
131609,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,137,,"    JsonNode selectionResults = pinotResponse.get(""selectionResults"").get(""results"");"
131610,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,183,,"    JsonNode aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");"
131611,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,183,,"    JsonNode aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");"
131612,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,196,,"    JsonNode groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");"
131613,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MapTypeClusterIntegrationTest.java,200,,"      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);"
131614,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,89,,"    pqlQuery = ""SELECT MAX(ArrTime) FROM "" + tableName;"
131615,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,92,,"    pqlQuery = ""SELECT MIN(ArrTime) FROM "" + tableName;"
131616,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,105,,"    sqlQuery2 = ""SELECT COUNT(*) FROM "" + tableName;"
131617,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,111,,"    pqlQuery = ""SELECT MIN(DepDelayMinutes) FROM "" + tableName;"
131618,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,131,,"    pqlQuery = ""SELECT MIN(ArrDelayMinutes) FROM "" + tableName;"
131619,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,151,,"    pqlQuery = ""SELECT MIN(AirlineID) FROM "" + tableName;"
131620,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,175,,"    pqlQuery = ""SELECT MIN(ActualElapsedTime) FROM "" + tableName;"
131621,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,196,,"    pqlQuery = ""SELECT MIN(ArrDelay) FROM "" + tableName;"
131622,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,213,,"    pqlQuery = ""SELECT MAX(DepDelay) FROM "" + tableName;"
131623,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,216,,"    pqlQuery = ""SELECT MIN(DepDelay) FROM "" + tableName;"
131624,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,241,,"    assertEquals(response.get(""numEntriesScannedPostFilter"").asLong(), 0);"
131625,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,242,,"    assertEquals(response.get(""numEntriesScannedInFilter"").asLong(), 0);"
131626,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,243,,"    assertEquals(response.get(""totalDocs"").asLong(), response.get(""numDocsScanned"").asLong());"
131627,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MetadataAndDictionaryAggregationPlanClusterIntegrationTest.java,243,,"    assertEquals(response.get(""totalDocs"").asLong(), response.get(""numDocsScanned"").asLong());"
131628,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,118,,"  private static final String SELECT_STAR_QUERY = ""SELECT * FROM mytable"";"
131629,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,259,,"        JsonNode exceptions = queryResponse.get(""exceptions"");"
131630,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,267,,"          int numDocsScanned = queryResponse.get(""numDocsScanned"").asInt();"
131631,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,332,,"    assertEquals(queryResponse.get(""numEntriesScannedInFilter"").asLong(), numTotalDocs);"
131632,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,344,,"        assertEquals(queryResponse1.get(""totalDocs"").asLong(), numTotalDocs);"
131633,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,357,,"    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(0).asText();"
131634,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,357,,"    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(0).asText();"
131635,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,380,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""1"");"
131636,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,380,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""1"");"
131637,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,392,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(0).asText(), ""LONG"");"
131638,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,392,,"    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(0).asText(), ""LONG"");"
131639,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,452,,"    assertEquals(queryResponse.get(""numSegmentsProcessed"").asLong(), NUM_SEGMENTS);"
131640,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,501,,"    int firstQueryResult = firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();"
131641,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,501,,"    int firstQueryResult = firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();"
131642,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,650,,"    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 91);"
131643,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,754,,"    sqlQuery = ""SELECT COUNT(*) FROM mytable"";"
131644,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,809,,"    groupByResult = response.get(""aggregationResults"").get(0).get(""groupByResult"").get(0);"
131645,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,811,,"    assertEquals(groupByResult.get(""group"").get(0).asText(), ""null"");"
131646,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,870,,"    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""timeconvert(DaysSinceEpoch,'DAYS','SECONDS')"");"
131647,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,873,,"        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')"";"
131648,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,944,,"    pqlQuery = ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"";"
131649,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,947,,"    assertEquals(aggregationResult.get(""function"").asText(), ""max_timeconvert(DaysSinceEpoch,'DAYS','SECONDS')"");"
131650,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,977,,"    String pqlQuery = ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable"";"
131651,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,989,,"        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch limit 10000"";"
131652,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1004,,"        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000"";"
131653,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1026,,"    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch;"
131654,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1029,,"    pqlQuery = ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch;"
131655,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1436,,"    baseQueries.forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));"
131656,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1436,,"    baseQueries.forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));"
131657,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java,1443,,"        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");"
131658,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,456,,"      return joinWithSpaces(""SELECT"", StringUtils.join(_projectionColumns, "", ""), ""FROM"", _pinotTableName,"
131659,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,456,,"      return joinWithSpaces(""SELECT"", StringUtils.join(_projectionColumns, "", ""), ""FROM"", _pinotTableName,"
131660,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,467,,"            h2ProjectionColumns.add(projectionColumn + ""__MV"" + i);"
131661,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,528,,"        if (aggregateColumnAndFunction.startsWith(""AVG("")) {"
131662,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,531,,"        } else if (aggregateColumnAndFunction.startsWith(""DISTINCTCOUNT("")) {"
131663,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/QueryGenerator.java,912,,"          comparisonOperator = ""BETWEEN "" + leftValue + "" AND "" + rightValue;"
131664,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java,162,,"    pqlQuery = ""SELECT MAX("" + column + "") FROM "" + getTableName();"
131665,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTest.java,222,,"    @StateModelInfo(states = ""{'OFFLINE', 'ONLINE', 'CONSUMING', 'DROPPED'}"", initialState = ""OFFLINE"")"
131666,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTest.java,230,,"      @Transition(from = ""CONSUMING"", to = ""ONLINE"")"
131667,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java,93,,"        new SegmentPartitionConfig(Collections.singletonMap(PARTITION_COLUMN, new ColumnPartitionConfig(""murmur"", 2))));"
131668,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java,193,,"      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),"
131669,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentPartitionLLCRealtimeClusterIntegrationTest.java,193,,"      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),"
131670,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SimpleMinionClusterIntegrationTest.java,154,,"        ZK_CALLBACK_TIMEOUT_MS, ""Failed to update the controller gauges"");"
131671,./TargetProjects/incubator-pinot/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ThetaSketchIntegrationTest.java,138,,"      query = ""select distinctCountThetaSketch(thetaSketchCol, '', """
131672,./TargetProjects/incubator-pinot/pinot-perf/src/main/java/org/apache/pinot/perf/BenchmarkDictionary.java,90,,"        _memoryManager, ""longColumn"")) {"
131673,./TargetProjects/incubator-pinot/pinot-perf/src/main/java/org/apache/pinot/perf/BenchmarkFixedIntArrayOffHeapIdMap.java,80,,"    PinotDataBufferMemoryManager memoryManager = new DirectMemoryManager(""perfTest"");"
131674,./TargetProjects/incubator-pinot/pinot-perf/src/main/java/org/apache/pinot/perf/BenchmarkFixedIntArrayOffHeapIdMap.java,83,,"        new FixedIntArrayOffHeapIdMap(CARDINALITY / 10, 1000, NUM_COLUMNS, memoryManager, ""perfTestWithCache"");"
131675,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/mappers/SegmentCreationMapper.java,191,,"    _logger.info(""*********************************************************************"");"
131676,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/test/java/org/apache/pinot/hadoop/data/IngestionSchemaValidatorTest.java,41,,"    Schema pinotSchema = new Schema.SchemaBuilder().addSingleValueDimension(""column1"", FieldSpec.DataType.LONG)"
131677,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/test/java/org/apache/pinot/hadoop/data/IngestionSchemaValidatorTest.java,42,,"        .addSingleValueDimension(""column2"", FieldSpec.DataType.INT)"
131678,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/test/java/org/apache/pinot/hadoop/data/IngestionSchemaValidatorTest.java,43,,"        .addSingleValueDimension(""column3"", FieldSpec.DataType.STRING)"
131679,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/test/java/org/apache/pinot/hadoop/data/IngestionSchemaValidatorTest.java,44,,"        .addSingleValueDimension(""column7"", FieldSpec.DataType.STRING)"
131680,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-hadoop/src/test/java/org/apache/pinot/hadoop/data/IngestionSchemaValidatorTest.java,45,,"        .addMetric(""met_impressionCount"", FieldSpec.DataType.LONG).build();"
131681,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-ingestion-common/src/main/java/org/apache/pinot/ingestion/jobs/SegmentUriPushJob.java,45,,"        String.format(""Config: %s is missing in job property file."", JobConfigConstants.PATH_TO_OUTPUT));"
131682,./TargetProjects/incubator-pinot/pinot-plugins/pinot-batch-ingestion/v0_deprecated/pinot-spark/src/main/java/org/apache/pinot/spark/jobs/SparkSegmentCreationFunction.java,159,,"    _logger.info(""*********************************************************************"");"
131683,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,36,,"    testUriToAzureStylePath(""table_0"", ""segment_1"", false);"
131684,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,36,,"    testUriToAzureStylePath(""table_0"", ""segment_1"", false);"
131685,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,37,,"    testUriToAzureStylePath(""table_0"", ""segment %"", false);"
131686,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,38,,"    testUriToAzureStylePath(""table %"", ""segment_1"", false);"
131687,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,52,,"    Assert.assertEquals(AzurePinotFSUtil.convertAzureStylePathToUriStylePath(""a/b""), ""/a/b"");"
131688,./TargetProjects/incubator-pinot/pinot-plugins/pinot-file-system/pinot-adls/src/test/java/org/apache/pinot/plugin/filesystem/test/AzurePinotFSUtilTest.java,57,,"    Assert.assertEquals(AzurePinotFSUtil.convertAzureStylePathToUriStylePath(""table/segment %""), ""/table/segment %"");"
131689,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroSchemaUtil.java,78,,"        jsonSchema.set(""type"", convertStringsToJsonArray(""null"", ""int""));"
131690,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroSchemaUtil.java,78,,"        jsonSchema.set(""type"", convertStringsToJsonArray(""null"", ""int""));"
131691,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,66,,"    simpleRecordSchema = createRecord(""simpleRecord"", null, null, false);"
131692,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,72,,"    complexRecordSchema = createRecord(""complexRecord"", null, null, false);"
131693,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,73,,"    complexFieldSchema = createRecord(""complexField"", null, null, false);"
131694,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,74,,"    complexFieldSchema.setFields(Lists.newArrayList(new Field(""field1"", create(Type.INT), null, null),"
131695,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,75,,"        new Field(""field2"", create(Type.LONG), null, null)));"
131696,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,80,,"    complexListSchema = createRecord(""complexList"", null, null, false);"
131697,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,84,,"    Field map1Field = new Field(""map1"", intStringMapAvroSchema, null, null);"
131698,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,85,,"    Field map2Field = new Field(""map2"", stringIntMapAvroSchema, null, null);"
131699,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordExtractorComplexTypesTest.java,104,,"    map1.put(30, ""foo"");"
131700,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroRecordToPinotRowGeneratorTest.java,39,,"        Collections.singletonList(new Schema.Field(""incomingTime"", Schema.create(Schema.Type.LONG), null, null));"
131701,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroUtilsTest.java,51,,"        .addSingleValueDimension(""hoursSinceEpoch"", DataType.LONG).build();"
131702,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-avro-base/src/test/java/org/apache/pinot/plugin/inputformat/avro/AvroUtilsTest.java,97,,"            .addSingleValueDimension(""tuple.city"", DataType.STRING).addSingleValueDimension(""entries"", DataType.STRING)"
131703,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-json/src/test/java/org/apache/pinot/plugin/inputformat/json/JSONRecordExtractorTest.java,108,,"    map1.put(""one"", 1);"
131704,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-json/src/test/java/org/apache/pinot/plugin/inputformat/json/JSONRecordExtractorTest.java,109,,"    map1.put(""two"", ""too"");"
131705,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-json/src/test/java/org/apache/pinot/plugin/inputformat/json/JSONRecordExtractorTest.java,118,,"    map31.put(""sub1"", 1.1);"
131706,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-json/src/test/java/org/apache/pinot/plugin/inputformat/json/JSONRecordExtractorTest.java,119,,"    map31.put(""sub2"", 1.2);"
131707,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-json/src/test/java/org/apache/pinot/plugin/inputformat/json/JSONRecordExtractorTest.java,121,,"    map3.put(""three"", Arrays.asList(""a"", ""b""));"
131708,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,195,,"        simpleStructBytesVector.setVal(i, StringUtils.encodeUtf8((String) struct1.get(""structString"")));"
131709,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,196,,"        simpleStructLongVector.vector[i] = (long) struct1.get(""structLong"");"
131710,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,197,,"        simpleStructDoubleVector.vector[i] = (double) struct1.get(""structDouble"");"
131711,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,207,,"        complexStructIntVector.vector[i] = (Integer) ((Map<String, Object>) complexStruct.get(""nestedStruct""))"
131712,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,208,,"            .get(""nestedStructInt"");"
131713,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,210,,"            .get(""nestedStructLong"");"
131714,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,221,,"          complexListIntVector.vector[complexListVector.childCount] = (int) complexElement.get(""complexListInt"");"
131715,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,222,,"          complexListDoubleVector.vector[complexListVector.childCount] = (double) complexElement.get(""complexListDouble"");"
131716,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,236,,"          complexMapValueDoubleVector.vector[complexMapVector.childCount] = (double) entry.getValue().get(""doubleField"");"
131717,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,237,,"          complexMapValueBytesVector.setVal(complexMapVector.childCount, StringUtils.encodeUtf8((String) entry.getValue().get(""stringField"")));"
131718,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-orc/src/test/java/org/apache/pinot/plugin/inputformat/orc/ORCRecordExtractorTest.java,306,,"        createStructInput(""key1"", 10, ""key2"", 20),"
131719,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-thrift/src/test/java/org/apache/pinot/plugin/inputformat/thrift/ComplexTypes.java,1173,,"      sb.append(""null"");"
131720,./TargetProjects/incubator-pinot/pinot-plugins/pinot-input-format/pinot-thrift/src/test/java/org/apache/pinot/plugin/inputformat/thrift/ThriftSampleData.java,717,,"        sb.append(""null"");"
131721,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/MergeTaskUtilsTest.java,50,,"        new TableConfigBuilder(TableType.OFFLINE).setTableName(""myTable"").setTimeColumnName(""dateTime"").build();"
131722,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskExecutorTest.java,188,,"    Mockito.when(helixPropertyStore.get(""/CONFIGS/TABLE/"" + TABLE_NAME, null, AccessOption.PERSISTENT))"
131723,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskExecutorTest.java,221,,"    configs.put(MinionConstants.RealtimeToOfflineSegmentsTask.WINDOW_START_MS_KEY, ""1600473600000"");"
131724,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskExecutorTest.java,222,,"    configs.put(MinionConstants.RealtimeToOfflineSegmentsTask.WINDOW_END_MS_KEY, ""1600560000000"");"
131725,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskExecutorTest.java,250,,"    configs.put(MinionConstants.RealtimeToOfflineSegmentsTask.MERGE_TYPE_KEY, ""rollup"");"
131726,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,62,,"    streamConfigs.put(StreamConfigProperties.STREAM_TYPE, ""kafka"");"
131727,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,87,,"        getRealtimeSegmentZKMetadata(""testTable__0__0__12345"", Status.DONE, 5000, 50_000, TimeUnit.MILLISECONDS, null);"
131728,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,220,,"            TimeUnit.MILLISECONDS, ""download1""); // 21 May 2020 8am to 22 May 2020 8am UTC"
131729,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,240,,"    assertEquals(configs.get(MinionConstants.DOWNLOAD_URL_KEY), ""download1,download2"");"
131730,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,241,,"    assertEquals(configs.get(RealtimeToOfflineSegmentsTask.WINDOW_START_MS_KEY), ""1590019200000""); // 21 May 2020 UTC"
131731,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,242,,"    assertEquals(configs.get(RealtimeToOfflineSegmentsTask.WINDOW_END_MS_KEY), ""1590105600000""); // 22 May 2020 UTC"
131732,./TargetProjects/incubator-pinot/pinot-plugins/pinot-minion-tasks/pinot-minion-builtin-tasks/src/test/java/org/apache/pinot/plugin/minion/tasks/realtime_to_offline_segments/RealtimeToOfflineSegmentsTaskGeneratorTest.java,277,,"        getRealtimeSegmentZKMetadata(""testTable__0__1__12345"", Status.DONE, 1590048000000L, 1590134400000L,"
131733,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,57,,"  private static final String TIME_COLUMN_NAME = ""aLong"";"
131734,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,78,,"        new IngestionConfig(new BatchIngestionConfig(Lists.newArrayList(batchConfigMap), ""APPEND"", ""HOURLY""), null,"
131735,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,78,,"        new IngestionConfig(new BatchIngestionConfig(Lists.newArrayList(batchConfigMap), ""APPEND"", ""HOURLY""), null,"
131736,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,84,,"        .addSingleValueDimension(""aString"", FieldSpec.DataType.STRING)"
131737,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,93,,"        .addMultiValueDimension(""aDoubleArray"", FieldSpec.DataType.DOUBLE).addMetric(""anInt"", FieldSpec.DataType.INT)"
131738,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,171,,"    segmentWriter.collect(getGenericRow(""record1"", 1616238000000L));"
131739,./TargetProjects/incubator-pinot/pinot-plugins/pinot-segment-writer/pinot-segment-writer-file-based/src/test/java/org/apache/pinot/plugin/segmentwriter/filebased/FileBasedSegmentWriterTest.java,172,,"    segmentWriter.collect(getGenericRow(""record2"", 1616241600000L));"
131740,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaLowLevelStreamConfigTest.java,76,,"    KafkaLowLevelStreamConfig config = getStreamConfig(""topic"", """", """", """");"
131741,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaLowLevelStreamConfigTest.java,82,,"    KafkaLowLevelStreamConfig config = getStreamConfig(""topic"", ""host1"", """", """");"
131742,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaLowLevelStreamConfigTest.java,97,,"    config = getStreamConfig(""topic"", ""host1"", ""bad value"", """");"
131743,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaLowLevelStreamConfigTest.java,102,,"    config = getStreamConfig(""topic"", ""host1"", ""100"", """");"
131744,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,218,,"    String streamType = ""kafka"";"
131745,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,219,,"    String streamKafkaTopicName = ""theTopic"";"
131746,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,220,,"    String streamKafkaBrokerList = ""abcd:1234,bcde:2345"";"
131747,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,221,,"    String streamKafkaConsumerType = ""simple"";"
131748,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,222,,"    String clientId = ""clientId"";"
131749,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,223,,"    String tableNameWithType = ""table_REALTIME"";"
131750,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,226,,"        new MockKafkaSimpleConsumerFactory(new String[]{""abcd"", ""bcde""}, new int[]{1234, 2345},"
131751,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,226,,"        new MockKafkaSimpleConsumerFactory(new String[]{""abcd"", ""bcde""}, new int[]{1234, 2345},"
131752,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,230,,"    streamConfigMap.put(""streamType"", streamType);"
131753,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,231,,"    streamConfigMap.put(""stream.kafka.topic.name"", streamKafkaTopicName);"
131754,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,232,,"    streamConfigMap.put(""stream.kafka.broker.list"", streamKafkaBrokerList);"
131755,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,233,,"    streamConfigMap.put(""stream.kafka.consumer.type"", streamKafkaConsumerType);"
131756,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,235,,"        .put(""stream.kafka.consumer.factory.class.name"", mockKafkaSimpleConsumerFactory.getClass().getName());"
131757,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,236,,"    streamConfigMap.put(""stream.kafka.decoder.class.name"", ""decoderClass"");"
131758,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-0.9/src/test/java/org/apache/pinot/plugin/stream/kafka09/KafkaPartitionLevelConsumerTest.java,236,,"    streamConfigMap.put(""stream.kafka.decoder.class.name"", ""decoderClass"");"
131759,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,72,,"    props.put(ProducerConfig.CLIENT_ID_CONFIG, ""clientId"");"
131760,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,77,,"        producer.send(new ProducerRecord<>(TEST_TOPIC_1, ""sample_msg_"" + i));"
131761,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,96,,"    String streamType = ""kafka"";"
131762,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,99,,"    String streamKafkaConsumerType = ""simple"";"
131763,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,101,,"    String tableNameWithType = ""tableName_REALTIME"";"
131764,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,104,,"    streamConfigMap.put(""streamType"", streamType);"
131765,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,105,,"    streamConfigMap.put(""stream.kafka.topic.name"", streamKafkaTopicName);"
131766,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,106,,"    streamConfigMap.put(""stream.kafka.broker.list"", streamKafkaBrokerList);"
131767,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,107,,"    streamConfigMap.put(""stream.kafka.consumer.type"", streamKafkaConsumerType);"
131768,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,108,,"    streamConfigMap.put(""stream.kafka.consumer.factory.class.name"", getKafkaConsumerFactoryName());"
131769,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,109,,"    streamConfigMap.put(""stream.kafka.decoder.class.name"", ""decoderClass"");"
131770,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelConsumerTest.java,109,,"    streamConfigMap.put(""stream.kafka.decoder.class.name"", ""decoderClass"");"
131771,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelStreamConfigTest.java,85,,"    KafkaPartitionLevelStreamConfig config = getStreamConfig(""topic"", """", """", """", ""read_committed"");"
131772,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelStreamConfigTest.java,97,,"    KafkaPartitionLevelStreamConfig config = getStreamConfig(""topic"", ""host1"", """", """");"
131773,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelStreamConfigTest.java,112,,"    config = getStreamConfig(""topic"", ""host1"", ""bad value"", """");"
131774,./TargetProjects/incubator-pinot/pinot-plugins/pinot-stream-ingestion/pinot-kafka-2.0/src/test/java/org/apache/pinot/plugin/stream/kafka20/KafkaPartitionLevelStreamConfigTest.java,117,,"    config = getStreamConfig(""topic"", ""host1"", ""100"", """");"
131775,./TargetProjects/incubator-pinot/pinot-segment-local/src/main/java/org/apache/pinot/segment/local/recordtransformer/ComplexTypeTransformer.java,253,,"                String.format(""Caught exception while converting value to JSON string %s"", value), e);"
131776,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/indexsegment/mutable/IntermediateSegmentTest.java,92,,"    segmentGeneratorConfig.setTableName(""testTable"");"
131777,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/realtime/impl/RealtimeSegmentStatsHistoryTest.java,53,,"    final String tmpDir = System.getProperty(""java.io.tmpdir"");"
131778,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/realtime/impl/dictionary/MutableDictionaryTest.java,76,,"      Assert.fail(""Failed with random seed: "" + RANDOM_SEED, t);"
131779,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/realtime/impl/dictionary/MutableDictionaryTest.java,220,,"        throw new UnsupportedOperationException(""Unsupported data type: "" + dataType);"
131780,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ComplexTypeTransformerTest.java,112,,"    ComplexTypeTransformer transformer = new ComplexTypeTransformer(Arrays.asList(""array""), ""."");"
131781,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ComplexTypeTransformerTest.java,127,,"    Assert.assertEquals(""v1"", itr.next().getValue(""array.a""));"
131782,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ComplexTypeTransformerTest.java,162,,"    transformer = new ComplexTypeTransformer(Arrays.asList(""array"", ""array2""), ""."");"
131783,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ComplexTypeTransformerTest.java,180,,"    Assert.assertEquals(""v3"", next.getValue(""array2.b""));"
131784,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/DataTypeTransformerTest.java,50,,"    map = Collections.singletonMap(""testKey"", expectedValue);"
131785,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/DataTypeTransformerTest.java,55,,"    Object[] expectedValues = new Object[]{""testValue1"", ""testValue2""};"
131786,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/DataTypeTransformerTest.java,55,,"    Object[] expectedValues = new Object[]{""testValue1"", ""testValue2""};"
131787,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,47,,"    Schema pinotSchema = new Schema.SchemaBuilder().addSingleValueDimension(""userId"", FieldSpec.DataType.LONG)"
131788,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,48,,"        .addSingleValueDimension(""fullName"", FieldSpec.DataType.STRING)"
131789,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,49,,"        .addMultiValueDimension(""bids"", FieldSpec.DataType.INT)"
131790,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,50,,"        .addSingleValueDimension(""maxBid"", FieldSpec.DataType.INT)"
131791,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,51,,"        .addMultiValueDimension(""map2_keys"", FieldSpec.DataType.STRING)"
131792,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,52,,"        .addMultiValueDimension(""map2_values"", FieldSpec.DataType.INT).addMetric(""cost"", FieldSpec.DataType.DOUBLE)"
131793,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,52,,"        .addMultiValueDimension(""map2_values"", FieldSpec.DataType.INT).addMetric(""cost"", FieldSpec.DataType.DOUBLE)"
131794,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTest.java,53,,"        .addDateTime(""hoursSinceEpoch"", FieldSpec.DataType.LONG, ""1:HOURS:EPOCH"", ""1:HOURS"").build();"
131795,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTimeTest.java,50,,"        .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, ""incoming""), null).build();"
131796,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTimeTest.java,68,,"        .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, ""time""),"
131797,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/ExpressionTransformerTimeTest.java,99,,"            new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.HOURS, ""outgoing"")).build();"
131798,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,42,,"      .addSingleValueDimension(""svInt"", DataType.INT).addSingleValueDimension(""svLong"", DataType.LONG)"
131799,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,42,,"      .addSingleValueDimension(""svInt"", DataType.INT).addSingleValueDimension(""svLong"", DataType.LONG)"
131800,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,43,,"      .addSingleValueDimension(""svFloat"", DataType.FLOAT).addSingleValueDimension(""svDouble"", DataType.DOUBLE)"
131801,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,43,,"      .addSingleValueDimension(""svFloat"", DataType.FLOAT).addSingleValueDimension(""svDouble"", DataType.DOUBLE)"
131802,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,44,,"      .addSingleValueDimension(""svBoolean"", DataType.BOOLEAN).addSingleValueDimension(""svTimestamp"", DataType.TIMESTAMP)"
131803,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,44,,"      .addSingleValueDimension(""svBoolean"", DataType.BOOLEAN).addSingleValueDimension(""svTimestamp"", DataType.TIMESTAMP)"
131804,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,45,,"      .addSingleValueDimension(""svBytes"", DataType.BYTES).addMultiValueDimension(""mvInt"", DataType.INT)"
131805,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,45,,"      .addSingleValueDimension(""svBytes"", DataType.BYTES).addMultiValueDimension(""mvInt"", DataType.INT)"
131806,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,46,,"      .addSingleValueDimension(""svJson"", DataType.JSON)"
131807,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,47,,"      .addMultiValueDimension(""mvLong"", DataType.LONG).addMultiValueDimension(""mvFloat"", DataType.FLOAT)"
131808,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,47,,"      .addMultiValueDimension(""mvLong"", DataType.LONG).addMultiValueDimension(""mvFloat"", DataType.FLOAT)"
131809,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,48,,"      .addMultiValueDimension(""mvDouble"", DataType.DOUBLE)"
131810,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,50,,"      .addSingleValueDimension(""svStringWithNullCharacters"", DataType.STRING)"
131811,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,51,,"      .addSingleValueDimension(""svStringWithLengthLimit"", DataType.STRING)"
131812,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,52,,"      .addMultiValueDimension(""mvString1"", DataType.STRING).addMultiValueDimension(""mvString2"", DataType.STRING)"
131813,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,52,,"      .addMultiValueDimension(""mvString1"", DataType.STRING).addMultiValueDimension(""mvString2"", DataType.STRING)"
131814,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,59,,"    SCHEMA.addField(new DimensionFieldSpec(""$virtual"", DataType.STRING, true, Object.class));"
131815,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,70,,"    record.putValue(""svDouble"", new String[]{""123""});"
131816,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/recordtransformer/RecordTransformerTest.java,155,,"      assertEquals(record.getValue(""mvString2""), new Object[]{""123"", ""123"", ""123.0"", ""123.0"", ""123""});"
131817,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/creator/DictionariesTest.java,207,,"    AbstractColumnStatisticsCollector statsCollector = buildStatsCollector(""column1"", DataType.INT);"
131818,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/creator/DictionariesTest.java,338,,"    statsCollector.collect(""false"");"
131819,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/creator/DictionariesTest.java,344,,"    statsCollector.collect(""true"");"
131820,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/ColumnMetadataTest.java,64,,"        .getSegmentGenSpecWithSchemAndProjectedColumns(new File(filePath), INDEX_DIR, ""daysSinceEpoch"", TimeUnit.HOURS,"
131821,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/forward/FixedByteChunkSVForwardIndexTest.java,100,,"    File outFileEightByte = new File(TEST_FILE + ""8byte"");"
131822,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/forward/mutable/FixedByteMVMutableForwardIndexTest.java,91,,"      Assert.assertEquals(data[i].length, length, ""Failed with seed="" + seed);"
131823,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/LoaderTest.java,199,,"    ColumnMetadata columnMetadata = segmentMetadata.getColumnMetadataFor(""name"");"
131824,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/LoaderTest.java,207,,"    Assert.assertEquals(dict.getStringValue(0), ""lynda 2.0"");"
131825,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/LoaderTest.java,208,,"    Assert.assertEquals(dict.getStringValue(1), ""lynda"");"
131826,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/SegmentPreProcessorTest.java,81,,"  private static final String EXISTING_STRING_COL_DICT = ""column5"";"
131827,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/SegmentPreProcessorTest.java,131,,"        new TableConfigBuilder(TableType.OFFLINE).setTableName(""testTable"").setTimeColumnName(""daysSinceEpoch"").build();"
131828,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/SegmentPreProcessorTest.java,719,,"    ColumnMetadata metricColumnMetadata = segmentMetadata.getColumnMetadataFor(""count"");"
131829,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,63,,"        .getSegmentGenSpecWithSchemAndProjectedColumns(new File(filePath), INDEX_DIR, ""daysSinceEpoch"", TimeUnit.HOURS,"
131830,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,64,,"            ""testTable"");"
131831,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,93,,"        new Schema.SchemaBuilder().setSchemaName(""testTable"").addSingleValueDimension(""column1"", FieldSpec.DataType.INT)"
131832,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,94,,"            .addSingleValueDimension(""column2"", FieldSpec.DataType.INT)"
131833,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,95,,"            .addSingleValueDimension(""column3"", FieldSpec.DataType.STRING)"
131834,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,96,,"            .addSingleValueDimension(""column4"", FieldSpec.DataType.STRING)"
131835,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,97,,"            .addSingleValueDimension(""column5"", FieldSpec.DataType.STRING)"
131836,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,98,,"            .addSingleValueDimension(""column6"", FieldSpec.DataType.INT)"
131837,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,99,,"            .addSingleValueDimension(""column7"", FieldSpec.DataType.INT)"
131838,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,100,,"            .addSingleValueDimension(""column8"", FieldSpec.DataType.INT)"
131839,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,101,,"            .addSingleValueDimension(""column9"", FieldSpec.DataType.INT)"
131840,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,102,,"            .addSingleValueDimension(""column10"", FieldSpec.DataType.INT)"
131841,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,103,,"            .addSingleValueDimension(""column13"", FieldSpec.DataType.INT)"
131842,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,104,,"            .addSingleValueDimension(""count"", FieldSpec.DataType.INT)"
131843,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,106,,"            .addSingleValueDimension(""weeksSinceEpochSunday"", FieldSpec.DataType.INT).build();"
131844,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/loader/defaultcolumn/BaseDefaultColumnHandlerTest.java,124,,"            .addSingleValueDimension(""column11"", FieldSpec.DataType.INT) // add column11"
131845,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/index/writer/FixedByteWidthRowColForwardIndexWriterTest.java,40,,"    File file = new File(""test_single_col_writer.dat"");"
131846,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/readers/RecordReaderSampleDataTest.java,58,,"      .addSingleValueDimension(""column2"", FieldSpec.DataType.INT)"
131847,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectoryTest.java,65,,"        PinotDataBuffer buffer = fpiDir.newBuffer(""col1"", ColumnIndexType.DICTIONARY, 1024)) {"
131848,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/store/FilePerIndexDirectoryTest.java,102,,"      ColumnIndexDirectoryTestHelper.verifyMultipleReads(columnDirectory, ""foo"", 6);"
131849,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/segment/store/SingleFileIndexDirectoryTest.java,80,,"    PinotDataBuffer writtenBuffer = columnDirectory.newBuffer(""foo"", ColumnIndexType.DICTIONARY, 1024);"
131850,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/upsert/PartialUpsertHandlerTest.java,41,,"    partialUpsertStrategies.put(""field1"", UpsertConfig.Strategy.INCREMENT);"
131851,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/IngestionUtilsTest.java,105,,"    dimensionFieldSpec = new DimensionFieldSpec(""hoursSinceEpoch"", FieldSpec.DataType.LONG, true);"
131852,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/IngestionUtilsTest.java,114,,"    dimensionFieldSpec = new DimensionFieldSpec(""tenMinutesSinceEpoch"", FieldSpec.DataType.LONG, true);"
131853,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/IngestionUtilsTest.java,169,,"    Assert.assertTrue(extract.containsAll(Arrays.asList(""timestampColumn"", ""hoursSinceEpoch"")));"
131854,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/IngestionUtilsTest.java,183,,"        .addDateTime(""dateColumn"", FieldSpec.DataType.STRING, ""1:DAYS:SIMPLE_DATE_FORMAT:yyyy-MM-dd"", ""1:DAYS"").build();"
131855,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,213,,"        new Schema.SchemaBuilder().setSchemaName(TABLE_NAME).addSingleValueDimension(""myCol"", FieldSpec.DataType.STRING)"
131856,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,274,,"        new IngestionConfig(null, null, null, Lists.newArrayList(new TransformConfig(""myCol"", ""reverse(anotherCol)"")),"
131857,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,494,,"        .newArrayList(new TierConfig(""tier1"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""30d"","
131858,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,494,,"        .newArrayList(new TierConfig(""tier1"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""30d"","
131859,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,495,,"            TierFactory.PINOT_SERVER_STORAGE_TYPE, ""tier1_tag_OFFLINE""))).build();"
131860,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,502,,"            new TierConfig(""tier2"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""40d"","
131861,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,502,,"            new TierConfig(""tier2"", TierFactory.TIME_SEGMENT_SELECTOR_TYPE, ""40d"","
131862,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,503,,"                TierFactory.PINOT_SERVER_STORAGE_TYPE.toLowerCase(), ""tier2_tag_OFFLINE""))).build();"
131863,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,637,,"        .addSingleValueDimension(""myCol1"", FieldSpec.DataType.STRING)"
131864,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,638,,"        .addMultiValueDimension(""myCol2"", FieldSpec.DataType.INT)"
131865,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,639,,"        .addSingleValueDimension(""intCol"", FieldSpec.DataType.INT).build();"
131866,./TargetProjects/incubator-pinot/pinot-segment-local/src/test/java/org/apache/pinot/segment/local/utils/TableConfigUtilsTest.java,756,,"            .addMultiValueDimension(""multiValCol"", FieldSpec.DataType.STRING).build();"
131867,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/SegmentGeneratorConfigTest.java,40,,"        .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, ""daysSinceEpoch""), null).build();"
131868,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/SegmentGeneratorConfigTest.java,42,,"        new TableConfigBuilder(TableType.OFFLINE).setTableName(""test"").setTimeColumnName(""daysSinceEpoch"").build();"
131869,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/SegmentGeneratorConfigTest.java,70,,"        TimeGranularitySpec.TimeFormat.SIMPLE_DATE_FORMAT + "":yyyyMMdd"", ""Date""), null).build();"
131870,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/name/NormalizedDateSegmentNameGeneratorTest.java,29,,"  private static final String TABLE_NAME = ""myTable"";"
131871,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/name/NormalizedDateSegmentNameGeneratorTest.java,30,,"  private static final String SEGMENT_NAME_PREFIX = ""myTable_daily"";"
131872,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/name/NormalizedDateSegmentNameGeneratorTest.java,101,,"        ""myTable_1970-01-02_1970-01-04"");"
131873,./TargetProjects/incubator-pinot/pinot-segment-spi/src/test/java/org/apache/pinot/segment/spi/creator/name/NormalizedDateSegmentNameGeneratorTest.java,103,,"        ""myTable_1970-01-02_1970-01-04_1"");"
131874,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java,100,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success"", response = TablesList.class), @ApiResponse(code = 500, message = ""Server initialization error"", response = ErrorInfo.class)})"
131875,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java,113,,"      @ApiParam(value = ""Table name including type"", required = true, example = ""myTable_OFFLINE"") @PathParam(""tableName"") String tableName) {"
131876,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java,113,,"      @ApiParam(value = ""Table name including type"", required = true, example = ""myTable_OFFLINE"") @PathParam(""tableName"") String tableName) {"
131877,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/api/resources/TablesResource.java,134,,"  @ApiResponses(value = {@ApiResponse(code = 200, message = ""Success""), @ApiResponse(code = 500, message = ""Internal server error""), @ApiResponse(code = 404, message = ""Table not found"")})"
131878,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/SegmentOnlineOfflineStateModelFactory.java,78,,"  @StateModelInfo(states = ""{'OFFLINE','ONLINE', 'CONSUMING', 'DROPPED'}"", initialState = ""OFFLINE"")"
131879,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/SegmentOnlineOfflineStateModelFactory.java,82,,"    @Transition(from = ""OFFLINE"", to = ""CONSUMING"")"
131880,./TargetProjects/incubator-pinot/pinot-server/src/main/java/org/apache/pinot/server/starter/helix/SegmentOnlineOfflineStateModelFactory.java,92,,"    @Transition(from = ""CONSUMING"", to = ""ONLINE"")"
131881,./TargetProjects/incubator-pinot/pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java,76,,"    String segmentsPath = ""/tables/"" + TableNameBuilder.REALTIME.tableNameWithType(TABLE_NAME) + ""/segments"";"
131882,./TargetProjects/incubator-pinot/pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java,119,,"    Assert.assertEquals(jsonResponse.get(""columns"").size(), 0);"
131883,./TargetProjects/incubator-pinot/pinot-server/src/test/java/org/apache/pinot/server/api/TablesResourceTest.java,219,,"        .format(""/segments/%s/%s/upload"", TableNameBuilder.REALTIME.tableNameWithType(TABLE_NAME),"
131884,./TargetProjects/incubator-pinot/pinot-spi/src/main/java/org/apache/pinot/spi/data/Schema.java,461,,"                  ""Unsupported data type: "" + dataType + "" in DIMENSION/TIME field: "" + fieldName);"
131885,./TargetProjects/incubator-pinot/pinot-spi/src/main/java/org/apache/pinot/spi/stream/StreamConfig.java,144,,"        LOGGER.warn(""Invalid config {}: {}, defaulting to: {}"", connectionTimeoutKey, connectionTimeoutValue,"
131886,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,41,,"    timeFieldSpec = new TimeFieldSpec(new TimeGranularitySpec(DataType.LONG, TimeUnit.MILLISECONDS, ""incoming""));"
131887,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,49,,"    expectedDateTimeFieldSpec = new DateTimeFieldSpec(""incoming"", DataType.INT, ""1:HOURS:EPOCH"", ""1:HOURS"");"
131888,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,49,,"    expectedDateTimeFieldSpec = new DateTimeFieldSpec(""incoming"", DataType.INT, ""1:HOURS:EPOCH"", ""1:HOURS"");"
131889,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,55,,"        new TimeGranularitySpec(DataType.INT, TimeUnit.DAYS, ""SIMPLE_DATE_FORMAT:yyyyMMdd"", ""incoming""));"
131890,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,57,,"        new DateTimeFieldSpec(""incoming"", DataType.INT, ""1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd"", ""1:DAYS"");"
131891,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,86,,"    timeFieldSpec = new TimeFieldSpec(new TimeGranularitySpec(DataType.LONG, TimeUnit.HOURS, ""time""),"
131892,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/DateTimeFieldSpecUtilsTest.java,103,,"        new TimeGranularitySpec(DataType.LONG, TimeUnit.HOURS, ""outgoing""));"
131893,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/readers/GenericRowTest.java,38,,"    second.putValue(""one"", 1);"
131894,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/data/readers/GenericRowTest.java,55,,"    first.putValue(""two"", 2);"
131895,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/env/PinotConfigurationTest.java,44,,"    typedProperties.put(""config.boolean"", ""true"");"
131896,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/env/PinotConfigurationTest.java,69,,"    Assert.assertTrue(listValues.contains(""val1""));"
131897,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/environmentprovider/PinotEnvironmentProviderFactoryTest.java,34,,"    properties.put(""test.connectionTimeoutMillis"", ""100"");"
131898,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/filesystem/LocalPinotFSTest.java,44,,"    Assert.assertTrue(_absoluteTmpDirPath.mkdir(), ""Could not make directory "" + _absoluteTmpDirPath.getPath());"
131899,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/filesystem/LocalPinotFSTest.java,46,,"      testFile = new File(_absoluteTmpDirPath, ""testFile"");"
131900,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/filesystem/LocalPinotFSTest.java,47,,"      Assert.assertTrue(testFile.createNewFile(), ""Could not create file "" + testFile.getPath());"
131901,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/filesystem/LocalPinotFSTest.java,102,,"    File testDir = new File(newAbsoluteTempDirPath, ""testDir"");"
131902,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/ingestion/batch/BatchConfigTest.java,57,,"    batchConfigMap.put(BatchConfigProperties.INPUT_FS_PROP_PREFIX + "".region"", region);"
131903,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/IngestionConfigUtilsTest.java,43,,"    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""myTable"").build();"
131904,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/IngestionConfigUtilsTest.java,56,,"    streamConfigMap.put(""streamType"", ""kafka"");"
131905,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/IngestionConfigUtilsTest.java,105,,"        .setIngestionConfig(new IngestionConfig(new BatchIngestionConfig(null, ""APPEND"", ""HOURLY""), null, null, null, null));"
131906,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/IngestionConfigUtilsTest.java,105,,"        .setIngestionConfig(new IngestionConfig(new BatchIngestionConfig(null, ""APPEND"", ""HOURLY""), null, null, null, null));"
131907,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,68,,"      assertEquals(firstFlattenedRecord.get("".$index""), ""0"");"
131908,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,86,,"      assertEquals(secondFlattenedRecord.get(""..$index""), ""0"");"
131909,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,132,,"      assertEquals(firstFlattenedRecord.get("".name""), ""adam"");"
131910,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,150,,"      assertEquals(firstFlattenedRecord.get(""..street""), ""main st"");"
131911,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,155,,"      assertEquals(secondFlattenedRecord.get(""..street""), ""second st"");"
131912,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,166,,"        assertTrue(flattenedRecord.containsKey("".addresses.$index""));"
131913,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,167,,"        assertTrue(flattenedRecord.containsKey("".addresses..country""));"
131914,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,168,,"        assertTrue(flattenedRecord.containsKey("".addresses..street""));"
131915,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,169,,"        assertTrue(flattenedRecord.containsKey("".addresses..number""));"
131916,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,276,,"            .put(""hoursSinceEpoch"", FieldSpec.FieldType.DATE_TIME).put(""m1"", FieldSpec.FieldType.METRIC).build();"
131917,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,284,,"        .addSingleValueDimension(""entries"", FieldSpec.DataType.STRING)"
131918,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,286,,"        .addDateTime(""hoursSinceEpoch"", FieldSpec.DataType.INT, ""1:HOURS:EPOCH"", ""1:HOURS"").build();"
131919,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/JsonUtilsTest.java,286,,"        .addDateTime(""hoursSinceEpoch"", FieldSpec.DataType.INT, ""1:HOURS:EPOCH"", ""1:HOURS"").build();"
131920,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/TimeConverterTest.java,34,,"        new TimeConverter(new TimeGranularitySpec(FieldSpec.DataType.INT, 5, TimeUnit.HOURS, ""time""));"
131921,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/TimeConverterTest.java,40,,"    assertEquals(converter.toMillisSinceEpoch(""123""), 123 * TimeUnit.HOURS.toMillis(5));"
131922,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/builder/TableNameBuilderTest.java,33,,"    assertEquals(TableNameBuilder.getTableNameVariations(""tableAbc""),"
131923,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/builder/TableNameBuilderTest.java,34,,"        ImmutableSet.of(""tableAbc"", ""tableAbc_REALTIME"", ""tableAbc_OFFLINE""));"
131924,./TargetProjects/incubator-pinot/pinot-spi/src/test/java/org/apache/pinot/spi/utils/builder/TableNameBuilderTest.java,34,,"        ImmutableSet.of(""tableAbc"", ""tableAbc_REALTIME"", ""tableAbc_OFFLINE""));"
131925,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/AuthQuickstart.java,39,,"    properties.put(""controller.segment.fetcher.auth.token"", ""Basic YWRtaW46dmVyeXNlY3JldA=="");"
131926,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/AutoAddInvertedIndexTool.java,27,,"  @Option(name = ""-zkAddress"", required = true, metaVar = ""<string>"", usage = ""Address of the Zookeeper (host:port)"")"
131927,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/GitHubEventsQuickstart.java,121,,"    printStatus(Color.CYAN, ""Query : "" + q1);"
131928,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/GitHubEventsQuickstart.java,123,,"    printStatus(Color.GREEN, ""***************************************************"");"
131929,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java,155,,"    printStatus(Color.CYAN, ""Query : "" + q1);"
131930,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/HybridQuickstart.java,157,,"    printStatus(Color.GREEN, ""***************************************************"");"
131931,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/Quickstart.java,207,,"    printStatus(Color.CYAN, ""Query : "" + q1);"
131932,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/Quickstart.java,209,,"    printStatus(Color.GREEN, ""***************************************************"");"
131933,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/RealtimeQuickStart.java,110,,"    printStatus(Color.CYAN, ""Query : "" + q1);"
131934,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/RealtimeQuickStart.java,112,,"    printStatus(Color.GREEN, ""***************************************************"");"
131935,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AddSchemaCommand.java,37,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131936,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AddTableCommand.java,50,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131937,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AddTenantCommand.java,35,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131938,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AddTenantCommand.java,38,,"  @Option(name = ""-controllerPort"", required = false, metaVar = ""<int>"", usage = ""Port number to start the controller at."")"
131939,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AnonymizeDataCommand.java,38,,"  @Option(name = ""-action"", metaVar = ""<String>"", required = true, usage ="
131940,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/AvroSchemaToPinotSchema.java,53,,"  @Option(name = ""-outputDir"", required = true, metaVar = ""<string>"", usage = ""Path to output directory"")"
131941,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/BootstrapTableCommand.java,67,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131942,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/ChangeTableState.java,36,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller"")"
131943,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java,55,,"  @Option(name = ""-dataDir"", metaVar = ""<string>"", usage = ""Directory containing the data."")"
131944,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/ImportDataCommand.java,62,,"  @Option(name = ""-dataFilePath"", required = true, metaVar = ""<string>"", usage = ""data file path."")"
131945,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/JsonToPinotSchema.java,50,,"  @Option(name = ""-outputDir"", required = true, metaVar = ""<string>"", usage = ""Path to output directory"")"
131946,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/OperateClusterConfigCommand.java,39,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131947,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/PostQueryCommand.java,35,,"  @Option(name = ""-brokerHost"", required = false, metaVar = ""<String>"", usage = ""host name for broker."")"
131948,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RealtimeProvisioningHelperCommand.java,58,,"  @Option(name = ""-tableConfigFile"", required = true, metaVar = ""<String>"")"
131949,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/RebalanceTableCommand.java,46,,"  @Option(name = ""-dryRun"", metaVar = ""<boolean>"", usage = ""Whether to rebalance table in dry-run mode (just log the target assignment without applying changes to the cluster, false by default)"")"
131950,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java,65,,"  @Option(name = ""-zkAddress"", required = false, metaVar = ""<http>"", usage = ""Http address of Zookeeper."", forbids = {""-bootstrapConfigPaths"", ""-bootstrapServices""})"
131951,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StartServiceManagerCommand.java,65,,"  @Option(name = ""-zkAddress"", required = false, metaVar = ""<http>"", usage = ""Http address of Zookeeper."", forbids = {""-bootstrapConfigPaths"", ""-bootstrapServices""})"
131952,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/StreamGitHubEventsCommand.java,35,,"  @Option(name = ""-personalAccessToken"", required = true, metaVar = ""<String>"", usage = ""GitHub personal access token."")"
131953,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/UploadSegmentCommand.java,46,,"  @Option(name = ""-controllerHost"", required = false, metaVar = ""<String>"", usage = ""host name for controller."")"
131954,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/filesystem/PinotFSBenchmarkRunner.java,32,,"  @Option(name = ""-mode"", required = true, metaVar = ""<String>"", usage = ""Test mode. (ALL|LISTFILES|READWRITE|DELETE|RENAME)"")"
131955,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/PerfBenchmarkDriver.java,129,,"      _controllerHost = ""localhost"";"
131956,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/PerfBenchmarkDriverConf.java,29,,"   */ String zkHost = ""localhost"";"
131957,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/PerfBenchmarkRunner.java,41,,"  @Option(name = ""-mode"", required = true, metaVar = ""<String>"", usage = ""Mode of the PerfBenchmarkRunner (startAll|startAllButServer|startServerWithPreLoadedSegments)."")"
131958,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,55,,"  @Option(name = ""-mode"", required = true, metaVar = ""<String>"", usage = ""Mode of query runner (singleThread|multiThreads|targetQPS|increasingQPS)."")"
131959,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,61,,"  @Option(name = ""-queryCount"", required = false, metaVar = ""<int>"", usage = ""Number of queries to run (default 0 = all)."")"
131960,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,280,,"          throw new TimeoutException(""Timeout of "" + timeout + "" sec reached. Aborting"");"
131961,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,280,,"          throw new TimeoutException(""Timeout of "" + timeout + "" sec reached. Aborting"");"
131962,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,325,,"    LOGGER.info(""--------------------------------------------------------------------------------"");"
131963,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/perf/QueryRunner.java,326,,"    LOGGER.info(""FINAL REPORT:"");"
131964,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/segment/converter/SegmentMergeCommand.java,64,,"  @Option(name = ""-inputPaths"", required = true, metaVar = ""<String>"", usage = ""Comma separated input segment files or directories that contains input segments to be merged"")"
131965,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/service/api/resources/PinotServiceManagerInstanceResource.java,167,,"            controllerHost = ""localhost"";"
131966,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEvent.java,99,,"    _userId = user.get(""login"").asText();"
131967,./TargetProjects/incubator-pinot/pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEvent.java,112,,"    String[] repoName = repo.get(""name"").asText().split(""/"");"
131968,./TargetProjects/incubator-retired-blur/blur-command/src/main/java/org/apache/blur/command/TestBlurObjectCommand.java,30,,"    blurObject.accumulate(""docCount"", context.getIndexReader().numDocs());"
131969,./TargetProjects/incubator-retired-blur/blur-command/src/test/java/org/apache/blur/command/CoreTestClusterContext.java,30,,"    throw new RuntimeException(""Not implemented."");"
131970,./TargetProjects/incubator-retired-blur/blur-console/src/test/java/org/apache/blur/console/util/QueryUtilTest.java,54,,"    if (!client.tableList().contains(""queryUnitTable"")) {"
131971,./TargetProjects/incubator-retired-blur/blur-console/src/test/java/org/apache/blur/console/util/QueryUtilTest.java,72,,"    UserContext.setUser(new User(""testUser"",null));"
131972,./TargetProjects/incubator-retired-blur/blur-console/src/test/java/org/apache/blur/console/util/TableUtilTest.java,51,,"    assertEquals(0, data.get(""tables"").size());"
131973,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/command/CommandRunner.java,82,,"  @SuppressWarnings(""unchecked"")"
131974,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/command/CommandUtil.java,81,,"  @SuppressWarnings(""unchecked"")"
131975,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/IndexManager.java,470,,"        LOG.error(""Unknown error while trying to fetch index readers."", e);"
131976,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/IndexManager.java,552,,"        throw new BlurException(""Cannot execute query right now."", null, ErrorType.BACK_PRESSURE);"
131977,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/clusterstatus/ZookeeperClusterStatus.java,236,,"      LOG.debug(""trace getClusterList ["" + (e - s) / 1000000.0 + "" ms]"");"
131978,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/clusterstatus/ZookeeperClusterStatus.java,369,,"        throw new RuntimeException(""Table ["" + table + ""] in cluster ["" + cluster + ""] not found."");"
131979,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/indexserver/DistributedIndexServer.java,369,,"        LOG.error(""Unknown error"", t);"
131980,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/writer/BlurIndexReadOnly.java,65,,"    throw new RuntimeException(""Read-only shard"");"
131981,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/manager/writer/MutatableAction.java,144,,"          throw new RuntimeException(""Not Supported."");"
131982,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/server/cache/ThriftCacheValue.java,45,,"        throw new BException(""Unknown error while trying to read from cache."", e);"
131983,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/server/example/DisableTableAdminServer.java,44,,"      throw new BlurException(""Action not allowed by this user."", null, ErrorType.UNKNOWN);"
131984,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/BlurControllerServer.java,896,,"      LOG.error(""Unknown error while trying to get shard server layout [{0}]"", e, table);"
131985,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/BlurControllerServer.java,1088,,"        throw new BException(""Cannot update data while shard is missing"");"
131986,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/BlurControllerServer.java,1223,,"          LOG.error(""Unknown error during batch mutations"", e);"
131987,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/BlurControllerServer.java,1292,,"          LOG.error(""Unknown error during batch enqueue mutations"", e);"
131988,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/BlurControllerServer.java,1687,,"      LOG.error(""Unknown error during bulk mutation of [{0}]"", e, bulkId);"
131989,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/TableAdmin.java,172,,"        throw new BException(""Table ["" + table + ""] not found."");"
131990,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/TableAdmin.java,172,,"        throw new BException(""Table ["" + table + ""] not found."");"
131991,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/TableAdmin.java,209,,"        LOG.error(""Unknown error while enabling table ["" + table + ""]"", e);"
131992,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/thrift/TableAdmin.java,253,,"        LOG.info(""Stilling waiting"", e);"
131993,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/utils/BlurUtil.java,189,,"  @SuppressWarnings(""unchecked"")"
131994,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/utils/BlurUtil.java,240,,"            connectionString = ""unknown"";"
131995,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/utils/HighlightHelper.java,234,,"  @SuppressWarnings(""unchecked"")"
131996,./TargetProjects/incubator-retired-blur/blur-core/src/main/java/org/apache/blur/utils/ShardUtil.java,50,,"          + "" ]. It should contain only this pattern [A-Za-z0-9_-]"");"
131997,./TargetProjects/incubator-retired-blur/blur-core/src/test/java/org/apache/blur/MiniCluster.java,121,,"      miniCluster.createTable(""test"", client);"
131998,./TargetProjects/incubator-retired-blur/blur-core/src/test/java/org/apache/blur/MiniCluster.java,189,,"      engine.put(""mrMiniCluster"", mrMiniCluster);"
131999,./TargetProjects/incubator-retired-blur/blur-core/src/test/java/org/apache/blur/command/ShardCommandManagerTest.java,88,,"    _manager = new ShardCommandManager(getIndexServer(), null, null, 10, 10, 1000, _config, ""test"");"
